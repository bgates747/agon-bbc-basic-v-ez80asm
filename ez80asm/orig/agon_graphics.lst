PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	BBC Basic for AGON - Graphics stuff
040000             0003   ; Author:	Dean Belfield
040000             0004   ; Created:	04/12/2024
040000             0005   ; Last Updated:	11/12/2024
040000             0006   ;
040000             0007   ; Modinfo:
040000             0008   ; 11/12/2024:	Modified POINT_ to work with OSWORD
040000             0009   
040000             0010   			.ASSUME	ADL = 0
040000             0011   
040000             0012   			INCLUDE	"equs.inc"
040000             0001*  ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0002*  STAVAR: EQU 0x0000
040000             0003*  ACCS: EQU 0x0000
040000             0004*  ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0005*  
040000             0006*  ;
040000             0007*  ; Title:	BBC Basic for AGON - Equs
040000             0008*  ; Author:	Dean Belfield
040000             0009*  ; Created:	04/12/2024
040000             0010*  ; Last Updated:	05/12/2024
040000             0011*  ;
040000             0012*  ; Modinfo:
040000             0013*  ; 05/12/2024:	Removed Stack_Top
040000             0014*  
040000             0015*  ;			XREF		STAVAR
040000             0016*  ;			XREF		ACCS
040000             0017*  
040000             0018*  RAM_Top:		EQU		0FF00h
040000             0019*  
040000             0020*  ; For GPIO
040000             0021*  ; PA not available on eZ80L92
040000             0022*  ;
040000             0023*  PA_DR:			EQU		96h
040000             0024*  PA_DDR:			EQU		97h
040000             0025*  PA_ALT1:		EQU		98h
040000             0026*  PA_ALT2:		EQU		99h
040000             0027*  PB_DR:          	EQU		9Ah
040000             0028*  PB_DDR:        	 	EQU		9Bh
040000             0029*  PB_ALT1:        	EQU		9Ch
040000             0030*  PB_ALT2:        	EQU		9Dh
040000             0031*  PC_DR:          	EQU		9Eh
040000             0032*  PC_DDR:         	EQU		9Fh
040000             0033*  PC_ALT1:        	EQU		A0h
040000             0034*  PC_ALT2:        	EQU		A1h
040000             0035*  PD_DR:          	EQU		A2h
040000             0036*  PD_DDR:			EQU		A3h
040000             0037*  PD_ALT1:		EQU		A4h
040000             0038*  PD_ALT2:		EQU		A5h
040000             0039*  
040000             0040*  GPIOMODE_OUT:		EQU		0	; Output
040000             0041*  GPIOMODE_IN:		EQU		1	; Input
040000             0042*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
040000             0043*  GPIOMODE_SIO:		EQU		3	; Open Source IO
040000             0044*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040000             0045*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
040000             0046*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040000             0047*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040000             0048*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040000             0049*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040000             0050*  
040000             0051*  ; Originally in ram.asm
040000             0052*  ;
040000             0053*  OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
040000             0054*  PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
040000             0055*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
040000             0056*  
040000             0057*  ; Originally in main.asm
040000             0058*  ;
040000             0059*  CR:			EQU     0DH
040000             0060*  LF:			EQU     0AH
040000             0061*  ESC:			EQU     1BH
040000             0013   			INCLUDE "macros.inc"
040000             0001*  ;
040000             0002*  ; Title:	BBC Basic Interpreter - Z80 version
040000             0003*  ;		Useful macros
040000             0004*  ; Author:	Dean Belfield
040000             0005*  ; Created:	04/12/2024
040000             0006*  ; Last Updated:	04/12/2024
040000             0007*  ;
040000             0008*  ; Modinfo:
040000             0009*  
040000             0010*          MACRO EXREG rp1, rp2
040000             0011*          PUSH    rp1
040000             0012*          POP     rp2
040000             0013*          ENDMACRO
040000             0014*  
040000             0015*          MACRO ADD8U_DE reg
040000             0016*          ADD     A, E
040000             0017*          LD      E, A
040000             0018*          ADC     A, D
040000             0019*          SUB     E
040000             0020*          LD      D, A
040000             0021*          ENDMACRO
040000             0022*  
040000             0023*          MACRO ADD8U_HL reg
040000             0024*          ADD     A, L
040000             0025*          LD      L, A
040000             0026*          ADC     A, H
040000             0027*          SUB     L
040000             0028*          LD      H, A
040000             0029*          ENDMACRO
040000             0030*  
040000             0031*          MACRO VDU VAL
040000             0032*          LD      A, VAL
040000             0033*          CALL    OSWRCH
040000             0034*          ENDMACRO
040000             0035*  
040000             0036*          MACRO SET_GPIO REG, VAL
040000             0037*          IN0     A, (REG)
040000             0038*          OR      VAL
040000             0039*          OUT0    (REG), A
040000             0040*          ENDMACRO
040000             0041*  
040000             0042*          MACRO RES_GPIO REG, VAL
040000             0043*          PUSH    BC
040000             0044*          LD      A, VAL
040000             0045*          CPL
040000             0046*          LD      C, A
040000             0047*          IN0     A, (REG)
040000             0048*          AND     C
040000             0049*          OUT0    (REG), A
040000             0050*          POP     BC
040000             0051*          ENDMACRO
040000             0014   			INCLUDE "mos_api.inc"	; In MOS/src
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
040000             0008*  ;
040000             0009*  ; Modinfo:
040000             0010*  ; 05/08/2022:	Added mos_feof
040000             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0015*  ; 13/10/2022:	Added mos_oscli
040000             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0025*  ; 19/05/2023:	Added sysvar_scrMode
040000             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0027*  ; 03/08/2023:	Added mos_setkbvector
040000             0028*  ; 10/08/2023:	Added mos_getkbmap
040000             0029*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0030*  ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
040000             0031*  ;
040000             0032*  ; VDP control (VDU 23, 0, n)
040000             0033*  ;
040000             0034*  vdp_gp:			EQU 	80h
040000             0035*  vdp_keycode:		EQU 	81h
040000             0036*  vdp_cursor:		EQU	82h
040000             0037*  vdp_scrchar:		EQU	83h
040000             0038*  vdp_scrpixel:		EQU	84h
040000             0039*  vdp_audio:		EQU	85h
040000             0040*  vdp_mode:		EQU	86h
040000             0041*  vdp_rtc:		EQU	87h
040000             0042*  vdp_keystate:		EQU	88h
040000             0043*  vdp_logicalcoords:	EQU	C0h
040000             0044*  vdp_terminalmode:	EQU	FFh
040000             0045*  
040000             0046*  ; MOS high level functions
040000             0047*  ;
040000             0048*  mos_getkey:		EQU	00h
040000             0049*  mos_load:		EQU	01h
040000             0050*  mos_save:		EQU	02h
040000             0051*  mos_cd:			EQU	03h
040000             0052*  mos_dir:		EQU	04h
040000             0053*  mos_del:		EQU	05h
040000             0054*  mos_ren:		EQU	06h
040000             0055*  mos_mkdir:		EQU	07h
040000             0056*  mos_sysvars:		EQU	08h
040000             0057*  mos_editline:		EQU	09h
040000             0058*  mos_fopen:		EQU	0Ah
040000             0059*  mos_fclose:		EQU	0Bh
040000             0060*  mos_fgetc:		EQU	0Ch
040000             0061*  mos_fputc:		EQU	0Dh
040000             0062*  mos_feof:		EQU	0Eh
040000             0063*  mos_getError:		EQU	0Fh
040000             0064*  mos_oscli:		EQU	10h
040000             0065*  mos_copy:		EQU	11h
040000             0066*  mos_getrtc:		EQU	12h
040000             0067*  mos_setrtc:		EQU	13h
040000             0068*  mos_setintvector:	EQU	14h
040000             0069*  mos_uopen:		EQU	15h
040000             0070*  mos_uclose:		EQU	16h
040000             0071*  mos_ugetc:		EQU	17h
040000             0072*  mos_uputc:		EQU 	18h
040000             0073*  mos_getfil:		EQU	19h
040000             0074*  mos_fread:		EQU	1Ah
040000             0075*  mos_fwrite:		EQU	1Bh
040000             0076*  mos_flseek:		EQU	1Ch
040000             0077*  mos_setkbvector:	EQU	1Dh
040000             0078*  mos_getkbmap:		EQU	1Eh
040000             0079*  mos_i2c_open:		EQU	1Fh
040000             0080*  mos_i2c_close:		EQU	20h
040000             0081*  mos_i2c_write:		EQU	21h
040000             0082*  mos_i2c_read:		EQU	22h
040000             0083*  
040000             0084*  
040000             0085*  ; FatFS file access functions
040000             0086*  ;
040000             0087*  ffs_fopen:		EQU	80h
040000             0088*  ffs_fclose:		EQU	81h
040000             0089*  ffs_fread:		EQU	82h
040000             0090*  ffs_fwrite:		EQU	83h
040000             0091*  ffs_flseek:		EQU	84h
040000             0092*  ffs_ftruncate:		EQU	85h
040000             0093*  ffs_fsync:		EQU	86h
040000             0094*  ffs_fforward:		EQU	87h
040000             0095*  ffs_fexpand:		EQU	88h
040000             0096*  ffs_fgets:		EQU	89h
040000             0097*  ffs_fputc:		EQU	8Ah
040000             0098*  ffs_fputs:		EQU	8Bh
040000             0099*  ffs_fprintf:		EQU	8Ch
040000             0100*  ffs_ftell:		EQU	8Dh
040000             0101*  ffs_feof:		EQU	8Eh
040000             0102*  ffs_fsize:		EQU	8Fh
040000             0103*  ffs_ferror:		EQU	90h
040000             0104*  
040000             0105*  ; FatFS directory access functions
040000             0106*  ;
040000             0107*  ffs_dopen:		EQU	91h
040000             0108*  ffs_dclose:		EQU	92h
040000             0109*  ffs_dread:		EQU	93h
040000             0110*  ffs_dfindfirst:		EQU	94h
040000             0111*  ffs_dfindnext:		EQU	95h
040000             0112*  
040000             0113*  ; FatFS file and directory management functions
040000             0114*  ;
040000             0115*  ffs_stat:		EQU	96h
040000             0116*  ffs_unlink:		EQU	97h
040000             0117*  ffs_rename:		EQU	98h
040000             0118*  ffs_chmod:		EQU	99h
040000             0119*  ffs_utime:		EQU	9Ah
040000             0120*  ffs_mkdir:		EQU	9Bh
040000             0121*  ffs_chdir:		EQU	9Ch
040000             0122*  ffs_chdrive:		EQU	9Dh
040000             0123*  ffs_getcwd:		EQU	9Eh
040000             0124*  
040000             0125*  ; FatFS volume management and system configuration functions
040000             0126*  ;
040000             0127*  ffs_mount:		EQU	9Fh
040000             0128*  ffs_mkfs:		EQU	A0h
040000             0129*  ffs_fdisk:		EQU	A1h
040000             0130*  ffs_getfree:		EQU	A2h
040000             0131*  ffs_getlabel:		EQU	A3h
040000             0132*  ffs_setlabel:		EQU	A4h
040000             0133*  ffs_setcp:		EQU	A5h
040000             0134*  
040000             0135*  ; File access modes
040000             0136*  ;
040000             0137*  fa_read:		EQU	01h
040000             0138*  fa_write:		EQU	02h
040000             0139*  fa_open_existing:	EQU	00h
040000             0140*  fa_create_new:		EQU	04h
040000             0141*  fa_create_always:	EQU	08h
040000             0142*  fa_open_always:		EQU	10h
040000             0143*  fa_open_append:		EQU	30h
040000             0144*  
040000             0145*  ; System variable indexes for api_sysvars
040000             0146*  ; Index into _sysvars in globals.asm
040000             0147*  ;
040000             0148*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0149*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0150*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0151*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0152*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0153*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0154*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0155*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0156*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0157*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0158*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0159*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0160*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0161*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0162*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0163*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0164*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0165*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0166*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0167*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0168*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0169*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0170*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0171*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0172*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0173*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0174*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0175*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0176*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0177*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0178*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0179*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0180*  ;
040000             0181*  ; Flags for the VPD protocol
040000             0182*  ;
040000             0183*  vdp_pflag_cursor:	EQU	00000001b
040000             0184*  vdp_pflag_scrchar:	EQU	00000010b
040000             0185*  vdp_pflag_point:	EQU	00000100b
040000             0186*  vdp_pflag_audio:	EQU	00001000b
040000             0187*  vdp_pflag_mode:		EQU	00010000b
040000             0188*  vdp_pflag_rtc:		EQU	00100000b
040000             0189*  vdp_pflag_mouse:	EQU	01000000b
040000             0190*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0191*  
040000             0192*  
040000             0193*  ; FatFS structures
040000             0194*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0195*  ;
040000             0196*  ; Object ID and allocation information (FFOBJID)
040000             0197*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0198*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0199*  FFOBJID.attr:     EQU 5    ; Object attribute
040000             0200*  FFOBJID.stat:     EQU 6    ; Object chain status
040000             0201*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0202*  FFOBJID.objsize:  EQU 11   ; Object size
040000             0203*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0204*  ;
040000             0205*  ; File object structure (FIL)
040000             0206*  ;
040000             0207*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0208*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0209*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0210*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0211*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0212*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0213*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0214*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0215*  FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0216*  ;
040000             0217*  ; Directory object structure (DIR)
040000             0218*  ;
040000             0219*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0220*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0221*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0222*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0223*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0224*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0225*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0226*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0227*  ;
040000             0228*  ; File information structure (FILINFO)
040000             0229*  ;
040000             0230*  FILINFO.fsize:    EQU 0    ; File size
040000             0231*  FILINFO.fdate:    EQU 4    ; Modified date
040000             0232*  FILINFO.ftime:    EQU 6    ; Modified time
040000             0233*  FILINFO.fattrib:  EQU 8    ; File attribute
040000             0234*  FILINFO.altname:  EQU 9    ; Alternative file name
040000             0235*  FILINFO.fname:    EQU 22   ; Primary file name
040000             0236*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0237*  ;
040000             0238*  ; Macro for calling the API
040000             0239*  ; Parameters:
040000             0240*  ; - function: One of the function numbers listed above
040000             0241*  ;
040000             0242*  			MACRO MOSCALL	function
040000             0243*  			LD	A, function
040000             0244*  			RST.LIS	08h
040000             0245*  			ENDMACRO
040000             0015   
040000             0016   ;			SEGMENT CODE
040000             0017   
040000             0018   ;			XDEF	MODE_
040000             0019   ;			XDEF	COLOUR_
040000             0020   ;			XDEF	POINT_
040000             0021   ;			XDEF	GETSCHR
040000             0022   ;			XDEF	GETSCHR_1
040000             0023   
040000             0024   ;			XREF	ACCS
040000             0025   ;			XREF	OSWRCH
040000             0026   ;			XREF	ASC_TO_NUMBER
040000             0027   ;			XREF	EXTERR
040000             0028   ;			XREF	EXPRI
040000             0029   ;			XREF	COMMA
040000             0030   ;			XREF	XEQ
040000             0031   ;			XREF	NXT
040000             0032   ;			XREF	BRAKET
040000             0033   ;			XREF	CRTONULL
040000             0034   ;			XREF	NULLTOCR
040000             0035   ;			XREF	CRLF
040000             0036   ;			XREF	EXPR_W2
040000             0037   ;			XREF	INKEY1
040000             0038   
040000             0039   ; MODE n: Set video mode
040000             0040   ;
040000 DD E5       0041   MODE_:			PUSH	IX			; Get the system vars in IX
040002             0042   			MOSCALL	mos_sysvars		; Reset the semaphore
040002 3E 08       0001M  			LD	A, function
040004 49 CF       0002M  			RST.LIS	08h
040006 5B DD CB 04 0043   			RES.LIL	4, (IX+sysvar_vpd_pflags)
       A6          
04000B CD 00 00    0044   			CALL    EXPRI
04000E D9          0045   			EXX
04000F             0046   			VDU	16H			; Mode change
04000F 3E 16       0001M          LD      A, VAL
040011 CD 00 00    0002M          CALL    OSWRCH
040014             0047   			VDU	L
040014 7D          0001M          LD      A, VAL
040015 CD 00 00    0002M          CALL    OSWRCH
040018             0048   			MOSCALL	mos_sysvars
040018 3E 08       0001M  			LD	A, function
04001A 49 CF       0002M  			RST.LIS	08h
04001C 5B DD CB 04 0049   @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
       66          
040021 28 F9       0050   			JR	Z, @B			; Wait for the result
040023 DD E1       0051   			POP	IX
040025 C3 00 00    0052   			JP	XEQ
040028             0053   
040028             0054   ; GET(x,y): Get the ASCII code of a character on screen
040028             0055   ;
040028 FD 23       0056   GETSCHR:		INC	IY
04002A CD 00 00    0057   			CALL    EXPRI      		; Get X coordinate
04002D D9          0058   			EXX
04002E E5          0059   			PUSH	HL			; Stack X
04002F CD 00 00    0060   			CALL	COMMA
040032 CD 00 00    0061   			CALL	EXPRI			; Get Y coordinate
040035 D9          0062   			EXX
040036 CD 00 00    0063   			CALL	BRAKET			; Closing bracket
040039 D1          0064   			POP	DE			; Pop X back into DE
04003A CD 46 00    0065   			CALL	GETSCHR_1
04003D             0066   ;			JP	INKEY1
04003D 11 00 00    0067   	        	LD	DE,ACCS
040040 12          0068   	                LD	(DE),A
040041 3E 80       0069   	                LD	A,80H
040043 D0          0070           	        RET	NC
040044 1C          0071   	                INC	E
040045 C9          0072                   	RET
040046             0073   ;
040046             0074   ; Fetch a character from the screen
040046             0075   ; - DE: X coordinate
040046             0076   ; - HL: Y coordinate
040046             0077   ; Returns
040046             0078   ; - A: The character or FFh if no match
040046             0079   ; - F: C if match, otherwise NC
040046             0080   ;
040046 DD E5       0081   GETSCHR_1:		PUSH	IX			; Get the system vars in IX
040048             0082   			MOSCALL	mos_sysvars		; Reset the semaphore
040048 3E 08       0001M  			LD	A, function
04004A 49 CF       0002M  			RST.LIS	08h
04004C 5B DD CB 04 0083   			RES.LIL	1, (IX+sysvar_vpd_pflags)
       8E          
040051             0084   			VDU	23
040051 3E 17       0001M          LD      A, VAL
040053 CD 00 00    0002M          CALL    OSWRCH
040056             0085   			VDU	0
040056 3E 00       0001M          LD      A, VAL
040058 CD 00 00    0002M          CALL    OSWRCH
04005B             0086   			VDU	vdp_scrchar
04005B 3E 83       0001M          LD      A, VAL
04005D CD 00 00    0002M          CALL    OSWRCH
040060             0087   			VDU	E
040060 7B          0001M          LD      A, VAL
040061 CD 00 00    0002M          CALL    OSWRCH
040064             0088   			VDU	D
040064 7A          0001M          LD      A, VAL
040065 CD 00 00    0002M          CALL    OSWRCH
040068             0089   			VDU	L
040068 7D          0001M          LD      A, VAL
040069 CD 00 00    0002M          CALL    OSWRCH
04006C             0090   			VDU	H
04006C 7C          0001M          LD      A, VAL
04006D CD 00 00    0002M          CALL    OSWRCH
040070 5B DD CB 04 0091   @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
       4E          
040075 28 F9       0092   			JR	Z, @B			; Wait for the result
040077 5B DD 7E 09 0093   			LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
04007B B7          0094   			OR	A			; Check for 00h
04007C 37          0095   			SCF				; C = character map
04007D 20 01       0096   			JR	NZ, @F			; We have a character, so skip next bit
04007F AF          0097   			XOR	A			; Clear carry
040080 DD E1       0098   @@:			POP	IX
040082 C9          0099   			RET
040083             0100   
040083             0101   ; POINT(x,y): Get the pixel colour of a point on screen
040083             0102   ; Parameters:
040083             0103   ; - DE: X-coordinate
040083             0104   ; - HL: Y-coordinate
040083             0105   ; Returns:
040083             0106   ; -  A: Pixel colour
040083             0107   ;
040083 DD E5       0108   POINT_:			PUSH	IX			; Get the system vars in IX
040085             0109   			MOSCALL	mos_sysvars		; Reset the semaphore
040085 3E 08       0001M  			LD	A, function
040087 49 CF       0002M  			RST.LIS	08h
040089 5B DD CB 04 0110   			RES.LIL	2, (IX+sysvar_vpd_pflags)
       96          
04008E             0111   			VDU	23
04008E 3E 17       0001M          LD      A, VAL
040090 CD 00 00    0002M          CALL    OSWRCH
040093             0112   			VDU	0
040093 3E 00       0001M          LD      A, VAL
040095 CD 00 00    0002M          CALL    OSWRCH
040098             0113   			VDU	vdp_scrpixel
040098 3E 84       0001M          LD      A, VAL
04009A CD 00 00    0002M          CALL    OSWRCH
04009D             0114   			VDU	E
04009D 7B          0001M          LD      A, VAL
04009E CD 00 00    0002M          CALL    OSWRCH
0400A1             0115   			VDU	D
0400A1 7A          0001M          LD      A, VAL
0400A2 CD 00 00    0002M          CALL    OSWRCH
0400A5             0116   			VDU	L
0400A5 7D          0001M          LD      A, VAL
0400A6 CD 00 00    0002M          CALL    OSWRCH
0400A9             0117   			VDU	H
0400A9 7C          0001M          LD      A, VAL
0400AA CD 00 00    0002M          CALL    OSWRCH
0400AD 5B DD CB 04 0118   @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
       56          
0400B2 28 F9       0119   			JR	Z, @B			; Wait for the result
0400B4             0120   ;
0400B4             0121   ; Return the data as a 1 byte index
0400B4             0122   ;
0400B4 5B DD 7E 00 0123   			LD.LIL	A, (IX+(sysvar_scrpixelIndex))
