PC     Output      Line
040000             0001   ; --- Begin mos_api.inc ---
040000             0002   ;
040000             0003   ; Title:	AGON MOS - API for user projects
040000             0004   ; Author:	Dean Belfield
040000             0005   ; Created:	03/08/2022
040000             0006   ; Last Updated:	11/11/2023
040000             0007   ;
040000             0008   ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
040000             0009   ;
040000             0010   ; Modinfo:
040000             0011   ; 05/08/2022:	Added mos_feof
040000             0012   ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0013   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0014   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0015   ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0016   ; 13/10/2022:	Added mos_oscli
040000             0017   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0018   ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0019   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0020   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0021   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0022   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0023   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0024   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0025   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0026   ; 19/05/2023:	Added sysvar_scrMode
040000             0027   ; 05/06/2023:	Added sysvar_rtcEnable
040000             0028   ; 03/08/2023:	Added mos_setkbvector
040000             0029   ; 10/08/2023:	Added mos_getkbmap
040000             0030   ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0031   ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
040000             0032   ;
040000             0033   ; VDP control (VDU 23, 0, n)
040000             0034   ;
040000             0035   vdp_gp:			EQU 	80h
040000             0036   vdp_keycode:		EQU 	81h
040000             0037   vdp_cursor:		EQU	82h
040000             0038   vdp_scrchar:		EQU	83h
040000             0039   vdp_scrpixel:		EQU	84h
040000             0040   vdp_audio:		EQU	85h
040000             0041   vdp_mode:		EQU	86h
040000             0042   vdp_rtc:		EQU	87h
040000             0043   vdp_keystate:		EQU	88h
040000             0044   vdp_logicalcoords:	EQU	C0h
040000             0045   vdp_terminalmode:	EQU	FFh
040000             0046   
040000             0047   ; MOS high level functions
040000             0048   ;
040000             0049   mos_getkey:		EQU	00h
040000             0050   mos_load:		EQU	01h
040000             0051   mos_save:		EQU	02h
040000             0052   mos_cd:			EQU	03h
040000             0053   mos_dir:		EQU	04h
040000             0054   mos_del:		EQU	05h
040000             0055   mos_ren:		EQU	06h
040000             0056   mos_mkdir:		EQU	07h
040000             0057   mos_sysvars:		EQU	08h
040000             0058   mos_editline:		EQU	09h
040000             0059   mos_fopen:		EQU	0Ah
040000             0060   mos_fclose:		EQU	0Bh
040000             0061   mos_fgetc:		EQU	0Ch
040000             0062   mos_fputc:		EQU	0Dh
040000             0063   mos_feof:		EQU	0Eh
040000             0064   mos_getError:		EQU	0Fh
040000             0065   mos_oscli:		EQU	10h
040000             0066   mos_copy:		EQU	11h
040000             0067   mos_getrtc:		EQU	12h
040000             0068   mos_setrtc:		EQU	13h
040000             0069   mos_setintvector:	EQU	14h
040000             0070   mos_uopen:		EQU	15h
040000             0071   mos_uclose:		EQU	16h
040000             0072   mos_ugetc:		EQU	17h
040000             0073   mos_uputc:		EQU 	18h
040000             0074   mos_getfil:		EQU	19h
040000             0075   mos_fread:		EQU	1Ah
040000             0076   mos_fwrite:		EQU	1Bh
040000             0077   mos_flseek:		EQU	1Ch
040000             0078   mos_setkbvector:	EQU	1Dh
040000             0079   mos_getkbmap:		EQU	1Eh
040000             0080   mos_i2c_open:		EQU	1Fh
040000             0081   mos_i2c_close:		EQU	20h
040000             0082   mos_i2c_write:		EQU	21h
040000             0083   mos_i2c_read:		EQU	22h
040000             0084   
040000             0085   
040000             0086   ; FatFS file access functions
040000             0087   ;
040000             0088   ffs_fopen:		EQU	80h
040000             0089   ffs_fclose:		EQU	81h
040000             0090   ffs_fread:		EQU	82h
040000             0091   ffs_fwrite:		EQU	83h
040000             0092   ffs_flseek:		EQU	84h
040000             0093   ffs_ftruncate:		EQU	85h
040000             0094   ffs_fsync:		EQU	86h
040000             0095   ffs_fforward:		EQU	87h
040000             0096   ffs_fexpand:		EQU	88h
040000             0097   ffs_fgets:		EQU	89h
040000             0098   ffs_fputc:		EQU	8Ah
040000             0099   ffs_fputs:		EQU	8Bh
040000             0100   ffs_fprintf:		EQU	8Ch
040000             0101   ffs_ftell:		EQU	8Dh
040000             0102   ffs_feof:		EQU	8Eh
040000             0103   ffs_fsize:		EQU	8Fh
040000             0104   ffs_ferror:		EQU	90h
040000             0105   
040000             0106   ; FatFS directory access functions
040000             0107   ;
040000             0108   ffs_dopen:		EQU	91h
040000             0109   ffs_dclose:		EQU	92h
040000             0110   ffs_dread:		EQU	93h
040000             0111   ffs_dfindfirst:		EQU	94h
040000             0112   ffs_dfindnext:		EQU	95h
040000             0113   
040000             0114   ; FatFS file and directory management functions
040000             0115   ;
040000             0116   ffs_stat:		EQU	96h
040000             0117   ffs_unlink:		EQU	97h
040000             0118   ffs_rename:		EQU	98h
040000             0119   ffs_chmod:		EQU	99h
040000             0120   ffs_utime:		EQU	9Ah
040000             0121   ffs_mkdir:		EQU	9Bh
040000             0122   ffs_chdir:		EQU	9Ch
040000             0123   ffs_chdrive:		EQU	9Dh
040000             0124   ffs_getcwd:		EQU	9Eh
040000             0125   
040000             0126   ; FatFS volume management and system configuration functions
040000             0127   ;
040000             0128   ffs_mount:		EQU	9Fh
040000             0129   ffs_mkfs:		EQU	A0h
040000             0130   ffs_fdisk:		EQU	A1h
040000             0131   ffs_getfree:		EQU	A2h
040000             0132   ffs_getlabel:		EQU	A3h
040000             0133   ffs_setlabel:		EQU	A4h
040000             0134   ffs_setcp:		EQU	A5h
040000             0135   
040000             0136   ; File access modes
040000             0137   ;
040000             0138   fa_read:		EQU	01h
040000             0139   fa_write:		EQU	02h
040000             0140   fa_open_existing:	EQU	00h
040000             0141   fa_create_new:		EQU	04h
040000             0142   fa_create_always:	EQU	08h
040000             0143   fa_open_always:		EQU	10h
040000             0144   fa_open_append:		EQU	30h
040000             0145   
040000             0146   ; System variable indexes for api_sysvars
040000             0147   ; Index into _sysvars in globals.asm
040000             0148   ;
040000             0149   sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0150   sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0151   sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0152   sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0153   sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0154   sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0155   sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0156   sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0157   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0158   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0159   sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0160   sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0161   sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0162   sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0163   sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0164   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0165   sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0166   sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0167   sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0168   sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0169   sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0170   sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0171   sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0172   sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0173   sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0174   sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0175   sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0176   sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0177   sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0178   sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0179   sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0180   sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0181   ;
040000             0182   ; Flags for the VPD protocol
040000             0183   ;
040000             0184   vdp_pflag_cursor:	EQU	00000001b
040000             0185   vdp_pflag_scrchar:	EQU	00000010b
040000             0186   vdp_pflag_point:	EQU	00000100b
040000             0187   vdp_pflag_audio:	EQU	00001000b
040000             0188   vdp_pflag_mode:		EQU	00010000b
040000             0189   vdp_pflag_rtc:		EQU	00100000b
040000             0190   vdp_pflag_mouse:	EQU	01000000b
040000             0191   ; vdp_pflag_buffered:	EQU	10000000b
040000             0192   
040000             0193   
040000             0194   ; FatFS structures
040000             0195   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0196   ;
040000             0197   ; Object ID and allocation information (FFOBJID)
040000             0198   FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0199   FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0200   FFOBJID.attr:     EQU 5    ; Object attribute
040000             0201   FFOBJID.stat:     EQU 6    ; Object chain status
040000             0202   FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0203   FFOBJID.objsize:  EQU 11   ; Object size
040000             0204   FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0205   ;
040000             0206   ; File object structure (FIL)
040000             0207   ;
040000             0208   FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0209   FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0210   FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0211   FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0212   FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0213   FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0214   FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0215   FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0216   FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0217   ;
040000             0218   ; Directory object structure (DIR)
040000             0219   ;
040000             0220   DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0221   DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0222   DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0223   DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0224   DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0225   DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226   DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0227   DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0228   ;
040000             0229   ; File information structure (FILINFO)
040000             0230   ;
040000             0231   FILINFO.fsize:    EQU 0    ; File size
040000             0232   FILINFO.fdate:    EQU 4    ; Modified date
040000             0233   FILINFO.ftime:    EQU 6    ; Modified time
040000             0234   FILINFO.fattrib:  EQU 8    ; File attribute
040000             0235   FILINFO.altname:  EQU 9    ; Alternative file name
040000             0236   FILINFO.fname:    EQU 22   ; Primary file name
040000             0237   FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0238   ;
040000             0239   ; Macro for calling the API
040000             0240   ; Parameters:
040000             0241   ; - function: One of the function numbers listed above
040000             0242   ;
040000             0243   			MACRO MOSCALL	function
040000             0244   			LD	A, function
040000             0245   			RST.LIS	08h
040000             0246   			ENDMACRO 	; --- End mos_api.inc ---
040000             0247   
040000             0248   ; --- Begin equs.inc ---
040000             0249   ; ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0250   ; STAVAR: EQU 0
040000             0251   ; ACCS: EQU 0
040000             0252   ; ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0253   
040000             0254   ;
040000             0255   ; Title:	BBC Basic for AGON - Equs
040000             0256   ; Author:	Dean Belfield
040000             0257   ; Created:	04/12/2024
040000             0258   ; Last Updated:	05/12/2024
040000             0259   ;
040000             0260   ; Modinfo:
040000             0261   ; 05/12/2024:	Removed Stack_Top
040000             0262   
040000             0263   ;			XREF		STAVAR
040000             0264   ;			XREF		ACCS
040000             0265   
040000             0266   RAM_Top:		EQU		0FF00h
040000             0267   
040000             0268   ; For GPIO
040000             0269   ; PA not available on eZ80L92
040000             0270   ;
040000             0271   PA_DR:			EQU		96h
040000             0272   PA_DDR:			EQU		97h
040000             0273   PA_ALT1:		EQU		98h
040000             0274   PA_ALT2:		EQU		99h
040000             0275   PB_DR:          	EQU		9Ah
040000             0276   PB_DDR:        	 	EQU		9Bh
040000             0277   PB_ALT1:        	EQU		9Ch
040000             0278   PB_ALT2:        	EQU		9Dh
040000             0279   PC_DR:          	EQU		9Eh
040000             0280   PC_DDR:         	EQU		9Fh
040000             0281   PC_ALT1:        	EQU		A0h
040000             0282   PC_ALT2:        	EQU		A1h
040000             0283   PD_DR:          	EQU		A2h
040000             0284   PD_DDR:			EQU		A3h
040000             0285   PD_ALT1:		EQU		A4h
040000             0286   PD_ALT2:		EQU		A5h
040000             0287   
040000             0288   GPIOMODE_OUT:		EQU		0	; Output
040000             0289   GPIOMODE_IN:		EQU		1	; Input
040000             0290   GPIOMODE_DIO:		EQU		2	; Open Drain IO
040000             0291   GPIOMODE_SIO:		EQU		3	; Open Source IO
040000             0292   GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040000             0293   GPIOMODE_ALTF:		EQU		5;	; Alt Function
040000             0294   GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040000             0295   GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040000             0296   GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040000             0297   GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040000             0298   
040000             0299   ; Originally in ram.asm
040000             0300   ;
040000             0301   ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%) ; back to data.asm
040000             0302   ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%) ; back to data.asm
040000             0303   ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; moved to data.asm
040000             0304   
040000             0305   ; Originally in main.asm
040000             0306   ;
040000             0307   CR:			EQU     0DH
040000             0308   LF:			EQU     0AH
040000             0309   ESC:			EQU     1BH
040000             0310   ; --- End equs.inc ---
040000             0311   
040000             0312   ; --- Begin macros.inc ---
040000             0313   ;
040000             0314   ; Title:	BBC Basic Interpreter - Z80 version
040000             0315   ;		Useful macros
040000             0316   ; Author:	Dean Belfield
040000             0317   ; Created:	04/12/2024
040000             0318   ; Last Updated:	04/12/2024
040000             0319   ;
040000             0320   ; Modinfo:
040000             0321   
040000             0322           MACRO EXREG rp1, rp2
040000             0323           PUSH    rp1
040000             0324           POP     rp2
040000             0325           ENDMACRO
040000             0326   
040000             0327           MACRO ADD8U_DE ; reg
040000             0328           ADD     A, E
040000             0329           LD      E, A
040000             0330           ADC     A, D
040000             0331           SUB     E
040000             0332           LD      D, A
040000             0333           ENDMACRO
040000             0334   
040000             0335           MACRO ADD8U_HL ; reg
040000             0336           ADD     A, L
040000             0337           LD      L, A
040000             0338           ADC     A, H
040000             0339           SUB     L
040000             0340           LD      H, A
040000             0341           ENDMACRO
040000             0342   
040000             0343           MACRO VDU VAL
040000             0344           LD      A, VAL
040000             0345           CALL    OSWRCH
040000             0346           ENDMACRO
040000             0347   
040000             0348           MACRO SET_GPIO REG, VAL
040000             0349           IN0     A, (REG)
040000             0350           OR      VAL
040000             0351           OUT0    (REG), A
040000             0352           ENDMACRO
040000             0353   
040000             0354           MACRO RES_GPIO REG, VAL
040000             0355           PUSH    BC
040000             0356           LD      A, VAL
040000             0357           CPL
040000             0358           LD      C, A
040000             0359           IN0     A, (REG)
040000             0360           AND     C
040000             0361           OUT0    (REG), A
040000             0362           POP     BC
040000             0363           ENDMACRO
040000             0364   ; --- End macros.inc ---
040000             0365   
040000             0366   ; --- Begin agon_init.asm ---
040000             0367   ;
040000             0368   ; Title:	BBC Basic for AGON - Initialisation Code
040000             0369   ;		Initialisation Code
040000             0370   ; Author:	Dean Belfield
040000             0371   ; Created:	04/12/2024
040000             0372   ; Last Updated:	14/12/2024
040000             0373   ;
040000             0374   ; Modinfo:
040000             0375   ; 14/12/2024:	Fix for *BYE command
040000             0376   
040000             0377   ;			SEGMENT __VECTORS
040000             0378   
040000             0379   ;			XREF	START
040000             0380   ;			XREF	ACCS
040000             0381   ;			XREF	TELL
040000             0382   
040000             0383   			.ASSUME	ADL = 0
040000             0384   			.ORG 0x0000
000000             0385   
000000             0386   			; INCLUDE	"equs.inc"
000000             0387   
000000             0388   argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
000000             0389   
000000             0390   ;
000000             0391   ; Start in mixed mode. Assumes MBASE is set to correct segment
000000             0392   ;
000000 C3 52 00    0393   			JP	_start				; Jump to start
000003             0394   			DS	5
000008             0395   
       FF FF FF FF 
       FF 
000008 49 CF       0396   RST_08:			RST.LIS	08h				; API call
00000A C9          0397   			RET
00000B             0398   			DS 	5
000010             0399   
       FF FF FF FF 
       FF 
000010 49 D7       0400   RST_10:			RST.LIS 10h				; Output
000012 C9          0401   			RET
000013             0402   			DS	5
000018             0403   
       FF FF FF FF 
       FF 
000018 49 DF       0404   RST_18:			RST.LIS	18h				; Block Output
00001A C9          0405   			RET
00001B             0406   			DS	5
000020             0407   
000020             0408   RST_20:			DS	8
000028             0409   RST_28:			DS	8
000030             0410   RST_30:			DS	8
000038             0411   
000038             0412   ;
000038             0413   ; The NMI interrupt vector (not currently used by AGON)
000038             0414   ;
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 
000038 FB          0415   RST_38:			EI
000039 ED 4D       0416   			RETI
00003B             0417   ;
00003B             0418   ; The header stuff is from byte 64 onwards
00003B             0419   ;
00003B FF FF FF FF 0420   			ALIGN	64
       FF          
000040             0421   
000040 4D 4F 53    0422   			DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
000043 00          0423   			DB	00h				; MOS header version 0
000044 00          0424   			DB	00h				; Flag for run mode (0: Z80, 1: ADL)
000045             0425   
000045 42 42 43 42 0426   _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
       41 53 49 43 
       2E 42 49 4E 
       00          
000052             0427   
000052             0428   ;
000052             0429   ; And the code follows on immediately after the header
000052             0430   ;
000052 5B FD E5    0431   _start:			PUSH.LIL	IY			; Preserve IY
000055             0432   
000055 FD 21 00 00 0433   			LD		IY, 0			; Preserve SPS
000059 FD 39       0434   			ADD		IY, SP
00005B 5B FD E5    0435   			PUSH.LIL	IY
00005E             0436   
00005E E3          0437   			EX		(SP), HL		; Get the SPS part of the return address
00005F 5B E5       0438   			PUSH.LIL	HL
000061 E3          0439   			EX		(SP), HL		; And restore it for BASIC
000062             0440   
000062 5B F5       0441   			PUSH.LIL	AF			; Preserve the rest of the registers
000064 5B C5       0442   			PUSH.LIL	BC
000066 5B D5       0443   			PUSH.LIL	DE
000068 5B DD E5    0444   			PUSH.LIL	IX
00006B             0445   
00006B ED 6E       0446   			LD		A, MB			; Segment base
00006D DD 21 65 01 0447   			LD		IX, argv_ptrs		; The argv array pointer address
000071 CD 51 01    0448   			CALL		_set_aix24		; Convert to a 24-bit address
000074 5B DD E5    0449   			PUSH.LIL	IX
000077 CD E1 00    0450   			CALL		_parse_params		; Parse the parameters
00007A 5B DD E1    0451   			POP.LIL		IX			; IX: argv
00007D 06 00       0452   			LD		B, 0			;  C: argc
00007F CD 9A 00    0453   			CALL		_main			; Start user code
000082             0454   
000082 5B DD E1    0455   			POP.LIL		IX			; Restore the registers
000085 5B D1       0456   			POP.LIL		DE
000087 5B C1       0457   			POP.LIL		BC
000089 5B F1       0458   			POP.LIL		AF
00008B             0459   
00008B EB          0460   			EX		DE, HL 			; DE: Return code from BASIC
00008C 5B E1       0461   			POP.LIL		HL 			; The SPS part of the return address
00008E 5B FD E1    0462   			POP.LIL		IY			; Get the preserved SPS
000091 FD F9       0463   			LD		SP, IY			; Restore SPS
000093 E3          0464   			EX		(SP), HL		; Store the SPS part of the return address on the stack
000094 EB          0465   			EX		DE, HL 			; HL: Return code from BASIC
000095             0466   
000095 5B FD E1    0467   			POP.LIL		IY			; Restore IY
000098 49 C9       0468   			RET.L					; Return to MOS
00009A             0469   
00009A             0470   ; The main routine
00009A             0471   ; IXU: argv - pointer to array of parameters
00009A             0472   ;   C: argc - number of parameters
00009A             0473   ; Returns:
00009A             0474   ;  HL: Error code, or 0 if OK
00009A             0475   ;
00009A 21 00 53    0476   _main:			LD	HL, ACCS		; Clear the ACCS
00009D 36 00       0477   			LD	(HL), 0
00009F 79          0478   			LD	A, C
0000A0 FE 02       0479   			CP	2
0000A2 28 24       0480   			JR	Z, _autoload		; 2 parameters = autoload
0000A4 38 35       0481   			JR	C, _startbasic		; 1 parameter = normal start
0000A6             0482   ;			CALL	STAR_VERSION		; Output the AGON version
0000A6 CD 7E 45    0483   			CALL	TELL
0000A9 55 73 61 67 0484   			DB	"Usage:\n\r"
       65 3A 0A 0D 
0000B1 52 55 4E 20 0485   			DB	"RUN . <filename>\n\r", 0
       2E 20 3C 66 
       69 6C 65 6E 
       61 6D 65 3E 
       0A 0D 00    
0000C4 21 00 00    0486   			LD	HL, 0			; The error code
0000C7 C9          0487   			RET
0000C8             0488   ;
0000C8 5B DD 27 03 0489   _autoload:		LD.LIL	HL, (IX+3)		; HLU: Address of filename
0000CC 11 00 53    0490   			LD	DE, ACCS		;  DE: Destination address
0000CF 5B 7E       0491   @@:			LD.LIL	A, (HL)			; Fetch the filename byte
0000D1 12          0492   			LD	(DE), A			;
0000D2 5B 23       0493   			INC.LIL	HL			; Increase the source pointer
0000D4 1C          0494   			INC	E			; We only need to increase E as ACCS is on a page boundary
0000D5 20 F8       0495   			JR	NZ, @B			; Loop until we hit a 0 byte
0000D7 1D          0496   			DEC	E
0000D8 3E 0D       0497   			LD	A, CR
0000DA 12          0498   			LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
0000DB             0499   ;
0000DB E1          0500   _startbasic:		POP	 HL			; Pop the return address to init off SPS
0000DC 5B E5       0501   			PUSH.LIL HL 			; Stack it on SPL (*BYE will use this as the return address)
0000DE C3 9B 37    0502   			JP	 START			; And start BASIC
0000E1             0503   
0000E1             0504   ; Parse the parameter string into a C array
0000E1             0505   ; Parameters
0000E1             0506   ; -   A: Segment base
0000E1             0507   ; - HLU: Address of parameter string
0000E1             0508   ; - IXU: Address for array pointer storage
0000E1             0509   ; Returns:
0000E1             0510   ; -   C: Number of parameters parsed
0000E1             0511   ;
0000E1 01 45 00    0512   _parse_params:		LD		BC, _exec_name		; Get the address of the app name in this segment
0000E4 CD 3F 01    0513   			CALL		_set_abc24		; Convert it to a 24-bit address based upon segment base
0000E7 5B DD 0F 00 0514   			LD.LIL		(IX+0), BC		; ARGV[0] = the executable name
0000EB 5B DD 23    0515   			INC.LIL		IX
0000EE 5B DD 23    0516   			INC.LIL		IX
0000F1 5B DD 23    0517   			INC.LIL		IX
0000F4 CD 36 01    0518   			CALL		_skip_spaces		; Skip HL past any leading spaces
0000F7             0519   ;
0000F7 01 01 00    0520   			LD		BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0000FA 06 0F       0521   			LD		B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0000FC             0522   ;
0000FC C5          0523   _parse_params_1:	PUSH		BC			; Stack ARGC
0000FD 5B E5       0524   			PUSH.LIL	HL			; Stack start address of token
0000FF CD 25 01    0525   			CALL		_get_token		; Get the next token
000102 79          0526   			LD		A, C			; A: Length of the token in characters
000103 5B D1       0527   			POP.LIL		DE			; Start address of token (was in HL)
000105 C1          0528   			POP		BC			; ARGC
000106 B7          0529   			OR		A			; Check for A=0 (no token found) OR at end of string
000107 C8          0530   			RET		Z
000108             0531   ;
000108 5B DD 1F 00 0532   			LD.LIL		(IX+0), DE		; Store the pointer to the token
00010C 5B E5       0533   			PUSH.LIL	HL			; DE=HL
00010E 5B D1       0534   			POP.LIL		DE
000110 CD 36 01    0535   			CALL		_skip_spaces		; And skip HL past any spaces onto the next character
000113 AF          0536   			XOR		A
000114 5B 12       0537   			LD.LIL		(DE), A			; Zero-terminate the token
000116 5B DD 23    0538   			INC.LIL		IX
000119 5B DD 23    0539   			INC.LIL		IX
00011C 5B DD 23    0540   			INC.LIL		IX			; Advance to next pointer position
00011F 0C          0541   			INC		C			; Increment ARGC
000120 79          0542   			LD		A, C			; Check for C >= A
000121 B8          0543   			CP		B
000122 38 D8       0544   			JR		C, _parse_params_1	; And loop
000124 C9          0545   			RET
000125             0546   
000125             0547   ; Get the next token
000125             0548   ; Parameters:
000125             0549   ; - HL: Address of parameter string
000125             0550   ; Returns:
000125             0551   ; - HL: Address of first character after token
000125             0552   ; -  C: Length of token (in characters)
000125             0553   ;
000125 0E 00       0554   _get_token:		LD		C, 0			; Initialise length
000127 5B 7E       0555   @@:			LD.LIL		A, (HL)			; Get the character from the parameter string
000129 B7          0556   			OR		A			; Exit if 0 (end of parameter string in MOS)
00012A C8          0557   			RET 		Z
00012B FE 0D       0558   			CP		13			; Exit if CR (end of parameter string in BBC BASIC)
00012D C8          0559   			RET		Z
00012E FE 20       0560   			CP		' '			; Exit if space (end of token)
000130 C8          0561   			RET		Z
000131 5B 23       0562   			INC.LIL		HL			; Advance to next character
000133 0C          0563   			INC 		C			; Increment length
000134 18 F1       0564   			JR		@B
000136             0565   
000136             0566   ; Skip spaces in the parameter string
000136             0567   ; Parameters:
000136             0568   ; - HL: Address of parameter string
000136             0569   ; Returns:
000136             0570   ; - HL: Address of next none-space character
000136             0571   ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
000136             0572   ;
000136 5B 7E       0573   _skip_spaces:		LD.LIL		A, (HL)			; Get the character from the parameter string
000138 FE 20       0574   			CP		' '			; Exit if not space
00013A C0          0575   			RET		NZ
00013B 5B 23       0576   			INC.LIL		HL			; Advance to next character
00013D 18 F7       0577   			JR		_skip_spaces		; Increment length
00013F             0578   
00013F             0579   ; Set the MSB of BC (U) to A
00013F             0580   ; Parameters:
00013F             0581   ; - BC: 16-bit address
00013F             0582   ; -  A: Value to stick in U of BC
00013F             0583   ; Returns:
00013F             0584   ; - BCU
00013F             0585   ;
00013F 5B E5       0586   _set_abc24:		PUSH.LIL	HL			; Preserve HL
000141 5B C5       0587   			PUSH.LIL	BC			; Stick BC onto SPL
000143 5B 21 02 00 0588   			LD.LIL		HL, 2			; HL: SP+2
       00          
000148 5B 39       0589   			ADD.LIL		HL, SP
00014A 5B 77       0590   			LD.LIL		(HL), A			; Store A in it
00014C 5B C1       0591   			POP.LIL		BC			; Fetch ammended BC
00014E 5B E1       0592   			POP.LIL		HL			; Restore HL
000150 C9          0593   			RET
000151             0594   
000151             0595   ; Set the MSB of BC (U) to A
000151             0596   ; Parameters:
000151             0597   ; - IX: 16-bit address
000151             0598   ; -  A: Value to stick in U of BC
000151             0599   ; Returns:
000151             0600   ; - IXU
000151             0601   ;
000151 5B DD E5    0602   _set_aix24:		PUSH.LIL	IX			; Stick IX onto SPL
000154 5B DD 21 02 0603   			LD.LIL		IX, 2			; IX: SP+2
       00 00       
00015A 5B DD 39    0604   			ADD.LIL		IX, SP
00015D 5B DD 77 00 0605   			LD.LIL		(IX), A			; Store A in it
000161 5B DD E1    0606   			POP.LIL		IX			; Fetch ammended IX
000164 C9          0607   			RET
000165             0608   
000165             0609   ; Storage for the argv array pointers
000165             0610   ;
000165 00 00 00 00 0611   argv_ptrs:		BLKP	argv_ptrs_max, 0		; Storage for the argv array pointers
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
000195             0612   ; --- End agon_init.asm ---
000195             0613   
000195             0614   ; --- Begin agon_graphics.asm ---
000195             0615   ;
000195             0616   ; Title:	BBC Basic for AGON - Graphics stuff
000195             0617   ; Author:	Dean Belfield
000195             0618   ; Created:	04/12/2024
000195             0619   ; Last Updated:	17/12/2024
000195             0620   ;
000195             0621   ; Modinfo:
000195             0622   ; 11/12/2024:	Modified POINT_ to work with OSWORD
000195             0623   ; 17/12/2024:	Modified GETSCHR
000195             0624   
000195             0625   			.ASSUME	ADL = 0
000195             0626   
000195             0627   			; INCLUDE	"equs.inc"
000195             0628   			; INCLUDE "macros.inc"
000195             0629   			; INCLUDE "mos_api.inc"	; In MOS/src
000195             0630   
000195             0631   			; SEGMENT CODE
000195             0632   
000195             0633   			; XDEF	MODE_
000195             0634   			; XDEF	COLOUR_
000195             0635   			; XDEF	POINT_
000195             0636   			; XDEF	GETSCHR
000195             0637   
000195             0638   			; XREF	ACCS
000195             0639   			; XREF	OSWRCH
000195             0640   			; XREF	ASC_TO_NUMBER
000195             0641   			; XREF	EXTERR
000195             0642   			; XREF	EXPRI
000195             0643   			; XREF	COMMA
000195             0644   			; XREF	XEQ
000195             0645   			; XREF	NXT
000195             0646   			; XREF	BRAKET
000195             0647   			; XREF	CRTONULL
000195             0648   			; XREF	NULLTOCR
000195             0649   			; XREF	CRLF
000195             0650   			; XREF	EXPR_W2
000195             0651   
000195             0652   ; MODE n: Set video mode
000195             0653   ;
000195 DD E5       0654   MODE_:			PUSH	IX			; Get the system vars in IX
000197             0655   			MOSCALL	mos_sysvars		; Reset the semaphore
000197 3E 08       0001M1 			LD	A, function
000199 49 CF       0002M1 			RST.LIS	08h
00019B 5B DD CB 04 0656   			RES.LIL	4, (IX+sysvar_vpd_pflags)
       A6          
0001A0 CD B7 18    0657   			CALL    EXPRI
0001A3 D9          0658   			EXX
0001A4             0659   			VDU	16H			; Mode change
0001A4 3E 16       0001M1         LD      A, VAL
0001A6 CD 97 05    0002M1         CALL    OSWRCH
0001A9             0660   			VDU	L
0001A9 7D          0001M1         LD      A, VAL
0001AA CD 97 05    0002M1         CALL    OSWRCH
0001AD             0661   			MOSCALL	mos_sysvars
0001AD 3E 08       0001M1 			LD	A, function
0001AF 49 CF       0002M1 			RST.LIS	08h
0001B1 5B DD CB 04 0662   @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
       66          
0001B6 28 F9       0663   			JR	Z, @B			; Wait for the result
0001B8 DD E1       0664   			POP	IX
0001BA C3 1D 25    0665   			JP	XEQ
0001BD             0666   
0001BD             0667   ;
0001BD             0668   ; Fetch a character from the screen
0001BD             0669   ; - DE: X coordinate
0001BD             0670   ; - HL: Y coordinate
0001BD             0671   ; Returns
0001BD             0672   ; - A: The character or FFh if no match
0001BD             0673   ; - F: C if match, otherwise NC
0001BD             0674   ;
0001BD DD E5       0675   GETSCHR:		PUSH	IX			; Get the system vars in IX
0001BF             0676   			MOSCALL	mos_sysvars		; Reset the semaphore
0001BF 3E 08       0001M1 			LD	A, function
0001C1 49 CF       0002M1 			RST.LIS	08h
0001C3 5B DD CB 04 0677   			RES.LIL	1, (IX+sysvar_vpd_pflags)
       8E          
0001C8             0678   			VDU	23
0001C8 3E 17       0001M1         LD      A, VAL
0001CA CD 97 05    0002M1         CALL    OSWRCH
0001CD             0679   			VDU	0
0001CD 3E 00       0001M1         LD      A, VAL
0001CF CD 97 05    0002M1         CALL    OSWRCH
0001D2             0680   			VDU	vdp_scrchar
0001D2 3E 83       0001M1         LD      A, VAL
0001D4 CD 97 05    0002M1         CALL    OSWRCH
0001D7             0681   			VDU	E
0001D7 7B          0001M1         LD      A, VAL
0001D8 CD 97 05    0002M1         CALL    OSWRCH
0001DB             0682   			VDU	D
0001DB 7A          0001M1         LD      A, VAL
0001DC CD 97 05    0002M1         CALL    OSWRCH
0001DF             0683   			VDU	L
0001DF 7D          0001M1         LD      A, VAL
0001E0 CD 97 05    0002M1         CALL    OSWRCH
0001E3             0684   			VDU	H
0001E3 7C          0001M1         LD      A, VAL
0001E4 CD 97 05    0002M1         CALL    OSWRCH
0001E7 5B DD CB 04 0685   @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
       4E          
0001EC 28 F9       0686   			JR	Z, @B			; Wait for the result
0001EE 5B DD 7E 09 0687   			LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
0001F2 B7          0688   			OR	A			; Check for 00h
0001F3 37          0689   			SCF				; C = character map
0001F4 20 01       0690   			JR	NZ, @F			; We have a character, so skip next bit
0001F6 AF          0691   			XOR	A			; Clear carry
0001F7 DD E1       0692   @@:			POP	IX
0001F9 C9          0693   			RET
0001FA             0694   
0001FA             0695   ; POINT(x,y): Get the pixel colour of a point on screen
0001FA             0696   ; Parameters:
0001FA             0697   ; - DE: X-coordinate
0001FA             0698   ; - HL: Y-coordinate
0001FA             0699   ; Returns:
0001FA             0700   ; -  A: Pixel colour
0001FA             0701   ;
0001FA DD E5       0702   POINT_:			PUSH	IX			; Get the system vars in IX
0001FC             0703   			MOSCALL	mos_sysvars		; Reset the semaphore
0001FC 3E 08       0001M1 			LD	A, function
0001FE 49 CF       0002M1 			RST.LIS	08h
000200 5B DD CB 04 0704   			RES.LIL	2, (IX+sysvar_vpd_pflags)
       96          
000205             0705   			VDU	23
000205 3E 17       0001M1         LD      A, VAL
000207 CD 97 05    0002M1         CALL    OSWRCH
00020A             0706   			VDU	0
00020A 3E 00       0001M1         LD      A, VAL
00020C CD 97 05    0002M1         CALL    OSWRCH
00020F             0707   			VDU	vdp_scrpixel
00020F 3E 84       0001M1         LD      A, VAL
000211 CD 97 05    0002M1         CALL    OSWRCH
000214             0708   			VDU	E
000214 7B          0001M1         LD      A, VAL
000215 CD 97 05    0002M1         CALL    OSWRCH
000218             0709   			VDU	D
000218 7A          0001M1         LD      A, VAL
000219 CD 97 05    0002M1         CALL    OSWRCH
00021C             0710   			VDU	L
00021C 7D          0001M1         LD      A, VAL
00021D CD 97 05    0002M1         CALL    OSWRCH
000220             0711   			VDU	H
000220 7C          0001M1         LD      A, VAL
000221 CD 97 05    0002M1         CALL    OSWRCH
000224 5B DD CB 04 0712   @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
       56          
000229 28 F9       0713   			JR	Z, @B			; Wait for the result
00022B             0714   ;
00022B             0715   ; Return the data as a 1 byte index
00022B             0716   ;
00022B 5B DD 7E 16 0717   			LD.LIL	A, (IX+sysvar_scrpixelIndex)
00022F DD E1       0718   			POP	IX
000231 C9          0719   			RET
000232             0720   
000232             0721   ; COLOUR colour
000232             0722   ; COLOUR L,P
000232             0723   ; COLOUR L,R,G,B
000232             0724   ;
000232 CD B7 18    0725   COLOUR_:		CALL	EXPRI			; The colour / mode
000235 D9          0726   			EXX
000236 7D          0727   			LD	A, L
000237 32 00 53    0728   			LD	(VDU_BUFFER+0), A	; Store first parameter
00023A CD 8F 45    0729   			CALL	NXT			; Are there any more parameters?
00023D FE 2C       0730   			CP	','
00023F 28 0E       0731   			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
000241             0732   ;
000241             0733   			VDU	11h			; Just set the colour
000241 3E 11       0001M1         LD      A, VAL
000243 CD 97 05    0002M1         CALL    OSWRCH
000246             0734   			VDU	(VDU_BUFFER+0)
000246 3A 00 53    0001M1         LD      A, VAL
000249 CD 97 05    0002M1         CALL    OSWRCH
00024C C3 1D 25    0735   			JP	XEQ
00024F             0736   ;
00024F CD 26 21    0737   COLOUR_1:		CALL	COMMA
000252 CD B7 18    0738   			CALL	EXPRI			; Parse R (OR P)
000255 D9          0739   			EXX
000256 7D          0740   			LD	A, L
000257 32 01 53    0741   			LD	(VDU_BUFFER+1), A
00025A CD 8F 45    0742   			CALL	NXT			; Are there any more parameters?
00025D FE 2C       0743   			CP	','
00025F 28 23       0744   			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
000261             0745   ;
000261             0746   			VDU	13h			; VDU:COLOUR
000261 3E 13       0001M1         LD      A, VAL
000263 CD 97 05    0002M1         CALL    OSWRCH
000266             0747   			VDU	(VDU_BUFFER+0)		; Logical Colour
000266 3A 00 53    0001M1         LD      A, VAL
000269 CD 97 05    0002M1         CALL    OSWRCH
00026C             0748   			VDU	(VDU_BUFFER+1)		; Palette Colour
00026C 3A 01 53    0001M1         LD      A, VAL
00026F CD 97 05    0002M1         CALL    OSWRCH
000272             0749   			VDU	0			; RGB set to 0
000272 3E 00       0001M1         LD      A, VAL
000274 CD 97 05    0002M1         CALL    OSWRCH
000277             0750   			VDU	0
000277 3E 00       0001M1         LD      A, VAL
000279 CD 97 05    0002M1         CALL    OSWRCH
00027C             0751   			VDU	0
00027C 3E 00       0001M1         LD      A, VAL
00027E CD 97 05    0002M1         CALL    OSWRCH
000281 C3 1D 25    0752   			JP	XEQ
000284             0753   ;
000284 CD 26 21    0754   COLOUR_2:		CALL	COMMA
000287 CD B7 18    0755   			CALL	EXPRI			; Parse G
00028A D9          0756   			EXX
00028B 7D          0757   			LD	A, L
00028C 32 02 53    0758   			LD	(VDU_BUFFER+2), A
00028F CD 26 21    0759   			CALL	COMMA
000292 CD B7 18    0760   			CALL	EXPRI			; Parse B
000295 D9          0761   			EXX
000296 7D          0762   			LD	A, L
000297 32 03 53    0763   			LD	(VDU_BUFFER+3), A
00029A             0764   			VDU	13h			; VDU:COLOUR
00029A 3E 13       0001M1         LD      A, VAL
00029C CD 97 05    0002M1         CALL    OSWRCH
00029F             0765   			VDU	(VDU_BUFFER+0)		; Logical Colour
00029F 3A 00 53    0001M1         LD      A, VAL
0002A2 CD 97 05    0002M1         CALL    OSWRCH
0002A5             0766   			VDU	FFh			; Physical Colour (-1 for RGB mode)
0002A5 3E FF       0001M1         LD      A, VAL
0002A7 CD 97 05    0002M1         CALL    OSWRCH
0002AA             0767   			VDU	(VDU_BUFFER+1)		; R
0002AA 3A 01 53    0001M1         LD      A, VAL
0002AD CD 97 05    0002M1         CALL    OSWRCH
0002B0             0768   			VDU	(VDU_BUFFER+2)		; G
0002B0 3A 02 53    0001M1         LD      A, VAL
0002B3 CD 97 05    0002M1         CALL    OSWRCH
0002B6             0769   			VDU	(VDU_BUFFER+3)		; B
0002B6 3A 03 53    0001M1         LD      A, VAL
0002B9 CD 97 05    0002M1         CALL    OSWRCH
0002BC C3 1D 25    0770   			JP	XEQ; --- End agon_graphics.asm ---
0002BF             0771   
0002BF             0772   ; --- Begin agon_gpio.asm ---
0002BF             0773   ;
0002BF             0774   ; Title:	BBC Basic for AGON - GPIO functions
0002BF             0775   ; Author:	Dean Belfield
0002BF             0776   ; Created:	04/12/2024
0002BF             0777   ; Last Updated:	04/12/2024
0002BF             0778   ;
0002BF             0779   ; Modinfo:
0002BF             0780   
0002BF             0781   			; INCLUDE	"macros.inc"
0002BF             0782   			; INCLUDE	"equs.inc"
0002BF             0783   
0002BF             0784   			.ASSUME	ADL = 0
0002BF             0785   ;	.ORG 0x0000
0002BF             0786   
0002BF             0787   ;			SEGMENT CODE
0002BF             0788   
0002BF             0789   ;			XDEF	GPIOB_SETMODE
0002BF             0790   
0002BF             0791   ;			XREF	SWITCH_A
0002BF             0792   
0002BF             0793   ;  A: Mode
0002BF             0794   ;  B: Pins
0002BF             0795   ;
0002BF CD 18 05    0796   GPIOB_SETMODE:		CALL	SWITCH_A
0002C2 D6 02       0797   			DW	GPIOB_M0	; Output
0002C4 FB 02       0798   			DW	GPIOB_M1	; Input
0002C6 1B 03       0799   			DW	GPIOB_M2	; Open Drain IO
0002C8 3B 03       0800   			DW	GPIOB_M3	; Open Source IO
0002CA 56 03       0801   			DW	GPIOB_M4	; Interrupt, Dual Edge
0002CC 82 03       0802   			DW	GPIOB_M5	; Alt Function
0002CE 9D 03       0803   			DW	GPIOB_M6	; Interrupt, Active Low
0002D0 C4 03       0804   			DW	GPIOB_M7	; Interrupt, Active High
0002D2 E6 03       0805   			DW	GPIOB_M8	; Interrupt, Falling Edge
0002D4 08 04       0806   			DW	GPIOB_M9	; Interrupt, Rising Edge
0002D6             0807   
0002D6             0808   ; Output
0002D6             0809   ;
0002D6             0810   GPIOB_M0:		RES_GPIO PB_DDR,  B
0002D6 C5          0001M1         PUSH    BC
0002D7 78          0002M1         LD      A, VAL
0002D8 2F          0003M1         CPL
0002D9 4F          0004M1         LD      C, A
0002DA ED 38 9B    0005M1         IN0     A, (REG)
0002DD A1          0006M1         AND     C
0002DE ED 39 9B    0007M1         OUT0    (REG), A
0002E1 C1          0008M1         POP     BC
0002E2             0811   			RES_GPIO PB_ALT1, B
0002E2 C5          0001M1         PUSH    BC
0002E3 78          0002M1         LD      A, VAL
0002E4 2F          0003M1         CPL
0002E5 4F          0004M1         LD      C, A
0002E6 ED 38 9C    0005M1         IN0     A, (REG)
0002E9 A1          0006M1         AND     C
0002EA ED 39 9C    0007M1         OUT0    (REG), A
0002ED C1          0008M1         POP     BC
0002EE             0812   			RES_GPIO PB_ALT2, B
0002EE C5          0001M1         PUSH    BC
0002EF 78          0002M1         LD      A, VAL
0002F0 2F          0003M1         CPL
0002F1 4F          0004M1         LD      C, A
0002F2 ED 38 9D    0005M1         IN0     A, (REG)
0002F5 A1          0006M1         AND     C
0002F6 ED 39 9D    0007M1         OUT0    (REG), A
0002F9 C1          0008M1         POP     BC
0002FA C9          0813   			RET
0002FB             0814   
0002FB             0815   ; Input
0002FB             0816   ;
0002FB             0817   GPIOB_M1:		SET_GPIO PB_DDR,  B
0002FB ED 38 9B    0001M1         IN0     A, (REG)
0002FE B0          0002M1         OR      VAL
0002FF ED 39 9B    0003M1         OUT0    (REG), A
000302             0818   			RES_GPIO PB_ALT1, B
000302 C5          0001M1         PUSH    BC
000303 78          0002M1         LD      A, VAL
000304 2F          0003M1         CPL
000305 4F          0004M1         LD      C, A
000306 ED 38 9C    0005M1         IN0     A, (REG)
000309 A1          0006M1         AND     C
00030A ED 39 9C    0007M1         OUT0    (REG), A
00030D C1          0008M1         POP     BC
00030E             0819   			RES_GPIO PB_ALT2, B
00030E C5          0001M1         PUSH    BC
00030F 78          0002M1         LD      A, VAL
000310 2F          0003M1         CPL
000311 4F          0004M1         LD      C, A
000312 ED 38 9D    0005M1         IN0     A, (REG)
000315 A1          0006M1         AND     C
000316 ED 39 9D    0007M1         OUT0    (REG), A
000319 C1          0008M1         POP     BC
00031A C9          0820   			RET
00031B             0821   
00031B             0822   ; Open Drain IO
00031B             0823   ;
00031B             0824   GPIOB_M2:		RES_GPIO PB_DDR,  B
00031B C5          0001M1         PUSH    BC
00031C 78          0002M1         LD      A, VAL
00031D 2F          0003M1         CPL
00031E 4F          0004M1         LD      C, A
00031F ED 38 9B    0005M1         IN0     A, (REG)
000322 A1          0006M1         AND     C
000323 ED 39 9B    0007M1         OUT0    (REG), A
000326 C1          0008M1         POP     BC
000327             0825   			SET_GPIO PB_ALT1, B
000327 ED 38 9C    0001M1         IN0     A, (REG)
00032A B0          0002M1         OR      VAL
00032B ED 39 9C    0003M1         OUT0    (REG), A
00032E             0826   			RES_GPIO PB_ALT2, B
00032E C5          0001M1         PUSH    BC
00032F 78          0002M1         LD      A, VAL
000330 2F          0003M1         CPL
000331 4F          0004M1         LD      C, A
000332 ED 38 9D    0005M1         IN0     A, (REG)
000335 A1          0006M1         AND     C
000336 ED 39 9D    0007M1         OUT0    (REG), A
000339 C1          0008M1         POP     BC
00033A C9          0827   			RET
00033B             0828   
00033B             0829   ; Open Source IO
00033B             0830   ;
00033B             0831   GPIOB_M3:		SET_GPIO PB_DDR,  B
00033B ED 38 9B    0001M1         IN0     A, (REG)
00033E B0          0002M1         OR      VAL
00033F ED 39 9B    0003M1         OUT0    (REG), A
000342             0832   			SET_GPIO PB_ALT1, B
000342 ED 38 9C    0001M1         IN0     A, (REG)
000345 B0          0002M1         OR      VAL
000346 ED 39 9C    0003M1         OUT0    (REG), A
000349             0833   			RES_GPIO PB_ALT2, B
000349 C5          0001M1         PUSH    BC
00034A 78          0002M1         LD      A, VAL
00034B 2F          0003M1         CPL
00034C 4F          0004M1         LD      C, A
00034D ED 38 9D    0005M1         IN0     A, (REG)
000350 A1          0006M1         AND     C
000351 ED 39 9D    0007M1         OUT0    (REG), A
000354 C1          0008M1         POP     BC
000355 C9          0834   			RET
000356             0835   
000356             0836   ; Interrupt, Dual Edge
000356             0837   ;
000356             0838   GPIOB_M4:		SET_GPIO PB_DR,   B
000356 ED 38 9A    0001M1         IN0     A, (REG)
000359 B0          0002M1         OR      VAL
00035A ED 39 9A    0003M1         OUT0    (REG), A
00035D             0839   			RES_GPIO PB_DDR,  B
00035D C5          0001M1         PUSH    BC
00035E 78          0002M1         LD      A, VAL
00035F 2F          0003M1         CPL
000360 4F          0004M1         LD      C, A
000361 ED 38 9B    0005M1         IN0     A, (REG)
000364 A1          0006M1         AND     C
000365 ED 39 9B    0007M1         OUT0    (REG), A
000368 C1          0008M1         POP     BC
000369             0840   			RES_GPIO PB_ALT1, B
000369 C5          0001M1         PUSH    BC
00036A 78          0002M1         LD      A, VAL
00036B 2F          0003M1         CPL
00036C 4F          0004M1         LD      C, A
00036D ED 38 9C    0005M1         IN0     A, (REG)
000370 A1          0006M1         AND     C
000371 ED 39 9C    0007M1         OUT0    (REG), A
000374 C1          0008M1         POP     BC
000375             0841   			RES_GPIO PB_ALT2, B
000375 C5          0001M1         PUSH    BC
000376 78          0002M1         LD      A, VAL
000377 2F          0003M1         CPL
000378 4F          0004M1         LD      C, A
000379 ED 38 9D    0005M1         IN0     A, (REG)
00037C A1          0006M1         AND     C
00037D ED 39 9D    0007M1         OUT0    (REG), A
000380 C1          0008M1         POP     BC
000381 C9          0842   			RET
000382             0843   
000382             0844   ; Alt Function
000382             0845   ;
000382             0846   GPIOB_M5:		SET_GPIO PB_DDR,  B
000382 ED 38 9B    0001M1         IN0     A, (REG)
000385 B0          0002M1         OR      VAL
000386 ED 39 9B    0003M1         OUT0    (REG), A
000389             0847   			RES_GPIO PB_ALT1, B
000389 C5          0001M1         PUSH    BC
00038A 78          0002M1         LD      A, VAL
00038B 2F          0003M1         CPL
00038C 4F          0004M1         LD      C, A
00038D ED 38 9C    0005M1         IN0     A, (REG)
000390 A1          0006M1         AND     C
000391 ED 39 9C    0007M1         OUT0    (REG), A
000394 C1          0008M1         POP     BC
000395             0848   			SET_GPIO PB_ALT2, B
000395 ED 38 9D    0001M1         IN0     A, (REG)
000398 B0          0002M1         OR      VAL
000399 ED 39 9D    0003M1         OUT0    (REG), A
00039C C9          0849   			RET
00039D             0850   
00039D             0851   ; Interrupt, Active Low
00039D             0852   ;
00039D             0853   GPIOB_M6:		RES_GPIO PB_DR,   B
00039D C5          0001M1         PUSH    BC
00039E 78          0002M1         LD      A, VAL
00039F 2F          0003M1         CPL
0003A0 4F          0004M1         LD      C, A
0003A1 ED 38 9A    0005M1         IN0     A, (REG)
0003A4 A1          0006M1         AND     C
0003A5 ED 39 9A    0007M1         OUT0    (REG), A
0003A8 C1          0008M1         POP     BC
0003A9             0854   			RES_GPIO PB_DDR,  B
0003A9 C5          0001M1         PUSH    BC
0003AA 78          0002M1         LD      A, VAL
0003AB 2F          0003M1         CPL
0003AC 4F          0004M1         LD      C, A
0003AD ED 38 9B    0005M1         IN0     A, (REG)
0003B0 A1          0006M1         AND     C
0003B1 ED 39 9B    0007M1         OUT0    (REG), A
0003B4 C1          0008M1         POP     BC
0003B5             0855   			SET_GPIO PB_ALT1, B
0003B5 ED 38 9C    0001M1         IN0     A, (REG)
0003B8 B0          0002M1         OR      VAL
0003B9 ED 39 9C    0003M1         OUT0    (REG), A
0003BC             0856   			SET_GPIO PB_ALT2, B
0003BC ED 38 9D    0001M1         IN0     A, (REG)
0003BF B0          0002M1         OR      VAL
0003C0 ED 39 9D    0003M1         OUT0    (REG), A
0003C3 C9          0857   			RET
0003C4             0858   
0003C4             0859   
0003C4             0860   ; Interrupt, Active High
0003C4             0861   ;
0003C4             0862   GPIOB_M7:		SET_GPIO PB_DR,   B
0003C4 ED 38 9A    0001M1         IN0     A, (REG)
0003C7 B0          0002M1         OR      VAL
0003C8 ED 39 9A    0003M1         OUT0    (REG), A
0003CB             0863   			RES_GPIO PB_DDR,  B
0003CB C5          0001M1         PUSH    BC
0003CC 78          0002M1         LD      A, VAL
0003CD 2F          0003M1         CPL
0003CE 4F          0004M1         LD      C, A
0003CF ED 38 9B    0005M1         IN0     A, (REG)
0003D2 A1          0006M1         AND     C
0003D3 ED 39 9B    0007M1         OUT0    (REG), A
0003D6 C1          0008M1         POP     BC
0003D7             0864   			SET_GPIO PB_ALT1, B
0003D7 ED 38 9C    0001M1         IN0     A, (REG)
0003DA B0          0002M1         OR      VAL
0003DB ED 39 9C    0003M1         OUT0    (REG), A
0003DE             0865   			SET_GPIO PB_ALT2, B
0003DE ED 38 9D    0001M1         IN0     A, (REG)
0003E1 B0          0002M1         OR      VAL
0003E2 ED 39 9D    0003M1         OUT0    (REG), A
0003E5 C9          0866   			RET
0003E6             0867   
0003E6             0868   
0003E6             0869   ; Interrupt, Falling Edge
0003E6             0870   ;
0003E6             0871   GPIOB_M8:		RES_GPIO PB_DR,   B
0003E6 C5          0001M1         PUSH    BC
0003E7 78          0002M1         LD      A, VAL
0003E8 2F          0003M1         CPL
0003E9 4F          0004M1         LD      C, A
0003EA ED 38 9A    0005M1         IN0     A, (REG)
0003ED A1          0006M1         AND     C
0003EE ED 39 9A    0007M1         OUT0    (REG), A
0003F1 C1          0008M1         POP     BC
0003F2             0872   			SET_GPIO PB_DDR,  B
0003F2 ED 38 9B    0001M1         IN0     A, (REG)
0003F5 B0          0002M1         OR      VAL
0003F6 ED 39 9B    0003M1         OUT0    (REG), A
0003F9             0873   			SET_GPIO PB_ALT1, B
0003F9 ED 38 9C    0001M1         IN0     A, (REG)
0003FC B0          0002M1         OR      VAL
0003FD ED 39 9C    0003M1         OUT0    (REG), A
000400             0874   			SET_GPIO PB_ALT2, B
000400 ED 38 9D    0001M1         IN0     A, (REG)
000403 B0          0002M1         OR      VAL
000404 ED 39 9D    0003M1         OUT0    (REG), A
000407 C9          0875   			RET
000408             0876   
000408             0877   ; Interrupt, Rising Edge
000408             0878   ;
000408             0879   GPIOB_M9:		SET_GPIO PB_DR,   B
000408 ED 38 9A    0001M1         IN0     A, (REG)
00040B B0          0002M1         OR      VAL
00040C ED 39 9A    0003M1         OUT0    (REG), A
00040F             0880   			SET_GPIO PB_DDR,  B
00040F ED 38 9B    0001M1         IN0     A, (REG)
000412 B0          0002M1         OR      VAL
000413 ED 39 9B    0003M1         OUT0    (REG), A
000416             0881   			SET_GPIO PB_ALT1, B
000416 ED 38 9C    0001M1         IN0     A, (REG)
000419 B0          0002M1         OR      VAL
00041A ED 39 9C    0003M1         OUT0    (REG), A
00041D             0882   			SET_GPIO PB_ALT2, B
00041D ED 38 9D    0001M1         IN0     A, (REG)
000420 B0          0002M1         OR      VAL
000421 ED 39 9D    0003M1         OUT0    (REG), A
000424 C9          0883   			RET
000425             0884   ; --- End agon_gpio.asm ---
000425             0885   
000425             0886   ; --- Begin agon_interrupt.asm ---
000425             0887   ;
000425             0888   ; Title:	BBC Basic for AGON - Interrupts
000425             0889   ; Author:	Dean Belfield
000425             0890   ; Created:	04/12/2024
000425             0891   ; Last Updated:	04/12/2024
000425             0892   ;
000425             0893   ; Modinfo:
000425             0894   
000425             0895   			.ASSUME	ADL = 0
000425             0896   ;	.ORG 0x0000
000425             0897   
000425             0898   			; INCLUDE	"macros.inc"
000425             0899   			; INCLUDE	"equs.inc"
000425             0900   			; INCLUDE "mos_api.inc"	; In MOS/src
000425             0901   
000425             0902   ;			SEGMENT CODE
000425             0903   
000425             0904   ;			XDEF	VBLANK_INIT
000425             0905   ;			XDEF	VBLANK_STOP
000425             0906   ;			XDEF	VBLANK_HANDLER
000425             0907   
000425             0908   ;			XREF	ESCSET
000425             0909   ;			XREF	KEYDOWN		; In ram.asm
000425             0910   ;			XREF	KEYASCII 	; In ram.asm
000425             0911   ;			XREF	KEYCOUNT	; In ram.asm
000425             0912   
000425             0913   ; Hook into the MOS VBLANK interrupt
000425             0914   ;
000425 F3          0915   VBLANK_INIT:		DI
000426             0916   
000426 ED 6E       0917   			LD		A, MB 				; Get a 24-bit pointer to
000428 21 A3 04    0918   			LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
00042B CD 65 04    0919   			CALL		SET_AHL16 			; address is a 16-bit pointer in BBC BASIC's segment
00042E             0920   
00042E 1E 32       0921   			LD		E, 32h				; Set up the VBlank Interrupt Vector
000430             0922   			MOSCALL		mos_setintvector
000430 3E 14       0001M1 			LD	A, function
000432 49 CF       0002M1 			RST.LIS	08h
000434             0923   
000434 5B E5       0924   			PUSH.LIL	HL				; HLU: Pointer to the MOS interrupt vector
000436 5B D1       0925   			POP.LIL		DE 				; DEU: Pointer to the MOS interrupt vector
000438             0926   
000438 21 BB 04    0927   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
00043B ED 6E       0928   			LD		A, MB	 			; Get the segment BBC BASIC is running in
00043D 32 AC 04    0929   			LD		(VBLANK_HANDLER_MB + 1), A 	; Store in the interrupt handler
000440 CD 65 04    0930   			CALL		SET_AHL16 			; Convert pointer to an absolute 24-bit address
000443 5B ED 1F    0931   			LD.LIL		(HL), DE			; Self-modify the code
000446 FB          0932   			EI
000447 C9          0933   			RET
000448             0934   
000448             0935   ; Unhook the custom VBLANK interrupt
000448             0936   ;
000448 F3          0937   VBLANK_STOP:		DI
000449 21 BB 04    0938   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
00044C 3A AC 04    0939   			LD		A, (VBLANK_HANDLER_MB + 1)	; The stored MB of the segment BBC BASIC is running in
00044F F5          0940   			PUSH		AF 				; Stack the MB for later
000450 CD 65 04    0941   			CALL		SET_AHL16			; Convert pointer to an absolute 24-bit address
000453 5B ED 17    0942   			LD.LIL		DE, (HL)			; DEU: Address of MOS interrupt vector
000456 5B D5       0943   			PUSH.LIL	DE				; Transfer to HL
000458 5B E1       0944   			POP.LIL		HL
00045A 1E 32       0945   			LD		E, 32h
00045C             0946   			MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
00045C 3E 14       0001M1 			LD	A, function
00045E 49 CF       0002M1 			RST.LIS	08h
000460 F1          0947   			POP		AF 				; Restore MB to this segment
000461 ED 6D       0948   			LD		MB, A
000463 FB          0949   			EI
000464 C9          0950   			RET
000465             0951   
000465             0952   ; Set the MSB of HL (U) to A
000465             0953   ;
000465 5B E5       0954   SET_AHL16:		PUSH.LIL	HL
000467 5B 21 02 00 0955   			LD.LIL		HL, 2
       00          
00046C 5B 39       0956   			ADD.LIL		HL, SP
00046E 5B 77       0957   			LD.LIL		(HL), A
000470 5B E1       0958   			POP.LIL		HL
000472 C9          0959   			RET
000473             0960   
000473             0961   ; A safe LIS call to ESCSET
000473             0962   ;
000473             0963   DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
000473 3E 08       0001M1 			LD	A, function
000475 49 CF       0002M1 			RST.LIS	08h
000477 21 07 52    0964   			LD		HL, KEYCOUNT 			; Check whether the keycount has changed
00047A 5B DD 7E 19 0965   			LD.LIL		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
00047E BE          0966   			CP 		(HL)				; with our local copy
00047F 20 09       0967   			JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
000481             0968   ;
000481 AF          0969   DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
000482 32 06 52    0970   			LD		(KEYASCII), A
000485 32 05 52    0971   			LD		(KEYDOWN), A
000488 5B C9       0972   			RET.LIL 					; And return
00048A             0973   ;
00048A 77          0974   DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
00048B 5B DD 7E 18 0975   			LD.LIL		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
00048F B7          0976   			OR		A
000490 28 EF       0977   			JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
000492             0978   ;
000492 32 05 52    0979   			LD		(KEYDOWN), A 			; Store the keydown value
000495 5B DD 7E 05 0980   			LD.LIL		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
000499 32 06 52    0981   			LD		(KEYASCII), A 			; Store locally
00049C FE 1B       0982   			CP		1Bh				; Is it escape?
00049E CC 18 06    0983   			CALL		Z, ESCSET			; Yes, so set the escape flags
0004A1 49 C9       0984   			RET.LIS						; Return to the interrupt handler
0004A3             0985   
0004A3             0986   ;
0004A3             0987   ; Interrupts in mixed mode always run in ADL mode
0004A3             0988   ;
0004A3             0989   			.ASSUME	ADL = 1
0004A3             0990   
0004A3 F3          0991   VBLANK_HANDLER:		DI
0004A4 F5          0992   			PUSH		AF
0004A5 E5          0993   			PUSH		HL
0004A6 DD E5       0994   			PUSH		IX
0004A8 ED 6E       0995   			LD		A, MB
0004AA F5          0996   			PUSH		AF
0004AB 3E 00       0997   VBLANK_HANDLER_MB:	LD		A, 0				; This is self-modified by VBLANK_INIT
0004AD ED 6D       0998   			LD		MB, A
0004AF 49 CD 73 04 0999   			CALL.LIS	DO_KEYBOARD
0004B3 F1          1000   			POP		AF
0004B4 ED 6D       1001   			LD		MB, A
0004B6 DD E1       1002   			POP		IX
0004B8 E1          1003   			POP		HL
0004B9 F1          1004   			POP		AF
0004BA             1005   ;
0004BA             1006   ; Finally jump to the MOS interrupt
0004BA             1007   ;
0004BA C3 00 00 00 1008   VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
0004BE             1009   ; --- End agon_interrupt.asm ---
0004BE             1010   
0004BE             1011   ; --- Begin agon_misc.asm ---
0004BE             1012   ;
0004BE             1013   ; Title:	BBC Basic for AGON - Miscellaneous helper functions
0004BE             1014   ; Author:	Dean Belfield
0004BE             1015   ; Created:	04/12/2024
0004BE             1016   ; Last Updated:	04/12/2024
0004BE             1017   ;
0004BE             1018   ; Modinfo:
0004BE             1019   
0004BE             1020   			; INCLUDE	"equs.inc"
0004BE             1021   			; INCLUDE	"macros.inc"
0004BE             1022   
0004BE             1023   			.ASSUME	ADL = 0
0004BE             1024   ;	.ORG 0x0000
0004BE             1025   
0004BE             1026   ;			SEGMENT CODE
0004BE             1027   
0004BE             1028   ;			XDEF	ASC_TO_NUMBER
0004BE             1029   ;			XDEF	SWITCH_A
0004BE             1030   ;			XDEF	NULLTOCR
0004BE             1031   ;			XDEF	CRTONULL
0004BE             1032   ;			XDEF	CSTR_FNAME
0004BE             1033   ;			XDEF	CSTR_LINE
0004BE             1034   ;			XDEF	CSTR_FINDCH
0004BE             1035   ;			XDEF	CSTR_ENDSWITH
0004BE             1036   ;			XDEF	CSTR_CAT
0004BE             1037   
0004BE             1038   ;			XREF	OSWRCH
0004BE             1039   ;			XREF	KEYWDS
0004BE             1040   ;			XREF	KEYWDL
0004BE             1041   
0004BE             1042   ; Read a number and convert to binary
0004BE             1043   ; If prefixed with &, will read as hex, otherwise decimal
0004BE             1044   ;   Inputs: HL: Pointer in string buffer
0004BE             1045   ;  Outputs: HL: Updated text pointer
0004BE             1046   ;           DE: Value
0004BE             1047   ;            A: Terminator (spaces skipped)
0004BE             1048   ; Destroys: A,D,E,H,L,F
0004BE             1049   ;
0004BE C5          1050   ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
0004BF 11 00 00    1051   			LD	DE, 0			; Initialise DE
0004C2 CD 02 05    1052   			CALL	SKIPSPmisc			; Skip whitespace
0004C5 7E          1053   			LD	A, (HL)			; Read first character
0004C6 FE 26       1054   			CP	'&'			; Is it prefixed with '&' (HEX number)?
0004C8 20 1E       1055   			JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0004CA 23          1056   			INC	HL			; Otherwise fall through to ASC_TO_HEX
0004CB             1057   ;
0004CB 7E          1058   ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
0004CC CD 10 05    1059   			CALL    UPPRCmisc			; Convert to uppercase
0004CF D6 30       1060   			SUB	'0'			; Normalise to 0
0004D1 38 2E       1061   			JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0004D3 FE 0A       1062   			CP 	10			; Check if >= 10
0004D5 38 06       1063   			JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
0004D7 D6 07       1064   			SUB 	7			; Adjust ASCII A-F to nibble
0004D9 FE 10       1065   			CP 	16			; Check for > F
0004DB 30 24       1066   			JR 	NC, ASC_TO_NUMBER4	; Return if out of range
0004DD EB          1067   ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
0004DE 29          1068   			ADD	HL, HL
0004DF 29          1069   			ADD	HL, HL
0004E0 29          1070   			ADD	HL, HL
0004E1 29          1071   			ADD	HL, HL
0004E2 EB          1072   			EX	DE, HL
0004E3 B3          1073   			OR      E			; OR the new digit in to the least significant nibble
0004E4 5F          1074   			LD      E, A
0004E5 23          1075   			INC     HL			; Onto the next character
0004E6 18 E3       1076   			JR      ASC_TO_NUMBER1		; And loop
0004E8             1077   ;
0004E8 7E          1078   ASC_TO_NUMBER3:		LD	A, (HL)
0004E9 D6 30       1079   			SUB	'0'			; Normalise to 0
0004EB 38 14       1080   			JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0004ED FE 0A       1081   			CP	10			; Check if >= 10
0004EF 30 10       1082   			JR	NC, ASC_TO_NUMBER4	; Return if >= 10
0004F1 EB          1083   			EX 	DE, HL 			; Stick DE in HL
0004F2 44          1084   			LD	B, H 			; And copy HL into BC
0004F3 4D          1085   			LD	C, L
0004F4 29          1086   			ADD	HL, HL 			; x 2
0004F5 29          1087   			ADD	HL, HL 			; x 4
0004F6 09          1088   			ADD	HL, BC 			; x 5
0004F7 29          1089   			ADD	HL, HL 			; x 10
0004F8 EB          1090   			EX	DE, HL
0004F9             1091   			ADD8U_DE 			; Add A to DE (macro)
0004F9 83          0001M1         ADD     A, E
0004FA 5F          0002M1         LD      E, A
0004FB 8A          0003M1         ADC     A, D
0004FC 93          0004M1         SUB     E
0004FD 57          0005M1         LD      D, A
0004FE 23          1092   			INC	HL
0004FF 18 E7       1093   			JR	ASC_TO_NUMBER3
000501 C1          1094   ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSP here
000502             1095   
000502             1096   ; Skip a space
000502             1097   ; HL: Pointer in string buffer
000502             1098   ;
000502 7E          1099   SKIPSPmisc:			LD      A, (HL)
000503 FE 20       1100   			CP      ' '
000505 C0          1101   			RET     NZ
000506 23          1102   			INC     HL
000507 18 F9       1103   			JR      SKIPSPmisc
000509             1104   
000509             1105   ; Skip a string
000509             1106   ; HL: Pointer in string buffer
000509             1107   ;
000509 7E          1108   SKIPNOTSP:		LD	A, (HL)
00050A FE 20       1109   			CP	' '
00050C C8          1110   			RET	Z
00050D 23          1111   			INC	HL
00050E 18 F9       1112   			JR	SKIPNOTSP
000510             1113   
000510             1114   ; Convert a character to upper case
000510             1115   ;  A: Character to convert
000510             1116   ;
000510 E6 7F       1117   UPPRCmisc:  		AND     7FH
000512 FE 60       1118   			CP      '`'
000514 D8          1119   			RET     C
000515 E6 5F       1120   			AND     5FH			; Convert to upper case
000517 C9          1121   			RET
000518             1122   
000518             1123   ; Switch on A - lookup table immediately after call
000518             1124   ;  A: Index into lookup table
000518             1125   ;
000518 E3          1126   SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
000519 87          1127   			ADD	A, A			; Multiply A by two
00051A             1128   			ADD8U_HL 			; Add to HL (macro)
00051A 85          0001M1         ADD     A, L
00051B 6F          0002M1         LD      L, A
00051C 8C          0003M1         ADC     A, H
00051D 95          0004M1         SUB     L
00051E 67          0005M1         LD      H, A
00051F 7E          1129   			LD	A, (HL)			; follow the call. Fetch an address from the
000520 23          1130   			INC	HL 			; table.
000521 66          1131   			LD	H, (HL)
000522 6F          1132   			LD	L, A
000523 E3          1133   			EX	(SP), HL		; Swap this new address back, restores HL
000524 C9          1134   			RET				; Return program control to this new address
000525             1135   
000525             1136   ; Convert the buffer to a null terminated string and back
000525             1137   ; HL: Buffer address
000525             1138   ;
000525 C5          1139   NULLTOCR:		PUSH 	BC
000526 06 00       1140   			LD	B, 0
000528 0E 0D       1141   			LD	C, CR
00052A 18 05       1142   			JR	CRTONULL0
00052C             1143   ;
00052C C5          1144   CRTONULL:		PUSH	BC
00052D 06 0D       1145   			LD	B, CR
00052F 0E 00       1146   			LD	C, 0
000531             1147   ;
000531 E5          1148   CRTONULL0:		PUSH	HL
000532 7E          1149   CRTONULL1:		LD	A, (HL)
000533 B8          1150   			CP 	B
000534 28 03       1151   			JR	Z, CRTONULL2
000536 23          1152   			INC	HL
000537 18 F9       1153   			JR	CRTONULL1
000539 71          1154   CRTONULL2:		LD	(HL), C
00053A E1          1155   			POP 	HL
00053B C1          1156   			POP	BC
00053C C9          1157   			RET
00053D             1158   
00053D             1159   ; Copy a filename to DE and zero terminate it
00053D             1160   ; HL: Source
00053D             1161   ; DE: Destination (ACCS)
00053D             1162   ;
00053D 7E          1163   CSTR_FNAME:		LD	A, (HL)			; Get source
00053E FE 20       1164   			CP	32			; Is it space
000540 28 09       1165   			JR	Z, @F
000542 FE 0D       1166   			CP	CR			; Or is it CR
000544 28 05       1167   			JR	Z, @F
000546 12          1168   			LD	(DE), A			; No, so store
000547 23          1169   			INC	HL			; Increment
000548 13          1170   			INC	DE
000549 18 F2       1171   			JR	CSTR_FNAME		; And loop
00054B AF          1172   @@:			XOR	A			; Zero terminate the target string
00054C 12          1173   			LD	(DE), A
00054D 13          1174   			INC	DE			; And point to next free address
00054E C9          1175   			RET
00054F             1176   
00054F             1177   ; Copy a CR terminated line to DE and zero terminate it
00054F             1178   ; HL: Source
00054F             1179   ; DE: Destination (ACCS)
00054F             1180   ;
00054F 7E          1181   CSTR_LINE:		LD	A, (HL)			; Get source
000550 FE 0D       1182   			CP	CR			; Is it CR
000552 28 05       1183   			JR	Z, @F
000554 12          1184   			LD	(DE), A			; No, so store
000555 23          1185   			INC	HL			; Increment
000556 13          1186   			INC	DE
000557 18 F6       1187   			JR	CSTR_LINE		; And loop
000559 AF          1188   @@:			XOR	A			; Zero terminate the target string
00055A 12          1189   			LD	(DE), A
00055B 13          1190   			INC	DE			; And point to next free address
00055C C9          1191   			RET
00055D             1192   
00055D             1193   ; Find the first occurrence of a character (case sensitive)
00055D             1194   ; HL: Source
00055D             1195   ;  C: Character to find
00055D             1196   ; Returns:
00055D             1197   ; HL: Pointer to character, or end of string marker
00055D             1198   ;
00055D 7E          1199   CSTR_FINDCH:		LD	A, (HL)			; Get source
00055E B9          1200   			CP	C			; Is it our character?
00055F C8          1201   			RET	Z			; Yes, so exit
000560 B7          1202   			OR	A			; Is it the end of string?
000561 C8          1203   			RET	Z			; Yes, so exit
000562 23          1204   			INC	HL
000563 18 F8       1205   			JR	CSTR_FINDCH
000565             1206   
000565             1207   ; Check whether a string ends with another string (case insensitive)
000565             1208   ; HL: Source
000565             1209   ; DE: The substring we want to test with
000565             1210   ; Returns:
000565             1211   ;  F: Z if HL ends with DE, otherwise NZ
000565             1212   ;
000565 7E          1213   CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
000566 CD 10 05    1214   			CALL	UPPRCmisc			; Convert to upper case
000569 4F          1215   			LD	C, A
00056A 1A          1216   			LD	A, (DE)			; Get the substring byte
00056B B9          1217   			CP	C
00056C C0          1218   			RET	NZ			; Return NZ if at any point the strings don't match
00056D B1          1219   			OR	C			; Check whether both bytes are zero
00056E C8          1220   			RET	Z			; If so, return, as we have reached the end of both strings
00056F 23          1221   			INC	HL
000570 13          1222   			INC	DE
000571 18 F2       1223   			JR	CSTR_ENDSWITH		; And loop
000573             1224   
000573             1225   ; Concatenate a string onto the end of another string
000573             1226   ; HL: Source
000573             1227   ; DE: Second string
000573             1228   ;
000573 7E          1229   CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
000574 B7          1230   			OR	A
000575 28 03       1231   			JR	Z, CSTR_CAT_1
000577 23          1232   			INC	HL
000578 18 F9       1233   			JR	CSTR_CAT
00057A             1234   ;
00057A 1A          1235   CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
00057B 77          1236   			LD	(HL), A
00057C B7          1237   			OR	A			; Check for end of string
00057D C8          1238   			RET	Z			; And return
00057E 23          1239   			INC	HL
00057F 13          1240   			INC	DE
000580 18 F8       1241   			JR	CSTR_CAT_1		; Loop until finished
000582             1242   ; --- End agon_misc.asm ---
000582             1243   
000582             1244   ; --- Begin agon_os.asm ---
000582             1245   ;
000582             1246   ; Title:	BBC Basic for AGON - MOS stuff
000582             1247   ; Author:	Dean Belfield
000582             1248   ; Created:	04/12/2024
000582             1249   ; Last Updated:	17/12/2024
000582             1250   ;
000582             1251   ; Modinfo:
000582             1252   ; 08/12/2024:	Added OSCLI and file I/O
000582             1253   ; 11/12/2024:	Added ESC key handling
000582             1254   ; 		Added OSWORD
000582             1255   ; 12/12/2024:	Added OSRDCH, OSBYTE_81 and fixed *EDIT
000582             1256   ; 17/12/2024:	Added OSWORD_01, OSWORD_02, OSWORD_0E, GET$(x,y), fixed INKEY, POS, VPOS and autoload
000582             1257   
000582             1258   			.ASSUME	ADL = 0
000582             1259   
000582             1260   			; INCLUDE	"equs.inc"
000582             1261   			; INCLUDE "macros.inc"
000582             1262   			; INCLUDE "mos_api.inc"	; In MOS/src
000582             1263   
000582             1264   			; SEGMENT CODE
000582             1265   
000582             1266   			; XDEF	OSWORD
000582             1267   			; XDEF	OSBYTE
000582             1268   			; XDEF	OSINIT
000582             1269   			; XDEF	OSOPEN
000582             1270   			; XDEF	OSSHUT
000582             1271   			; XDEF	OSLOAD
000582             1272   			; XDEF	OSSAVE
000582             1273   			; XDEF	OSLINE
000582             1274   			; XDEF	OSSTAT
000582             1275   			; XDEF	OSWRCH
000582             1276   			; XDEF	OSRDCH
000582             1277   			; XDEF	OSBGET
000582             1278   			; XDEF	OSBPUT
000582             1279   			; XDEF	OSCLI
000582             1280   			; XDEF	PROMPT
000582             1281   			; XDEF	GETPTR
000582             1282   			; XDEF	PUTPTR
000582             1283   			; XDEF	GETEXT
000582             1284   			; XDEF	TRAP
000582             1285   			; XDEF	LTRAP
000582             1286   			; XDEF	BYE
000582             1287   			; XDEF	RESET
000582             1288   			; XDEF	ESCSET
000582             1289   
000582             1290   			; XREF	EXTERR
000582             1291   			; XREF	VBLANK_INIT
000582             1292   			; XREF	VBLANK_STOP
000582             1293   			; XREF	USER
000582             1294   			; XREF	COUNT
000582             1295   			; XREF	COUNT0
000582             1296   			; XREF	COUNT1
000582             1297   			; XREF	GETCSR
000582             1298   			; XREF	GETSCHR_1
000582             1299   			; XREF	NULLTOCR
000582             1300   			; XREF	CRLF
000582             1301   			; XREF	FLAGS
000582             1302   			; XREF	OSWRCHPT
000582             1303   			; XREF	OSWRCHCH
000582             1304   			; XREF	OSWRCHFH
000582             1305   			; XREF	KEYASCII
000582             1306   			; XREF	KEYDOWN
000582             1307   			; XREF	LISTON
000582             1308   			; XREF	PAGE_
000582             1309   			; XREF	CSTR_FNAME
000582             1310   			; XREF	CSTR_FINDCH
000582             1311   			; XREF	CSTR_CAT
000582             1312   			; XREF	CSTR_ENDSWITH
000582             1313   			; XREF	CSTR_LINE
000582             1314   			; XREF	NEWIT
000582             1315   			; XREF	BAD
000582             1316   			; XREF	CLEAN
000582             1317   			; XREF	LINNUM
000582             1318   			; XREF	BUFFER
000582             1319   			; XREF	NXT
000582             1320   			; XREF	ERROR_
000582             1321   			; XREF	XEQ
000582             1322   			; XREF	LEXAN2
000582             1323   			; XREF	GETTOP
000582             1324   			; XREF	FINDL
000582             1325   			; XREF	DEL
000582             1326   			; XREF	LISTIT
000582             1327   			; XREF	ESCAPE
000582             1328   			; XREF	ASC_TO_NUMBER
000582             1329   			; XREF	CLOOP
000582             1330   			; XREF	SCRAP
000582             1331   			; XREF	POINT_
000582             1332   			; XREF	SOUND_
000582             1333   			; XREF	EXPRI
000582             1334   			; XREF	COMMA
000582             1335   			; XREF	BRAKET
000582             1336   			; XREF 	GETSCHR
000582             1337   			; XREF	ZERO
000582             1338   			; XREF	TRUE
000582             1339   
000582             1340   ;OSINIT - Initialise RAM mapping etc.
000582             1341   ;If BASIC is entered by BBCBASIC FILENAME then file
000582             1342   ;FILENAME.BBC is automatically CHAINed.
000582             1343   ;   Outputs: DE = initial value of HIMEM (top of RAM)
000582             1344   ;            HL = initial value of PAGE (user program)
000582             1345   ;            Z-flag reset indicates AUTO-RUN.
000582             1346   ;  Destroys: A,D,E,H,L,F
000582             1347   ;
000582 CD 25 04    1348   OSINIT:			CALL	VBLANK_INIT
000585 AF          1349   			XOR	A
000586 32 00 52    1350   			LD	(FLAGS), A		; Clear flags and set F = Z
000589 21 00 56    1351   			LD 	HL, USER
00058C 11 00 FF    1352   			LD	DE, RAM_Top
00058F 5F          1353   			LD	E, A			; Page boundary
000590 3A 00 53    1354   			LD	A, (ACCS)		; Return NZ if there is a file to chain
000593 B7          1355   			OR	A
000594 C9          1356   			RET
000595             1357   
000595             1358   ; PROMPT: output the input prompt
000595             1359   ;
000595 3E 3E       1360   PROMPT: 		LD	A,'>'			; Falls through to OSWRCH
000597             1361   
000597             1362   ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
000597             1363   ; Parameters:
000597             1364   ; - A: Character to write
000597             1365   ;
000597 E5          1366   OSWRCH:			PUSH	HL
000598 21 FE 55    1367   			LD	HL, LISTON		; Fetch the LISTON variable
00059B CB 5E       1368   			BIT	3, (HL)			; Check whether we are in *EDIT mode
00059D 20 0A       1369   			JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
00059F             1370   ;
00059F 2A 03 52    1371   			LD	HL, (OSWRCHCH)		; L: Channel #
0005A2 2D          1372   			DEC	L			; If it is 1
0005A3 28 17       1373   			JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0005A5             1374   ;
0005A5 E1          1375   			POP	HL			; Otherwise
0005A6 49 D7       1376   			RST.LIS	10h			; Output the character to MOS
0005A8 C9          1377   			RET
0005A9             1378   ;
0005A9 2A 01 52    1379   OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0005AC FE 0A       1380   			CP	0AH			; Just ignore this
0005AE 28 0A       1381   			JR	Z, OSWRCH_BUFFER2
0005B0 FE 0D       1382   			CP	0DH			; Is it the end of line?
0005B2 20 01       1383   			JR	NZ, OSWRCH_BUFFER1	; No, so carry on
0005B4 AF          1384   			XOR	A			; Turn it into a NUL character
0005B5 77          1385   OSWRCH_BUFFER1:		LD	(HL), A			; Echo the character into the buffer
0005B6 23          1386   			INC	HL			; Increment pointer
0005B7 22 01 52    1387   			LD	(OSWRCHPT), HL		; Write pointer back
0005BA E1          1388   OSWRCH_BUFFER2:		POP	HL
0005BB C9          1389   			RET
0005BC             1390   ;
0005BC D5          1391   OSWRCH_FILE:		PUSH	DE
0005BD 5C          1392   			LD	E, H			; Filehandle to E
0005BE CD 65 06    1393   			CALL	OSBPUT			; Write the byte out
0005C1 D1          1394   			POP	DE
0005C2 E1          1395   			POP	HL
0005C3 C9          1396   			RET
0005C4             1397   
0005C4             1398   ; OSRDCH
0005C4             1399   ;
0005C4 CD 8F 45    1400   OSRDCH:			CALL    NXT			; Check if we are doing GET$(x,y)
0005C7 FE 28       1401   			CP      '('
0005C9 28 09       1402   			JR	Z, @F 			; Yes, so skip to that functionality
0005CB             1403   			MOSCALL	mos_getkey		; Otherwise, read keyboard
0005CB 3E 00       0001M1 			LD	A, function
0005CD 49 CF       0002M1 			RST.LIS	08h
0005CF FE 1B       1404   			CP	1Bh
0005D1 28 6A       1405   			JR	Z, LTRAP1
0005D3 C9          1406   			RET
0005D4             1407   ;
0005D4 FD 23       1408   @@:			INC	IY			; Skip '('
0005D6 CD B7 18    1409   			CALL    EXPRI         	  	; Get the first parameter
0005D9 D9          1410   			EXX
0005DA E5          1411   			PUSH	HL
0005DB CD 26 21    1412   			CALL	COMMA			; Get the second parameter
0005DE CD B7 18    1413   			CALL	EXPRI
0005E1 D9          1414   			EXX
0005E2 D1          1415   			POP	DE 			; DE: X coordinate
0005E3 CD 32 21    1416   			CALL	BRAKET 			; Check for trailing bracket
0005E6 C3 BD 01    1417   			JP 	GETSCHR			; Read the character
0005E9             1418   
0005E9             1419   ; OSLINE: Invoke the line editor
0005E9             1420   ;
0005E9 1E 01       1421   OSLINE:			LD 	E, 1			; Default is to clear the buffer
0005EB             1422   
0005EB             1423   ; Entry point to line editor that does not clear the buffer
0005EB             1424   ; Parameters:
0005EB             1425   ; - HL: addresses destination buffer (on page boundary)
0005EB             1426   ; Returns:
0005EB             1427   ; -  A: 0
0005EB             1428   ; NB: Buffer filled, terminated by CR
0005EB             1429   ;
0005EB FD E5       1430   OSLINE1:		PUSH	IY
0005ED E5          1431   			PUSH	HL			; Buffer address
0005EE 01 00 01    1432   			LD	BC, 256			; Buffer length
0005F1             1433   			MOSCALL	mos_editline		; Call the MOS line editor
0005F1 3E 09       0001M1 			LD	A, function
0005F3 49 CF       0002M1 			RST.LIS	08h
0005F5 E1          1434   			POP	HL			; Pop the address
0005F6 FD E1       1435   			POP	IY
0005F8 F5          1436   			PUSH	AF			; Stack the return value (key pressed)
0005F9 CD 25 05    1437   			CALL	NULLTOCR		; Turn the 0 character to a CR
0005FC CD 7F 41    1438   			CALL	CRLF			; Display CRLF
0005FF F1          1439   			POP	AF
000600 FE 1B       1440   			CP	1Bh 			; Check if ESC terminated the input
000602 CA 3D 06    1441   			JP	Z, LTRAP1 		; Yes, so do the ESC thing
000605 3A 00 52    1442   			LD	A, (FLAGS)		; Otherwise
000608 CB BF       1443   			RES	7, A 			; Clear the escape flag
00060A 32 00 52    1444   			LD	(FLAGS), A
00060D CD 0F 0B    1445   			CALL	WAIT_VBLANK 		; Wait a frame
000610 AF          1446    			XOR	A			; Return A = 0
000611 32 05 52    1447   			LD	(KEYDOWN), A
000614 32 06 52    1448   			LD	(KEYASCII), A
000617 C9          1449   			RET
000618             1450   
000618             1451   ;
000618             1452   ; ESCSET
000618             1453   ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
000618             1454   ;
000618 E5          1455   ESCSET: 		PUSH    HL
000619 21 00 52    1456           		LD      HL,FLAGS		; Pointer to FLAGS
00061C CB 76       1457           		BIT     6,(HL)			; If bit 6 is set, then
00061E 20 02       1458           		JR      NZ,ESCDIS		; escape is disabled, so skip
000620 CB FE       1459           		SET     7,(HL)			; Set bit 7, the escape flag
000622 E1          1460   ESCDIS: 		POP     HL
000623 C9          1461           		RET
000624             1462   
000624             1463   ;
000624             1464   ; ESCTEST
000624             1465   ; Test for ESC key
000624             1466   ;
000624 CD 2D 06    1467   ESCTEST:		CALL	READKEY			; Read the keyboard
000627 C0          1468   			RET	NZ			; Skip if no key is pressed
000628 FE 1B       1469   			CP	1BH			; If ESC pressed then
00062A 28 EC       1470   			JR	Z,ESCSET		; jump to the escape set routine
00062C C9          1471   			RET
00062D             1472   
00062D             1473   ; Read the keyboard
00062D             1474   ; Returns:
00062D             1475   ; - A: ASCII of the pressed key
00062D             1476   ; - F: Z if the key is pressed, otherwise NZ
00062D             1477   ;
00062D 3A 05 52    1478   READKEY:		LD	A, (KEYDOWN)		; Get key down
000630 3D          1479   			DEC	A 			; Set Z flag if keydown is 1
000631 3A 06 52    1480   			LD	A, (KEYASCII)		; Get key ASCII value
000634 C9          1481   			RET
000635             1482   ;
000635             1483   ; TRAP
000635             1484   ; This is called whenever BASIC needs to check for ESC
000635             1485   ;
000635 CD 24 06    1486   TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
000638             1487   ;
000638 3A 00 52    1488   LTRAP:			LD	A,(FLAGS)		; Get FLAGS
00063B B7          1489   			OR	A			; This checks for bit 7; if it is not set then the result will
00063C F0          1490   			RET	P			; be positive (bit 7 is the sign bit in Z80), so return
00063D 21 00 52    1491   LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
000640 CB BE       1492   			RES	7,(HL)			; Clear the escape pressed flag and
000642 C3 67 26    1493   			JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
000645             1494   
000645             1495   ; RESET
000645             1496   ;
000645 C9          1497   RESET:			RET				; Yes this is fine
000646             1498   
000646             1499   ; OSOPEN
000646             1500   ; HL: Pointer to path
000646             1501   ;  F: C Z
000646             1502   ;     x x OPENIN
000646             1503   ; 	  OPENOUT
000646             1504   ;     x	  OPENUP
000646             1505   ; Returns:
000646             1506   ;  A: Filehandle, 0 if cannot open
000646             1507   ;
000646 0E 01       1508   OSOPEN:			LD	C, fa_read
000648 28 06       1509   			JR	Z, @F
00064A 0E 32       1510   			LD	C, fa_write | fa_open_append
00064C 38 02       1511   			JR	C, @F
00064E 0E 0A       1512   			LD	C, fa_write | fa_create_always
000650             1513   @@:			MOSCALL	mos_fopen
000650 3E 0A       0001M1 			LD	A, function
000652 49 CF       0002M1 			RST.LIS	08h
000654 C9          1514   			RET
000655             1515   
000655             1516   ;OSSHUT - Close disk file(s).
000655             1517   ; E = file channel
000655             1518   ;  If E=0 all files are closed (except SPOOL)
000655             1519   ; Destroys: A,B,C,D,E,H,L,F
000655             1520   ;
000655 C5          1521   OSSHUT:			PUSH	BC
000656 4B          1522   			LD	C, E
000657             1523   			MOSCALL	mos_fclose
000657 3E 0B       0001M1 			LD	A, function
000659 49 CF       0002M1 			RST.LIS	08h
00065B C1          1524   			POP	BC
00065C C9          1525   			RET
00065D             1526   
00065D             1527   ; OSBGET - Read a byte from a random disk file.
00065D             1528   ;  E = file channel
00065D             1529   ; Returns
00065D             1530   ;  A = byte read
00065D             1531   ;  Carry set if LAST BYTE of file
00065D             1532   ; Destroys: A,B,C,F
00065D             1533   ;
00065D C5          1534   OSBGET:			PUSH	BC
00065E 4B          1535   			LD	C, E
00065F             1536   			MOSCALL	mos_fgetc
00065F 3E 0C       0001M1 			LD	A, function
000661 49 CF       0002M1 			RST.LIS	08h
000663 C1          1537   			POP	BC
000664 C9          1538   			RET
000665             1539   
000665             1540   ; OSBPUT - Write a byte to a random disk file.
000665             1541   ;  E = file channel
000665             1542   ;  A = byte to write
000665             1543   ; Destroys: A,B,C,F
000665             1544   ;
000665 C5          1545   OSBPUT:			PUSH	BC
000666 4B          1546   			LD	C, E
000667 47          1547   			LD	B, A
000668             1548   			MOSCALL	mos_fputc
000668 3E 0D       0001M1 			LD	A, function
00066A 49 CF       0002M1 			RST.LIS	08h
00066C C1          1549   			POP	BC
00066D C9          1550   			RET
00066E             1551   
00066E             1552   ; OSSTAT - Read file status
00066E             1553   ;  E = file channel
00066E             1554   ; Returns
00066E             1555   ;  F: Z flag set - EOF
00066E             1556   ;  A: If Z then A = 0
00066E             1557   ; Destroys: A,D,E,H,L,F
00066E             1558   ;
00066E C5          1559   OSSTAT:			PUSH	BC
00066F 4B          1560   			LD	C, E
000670             1561   			MOSCALL	mos_feof
000670 3E 0E       0001M1 			LD	A, function
000672 49 CF       0002M1 			RST.LIS	08h
000674 C1          1562   			POP	BC
000675 FE 01       1563   			CP	1
000677 C9          1564   			RET
000678             1565   
000678             1566   ; GETPTR - Return file pointer.
000678             1567   ;    E = file channel
000678             1568   ; Returns:
000678             1569   ; DEHL = pointer (0-&7FFFFF)
000678             1570   ; Destroys: A,B,C,D,E,H,L,F
000678             1571   ;
000678 FD E5       1572   GETPTR:			PUSH		IY
00067A 4B          1573   			LD		C, E
00067B             1574   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
00067B 3E 19       0001M1 			LD	A, function
00067D 49 CF       0002M1 			RST.LIS	08h
00067F 5B E5       1575   			PUSH.LIL	HL
000681 5B FD E1    1576   			POP.LIL		IY		; IYU: Pointer to FIL structure
000684 5B FD 6E 11 1577   			LD.LIL		L, (IY + FIL.fptr + 0)
000688 5B FD 66 12 1578   			LD.LIL		H, (IY + FIL.fptr + 1)
00068C 5B FD 5E 13 1579   			LD.LIL		E, (IY + FIL.fptr + 2)
000690 5B FD 56 14 1580   			LD.LIL		D, (IY + FIL.fptr + 3)
000694 FD E1       1581   			POP		IY
000696 C9          1582   			RET
000697             1583   
000697             1584   ; PUTPTR - Update file pointer.
000697             1585   ;    A = file channel
000697             1586   ; DEHL = new pointer (0-&7FFFFF)
000697             1587   ; Destroys: A,B,C,D,E,H,L,F
000697             1588   ;
000697 FD E5       1589   PUTPTR:			PUSH		IY
000699 4F          1590   			LD		C, A  		; C: Filehandle
00069A 5B E5       1591   			PUSH.LIL	HL
00069C 5B 21 02 00 1592   			LD.LIL		HL, 2
       00          
0006A1 5B 39       1593   			ADD.LIL		HL, SP
0006A3 5B 73       1594   			LD.LIL		(HL), E 	; 3rd byte of DWORD set to E
0006A5 5B E1       1595   			POP.LIL		HL
0006A7 5A          1596   			LD		E, D  		; 4th byte passed as E
0006A8             1597   			MOSCALL		mos_flseek
0006A8 3E 1C       0001M1 			LD	A, function
0006AA 49 CF       0002M1 			RST.LIS	08h
0006AC FD E1       1598   			POP		IY
0006AE C9          1599   			RET
0006AF             1600   
0006AF             1601   ; GETEXT - Find file size.
0006AF             1602   ;    E = file channel
0006AF             1603   ; Returns:
0006AF             1604   ; DEHL = file size (0-&800000)
0006AF             1605   ; Destroys: A,B,C,D,E,H,L,F
0006AF             1606   ;
0006AF FD E5       1607   GETEXT:			PUSH		IY
0006B1 4B          1608   			LD		C, E
0006B2             1609   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
0006B2 3E 19       0001M1 			LD	A, function
0006B4 49 CF       0002M1 			RST.LIS	08h
0006B6 5B E5       1610   			PUSH.LIL	HL
0006B8 5B FD E1    1611   			POP.LIL		IY		; IYU: Pointer to FIL structure
0006BB 5B FD 6E 0B 1612   			LD.LIL		L, (IY + FFOBJID.objsize + 0)
0006BF 5B FD 66 0C 1613   			LD.LIL		H, (IY + FFOBJID.objsize + 1)
0006C3 5B FD 5E 0D 1614   			LD.LIL		E, (IY + FFOBJID.objsize + 2)
0006C7 5B FD 56 0E 1615   			LD.LIL		D, (IY + FFOBJID.objsize + 3)
0006CB FD E1       1616   			POP		IY
0006CD C9          1617   			RET
0006CE             1618   
0006CE             1619   ;OSLOAD - Load an area of memory from a file.
0006CE             1620   ;   Inputs: HL addresses filename (CR terminated)
0006CE             1621   ;           DE = address at which to load
0006CE             1622   ;           BC = maximum allowed size (bytes)
0006CE             1623   ;  Outputs: Carry reset indicates no room for file.
0006CE             1624   ; Destroys: A,B,C,D,E,H,L,F
0006CE             1625   ;
0006CE C5          1626   OSLOAD:			PUSH	BC			; Stack the size
0006CF D5          1627   			PUSH	DE			; Stack the load address
0006D0 11 00 53    1628   			LD	DE, ACCS		; Buffer address for filename
0006D3 CD 3D 05    1629   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0006D6 21 00 53    1630   			LD	HL, ACCS		; HL: Filename
0006D9 CD 17 08    1631   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0006DC CD 28 08    1632   			CALL	EXT_HANDLER		; Get the default handler
0006DF D1          1633   			POP	DE			; Restore the load address
0006E0 C1          1634   			POP	BC			; Restore the size
0006E1 B7          1635   			OR	A
0006E2 CA A9 07    1636   			JP 	Z, OSLOAD_BBC
0006E5             1637   ;
0006E5             1638   ; Load the file in as a text file
0006E5             1639   ;
0006E5 AF          1640   OSLOAD_TXT:		XOR	A			; Set file attributes to read
0006E6 CD 46 06    1641   			CALL	OSOPEN			; Open the file
0006E9 5F          1642   			LD 	E, A 			; The filehandle
0006EA B7          1643   			OR	A
0006EB 3E 04       1644   			LD	A, 4			; File not found error
0006ED CA B1 07    1645   			JP	Z, OSERROR		; Jump to error handler
0006F0 CD C2 40    1646   			CALL	NEWIT			; Call NEW to clear the program space
0006F3             1647   ;
0006F3 21 00 53    1648   OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0006F6             1649   ;
0006F6             1650   ; First skip any whitespace (indents) at the beginning of the input
0006F6             1651   ;
0006F6 CD 5D 06    1652   @@:			CALL	OSBGET			; Read the byte into A
0006F9 38 1C       1653   			JR	C, OSLOAD_TXT3		; Is it EOF?
0006FB FE 0A       1654   			CP	LF 			; Is it LF?
0006FD 28 18       1655   			JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0006FF FE 21       1656   			CP	21h			; Is it less than or equal to ASCII space?
000701 38 F3       1657   			JR	C, @B 			; Yes, so keep looping
000703 77          1658   			LD	(HL), A 		; Store the first character
000704 2C          1659   			INC	L
000705             1660   ;
000705             1661   ; Now read the rest of the line in
000705             1662   ;
000705 CD 5D 06    1663   OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
000708 38 26       1664   			JR	C, OSLOAD_TXT4		; Is it EOF?
00070A FE 20       1665   			CP	20h			; Skip if not an ASCII character
00070C 38 05       1666   			JR	C, @F
00070E 77          1667   			LD	(HL), A 		; Store in the input buffer
00070F 2C          1668   			INC	L			; Increment the buffer pointer
000710 CA 73 3F    1669   			JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
000713 FE 0A       1670   @@:			CP	LF			; Check for LF
000715 20 EE       1671   			JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
000717             1672   ;
000717             1673   ; Finally, handle EOL/EOF
000717             1674   ;
000717 36 0D       1675   OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
000719 7D          1676   			LD	A, L			; Check for minimum line length
00071A FE 02       1677   			CP	2			; If it is 2 characters or less (including CR)
00071C 38 08       1678   			JR	C, @F			; Then don't bother entering it
00071E D5          1679   			PUSH	DE			; Preserve the filehandle
00071F CD 3B 07    1680   			CALL	OSEDIT			; Enter the line in memory
000722 DC 9E 40    1681   			CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
000725 D1          1682   			POP	DE
000726 CD 6E 06    1683   @@:			CALL	OSSTAT			; End of file?
000729 20 C8       1684   			JR	NZ, OSLOAD_TXT1		; No, so loop
00072B CD 55 06    1685   			CALL	OSSHUT			; Close the file
00072E 37          1686   			SCF				; Flag to BASIC that we're good
00072F C9          1687   			RET
000730             1688   ;
000730             1689   ; Special case for BASIC programs with no blank line at the end
000730             1690   ;
000730 FE 20       1691   OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
000732 38 05       1692   			JR	C, @F
000734 77          1693   			LD	(HL), A			; Store the character
000735 2C          1694   			INC	L
000736 CA 73 3F    1695   			JP	Z, BAD
000739 18 DC       1696   @@:			JR	OSLOAD_TXT3
00073B             1697   ;
00073B             1698   ; This bit enters the line into memory
00073B             1699   ; Also called from OSLOAD_TXT
00073B             1700   ; Returns:
00073B             1701   ; F: C if a new line has been entered (CLEAN will need to be called)
00073B             1702   ;
00073B AF          1703   OSEDIT:			XOR	A			; Entry point after *EDIT
00073C 32 FB 55    1704   			LD      (COUNT),A
00073F FD 21 00 53 1705   			LD      IY,ACCS
000743 CD 0E 44    1706   			CALL    LINNUM			; HL: The line number from the input buffer
000746 CD 8F 45    1707   			CALL    NXT			; Skip spaces
000749 7C          1708   			LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
00074A B5          1709   			OR      L
00074B 28 00       1710   			JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
00074D             1711   ;
00074D             1712   ; This bit does the lexical analysis and tokenisation
00074D             1713   ;
00074D 11 00 54    1714   LNZERO:			LD	DE,BUFFER
000750 0E 01       1715                   	LD	C,1			; LEFT MODE
000752 E5          1716                   	PUSH	HL
000753 CD 9C 44    1717                   	CALL	LEXAN2			; LEXICAL ANALYSIS
000756 E1          1718                   	POP	HL
000757 12          1719                   	LD	(DE),A			; TERMINATOR
000758 AF          1720                   	XOR	A
000759 47          1721                   	LD	B,A
00075A 4B          1722                   	LD	C,E			; BC=LINE LENGTH
00075B 13          1723                   	INC	DE
00075C 12          1724                   	LD	(DE),A			; ZERO NEXT
00075D 7C          1725                   	LD	A,H
00075E B5          1726                   	OR	L
00075F FD 21 00 54 1727                   	LD	IY,BUFFER		; FOR XEQ
000763 CA 1D 25    1728                   	JP	Z,XEQ			; DIRECT MODE
000766 C5          1729                   	PUSH	BC
000767 CD C7 41    1730                   	CALL	FINDL
00076A CC 6D 40    1731                   	CALL	Z,DEL
00076D C1          1732                   	POP	BC
00076E 79          1733                   	LD	A,C
00076F B7          1734                   	OR	A
000770 C8          1735                   	RET	Z
000771 C6 04       1736                   	ADD	A,4
000773 4F          1737                   	LD	C,A			; LENGTH INCLUSIVE
000774 D5          1738                   	PUSH	DE			; LINE NUMBER
000775 C5          1739                   	PUSH	BC			; SAVE LINE LENGTH
000776 EB          1740                   	EX	DE,HL
000777 C5          1741                   	PUSH	BC
000778 CD A9 40    1742                   	CALL	GETTOP
00077B C1          1743                   	POP	BC
00077C E5          1744                   	PUSH	HL
00077D 09          1745                   	ADD	HL,BC
00077E E5          1746                   	PUSH	HL
00077F 24          1747                   	INC	H
000780 AF          1748                   	XOR	A
000781 ED 72       1749                   	SBC	HL,SP
000783 E1          1750                   	POP	HL
000784 D2 C8 3F    1751                   	JP	NC,ERROR_		; "No room"
000787 E3          1752                   	EX	(SP),HL
000788 E5          1753                   	PUSH	HL
000789 23          1754                   	INC	HL
00078A B7          1755                   	OR	A
00078B ED 52       1756                   	SBC	HL,DE
00078D 44          1757                   	LD	B,H			; BC=AMOUNT TO MOVE
00078E 4D          1758                   	LD	C,L
00078F E1          1759                   	POP	HL
000790 D1          1760                   	POP	DE
000791 28 02       1761                   	JR	Z,ATENDos
000793 ED B8       1762                   	LDDR				; MAKE SPACE
000795 C1          1763   ATENDos:          	POP	BC			; LINE LENGTH
000796 D1          1764                   	POP	DE			; LINE NUMBER
000797 23          1765                   	INC	HL
000798 71          1766                   	LD	(HL),C			; STORE LENGTH
000799 23          1767                   	INC	HL
00079A 73          1768                   	LD	(HL),E			; STORE LINE NUMBER
00079B 23          1769                   	INC	HL
00079C 72          1770                   	LD	(HL),D
00079D 23          1771                   	INC	HL
00079E 11 00 54    1772                   	LD	DE,BUFFER
0007A1 EB          1773                   	EX	DE,HL
0007A2 0D          1774                   	DEC	C
0007A3 0D          1775                   	DEC	C
0007A4 0D          1776                   	DEC	C
0007A5 ED B0       1777                   	LDIR				; ADD LINE
0007A7 37          1778   			SCF
0007A8 C9          1779   			RET
0007A9             1780   ;
0007A9             1781   ; Load the file in as a tokenised binary blob
0007A9             1782   ;
0007A9             1783   OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
0007A9 3E 01       0001M1 			LD	A, function
0007AB 49 CF       0002M1 			RST.LIS	08h
0007AD D0          1784   			RET	NC			; If load returns with carry reset - NO ROOM
0007AE B7          1785   			OR	A			; If there is no error (A=0)
0007AF 37          1786   			SCF				; Need to set carry indicating there was room
0007B0 C8          1787   			RET	Z			; Return
0007B1             1788   ;
0007B1 F5          1789   OSERROR:		PUSH	AF			; Handle the MOS error
0007B2 21 00 53    1790   			LD	HL, ACCS		; Address of the buffer
0007B5 01 00 01    1791   			LD	BC, 256			; Length of the buffer
0007B8 5F          1792   			LD	E, A			; The error code
0007B9             1793   			MOSCALL	mos_getError		; Copy the error message into the buffer
0007B9 3E 0F       0001M1 			LD	A, function
0007BB 49 CF       0002M1 			RST.LIS	08h
0007BD F1          1794   			POP	AF
0007BE E5          1795   			PUSH	HL			; Stack the address of the error (now in ACCS)
0007BF C6 7F       1796   			ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0007C1 C3 D9 3F    1797   			JP	EXTERR			; Trigger an external error
0007C4             1798   
0007C4             1799   ;OSSAVE - Save an area of memory to a file.
0007C4             1800   ;   Inputs: HL addresses filename (term CR)
0007C4             1801   ;           DE = start address of data to save
0007C4             1802   ;           BC = length of data to save (bytes)
0007C4             1803   ; Destroys: A,B,C,D,E,H,L,F
0007C4             1804   ;
0007C4 C5          1805   OSSAVE:			PUSH	BC			; Stack the size
0007C5 D5          1806   			PUSH	DE			; Stack the save address
0007C6 11 00 53    1807   			LD	DE, ACCS		; Buffer address for filename
0007C9 CD 3D 05    1808   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0007CC 21 00 53    1809   			LD	HL, ACCS		; HL: Filename
0007CF CD 17 08    1810   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0007D2 CD 28 08    1811   			CALL	EXT_HANDLER		; Get the default handler
0007D5 D1          1812   			POP	DE			; Restore the save address
0007D6 C1          1813   			POP	BC			; Restore the size
0007D7 B7          1814   			OR	A			; Is the extension .BBC
0007D8 28 35       1815   			JR	Z, OSSAVE_BBC		; Yes, so use that
0007DA             1816   ;
0007DA             1817   ; Save the file out as a text file
0007DA             1818   ;
0007DA 3A 03 52    1819   OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0007DD F5          1820   			PUSH	AF
0007DE AF          1821   			XOR	A
0007DF 3C          1822   			INC	A			; Make sure C is clear, A is 1, for OPENOUT
0007E0 32 03 52    1823   			LD	(OSWRCHCH), A
0007E3 CD 46 06    1824   			CALL	OSOPEN			; Open the file
0007E6 32 04 52    1825   			LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0007E9 DD 21 FE 55 1826   			LD	IX, LISTON		; Required for LISTIT
0007ED 2A DC 55    1827   			LD	HL, (PAGE_)		; Get start of program area
0007F0 D9          1828   			EXX
0007F1 01 00 00    1829   			LD	BC, 0			; Set the initial indent counters
0007F4 D9          1830   			EXX
0007F5 7E          1831   OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0007F6 B7          1832   			OR	A
0007F7 28 0A       1833   			JR	Z, OSSAVE_TXT2
0007F9 23          1834   			INC	HL			; Skip the length byte
0007FA 5E          1835   			LD	E, (HL)			; Get the line number
0007FB 23          1836   			INC	HL
0007FC 56          1837   			LD	D, (HL)
0007FD 23          1838   			INC	HL
0007FE CD E1 40    1839   			CALL	LISTIT			; List the line
000801 18 F2       1840   			JR	OSSAVE_TXT1
000803 3A 04 52    1841   OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
000806 5F          1842   			LD	E, A
000807 CD 55 06    1843   			CALL	OSSHUT			; Close it
00080A F1          1844   			POP	AF			; Restore the channel
00080B 32 03 52    1845   			LD	(OSWRCHCH), A
00080E C9          1846   			RET
00080F             1847   ;
00080F             1848   ; Save the file out as a tokenised binary blob
00080F             1849   ;
00080F             1850   OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
00080F 3E 02       0001M1 			LD	A, function
000811 49 CF       0002M1 			RST.LIS	08h
000813 B7          1851   			OR	A			; If there is no error (A=0)
000814 C8          1852   			RET	Z			; Just return
000815 18 9A       1853   			JR	OSERROR			; Trip an error
000817             1854   
000817             1855   ; Check if an extension is specified in the filename
000817             1856   ; Add a default if not specified
000817             1857   ; HL: Filename (CSTR format)
000817             1858   ;
000817 E5          1859   EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
000818 0E 2E       1860   			LD	C, '.'			; Search for dot (marks start of extension)
00081A CD 5D 05    1861   			CALL	CSTR_FINDCH
00081D B7          1862   			OR	A			; Check for end of string marker
00081E 20 06       1863   			JR	NZ, @F			; No, so skip as we have an extension at this point
000820 11 54 08    1864   			LD	DE, EXT_LOOKUP		; Get the first (default extension)
000823 CD 73 05    1865   			CALL	CSTR_CAT		; Concat it to string pointed to by HL
000826 E1          1866   @@:			POP	HL			; Restore the filename pointer
000827 C9          1867   			RET
000828             1868   
000828             1869   ; Check if an extension is valid and, if so, provide a pointer to a handler
000828             1870   ; HL: Filename (CSTR format)
000828             1871   ; Returns:
000828             1872   ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
000828             1873   ;
000828 E5          1874   EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
000829 0E 2E       1875   			LD	C, '.'			; Find the '.'
00082B CD 5D 05    1876   			CALL	CSTR_FINDCH
00082E 11 54 08    1877   			LD	DE, EXT_LOOKUP		; The lookup table
000831             1878   ;
000831 E5          1879   EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
000832 CD 65 05    1880   			CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
000835 E1          1881   			POP	HL			; Restore the pointer to the extension
000836 28 18       1882   			JR	Z, EXT_HANDLER_2	; We have a match!
000838             1883   ;
000838 1A          1884   @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
000839 13          1885   			INC	DE
00083A B7          1886   			OR	A
00083B 20 FB       1887   			JR	NZ, @B
00083D 13          1888   			INC	DE			; Skip the file extension # byte
00083E             1889   ;
00083E 1A          1890   			LD	A, (DE)			; Are we at the end of the table?
00083F B7          1891   			OR	A
000840 20 EF       1892   			JR	NZ, EXT_HANDLER_1	; No, so loop
000842             1893   ;
000842 3E CC       1894   			LD      A,204			; Throw a "Bad name" error
000844 CD D9 3F    1895           		CALL    EXTERR
000847 42 61 64 20 1896           		DB    	"Bad name", 0
       6E 61 6D 65 
       00          
000850             1897   ;
000850 13          1898   EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
000851 1A          1899   			LD	A, (DE)
000852 E1          1900   			POP	HL			; Restore the filename pointer
000853 C9          1901   			RET
000854             1902   
000854             1903   ; Extension lookup table
000854             1904   ; CSTR, TYPE
000854             1905   ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
000854             1906   ; 	- 1: Human readable plain text
000854             1907   ;
000854 2E 42 42 43 1908   EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
       00 00       
00085A 2E 54 58 54 1909   			DB	".TXT", 0, 1
       00 01       
000860 2E 41 53 43 1910   			DB	".ASC", 0, 1
       00 01       
000866 2E 42 41 53 1911   			DB	".BAS", 0, 1
       00 01       
00086C 00          1912   			DB	0			; End of table
00086D             1913   ; OSWORD
00086D             1914   ;
00086D FE 01       1915   OSWORD:			CP	01H			; GETIME
00086F 28 1D       1916   			JR	Z, OSWORD_01
000871 FE 02       1917   			CP	02H			; PUTIME
000873 28 2F       1918   			JR	Z, OSWORD_02
000875 FE 0E       1919   			CP	0EH			; GETIMS
000877 28 4F       1920   			JR	Z, OSWORD_0E
000879 FE 0F       1921   			CP	0FH			; PUTIMS
00087B 28 10       1922   			JR	Z, @F
00087D FE 07       1923   			CP	07H			; SOUND
00087F             1924   			; JR	Z, OSWORD_07
00087F CA 22 0B    1925   			JP Z, SOUND_ ; REALTIVE JUMP TOO FAR
000882 FE 08       1926   			CP	08H			; ENVELOPE
000884 28 07       1927   			JR	Z, @F
000886 FE 09       1928   			CP	09H			; POINT
000888 28 30       1929   			JR	Z, OSWORD_09
00088A C3 F5 08    1930   			JP	HUH			; Anything else trips an error
00088D C9          1931   @@:			RET				; Dummy return for unimplemented functions
00088E             1932   
00088E             1933   ; GETIME: return current time in centiseconds
00088E             1934   ;
00088E DD E5       1935   OSWORD_01:		PUSH 	IX
000890             1936   			MOSCALL	mos_sysvars
000890 3E 08       0001M1 			LD	A, function
000892 49 CF       0002M1 			RST.LIS	08h
000894 06 04       1937   			LD	B, 4
000896 5B DD 7E 00 1938   @@:			LD.LIL	A, (IX + sysvar_time)
00089A 77          1939   			LD	(HL), A
00089B 23          1940   			INC	HL
00089C 5B DD 23    1941   			INC.LIL	IX
00089F 10 F5       1942   			DJNZ 	@B
0008A1 DD E1       1943   			POP	IX
0008A3 C9          1944   			RET
0008A4             1945   
0008A4             1946   ; PUTIME: set time in centiseconds
0008A4             1947   ;
0008A4 DD E5       1948   OSWORD_02:		PUSH 	IX
0008A6             1949   			MOSCALL	mos_sysvars
0008A6 3E 08       0001M1 			LD	A, function
0008A8 49 CF       0002M1 			RST.LIS	08h
0008AA 06 04       1950   			LD	B, 4
0008AC 7E          1951   @@:			LD	A, (HL)
0008AD 5B DD 77 00 1952   			LD.LIL 	(IX + sysvar_time), A
0008B1 23          1953   			INC	HL
0008B2 5B DD 23    1954   			INC.LIL IX
0008B5 10 F5       1955   			DJNZ 	@B
0008B7 DD E1       1956   			POP	IX
0008B9 C9          1957   			RET
0008BA             1958   
0008BA             1959   ; ; SOUND channel,volume,pitch,duration
0008BA             1960   ; ; Parameters:
0008BA             1961   ; ; - HL: Pointer to data
0008BA             1962   ; ;   - 0,1: Channel
0008BA             1963   ; ;   - 2,3: Volume 0 (off) to 15 (full volume)
0008BA             1964   ; ;   - 4,5: Pitch 0 - 255
0008BA             1965   ; ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
0008BA             1966   ; ;
0008BA             1967   ; OSWORD_07:		EQU	SOUND_
0008BA             1968   ; ; NOTE: we call this directly above because ez80asm has trouble resolving the label
0008BA             1969   
0008BA             1970   ; OSWORD 0x09: POINT
0008BA             1971   ; Parameters:
0008BA             1972   ; - HL: Address of data
0008BA             1973   ;   - 0,1: X coordinate
0008BA             1974   ;   - 2,3: Y coordinate
0008BA             1975   ;
0008BA ED 5B 08 52 1976   OSWORD_09:		LD	DE,(SCRAP+0)
0008BE 2A 0A 52    1977   			LD	HL,(SCRAP+2)
0008C1 CD FA 01    1978   			CALL	POINT_
0008C4 32 0C 52    1979   			LD	(SCRAP+4),A
0008C7 C9          1980   			RET
0008C8             1981   
0008C8             1982   ; GETIMS - Get time from RTC
0008C8             1983   ;
0008C8 FD E5       1984   OSWORD_0E:		PUSH	IY
0008CA             1985   			MOSCALL	mos_getrtc
0008CA 3E 12       0001M1 			LD	A, function
0008CC 49 CF       0002M1 			RST.LIS	08h
0008CE FD E1       1986   			POP	IY
0008D0 C9          1987   			RET
0008D1             1988   
0008D1             1989   ;
0008D1             1990   ; OSBYTE
0008D1             1991   ; Parameters:
0008D1             1992   ; - A: FX #
0008D1             1993   ; - L: First parameter
0008D1             1994   ; - H: Second parameter
0008D1             1995   ;
0008D1 FE 0B       1996   OSBYTE:			CP	0BH			; Keyboard auto-repeat delay
0008D3 28 31       1997   			JR	Z, OSBYTE_0B
0008D5 FE 0C       1998   			CP	0CH			; Keyboard auto-repeat rate
0008D7 28 54       1999   			JR	Z, OSBYTE_0C
0008D9 FE 13       2000   			CP	13H			; Wait for vblank
0008DB 28 77       2001   			JR	Z, OSBYTE_13
0008DD FE 76       2002   			CP	76H			; Set keyboard LED
0008DF 28 7B       2003   			JR	Z, OSBYTE_76
0008E1 FE 81       2004   			CP	81H			; Read the keyboard
0008E3 CA 84 09    2005   			JP	Z, OSBYTE_81
0008E6 FE 86       2006   			CP	86H			; Get cursor coordinates
0008E8 CA DD 09    2007   			JP	Z, OSBYTE_86
0008EB FE 87       2008   			CP	87H			; Fetch current mode and character under cursor
0008ED CA 09 0A    2009   			JP	Z, OSBYTE_87
0008F0 FE A0       2010   			CP	A0H			; Fetch system variable
0008F2 CA 1F 0A    2011   			JP	Z, OSBYTE_A0
0008F5             2012   ;
0008F5             2013   ; Anything else trips an error
0008F5             2014   ;
0008F5 3E FE       2015   HUH:    		LD      A,254			; Bad command error
0008F7 CD D9 3F    2016           		CALL    EXTERR
0008FA 42 61 64 20 2017           		DB    	"Bad command"
       63 6F 6D 6D 
       61 6E 64    
000905 00          2018           		DEFB    0
000906             2019   
000906             2020   ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
000906             2021   ; Parameters:
000906             2022   ; - HL: Repeat delay
000906             2023   ;
000906             2024   OSBYTE_0B:		VDU	23
000906 3E 17       0001M1         LD      A, VAL
000908 CD 97 05    0002M1         CALL    OSWRCH
00090B             2025   			VDU	0
00090B 3E 00       0001M1         LD      A, VAL
00090D CD 97 05    0002M1         CALL    OSWRCH
000910             2026   			VDU	vdp_keystate
000910 3E 88       0001M1         LD      A, VAL
000912 CD 97 05    0002M1         CALL    OSWRCH
000915             2027   			VDU	L
000915 7D          0001M1         LD      A, VAL
000916 CD 97 05    0002M1         CALL    OSWRCH
000919             2028   			VDU	H
000919 7C          0001M1         LD      A, VAL
00091A CD 97 05    0002M1         CALL    OSWRCH
00091D             2029   			VDU	0
00091D 3E 00       0001M1         LD      A, VAL
00091F CD 97 05    0002M1         CALL    OSWRCH
000922             2030   			VDU 	0
000922 3E 00       0001M1         LD      A, VAL
000924 CD 97 05    0002M1         CALL    OSWRCH
000927             2031   			VDU	255
000927 3E FF       0001M1         LD      A, VAL
000929 CD 97 05    0002M1         CALL    OSWRCH
00092C C9          2032   			RET
00092D             2033   
00092D             2034   ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
00092D             2035   ; Parameters:
00092D             2036   ; - HL: Repeat rate
00092D             2037   ;
00092D             2038   OSBYTE_0C:		VDU	23
00092D 3E 17       0001M1         LD      A, VAL
00092F CD 97 05    0002M1         CALL    OSWRCH
000932             2039   			VDU	0
000932 3E 00       0001M1         LD      A, VAL
000934 CD 97 05    0002M1         CALL    OSWRCH
000937             2040   			VDU	vdp_keystate
000937 3E 88       0001M1         LD      A, VAL
000939 CD 97 05    0002M1         CALL    OSWRCH
00093C             2041   			VDU	0
00093C 3E 00       0001M1         LD      A, VAL
00093E CD 97 05    0002M1         CALL    OSWRCH
000941             2042   			VDU 	0
000941 3E 00       0001M1         LD      A, VAL
000943 CD 97 05    0002M1         CALL    OSWRCH
000946             2043   			VDU	L
000946 7D          0001M1         LD      A, VAL
000947 CD 97 05    0002M1         CALL    OSWRCH
00094A             2044   			VDU	H
00094A 7C          0001M1         LD      A, VAL
00094B CD 97 05    0002M1         CALL    OSWRCH
00094E             2045   			VDU	255
00094E 3E FF       0001M1         LD      A, VAL
000950 CD 97 05    0002M1         CALL    OSWRCH
000953 C9          2046   			RET
000954             2047   
000954             2048   ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
000954             2049   ;
000954 CD 0F 0B    2050   OSBYTE_13:		CALL	WAIT_VBLANK
000957 2E 00       2051   			LD	L, 0			; Returns 0
000959 C3 D2 1B    2052   			JP	COUNT0
00095C             2053   ;
00095C             2054   ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
00095C             2055   ; Parameters:
00095C             2056   ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
00095C             2057   ;
00095C             2058   OSBYTE_76:		VDU	23
00095C 3E 17       0001M1         LD      A, VAL
00095E CD 97 05    0002M1         CALL    OSWRCH
000961             2059   			VDU	0
000961 3E 00       0001M1         LD      A, VAL
000963 CD 97 05    0002M1         CALL    OSWRCH
000966             2060   			VDU	vdp_keystate
000966 3E 88       0001M1         LD      A, VAL
000968 CD 97 05    0002M1         CALL    OSWRCH
00096B             2061   			VDU	0
00096B 3E 00       0001M1         LD      A, VAL
00096D CD 97 05    0002M1         CALL    OSWRCH
000970             2062   			VDU 	0
000970 3E 00       0001M1         LD      A, VAL
000972 CD 97 05    0002M1         CALL    OSWRCH
000975             2063   			VDU	0
000975 3E 00       0001M1         LD      A, VAL
000977 CD 97 05    0002M1         CALL    OSWRCH
00097A             2064   			VDU	0
00097A 3E 00       0001M1         LD      A, VAL
00097C CD 97 05    0002M1         CALL    OSWRCH
00097F             2065   			VDU	L
00097F 7D          0001M1         LD      A, VAL
000980 CD 97 05    0002M1         CALL    OSWRCH
000983 C9          2066   			RET
000984             2067   
000984             2068   ; OSBYTE 0x81: Read the keyboard
000984             2069   ; Parameters:
000984             2070   ; - HL = Time to wait (centiseconds)
000984             2071   ; Returns:
000984             2072   ; - F: Carry reset indicates time-out
000984             2073   ; - H: NZ if timed out
000984             2074   ; - L: The character typed
000984             2075   ; Destroys: A,D,E,H,L,F
000984             2076   ;
000984 D9          2077   OSBYTE_81:		EXX
000985 CB 7C       2078   			BIT 	7, H 			; Check for minus numbers
000987 D9          2079   			EXX
000988 20 1C       2080   			JR	NZ, OSBYTE_81_1		; Yes, so do INKEY(-n)
00098A CD 2D 06    2081   			CALL	READKEY			; Read the keyboard
00098D 28 09       2082   			JR	Z, @F 			; Skip if we have a key
00098F CD 0F 0B    2083   			CALL	WAIT_VBLANK 		; Wait a frame
000992 7C          2084   			LD	A, H 			; Check loop counter
000993 B5          2085   			OR 	L
000994 2B          2086   			DEC 	HL			; Decrement
000995 20 ED       2087   			JR	NZ, OSBYTE_81		; And loop
000997 C9          2088   			RET 				; H: Will be set to 255 to flag timeout
000998             2089   ;
000998 21 05 52    2090   @@:			LD	HL, KEYDOWN		; We have a key, so
00099B 36 00       2091   			LD	(HL), 0			; clear the keydown flag
00099D FE 1B       2092   			CP	1BH			; If we are pressing ESC,
00099F CA 18 06    2093   			JP	Z, ESCSET 		; Then handle ESC
0009A2 26 00       2094   			LD	H, 0			; H: Not timed out
0009A4 6F          2095   			LD	L, A			; L: The character
0009A5 C9          2096   			RET
0009A6             2097   ;
0009A6             2098   ;
0009A6             2099   ; Check immediately whether a given key is being pressed
0009A6             2100   ; Result is integer numeric
0009A6             2101   ;
0009A6             2102   OSBYTE_81_1:		MOSCALL	mos_getkbmap		; Get the base address of the keyboard
0009A6 3E 1E       0001M1 			LD	A, function
0009A8 49 CF       0002M1 			RST.LIS	08h
0009AA 23          2103   			INC	HL			; Index from 0
0009AB 7D          2104   			LD	A, L			; Negate the LSB of the answer
0009AC ED 44       2105   			NEG
0009AE 4F          2106   			LD	C, A			;  E: The positive keycode value
0009AF 3E 01       2107   			LD	A, 1			; Throw an "Out of range" error
0009B1 FA C8 3F    2108   			JP	M, ERROR_		; if the argument < - 128
0009B4             2109   ;
0009B4 21 D5 09    2110   			LD	HL, BITLOOKUP		; HL: The bit lookup table
0009B7 11 00 00    2111   			LD	DE, 0
0009BA 79          2112   			LD	A, C
0009BB E6 07       2113   			AND	00000111b		; Just need the first three bits
0009BD 5F          2114   			LD	E, A			; DE: The bit number
0009BE 19          2115   			ADD	HL, DE
0009BF 46          2116   			LD	B, (HL)			;  B: The mask
0009C0             2117   ;
0009C0 79          2118   			LD	A, C			; Fetch the keycode again
0009C1 E6 78       2119   			AND	01111000b		; And divide by 8
0009C3 0F          2120   			RRCA
0009C4 0F          2121   			RRCA
0009C5 0F          2122   			RRCA
0009C6 5F          2123   			LD	E, A			; DE: The offset (the MSW has already been cleared previously)
0009C7 5B DD 19    2124   			ADD.LIL	IX, DE			; IX: The address
0009CA 5B DD 7E 00 2125   			LD.LIL	A, (IX+0)		;  A: The keypress
0009CE A0          2126   			AND	B			; Check whether the bit is set
0009CF CA 7C 20    2127   			JP	Z, ZERO			; No, so return 0
0009D2 C3 41 1C    2128   			JP	TRUEev			; Otherwise return -1
0009D5             2129   ;
0009D5             2130   ; A bit lookup table
0009D5             2131   ;
0009D5 01 02 04 08 2132   BITLOOKUP:		DB	01h, 02h, 04h, 08h
0009D9 10 20 40 80 2133   			DB	10h, 20h, 40h, 80h
0009DD             2134   
0009DD             2135   ; OSBYTE 0x86: Fetch cursor coordinates
0009DD             2136   ; Returns:
0009DD             2137   ; - L: X Coordinate (POS)
0009DD             2138   ; - H: Y Coordinate (VPOS)
0009DD             2139   ;
0009DD DD E5       2140   OSBYTE_86:		PUSH	IX			; Get the system vars in IX
0009DF             2141   			MOSCALL	mos_sysvars		; Reset the semaphore
0009DF 3E 08       0001M1 			LD	A, function
0009E1 49 CF       0002M1 			RST.LIS	08h
0009E3 5B DD CB 04 2142   			RES.LIL	0, (IX+sysvar_vpd_pflags)
       86          
0009E8             2143   			VDU	23
0009E8 3E 17       0001M1         LD      A, VAL
0009EA CD 97 05    0002M1         CALL    OSWRCH
0009ED             2144   			VDU	0
0009ED 3E 00       0001M1         LD      A, VAL
0009EF CD 97 05    0002M1         CALL    OSWRCH
0009F2             2145   			VDU	vdp_cursor
0009F2 3E 82       0001M1         LD      A, VAL
0009F4 CD 97 05    0002M1         CALL    OSWRCH
0009F7 5B DD CB 04 2146   @@:			BIT.LIL	0, (IX+sysvar_vpd_pflags)
       46          
0009FC 28 F9       2147   			JR	Z, @B			; Wait for the result
0009FE 5B DD 6E 07 2148   			LD.LIL	L, (IX + sysvar_cursorX)
000A02 5B DD 66 08 2149   			LD.LIL	H, (IX + sysvar_cursorY)
000A06 DD E1       2150   			POP	IX
000A08 C9          2151   			RET
000A09             2152   
000A09             2153   ; OSBYTE 0x87: Fetch current mode and character under cursor
000A09             2154   ;
000A09 DD E5       2155   OSBYTE_87:		PUSH	IX
000A0B CD 2D 0E    2156   			CALL	GETCSR			; Get the current screen position
000A0E CD BD 01    2157   			CALL	GETSCHR			; Read character from screen
000A11 6F          2158   			LD	L, A
000A12             2159   			MOSCALL	mos_sysvars
000A12 3E 08       0001M1 			LD	A, function
000A14 49 CF       0002M1 			RST.LIS	08h
000A16 5B DD 66 27 2160   			LD.LIL	H, (IX+sysvar_scrMode)	; H: Screen mode
000A1A DD E1       2161   			POP	IX
000A1C C3 D4 1B    2162   			JP	COUNT1
000A1F             2163   
000A1F             2164   ; OSBYTE 0xA0: Fetch system variable
000A1F             2165   ; Parameters:
000A1F             2166   ; - L: The system variable to fetch
000A1F             2167   ;
000A1F DD E5       2168   OSBYTE_A0:		PUSH	IX
000A21             2169   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
000A21 3E 08       0001M1 			LD	A, function
000A23 49 CF       0002M1 			RST.LIS	08h
000A25 5B 01 00 00 2170   			LD.LIL	BC, 0
       00          
000A2A 4D          2171   			LD	C, L			; BCU = L
000A2B 5B DD 09    2172   			ADD.LIL	IX, BC			; Add to IX
000A2E 5B DD 6E 00 2173   			LD.LIL	L, (IX + 0)		; Fetch the return value
000A32 DD E1       2174   			POP	IX
000A34 C3 D2 1B    2175   			JP 	COUNT0
000A37             2176   
000A37             2177   ; OSCLI
000A37             2178   ;
000A37             2179   ;
000A37             2180   ;OSCLI - Process a MOS command
000A37             2181   ;
000A37 CD 91 0A    2182   OSCLI: 			CALL    SKIPSP
000A3A FE 0D       2183   			CP      CR
000A3C C8          2184   			RET     Z
000A3D FE 7C       2185   			CP      '|'
000A3F C8          2186   			RET     Z
000A40 EB          2187   			EX      DE,HL
000A41 21 A0 0A    2188   			LD      HL,COMDS
000A44 1A          2189   OSCLI0:			LD      A,(DE)
000A45 CD 98 0A    2190   			CALL    UPPRC
000A48 BE          2191   			CP      (HL)
000A49 28 0B       2192   			JR      Z,OSCLI2
000A4B 38 2E       2193   			JR      C,OSCLI6
000A4D CB 7E       2194   OSCLI1:			BIT     7,(HL)
000A4F 23          2195   			INC     HL
000A50 28 FB       2196   			JR      Z,OSCLI1
000A52 23          2197   			INC     HL
000A53 23          2198   			INC     HL
000A54 18 EE       2199   			JR      OSCLI0
000A56             2200   ;
000A56 D5          2201   OSCLI2:			PUSH    DE
000A57 13          2202   OSCLI3:			INC     DE
000A58 23          2203   			INC     HL
000A59 1A          2204   			LD      A,(DE)
000A5A CD 98 0A    2205   			CALL    UPPRC
000A5D FE 2E       2206   			CP      '.'			; ABBREVIATED?
000A5F 28 0A       2207   			JR      Z,OSCLI4
000A61 AE          2208   			XOR     (HL)
000A62 28 F3       2209   			JR      Z,OSCLI3
000A64 FE 80       2210   			CP      80H
000A66 28 03       2211   			JR      Z,OSCLI4
000A68 D1          2212   			POP     DE
000A69 18 E2       2213   			JR      OSCLI1
000A6B             2214   ;
000A6B F1          2215   OSCLI4:			POP     AF
000A6C 13          2216   		        INC     DE
000A6D CB 7E       2217   OSCLI5:			BIT     7,(HL)
000A6F 23          2218   			INC     HL
000A70 28 FB       2219   			JR      Z,OSCLI5
000A72 7E          2220   			LD      A,(HL)
000A73 23          2221   			INC     HL
000A74 66          2222   			LD      H,(HL)
000A75 6F          2223   			LD      L,A
000A76 E5          2224   			PUSH    HL
000A77 EB          2225   			EX      DE,HL
000A78 C3 91 0A    2226   			JP      SKIPSP
000A7B             2227   ;
000A7B EB          2228   OSCLI6:			EX	DE, HL			; HL: Buffer for command
000A7C 11 00 53    2229   			LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
000A7F D5          2230   			PUSH	DE			; Store buffer address
000A80 CD 4F 05    2231   			CALL	CSTR_LINE		; Fetch the line
000A83 E1          2232   			POP	HL			; HL: Pointer to command string in ACCS
000A84 FD E5       2233   			PUSH	IY
000A86             2234   			MOSCALL	mos_oscli		; Returns OSCLI error in A
000A86 3E 10       0001M1 			LD	A, function
000A88 49 CF       0002M1 			RST.LIS	08h
000A8A FD E1       2235   			POP	IY
000A8C B7          2236   			OR	A			; 0 means MOS returned OK
000A8D C8          2237   			RET	Z			; So don't do anything
000A8E C3 B1 07    2238   			JP 	OSERROR			; Otherwise it's a MOS error
000A91             2239   
000A91 7E          2240   SKIPSP:			LD      A,(HL)
000A92 FE 20       2241           		CP      ' '
000A94 C0          2242           		RET     NZ
000A95 23          2243           		INC     HL
000A96 18 F9       2244           		JR      SKIPSP
000A98             2245   
000A98 E6 7F       2246   UPPRC:  		AND     7FH
000A9A FE 60       2247   			CP      '`'
000A9C D8          2248   			RET     C
000A9D E6 5F       2249   			AND     5FH			; CONVERT TO UPPER CASE
000A9F C9          2250   			RET
000AA0             2251   
000AA0             2252   ; Each command has bit 7 of the last character set, and is followed by the address of the handler
000AA0             2253   ; These must be in alphabetical order
000AA0             2254   ;
000AA0 42 59 C5    2255   COMDS:  		DB	"BY",'E'+80h		; BYE
000AA3 B0 0A       2256   			DW	BYE
000AA5 45 44 49 D4 2257   			DB	"EDI",'T'+80h		; EDIT
000AA9 BB 0A       2258   			DW	STAR_EDIT
000AAB 46 D8       2259   			DB	'F','X'+80h		; FX
000AAD F7 0A       2260   			DW	STAR_FX
000AAF             2261   ;			DB	'VERSIO','N'+80h	; VERSION
000AAF             2262   ;			DW	STAR_VERSION
000AAF FF          2263   			DB	FFh
000AB0             2264   
000AB0             2265   ; *BYE
000AB0             2266   ;
000AB0 CD 48 04    2267   BYE:			CALL	VBLANK_STOP		; Restore MOS interrupts
000AB3 5B DD E1    2268   			POP.LIL	IX 			; The return address to init
000AB6 21 00 00    2269   			LD	HL, 0			; The return code
000AB9 DD E9       2270   			JP	(IX)
000ABB             2271   
000ABB             2272   ; *EDIT linenum
000ABB             2273   ;
000ABB CD BE 04    2274   STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
000ABE EB          2275   			EX	DE, HL			; HL: Line number
000ABF CD C7 41    2276   			CALL	FINDL			; HL: Address in RAM of tokenised line
000AC2 3E 29       2277   			LD	A, 41			; F:NZ If the line is not found
000AC4 C2 C8 3F    2278   			JP	NZ, ERROR_		; Do error 41: No such line in that case
000AC7             2279   ;
000AC7             2280   ; Use LISTIT to output the line to the ACCS buffer
000AC7             2281   ;
000AC7 23          2282   			INC	HL			; Skip the length byte
000AC8 5E          2283   			LD	E, (HL)			; Fetch the line number
000AC9 23          2284   			INC	HL
000ACA 56          2285   			LD	D, (HL)
000ACB 23          2286   			INC	HL
000ACC DD 21 00 53 2287   			LD	IX, ACCS		; Pointer to where the copy is to be stored
000AD0 DD 22 01 52 2288   			LD	(OSWRCHPT), IX
000AD4 DD 21 FE 55 2289   			LD	IX, LISTON		; Pointer to LISTON variable in RAM
000AD8 DD 7E 00    2290   			LD	A, (IX)			; Store that variable
000ADB F5          2291   			PUSH	AF
000ADC DD 36 00 09 2292   			LD	(IX), 09h		; Set to echo to buffer
000AE0 CD E1 40    2293   			CALL	LISTIT
000AE3 F1          2294   			POP	AF
000AE4 DD 77 00    2295   			LD	(IX), A			; Restore the original LISTON variable
000AE7 21 00 53    2296   			LD	HL, ACCS		; HL: ACCS
000AEA 5D          2297   			LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
000AEB CD EB 05    2298   			CALL	OSLINE1			; Invoke the editor
000AEE CD 3B 07    2299   			CALL	OSEDIT
000AF1 DC 9E 40    2300   			CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
000AF4 C3 34 38    2301   			JP      CLOOP			; Jump back to immediate mode
000AF7             2302   
000AF7             2303   ; OSCLI FX n
000AF7             2304   ;
000AF7 CD BE 04    2305   STAR_FX:		CALL	ASC_TO_NUMBER
000AFA 4B          2306   			LD	C, E			; C: Save FX #
000AFB CD BE 04    2307   			CALL	ASC_TO_NUMBER
000AFE 7A          2308   			LD	A, D  			; Is first parameter > 255?
000AFF B7          2309   			OR 	A
000B00 28 03       2310   			JR	Z, STAR_FX1		; Yes, so skip next bit
000B02 EB          2311   			EX	DE, HL 			; Parameter is 16-bit
000B03 18 06       2312   			JR	STAR_FX2
000B05             2313   ;
000B05 43          2314   STAR_FX1:		LD	B, E 			; B: Save First parameter
000B06 CD BE 04    2315   			CALL	ASC_TO_NUMBER		; Fetch second parameter
000B09 68          2316   			LD	L, B 			; L: First parameter
000B0A 63          2317   			LD	H, E 			; H: Second parameter
000B0B             2318   ;
000B0B 79          2319   STAR_FX2:		LD	A, C 			; A: FX #
000B0C C3 D1 08    2320   			JP	OSBYTE
000B0F             2321   
000B0F             2322   ; Helper Functions
000B0F             2323   ;
000B0F DD E5       2324   WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
000B11             2325   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
000B11 3E 08       0001M1 			LD	A, function
000B13 49 CF       0002M1 			RST.LIS	08h
000B15 5B DD 7E 00 2326   			LD.LIL	A, (IX + sysvar_time + 0)
000B19 5B DD BE 00 2327   @@:			CP.LIL 	A, (IX + sysvar_time + 0)
000B1D 28 FA       2328   			JR	Z, @B
000B1F DD E1       2329   			POP	IX
000B21 C9          2330   			RET; --- End agon_os.asm ---
000B22             2331   
000B22             2332   ; --- Begin agon_sound.asm ---
000B22             2333   ;
000B22             2334   ; Title:	BBC Basic for AGON - Audio stuff
000B22             2335   ; Author:	Dean Belfield
000B22             2336   ; Created:	04/12/2024
000B22             2337   ; Last Updated:	11/12/2024
000B22             2338   ;
000B22             2339   ; Modinfo:
000B22             2340   ; 11/12/2024:	Modified SOUND_ to work with OSWORD
000B22             2341   
000B22             2342   			.ASSUME	ADL = 0
000B22             2343   ;	.ORG 0x0000
000B22             2344   
000B22             2345   			; INCLUDE	"equs.inc"
000B22             2346   			; INCLUDE "macros.inc"
000B22             2347   			; INCLUDE "mos_api.inc"	; In MOS/src
000B22             2348   
000B22             2349   ;			SEGMENT CODE
000B22             2350   
000B22             2351   ;			XDEF	SOUND_
000B22             2352   
000B22             2353   ;			XREF	OSWRCH
000B22             2354   ;			XREF	VDU_BUFFER
000B22             2355   ;			XREF	LTRAP
000B22             2356   
000B22             2357   ; SOUND channel,volume,pitch,duration
000B22             2358   ; Parameters:
000B22             2359   ; - HL: Pointer to data
000B22             2360   ;   - 0,1: Channel
000B22             2361   ;   - 2,3: Volume 0 (off) to 15 (full volume)
000B22             2362   ;   - 4,5: Pitch 0 - 255
000B22             2363   ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000B22             2364   ;
000B22 7E          2365   SOUND_:			LD	A, (HL)			; Channel
000B23 32 00 53    2366   			LD	(VDU_BUFFER+0), A
000B26 AF          2367   			XOR	A			; Waveform
000B27 32 01 53    2368   			LD	(VDU_BUFFER+1), A
000B2A 23          2369   			INC	HL
000B2B 23          2370   			INC	HL
000B2C             2371   ;
000B2C             2372   ; Calculate the volume
000B2C             2373   ;
000B2C 4E          2374   			LD	C, (HL)			; Volume
000B2D 06 06       2375   			LD	B, 6			; C already contains the volume
000B2F ED 4C       2376   			MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
000B31 79          2377   			LD	A, C
000B32 32 02 53    2378   			LD	(VDU_BUFFER+2), A
000B35 23          2379   			INC	HL
000B36 23          2380   			INC	HL
000B37             2381   ;
000B37             2382   ; And the frequency
000B37             2383   ;
000B37 E5          2384   			PUSH	HL
000B38 6E          2385   			LD	L, (HL)
000B39 26 00       2386   			LD	H, 0
000B3B 11 AD 0B    2387   			LD	DE, SOUND_FREQ_LOOKUP
000B3E 29          2388   			ADD	HL, HL
000B3F 19          2389   			ADD	HL, DE
000B40 7E          2390   			LD	A, (HL)
000B41 32 03 53    2391   			LD	(VDU_BUFFER+3), A
000B44 23          2392   			INC	HL
000B45 7E          2393   			LD	A, (HL)
000B46 32 04 53    2394   			LD	(VDU_BUFFER+4), A
000B49 E1          2395   			POP	HL
000B4A 23          2396   			INC	HL
000B4B 23          2397   			INC	HL
000B4C             2398   ;
000B4C             2399   ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
000B4C             2400   ;
000B4C 4E          2401   			LD	C, (HL)
000B4D 06 32       2402   			LD	B, 50			; C contains the duration, so MLT by 50
000B4F ED 4C       2403   			MLT	BC
000B51 ED 43 05 53 2404   			LD	(VDU_BUFFER+5), BC
000B55             2405   ;
000B55 DD E5       2406   			PUSH	IX			; Get the system vars in IX
000B57             2407   			MOSCALL	mos_sysvars		; Reset the semaphore
000B57 3E 08       0001M1 			LD	A, function
000B59 49 CF       0002M1 			RST.LIS	08h
000B5B 5B DD CB 04 2408   SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
       9E          
000B60             2409   ;
000B60             2410   			VDU	23			; Send the sound command
000B60 3E 17       0001M1         LD      A, VAL
000B62 CD 97 05    0002M1         CALL    OSWRCH
000B65             2411   			VDU	0
000B65 3E 00       0001M1         LD      A, VAL
000B67 CD 97 05    0002M1         CALL    OSWRCH
000B6A             2412   			VDU	vdp_audio
000B6A 3E 85       0001M1         LD      A, VAL
000B6C CD 97 05    0002M1         CALL    OSWRCH
000B6F             2413   			VDU	(VDU_BUFFER+0)		; 0: Channel
000B6F 3A 00 53    0001M1         LD      A, VAL
000B72 CD 97 05    0002M1         CALL    OSWRCH
000B75             2414   			VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
000B75 3A 01 53    0001M1         LD      A, VAL
000B78 CD 97 05    0002M1         CALL    OSWRCH
000B7B             2415   			VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
000B7B 3A 02 53    0001M1         LD      A, VAL
000B7E CD 97 05    0002M1         CALL    OSWRCH
000B81             2416   			VDU	(VDU_BUFFER+3)		; 3: Frequency L
000B81 3A 03 53    0001M1         LD      A, VAL
000B84 CD 97 05    0002M1         CALL    OSWRCH
000B87             2417   			VDU	(VDU_BUFFER+4)		; 4: Frequency H
000B87 3A 04 53    0001M1         LD      A, VAL
000B8A CD 97 05    0002M1         CALL    OSWRCH
000B8D             2418   			VDU	(VDU_BUFFER+5)		; 5: Duration L
000B8D 3A 05 53    0001M1         LD      A, VAL
000B90 CD 97 05    0002M1         CALL    OSWRCH
000B93             2419   			VDU	(VDU_BUFFER+6)		; 6: Duration H
000B93 3A 06 53    0001M1         LD      A, VAL
000B96 CD 97 05    0002M1         CALL    OSWRCH
000B99             2420   ;
000B99             2421   ; Wait for acknowledgement
000B99             2422   ;
000B99 5B DD CB 04 2423   @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
       5E          
000B9E 28 F9       2424   			JR	Z, @B			; Wait for the result
000BA0 CD 38 06    2425   			CALL	LTRAP			; Check for ESC
000BA3 5B DD 7E 0E 2426   			LD.LIL	A, (IX+sysvar_audioSuccess)
000BA7 A7          2427   			AND	A			; Check if VDP has queued the note
000BA8 28 B1       2428   			JR	Z, SOUND0		; No, so loop back and send again
000BAA             2429   ;
000BAA DD E1       2430   			POP	IX
000BAC C9          2431   			RET
000BAD             2432   
000BAD             2433   ; Frequency Lookup Table
000BAD             2434   ; Set up to replicate the BBC Micro audio frequencies
000BAD             2435   ;
000BAD             2436   ; Split over 5 complete octaves, with 53 being middle C
000BAD             2437   ; * C4: 262hz
000BAD             2438   ; + A4: 440hz
000BAD             2439   ;
000BAD             2440   ;	2	3	4	5	6	7	8
000BAD             2441   ;
000BAD             2442   ; B	1	49	97	145	193	241
000BAD             2443   ; A#	0	45	93	141	189	237
000BAD             2444   ; A		41	89+	137	185	233
000BAD             2445   ; G#		37	85	133	181	229
000BAD             2446   ; G		33	81	129	177	225
000BAD             2447   ; F#		29	77	125	173	221
000BAD             2448   ; F		25	73	121	169	217
000BAD             2449   ; E		21	69	117	165	213
000BAD             2450   ; D#		17	65	113	161	209
000BAD             2451   ; D		13	61	109	157	205	253
000BAD             2452   ; C#		9	57	105	153	201	249
000BAD             2453   ; C		5	53*	101	149	197	245
000BAD             2454   ;
000BAD 75 00 76 00 2455   SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
       78 00 7A 00 
       7B 00 83 00 
       85 00 87 00 
000BBD 89 00 8B 00 2456   			DW	 137,  139,  141,  143,  145,  147,  149,  151
       8D 00 8F 00 
       91 00 93 00 
       95 00 97 00 
000BCD 99 00 9C 00 2457   			DW	 153,  156,  158,  160,  162,  165,  167,  170
       9E 00 A0 00 
       A2 00 A5 00 
       A7 00 AA 00 
000BDD AC 00 AF 00 2458   			DW	 172,  175,  177,  180,  182,  185,  188,  190
       B1 00 B4 00 
       B6 00 B9 00 
       BC 00 BE 00 
000BED C1 00 C4 00 2459   			DW	 193,  196,  199,  202,  205,  208,  211,  214
       C7 00 CA 00 
       CD 00 D0 00 
       D3 00 D6 00 
000BFD D9 00 DC 00 2460   			DW	 217,  220,  223,  226,  230,  233,  236,  240
       DF 00 E2 00 
       E6 00 E9 00 
       EC 00 F0 00 
000C0D F3 00 F7 00 2461   			DW	 243,  247,  251,  254,  258,  262,  265,  269
       FB 00 FE 00 
       02 01 06 01 
       09 01 0D 01 
000C1D 11 01 15 01 2462   			DW	 273,  277,  281,  285,  289,  294,  298,  302
       19 01 1D 01 
       21 01 26 01 
       2A 01 2E 01 
000C2D 33 01 37 01 2463   			DW	 307,  311,  316,  320,  325,  330,  334,  339
       3C 01 40 01 
       45 01 4A 01 
       4E 01 53 01 
000C3D 58 01 5D 01 2464   			DW	 344,  349,  354,  359,  365,  370,  375,  381
       62 01 67 01 
       6D 01 72 01 
       77 01 7D 01 
000C4D 82 01 88 01 2465   			DW	 386,  392,  398,  403,  409,  415,  421,  427
       8E 01 93 01 
       99 01 9F 01 
       A5 01 AB 01 
000C5D B2 01 B8 01 2466   			DW	 434,  440,  446,  453,  459,  466,  473,  480
       BE 01 C5 01 
       CB 01 D2 01 
       D9 01 E0 01 
000C6D E7 01 EE 01 2467   			DW	 487,  494,  501,  508,  516,  523,  531,  539
       F5 01 FC 01 
       04 02 0B 02 
       13 02 1B 02 
000C7D 22 02 2A 02 2468   			DW	 546,  554,  562,  571,  579,  587,  596,  605
       32 02 3B 02 
       43 02 4B 02 
       54 02 5D 02 
000C8D 65 02 6E 02 2469   			DW	 613,  622,  631,  641,  650,  659,  669,  679
       77 02 81 02 
       8A 02 93 02 
       9D 02 A7 02 
000C9D B1 02 BB 02 2470   			DW	 689,  699,  709,  719,  729,  740,  751,  762
       C5 02 CF 02 
       D9 02 E4 02 
       EF 02 FA 02 
000CAD 05 03 10 03 2471   			DW	 773,  784,  795,  807,  819,  831,  843,  855
       1B 03 27 03 
       33 03 3F 03 
       4B 03 57 03 
000CBD 63 03 70 03 2472   			DW	 867,  880,  893,  906,  919,  932,  946,  960
       7D 03 8A 03 
       97 03 A4 03 
       B2 03 C0 03 
000CCD CE 03 DC 03 2473   			DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
       EA 03 F9 03 
       08 04 17 04 
       26 04 36 04 
000CDD 45 04 55 04 2474   			DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
       65 04 76 04 
       86 04 97 04 
       A8 04 BA 04 
000CED CB 04 DD 04 2475   			DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
       EF 04 02 05 
       14 05 27 05 
       3A 05 4E 05 
000CFD 62 05 76 05 2476   			DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
       8A 05 9F 05 
       B3 05 C9 05 
       DE 05 F4 05 
000D0D 0A 06 21 06 2477   			DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
       38 06 4F 06 
       66 06 7E 06 
       96 06 AF 06 
000D1D C8 06 E1 06 2478   			DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
       FA 06 14 07 
       2F 07 4A 07 
       65 07 80 07 
000D2D 9C 07 B8 07 2479   			DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
       D5 07 F2 07 
       10 08 2D 08 
       4B 08 6A 08 
000D3D 8A 08 A9 08 2480   			DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
       CA 08 EA 08 
       0C 09 2D 09 
       4F 09 72 09 
000D4D 95 09 B9 09 2481   			DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
       DD 09 02 0A 
       27 0A 4D 0A 
       73 0A 9A 0A 
000D5D C2 0A EA 0A 2482   			DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
       12 0B 3C 0B 
       66 0B 90 0B 
       BB 0B E7 0B 
000D6D 13 0C 40 0C 2483   			DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
       6E 0C 9C 0C 
       CB 0C FA 0C 
       2B 0D 5C 0D 
000D7D 8E 0D C0 0D 2484   			DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
       F3 0D 27 0E 
       5C 0E 91 0E 
       C8 0E FF 0E 
000D8D 36 0F 6F 0F 2485   			DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
       A9 0F E3 0F 
       1E 10 5A 10 
       97 10 D5 10 
000D9D 13 11 53 11 2486   			DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
       93 11 D5 11 
       17 12 5B 12 
       9F 12 E4 12 
000DAD             2487   ; --- End agon_sound.asm ---
000DAD             2488   
000DAD             2489   ; --- Begin acorn.asm ---
000DAD             2490   ;
000DAD             2491   ;Automatically created from original source on 2024-12-15 15:29:12
000DAD             2492   ;
000DAD             2493                   .ASSUME ADL = 0
000DAD             2494   ;	.ORG 0x0000
000DAD             2495   ;                SEGMENT CODE
000DAD             2496   ;
000DAD             2497   ;PATCH FOR BBC BASIC TO CP/M 2.2 & 3.0
000DAD             2498   ;* ACORN COMPUTERS Z80 TUBE VERSION  *
000DAD             2499   ;(C) COPYRIGHT R.T.RUSSELL, 02-01-1984
000DAD             2500   ;VERSION 5.0, 12-07-2024
000DAD             2501   ;
000DAD             2502   ;                XREF	OSWRCH
000DAD             2503   ;                XREF	OSWORD
000DAD             2504   ;                XREF	OSBYTE
000DAD             2505   ;
000DAD             2506   ; ESC            EQU	1BH
000DAD             2507   TBY:            EQU	0FH
000DAD             2508   ; TTO:            EQU	0B8H in main.asm
000DAD             2509   TFILL:          EQU	03H
000DAD             2510   ;
000DAD             2511   ;                XREF	ITEMI
000DAD             2512   ;                XREF	EXPRI
000DAD             2513   ;                XREF	COMMA
000DAD             2514   ;                XREF	TERMQ
000DAD             2515   ;                XREF	BRAKET
000DAD             2516   ;                XREF	EXTERR
000DAD             2517   ;                XREF	STOREN
000DAD             2518   ;                XREF	TRAP
000DAD             2519   ;                XREF	VAR_
000DAD             2520   ;                XREF	NXT
000DAD             2521   ;                XREF	XEQ
000DAD             2522   ;
000DAD             2523   ;                XREF	ACCS
000DAD             2524   ;                XREF	COUNT
000DAD             2525   ;                XREF	WIDTH
000DAD             2526   ;                XREF	SCRAP
000DAD             2527   ;
000DAD             2528   ;                XDEF	OSCALL
000DAD             2529   ;                XDEF	CLRSCN
000DAD             2530   ;                XDEF	PUTCSR
000DAD             2531   ;                XDEF	GETCSR
000DAD             2532   ;                XDEF	PUTIME
000DAD             2533   ;                XDEF	GETIME
000DAD             2534   ;                XDEF	OSKEY
000DAD             2535   ;
000DAD             2536   ;                XDEF	CLG
000DAD             2537   ;                XDEF	MOVE
000DAD             2538   ;                XDEF	DRAW
000DAD             2539   ;                XDEF	PLOT
000DAD             2540   ;                XDEF	MODE
000DAD             2541   ;                XDEF	COLOUR
000DAD             2542   ;                XDEF	GCOL
000DAD             2543   ;                XDEF	ADVAL
000DAD             2544   ;                XDEF	SOUND
000DAD             2545   ;                XDEF	ENVEL
000DAD             2546   ;                XDEF	POINT
000DAD             2547   ;
000DAD             2548   ;                XDEF	CIRCLE
000DAD             2549   ;                XDEF	ELLIPS
000DAD             2550   ;                XDEF	FILL
000DAD             2551   ;                XDEF	MOUSE
000DAD             2552   ;                XDEF	ORIGIN
000DAD             2553   ;                XDEF	RECTAN
000DAD             2554   ;                XDEF	LINE
000DAD             2555   ;                XDEF	TINT
000DAD             2556   ;                XDEF	WAIT
000DAD             2557   ;                XDEF	SYS
000DAD             2558   ;                XDEF	CSRON
000DAD             2559   ;                XDEF	CSROFF
000DAD             2560   ;
000DAD             2561   ;                XDEF	PUTIMS
000DAD             2562   ;                XDEF	GETIMS
000DAD             2563   ;                XDEF	TINTFN
000DAD             2564   ;                XDEF	MODEFN
000DAD             2565   ;                XDEF	WIDFN
000DAD             2566   ;
000DAD             2567   ;GETIME	- Read elapsed-time clock.
000DAD             2568   ;  	  Outputs:  DEHL = elapsed time (centiseconds)
000DAD             2569   ; 	  Destroys: A,D,E,H,L,F
000DAD             2570   ;
000DAD 3E 01       2571   GETIME:         LD	A,1
000DAF 21 08 52    2572                   LD	HL,SCRAP
000DB2 CD 6D 08    2573                   CALL	OSWORD
000DB5 21 08 52    2574                   LD	HL,SCRAP
000DB8 5E          2575                   LD	E,(HL)
000DB9 23          2576                   INC	HL
000DBA 56          2577                   LD	D,(HL)
000DBB 23          2578                   INC	HL
000DBC 7E          2579                   LD	A,(HL)
000DBD 23          2580                   INC	HL
000DBE 66          2581                   LD	H,(HL)
000DBF 6F          2582                   LD	L,A
000DC0 EB          2583                   EX	DE,HL
000DC1 C9          2584                   RET
000DC2             2585   ;
000DC2             2586   ;GETIMS	- Read real-time clock as string.
000DC2             2587   ;  	  Outputs:  TIME$ in string accumulator
000DC2             2588   ;                   E = string length (25)
000DC2             2589   ; 	  Destroys: A,B,C,D,E,H,L,F
000DC2             2590   ;
000DC2 3E 0E       2591   GETIMS:         LD	A,14
000DC4 21 08 52    2592                   LD	HL,SCRAP
000DC7 36 00       2593                   LD	(HL),0
000DC9 CD 6D 08    2594                   CALL	OSWORD
000DCC 21 08 52    2595                   LD	HL,SCRAP
000DCF 11 00 53    2596                   LD	DE,ACCS
000DD2 7E          2597                   LD	A,(HL)
000DD3 BB          2598                   CP	E
000DD4 C8          2599                   RET	Z
000DD5 01 19 00    2600                   LD	BC,25
000DD8 ED B0       2601                   LDIR
000DDA C9          2602                   RET
000DDB             2603   ;
000DDB             2604   ;
000DDB             2605   ;PUTIME	- Load elapsed-time clock.
000DDB             2606   ;   	  Inputs:   DEHL = time to load (centiseconds)
000DDB             2607   ; 	  Destroys: A,D,E,H,L,F
000DDB             2608   ;
000DDB DD E5       2609   PUTIME:         PUSH	IX
000DDD DD 21 08 52 2610                   LD	IX,SCRAP
000DE1 DD 75 00    2611                   LD	(IX+0),L
000DE4 DD 74 01    2612                   LD	(IX+1),H
000DE7 DD 73 02    2613                   LD	(IX+2),E
000DEA DD 72 03    2614                   LD	(IX+3),D
000DED 3E 02       2615                   LD	A,2
000DEF 21 08 52    2616                   LD	HL,SCRAP
000DF2 CD 6D 08    2617                   CALL	OSWORD
000DF5 DD E1       2618                   POP	IX
000DF7 C9          2619                   RET
000DF8             2620   ;
000DF8             2621   ;PUTIMS	- Wtite real-time clock as string.
000DF8             2622   ;  	  Inputs:   string in string accumulator
000DF8             2623   ;                   E = string length
000DF8             2624   ; 	  Destroys: A,B,C,D,E,H,L,F
000DF8             2625   ;
000DF8 7B          2626   PUTIMS:         LD	A,E		;Length
000DF9 FE 1A       2627                   CP	26
000DFB D0          2628                   RET	NC
000DFC 06 00       2629                   LD	B,0
000DFE 4F          2630                   LD	C,A
000DFF 11 09 52    2631                   LD	DE,SCRAP+1
000E02 21 00 53    2632                   LD	HL,ACCS
000E05 ED B0       2633                   LDIR
000E07 21 08 52    2634                   LD	HL,SCRAP
000E0A 77          2635                   LD	(HL),A
000E0B 3E 0F       2636                   LD	A,15
000E0D C3 6D 08    2637                   JP	OSWORD
000E10             2638   ;
000E10             2639   ;
000E10             2640   ;CLRSCN	- Clear screen.
000E10             2641   ; 	  Destroys: A,D,E,H,L,F
000E10             2642   ;
000E10 3E 0C       2643   CLRSCN:         LD	A,0CH
000E12 C3 97 05    2644                   JP	OSWRCH
000E15             2645   ;
000E15             2646   ;
000E15             2647   ;OSKEY	- Sample keyboard with specified wait.
000E15             2648   ;   	  Inputs:   HL = Time to wait (centiseconds)
000E15             2649   ;  	  Outputs:  Carry reset indicates time-out.
000E15             2650   ;                   If carry set, A = character typed.
000E15             2651   ; 	  Destroys: A,D,E,H,L,F
000E15             2652   ;
000E15 3E 81       2653   OSKEY:          LD	A,129
000E17 CD D1 08    2654                   CALL	OSBYTE
000E1A 7C          2655                   LD	A,H
000E1B B7          2656                   OR	A
000E1C C0          2657                   RET	NZ		;TIME-OUT, CARRY RESET
000E1D 7D          2658                   LD	A,L
000E1E 37          2659                   SCF
000E1F C9          2660                   RET			;NORMAL, CARRY SET
000E20             2661   ;
000E20             2662   ;PUTCSR	- Move cursor to specified position.
000E20             2663   ;   	  Inputs:   DE = horizontal position (LHS=0)
000E20             2664   ;                   HL = vertical position (TOP=0)
000E20             2665   ; 	  Destroys: A,D,E,H,L,F
000E20             2666   ;
000E20 3E 1F       2667   PUTCSR:         LD	A,1FH
000E22 CD 97 05    2668                   CALL	OSWRCH
000E25 7B          2669                   LD	A,E
000E26 CD 97 05    2670                   CALL	OSWRCH
000E29 7D          2671                   LD	A,L
000E2A C3 97 05    2672                   JP	OSWRCH
000E2D             2673   ;
000E2D             2674   ;GETCSR	- Return cursor coordinates.
000E2D             2675   ;   	  Outputs:  DE = X coordinate (POS)
000E2D             2676   ;                   HL = Y coordinate (VPOS)
000E2D             2677   ;  	  Destroys: A,D,E,H,L,F
000E2D             2678   ;
000E2D 3E 86       2679   GETCSR:         LD	A,134
000E2F CD D1 08    2680                   CALL	OSBYTE
000E32 5D          2681                   LD	E,L
000E33 6C          2682                   LD	L,H
000E34 16 00       2683                   LD	D,0
000E36 62          2684                   LD	H,D
000E37 C9          2685                   RET
000E38             2686   ;
000E38             2687   ;POINT - var=POINT(x,y)
000E38             2688   ;
000E38 CD B7 18    2689   POINT:          CALL	EXPRI
000E3B D9          2690                   EXX
000E3C E5          2691                   PUSH	HL
000E3D CD 75 11    2692                   CALL	CEXPRI
000E40 D9          2693                   EXX
000E41 D1          2694                   POP	DE
000E42 CD 32 21    2695                   CALL	BRAKET
000E45 DD 21 08 52 2696                   LD	IX,SCRAP
000E49 DD 73 00    2697                   LD	(IX+0),E
000E4C DD 72 01    2698                   LD	(IX+1),D
000E4F DD 75 02    2699                   LD	(IX+2),L
000E52 DD 74 03    2700                   LD	(IX+3),H
000E55 21 08 52    2701                   LD	HL,SCRAP
000E58 3E 09       2702                   LD	A,9
000E5A CD 6D 08    2703                   CALL	OSWORD
000E5D DD 7E 04    2704                   LD	A,(IX+4)
000E60 6F          2705                   LD	L,A
000E61 C6 01       2706                   ADD	A,1
000E63 9F          2707                   SBC	A,A
000E64 67          2708                   LD	H,A
000E65 D9          2709   RETEXX:         EXX
000E66 67          2710                   LD	H,A
000E67 6F          2711                   LD	L,A
000E68 AF          2712                   XOR	A
000E69 4F          2713                   LD	C,A
000E6A C9          2714                   RET
000E6B             2715   ;
000E6B             2716   ;ADVAL - var=ADVAL(n)
000E6B             2717   ;
000E6B CD E4 18    2718   ADVAL:          CALL	ITEMI
000E6E D9          2719                   EXX
000E6F 3E 80       2720                   LD	A,128
000E71 CD D1 08    2721                   CALL	OSBYTE
000E74 AF          2722                   XOR	A
000E75 18 EE       2723                   JR	RETEXX
000E77             2724   ;
000E77             2725   ;MODEFN - var=MODE
000E77             2726   ;
000E77 3E 87       2727   MODEFN:         LD	A,135
000E79 CD D1 08    2728                   CALL	OSBYTE
000E7C 6C          2729                   LD	L,H
000E7D AF          2730   RETU8:          XOR	A
000E7E 67          2731                   LD	H,A
000E7F 18 E4       2732                   JR	RETEXX
000E81             2733   ;
000E81             2734   ;WIDFN - var=WIDTH
000E81             2735   ;
000E81 3A FC 55    2736   WIDFN:          LD	A,(WIDTH)
000E84 6F          2737                   LD	L,A
000E85 18 F6       2738                   JR	RETU8
000E87             2739   ;
000E87             2740   ;ENVEL - ENVELOPE var,var,var,var,var,var,var,
000E87             2741   ;                 var,var,var,var,var,var,var
000E87             2742   ;
000E87 06 00       2743   ENVEL:          LD	B,0
000E89 DD 21 08 52 2744                   LD	IX,SCRAP
000E8D C5          2745                   PUSH	BC
000E8E DD E5       2746                   PUSH	IX
000E90 CD B7 18    2747   ENVEL1:         CALL	EXPRI
000E93 D9          2748                   EXX
000E94 DD E1       2749                   POP	IX
000E96 C1          2750                   POP	BC
000E97 DD 75 00    2751                   LD	(IX),L
000E9A 78          2752                   LD	A,B
000E9B FE 0D       2753                   CP	13
000E9D 28 0B       2754                   JR	Z,ENVEL2
000E9F 04          2755                   INC	B
000EA0 DD 23       2756                   INC	IX
000EA2 C5          2757                   PUSH	BC
000EA3 DD E5       2758                   PUSH	IX
000EA5 CD 26 21    2759                   CALL	COMMA
000EA8 18 E6       2760                   JR	ENVEL1
000EAA 21 08 52    2761   ENVEL2:         LD	HL,SCRAP
000EAD 3E 08       2762                   LD	A,8
000EAF CD 6D 08    2763                   CALL	OSWORD
000EB2 C3 1D 25    2764                   JP	XEQ
000EB5             2765   ;
000EB5             2766   ;SOUND - SOUND var,var,var,var
000EB5             2767   ;
000EB5 06 00       2768   SOUND:          LD	B,0
000EB7 DD 21 08 52 2769                   LD	IX,SCRAP
000EBB C5          2770                   PUSH	BC
000EBC DD E5       2771                   PUSH	IX
000EBE CD B7 18    2772   SOUND1:         CALL	EXPRI
000EC1 D9          2773                   EXX
000EC2 DD E1       2774                   POP	IX
000EC4 C1          2775                   POP	BC
000EC5 DD 75 00    2776                   LD	(IX+0),L
000EC8 DD 74 01    2777                   LD	(IX+1),H
000ECB DD 23       2778                   INC	IX
000ECD DD 23       2779                   INC	IX
000ECF 04          2780                   INC	B
000ED0 04          2781                   INC	B
000ED1 78          2782                   LD	A,B
000ED2 FE 08       2783                   CP	8
000ED4 28 08       2784                   JR	Z,SOUND2
000ED6 C5          2785                   PUSH	BC
000ED7 DD E5       2786                   PUSH	IX
000ED9 CD 26 21    2787                   CALL	COMMA
000EDC 18 E0       2788                   JR	SOUND1
000EDE 21 08 52    2789   SOUND2:         LD	HL,SCRAP
000EE1 3E 07       2790                   LD	A,7
000EE3 CD 6D 08    2791                   CALL	OSWORD
000EE6 C3 1D 25    2792                   JP	XEQ
000EE9             2793   ;
000EE9             2794   ;MODE - MODE n
000EE9             2795   ;
000EE9 CD B7 18    2796   MODE:           CALL	EXPRI
000EEC AF          2797                   XOR	A
000EED 32 FB 55    2798                   LD	(COUNT),A
000EF0 D9          2799                   EXX
000EF1 65          2800                   LD	H,L
000EF2 2E 16       2801                   LD	L,22
000EF4 CD 5C 11    2802                   CALL	WRCH2
000EF7 18 72       2803                   JR	XEQGO1
000EF9             2804   ;
000EF9             2805   ;CLG
000EF9             2806   ;
000EF9 3E 10       2807   CLG:            LD	A,16
000EFB CD 97 05    2808                   CALL	OSWRCH
000EFE 18 6B       2809                   JR	XEQGO1
000F00             2810   ;
000F00             2811   ;ORIGIN x,y
000F00             2812   ;
000F00 CD B7 18    2813   ORIGIN:         CALL    EXPRI
000F03 D9          2814                   EXX
000F04 E5          2815                   PUSH	HL
000F05 CD 75 11    2816                   CALL    CEXPRI
000F08 D9          2817                   EXX
000F09 D1          2818                   POP	DE
000F0A 0E 1D       2819                   LD	C,29
000F0C CD 50 11    2820                   CALL	WRCH5
000F0F 18 5A       2821                   JR	XEQGO1
000F11             2822   ;
000F11             2823   ;COLOUR n
000F11             2824   ;COLOUR n,p
000F11             2825   ;COLOUR n,r,g,b
000F11             2826   ;
000F11 CD B7 18    2827   COLOUR:         CALL	EXPRI		;n
000F14 D9          2828                   EXX
000F15 FD 7E 00    2829                   LD	A,(IY)
000F18 FE 2C       2830                   CP	','
000F1A 28 08       2831                   JR      Z,PALCOL
000F1C 65          2832                   LD	H,L
000F1D 2E 11       2833                   LD	L,17
000F1F CD 5C 11    2834                   CALL	WRCH2
000F22 18 47       2835                   JR	XEQGO1
000F24             2836   ;
000F24 E5          2837   PALCOL:         PUSH	HL
000F25 CD 75 11    2838                   CALL	CEXPRI		;p or r
000F28 D9          2839                   EXX
000F29 EB          2840                   EX	DE,HL
000F2A 21 00 00    2841                   LD	HL,0
000F2D FD 7E 00    2842                   LD	A,(IY)
000F30 FE 2C       2843                   CP	','
000F32 20 15       2844                   JR	NZ,PALET1
000F34 D5          2845                   PUSH	DE
000F35 CD 75 11    2846                   CALL	CEXPRI		;g
000F38 D9          2847                   EXX
000F39 E5          2848                   PUSH	HL
000F3A CD 75 11    2849                   CALL	CEXPRI		;b
000F3D D9          2850                   EXX
000F3E D1          2851                   POP	DE
000F3F C1          2852                   POP	BC
000F40 7D          2853                   LD	A,L
000F41 E1          2854                   POP	HL
000F42 51          2855                   LD	D,C		;r
000F43 4D          2856                   LD	C,L		;n
000F44 6B          2857                   LD	L,E		;g
000F45 67          2858                   LD	H,A		;b
000F46 1E 10       2859                   LD	E,16
000F48 C5          2860                   PUSH	BC
000F49 C1          2861   PALET1:         POP	BC
000F4A 06 13       2862                   LD	B,19
000F4C CD 4C 11    2863                   CALL	WRCH6
000F4F 18 1A       2864                   JR	XEQGO1
000F51             2865   ;
000F51             2866   ;GCOL [a,]b
000F51             2867   ;
000F51 CD B7 18    2868   GCOL:           CALL	EXPRI
000F54 D9          2869                   EXX
000F55 1E 00       2870                   LD	E,0
000F57 FD 7E 00    2871                   LD	A,(IY)
000F5A FE 2C       2872                   CP	','
000F5C 20 06       2873                   JR	NZ,GCOL0
000F5E E5          2874                   PUSH	HL
000F5F CD 75 11    2875                   CALL	CEXPRI
000F62 D9          2876                   EXX
000F63 D1          2877                   POP	DE
000F64 65          2878   GCOL0:          LD	H,L
000F65 6B          2879                   LD	L,E
000F66 16 12       2880                   LD	D,18
000F68 CD 58 11    2881                   CALL	WRCH3		;DLH
000F6B C3 1D 25    2882   XEQGO1:         JP	XEQ
000F6E             2883   ;
000F6E             2884   ;CSRON  - Turn caret on
000F6E             2885   ;CSROFF - Turn caret off
000F6E             2886   ;
000F6E 0E 01       2887   CSRON:          LD	C,1
000F70 18 02       2888                   JR	CSRGO
000F72             2889   ;
000F72 0E 00       2890   CSROFF:         LD	C,0
000F74 3E 17       2891   CSRGO:          LD	A,23
000F76 CD 97 05    2892                   CALL	OSWRCH
000F79 3E 01       2893                   LD	A,1
000F7B CD 97 05    2894                   CALL	OSWRCH
000F7E 79          2895                   LD	A,C
000F7F 06 08       2896                   LD	B,8
000F81 CD 97 05    2897   CSRGO1:         CALL	OSWRCH
000F84 AF          2898                   XOR	A
000F85 10 FA       2899                   DJNZ	CSRGO1
000F87 18 E2       2900                   JR	XEQGO1
000F89             2901   ;
000F89             2902   ;LINE x1,y1,x2,y2
000F89             2903   ;
000F89 CD B7 18    2904   LINE:           CALL	EXPRI
000F8C D9          2905                   EXX
000F8D E5          2906                   PUSH	HL
000F8E CD 64 11    2907                   CALL	EXPR3
000F91 E3          2908                   EX	(SP),HL		;HL <- x1, (SP) <- y2
000F92 C5          2909                   PUSH	BC
000F93 EB          2910                   EX	DE,HL
000F94 0E 04       2911                   LD	C,4
000F96 CD 4A 11    2912                   CALL	VDU25
000F99 D1          2913                   POP	DE
000F9A E1          2914                   POP	HL
000F9B 0E 05       2915                   LD	C,5
000F9D 18 2A       2916                   JR	PLOT4A
000F9F             2917   ;
000F9F             2918   ;CIRCLE [FILL] x,y,r
000F9F             2919   ;
000F9F FE 03       2920   CIRCLE:         CP	TFILL
000FA1 F5          2921                   PUSH	AF
000FA2 20 02       2922                   JR	NZ,CIRCL0
000FA4 FD 23       2923                   INC	IY
000FA6 CD B7 18    2924   CIRCL0:         CALL	EXPRI
000FA9 D9          2925                   EXX
000FAA E5          2926                   PUSH	HL
000FAB CD 75 11    2927                   CALL	CEXPRI
000FAE D9          2928                   EXX
000FAF E5          2929                   PUSH	HL
000FB0 CD 75 11    2930                   CALL	CEXPRI
000FB3 D9          2931                   EXX
000FB4 C1          2932                   POP	BC		;y
000FB5 D1          2933                   POP	DE		;x
000FB6 E5          2934                   PUSH	HL
000FB7 69          2935                   LD	L,C
000FB8 60          2936                   LD	H,B
000FB9 0E 04       2937                   LD	C,4		; PLOT 4 = MOVE
000FBB CD 4A 11    2938                   CALL	VDU25
000FBE D1          2939                   POP	DE		;r
000FBF 21 00 00    2940                   LD	HL,0
000FC2 F1          2941                   POP	AF
000FC3 0E 91       2942                   LD	C,145		; PLOT 145 = outline circle
000FC5 20 02       2943                   JR	NZ,PLOT4A
000FC7 0E 99       2944                   LD	C,153		; PLOT 153 = filled circle
000FC9 18 6C       2945   PLOT4A:         JR	PLOT4
000FCB             2946   ;
000FCB             2947   ;ELLIPSE [FILL] x,y,a,b
000FCB             2948   ;
000FCB FE 03       2949   ELLIPS:         CP	TFILL
000FCD F5          2950                   PUSH	AF
000FCE 20 02       2951                   JR	NZ,ELLIP0
000FD0 FD 23       2952                   INC	IY
000FD2 CD B7 18    2953   ELLIP0:         CALL	EXPRI
000FD5 D9          2954                   EXX
000FD6 E5          2955                   PUSH	HL
000FD7 CD 64 11    2956                   CALL	EXPR3
000FDA E3          2957                   EX	(SP),HL		;HL <- x, (SP) <- b
000FDB C5          2958                   PUSH	BC
000FDC EB          2959                   EX	DE,HL
000FDD 0E 04       2960                   LD	C,4		; PLOT 4 = Move absolute
000FDF CD 4A 11    2961                   CALL	VDU25
000FE2 D1          2962                   POP	DE		;a
000FE3 D5          2963                   PUSH	DE
000FE4 21 00 00    2964                   LD	HL,0
000FE7 4D          2965                   LD	C,L		; PLOT 0 - Move relative
000FE8 CD 4A 11    2966                   CALL	VDU25
000FEB D1          2967                   POP	DE		;a
000FEC AF          2968                   XOR	A
000FED 6F          2969                   LD	L,A
000FEE 67          2970                   LD	H,A
000FEF ED 52       2971                   SBC	HL,DE
000FF1 EB          2972                   EX	DE,HL
000FF2 E1          2973                   POP	HL		;b
000FF3 F1          2974                   POP	AF
000FF4 0E C1       2975                   LD	C,193		; PLOT 193 = outline ellipse
000FF6 20 3F       2976                   JR	NZ,PLOT4
000FF8 0E C9       2977                   LD	C,201		; PLOT 201 = filled ellipse
000FFA 18 3B       2978                   JR	PLOT4
000FFC             2979   ;
000FFC             2980   ;MOVE [BY} x,y
000FFC             2981   ;DRAW [BY] x,y
000FFC             2982   ;PLOT [BY] [n,]x,y
000FFC             2983   ;FILL [BY] x,y
000FFC             2984   ;
000FFC 0E 04       2985   MOVE:           LD	C,4
000FFE 18 23       2986                   JR	PLOT1
001000             2987   ;
001000 0E 05       2988   DRAW:           LD	C,5
001002 18 1F       2989                   JR	PLOT1
001004             2990   ;
001004 0E 85       2991   FILL:           LD	C,133
001006 18 1B       2992                   JR	PLOT1
001008             2993   ;
001008 0E 45       2994   PLOT:           LD	C,69
00100A FE 0F       2995                   CP	TBY
00100C 28 15       2996                   JR	Z,PLOT1
00100E CD B7 18    2997                   CALL	EXPRI
001011 D9          2998                   EXX
001012 E5          2999                   PUSH	HL
001013 CD 75 11    3000                   CALL	CEXPRI
001016 D9          3001                   EXX
001017 FD 7E 00    3002                   LD	A,(IY)
00101A FE 2C       3003                   CP	','
00101C 28 12       3004                   JR	Z,PLOT3
00101E D1          3005                   POP	DE
00101F 0E 45       3006                   LD	C,69
001021 18 14       3007                   JR	PLOT4
001023             3008   ;
001023 FE 0F       3009   PLOT1:          CP	TBY
001025 20 04       3010                   JR	NZ,PLOT2
001027 FD 23       3011                   INC	IY
001029 CB 91       3012                   RES	2,C		;Change absolute to relative
00102B C5          3013   PLOT2:          PUSH	BC
00102C CD B7 18    3014                   CALL	EXPRI
00102F D9          3015                   EXX
001030 E5          3016   PLOT3:          PUSH	HL
001031 CD 75 11    3017                   CALL	CEXPRI
001034 D9          3018                   EXX
001035 D1          3019                   POP	DE
001036 C1          3020                   POP	BC
001037 CD 4A 11    3021   PLOT4:          CALL	VDU25
00103A C3 1D 25    3022                   JP	XEQ
00103D             3023   ;
00103D             3024   ;RECTANGLE [FILL] x,y,w[,h] [TO xnew,ynew]
00103D             3025   ;
00103D FE 03       3026   RECTAN:         CP	TFILL
00103F F5          3027                   PUSH	AF
001040 20 02       3028                   JR	NZ,RECT0
001042 FD 23       3029                   INC	IY
001044 CD B7 18    3030   RECT0:          CALL	EXPRI
001047 D9          3031                   EXX
001048 E5          3032                   PUSH	HL
001049 CD 75 11    3033                   CALL	CEXPRI
00104C D9          3034                   EXX
00104D E5          3035                   PUSH	HL
00104E CD 75 11    3036                   CALL	CEXPRI
001051 D9          3037                   EXX
001052 E5          3038                   PUSH	HL
001053 FD 7E 00    3039                   LD	A,(IY)
001056 FE 2C       3040                   CP	','
001058 20 04       3041                   JR	NZ,RECT1
00105A CD 75 11    3042                   CALL	CEXPRI
00105D D9          3043                   EXX
00105E C1          3044   RECT1:          POP	BC		;w
00105F D1          3045                   POP	DE		;y
001060 E3          3046                   EX	(SP),HL		;HL <- x, (SP) <- h
001061 C5          3047                   PUSH	BC
001062 EB          3048                   EX	DE,HL
001063 0E 04       3049                   LD	C,4
001065 CD 4A 11    3050                   CALL	VDU25
001068 FD 7E 00    3051                   LD	A,(IY)
00106B FE B8       3052                   CP	TTO
00106D 28 09       3053                   JR	Z,RECTTO
00106F D1          3054                   POP	DE		;w
001070 E1          3055                   POP	HL		;h
001071 F1          3056                   POP	AF
001072 20 22       3057                   JR	NZ,OUTLIN
001074 0E 61       3058                   LD	C,97
001076 18 BF       3059                   JR	PLOT4
001078             3060   ;
001078             3061   ;Block copy / move:
001078             3062   ;
001078 FD 23       3063   RECTTO:         INC	IY		; Bump over TO
00107A CD B7 18    3064                   CALL	EXPRI
00107D D9          3065                   EXX
00107E E5          3066                   PUSH	HL
00107F CD 75 11    3067                   CALL	CEXPRI
001082 D9          3068                   EXX
001083 C1          3069                   POP	BC		;newx
001084 D1          3070                   POP	DE		;w
001085 E3          3071                   EX	(SP),HL		;HL <- h, (SP) <- newy
001086 C5          3072                   PUSH	BC
001087 0E 00       3073                   LD	C,0
001089 CD 4A 11    3074                   CALL	VDU25
00108C D1          3075                   POP	DE		;newx
00108D E1          3076                   POP	HL		;newy
00108E F1          3077                   POP	AF
00108F 0E BE       3078                   LD	C,190		; PLOT 190 - Block copy
001091 20 01       3079                   JR	NZ,PLOT4B
001093 0D          3080                   DEC	C		; PLOT 189 - Block move
001094 18 A1       3081   PLOT4B:         JR	PLOT4
001096             3082   ;
001096             3083   ;Outline rectangle:
001096             3084   ;
001096 0E 09       3085   OUTLIN:         LD	C,9		; PLOT 9 - draw relative
001098 E5          3086                   PUSH	HL
001099 21 00 00    3087                   LD	HL,0
00109C CD 4A 11    3088                   CALL	VDU25		; side 1
00109F E1          3089                   POP	HL
0010A0 D5          3090                   PUSH	DE
0010A1 11 00 00    3091                   LD	DE,0
0010A4 CD 4A 11    3092                   CALL	VDU25		; side 2
0010A7 D1          3093                   POP	DE
0010A8 E5          3094                   PUSH	HL
0010A9 AF          3095                   XOR	A
0010AA 6F          3096                   LD	L,A
0010AB 67          3097                   LD	H,A
0010AC ED 52       3098                   SBC	HL,DE
0010AE EB          3099                   EX	DE,HL
0010AF 6F          3100                   LD	L,A
0010B0 67          3101                   LD	H,A
0010B1 CD 4A 11    3102                   CALL 	VDU25		; side 3
0010B4 D1          3103                   POP	DE
0010B5 AF          3104                   XOR	A
0010B6 6F          3105                   LD	L,A
0010B7 67          3106                   LD	H,A
0010B8 ED 52       3107                   SBC	HL,DE
0010BA 5F          3108                   LD	E,A
0010BB 57          3109                   LD	D,A
0010BC 18 D6       3110                   JR	PLOT4B
0010BE             3111   ;
0010BE             3112   ;MOUSE x, y, b
0010BE             3113   ;
0010BE 3E 80       3114   MOUSE:          LD	A,128
0010C0 21 09 00    3115                   LD	HL,9
0010C3 CD D1 08    3116                   CALL	OSBYTE
0010C6 E5          3117                   PUSH	HL
0010C7 3E 80       3118                   LD	A,128
0010C9 21 08 00    3119                   LD	HL,8
0010CC CD D1 08    3120                   CALL	OSBYTE
0010CF E5          3121                   PUSH	HL
0010D0 3E 80       3122                   LD	A,128
0010D2 21 07 00    3123                   LD	HL,7
0010D5 CD D1 08    3124                   CALL	OSBYTE
0010D8 E5          3125                   PUSH	HL
0010D9 CD 5A 26    3126                   CALL	VAR_
0010DC E1          3127                   POP	HL
0010DD CD 7B 11    3128                   CALL	STOREI
0010E0 CD 26 21    3129                   CALL	COMMA
0010E3 CD 8F 45    3130                   CALL	NXT
0010E6 CD 5A 26    3131                   CALL	VAR_
0010E9 E1          3132                   POP	HL
0010EA CD 7B 11    3133                   CALL	STOREI
0010ED CD 26 21    3134                   CALL	COMMA
0010F0 CD 8F 45    3135                   CALL	NXT
0010F3 CD 5A 26    3136                   CALL	VAR_
0010F6 E1          3137                   POP	HL
0010F7 CD 7B 11    3138                   CALL	STOREI
0010FA C3 1D 25    3139   XEQGO2:         JP	XEQ
0010FD             3140   ;
0010FD             3141   ;WAIT [n]
0010FD             3142   ;
0010FD CD BA 35    3143   WAIT:           CALL	TERMQ
001100 28 F8       3144                   JR	Z,XEQGO2
001102 CD B7 18    3145                   CALL	EXPRI
001105 D9          3146                   EXX
001106 44          3147                   LD	B,H
001107 4D          3148                   LD	C,L
001108 CD AD 0D    3149                   CALL	GETIME
00110B 09          3150                   ADD	HL,BC
00110C 01 00 00    3151                   LD	BC,0
00110F EB          3152                   EX	DE,HL
001110 ED 4A       3153                   ADC	HL,BC
001112 EB          3154                   EX	DE,HL
001113 CD 35 06    3155   WAIT1:          CALL	TRAP
001116 D5          3156                   PUSH	DE
001117 E5          3157                   PUSH	HL
001118 CD AD 0D    3158                   CALL	GETIME
00111B C1          3159                   POP	BC
00111C B7          3160                   OR	A
00111D ED 42       3161                   SBC	HL,BC
00111F 60          3162                   LD	H,B
001120 69          3163                   LD	L,C
001121 EB          3164                   EX	DE,HL
001122 C1          3165                   POP	BC
001123 ED 42       3166                   SBC	HL,BC
001125 30 D3       3167                   JR	NC,XEQGO2
001127 EB          3168                   EX	DE,HL
001128 50          3169                   LD	D,B
001129 59          3170                   LD	E,C
00112A 18 E7       3171                   JR	WAIT1
00112C             3172   ;
00112C             3173   ;OSCALL - Trap call to FFxx
00112C             3174   ;
00112C E1          3175   OSCALL:         POP	HL		;DITCH RETURN ADDRESS
00112D 21 3F 11    3176                   LD	HL,OSRET
001130 E5          3177                   PUSH	HL		;NEW RETURN ADDRESS
001131 DD 7E 04    3178                   LD	A,(IX+4)	;A%
001134 DD 5E 14    3179                   LD	E,(IX+20)	;E%
001137 DD 66 64    3180                   LD	H,(IX+100)	;Y%
00113A DD 6E 60    3181                   LD	L,(IX+96)	;X%
00113D FD E9       3182                   JP	(IY)
00113F F5          3183   OSRET:          PUSH	AF
001140 7D          3184                   LD	A,L		;F  H  L  A
001141 6C          3185                   LD	L,H		;|  |  |  |
001142 D9          3186                   EXX			;|  |  |  |
001143 C1          3187                   POP	BC		;|  |  |  |
001144 67          3188                   LD	H,A		;|  |  |  |
001145 68          3189                   LD	L,B		;H  L  H' L'
001146 79          3190                   LD	A,C
001147 D9          3191                   EXX
001148 67          3192                   LD	H,A
001149 C9          3193                   RET
00114A             3194   ;
00114A 06 19       3195   VDU25:          LD	B,25
00114C 78          3196   WRCH6:          LD	A,B
00114D CD 97 05    3197                   CALL	OSWRCH
001150 79          3198   WRCH5:          LD	A,C
001151 CD 97 05    3199                   CALL	OSWRCH
001154 7B          3200   WRCH4:          LD	A,E
001155 CD 97 05    3201                   CALL	OSWRCH
001158 7A          3202   WRCH3:          LD	A,D
001159 CD 97 05    3203                   CALL	OSWRCH
00115C 7D          3204   WRCH2:          LD	A,L
00115D CD 97 05    3205                   CALL	OSWRCH
001160 7C          3206                   LD	A,H
001161 C3 97 05    3207                   JP	OSWRCH
001164             3208   ;
001164 CD 75 11    3209   EXPR3:          CALL	CEXPRI
001167 D9          3210                   EXX
001168 E5          3211                   PUSH	HL
001169 CD 75 11    3212                   CALL	CEXPRI
00116C D9          3213                   EXX
00116D E5          3214                   PUSH	HL
00116E CD 75 11    3215                   CALL	CEXPRI
001171 D9          3216                   EXX
001172 C1          3217                   POP	BC		;x2
001173 D1          3218                   POP	DE		;y1
001174 C9          3219                   RET
001175             3220   ;
001175 CD 26 21    3221   CEXPRI:         CALL	COMMA
001178 C3 B7 18    3222                   JP	EXPRI
00117B             3223   ;
00117B CB 7F       3224   STOREI:         BIT	7,A
00117D 20 0C       3225                   JR	NZ,EEK
00117F CB 77       3226                   BIT	6,A
001181 20 08       3227                   JR	NZ,EEK
001183 D9          3228                   EXX
001184 21 00 00    3229                   LD	HL,0
001187 4D          3230                   LD	C,L
001188 C3 74 32    3231                   JP	STOREN
00118B             3232   ;
00118B 3E 32       3233   EEK:            LD	A,50
00118D CD D9 3F    3234                   CALL	EXTERR
001190 13          3235                   DB	13H		;'Bad '
001191 04          3236                   DB	04H		;'MOUSE'
001192 20          3237                   DB	20H
001193 15          3238                   DB	15H		;'variable'
001194 00          3239                   DB	0
001195             3240   ;
001195             3241   TINT:
001195             3242   TINTFN:
001195             3243   SYS:
001195 AF          3244                   XOR	A
001196 CD D9 3F    3245                   CALL	EXTERR
001199 53 6F 72 72 3246                   DB	"Sorry"
       79          
00119E 00          3247                   DB	0
00119F             3248   ;
00119F             3249   ;                END
00119F             3250   ; --- End acorn.asm ---
00119F             3251   
00119F             3252   ; --- Begin asmb.asm ---
00119F             3253   ;
00119F             3254   ;Automatically created from original source on 2024-12-15 15:29:12
00119F             3255   ;
00119F             3256                   .ASSUME ADL = 0
00119F             3257   ;	.ORG 0x0000
00119F             3258   ;                SEGMENT CODE
00119F             3259   ;
00119F             3260   ;BBC BASIC INTERPRETER - Z80 VERSION
00119F             3261   ;Z80 CPU ASSEMBLER MODULE - "ASMB"
00119F             3262   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
00119F             3263   ;
00119F             3264   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
00119F             3265   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
00119F             3266   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
00119F             3267   ;
00119F             3268   ;VERSION 5.0, 14-05-2024
00119F             3269   ;
00119F             3270   ;                XDEF	ASSEM
00119F             3271   ;
00119F             3272   ;                XREF	TABIT
00119F             3273   ;                XREF	CRLF
00119F             3274   ;                XREF	OUT
00119F             3275   ;                XREF	VAR_
00119F             3276   ;                XREF	ZERO
00119F             3277   ;                XREF	STOREN
00119F             3278   ;                XREF	ERROR_
00119F             3279   ;                XREF	EXPRI
00119F             3280   ;                XREF	EXPRS
00119F             3281   ;
00119F             3282   ;                XREF	LISTON
00119F             3283   ;                XREF	COUNT
00119F             3284   ;                XREF	ACCS
00119F             3285   ;                XREF	OC
00119F             3286   ;                XREF	PC
00119F             3287   ;
00119F             3288   ; CR             EQU	0DH	; in equs.inc
00119F             3289   TAND:           EQU	80H
00119F             3290   TOR:            EQU	84H
00119F             3291   ; TERROR:         EQU	85H	; in exec.asm
00119F             3292   TCALL:          EQU	0D6H
00119F             3293   TDEF:           EQU	0DDH
00119F             3294   ;
00119F             3295   ;ASSEMBLER:
00119F             3296   ;LANGUAGE-INDEPENDENT CONTROL SECTION:
00119F             3297   ; Outputs: A=delimiter, carry set if syntax error.
00119F             3298   ;
00119F CD 27 15    3299   ASSEM:          CALL	SKIP
0011A2 FD 23       3300                   INC	IY
0011A4 FE 3A       3301                   CP	':'
0011A6 28 F7       3302                   JR	Z,ASSEM
0011A8 FE 5D       3303                   CP	']'
0011AA C8          3304                   RET	Z
0011AB FE 0D       3305                   CP	CR
0011AD C8          3306                   RET	Z
0011AE FD 2B       3307                   DEC	IY
0011B0 DD 2A 40 55 3308                   LD	IX,(PC)		;PROGRAM COUNTER
0011B4 21 FE 55    3309                   LD	HL,LISTON
0011B7 CB 76       3310                   BIT	6,(HL)
0011B9 28 04       3311                   JR	Z,ASSEM0
0011BB DD 2A 3C 55 3312                   LD	IX,(OC)		;ORIGIN of CODE
0011BF DD E5       3313   ASSEM0:         PUSH	IX
0011C1 FD E5       3314                   PUSH	IY
0011C3 CD 53 12    3315                   CALL	ASMB
0011C6 C1          3316                   POP	BC
0011C7 D1          3317                   POP	DE
0011C8 D8          3318                   RET	C
0011C9 CD 27 15    3319                   CALL	SKIP
0011CC 37          3320                   SCF
0011CD C0          3321                   RET	NZ
0011CE FD 2B       3322                   DEC	IY
0011D0 FD 23       3323   ASSEM3:         INC	IY
0011D2 FD 7E 00    3324                   LD	A,(IY)
0011D5 CD 4B 15    3325                   CALL	TERM0
0011D8 20 F6       3326                   JR	NZ,ASSEM3
0011DA 3A FE 55    3327                   LD	A,(LISTON)
0011DD DD E5       3328                   PUSH	IX
0011DF E1          3329                   POP	HL
0011E0 B7          3330                   OR	A
0011E1 ED 52       3331                   SBC	HL,DE
0011E3 EB          3332                   EX	DE,HL		;DE= NO. OF BYTES
0011E4 E5          3333                   PUSH	HL
0011E5 2A 40 55    3334                   LD	HL,(PC)
0011E8 E5          3335                   PUSH	HL
0011E9 19          3336                   ADD	HL,DE
0011EA 22 40 55    3337                   LD	(PC),HL		;UPDATE PC
0011ED CB 77       3338                   BIT	6,A
0011EF 28 07       3339                   JR	Z,ASSEM5
0011F1 2A 3C 55    3340                   LD	HL,(OC)
0011F4 19          3341                   ADD	HL,DE
0011F5 22 3C 55    3342                   LD	(OC),HL		;UPDATE OC
0011F8 E1          3343   ASSEM5:         POP	HL		;OLD PC
0011F9 DD E1       3344                   POP	IX		;CODE HERE
0011FB CB 67       3345                   BIT	4,A
0011FD 28 A0       3346                   JR	Z,ASSEM
0011FF 7C          3347                   LD	A,H
001200 CD 3F 12    3348                   CALL	HEX
001203 7D          3349                   LD	A,L
001204 CD 38 12    3350                   CALL	HEXSP
001207 AF          3351                   XOR	A
001208 BB          3352                   CP	E
001209 28 15       3353                   JR	Z,ASSEM2
00120B 3A FB 55    3354   ASSEM1:         LD	A,(COUNT)
00120E FE 11       3355                   CP	17
001210 3E 05       3356                   LD	A,5
001212 D4 01 36    3357                   CALL	NC,TABIT	;NEXT LINE
001215 DD 7E 00    3358                   LD	A,(IX)
001218 CD 38 12    3359                   CALL	HEXSP
00121B DD 23       3360                   INC	IX
00121D 1D          3361                   DEC	E
00121E 20 EB       3362                   JR	NZ,ASSEM1
001220 3E 12       3363   ASSEM2:         LD	A,18
001222 CD 01 36    3364                   CALL	TABIT
001225 FD E5       3365                   PUSH	IY
001227 E1          3366                   POP	HL
001228 ED 42       3367                   SBC	HL,BC
00122A 0A          3368   ASSEM4:         LD	A,(BC)
00122B CD 9F 41    3369                   CALL	OUT
00122E 03          3370                   INC	BC
00122F 2D          3371                   DEC	L
001230 20 F8       3372                   JR	NZ,ASSEM4
001232 CD 7F 41    3373                   CALL	CRLF
001235 C3 9F 11    3374                   JP	ASSEM
001238             3375   ;
001238 CD 3F 12    3376   HEXSP:          CALL	HEX
00123B 3E 20       3377                   LD	A,' '
00123D 18 11       3378                   JR	OUTCH1
00123F F5          3379   HEX:            PUSH	AF
001240 0F          3380                   RRCA
001241 0F          3381                   RRCA
001242 0F          3382                   RRCA
001243 0F          3383                   RRCA
001244 CD 48 12    3384                   CALL	HEXOUT
001247 F1          3385                   POP	AF
001248 E6 0F       3386   HEXOUT:         AND	0FH
00124A C6 90       3387                   ADD	A,90H
00124C 27          3388                   DAA
00124D CE 40       3389                   ADC	A,40H
00124F 27          3390                   DAA
001250 C3 9F 41    3391   OUTCH1:         JP	OUT
001253             3392   ;
001253             3393   ;PROCESSOR-SPECIFIC TRANSLATION SECTION:
001253             3394   ;
001253             3395   ;REGISTER USAGE: B - TYPE OF MOST RECENT OPERAND
001253             3396   ;                C - OPCODE BEING BUILT
001253             3397   ;                D - (IX) OR (IY) FLAG
001253             3398   ;                E - OFFSET FROM IX OR IY
001253             3399   ;               HL - NUMERIC OPERAND VALUE
001253             3400   ;               IX - CODE DESTINATION
001253             3401   ;               IY - SOURCE TEXT POINTER
001253             3402   ;   Inputs: A = initial character
001253             3403   ;  Outputs: Carry set if syntax error.
001253             3404   ;
001253 FE 2E       3405   ASMB:           CP	'.'
001255 20 28       3406                   JR	NZ,ASMB1
001257 FD 23       3407                   INC	IY
001259 DD E5       3408                   PUSH	IX
00125B CD 5A 26    3409                   CALL	VAR_
00125E F5          3410                   PUSH	AF
00125F CD 7C 20    3411                   CALL	ZERO
001262 D9          3412                   EXX
001263 2A 40 55    3413                   LD	HL,(PC)
001266 D9          3414                   EXX
001267 3A FE 55    3415                   LD	A,(LISTON)
00126A E6 20       3416                   AND	20H
00126C 20 0B       3417                   JR	NZ,ASMB0
00126E DD 7E 00    3418                   LD	A,(IX)
001271 DD B6 01    3419                   OR	(IX+1)
001274 3E 03       3420                   LD	A,3
001276 C2 C8 3F    3421                   JP	NZ,ERROR_	;Multiple label
001279 F1          3422   ASMB0:          POP	AF
00127A CD 74 32    3423                   CALL	STOREN
00127D DD E1       3424                   POP	IX
00127F CD 27 15    3425   ASMB1:          CALL	SKIP
001282 C8          3426                   RET	Z
001283 FE D6       3427                   CP	TCALL
001285 0E C4       3428                   LD	C,0C4H
001287 FD 23       3429                   INC	IY
001289 CA 76 13    3430                   JP	Z,GRPC
00128C FD 2B       3431                   DEC	IY
00128E 21 51 15    3432                   LD	HL,OPCODS
001291 CD DE 14    3433                   CALL	FIND
001294 D8          3434                   RET	C
001295 48          3435                   LD	C,B	;ROOT OPCODE
001296 16 00       3436                   LD	D,0	;CLEAR IX/IY FLAG
001298             3437   ;
001298             3438   ;GROUP 0 - TRIVIAL CASES REQUIRING NO COMPUTATION
001298             3439   ;GROUP 1 - AS GROUP 0 BUT WITH "ED" PREFIX
001298             3440   ;
001298 D6 27       3441                   SUB	39
00129A 30 07       3442                   JR	NC,GROUP2
00129C FE E8       3443                   CP	15-39
00129E D4 44 14    3444                   CALL	NC,ED
0012A1 18 68       3445                   JR	BYTE0
0012A3             3446   ;
0012A3             3447   ;GROUP 2 - BIT, RES, SET
0012A3             3448   ;GROUP 3 - RLC, RRC, RL, RR, SLA, SRA, SRL
0012A3             3449   ;
0012A3 D6 0A       3450   GROUP2:         SUB	10
0012A5 30 0F       3451                   JR	NC,GROUP4
0012A7 FE F9       3452                   CP	3-10
0012A9 DC CE 14    3453                   CALL	C,BIT
0012AC D8          3454                   RET	C
0012AD CD A3 14    3455                   CALL	REGLO
0012B0 D8          3456                   RET	C
0012B1 CD 48 14    3457                   CALL	CB
0012B4 18 55       3458                   JR	BYTE0
0012B6             3459   ;
0012B6             3460   ;GROUP 4 - PUSH, POP, EX (SP)
0012B6             3461   ;
0012B6 D6 03       3462   GROUP4:         SUB	3
0012B8 30 06       3463                   JR	NC,GROUP5
0012BA CD C2 14    3464   G4:             CALL	PAIRasm
0012BD D8          3465                   RET	C
0012BE 18 4B       3466                   JR	BYTE0
0012C0             3467   ;
0012C0             3468   ;GROUP 5 - SUB, AND, XOR, OR, CP
0012C0             3469   ;GROUP 6 - ADD, ADC, SBC
0012C0             3470   ;
0012C0 D6 0A       3471   GROUP5:         SUB	8+2
0012C2 30 32       3472                   JR	NC,GROUP7
0012C4 FE FD       3473                   CP	5-8
0012C6 06 07       3474                   LD	B,7
0012C8 D4 56 14    3475                   CALL	NC,OPND
0012CB 78          3476                   LD	A,B
0012CC FE 07       3477                   CP	7
0012CE 20 10       3478                   JR	NZ,G6HL
0012D0 CD A3 14    3479   G6:             CALL	REGLO
0012D3 79          3480                   LD	A,C
0012D4 30 28       3481                   JR	NC,BIND1
0012D6 EE 46       3482                   XOR	46H
0012D8 CD 4A 14    3483                   CALL	BIND
0012DB CD 86 14    3484   DB:             CALL	NUMBER
0012DE 18 78       3485                   JR	VAL8
0012E0             3486   ;
0012E0 E6 3F       3487   G6HL:           AND	3FH
0012E2 FE 0C       3488                   CP	12
0012E4 37          3489                   SCF
0012E5 C0          3490                   RET	NZ
0012E6 79          3491                   LD	A,C
0012E7 FE 80       3492                   CP	80H
0012E9 0E 09       3493                   LD	C,9
0012EB 28 CD       3494                   JR	Z,G4
0012ED EE 1C       3495                   XOR	1CH
0012EF 0F          3496                   RRCA
0012F0 4F          3497                   LD	C,A
0012F1 CD 44 14    3498                   CALL	ED
0012F4 18 C4       3499                   JR	G4
0012F6             3500   ;
0012F6             3501   ;GROUP 7 - INC, DEC
0012F6             3502   ;
0012F6 D6 02       3503   GROUP7:         SUB	2
0012F8 30 14       3504                   JR	NC,GROUP8
0012FA CD A9 14    3505                   CALL	REGHI
0012FD 79          3506                   LD	A,C
0012FE D2 4A 14    3507   BIND1:          JP	NC,BIND
001301 EE 64       3508                   XOR	64H
001303 07          3509                   RLCA
001304 07          3510                   RLCA
001305 07          3511                   RLCA
001306 4F          3512                   LD	C,A
001307 CD C6 14    3513                   CALL	PAIR1asm
00130A D8          3514                   RET	C
00130B 79          3515   BYTE0:          LD	A,C
00130C 18 7F       3516                   JR	BYTE2
00130E             3517   ;
00130E             3518   ;GROUP 8 - IN
00130E             3519   ;GROUP 9 - OUT
00130E             3520   ;
00130E D6 02       3521   GROUP8:         SUB	2
001310 30 21       3522                   JR	NC,GROUPA
001312 FE FF       3523                   CP	1-2
001314 CC 39 14    3524                   CALL	Z,CORN
001317 08          3525                   EX	AF,AF'
001318 CD A9 14    3526                   CALL	REGHI
00131B D8          3527                   RET	C
00131C 08          3528                   EX	AF,AF'
00131D DC 39 14    3529                   CALL	C,CORN
001320 24          3530                   INC	H
001321 28 E8       3531                   JR	Z,BYTE0
001323 78          3532                   LD	A,B
001324 FE 07       3533                   CP	7
001326 37          3534                   SCF
001327 C0          3535                   RET	NZ
001328 79          3536                   LD	A,C
001329 EE 03       3537                   XOR	3
00132B 07          3538                   RLCA
00132C 07          3539                   RLCA
00132D 07          3540                   RLCA
00132E CD 76 14    3541                   CALL	BYTE
001331 18 25       3542                   JR	VAL8
001333             3543   ;
001333             3544   ;GROUP 10 - JR, DJNZ
001333             3545   ;
001333 D6 02       3546   GROUPA:         SUB	2
001335 30 24       3547                   JR	NC,GROUPB
001337 FE FF       3548                   CP	1-2
001339 C4 AF 14    3549                   CALL	NZ,COND_
00133C 79          3550                   LD	A,C
00133D 30 02       3551                   JR	NC,GRPA
00133F 3E 18       3552                   LD	A,18H
001341 CD 76 14    3553   GRPA:           CALL	BYTE
001344 CD 86 14    3554                   CALL	NUMBER
001347 ED 5B 40 55 3555                   LD	DE,(PC)
00134B 13          3556                   INC	DE
00134C 37          3557                   SCF
00134D ED 52       3558                   SBC	HL,DE
00134F 7D          3559                   LD	A,L
001350 17          3560                   RLA
001351 9F          3561                   SBC	A,A
001352 BC          3562                   CP	H
001353 3E 01       3563   TOOFAR:         LD	A,1
001355 C2 C8 3F    3564                   JP	NZ,ERROR_	;"Out of range"
001358 7D          3565   VAL8:           LD	A,L
001359 18 32       3566                   JR	BYTE2
00135B             3567   ;
00135B             3568   ;GROUP 11 - JP
00135B             3569   ;
00135B 47          3570   GROUPB:         LD	B,A
00135C 20 16       3571                   JR	NZ,GROUPC
00135E CD AF 14    3572                   CALL	COND_
001361 79          3573                   LD	A,C
001362 30 0B       3574                   JR	NC,GRPB
001364 78          3575                   LD	A,B
001365 E6 3F       3576                   AND	3FH
001367 FE 06       3577                   CP	6
001369 3E E9       3578                   LD	A,0E9H
00136B 28 20       3579                   JR	Z,BYTE2
00136D 3E C3       3580                   LD	A,0C3H
00136F CD 76 14    3581   GRPB:           CALL	BYTE
001372 18 05       3582                   JR	ADDR_
001374             3583   ;
001374             3584   ;GROUP 12 - CALL
001374             3585   ;
001374 10 0C       3586   GROUPC:         DJNZ	GROUPD
001376 CD 91 13    3587   GRPC:           CALL	GRPE
001379 CD 86 14    3588   ADDR_:          CALL	NUMBER
00137C CD 58 13    3589   VAL16:          CALL	VAL8
00137F 7C          3590                   LD	A,H
001380 18 0B       3591                   JR	BYTE2
001382             3592   ;
001382             3593   ;GROUP 13 - RST
001382             3594   ;
001382 10 0B       3595   GROUPD:         DJNZ	GROUPE
001384 CD 86 14    3596                   CALL	NUMBER
001387 A1          3597                   AND	C
001388 B4          3598                   OR	H
001389 20 C8       3599                   JR	NZ,TOOFAR
00138B 7D          3600                   LD	A,L
00138C B1          3601                   OR	C
00138D 18 78       3602   BYTE2:          JR	BYTE1
00138F             3603   ;
00138F             3604   ;GROUP 14 - RET
00138F             3605   ;
00138F 10 0A       3606   GROUPE:         DJNZ	GROUPF
001391 CD AF 14    3607   GRPE:           CALL	COND_
001394 79          3608                   LD	A,C
001395 30 70       3609                   JR	NC,BYTE1
001397 F6 09       3610                   OR	9
001399 18 6C       3611                   JR	BYTE1
00139B             3612   ;
00139B             3613   ;GROUP 15 - LD
00139B             3614   ;
00139B 10 6C       3615   GROUPF:         DJNZ	MISC
00139D CD DB 14    3616                   CALL	LDOP
0013A0 30 5F       3617                   JR	NC,LDA
0013A2 CD A9 14    3618                   CALL	REGHI
0013A5 08          3619                   EX	AF,AF'
0013A6 CD 27 15    3620                   CALL	SKIP
0013A9 FE 28       3621                   CP	'('
0013AB 28 1D       3622                   JR	Z,LDIN
0013AD 08          3623                   EX	AF,AF'
0013AE D2 D0 12    3624                   JP	NC,G6
0013B1 0E 01       3625                   LD	C,1
0013B3 CD C6 14    3626                   CALL	PAIR1asm
0013B6 D8          3627                   RET	C
0013B7 3E 0E       3628                   LD	A,14
0013B9 B8          3629                   CP	B
0013BA 47          3630                   LD	B,A
0013BB CC C2 14    3631                   CALL	Z,PAIRasm
0013BE 78          3632                   LD	A,B
0013BF E6 3F       3633                   AND	3FH
0013C1 FE 0C       3634                   CP	12
0013C3 79          3635                   LD	A,C
0013C4 20 A9       3636                   JR	NZ,GRPB
0013C6 3E F9       3637                   LD	A,0F9H
0013C8 18 3D       3638                   JR	BYTE1
0013CA             3639   ;
0013CA 08          3640   LDIN:           EX	AF,AF'
0013CB C5          3641                   PUSH	BC
0013CC D4 A3 14    3642                   CALL	NC,REGLO
0013CF 79          3643                   LD	A,C
0013D0 C1          3644                   POP	BC
0013D1 30 77       3645                   JR	NC,BIND
0013D3 0E 0A       3646                   LD	C,0AH
0013D5 CD C6 14    3647                   CALL	PAIR1asm
0013D8 CD 20 14    3648                   CALL	LD16
0013DB 30 92       3649                   JR	NC,GRPB
0013DD CD 86 14    3650                   CALL	NUMBER
0013E0 0E 02       3651                   LD	C,2
0013E2 CD C2 14    3652                   CALL	PAIRasm
0013E5 CD 20 14    3653                   CALL	LD16
0013E8 D8          3654                   RET	C
0013E9 CD 76 14    3655                   CALL	BYTE
0013EC 18 8E       3656                   JR	VAL16
0013EE             3657   ;
0013EE             3658   ;OPT - SET OPTION
0013EE             3659   ;
0013EE 05          3660   OPT:            DEC	B
0013EF CA DB 12    3661                   JP	Z,DB
0013F2 10 85       3662                   DJNZ	ADDR_
0013F4 CD 86 14    3663                   CALL	NUMBER
0013F7 21 FE 55    3664                   LD	HL,LISTON
0013FA 4F          3665                   LD	C,A
0013FB ED 6F       3666                   RLD
0013FD 79          3667                   LD	A,C
0013FE ED 67       3668                   RRD
001400 C9          3669                   RET
001401             3670   ;
001401 FE 04       3671   LDA:            CP	4
001403 DC 44 14    3672                   CALL	C,ED
001406 78          3673                   LD	A,B
001407 18 6D       3674   BYTE1:          JR	BYTE
001409             3675   ;
001409             3676   ;MISC - DEFB, DEFW, DEFM
001409             3677   ;
001409 10 E3       3678   MISC:           DJNZ	OPT
00140B DD E5       3679                   PUSH	IX
00140D CD C0 18    3680                   CALL	EXPRS
001410 DD E1       3681                   POP	IX
001412 21 00 53    3682                   LD	HL,ACCS
001415 AF          3683   DEFM1:          XOR	A
001416 BB          3684                   CP	E
001417 C8          3685                   RET	Z
001418 7E          3686                   LD	A,(HL)
001419 23          3687                   INC	HL
00141A CD 76 14    3688                   CALL	BYTE
00141D 1D          3689                   DEC	E
00141E 18 F5       3690                   JR	DEFM1
001420             3691   ;
001420             3692   ;SUBROUTINES:
001420             3693   ;
001420 78          3694   LD16:           LD	A,B
001421 38 0E       3695                   JR	C,LD8
001423 78          3696                   LD	A,B
001424 E6 3F       3697                   AND	3FH
001426 FE 0C       3698                   CP	12
001428 79          3699                   LD	A,C
001429 C8          3700                   RET	Z
00142A CD 44 14    3701                   CALL	ED
00142D 79          3702                   LD	A,C
00142E F6 43       3703                   OR	43H
001430 C9          3704                   RET
001431             3705   ;
001431 FE 07       3706   LD8:            CP	7
001433 37          3707                   SCF
001434 C0          3708                   RET	NZ
001435 79          3709                   LD	A,C
001436 F6 30       3710                   OR	30H
001438 C9          3711                   RET
001439             3712   ;
001439 C5          3713   CORN:           PUSH	BC
00143A CD 56 14    3714                   CALL	OPND
00143D CB 68       3715                   BIT	5,B
00143F C1          3716                   POP	BC
001440 28 44       3717                   JR	Z,NUMBER
001442 26 FF       3718                   LD	H,-1
001444 3E ED       3719   ED:             LD	A,0EDH
001446 18 2E       3720                   JR	BYTE
001448             3721   ;
001448 3E CB       3722   CB:             LD	A,0CBH
00144A FE 76       3723   BIND:           CP	76H
00144C 37          3724                   SCF
00144D C8          3725                   RET	Z		;REJECT LD (HL),(HL)
00144E CD 76 14    3726                   CALL	BYTE
001451 14          3727                   INC	D
001452 F0          3728                   RET	P
001453 7B          3729                   LD	A,E
001454 18 20       3730                   JR	BYTE
001456             3731   ;
001456 E5          3732   OPND:           PUSH	HL
001457 21 98 16    3733                   LD	HL,OPRNDS
00145A CD DE 14    3734                   CALL	FIND
00145D E1          3735                   POP	HL
00145E D8          3736                   RET	C
00145F CB 78       3737                   BIT	7,B
001461 C8          3738                   RET	Z
001462 CB 58       3739                   BIT	3,B
001464 E5          3740                   PUSH	HL
001465 CC 7D 14    3741                   CALL	Z,OFFSETasm
001468 5D          3742                   LD	E,L
001469 E1          3743                   POP	HL
00146A 3E DD       3744                   LD	A,0DDH
00146C CB 70       3745                   BIT	6,B
00146E 28 02       3746                   JR	Z,OP1
001470 3E FD       3747                   LD	A,0FDH
001472 B7          3748   OP1:            OR	A
001473 14          3749                   INC	D
001474 57          3750                   LD	D,A
001475 F8          3751                   RET	M
001476 DD 77 00    3752   BYTE:           LD	(IX),A
001479 DD 23       3753                   INC	IX
00147B B7          3754                   OR	A
00147C C9          3755                   RET
00147D             3756   ;
00147D FD 7E 00    3757   OFFSETasm:         LD	A,(IY)
001480 FE 29       3758                   CP	')'
001482 21 00 00    3759                   LD	HL,0
001485 C8          3760                   RET	Z
001486 CD 27 15    3761   NUMBER:         CALL	SKIP
001489 C5          3762                   PUSH	BC
00148A D5          3763                   PUSH	DE
00148B DD E5       3764                   PUSH	IX
00148D CD B7 18    3765                   CALL	EXPRI
001490 DD E1       3766                   POP	IX
001492 D9          3767                   EXX
001493 D1          3768                   POP	DE
001494 C1          3769                   POP	BC
001495 7D          3770                   LD	A,L
001496 B7          3771                   OR	A
001497 C9          3772                   RET
001498             3773   ;
001498 CD 56 14    3774   REG:            CALL	OPND
00149B D8          3775                   RET	C
00149C 78          3776                   LD	A,B
00149D E6 3F       3777                   AND	3FH
00149F FE 08       3778                   CP	8
0014A1 3F          3779                   CCF
0014A2 C9          3780                   RET
0014A3             3781   ;
0014A3 CD 98 14    3782   REGLO:          CALL	REG
0014A6 D8          3783                   RET	C
0014A7 18 2F       3784                   JR	ORC
0014A9             3785   ;
0014A9 CD 98 14    3786   REGHI:          CALL	REG
0014AC D8          3787                   RET	C
0014AD 18 26       3788                   JR	SHL3
0014AF             3789   ;
0014AF CD 56 14    3790   COND_:          CALL	OPND
0014B2 D8          3791                   RET	C
0014B3 78          3792                   LD	A,B
0014B4 E6 1F       3793                   AND	1FH
0014B6 D6 10       3794                   SUB	16
0014B8 30 1B       3795                   JR	NC,SHL3
0014BA FE F1       3796                   CP	-15
0014BC 37          3797                   SCF
0014BD C0          3798                   RET	NZ
0014BE 3E 03       3799                   LD	A,3
0014C0 18 13       3800                   JR	SHL3
0014C2             3801   ;
0014C2 CD 56 14    3802   PAIRasm:           CALL	OPND
0014C5 D8          3803                   RET	C
0014C6 78          3804   PAIR1asm:          LD	A,B
0014C7 E6 0F       3805                   AND	0FH
0014C9 D6 08       3806                   SUB	8
0014CB D8          3807                   RET	C
0014CC 18 07       3808                   JR	SHL3
0014CE             3809   ;
0014CE CD 86 14    3810   BIT:            CALL	NUMBER
0014D1 FE 08       3811                   CP	8
0014D3 3F          3812                   CCF
0014D4 D8          3813                   RET	C
0014D5 07          3814   SHL3:           RLCA
0014D6 07          3815                   RLCA
0014D7 07          3816                   RLCA
0014D8 B1          3817   ORC:            OR	C
0014D9 4F          3818                   LD	C,A
0014DA C9          3819                   RET
0014DB             3820   ;
0014DB 21 DD 16    3821   LDOP:           LD	HL,LDOPS
0014DE CD 27 15    3822   FIND:           CALL	SKIP
0014E1 06 00       3823   EXIT:           LD	B,0
0014E3 37          3824                   SCF
0014E4 C8          3825                   RET	Z
0014E5 FE DD       3826                   CP	TDEF
0014E7 28 04       3827                   JR	Z,FIND0
0014E9 FE 85       3828                   CP	TOR+1
0014EB 3F          3829                   CCF
0014EC D8          3830                   RET	C
0014ED 7E          3831   FIND0:          LD	A,(HL)
0014EE B7          3832                   OR	A
0014EF 28 F0       3833                   JR	Z,EXIT
0014F1 FD AE 00    3834                   XOR	(IY)
0014F4 E6 5F       3835                   AND	01011111B
0014F6 28 09       3836                   JR	Z,FIND2
0014F8 CB 7E       3837   FIND1:          BIT	7,(HL)
0014FA 23          3838                   INC	HL
0014FB 28 FB       3839                   JR	Z,FIND1
0014FD 23          3840                   INC	HL
0014FE 04          3841                   INC	B
0014FF 18 EC       3842                   JR	FIND0
001501             3843   ;
001501 FD E5       3844   FIND2:          PUSH	IY
001503 CB 7E       3845   FIND3:          BIT	7,(HL)
001505 FD 23       3846                   INC	IY
001507 23          3847                   INC	HL
001508 20 10       3848                   JR	NZ,FIND5
00150A BE          3849                   CP	(HL)
00150B CC 26 15    3850                   CALL	Z,SKIP0
00150E 7E          3851                   LD	A,(HL)
00150F FD AE 00    3852                   XOR	(IY)
001512 E6 5F       3853                   AND	01011111B
001514 28 ED       3854                   JR	Z,FIND3
001516 FD E1       3855   FIND4:          POP	IY
001518 18 DE       3856                   JR	FIND1
00151A             3857   ;
00151A CD 39 15    3858   FIND5:          CALL	DELIM
00151D C4 33 15    3859                   CALL	NZ,SIGN
001520 20 F4       3860                   JR	NZ,FIND4
001522 78          3861   FIND6:          LD	A,B
001523 46          3862                   LD	B,(HL)
001524 E1          3863                   POP	HL
001525 C9          3864                   RET
001526             3865   ;
001526 23          3866   SKIP0:          INC	HL
001527 CD 39 15    3867   SKIP:           CALL	DELIM
00152A C0          3868                   RET	NZ
00152B CD 45 15    3869                   CALL	TERM
00152E C8          3870                   RET	Z
00152F FD 23       3871                   INC	IY
001531 18 F4       3872                   JR	SKIP
001533             3873   ;
001533 FE 2B       3874   SIGN:           CP	'+'
001535 C8          3875                   RET	Z
001536 FE 2D       3876                   CP	'-'
001538 C9          3877                   RET
001539             3878   ;
001539 FD 7E 00    3879   DELIM:          LD	A,(IY)		;ASSEMBLER DELIMITER
00153C FE 20       3880                   CP	' '
00153E C8          3881                   RET	Z
00153F FE 2C       3882                   CP	','
001541 C8          3883                   RET	Z
001542 FE 29       3884                   CP	')'
001544 C8          3885                   RET	Z
001545 FE 3B       3886   TERM:           CP	';'		;ASSEMBLER TERMINATOR
001547 C8          3887                   RET	Z
001548 FE 5C       3888                   CP	'\'
00154A C8          3889                   RET	Z
00154B FE 3A       3890   TERM0:          CP	':'		;ASSEMBLER SEPARATOR
00154D D0          3891                   RET	NC
00154E FE 0D       3892                   CP	CR
001550 C9          3893                   RET
001551             3894   ;
001551 4E 4F       3895   OPCODS:         DB	"NO"
001553 D0          3896                   DB	'P'+80H
001554 00          3897                   DB	0
001555 52 4C 43    3898                   DB	"RLC"
001558 C1          3899                   DB	'A'+80H
001559 07          3900                   DB	7
00155A 45 58       3901                   DB	"EX"
00155C 00          3902                   DB	0
00155D 41 46       3903                   DB	"AF"
00155F 00          3904                   DB	0
001560 41 46       3905                   DB	"AF"
001562 A7          3906                   DB	27H+80H ; APOSTROPHE
001563 08          3907                   DB	8
001564 52 52 43    3908                   DB	"RRC"
001567 C1          3909                   DB	'A'+80H
001568 0F          3910                   DB	0FH
001569 52 4C       3911                   DB	"RL"
00156B C1          3912                   DB	'A'+80H
00156C 17          3913                   DB	17H
00156D 52 52       3914                   DB	"RR"
00156F C1          3915                   DB	'A'+80H
001570 1F          3916                   DB	1FH
001571 44 41       3917                   DB	"DA"
001573 C1          3918                   DB	'A'+80H
001574 27          3919                   DB	27H
001575 43 50       3920                   DB	"CP"
001577 CC          3921                   DB	'L'+80H
001578 2F          3922                   DB	2FH
001579 53 43       3923                   DB	"SC"
00157B C6          3924                   DB	'F'+80H
00157C 37          3925                   DB	37H
00157D 43 43       3926                   DB	"CC"
00157F C6          3927                   DB	'F'+80H
001580 3F          3928                   DB	3FH
001581 48 41 4C    3929                   DB	"HAL"
001584 D4          3930                   DB	'T'+80H
001585 76          3931                   DB	76H
001586 45 58       3932                   DB	"EX"
001588 D8          3933                   DB	'X'+80H
001589 D9          3934                   DB	0D9H
00158A 45 58       3935                   DB	"EX"
00158C 00          3936                   DB	0
00158D 44 45       3937                   DB	"DE"
00158F 00          3938                   DB	0
001590 48          3939                   DB	'H'
001591 CC          3940                   DB	'L'+80H
001592 EB          3941                   DB	0EBH
001593 44          3942                   DB	'D'
001594 C9          3943                   DB	'I'+80H
001595 F3          3944                   DB	0F3H
001596 45          3945                   DB	'E'
001597 C9          3946                   DB	'I'+80H
001598 FB          3947                   DB	0FBH
001599             3948   ;
001599 4E 45       3949                   DB	"NE"
00159B C7          3950                   DB	'G'+80H
00159C 44          3951                   DB	44H
00159D 49 4D       3952                   DB	"IM"
00159F 00          3953                   DB	0
0015A0 B0          3954                   DB	'0'+80H
0015A1 46          3955                   DB	46H
0015A2 52 45 54    3956                   DB	"RET"
0015A5 CE          3957                   DB	'N'+80H
0015A6 45          3958                   DB	45H
0015A7 52 45 54    3959                   DB	"RET"
0015AA C9          3960                   DB	'I'+80H
0015AB 4D          3961                   DB	4DH
0015AC 49 4D       3962                   DB	"IM"
0015AE 00          3963                   DB	0
0015AF B1          3964                   DB	'1'+80H
0015B0 56          3965                   DB	56H
0015B1 49 4D       3966                   DB	"IM"
0015B3 00          3967                   DB	0
0015B4 B2          3968                   DB	'2'+80H
0015B5 5E          3969                   DB	5EH
0015B6 52 52       3970                   DB	"RR"
0015B8 C4          3971                   DB	'D'+80H
0015B9 67          3972                   DB	67H
0015BA 52 4C       3973                   DB	"RL"
0015BC C4          3974                   DB	'D'+80H
0015BD 6F          3975                   DB	6FH
0015BE 4C 44       3976                   DB	"LD"
0015C0 C9          3977                   DB	'I'+80H
0015C1 A0          3978                   DB	0A0H
0015C2 43 50       3979                   DB	"CP"
0015C4 C9          3980                   DB	'I'+80H
0015C5 A1          3981                   DB	0A1H
0015C6 49 4E       3982                   DB	"IN"
0015C8 C9          3983                   DB	'I'+80H
0015C9 A2          3984                   DB	0A2H
0015CA 4F 55 54    3985                   DB	"OUT"
0015CD C9          3986                   DB	'I'+80H
0015CE A3          3987                   DB	0A3H
0015CF 4C 44       3988                   DB	"LD"
0015D1 C4          3989                   DB	'D'+80H
0015D2 A8          3990                   DB	0A8H
0015D3 43 50       3991                   DB	"CP"
0015D5 C4          3992                   DB	'D'+80H
0015D6 A9          3993                   DB	0A9H
0015D7 49 4E       3994                   DB	"IN"
0015D9 C4          3995                   DB	'D'+80H
0015DA AA          3996                   DB	0AAH
0015DB 4F 55 54    3997                   DB	"OUT"
0015DE C4          3998                   DB	'D'+80H
0015DF AB          3999                   DB	0ABH
0015E0 4C 44 49    4000                   DB	"LDI"
0015E3 D2          4001                   DB	'R'+80H
0015E4 B0          4002                   DB	0B0H
0015E5 43 50 49    4003                   DB	"CPI"
0015E8 D2          4004                   DB	'R'+80H
0015E9 B1          4005                   DB	0B1H
0015EA 49 4E 49    4006                   DB	"INI"
0015ED D2          4007                   DB	'R'+80H
0015EE B2          4008                   DB	0B2H
0015EF 4F 54 49    4009                   DB	"OTI"
0015F2 D2          4010                   DB	'R'+80H
0015F3 B3          4011                   DB	0B3H
0015F4 4C 44 44    4012                   DB	"LDD"
0015F7 D2          4013                   DB	'R'+80H
0015F8 B8          4014                   DB	0B8H
0015F9 43 50 44    4015                   DB	"CPD"
0015FC D2          4016                   DB	'R'+80H
0015FD B9          4017                   DB	0B9H
0015FE 49 4E 44    4018                   DB	"IND"
001601 D2          4019                   DB	'R'+80H
001602 BA          4020                   DB	0BAH
001603 4F 54 44    4021                   DB	"OTD"
001606 D2          4022                   DB	'R'+80H
001607 BB          4023                   DB	0BBH
001608             4024   ;
001608 42 49       4025                   DB	"BI"
00160A D4          4026                   DB	'T'+80H
00160B 40          4027                   DB	40H
00160C 52 45       4028                   DB	"RE"
00160E D3          4029                   DB	'S'+80H
00160F 80          4030                   DB	80H
001610 53 45       4031                   DB	"SE"
001612 D4          4032                   DB	'T'+80H
001613 C0          4033                   DB	0C0H
001614             4034   ;
001614 52 4C       4035                   DB	"RL"
001616 C3          4036                   DB	'C'+80H
001617 00          4037                   DB	0
001618 52 52       4038                   DB	"RR"
00161A C3          4039                   DB	'C'+80H
00161B 08          4040                   DB	8
00161C 52          4041                   DB	'R'
00161D CC          4042                   DB	'L'+80H
00161E 10          4043                   DB	10H
00161F 52          4044                   DB	'R'
001620 D2          4045                   DB	'R'+80H
001621 18          4046                   DB	18H
001622 53 4C       4047                   DB	"SL"
001624 C1          4048                   DB	'A'+80H
001625 20          4049                   DB	20H
001626 53 52       4050                   DB	"SR"
001628 C1          4051                   DB	'A'+80H
001629 28          4052                   DB	28H
00162A 53 52       4053                   DB	"SR"
00162C CC          4054                   DB	'L'+80H
00162D 38          4055                   DB	38H
00162E             4056   ;
00162E 50 4F       4057                   DB	"PO"
001630 D0          4058                   DB	'P'+80H
001631 C1          4059                   DB	0C1H
001632 50 55 53    4060                   DB	"PUS"
001635 C8          4061                   DB	'H'+80H
001636 C5          4062                   DB	0C5H
001637 45 58       4063                   DB	"EX"
001639 00          4064                   DB	0
00163A 28 53       4065                   DB	"(S"
00163C D0          4066                   DB	'P'+80H
00163D E3          4067                   DB	0E3H
00163E             4068   ;
00163E 53 55       4069                   DB	"SU"
001640 C2          4070                   DB	'B'+80H
001641 90          4071                   DB	90H
001642 41 4E       4072                   DB	"AN"
001644 C4          4073                   DB	'D'+80H
001645 A0          4074                   DB	0A0H
001646 58 4F       4075                   DB	"XO"
001648 D2          4076                   DB	'R'+80H
001649 A8          4077                   DB	0A8H
00164A 4F          4078                   DB	'O'
00164B D2          4079                   DB	'R'+80H
00164C B0          4080                   DB	0B0H
00164D 43          4081                   DB	'C'
00164E D0          4082                   DB	'P'+80H
00164F B8          4083                   DB	0B8H
001650 80          4084                   DB	TAND
001651 A0          4085                   DB	0A0H
001652 84          4086                   DB	TOR
001653 B0          4087                   DB	0B0H
001654             4088   ;
001654 41 44       4089                   DB	"AD"
001656 C4          4090                   DB	'D'+80H
001657 80          4091                   DB	80H
001658 41 44       4092                   DB	"AD"
00165A C3          4093                   DB	'C'+80H
00165B 88          4094                   DB	88H
00165C 53 42       4095                   DB	"SB"
00165E C3          4096                   DB	'C'+80H
00165F 98          4097                   DB	98H
001660             4098   ;
001660 49 4E       4099                   DB	"IN"
001662 C3          4100                   DB	'C'+80H
001663 04          4101                   DB	4
001664 44 45       4102                   DB	"DE"
001666 C3          4103                   DB	'C'+80H
001667 05          4104                   DB	5
001668             4105   ;
001668 49          4106                   DB	'I'
001669 CE          4107                   DB	'N'+80H
00166A 40          4108                   DB	40H
00166B 4F 55       4109                   DB	"OU"
00166D D4          4110                   DB	'T'+80H
00166E 41          4111                   DB	41H
00166F             4112   ;
00166F 4A          4113                   DB	'J'
001670 D2          4114                   DB	'R'+80H
001671 20          4115                   DB	20H
001672 44 4A 4E    4116                   DB	"DJN"
001675 DA          4117                   DB	'Z'+80H
001676 10          4118                   DB	10H
001677             4119   ;
001677 4A          4120                   DB	'J'
001678 D0          4121                   DB	'P'+80H
001679 C2          4122                   DB	0C2H
00167A             4123   ;
00167A 43 41 4C    4124                   DB	"CAL"
00167D CC          4125                   DB	'L'+80H
00167E C4          4126                   DB	0C4H
00167F             4127   ;
00167F 52 53       4128                   DB	"RS"
001681 D4          4129                   DB	'T'+80H
001682 C7          4130                   DB	0C7H
001683             4131   ;
001683 52 45       4132                   DB	"RE"
001685 D4          4133                   DB	'T'+80H
001686 C0          4134                   DB	0C0H
001687             4135   ;
001687 4C          4136                   DB	'L'
001688 C4          4137                   DB	'D'+80H
001689 40          4138                   DB	40H
00168A             4139   ;
00168A 5D          4140                   DB	TDEF & 7FH
00168B CD          4141                   DB	'M'+80H
00168C 00          4142                   DB	0
00168D             4143   ;
00168D 5D          4144                   DB	TDEF & 7FH
00168E C2          4145                   DB	'B'+80H
00168F 00          4146                   DB	0
001690             4147   ;
001690 4F 50       4148                   DB	"OP"
001692 D4          4149                   DB	'T'+80H
001693 00          4150                   DB	0
001694             4151   ;
001694 5D          4152                   DB	TDEF & 7FH
001695 D7          4153                   DB	'W'+80H
001696 00          4154                   DB	0
001697             4155   ;
001697 00          4156                   DB	0
001698             4157   ;
001698 C2          4158   OPRNDS:         DB	'B'+80H
001699 00          4159                   DB	0
00169A C3          4160                   DB	'C'+80H
00169B 01          4161                   DB	1
00169C C4          4162                   DB	'D'+80H
00169D 02          4163                   DB	2
00169E C5          4164                   DB	'E'+80H
00169F 03          4165                   DB	3
0016A0 C8          4166                   DB	'H'+80H
0016A1 04          4167                   DB	4
0016A2 CC          4168                   DB	'L'+80H
0016A3 05          4169                   DB	5
0016A4 28 48       4170                   DB	"(H"
0016A6 CC          4171                   DB	'L'+80H
0016A7 06          4172                   DB	6
0016A8 C1          4173                   DB	'A'+80H
0016A9 07          4174                   DB	7
0016AA 28 49       4175                   DB	"(I"
0016AC D8          4176                   DB	'X'+80H
0016AD 86          4177                   DB	86H
0016AE 28 49       4178                   DB	"(I"
0016B0 D9          4179                   DB	'Y'+80H
0016B1 C6          4180                   DB	0C6H
0016B2             4181   ;
0016B2 42          4182                   DB	'B'
0016B3 C3          4183                   DB	'C'+80H
0016B4 08          4184                   DB	8
0016B5 44          4185                   DB	'D'
0016B6 C5          4186                   DB	'E'+80H
0016B7 0A          4187                   DB	10
0016B8 48          4188                   DB	'H'
0016B9 CC          4189                   DB	'L'+80H
0016BA 0C          4190                   DB	12
0016BB 49          4191                   DB	'I'
0016BC D8          4192                   DB	'X'+80H
0016BD 8C          4193                   DB	8CH
0016BE 49          4194                   DB	'I'
0016BF D9          4195                   DB	'Y'+80H
0016C0 CC          4196                   DB	0CCH
0016C1 41          4197                   DB	'A'
0016C2 C6          4198                   DB	'F'+80H
0016C3 0E          4199                   DB	14
0016C4 53          4200                   DB	'S'
0016C5 D0          4201                   DB	'P'+80H
0016C6 0E          4202                   DB	14
0016C7             4203   ;
0016C7 4E          4204                   DB	'N'
0016C8 DA          4205                   DB	'Z'+80H
0016C9 10          4206                   DB	16
0016CA DA          4207                   DB	'Z'+80H
0016CB 11          4208                   DB	17
0016CC 4E          4209                   DB	'N'
0016CD C3          4210                   DB	'C'+80H
0016CE 12          4211                   DB	18
0016CF 50          4212                   DB	'P'
0016D0 CF          4213                   DB	'O'+80H
0016D1 14          4214                   DB	20
0016D2 50          4215                   DB	'P'
0016D3 C5          4216                   DB	'E'+80H
0016D4 15          4217                   DB	21
0016D5 D0          4218                   DB	'P'+80H
0016D6 16          4219                   DB	22
0016D7 CD          4220                   DB	'M'+80H
0016D8 17          4221                   DB	23
0016D9             4222   ;
0016D9 28          4223                   DB	'('
0016DA C3          4224                   DB	'C'+80H
0016DB 20          4225                   DB	20H
0016DC             4226   ;
0016DC 00          4227                   DB	0
0016DD             4228   ;
0016DD 49          4229   LDOPS:          DB	'I'
0016DE 00          4230                   DB	0
0016DF C1          4231                   DB	'A'+80H
0016E0 47          4232                   DB	47H
0016E1 52          4233                   DB	'R'
0016E2 00          4234                   DB	0
0016E3 C1          4235                   DB	'A'+80H
0016E4 4F          4236                   DB	4FH
0016E5 41          4237                   DB	'A'
0016E6 00          4238                   DB	0
0016E7 C9          4239                   DB	'I'+80H
0016E8 57          4240                   DB	57H
0016E9 41          4241                   DB	'A'
0016EA 00          4242                   DB	0
0016EB D2          4243                   DB	'R'+80H
0016EC 5F          4244                   DB	5FH
0016ED 28 42 43    4245                   DB	"(BC"
0016F0 00          4246                   DB	0
0016F1 C1          4247                   DB	'A'+80H
0016F2 02          4248                   DB	2
0016F3 28 44 45    4249                   DB	"(DE"
0016F6 00          4250                   DB	0
0016F7 C1          4251                   DB	'A'+80H
0016F8 12          4252                   DB	12H
0016F9 41          4253                   DB	'A'
0016FA 00          4254                   DB	0
0016FB 28 42       4255                   DB	"(B"
0016FD C3          4256                   DB	'C'+80H
0016FE 0A          4257                   DB	0AH
0016FF 41          4258                   DB	'A'
001700 00          4259                   DB	0
001701 28 44       4260                   DB	"(D"
001703 C5          4261                   DB	'E'+80H
001704 1A          4262                   DB	1AH
001705             4263   ;
001705 00          4264                   DB	0
001706             4265   ;
001706             4266   FIN:            ; END
001706             4267   ; --- End asmb.asm ---
001706             4268   
001706             4269   ; --- Begin eval.asm ---
001706             4270   ;
001706             4271   ;Automatically created from original source on 2024-12-20 19:08:22
001706             4272   ;
001706             4273                   .ASSUME ADL = 0
001706             4274   ;                SEGMENT CODE
001706             4275   ;
001706             4276   ;                XDEF	COUNT0
001706             4277   ;                XDEF	COUNT1
001706             4278   ;                XDEF	ZERO
001706             4279   ;                XDEF	TRUE
001706             4280   ;
001706             4281   ;BBC BASIC INTERPRETER - Z80 VERSION
001706             4282   ;EVALUATE EXPRESSION MODULE - "EVAL"
001706             4283   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
001706             4284   ;
001706             4285   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
001706             4286   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
001706             4287   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
001706             4288   ;
001706             4289   ;VERSION 2.3, 07-05-1984
001706             4290   ;VERSION 3.0, 08-03-1987
001706             4291   ;VERSION 5.0, 31-05-2024
001706             4292   ;
001706             4293   ;BINARY FLOATING POINT REPRESENTATION:
001706             4294   ; 32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
001706             4295   ; 8 BIT EXCESS-128 SIGNED EXPONENT
001706             4296   ; SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
001706             4297   ; MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
001706             4298   ;
001706             4299   ;BINARY INTEGER REPRESENTATION:
001706             4300   ; 32 BIT 2'S-COMPLEMENT SIGNED INTEGER
001706             4301   ; "EXPONENT" BYTE = 0 (WHEN PRESENT)
001706             4302   ;
001706             4303   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
001706             4304   ;                            EXPONENT - C
001706             4305   ;
001706             4306   ;                XDEF	EXPR
001706             4307   ;                XDEF	EXPRN
001706             4308   ;                XDEF	EXPRI
001706             4309   ;                XDEF	EXPRS
001706             4310   ;                XDEF	ITEMI
001706             4311   ;                XDEF	CONS
001706             4312   ;                XDEF	LOADS
001706             4313   ;                XDEF	VAL0
001706             4314   ;                XDEF	SFIX
001706             4315   ;                XDEF	STR
001706             4316   ;                XDEF	HEXSTR
001706             4317   ;                XDEF	LOAD4
001706             4318   ;                XDEF	LOADN
001706             4319   ;                XDEF	DLOAD5
001706             4320   ;                XDEF	TEST
001706             4321   ;                XDEF	ZERO
001706             4322   ;                XDEF	COMMA
001706             4323   ;                XDEF	BRAKET
001706             4324   ;                XDEF	DECODE
001706             4325   ;                XDEF	PUSHS
001706             4326   ;                XDEF	POPS
001706             4327   ;                XDEF	SEARCH
001706             4328   ;                XDEF	SCP
001706             4329   ;                XDEF	LETARR
001706             4330   ;
001706             4331   ;                XREF	MUL16
001706             4332   ;                XREF	ERROR_
001706             4333   ;                XREF	SYNTAX
001706             4334   ;                XREF	CHANEL
001706             4335   ;                XREF	CHNL
001706             4336   ;                XREF	STOREN
001706             4337   ;                XREF	STORE4
001706             4338   ;                XREF	STORE5
001706             4339   ;                XREF	STACCS
001706             4340   ;                XREF	CHECK
001706             4341   ;                XREF	USR
001706             4342   ;                XREF	VAR_
001706             4343   ;                XREF	FN
001706             4344   ;                XREF	XEQ
001706             4345   ;                XREF	NXT
001706             4346   ;                XREF	X14OR5
001706             4347   ;                XREF	MODIFY
001706             4348   ;                XREF	MODIFS
001706             4349   ;                XREF	TERMQ
001706             4350   ;
001706             4351   ;                XREF	GETVAR
001706             4352   ;                XREF	LEXAN2
001706             4353   ;                XREF	RANGE
001706             4354   ;                XREF	GETTOP
001706             4355   ;
001706             4356   ;                XREF	STAVAR
001706             4357   ;                XREF	PAGE_
001706             4358   ;                XREF	LOMEM
001706             4359   ;                XREF	HIMEM
001706             4360   ;                XREF	RANDOM
001706             4361   ;                XREF	COUNT
001706             4362   ;                XREF	LISTON
001706             4363   ;                XREF	PC
001706             4364   ;                XREF	ERL
001706             4365   ;                XREF	ERR
001706             4366   ;                XREF	ACCS
001706             4367   ;                XREF	ERRTXT
001706             4368   ;                XREF	KEYWDS
001706             4369   ;                XREF	KEYWDL
001706             4370   ;                XREF	FREE
001706             4371   ;                XREF	BUFFER
001706             4372   ;
001706             4373   ;                XREF	OSRDCH
001706             4374   ;                XREF	OSOPEN
001706             4375   ;                XREF	OSBGET
001706             4376   ;                XREF	OSSTAT
001706             4377   ;                XREF	GETCSR
001706             4378   ;                XREF	GETIME
001706             4379   ;                XREF	GETIMS
001706             4380   ;                XREF	GETEXT
001706             4381   ;                XREF	GETPTR
001706             4382   ;                XREF	OSKEY
001706             4383   ;
001706             4384   ;                XREF	POINT
001706             4385   ;                XREF	ADVAL
001706             4386   ;                XREF	TINTFN
001706             4387   ;                XREF	MODEFN
001706             4388   ;                XREF	WIDFN
001706             4389   ;
001706             4390   ;                XREF	FPP
001706             4391   ;
001706             4392   FUNTOK:         EQU	8DH		;1st FUNCTION TOKEN
001706             4393   TMOD:           EQU	83H
001706             4394   TLEN:           EQU	0A9H
001706             4395   ; TTO:            EQU	0B8H	; IN main.asm
001706             4396   ; TDIM:           EQU	0DEH	; IN main.asm
001706             4397   TEND:           EQU	0E0H
001706             4398   TMODE:          EQU	0EBH
001706             4399   TREPORT:        EQU	0F6H
001706             4400   TWIDTH:         EQU	0FEH
001706             4401   TTINT:          EQU	0AH
001706             4402   ; TBY:            EQU	0FH	; IN acorn.asm
001706             4403   ;
001706             4404   ;TABLE OF ADDRESSES FOR FUNCTIONS:
001706             4405   ;
001706 E4 1F       4406   FUNTBL:         DW	DECODE		;Line number
001708 DF 1B       4407                   DW	OPENIN		;OPENIN
00170A FC 1B       4408                   DW	PTRev		;PTR
00170C B1 1B       4409                   DW	PAGEVev		;PAGE
00170E 04 1C       4410                   DW	TIMEVev		;TIME
001710 A7 1B       4411                   DW	LOMEMVev		;LOMEM
001712 AC 1B       4412                   DW	HIMEMVev		;HIMEM
001714 50 1C       4413                   DW	ABSev		;ABS
001716 8C 1C       4414                   DW	ACSev		;ACS
001718 6B 0E       4415                   DW	ADVAL		;ADVAL
00171A 94 1B       4416                   DW	ASC		;ASC
00171C 84 1C       4417                   DW	ASNev		;ASN
00171E 88 1C       4418                   DW	ATNev		;ATN
001720 70 1B       4419                   DW	BGET		;BGET
001722 70 1C       4420                   DW	COSev		;COS
001724 CF 1B       4421                   DW	COUNTV		;COUNT
001726 58 1C       4422                   DW	DEGev		;DEG
001728 C5 1B       4423                   DW	ERLV		;ERL
00172A CA 1B       4424                   DW	ERRV		;ERR
00172C B0 1C       4425                   DW	EVAL_		;EVAL_
00172E 78 1C       4426                   DW	EXPev		;EXP
001730 F4 1B       4427                   DW	EXTev		;EXT
001732 7C 20       4428                   DW	ZERO		;FALSE
001734 67 2A       4429                   DW	FN		;FN
001736 7E 1B       4430                   DW	GET		;GET
001738 79 1B       4431                   DW	INKEY		;INKEY
00173A 29 1E       4432                   DW	INSTR		;INSTR(
00173C 64 1C       4433                   DW	INT_ev		;INT_
00173E A1 1B       4434                   DW	LEN		;LEN
001740 7C 1C       4435                   DW	LNev		;LN
001742 80 1C       4436                   DW	LOGev		;LOG
001744 54 1C       4437                   DW	CPL_ev		;NOT
001746 DC 1B       4438                   DW	OPENUP		;OPENUP
001748 DA 1B       4439                   DW	OPENOT		;OPENOUT
00174A 4C 1C       4440                   DW	PIev		;PI
00174C 38 0E       4441                   DW	POINT		;POINT(
00174E 59 1B       4442                   DW	POS		;POS
001750 5C 1C       4443                   DW	RADev		;RAD
001752 DD 1C       4444                   DW	RND		;RND
001754 60 1C       4445                   DW	SGNev		;SGN
001756 74 1C       4446                   DW	SINev		;SIN
001758 68 1C       4447                   DW	SQRev		;SQR
00175A 6C 1C       4448                   DW	TANev		;TAN
00175C B6 1B       4449                   DW	TOPV		;TO(P)
00175E 41 1C       4450                   DW	TRUEev		;TRUE
001760 C3 30       4451                   DW	USR		;USR
001762 A3 1C       4452                   DW	VALev		;VAL
001764 5F 1B       4453                   DW	VPOS		;VPOS
001766 AA 1E       4454                   DW	CHRS		;CHR$
001768 B1 1E       4455                   DW	GETS		;GET$
00176A 12 1F       4456                   DW	INKEYS		;INKEY$
00176C 52 1F       4457                   DW	LEFTS		;LEFT$(
00176E 22 1F       4458                   DW	MIDS		;MID$(
001770 80 1F       4459                   DW	RIGHTS		;RIGHT$(
001772 3C 20       4460                   DW	STRS		;STR$
001774 AA 1F       4461                   DW	STRING_		;STRING_$(
001776 64 1B       4462                   DW	EOF		;EOF
001778 6D 1D       4463                   DW	SUM		;SUM
00177A             4464   ;
00177A             4465   FUNTBL_END:     EQU	$
00177A             4466   TCMDev:           EQU	FUNTOK+[[FUNTBL_END-FUNTBL]/2]
00177A             4467   ;
00177A             4468   ; CR             EQU	0DH
00177A             4469   ; LF             EQU	0AH
00177A             4470   AND_:           EQU	80H
00177A             4471   DIV_:           EQU	81H
00177A             4472   EOR:            EQU	82H
00177A             4473   MOD_:           EQU	83H
00177A             4474   OR_:            EQU	84H
00177A             4475   ;
00177A 2F 1C       4476   SOPTBL:         DW	SLE		;<= (STRING)
00177C 37 1C       4477                   DW	SNE		;<>
00177E 29 1C       4478                   DW	SGE		;>=
001780 1C 1C       4479                   DW	SLT		;<
001782 3D 1C       4480                   DW	SEQ		;=
001784 22 1C       4481                   DW	SGT		;>
001786             4482   ;
001786             4483   ;EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
001786             4484   ; Expression type is returned in A'F':
001786             4485   ; Numeric - A' bit 7=0, F' sign bit cleared.
001786             4486   ; String - A' bit 7=1, F' sign bit set.
001786             4487   ;Floating-point or integer result returned in HLH'L'C
001786             4488   ; Integer result denoted by C=0 and HLH'L' non-zero.
001786             4489   ;String result returned in string accumulator, DE set.
001786             4490   ;
001786             4491   ;Hierarchy is: (1) Variables, functions,
001786             4492   ; constants, bracketed expressions.
001786             4493   ; (2) ^
001786             4494   ; (3) * / MOD DIV
001786             4495   ; (4) + -
001786             4496   ; (5) = <> <= >= > <
001786             4497   ; (6) AND
001786             4498   ; (7) EOR OR
001786             4499   ;
001786 CD 9B 17    4500   EXPR:           CALL	EXPR1		;GET FIRST OPERAND
001789 FE 82       4501   EXPR0A:         CP	EOR		;CHECK OPERATOR
00178B 28 03       4502                   JR	Z,EXPR0B
00178D FE 84       4503                   CP	OR_
00178F C0          4504                   RET	NZ
001790 CD F7 20    4505   EXPR0B:         CALL	SAVEev		;SAVE FIRST OPERAND
001793 CD 9B 17    4506                   CALL	EXPR1		;GET SECOND OPERAND
001796 CD 07 21    4507                   CALL	DOIT		;DO OPERATION
001799 18 EE       4508                   JR	EXPR0A		;CONTINUE
00179B             4509   ;
00179B CD AC 17    4510   EXPR1:          CALL	EXPR2
00179E FE 80       4511   EXPR1A:         CP	AND_
0017A0 C0          4512                   RET	NZ
0017A1 CD F7 20    4513                   CALL	SAVEev
0017A4 CD AC 17    4514                   CALL	EXPR2
0017A7 CD 07 21    4515                   CALL	DOIT
0017AA 18 F2       4516                   JR	EXPR1A
0017AC             4517   ;
0017AC CD 24 18    4518   EXPR2:          CALL	EXPR3ev
0017AF CD EE 20    4519                   CALL	RELOPQ
0017B2 C0          4520                   RET	NZ
0017B3 47          4521                   LD	B,A
0017B4 FD 23       4522                   INC	IY		;BUMP OVER OPERATOR
0017B6 CD 8F 45    4523                   CALL	NXT
0017B9 CD EE 20    4524                   CALL	RELOPQ		;COMPOUND OPERATOR?
0017BC 20 07       4525                   JR	NZ,EXPR2B
0017BE FD 23       4526                   INC	IY
0017C0 B8          4527                   CP	B
0017C1 28 1C       4528                   JR	Z,SHIFT		;SHIFT | ==
0017C3 80          4529                   ADD	A,B
0017C4 47          4530                   LD	B,A
0017C5 78          4531   EXPR2B:         LD	A,B
0017C6 08          4532                   EX	AF,AF'
0017C7 FA F7 17    4533                   JP	M,EXPR2S
0017CA 08          4534                   EX	AF,AF'
0017CB D6 04       4535                   SUB	4
0017CD FE 3A       4536                   CP	'>'-4
0017CF 20 02       4537                   JR	NZ,EXPR2C
0017D1 C6 02       4538                   ADD	A,2
0017D3 E6 0F       4539   EXPR2C:         AND	0FH
0017D5 CD FB 20    4540   EXPR2D:         CALL	SAVE1
0017D8 CD 24 18    4541                   CALL	EXPR3ev
0017DB CD 07 21    4542                   CALL	DOIT		;Must NOT be "JP DOIT"
0017DE C9          4543                   RET
0017DF             4544   ;
0017DF FE 3D       4545   SHIFT:          CP	'='
0017E1 28 E2       4546                   JR	Z,EXPR2B	;==
0017E3 CD 8F 45    4547                   CALL	NXT
0017E6 CD EE 20    4548                   CALL	RELOPQ
0017E9 20 07       4549                   JR	NZ,SHIFT1
0017EB B8          4550                   CP	B
0017EC C2 64 26    4551                   JP	NZ,SYNTAX
0017EF FD 23       4552                   INC	IY
0017F1 04          4553                   INC	B
0017F2 78          4554   SHIFT1:         LD	A,B
0017F3 D6 12       4555                   SUB	18
0017F5 18 DE       4556                   JR	EXPR2D
0017F7             4557   ;
0017F7 08          4558   EXPR2S:         EX	AF,AF'
0017F8 3D          4559                   DEC	A
0017F9 E6 07       4560                   AND	7
0017FB CD 9D 20    4561                   CALL	PUSHS		;SAVE STRING ON STACK
0017FE F5          4562                   PUSH	AF		;SAVE OPERATOR
0017FF CD 24 18    4563                   CALL	EXPR3ev		;SECOND STRING
001802 08          4564                   EX	AF,AF'
001803 F2 F2 18    4565                   JP	P,MISMATev
001806 F1          4566                   POP	AF
001807 4B          4567                   LD	C,E		;LENGTH OF STRING #2
001808 D1          4568                   POP	DE
001809 21 00 00    4569                   LD	HL,0
00180C 39          4570                   ADD	HL,SP
00180D 43          4571                   LD	B,E		;LENGTH OF STRING #1
00180E D5          4572                   PUSH	DE
00180F 11 00 53    4573                   LD	DE,ACCS
001812 EB          4574                   EX	DE,HL
001813 CD 3F 21    4575                   CALL	DISPT2
001816 D1          4576                   POP	DE
001817 EB          4577                   EX	DE,HL
001818 26 00       4578                   LD	H,0
00181A 39          4579                   ADD	HL,SP
00181B F9          4580                   LD	SP,HL
00181C EB          4581                   EX	DE,HL
00181D AF          4582                   XOR	A		;NUMERIC MARKER
00181E 4F          4583                   LD	C,A		;INTEGER MARKER
00181F 08          4584                   EX	AF,AF'
001820 FD 7E 00    4585                   LD	A,(IY)
001823 C9          4586                   RET
001824             4587   ;
001824 CD 72 18    4588   EXPR3ev:          CALL	EXPR4
001827 FE 2D       4589   EXPR3A:         CP	'-'
001829 28 08       4590                   JR	Z,EXPR3B
00182B FE 2B       4591                   CP	'+'
00182D C0          4592                   RET	NZ
00182E 08          4593                   EX	AF,AF'
00182F FA 3E 18    4594                   JP	M,EXPR3S
001832 08          4595                   EX	AF,AF'
001833 CD F7 20    4596   EXPR3B:         CALL	SAVEev
001836 CD 72 18    4597                   CALL	EXPR4
001839 CD 07 21    4598                   CALL	DOIT
00183C 18 E9       4599                   JR	EXPR3A
00183E             4600   ;
00183E 08          4601   EXPR3S:         EX	AF,AF'
00183F FD 23       4602                   INC	IY		;BUMP PAST '+'
001841 CD 9D 20    4603                   CALL	PUSHS		;SAVE STRING ON STACK
001844 CD 72 18    4604                   CALL	EXPR4		;SECOND STRING
001847 08          4605                   EX	AF,AF'
001848 F2 F2 18    4606                   JP	P,MISMATev
00184B 4B          4607                   LD	C,E		;C=LENGTH
00184C D1          4608                   POP	DE
00184D D5          4609                   PUSH	DE
00184E 21 00 53    4610                   LD	HL,ACCS
001851 54          4611                   LD	D,H
001852 79          4612                   LD	A,C
001853 B7          4613                   OR	A
001854 28 0E       4614                   JR	Z,EXP3S3
001856 45          4615                   LD	B,L
001857 6F          4616                   LD	L,A		;SOURCE
001858 83          4617                   ADD	A,E
001859 5F          4618                   LD	E,A		;DESTINATION
00185A 3E 13       4619                   LD	A,19
00185C 38 6B       4620                   JR	C,ERROR2ev	;"String too long"
00185E D5          4621                   PUSH	DE
00185F 1D          4622                   DEC	E
001860 2D          4623                   DEC	L
001861 ED B8       4624                   LDDR			;COPY
001863 D1          4625                   POP	DE
001864 D9          4626   EXP3S3:         EXX
001865 C1          4627                   POP	BC
001866 CD BB 20    4628                   CALL	POPS		;RESTORE FROM STACK
001869 D9          4629                   EXX
00186A F6 80       4630                   OR	80H		;FLAG STRING
00186C 08          4631                   EX	AF,AF'
00186D FD 7E 00    4632                   LD	A,(IY)
001870 18 B5       4633                   JR	EXPR3A
001872             4634   ;
001872 CD 98 18    4635   EXPR4:          CALL	EXPR5
001875 FE 2A       4636   EXPR4A:         CP	'*'
001877 28 0B       4637                   JR	Z,EXPR4B
001879 FE 2F       4638                   CP	'/'
00187B 28 07       4639                   JR	Z,EXPR4B
00187D FE 83       4640                   CP	MOD_
00187F 28 03       4641                   JR	Z,EXPR4B
001881 FE 81       4642                   CP	DIV_
001883 C0          4643                   RET	NZ
001884 CD F7 20    4644   EXPR4B:         CALL	SAVEev
001887 CD 98 18    4645                   CALL	EXPR5
00188A CD 07 21    4646                   CALL	DOIT
00188D 18 E6       4647                   JR	EXPR4A
00188F             4648   ;
00188F 7B          4649   EXPR45:         LD	A,E
001890 FE 2B       4650                   CP	'+'
001892 28 DE       4651                   JR	Z,EXPR4
001894 FE 2D       4652                   CP	'-'
001896 28 DA       4653                   JR	Z,EXPR4
001898 CD 54 19    4654   EXPR5:          CALL	ITEM
00189B B7          4655                   OR	A		;TEST TYPE
00189C 08          4656                   EX	AF,AF'		;SAVE TYPE
00189D CD 8F 45    4657   EXPR5A:         CALL	NXT
0018A0 FE 5E       4658                   CP	'^'
0018A2 C0          4659                   RET	NZ
0018A3 CD F7 20    4660                   CALL	SAVEev
0018A6 CD 54 19    4661                   CALL	ITEM
0018A9 B7          4662                   OR	A
0018AA 08          4663                   EX	AF,AF'
0018AB CD 07 21    4664                   CALL	DOIT
0018AE 18 ED       4665                   JR	EXPR5A
0018B0             4666   ;
0018B0 CD 86 17    4667   EXPRN:          CALL	EXPR
0018B3 08          4668                   EX	AF,AF'
0018B4 F0          4669                   RET	P
0018B5 18 3B       4670                   JR	MISMATev
0018B7             4671   ;
0018B7 CD 86 17    4672   EXPRI:          CALL	EXPR
0018BA 08          4673                   EX	AF,AF'
0018BB F2 9B 1C    4674                   JP	P,SFIX
0018BE 18 32       4675                   JR	MISMATev
0018C0             4676   ;
0018C0 CD 86 17    4677   EXPRS:          CALL	EXPR
0018C3 08          4678                   EX	AF,AF'
0018C4 F8          4679                   RET	M
0018C5 18 2B       4680                   JR	MISMATev
0018C7             4681   ;
0018C7 3E 1C       4682   BADHEX:         LD	A,28
0018C9 C3 C8 3F    4683   ERROR2ev:         JP	ERROR_		;"Bad HEX or binary"
0018CC             4684   ;
0018CC D9          4685   NEGATEev:         EXX
0018CD 7C          4686                   LD	A,H
0018CE 2F          4687                   CPL
0018CF 67          4688                   LD	H,A
0018D0 7D          4689                   LD	A,L
0018D1 2F          4690                   CPL
0018D2 6F          4691                   LD	L,A
0018D3 D9          4692                   EXX
0018D4 7C          4693                   LD	A,H
0018D5 2F          4694                   CPL
0018D6 67          4695                   LD	H,A
0018D7 7D          4696                   LD	A,L
0018D8 2F          4697                   CPL
0018D9 6F          4698                   LD	L,A
0018DA D9          4699   ADD1ev:           EXX
0018DB 23          4700                   INC	HL
0018DC 7C          4701                   LD	A,H
0018DD B5          4702                   OR	L
0018DE D9          4703                   EXX
0018DF 3E 00       4704                   LD	A,0		;NUMERIC MARKER
0018E1 C0          4705                   RET	NZ
0018E2 23          4706                   INC	HL
0018E3 C9          4707                   RET
0018E4             4708   ;
0018E4 CD 54 19    4709   ITEMI:          CALL	ITEM
0018E7 B7          4710                   OR	A
0018E8 F2 9B 1C    4711                   JP	P,SFIX
0018EB 18 05       4712                   JR	MISMATev
0018ED             4713   ;
0018ED CD 54 19    4714   ITEMS:          CALL	ITEM
0018F0 B7          4715                   OR	A
0018F1 F8          4716                   RET	M
0018F2 3E 06       4717   MISMATev:         LD	A,6
0018F4 18 D3       4718                   JR	ERROR2ev		;"Type mismatch"
0018F6             4719   ;
0018F6 CD 86 17    4720   ITEM1:          CALL	EXPR		;BRACKETED EXPR
0018F9 CD 32 21    4721                   CALL	BRAKET
0018FC 08          4722                   EX	AF,AF'
0018FD C9          4723                   RET
0018FE             4724   ;
0018FE CD 54 19    4725   ITEMN:          CALL	ITEM
001901 B7          4726                   OR	A
001902 F0          4727                   RET	P
001903 18 ED       4728                   JR	MISMATev
001905             4729   ;
001905             4730   ;HEX - Get hexadecimal constant.
001905             4731   ;   Inputs: ASCII string at (IY)
001905             4732   ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
001905             4733   ;           IY updated (points to delimiter)
001905             4734   ;
001905 CD 7C 20    4735   HEXev:            CALL	ZERO
001908 CD DB 20    4736                   CALL	HEXDIG
00190B 38 BA       4737                   JR	C,BADHEX
00190D FD 23       4738   HEX1:           INC	IY
00190F E6 0F       4739                   AND	0FH
001911 06 04       4740                   LD	B,4
001913 D9          4741   HEX2:           EXX
001914 29          4742                   ADD	HL,HL
001915 D9          4743                   EXX
001916 ED 6A       4744                   ADC	HL,HL
001918 10 F9       4745                   DJNZ	HEX2
00191A D9          4746                   EXX
00191B B5          4747                   OR	L
00191C 6F          4748                   LD	L,A
00191D D9          4749                   EXX
00191E CD DB 20    4750                   CALL	HEXDIG
001921 30 EA       4751                   JR	NC,HEX1
001923 AF          4752                   XOR	A
001924 C9          4753                   RET
001925             4754   ;
001925             4755   ;BIN - Get binary constant.
001925             4756   ;   Inputs: ASCII string at (IY)
001925             4757   ;  Outputs: Integer result in H'L'HL, C=0, A=0.
001925             4758   ;           IY updated (points to delimiter)
001925             4759   ;
001925 CD 7C 20    4760   BIN:            CALL	ZERO
001928 CD CE 20    4761                   CALL	BINDIG
00192B 38 9A       4762                   JR	C,BADHEX
00192D FD 23       4763   BIN1:           INC	IY
00192F CB 1F       4764                   RR	A
001931 D9          4765                   EXX
001932 ED 6A       4766                   ADC	HL,HL
001934 D9          4767                   EXX
001935 ED 6A       4768                   ADC	HL,HL
001937 CD CE 20    4769                   CALL	BINDIG
00193A 30 F1       4770                   JR	NC,BIN1
00193C AF          4771                   XOR	A
00193D C9          4772                   RET
00193E             4773   ;
00193E             4774   ;MINUS - Unary minus.
00193E             4775   ;   Inputs: IY = text pointer
00193E             4776   ;  Outputs: Numeric result, same type as argument.
00193E             4777   ;           Result in H'L'HLC
00193E             4778   ;
00193E CD FE 18    4779   MINUS:          CALL	ITEMN
001941 0D          4780   MINUS0:         DEC	C
001942 0C          4781                   INC	C
001943 28 87       4782                   JR	Z,NEGATEev	;ZERO/INTEGER
001945 7C          4783                   LD	A,H
001946 EE 80       4784                   XOR	80H		;CHANGE SIGN (FP)
001948 67          4785                   LD	H,A
001949 AF          4786                   XOR	A		;NUMERIC MARKER
00194A C9          4787                   RET
00194B             4788   ;
00194B CD 5A 26    4789   ADDROF:         CALL	VAR_
00194E E5          4790                   PUSH	HL
00194F D9          4791                   EXX
001950 E1          4792                   POP	HL
001951 C3 D4 1B    4793                   JP	COUNT1
001954             4794   ;
001954             4795   ;ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
001954             4796   ;Item type is returned in A: Bit 7=0 numeric.
001954             4797   ; Bit 7=1 string.
001954             4798   ;Numeric item returned in HLH'L'C.
001954             4799   ;String item returned in string accumulator,
001954             4800   ; DE addresses byte after last (E=length).
001954             4801   ;
001954 CD 0A 33    4802   ITEM:           CALL	CHECK
001957 CD 8F 45    4803                   CALL	NXT
00195A FD 23       4804                   INC	IY
00195C FE 8D       4805                   CP	FUNTOK
00195E 38 08       4806                   JR	C,ITEM0
001960 FE C7       4807                   CP	TCMDev
001962 DA 45 21    4808                   JP	C,DISPATev	;FUNCTIONS
001965 C3 B4 1A    4809                   JP	EXTRASev		;DIM, END, MODE, REPORT$, WIDTH
001968             4810   ;
001968 FE 3A       4811   ITEM0:          CP	':'
00196A 30 25       4812                   JR	NC,ITEM2	;VARIABLES
00196C FE 30       4813                   CP	'0'
00196E 30 7B       4814                   JR	NC,CONev		;NUMERIC CONSTANT
001970 FE 28       4815                   CP	'('
001972 28 82       4816                   JR	Z,ITEM1		;EXPRESSION
001974 FE 2D       4817                   CP	'-'
001976 28 C6       4818                   JR	Z,MINUS		;UNARY MINUS
001978 FE 2B       4819                   CP	'+'
00197A 28 82       4820                   JR	Z,ITEMN		;UNARY PLUS
00197C FE 2E       4821                   CP	'.'
00197E 28 6B       4822                   JR	Z,CONev		;NUMERIC CONSTANT
001980 FE 26       4823                   CP	'&'
001982 28 81       4824                   JR	Z,HEXev		;HEX CONSTANT
001984 FE 25       4825                   CP	'%'
001986 28 9D       4826                   JR	Z,BIN		;BINARY CONSTANT
001988 FE 22       4827                   CP	'"'
00198A 28 72       4828                   JR	Z,CONS		;STRING CONSTANT
00198C FE 0A       4829                   CP	TTINT
00198E CA 54 1B    4830                   JP	Z,TINTev		;TINT FUNCTION
001991 FE 83       4831   ITEM2:          CP	TMOD
001993 CA D1 1D    4832                   JP	Z,MODFUN	;MOD
001996 FE 5E       4833                   CP	'^'
001998 28 B1       4834                   JR	Z,ADDROF	;^ OPERATOR
00199A FD 2B       4835                   DEC	IY
00199C CD 67 42    4836                   CALL	GETVAR		;VARIABLE
00199F 20 2F       4837                   JR	NZ,NOSUCHev
0019A1 CB 77       4838                   BIT	6,A
0019A3 20 7E       4839                   JR	NZ,ARRAYev
0019A5 B7          4840                   OR	A
0019A6 FA 92 1A    4841                   JP	M,LOADS		;STRING VARIABLE
0019A9 CB 57       4842   LOADN:          BIT	2,A
0019AB 0E 00       4843                   LD	C,0
0019AD 28 16       4844                   JR	Z,LOAD1		;BYTE VARIABLE
0019AF CB 47       4845                   BIT	0,A
0019B1 28 03       4846                   JR	Z,LOAD4		;INTEGER VARIABLE
0019B3 DD 4E 04    4847   LOAD5:          LD	C,(IX+4)
0019B6 D9          4848   LOAD4:          EXX
0019B7 DD 6E 00    4849                   LD	L,(IX+0)
0019BA DD 66 01    4850                   LD	H,(IX+1)
0019BD D9          4851                   EXX
0019BE DD 6E 02    4852                   LD	L,(IX+2)
0019C1 DD 66 03    4853                   LD	H,(IX+3)
0019C4 C9          4854                   RET
0019C5             4855   ;
0019C5 21 00 00    4856   LOAD1:          LD	HL,0
0019C8 D9          4857                   EXX
0019C9 26 00       4858                   LD	H,0
0019CB DD 6E 00    4859                   LD	L,(IX+0)
0019CE D9          4860                   EXX
0019CF C9          4861                   RET
0019D0             4862   ;
0019D0 DA 64 26    4863   NOSUCHev:         JP	C,SYNTAX
0019D3 3A FE 55    4864                   LD	A,(LISTON)
0019D6 CB 6F       4865                   BIT	5,A
0019D8 3E 1A       4866                   LD	A,26
0019DA 20 36       4867                   JR	NZ,ERROR0ev	;"No such variable"
0019DC FD 23       4868   NOS1:           INC	IY
0019DE CD 73 44    4869                   CALL	RANGE
0019E1 30 F9       4870                   JR	NC,NOS1
0019E3 DD 21 40 55 4871                   LD	IX,PC
0019E7 AF          4872                   XOR	A
0019E8 4F          4873                   LD	C,A
0019E9 18 CB       4874                   JR	LOAD4
0019EB             4875   ;
0019EB             4876   ;CON - Get unsigned numeric constant from ASCII string.
0019EB             4877   ;   Inputs: ASCII string at (IY-1)
0019EB             4878   ;  Outputs: Variable-type result in HLH'L'C
0019EB             4879   ;           IY updated (points to delimiter)
0019EB             4880   ;           A7 = 0 (numeric marker)
0019EB             4881   ;
0019EB FD 2B       4882   CONev:            DEC	IY
0019ED FD E5       4883                   PUSH	IY
0019EF DD E1       4884                   POP	IX
0019F1 3E 24       4885                   LD	A,36
0019F3 CD 99 45    4886                   CALL	FPP
0019F6 38 1A       4887                   JR	C,ERROR0ev
0019F8 DD E5       4888                   PUSH	IX
0019FA FD E1       4889                   POP	IY
0019FC AF          4890                   XOR	A
0019FD C9          4891                   RET
0019FE             4892   ;
0019FE             4893   ;CONS - Get string constant from ASCII string.
0019FE             4894   ;   Inputs: ASCII string at (IY)
0019FE             4895   ;  Outputs: Result in string accumulator.
0019FE             4896   ;           D = MS byte of ACCS, E = string length
0019FE             4897   ;           A7 = 1 (string marker)
0019FE             4898   ;           IY updated
0019FE             4899   ;
0019FE 11 00 53    4900   CONS:           LD	DE,ACCS
001A01 FD 7E 00    4901   CONS3:          LD	A,(IY)
001A04 FD 23       4902                   INC	IY
001A06 FE 22       4903                   CP	'"'
001A08 28 0B       4904                   JR	Z,CONS2
001A0A 12          4905   CONS1:          LD	(DE),A
001A0B 1C          4906                   INC	E
001A0C FE 0D       4907                   CP	CR
001A0E 20 F1       4908                   JR	NZ,CONS3
001A10 3E 09       4909                   LD	A,9
001A12 C3 C8 3F    4910   ERROR0ev:         JP	ERROR_		;"Missing """
001A15             4911   ;
001A15 FD 7E 00    4912   CONS2:          LD	A,(IY)
001A18 FE 22       4913                   CP	'"'
001A1A FD 23       4914                   INC	IY
001A1C 28 EC       4915                   JR	Z,CONS1
001A1E FD 2B       4916                   DEC	IY
001A20 3E 80       4917                   LD	A,80H		;STRING MARKER
001A22 C9          4918                   RET
001A23             4919   ;
001A23 3E 0E       4920   ARRAYev:          LD	A,14		;'Bad use of array'
001A25 C3 C8 3F    4921                   JP	ERROR_
001A28             4922   ;
001A28             4923   ; ARRLEN - Get start address and number of elements of an array
001A28             4924   ;   Inputs: HL addresses array descriptor
001A28             4925   ;  Outputs: HL = address of first element
001A28             4926   ;           DE = total number of elements
001A28             4927   ;           A = 0
001A28             4928   ; Destroys: A,B,C,D,E,H,L,flags
001A28             4929   ;
001A28 7E          4930   ARRLEN:         LD	A,(HL)		;Number of dimensions
001A29 23          4931                   INC	HL
001A2A B7          4932                   OR	A
001A2B 28 F6       4933                   JR	Z,ARRAYev
001A2D 11 01 00    4934                   LD	DE,1
001A30 4E          4935   ARLOOP:         LD	C,(HL)
001A31 23          4936                   INC	HL
001A32 46          4937                   LD	B,(HL)		;BC = size of this dimension
001A33 23          4938                   INC	HL
001A34 EB          4939                   EX	DE,HL
001A35 F5          4940                   PUSH	AF
001A36 D5          4941                   PUSH	DE
001A37 CD 41 37    4942                   CALL	MUL16		;HL=HL*BC
001A3A D1          4943                   POP	DE
001A3B F1          4944                   POP	AF
001A3C EB          4945                   EX	DE,HL
001A3D 3D          4946                   DEC	A
001A3E 20 F0       4947                   JR	NZ,ARLOOP
001A40 C9          4948                   RET
001A41             4949   ;
001A41 CD 8F 45    4950   GETARR:         CALL	NXT
001A44 CD 67 42    4951                   CALL	GETVAR
001A47 20 87       4952                   JR	NZ,NOSUCHev
001A49 CB 77       4953                   BIT	6,A
001A4B 37          4954                   SCF
001A4C 28 82       4955                   JR	Z,NOSUCHev
001A4E E6 8F       4956                   AND	8FH
001A50 47          4957                   LD	B,A		;Type + size
001A51 7E          4958   GETAR1:         LD	A,(HL)
001A52 23          4959                   INC	HL
001A53 66          4960                   LD	H,(HL)
001A54 6F          4961                   LD	L,A
001A55 E6 FE       4962                   AND	0FEH
001A57 B4          4963                   OR	H
001A58 28 C9       4964                   JR	Z,ARRAYev		;Bad use of array
001A5A C9          4965                   RET
001A5B             4966   ;
001A5B CD 8F 45    4967   GETARB:         CALL	NXT
001A5E FE 28       4968                   CP	'('
001A60 20 DF       4969                   JR	NZ,GETARR
001A62 FD 23       4970                   INC	IY
001A64 CD 41 1A    4971                   CALL	GETARR
001A67 CD 32 21    4972                   CALL	BRAKET
001A6A C9          4973                   RET
001A6B             4974   ;
001A6B CB 57       4975   DLOADN:         BIT	2,A
001A6D 06 00       4976                   LD	B,0
001A6F 28 16       4977                   JR	Z,DLOAD1	;BYTE VARIABLE
001A71 CB 47       4978                   BIT	0,A
001A73 28 03       4979                   JR	Z,DLOAD4	;INTEGER VARIABLE
001A75 DD 46 04    4980   DLOAD5:         LD	B,(IX+4)
001A78 D9          4981   DLOAD4:         EXX
001A79 DD 5E 00    4982                   LD	E,(IX+0)
001A7C DD 56 01    4983                   LD	D,(IX+1)
001A7F D9          4984                   EXX
001A80 DD 5E 02    4985                   LD	E,(IX+2)
001A83 DD 56 03    4986                   LD	D,(IX+3)
001A86 C9          4987                   RET
001A87             4988   ;
001A87 11 00 00    4989   DLOAD1:         LD	DE,0
001A8A D9          4990                   EXX
001A8B 16 00       4991                   LD	D,0
001A8D DD 5E 00    4992                   LD	E,(IX+0)
001A90 D9          4993                   EXX
001A91 C9          4994                   RET
001A92             4995   ;
001A92 11 00 53    4996   LOADS:          LD	DE,ACCS
001A95 1F          4997                   RRA
001A96 30 10       4998                   JR	NC,LOADS2	;FIXED STRING
001A98 CD B6 19    4999                   CALL	LOAD4
001A9B D9          5000                   EXX
001A9C 7D          5001                   LD	A,L
001A9D D9          5002                   EXX
001A9E B7          5003                   OR	A
001A9F 4F          5004                   LD	C,A
001AA0 3E 80       5005                   LD	A,80H		;STRING MARKER
001AA2 C8          5006                   RET	Z
001AA3 06 00       5007                   LD	B,0
001AA5 ED B0       5008                   LDIR
001AA7 C9          5009                   RET
001AA8             5010   ;
001AA8 7E          5011   LOADS2:         LD	A,(HL)
001AA9 12          5012                   LD	(DE),A
001AAA 23          5013                   INC	HL
001AAB FE 0D       5014                   CP	CR
001AAD 3E 80       5015   REPDUN:         LD	A,80H		;STRING MARKER
001AAF C8          5016                   RET	Z
001AB0 1C          5017                   INC	E
001AB1 20 F5       5018                   JR	NZ,LOADS2
001AB3 C9          5019                   RET			;RETURN NULL STRING
001AB4             5020   ;
001AB4             5021   ; Version 5 extensions:
001AB4             5022   ;
001AB4 FE EB       5023   EXTRASev:         CP	TMODE
001AB6 CA 77 0E    5024                   JP	Z,MODEFN	;MODE
001AB9 FE FE       5025                   CP	TWIDTH
001ABB CA 81 0E    5026                   JP	Z,WIDFN		;WIDTH
001ABE FE F6       5027                   CP	TREPORT
001AC0 28 11       5028                   JR	Z,REPORS	;REPORT$
001AC2 FE E0       5029                   CP	TEND
001AC4 28 07       5030                   JR	Z,ENDFUN	;END
001AC6 FE DE       5031                   CP	TDIM
001AC8 28 44       5032                   JR	Z,DIMFUN	;DIM
001ACA C3 64 26    5033   SYNERR:         JP	SYNTAX		; 'Syntax error'
001ACD             5034   ;
001ACD             5035   ; END (function)
001ACD             5036   ;
001ACD 2A E0 55    5037   ENDFUN:         LD	HL,(FREE)
001AD0 C3 D4 1B    5038                   JP	COUNT1
001AD3             5039   ;
001AD3             5040   ; REPORT$
001AD3             5041   ;
001AD3 FD 7E 00    5042   REPORS:         LD	A,(IY)
001AD6 FE 24       5043                   CP	'$'
001AD8 20 F0       5044                   JR	NZ,SYNERR
001ADA FD 23       5045                   INC	IY
001ADC 2A EE 55    5046                   LD	HL,(ERRTXT)
001ADF 11 00 53    5047                   LD	DE,ACCS
001AE2 7E          5048   REPCPY:         LD	A,(HL)
001AE3 B7          5049                   OR	A
001AE4 28 C7       5050                   JR	Z,REPDUN
001AE6 ED A0       5051                   LDI
001AE8 FE A0       5052                   CP	160
001AEA EA E2 1A    5053                   JP	PE,REPCPY
001AED FE 0A       5054                   CP	LF
001AEF 28 F1       5055                   JR	Z,REPCPY
001AF1 1D          5056                   DEC	E
001AF2 E5          5057                   PUSH	HL
001AF3 21 08 39    5058                   LD	HL,KEYWDS
001AF6 01 5B 03    5059                   LD	BC,KEYWDL
001AF9 ED B1       5060                   CPIR
001AFB 06 A0       5061                   LD	B,160
001AFD FE 91       5062                   CP	145
001AFF EA 03 1B    5063                   JP	PE,REPTOK
001B02 04          5064                   INC	B
001B03 7E          5065   REPTOK:         LD	A,(HL)
001B04 ED A0       5066                   LDI
001B06 B8          5067                   CP	B
001B07 EA 03 1B    5068                   JP	PE,REPTOK
001B0A E1          5069                   POP	HL
001B0B 1D          5070                   DEC	E
001B0C 18 D4       5071                   JR	REPCPY
001B0E             5072   ;
001B0E             5073   ; DIM(array()[,sub])
001B0E             5074   ;
001B0E CD 8F 45    5075   DIMFUN:         CALL	NXT
001B11 FE 28       5076                   CP	'('
001B13 20 09       5077                   JR	NZ,DIMF0
001B15 FD 23       5078                   INC	IY
001B17 CD 1E 1B    5079                   CALL	DIMF0
001B1A CD 32 21    5080                   CALL	BRAKET
001B1D C9          5081                   RET
001B1E             5082   ;
001B1E CD 41 1A    5083   DIMF0:          CALL	GETARR
001B21 E5          5084                   PUSH	HL
001B22 CD 8F 45    5085                   CALL	NXT
001B25 1E 00       5086                   LD	E,0
001B27 FE 2C       5087                   CP	','
001B29 20 0B       5088                   JR	NZ,DIMF1
001B2B FD 23       5089                   INC	IY
001B2D CD B7 18    5090                   CALL	EXPRI
001B30 D9          5091                   EXX
001B31 EB          5092                   EX	DE,HL
001B32 1C          5093                   INC	E
001B33 1D          5094                   DEC	E
001B34 28 19       5095                   JR	Z,BADSUB
001B36 E1          5096   DIMF1:          POP	HL
001B37 7E          5097                   LD	A,(HL)
001B38 23          5098                   INC	HL
001B39 BB          5099                   CP	E
001B3A 38 13       5100                   JR	C,BADSUB
001B3C 1D          5101                   DEC	E
001B3D FA 4A 1B    5102                   JP	M,DIMF3
001B40 19          5103                   ADD	HL,DE
001B41 19          5104                   ADD	HL,DE
001B42 7E          5105                   LD	A,(HL)
001B43 23          5106                   INC	HL
001B44 66          5107                   LD	H,(HL)
001B45 6F          5108                   LD	L,A
001B46 2B          5109                   DEC	HL
001B47 C3 D4 1B    5110   DIMF2:          JP	COUNT1
001B4A 6F          5111   DIMF3:          LD	L,A
001B4B 26 00       5112                   LD	H,0
001B4D 18 F8       5113                   JR	DIMF2
001B4F             5114   ;
001B4F 3E 0F       5115   BADSUB:         LD	A,15
001B51 C3 C8 3F    5116                   JP	ERROR_			;"Bad subscript"
001B54             5117   ;
001B54             5118   ;VARIABLE-TYPE FUNCTIONS:
001B54             5119   ;
001B54             5120   ;Result returned in HLH'L'C (floating point)
001B54             5121   ;Result returned in HLH'L' (C=0) (integer)
001B54             5122   ;Result returned in string accumulator & DE (string)
001B54             5123   ;All registers destroyed.
001B54             5124   ;IY (text pointer) updated.
001B54             5125   ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
001B54             5126   ;
001B54             5127   ;
001B54             5128   ;POS - horizontal cursor position.
001B54             5129   ;VPOS - vertical cursor position.
001B54             5130   ;EOF - return status of file.
001B54             5131   ;BGET - read byte from file.
001B54             5132   ;INKEY - as GET but wait only n centiseconds.
001B54             5133   ;GET - wait for keypress and return ASCII value.
001B54             5134   ;GET(n) - input from Z80 port n.
001B54             5135   ;ASC - ASCII value of string.
001B54             5136   ;LEN - length of string.
001B54             5137   ;LOMEM - location of dynamic variables.
001B54             5138   ;HIMEM - top of available RAM.
001B54             5139   ;PAGE - start of current text page.
001B54             5140   ;TOP - address of first free byte after program.
001B54             5141   ;ERL - line number where last error occurred.
001B54             5142   ;ERR - number of last error.
001B54             5143   ;COUNT - number of printing characters since CR.
001B54             5144   ;Results are integer numeric.
001B54             5145   ;
001B54 CD 95 11    5146   TINTev:           CALL	TINTFN
001B57 18 7B       5147                   JR	COUNT1
001B59 CD 2D 0E    5148   POS:            CALL	GETCSR
001B5C EB          5149                   EX	DE,HL
001B5D 18 75       5150                   JR	COUNT1
001B5F CD 2D 0E    5151   VPOS:           CALL	GETCSR
001B62 18 70       5152                   JR	COUNT1
001B64 CD 55 37    5153   EOF:            CALL	CHANEL
001B67 CD 6E 06    5154                   CALL	OSSTAT
001B6A CA 41 1C    5155                   JP	Z,TRUEev
001B6D C3 7C 20    5156                   JP	ZERO
001B70 CD 55 37    5157   BGET:           CALL	CHANEL		;CHANNEL NUMBER
001B73 CD 5D 06    5158                   CALL	OSBGET
001B76 6F          5159                   LD	L,A
001B77 18 59       5160                   JR	COUNT0
001B79 CD 12 1F    5161   INKEY:          CALL	INKEYS
001B7C 18 19       5162                   JR	ASC0
001B7E CD 8F 45    5163   GET:            CALL	NXT
001B81 FE 28       5164                   CP	'('
001B83 20 0A       5165                   JR	NZ,GET0
001B85 CD E4 18    5166                   CALL	ITEMI		;PORT ADDRESS
001B88 D9          5167                   EXX
001B89 44          5168                   LD	B,H
001B8A 4D          5169                   LD	C,L
001B8B ED 68       5170                   IN	L,(C)		;INPUT FROM PORT BC
001B8D 18 43       5171                   JR	COUNT0
001B8F CD B1 1E    5172   GET0:           CALL	GETS
001B92 18 08       5173                   JR	ASC1
001B94 CD ED 18    5174   ASC:            CALL	ITEMS
001B97 AF          5175   ASC0:           XOR	A
001B98 BB          5176                   CP	E
001B99 CA 41 1C    5177                   JP	Z,TRUEev		;NULL STRING
001B9C 2A 00 53    5178   ASC1:           LD	HL,(ACCS)
001B9F 18 31       5179                   JR	COUNT0
001BA1 CD ED 18    5180   LEN:            CALL	ITEMS
001BA4 EB          5181                   EX	DE,HL
001BA5 18 2B       5182                   JR	COUNT0
001BA7 2A DE 55    5183   LOMEMVev:         LD	HL,(LOMEM)
001BAA 18 28       5184                   JR	COUNT1
001BAC 2A E2 55    5185   HIMEMVev:         LD	HL,(HIMEM)
001BAF 18 23       5186                   JR	COUNT1
001BB1 2A DC 55    5187   PAGEVev:          LD	HL,(PAGE_)
001BB4 18 1E       5188                   JR	COUNT1
001BB6 FD 7E 00    5189   TOPV:           LD	A,(IY)
001BB9 FD 23       5190                   INC	IY		;SKIP "P"
001BBB FE 50       5191                   CP	'P'
001BBD C2 64 26    5192                   JP	NZ,SYNTAX	;"Syntax Error"
001BC0 CD A9 40    5193                   CALL	GETTOP
001BC3 18 0F       5194                   JR	COUNT1
001BC5 2A F2 55    5195   ERLV:           LD	HL,(ERL)
001BC8 18 0A       5196                   JR	COUNT1
001BCA 2A FD 55    5197   ERRV:           LD	HL,(ERR)
001BCD 18 03       5198                   JR	COUNT0
001BCF 2A FB 55    5199   COUNTV:         LD	HL,(COUNT)
001BD2 26 00       5200   COUNT0:         LD	H,0
001BD4 D9          5201   COUNT1:         EXX
001BD5 AF          5202                   XOR	A
001BD6 4F          5203                   LD	C,A		;INTEGER MARKER
001BD7 67          5204                   LD	H,A
001BD8 6F          5205                   LD	L,A
001BD9 C9          5206                   RET
001BDA             5207   ;
001BDA             5208   ;OPENIN - Open a file for reading.
001BDA             5209   ;OPENOUT - Open a file for writing.
001BDA             5210   ;OPENUP - Open a file for reading or writing.
001BDA             5211   ;Result is integer channel number (0 if error)
001BDA             5212   ;
001BDA AF          5213   OPENOT:         XOR	A
001BDB 21          5214                   DB	21H		;SKIP NEXT 2 BYTES
001BDC 3E 02       5215   OPENUP:         LD	A,2
001BDE 21          5216                   DB	21H		;SKIP NEXT 2 BYTES
001BDF 3E 01       5217   OPENIN:         LD	A,1
001BE1 F5          5218                   PUSH	AF		;SAVE OPEN TYPE
001BE2 CD ED 18    5219                   CALL	ITEMS		;FILENAME
001BE5 3E 0D       5220                   LD	A,CR
001BE7 12          5221                   LD	(DE),A
001BE8 F1          5222                   POP	AF		;RESTORE OPEN TYPE
001BE9 C6 FF       5223                   ADD	A,-1		;AFFECT FLAGS
001BEB 21 00 53    5224                   LD	HL,ACCS
001BEE CD 46 06    5225                   CALL	OSOPEN
001BF1 6F          5226                   LD	L,A
001BF2 18 DE       5227                   JR	COUNT0
001BF4             5228   ;
001BF4             5229   ;EXT - Return length of file.
001BF4             5230   ;PTR - Return current file pointer.
001BF4             5231   ;Results are integer numeric.
001BF4             5232   ;
001BF4 CD 55 37    5233   EXTev:            CALL	CHANEL
001BF7 CD AF 06    5234                   CALL	GETEXT
001BFA 18 12       5235                   JR	TIME0
001BFC             5236   ;
001BFC CD 55 37    5237   PTRev:            CALL	CHANEL
001BFF CD 78 06    5238                   CALL	GETPTR
001C02 18 0A       5239                   JR	TIME0
001C04             5240   ;
001C04             5241   ;TIME - Return current value of elapsed time.
001C04             5242   ;Result is integer numeric.
001C04             5243   ;
001C04 FD 7E 00    5244   TIMEVev:          LD	A,(IY)
001C07 FE 24       5245                   CP	'$'
001C09 28 09       5246                   JR	Z,TIMEVSev
001C0B CD AD 0D    5247                   CALL	GETIME
001C0E D5          5248   TIME0:          PUSH	DE
001C0F D9          5249                   EXX
001C10 E1          5250                   POP	HL
001C11 AF          5251                   XOR	A
001C12 4F          5252                   LD	C,A
001C13 C9          5253                   RET
001C14             5254   ;
001C14             5255   ;TIME$ - Return date/time string.
001C14             5256   ;Result is string
001C14             5257   ;
001C14 FD 23       5258   TIMEVSev:         INC	IY		;SKIP $
001C16 CD C2 0D    5259                   CALL	GETIMS
001C19 3E 80       5260                   LD	A,80H		;MARK STRING
001C1B C9          5261                   RET
001C1C             5262   ;
001C1C             5263   ;String comparison:
001C1C             5264   ;
001C1C CD 79 20    5265   SLT:            CALL	SCP
001C1F D0          5266                   RET	NC
001C20 18 1F       5267                   JR	TRUEev
001C22             5268   ;
001C22 CD 79 20    5269   SGT:            CALL	SCP
001C25 C8          5270                   RET	Z
001C26 D8          5271                   RET	C
001C27 18 18       5272                   JR	TRUEev
001C29             5273   ;
001C29 CD 79 20    5274   SGE:            CALL	SCP
001C2C D8          5275                   RET	C
001C2D 18 12       5276                   JR	TRUEev
001C2F             5277   ;
001C2F CD 79 20    5278   SLE:            CALL	SCP
001C32 28 0D       5279                   JR	Z,TRUEev
001C34 D0          5280                   RET	NC
001C35 18 0A       5281                   JR	TRUEev
001C37             5282   ;
001C37 CD 79 20    5283   SNE:            CALL	SCP
001C3A C8          5284                   RET	Z
001C3B 18 04       5285                   JR	TRUEev
001C3D             5286   ;
001C3D CD 79 20    5287   SEQ:            CALL	SCP
001C40 C0          5288                   RET	NZ
001C41 3E FF       5289   TRUEev:           LD	A,-1
001C43 D9          5290                   EXX
001C44 67          5291                   LD	H,A
001C45 6F          5292                   LD	L,A
001C46 D9          5293                   EXX
001C47 67          5294                   LD	H,A
001C48 6F          5295                   LD	L,A
001C49 3C          5296                   INC	A
001C4A 4F          5297                   LD	C,A
001C4B C9          5298                   RET
001C4C             5299   ;
001C4C             5300   ;PI - Return PI (3.141592654)
001C4C             5301   ;Result is floating-point numeric.
001C4C             5302   ;
001C4C 3E 23       5303   PIev:             LD	A,35
001C4E 18 43       5304                   JR	FPP1
001C50             5305   ;
001C50             5306   ;ABS - Absolute value
001C50             5307   ;Result is numeric, variable type.
001C50             5308   ;
001C50 3E 10       5309   ABSev:            LD	A,16
001C52 18 3A       5310                   JR	FPPN
001C54             5311   ;
001C54             5312   ;NOT - Complement integer.
001C54             5313   ;Result is integer numeric.
001C54             5314   ;
001C54 3E 1A       5315   CPL_ev:           LD	A,26
001C56 18 36       5316                   JR	FPPN
001C58             5317   ;
001C58             5318   ;DEG - Convert radians to degrees
001C58             5319   ;Result is floating-point numeric.
001C58             5320   ;
001C58 3E 15       5321   DEGev:            LD	A,21
001C5A 18 32       5322                   JR	FPPN
001C5C             5323   ;
001C5C             5324   ;RAD - Convert degrees to radians
001C5C             5325   ;Result is floating-point numeric.
001C5C             5326   ;
001C5C 3E 1B       5327   RADev:            LD	A,27
001C5E 18 2E       5328                   JR	FPPN
001C60             5329   ;
001C60             5330   ;SGN - Return -1, 0 or +1
001C60             5331   ;Result is integer numeric.
001C60             5332   ;
001C60 3E 1C       5333   SGNev:            LD	A,28
001C62 18 2A       5334                   JR	FPPN
001C64             5335   ;
001C64             5336   ;INT - Floor function
001C64             5337   ;Result is integer numeric.
001C64             5338   ;
001C64 3E 17       5339   INT_ev:           LD	A,23
001C66 18 26       5340                   JR	FPPN
001C68             5341   ;
001C68             5342   ;SQR - square root
001C68             5343   ;Result is floating-point numeric.
001C68             5344   ;
001C68 3E 1E       5345   SQRev:            LD	A,30
001C6A 18 22       5346                   JR	FPPN
001C6C             5347   ;
001C6C             5348   ;TAN - Tangent function
001C6C             5349   ;Result is floating-point numeric.
001C6C             5350   ;
001C6C 3E 1F       5351   TANev:            LD	A,31
001C6E 18 1E       5352                   JR	FPPN
001C70             5353   ;
001C70             5354   ;COS - Cosine function
001C70             5355   ;Result is floating-point numeric.
001C70             5356   ;
001C70 3E 14       5357   COSev:            LD	A,20
001C72 18 1A       5358                   JR	FPPN
001C74             5359   ;
001C74             5360   ;SIN - Sine function
001C74             5361   ;Result is floating-point numeric.
001C74             5362   ;
001C74 3E 1D       5363   SINev:            LD	A,29
001C76 18 16       5364                   JR	FPPN
001C78             5365   ;
001C78             5366   ;EXP - Exponential function
001C78             5367   ;Result is floating-point numeric.
001C78             5368   ;
001C78 3E 16       5369   EXPev:            LD	A,22
001C7A 18 12       5370                   JR	FPPN
001C7C             5371   ;
001C7C             5372   ;LN - Natural log.
001C7C             5373   ;Result is floating-point numeric.
001C7C             5374   ;
001C7C 3E 18       5375   LNev:             LD	A,24
001C7E 18 0E       5376                   JR	FPPN
001C80             5377   ;
001C80             5378   ;LOG - base-10 logarithm.
001C80             5379   ;Result is floating-point numeric.
001C80             5380   ;
001C80 3E 19       5381   LOGev:            LD	A,25
001C82 18 0A       5382                   JR	FPPN
001C84             5383   ;
001C84             5384   ;ASN - Arc-sine
001C84             5385   ;Result is floating-point numeric.
001C84             5386   ;
001C84 3E 12       5387   ASNev:            LD	A,18
001C86 18 06       5388                   JR	FPPN
001C88             5389   ;
001C88             5390   ;ATN - arc-tangent
001C88             5391   ;Result is floating-point numeric.
001C88             5392   ;
001C88 3E 13       5393   ATNev:            LD	A,19
001C8A 18 02       5394                   JR	FPPN
001C8C             5395   ;
001C8C             5396   ;ACS - arc-cosine
001C8C             5397   ;Result is floating point numeric.
001C8C             5398   ;
001C8C 3E 11       5399   ACSev:            LD	A,17
001C8E F5          5400   FPPN:           PUSH	AF
001C8F CD FE 18    5401                   CALL	ITEMN
001C92 F1          5402                   POP	AF
001C93 CD 99 45    5403   FPP1:           CALL	FPP
001C96 DA C8 3F    5404                   JP	C,ERROR_
001C99 AF          5405                   XOR	A
001C9A C9          5406                   RET
001C9B             5407   ;
001C9B             5408   ;SFIX - Convert to fixed-point notation
001C9B             5409   ;
001C9B 3E 26       5410   SFIX:           LD	A,38
001C9D 18 F4       5411                   JR	FPP1
001C9F             5412   ;
001C9F             5413   ;SFLOAT - Convert to floating-point notation
001C9F             5414   ;
001C9F 3E 27       5415   SFLOATev:         LD	A,39
001CA1 18 F0       5416                   JR	FPP1
001CA3             5417   ;
001CA3             5418   ;VAL - Return numeric value of string.
001CA3             5419   ;Result is variable type numeric.
001CA3             5420   ;
001CA3 CD ED 18    5421   VALev:            CALL	ITEMS
001CA6 AF          5422   VAL0:           XOR	A
001CA7 12          5423                   LD	(DE),A
001CA8 DD 21 00 53 5424                   LD	IX,ACCS
001CAC 3E 24       5425                   LD	A,36
001CAE 18 E3       5426                   JR	FPP1
001CB0             5427   ;
001CB0             5428   ;EVAL - Pass string to expression evaluator.
001CB0             5429   ;Result is variable type (numeric or string).
001CB0             5430   ;
001CB0 CD ED 18    5431   EVAL_:          CALL	ITEMS
001CB3 3E 0D       5432                   LD	A,CR
001CB5 12          5433                   LD	(DE),A
001CB6 FD E5       5434                   PUSH	IY
001CB8 11 00 53    5435                   LD	DE,ACCS
001CBB FD 21 00 53 5436                   LD	IY,ACCS
001CBF 0E 00       5437                   LD	C,0
001CC1 CD 9C 44    5438                   CALL	LEXAN2		;TOKENISE
001CC4 12          5439                   LD	(DE),A
001CC5 13          5440                   INC	DE
001CC6 AF          5441                   XOR	A
001CC7 CD 9D 20    5442                   CALL	PUSHS		;PUT ON STACK
001CCA FD 21 02 00 5443                   LD	IY,2
001CCE FD 39       5444                   ADD	IY,SP
001CD0 CD 86 17    5445                   CALL	EXPR
001CD3 FD E1       5446                   POP	IY
001CD5 FD 39       5447                   ADD	IY,SP
001CD7 FD F9       5448                   LD	SP,IY		;ADJUST STACK POINTER
001CD9 FD E1       5449                   POP	IY
001CDB 08          5450                   EX	AF,AF'
001CDC C9          5451                   RET
001CDD             5452   ;
001CDD             5453   ;RND - Random number function.
001CDD             5454   ; RND gives random integer 0-&FFFFFFFF
001CDD             5455   ; RND(-n) seeds random number & returns -n.
001CDD             5456   ; RND(0) returns last value in RND(1) form.
001CDD             5457   ; RND(1) returns floating-point 0-0.99999999.
001CDD             5458   ; RND(n) returns random integer 1-n.
001CDD             5459   ;
001CDD DD 21 F6 55 5460   RND:            LD	IX,RANDOM
001CE1 CD 8F 45    5461                   CALL	NXT
001CE4 FE 28       5462                   CP	'('
001CE6 28 1C       5463                   JR	Z,RND5		;ARGUMENT FOLLOWS
001CE8 CD B3 19    5464                   CALL	LOAD5
001CEB CB 19       5465   RND1:           RR	C
001CED 06 20       5466                   LD	B,32
001CEF D9          5467   RND2:           EXX			;CALCULATE NEXT
001CF0 ED 6A       5468                   ADC	HL,HL
001CF2 D9          5469                   EXX
001CF3 ED 6A       5470                   ADC	HL,HL
001CF5 CB 5D       5471                   BIT	3,L
001CF7 28 01       5472                   JR	Z,RND3
001CF9 3F          5473                   CCF
001CFA 10 F3       5474   RND3:           DJNZ	RND2
001CFC CB 11       5475   RND4:           RL	C		;SAVE CARRY
001CFE CD 8A 32    5476                   CALL	STORE5		;STORE NEW NUMBER
001D01 AF          5477                   XOR	A
001D02 4F          5478                   LD	C,A
001D03 C9          5479                   RET
001D04 CD E4 18    5480   RND5:           CALL	ITEMI
001D07 DD 21 F6 55 5481                   LD	IX,RANDOM
001D0B CB 7C       5482                   BIT	7,H		;NEGATIVE?
001D0D 37          5483                   SCF
001D0E 20 EC       5484                   JR	NZ,RND4		;SEED
001D10 CD DD 1F    5485                   CALL	TEST
001D13 F5          5486                   PUSH	AF
001D14 41          5487                   LD	B,C
001D15 EB          5488                   EX	DE,HL
001D16 D9          5489                   EXX
001D17 EB          5490                   EX	DE,HL
001D18 CD B3 19    5491                   CALL	LOAD5
001D1B C4 EB 1C    5492                   CALL	NZ,RND1		;NEXT IF NON-ZERO
001D1E D9          5493                   EXX			;SCRAMBLE (CARE!)
001D1F 0E 7F       5494                   LD	C,7FH
001D21 CB 7C       5495   RND6:           BIT	7,H		;FLOAT
001D23 20 08       5496                   JR	NZ,RND7
001D25 D9          5497                   EXX
001D26 29          5498                   ADD	HL,HL
001D27 D9          5499                   EXX
001D28 ED 6A       5500                   ADC	HL,HL
001D2A 0D          5501                   DEC	C
001D2B 20 F4       5502                   JR	NZ,RND6
001D2D CB BC       5503   RND7:           RES	7,H		;POSITIVE 0-0.999999
001D2F F1          5504                   POP	AF
001D30 C8          5505                   RET	Z		;ZERO ARGUMENT
001D31 D9          5506                   EXX
001D32 7B          5507                   LD	A,E
001D33 3D          5508                   DEC	A
001D34 B2          5509                   OR	D
001D35 D9          5510                   EXX
001D36 B3          5511                   OR	E
001D37 B2          5512                   OR	D
001D38 C8          5513                   RET	Z		;ARGUMENT=1
001D39 06 00       5514                   LD	B,0		;INTEGER MARKER
001D3B 3E 0A       5515                   LD	A,10
001D3D CD 99 45    5516                   CALL	FPP		;MULTIPLY
001D40 DA C8 3F    5517                   JP	C,ERROR_
001D43 CD 9B 1C    5518                   CALL	SFIX
001D46 C3 DA 18    5519                   JP	ADD1ev
001D49             5520   ;
001D49             5521   ;SUMLEN(array())
001D49             5522   ;
001D49 FD 23       5523   SUMLEN:         INC	IY		;Skip LEN
001D4B CD 5B 1A    5524                   CALL	GETARB
001D4E CB 78       5525                   BIT	7,B
001D50 CA F2 18    5526                   JP	Z,MISMATev	;Type mismatch
001D53 CD 28 1A    5527                   CALL	ARRLEN
001D56 E5          5528                   PUSH	HL
001D57 DD E1       5529                   POP	IX		;IX addresses array
001D59 AF          5530                   XOR	A
001D5A 67          5531                   LD	H,A
001D5B 6F          5532                   LD	L,A
001D5C 47          5533                   LD	B,A
001D5D DD 4E 00    5534   SUMLN1:         LD	C,(IX)
001D60 09          5535                   ADD	HL,BC
001D61 0E 04       5536                   LD	C,4
001D63 DD 09       5537                   ADD	IX,BC
001D65 1B          5538                   DEC	DE		;Count elements
001D66 7A          5539                   LD	A,D
001D67 B3          5540                   OR	E
001D68 20 F3       5541                   JR	NZ,SUMLN1
001D6A C3 D4 1B    5542                   JP	COUNT1
001D6D             5543   ;
001D6D             5544   ;SUM(array())
001D6D             5545   ;
001D6D CD 8F 45    5546   SUM:            CALL	NXT
001D70 FE A9       5547                   CP	TLEN
001D72 28 D5       5548                   JR	Z,SUMLEN
001D74 CD 5B 1A    5549                   CALL	GETARB
001D77 CB 78       5550                   BIT	7,B
001D79 20 27       5551                   JR	NZ,SUMSTR
001D7B C5          5552                   PUSH	BC
001D7C CD 28 1A    5553                   CALL	ARRLEN
001D7F E5          5554                   PUSH	HL
001D80 DD E1       5555                   POP	IX		;IX addresses array
001D82 CD 7C 20    5556                   CALL	ZERO
001D85 F1          5557                   POP	AF		;A = element size
001D86 D5          5558   SUMUP:          PUSH	DE
001D87 F5          5559                   PUSH	AF
001D88 CD 6B 1A    5560                   CALL	DLOADN
001D8B 3E 0B       5561                   LD	A,11
001D8D CD 99 45    5562                   CALL	FPP
001D90 DA C8 3F    5563                   JP	C,ERROR_
001D93 F1          5564                   POP	AF
001D94 16 00       5565                   LD	D,0
001D96 5F          5566                   LD	E,A
001D97 DD 19       5567                   ADD	IX,DE		;Bump to next element
001D99 D1          5568                   POP	DE
001D9A 1B          5569                   DEC	DE		;Count elements
001D9B 47          5570                   LD	B,A
001D9C 7A          5571                   LD	A,D
001D9D B3          5572                   OR	E
001D9E 78          5573                   LD	A,B
001D9F 20 E5       5574                   JR	NZ,SUMUP
001DA1 C9          5575                   RET
001DA2             5576   ;
001DA2             5577   ;SUM(string array)
001DA2             5578   ;
001DA2 CD 28 1A    5579   SUMSTR:         CALL	ARRLEN
001DA5 E5          5580                   PUSH	HL
001DA6 DD E1       5581                   POP	IX		;IX addresses array
001DA8 EB          5582                   EX	DE,HL
001DA9 11 00 53    5583                   LD	DE,ACCS
001DAC 06 00       5584                   LD	B,0
001DAE E5          5585   SUMST1:         PUSH	HL
001DAF DD 4E 00    5586                   LD	C,(IX)
001DB2 79          5587                   LD	A,C
001DB3 B7          5588                   OR	A
001DB4 28 0E       5589                   JR	Z,SUMST2
001DB6 83          5590                   ADD	A,E
001DB7 3E 13       5591                   LD	A,19
001DB9 DA C8 3F    5592                   JP	C,ERROR_		;"String too long"
001DBC DD 6E 02    5593                   LD	L,(IX+2)
001DBF DD 66 03    5594                   LD	H,(IX+3)
001DC2 ED B0       5595                   LDIR
001DC4 E1          5596   SUMST2:         POP	HL
001DC5 0E 04       5597                   LD	C,4
001DC7 DD 09       5598                   ADD	IX,BC
001DC9 2B          5599                   DEC	HL		;Count elements
001DCA 7C          5600                   LD	A,H
001DCB B5          5601                   OR	L
001DCC 20 E0       5602                   JR	NZ,SUMST1
001DCE F6 80       5603                   OR	80H
001DD0 C9          5604                   RET
001DD1             5605   ;
001DD1             5606   ;MOD(array())
001DD1             5607   ;
001DD1 CD 5B 1A    5608   MODFUN:         CALL	GETARB
001DD4 CB 78       5609                   BIT	7,B
001DD6 C2 F2 18    5610                   JP	NZ,MISMATev
001DD9 C5          5611                   PUSH	BC
001DDA CD 28 1A    5612                   CALL	ARRLEN
001DDD E5          5613                   PUSH	HL
001DDE DD E1       5614                   POP	IX		;IX addresses array
001DE0 CD 7C 20    5615                   CALL	ZERO
001DE3 F1          5616                   POP	AF		;A = element size
001DE4 D5          5617   MODUP:          PUSH	DE
001DE5 F5          5618                   PUSH	AF
001DE6 C5          5619                   PUSH	BC
001DE7 E5          5620                   PUSH	HL
001DE8 D9          5621                   EXX
001DE9 E5          5622                   PUSH	HL
001DEA D9          5623                   EXX
001DEB CD A9 19    5624                   CALL	LOADN
001DEE AF          5625                   XOR	A
001DEF 47          5626                   LD	B,A
001DF0 57          5627                   LD	D,A
001DF1 5F          5628                   LD	E,A
001DF2 D9          5629                   EXX
001DF3 57          5630                   LD	D,A
001DF4 1E 02       5631                   LD	E,2
001DF6 D9          5632                   EXX
001DF7 3E 0E       5633                   LD	A,14
001DF9 DD E5       5634                   PUSH	IX
001DFB CD 99 45    5635                   CALL	FPP		;Square
001DFE DD E1       5636                   POP	IX
001E00 DA C8 3F    5637                   JP	C,ERROR_
001E03 D9          5638                   EXX
001E04 EB          5639                   EX	DE,HL
001E05 E1          5640                   POP	HL
001E06 D9          5641                   EXX
001E07 EB          5642                   EX	DE,HL
001E08 E1          5643                   POP	HL
001E09 79          5644                   LD	A,C
001E0A C1          5645                   POP	BC
001E0B 47          5646                   LD	B,A
001E0C 3E 0B       5647                   LD	A,11
001E0E CD 99 45    5648                   CALL	FPP		;Accumulate
001E11 DA C8 3F    5649                   JP	C,ERROR_
001E14 F1          5650                   POP	AF
001E15 16 00       5651                   LD	D,0
001E17 5F          5652                   LD	E,A
001E18 DD 19       5653                   ADD	IX,DE		;Bump to next element
001E1A D1          5654                   POP	DE
001E1B 1B          5655                   DEC	DE		;Count elements
001E1C 47          5656                   LD	B,A
001E1D 7A          5657                   LD	A,D
001E1E B3          5658                   OR	E
001E1F 78          5659                   LD	A,B
001E20 20 C2       5660                   JR	NZ,MODUP
001E22 3E 1E       5661                   LD	A,30
001E24 CD 99 45    5662                   CALL	FPP		;Square root
001E27 AF          5663                   XOR	A
001E28 C9          5664                   RET
001E29             5665   ;
001E29             5666   ;INSTR - String search.
001E29             5667   ;Result is integer numeric.
001E29             5668   ;
001E29 CD C0 18    5669   INSTR:          CALL	EXPRS		;STRING TO SEARCH
001E2C CD 26 21    5670                   CALL	COMMA
001E2F CD 9D 20    5671                   CALL	PUSHS		;SAVE STRING ON STACK
001E32 CD C0 18    5672                   CALL	EXPRS		;SUB-STRING
001E35 C1          5673                   POP	BC
001E36 21 00 00    5674                   LD	HL,0
001E39 39          5675                   ADD	HL,SP		;HL ADDRESSES MAIN
001E3A C5          5676                   PUSH	BC		;C = MAIN STRING LENGTH
001E3B 43          5677                   LD	B,E		;B = SUB-STRING LENGTH
001E3C CD 8F 45    5678                   CALL	NXT
001E3F FE 2C       5679                   CP	','
001E41 3E 00       5680                   LD	A,0
001E43 20 17       5681                   JR	NZ,INSTR1
001E45 FD 23       5682                   INC	IY		;SKIP COMMA
001E47 C5          5683                   PUSH	BC		;SAVE LENGTHS
001E48 E5          5684                   PUSH	HL		;SAVE MAIN ADDRESS
001E49 CD 9D 20    5685                   CALL	PUSHS
001E4C CD B7 18    5686                   CALL	EXPRI
001E4F C1          5687                   POP	BC
001E50 CD BB 20    5688                   CALL	POPS
001E53 E1          5689                   POP	HL		;RESTORE MAIN ADDRESS
001E54 C1          5690                   POP	BC		;RESTORE LENGTHS
001E55 D9          5691                   EXX
001E56 7D          5692                   LD	A,L
001E57 D9          5693                   EXX
001E58 B7          5694                   OR	A
001E59 28 01       5695                   JR	Z,INSTR1
001E5B 3D          5696                   DEC	A
001E5C 11 00 53    5697   INSTR1:         LD	DE,ACCS		;DE ADDRESSES SUB
001E5F CD 76 1E    5698                   CALL	SEARCH
001E62 D1          5699                   POP	DE
001E63 28 03       5700                   JR	Z,INSTR2	;N.B. CARRY CLEARED
001E65 ED 62       5701                   SBC	HL,HL
001E67 39          5702                   ADD	HL,SP
001E68 ED 72       5703   INSTR2:         SBC	HL,SP
001E6A EB          5704                   EX	DE,HL
001E6B 26 00       5705                   LD	H,0
001E6D 39          5706                   ADD	HL,SP
001E6E F9          5707                   LD	SP,HL
001E6F EB          5708                   EX	DE,HL
001E70 CD 32 21    5709                   CALL	BRAKET
001E73 C3 D4 1B    5710                   JP	COUNT1
001E76             5711   ;
001E76             5712   ;SEARCH - Search string for sub-string
001E76             5713   ;   Inputs: Main string at HL length C
001E76             5714   ;           Sub-string at DE length B
001E76             5715   ;           Starting offset A
001E76             5716   ;  Outputs: NZ - not found
001E76             5717   ;           Z - found at location HL-1
001E76             5718   ;           Carry always cleared
001E76             5719   ;
001E76 C5          5720   SEARCH:         PUSH	BC
001E77 06 00       5721                   LD	B,0
001E79 4F          5722                   LD	C,A
001E7A 09          5723                   ADD	HL,BC		;NEW START ADDRESS
001E7B C1          5724                   POP	BC
001E7C 91          5725                   SUB	C
001E7D 30 28       5726                   JR	NC,SRCH4
001E7F ED 44       5727                   NEG
001E81 4F          5728                   LD	C,A		;REMAINING LENGTH
001E82 1A          5729   SRCH1ev:          LD	A,(DE)
001E83 C5          5730                   PUSH	BC
001E84 06 00       5731                   LD	B,0
001E86 ED B1       5732                   CPIR			;FIND FIRST CHARACTER
001E88 79          5733                   LD	A,C
001E89 C1          5734                   POP	BC
001E8A 20 1B       5735                   JR	NZ,SRCH4
001E8C 4F          5736                   LD	C,A
001E8D 05          5737                   DEC	B		;Bug fix
001E8E B8          5738                   CP	B		;Bug fix
001E8F 04          5739                   INC	B		;Bug fix
001E90 38 15       5740                   JR	C,SRCH4		;Bug fix
001E92 C5          5741                   PUSH	BC
001E93 D5          5742                   PUSH	DE
001E94 E5          5743                   PUSH	HL
001E95 05          5744                   DEC	B
001E96 28 08       5745                   JR	Z,SRCH3		;FOUND !
001E98 13          5746   SRCH2ev:          INC	DE
001E99 1A          5747                   LD	A,(DE)
001E9A BE          5748                   CP	(HL)
001E9B 20 03       5749                   JR	NZ,SRCH3
001E9D 23          5750                   INC	HL
001E9E 10 F8       5751                   DJNZ	SRCH2ev
001EA0 E1          5752   SRCH3:          POP	HL
001EA1 D1          5753                   POP	DE
001EA2 C1          5754                   POP	BC
001EA3 20 DD       5755                   JR	NZ,SRCH1ev
001EA5 AF          5756                   XOR	A		;Z, NC
001EA6 C9          5757                   RET			;FOUND
001EA7             5758   ;
001EA7 F6 FF       5759   SRCH4:          OR	0FFH		;NZ, NC
001EA9 C9          5760                   RET			;NOT FOUND
001EAA             5761   ;
001EAA             5762   ;CHR$ - Return character with given ASCII value.
001EAA             5763   ;Result is string.
001EAA             5764   ;
001EAA CD E4 18    5765   CHRS:           CALL	ITEMI
001EAD D9          5766                   EXX
001EAE 7D          5767                   LD	A,L
001EAF 18 0A       5768                   JR	GET1
001EB1             5769   ;
001EB1             5770   ;GET$ - Return key pressed as string, or read from file
001EB1             5771   ;Result is string.
001EB1             5772   ;
001EB1 CD 8F 45    5773   GETS:           CALL	NXT
001EB4 FE 23       5774                   CP	'#'
001EB6 28 06       5775                   JR	Z,GET2
001EB8 CD C4 05    5776                   CALL	OSRDCH
001EBB 37          5777   GET1:           SCF
001EBC 18 5B       5778                   JR	INKEY1
001EBE             5779   ;
001EBE CD 5F 37    5780   GET2:           CALL	CHNL		;File channel
001EC1 CD 8F 45    5781                   CALL	NXT
001EC4 FE 0F       5782                   CP	TBY
001EC6 28 04       5783                   JR	Z,GET3
001EC8 FE B8       5784                   CP	TTO
001ECA 20 0C       5785                   JR	NZ,GET4
001ECC FD 23       5786   GET3:           INC	IY
001ECE F5          5787                   PUSH	AF
001ECF D5          5788                   PUSH	DE
001ED0 CD E4 18    5789                   CALL	ITEMI		;Get BY or TO qualifier
001ED3 D9          5790                   EXX
001ED4 44          5791                   LD	B,H
001ED5 4D          5792                   LD	C,L
001ED6 D1          5793                   POP	DE
001ED7 F1          5794                   POP	AF
001ED8 21 00 53    5795   GET4:           LD	HL,ACCS
001EDB FE B8       5796                   CP	TTO
001EDD 28 08       5797                   JR	Z,GET5
001EDF 51          5798                   LD	D,C		;Maximum count
001EE0 01 00 01    5799                   LD	BC,100H		;Default
001EE3 FE 0F       5800                   CP	TBY
001EE5 28 04       5801                   JR	Z,GET6
001EE7 16 00       5802   GET5:           LD	D,0
001EE9 CB C8       5803                   SET	1,B		;Flag no count
001EEB C5          5804   GET6:           PUSH	BC
001EEC CD 5D 06    5805                   CALL	OSBGET
001EEF C1          5806                   POP	BC
001EF0 38 1C       5807                   JR	C,GET9		;EOF
001EF2 CB 48       5808                   BIT	1,B
001EF4 28 13       5809                   JR	Z,GET8
001EF6 B9          5810                   CP	C
001EF7 28 15       5811                   JR	Z,GET9		;NUL (or supplied term)
001EF9 CB 78       5812                   BIT	7,B
001EFB 20 08       5813                   JR	NZ,GET7
001EFD CB 40       5814                   BIT	0,B
001EFF 28 08       5815                   JR	Z,GET8
001F01 FE 0A       5816                   CP	LF
001F03 28 09       5817                   JR	Z,GET9		;LF
001F05 FE 0D       5818   GET7:           CP	CR
001F07 28 05       5819                   JR	Z,GET9		;CR
001F09 77          5820   GET8:           LD	(HL),A
001F0A 2C          5821                   INC	L
001F0B 15          5822                   DEC	D
001F0C 20 DD       5823                   JR	NZ,GET6
001F0E EB          5824   GET9:           EX	DE,HL
001F0F 3E 80       5825                   LD	A,80H
001F11 C9          5826                   RET
001F12             5827   ;
001F12             5828   ;INKEY$ - Wait up to n centiseconds for keypress.
001F12             5829   ; Return key pressed as string or null
001F12             5830   ; string if time elapsed.
001F12             5831   ;Result is string.
001F12             5832   ;
001F12 CD E4 18    5833   INKEYS:         CALL	ITEMI
001F15 D9          5834                   EXX
001F16 CD 15 0E    5835                   CALL	OSKEY
001F19 11 00 53    5836   INKEY1:         LD	DE,ACCS
001F1C 12          5837                   LD	(DE),A
001F1D 3E 80       5838                   LD	A,80H
001F1F D0          5839                   RET	NC
001F20 1C          5840                   INC	E
001F21 C9          5841                   RET
001F22             5842   ;
001F22             5843   ;MID$ - Return sub-string.
001F22             5844   ;Result is string.
001F22             5845   ;
001F22 CD C0 18    5846   MIDS:           CALL	EXPRS
001F25 CD 26 21    5847                   CALL	COMMA
001F28 CD 9D 20    5848                   CALL	PUSHS		;SAVE STRING ON STACK
001F2B CD B7 18    5849                   CALL	EXPRI
001F2E C1          5850                   POP	BC
001F2F CD BB 20    5851                   CALL	POPS
001F32 D9          5852                   EXX
001F33 7D          5853                   LD	A,L
001F34 D9          5854                   EXX
001F35 B7          5855                   OR	A
001F36 28 0D       5856                   JR	Z,MIDS1
001F38 3D          5857                   DEC	A
001F39 6F          5858                   LD	L,A
001F3A 93          5859                   SUB	E
001F3B 1E 00       5860                   LD	E,0
001F3D 30 06       5861                   JR	NC,MIDS1
001F3F ED 44       5862                   NEG
001F41 4F          5863                   LD	C,A
001F42 CD A1 1F    5864                   CALL	RIGHT1
001F45 CD 8F 45    5865   MIDS1:          CALL	NXT
001F48 FE 2C       5866                   CP	','
001F4A 28 1A       5867                   JR	Z,LEFT1
001F4C CD 32 21    5868                   CALL	BRAKET
001F4F 3E 80       5869                   LD	A,80H
001F51 C9          5870                   RET
001F52             5871   ;
001F52             5872   ;LEFT$ - Return left part of string.
001F52             5873   ;Carry cleared if entire string returned.
001F52             5874   ;Result is string.
001F52             5875   ;
001F52 CD C0 18    5876   LEFTS:          CALL	EXPRS
001F55 CD 8F 45    5877                   CALL	NXT
001F58 FE 2C       5878                   CP	','
001F5A 28 0A       5879                   JR	Z,LEFT1
001F5C CD 32 21    5880                   CALL	BRAKET
001F5F 7B          5881                   LD	A,E
001F60 B7          5882                   OR	A
001F61 28 1A       5883                   JR	Z,LEFT3
001F63 1D          5884                   DEC	E
001F64 18 17       5885                   JR	LEFT3
001F66             5886   ;
001F66 FD 23       5887   LEFT1:          INC	IY
001F68 CD 9D 20    5888                   CALL	PUSHS		;SAVE STRING ON STACK
001F6B CD B7 18    5889                   CALL	EXPRI
001F6E C1          5890                   POP	BC
001F6F CD BB 20    5891                   CALL	POPS
001F72 CD 32 21    5892                   CALL	BRAKET
001F75 D9          5893                   EXX
001F76 7D          5894                   LD	A,L
001F77 D9          5895                   EXX
001F78 BB          5896                   CP	E
001F79 30 02       5897                   JR	NC,LEFT3
001F7B 6B          5898                   LD	L,E		;FOR RIGHT$
001F7C 5F          5899   LEFT2:          LD	E,A
001F7D 3E 80       5900   LEFT3:          LD	A,80H		;STRING MARKER
001F7F C9          5901                   RET
001F80             5902   ;
001F80             5903   ;RIGHT$ - Return right part of string.
001F80             5904   ;Result is string.
001F80             5905   ;
001F80 CD C0 18    5906   RIGHTS:         CALL	EXPRS
001F83 CD 8F 45    5907                   CALL	NXT
001F86 FE 2C       5908                   CP	','
001F88 28 0C       5909                   JR	Z,RIGHT0
001F8A CD 32 21    5910                   CALL	BRAKET
001F8D 7B          5911                   LD	A,E
001F8E B7          5912                   OR	A
001F8F 28 EC       5913                   JR	Z,LEFT3
001F91 3D          5914                   DEC	A
001F92 0E 01       5915                   LD	C,1
001F94 18 0A       5916                   JR	RIGHT2
001F96             5917   ;
001F96 CD 66 1F    5918   RIGHT0:         CALL	LEFT1
001F99 D0          5919                   RET	NC
001F9A 1C          5920                   INC	E
001F9B 1D          5921                   DEC	E
001F9C C8          5922                   RET	Z
001F9D 4B          5923                   LD	C,E
001F9E 7D          5924                   LD	A,L
001F9F 93          5925                   SUB	E
001FA0 6F          5926   RIGHT2:         LD	L,A
001FA1 06 00       5927   RIGHT1:         LD	B,0
001FA3 62          5928                   LD	H,D
001FA4 58          5929                   LD	E,B
001FA5 ED B0       5930                   LDIR			;MOVE
001FA7 3E 80       5931                   LD	A,80H
001FA9 C9          5932                   RET
001FAA             5933   ;
001FAA             5934   ;STRING$ - Return n concatenations of a string.
001FAA             5935   ;Result is string.
001FAA             5936   ;
001FAA CD B7 18    5937   STRING_:        CALL	EXPRI
001FAD CD 26 21    5938                   CALL	COMMA
001FB0 D9          5939                   EXX
001FB1 7D          5940                   LD	A,L
001FB2 D9          5941                   EXX
001FB3 F5          5942                   PUSH	AF
001FB4 CD C0 18    5943                   CALL	EXPRS
001FB7 CD 32 21    5944                   CALL	BRAKET
001FBA F1          5945                   POP	AF
001FBB B7          5946                   OR	A
001FBC 28 BE       5947                   JR	Z,LEFT2		;N=0
001FBE 3D          5948                   DEC	A
001FBF 4F          5949                   LD	C,A
001FC0 3E 80       5950                   LD	A,80H		;STRING MARKER
001FC2 C8          5951                   RET	Z
001FC3 1C          5952                   INC	E
001FC4 1D          5953                   DEC	E
001FC5 C8          5954                   RET	Z		;NULL STRING
001FC6 43          5955                   LD	B,E
001FC7 62          5956                   LD	H,D
001FC8 2E 00       5957                   LD	L,0
001FCA C5          5958   STRIN1:         PUSH	BC
001FCB 7E          5959   STRIN2:         LD	A,(HL)
001FCC 23          5960                   INC	HL
001FCD 12          5961                   LD	(DE),A
001FCE 1C          5962                   INC	E
001FCF 3E 13       5963                   LD	A,19
001FD1 CA C8 3F    5964                   JP	Z,ERROR_		;"String too long"
001FD4 10 F5       5965                   DJNZ	STRIN2
001FD6 C1          5966                   POP	BC
001FD7 0D          5967                   DEC	C
001FD8 20 F0       5968                   JR	NZ,STRIN1
001FDA 3E 80       5969                   LD	A,80H
001FDC C9          5970                   RET
001FDD             5971   ;
001FDD             5972   ;SUBROUTINES
001FDD             5973   ;
001FDD             5974   ;TEST - Test HLH'L' for zero
001FDD             5975   ;  Outputs: Z-flag set & A=0 if zero
001FDD             5976   ; Destroys: A,F
001FDD             5977   ;
001FDD 7C          5978   TEST:           LD	A,H
001FDE B5          5979                   OR	L
001FDF D9          5980                   EXX
001FE0 B4          5981                   OR	H
001FE1 B5          5982                   OR	L
001FE2 D9          5983                   EXX
001FE3 C9          5984                   RET
001FE4             5985   ;
001FE4             5986   ;DECODE - Decode line number in pseudo-binary.
001FE4             5987   ;   Inputs: IY = Text pointer.
001FE4             5988   ;  Outputs: HL=0, H'L'=line number, C=0.
001FE4             5989   ; Destroys: A,C,H,L,H',L',IY,F
001FE4             5990   ;
001FE4 D9          5991   DECODE:         EXX
001FE5 FD 7E 00    5992                   LD	A,(IY)
001FE8 FD 23       5993                   INC	IY
001FEA 17          5994                   RLA
001FEB 17          5995                   RLA
001FEC 67          5996                   LD	H,A
001FED E6 C0       5997                   AND	0C0H
001FEF FD AE 00    5998                   XOR	(IY)
001FF2 FD 23       5999                   INC	IY
001FF4 6F          6000                   LD	L,A
001FF5 7C          6001                   LD	A,H
001FF6 17          6002                   RLA
001FF7 17          6003                   RLA
001FF8 E6 C0       6004                   AND	0C0H
001FFA FD AE 00    6005                   XOR	(IY)
001FFD FD 23       6006                   INC	IY
001FFF 67          6007                   LD	H,A
002000 D9          6008                   EXX
002001 AF          6009                   XOR	A
002002 4F          6010                   LD	C,A
002003 67          6011                   LD	H,A
002004 6F          6012                   LD	L,A
002005 C9          6013                   RET
002006             6014   ;
002006             6015   ;HEXSTR - convert numeric value to HEX string.
002006             6016   ;   Inputs: HLH'L'C = integer or floating-point number
002006             6017   ;  Outputs: String in string accumulator.
002006             6018   ;           E = string length. D = ACCS/256
002006             6019   ;
002006 FD 23       6020   HEXSTS:         INC	IY		;SKIP TILDE
002008 CD FE 18    6021                   CALL	ITEMN
00200B CD 11 20    6022                   CALL	HEXSTR
00200E 3E 80       6023                   LD	A,80H
002010 C9          6024                   RET
002011             6025   ;
002011 CD 9B 1C    6026   HEXSTR:         CALL	SFIX
002014 01 08 00    6027                   LD	BC,8
002017 11 00 53    6028                   LD	DE,ACCS
00201A C5          6029   HEXST1:         PUSH	BC
00201B 06 04       6030                   LD	B,4
00201D AF          6031                   XOR	A
00201E D9          6032   HEXST2:         EXX
00201F 29          6033                   ADD	HL,HL
002020 D9          6034                   EXX
002021 ED 6A       6035                   ADC	HL,HL
002023 17          6036                   RLA
002024 10 F8       6037                   DJNZ	HEXST2
002026 C1          6038                   POP	BC
002027 0D          6039                   DEC	C
002028 F8          6040                   RET	M
002029 28 06       6041                   JR	Z,HEXST3
00202B B7          6042                   OR	A
00202C 20 03       6043                   JR	NZ,HEXST3
00202E B8          6044                   CP	B
00202F 28 E9       6045                   JR	Z,HEXST1
002031 C6 90       6046   HEXST3:         ADD	A,90H
002033 27          6047                   DAA
002034 CE 40       6048                   ADC	A,40H
002036 27          6049                   DAA
002037 12          6050                   LD	(DE),A
002038 13          6051                   INC	DE
002039 47          6052                   LD	B,A
00203A 18 DE       6053                   JR	HEXST1
00203C             6054   ;
00203C             6055   ;Function STR - convert numeric value to ASCII string.
00203C             6056   ;   Inputs: HLH'L'C = integer or floating-point number.
00203C             6057   ;  Outputs: String in string accumulator.
00203C             6058   ;           E = length, D = ACCS/256
00203C             6059   ;           A = 80H (type=string)
00203C             6060   ;
00203C             6061   ;First normalise for decimal output:
00203C             6062   ;
00203C CD 8F 45    6063   STRS:           CALL	NXT
00203F FE 7E       6064                   CP	'~'
002041 28 C3       6065                   JR	Z,HEXSTS
002043 CD FE 18    6066                   CALL	ITEMN
002046 DD 21 00 55 6067                   LD	IX,STAVAR
00204A DD 7E 03    6068                   LD	A,(IX+3)
00204D B7          6069                   OR	A
00204E DD 21 76 20 6070                   LD	IX,G9-1		;G9 FORMAT
002052 28 04       6071                   JR	Z,STR0
002054 DD 21 00 55 6072   STR:            LD	IX,STAVAR
002058 11 00 53    6073   STR0:           LD	DE,ACCS
00205B 3E 25       6074                   LD	A,37
00205D CD 99 45    6075                   CALL	FPP
002060 DA C8 3F    6076                   JP	C,ERROR_
002063 DD CB 02 46 6077                   BIT	0,(IX+2)
002067 3E 80       6078   STR1:           LD	A,80H		;STRING MARKER
002069 C8          6079                   RET	Z
00206A 79          6080                   LD	A,C
00206B C6 04       6081                   ADD	A,4
00206D BB          6082   STR2:           CP	E
00206E 28 F7       6083                   JR	Z,STR1
002070 EB          6084                   EX	DE,HL
002071 36 20       6085                   LD	(HL),' '	;TRAILING SPACE
002073 23          6086                   INC	HL
002074 EB          6087                   EX	DE,HL
002075 18 F6       6088                   JR	STR2
002077             6089   ;
002077 09 00       6090   G9:             DW	9
002079             6091   ;
002079             6092   ;STRING COMPARE
002079             6093   ;Compare string (DE) length B with string (HL) length C.
002079             6094   ;Result preset to false.
002079             6095   ;
002079 CD 86 20    6096   SCP:            CALL	SCP0
00207C 3E 00       6097   ZERO:           LD	A,0
00207E D9          6098                   EXX
00207F 67          6099                   LD	H,A
002080 6F          6100                   LD	L,A
002081 D9          6101                   EXX
002082 67          6102                   LD	H,A
002083 6F          6103                   LD	L,A
002084 4F          6104                   LD	C,A
002085 C9          6105                   RET
002086             6106   ;
002086 04          6107   SCP0:           INC	B
002087 0C          6108                   INC	C
002088 05          6109   SCP1:           DEC	B
002089 28 0A       6110                   JR	Z,SCP2
00208B 0D          6111                   DEC	C
00208C 28 0C       6112                   JR	Z,SCP3
00208E 1A          6113                   LD	A,(DE)
00208F BE          6114                   CP	(HL)
002090 C0          6115                   RET	NZ
002091 13          6116                   INC	DE
002092 23          6117                   INC	HL
002093 18 F3       6118                   JR	SCP1
002095 B7          6119   SCP2:           OR	A
002096 0D          6120                   DEC	C
002097 C8          6121                   RET	Z
002098 37          6122                   SCF
002099 C9          6123                   RET
00209A B7          6124   SCP3:           OR	A
00209B 0C          6125                   INC	C
00209C C9          6126                   RET
00209D             6127   ;
00209D             6128   ;PUSH$ - SAVE STRING ON STACK.
00209D             6129   ;   Inputs: String in string accumulator.
00209D             6130   ;           E = string length.
00209D             6131   ;           A - saved on stack.
00209D             6132   ; Destroys: B,C,D,E,H,L,IX,SP,F
00209D             6133   ;
00209D 21 00 53    6134   PUSHS:          LD	HL,ACCS
0020A0 CD 0A 33    6135                   CALL	CHECK
0020A3 DD E1       6136                   POP	IX		;RETURN ADDRESS
0020A5 B7          6137                   OR	A		;CLEAR CARRY
0020A6 54          6138                   LD	D,H
0020A7 4B          6139                   LD	C,E
0020A8 ED 52       6140                   SBC	HL,DE
0020AA 39          6141                   ADD	HL,SP
0020AB F9          6142                   LD	SP,HL
0020AC 47          6143                   LD	B,A
0020AD C5          6144                   PUSH	BC
0020AE 28 09       6145                   JR	Z,PUSHS1	;ZERO LENGTH
0020B0 EB          6146                   EX	DE,HL
0020B1 06 00       6147                   LD	B,0
0020B3 68          6148                   LD	L,B		;L=0
0020B4 ED B0       6149                   LDIR			;COPY TO STACK
0020B6 CD 0A 33    6150                   CALL	CHECK
0020B9 DD E9       6151   PUSHS1:         JP	(IX)		;"RETURN"
0020BB             6152   ;
0020BB             6153   ;POP$ - RESTORE STRING FROM STACK.
0020BB             6154   ;   Inputs: C = string length.
0020BB             6155   ;  Outputs: String in string accumulator.
0020BB             6156   ;           E = string length.
0020BB             6157   ; Destroys: B,C,D,E,H,L,IX,SP,F
0020BB             6158   ;
0020BB DD E1       6159   POPS:           POP	IX		;RETURN ADDRESS
0020BD 21 00 00    6160                   LD	HL,0
0020C0 44          6161                   LD	B,H		;B=0
0020C1 39          6162                   ADD	HL,SP
0020C2 11 00 53    6163                   LD	DE,ACCS
0020C5 0C          6164                   INC	C
0020C6 0D          6165                   DEC	C
0020C7 28 02       6166                   JR	Z,POPS1		;ZERO LENGTH
0020C9 ED B0       6167                   LDIR			;COPY FROM STACK
0020CB F9          6168   POPS1:          LD	SP,HL
0020CC DD E9       6169                   JP	(IX)		;"RETURN"
0020CE             6170   ;
0020CE FD 7E 00    6171   BINDIG:         LD	A,(IY)
0020D1 FE 30       6172                   CP	'0'
0020D3 D8          6173                   RET	C
0020D4 FE 32       6174                   CP	'1'+1
0020D6 3F          6175                   CCF
0020D7 D8          6176                   RET	C
0020D8 D6 30       6177                   SUB	'0'
0020DA C9          6178                   RET
0020DB             6179   ;
0020DB FD 7E 00    6180   HEXDIG:         LD	A,(IY)
0020DE FE 30       6181                   CP	'0'
0020E0 D8          6182                   RET	C
0020E1 FE 3A       6183                   CP	'9'+1
0020E3 3F          6184                   CCF
0020E4 D0          6185                   RET	NC
0020E5 FE 41       6186                   CP	'A'
0020E7 D8          6187                   RET	C
0020E8 D6 37       6188                   SUB	'A'-10
0020EA FE 10       6189                   CP	16
0020EC 3F          6190                   CCF
0020ED C9          6191                   RET
0020EE             6192   ;
0020EE FE 3E       6193   RELOPQ:         CP	'>'
0020F0 D0          6194                   RET	NC
0020F1 FE 3D       6195                   CP	'='
0020F3 D0          6196                   RET	NC
0020F4 FE 3C       6197                   CP	'<'
0020F6 C9          6198                   RET
0020F7             6199   ;
0020F7 FD 23       6200   SAVEev:           INC	IY
0020F9 E6 0F       6201                   AND	0FH
0020FB 08          6202   SAVE1:          EX	AF,AF'
0020FC FA F2 18    6203                   JP	M,MISMATev
0020FF 08          6204                   EX	AF,AF'
002100 E3          6205                   EX	(SP),HL
002101 D9          6206                   EXX
002102 E5          6207                   PUSH	HL
002103 D9          6208                   EXX
002104 F5          6209                   PUSH	AF
002105 C5          6210                   PUSH	BC
002106 E9          6211                   JP	(HL)
002107             6212   ;
002107 08          6213   DOIT:           EX	AF,AF'
002108 FA F2 18    6214                   JP	M,MISMATev
00210B D9          6215                   EXX
00210C C1          6216                   POP	BC		;RETURN ADDRESS
00210D D9          6217                   EXX
00210E 79          6218                   LD	A,C
00210F C1          6219                   POP	BC
002110 47          6220                   LD	B,A
002111 F1          6221                   POP	AF		;OPERATOR
002112 D9          6222                   EXX
002113 EB          6223                   EX	DE,HL
002114 E1          6224                   POP	HL
002115 D9          6225                   EXX
002116 EB          6226                   EX	DE,HL
002117 E1          6227                   POP	HL
002118 D9          6228                   EXX
002119 C5          6229                   PUSH	BC
00211A D9          6230                   EXX
00211B CD 99 45    6231                   CALL	FPP
00211E 38 1C       6232                   JR	C,ERROR1ev
002120 AF          6233                   XOR	A
002121 08          6234                   EX	AF,AF'		;TYPE
002122 FD 7E 00    6235                   LD	A,(IY)
002125 C9          6236                   RET
002126             6237   ;
002126 CD 8F 45    6238   COMMA:          CALL	NXT
002129 FD 23       6239                   INC	IY
00212B FE 2C       6240                   CP	','
00212D C8          6241                   RET	Z
00212E 3E 05       6242                   LD	A,5
002130 18 0A       6243                   JR	ERROR1ev		;"Missing ,"
002132             6244   ;
002132 CD 8F 45    6245   BRAKET:         CALL	NXT
002135 FD 23       6246                   INC	IY
002137 FE 29       6247                   CP	')'
002139 C8          6248                   RET	Z
00213A 3E 1B       6249                   LD	A,27
00213C C3 C8 3F    6250   ERROR1ev:         JP	ERROR_		;"Missing )"
00213F             6251   ;
00213F E5          6252   DISPT2:         PUSH	HL
002140 21 7A 17    6253                   LD	HL,SOPTBL
002143 18 06       6254                   JR	DISPT0
002145             6255   ;
002145 E5          6256   DISPATev:         PUSH	HL
002146 D6 8D       6257                   SUB	FUNTOK
002148 21 06 17    6258                   LD	HL,FUNTBL
00214B C5          6259   DISPT0:         PUSH	BC
00214C 87          6260                   ADD	A,A
00214D 4F          6261                   LD	C,A
00214E 06 00       6262                   LD	B,0
002150 09          6263                   ADD	HL,BC
002151 7E          6264                   LD	A,(HL)
002152 23          6265                   INC	HL
002153 66          6266                   LD	H,(HL)
002154 6F          6267                   LD	L,A
002155 C1          6268                   POP	BC
002156 E3          6269                   EX	(SP),HL
002157 C9          6270                   RET			;OFF TO ROUTINE
002158             6271   ;
002158 7A          6272   STOREA:         LD	A,D
002159 D5          6273                   PUSH	DE
00215A E5          6274                   PUSH	HL
00215B DD E3       6275                   EX	(SP),IX
00215D B7          6276                   OR	A
00215E FA 6F 21    6277                   JP	M,STORA1
002161 CD A9 19    6278                   CALL	LOADN
002164 DD E3       6279                   EX	(SP),IX
002166 CD 52 32    6280                   CALL	MODIFY
002169 E1          6281                   POP	HL
00216A D1          6282                   POP	DE
00216B 4A          6283                   LD	C,D
00216C 06 00       6284                   LD	B,0
00216E C9          6285                   RET
00216F             6286   ;
00216F D5          6287   STORA1:         PUSH	DE
002170 CD 92 1A    6288                   CALL	LOADS
002173 E1          6289                   POP	HL
002174 DD E3       6290                   EX	(SP),IX
002176 CD 9C 32    6291                   CALL	MODIFS
002179 E1          6292                   POP	HL
00217A D1          6293                   POP	DE
00217B 01 04 00    6294                   LD	BC,4
00217E C9          6295                   RET
00217F             6296   ;
00217F             6297   ; Assign to whole array:
00217F             6298   ; array1() = array expression
00217F             6299   ; array1() = n1,n2,n3,n4...
00217F             6300   ; array1() = n (n copied into all elements)
00217F             6301   ;
00217F             6302   ; Inputs: D = type (65, 68, 69, 193)
00217F             6303   ;         E = opcode ('=' for store, '+','-' etc. for modify)
00217F             6304   ;         HL = IX = VARPTR
00217F             6305   ;         IY = text pointer
00217F             6306   ;
00217F CB B2       6307   LETARR:         RES	6,D		;Lose array marker
002181 D5          6308                   PUSH	DE		;Save type & opcode
002182 CD 51 1A    6309                   CALL	GETAR1		;Get and check indirect link
002185 CD 28 1A    6310                   CALL	ARRLEN		;DE = elements, HL addresses first
002188 C1          6311                   POP	BC
002189 78          6312                   LD	A,B		;A = type
00218A D5          6313                   PUSH	DE
00218B C5          6314                   PUSH	BC
00218C E5          6315                   PUSH	HL
00218D CD 31 37    6316                   CALL	X14OR5		;DE = size in bytes
002190 42          6317                   LD	B,D
002191 4B          6318                   LD	C,E
002192 DD E1       6319                   POP	IX
002194 D1          6320                   POP	DE
002195             6321   ;
002195             6322   ; (SP) = number of elements
002195             6323   ; BC = size in bytes
002195             6324   ; DE = type & opcode
002195             6325   ; IX = address of first element
002195             6326   ;
002195             6327   ; allocate space on stack and zero it:
002195             6328   ;
002195 AF          6329                   XOR	A		;Clear carry and zero error code
002196 ED 62       6330                   SBC	HL,HL
002198 39          6331                   ADD	HL,SP		;HL = SP
002199 ED 42       6332                   SBC	HL,BC
00219B 38 9F       6333                   JR	C,ERROR1ev	;'No room'
00219D C5          6334                   PUSH	BC
00219E ED 4B E0 55 6335                   LD	BC,(FREE)
0021A2 04          6336                   INC	B		;Safety margin
0021A3 ED 42       6337                   SBC	HL,BC
0021A5 09          6338                   ADD	HL,BC
0021A6 C1          6339                   POP	BC
0021A7 38 93       6340                   JR	C,ERROR1ev	;'No room'
0021A9 F9          6341                   LD	SP,HL
0021AA 36 00       6342   LETA0:          LD	(HL),0
0021AC 23          6343                   INC	HL
0021AD 0B          6344                   DEC	BC
0021AE 78          6345                   LD	A,B
0021AF B1          6346                   OR	C
0021B0 20 F8       6347                   JR	NZ,LETA0	;Clear allocated stack
0021B2 4E          6348                   LD	C,(HL)
0021B3 23          6349                   INC	HL
0021B4 46          6350                   LD	B,(HL)
0021B5 67          6351                   LD	H,A
0021B6 6F          6352                   LD	L,A
0021B7 39          6353                   ADD	HL,SP
0021B8             6354   ;
0021B8             6355   ;	CALL	NXT
0021B8             6356   ;	CP	TEVAL		;;EVAL not currently supported
0021B8             6357   ;
0021B8 CD C0 21    6358                   CALL	EXPRA
0021BB F9          6359                   LD	SP,HL		;Update stack pointer
0021BC C1          6360                   POP	BC		;Level stack
0021BD C3 1D 25    6361                   JP	XEQ
0021C0             6362   ;
0021C0             6363   ; EXPRA - Evaluate array expression, strictly left-to-right;
0021C0             6364   ; Note: String array arithmetic (concatenation) is not supported
0021C0             6365   ; because it would require a way of recovering freed string space.
0021C0             6366   ;
0021C0             6367   ;   Inputs: BC = number of elements
0021C0             6368   ;           DE = type & opcode
0021C0             6369   ;           HL = address of temporary stack space
0021C0             6370   ;           IX = address of first element of array
0021C0             6371   ;  Outputs: HL = value to set stack pointer to
0021C0             6372   ;
0021C0 3E 3D       6373   EXPRA:          LD	A,'='
0021C2 FD 2B       6374                   DEC	IY
0021C4 FD 23       6375   EXPRA1:         INC	IY
0021C6 D5          6376                   PUSH	DE
0021C7 C5          6377                   PUSH	BC
0021C8 E5          6378                   PUSH	HL
0021C9 DD E5       6379                   PUSH	IX
0021CB 5F          6380                   LD	E,A		;Operator
0021CC CD 3A 22    6381                   CALL	ITEMA
0021CF DD E1       6382                   POP	IX
0021D1 E1          6383                   POP	HL
0021D2 C1          6384                   POP	BC
0021D3 D1          6385                   POP	DE
0021D4 CD 8F 45    6386                   CALL	NXT
0021D7 FE 2C       6387                   CP	','		;List?
0021D9 28 13       6388                   JR	Z,EXPRA3
0021DB CD BA 35    6389                   CALL	TERMQ
0021DE 20 E4       6390                   JR	NZ,EXPRA1
0021E0             6391   ;
0021E0             6392   ; Update destination array from stack:
0021E0             6393   ;
0021E0 C5          6394   EXPRA2:         PUSH	BC
0021E1 CD 58 21    6395                   CALL	STOREA		;(IX) <- (HL)
0021E4 09          6396                   ADD	HL,BC
0021E5 DD 09       6397                   ADD	IX,BC
0021E7 C1          6398                   POP	BC
0021E8 0B          6399                   DEC	BC
0021E9 78          6400                   LD	A,B
0021EA B1          6401                   OR	C
0021EB 20 F3       6402                   JR	NZ,EXPRA2
0021ED C9          6403                   RET
0021EE             6404   ;
0021EE             6405   ; Update destination array from list (n.b. not transferred via stack):
0021EE             6406   ;
0021EE C5          6407   EXPRA3:         PUSH	BC
0021EF CD 58 21    6408                   CALL	STOREA		;(IX) <- (HL)
0021F2 FD 23       6409   EXPRA4:         INC	IY		;Bump past comma
0021F4 09          6410                   ADD	HL,BC
0021F5 DD 09       6411                   ADD	IX,BC
0021F7 C1          6412                   POP	BC
0021F8 0B          6413                   DEC	BC
0021F9 78          6414                   LD	A,B
0021FA B1          6415                   OR	C
0021FB C8          6416                   RET	Z
0021FC C5          6417                   PUSH	BC
0021FD D5          6418                   PUSH	DE
0021FE E5          6419                   PUSH	HL
0021FF DD E5       6420                   PUSH	IX
002201 CB 7A       6421                   BIT	7,D
002203 20 0E       6422                   JR	NZ,EXPRA5
002205 D5          6423                   PUSH	DE
002206 CD B0 18    6424                   CALL	EXPRN
002209 D1          6425                   POP	DE
00220A DD E1       6426                   POP	IX
00220C DD E5       6427                   PUSH	IX
00220E CD 52 32    6428                   CALL	MODIFY
002211 18 0C       6429                   JR	EXPRA6
002213             6430   ;
002213 D5          6431   EXPRA5:         PUSH	DE
002214 CD C0 18    6432                   CALL	EXPRS
002217 E1          6433                   POP	HL
002218 DD E1       6434                   POP	IX
00221A DD E5       6435                   PUSH	IX
00221C CD 9C 32    6436                   CALL	MODIFS
00221F DD E1       6437   EXPRA6:         POP	IX
002221 E1          6438                   POP	HL
002222 D1          6439                   POP	DE
002223 01 04 00    6440                   LD	BC,4
002226 CB 7A       6441                   BIT	7,D
002228 20 01       6442                   JR	NZ,EXPRA7
00222A 4A          6443                   LD	C,D
00222B CD 8F 45    6444   EXPRA7:         CALL	NXT
00222E FE 2C       6445                   CP	','
002230 28 C0       6446                   JR	Z,EXPRA4
002232 D1          6447                   POP	DE
002233 09          6448   EXPRA8:         ADD	HL,BC		;Skip remaining elements
002234 1B          6449                   DEC	DE
002235 7A          6450                   LD	A,D
002236 B3          6451                   OR	E
002237 20 FA       6452                   JR	NZ,EXPRA8
002239 C9          6453                   RET
00223A             6454   ;
00223A             6455   ; ITEMA: evaluate and operate on array item
00223A             6456   ;   Inputs: D = type
00223A             6457   ;           E = operator ('=' for first item)
00223A             6458   ;           BC = number of elements
00223A             6459   ;           HL = pointer to destination on stack
00223A             6460   ;           IY = text pointer
00223A             6461   ;  Outputs: IY updated
00223A             6462   ; Destroys: Everything except SP
00223A             6463   ;
00223A CD 8F 45    6464   ITEMA:          CALL	NXT
00223D E5          6465                   PUSH	HL		;Pointer to destination
00223E C5          6466                   PUSH	BC		;Number of elements
00223F FD E5       6467                   PUSH	IY		;In case normal expression
002241 D5          6468                   PUSH	DE		;Ditto
002242 FE 2D       6469                   CP	'-'
002244 20 0C       6470                   JR	NZ,ITEMA1	;Not unary minus
002246 7B          6471                   LD	A,E
002247 FE 3D       6472                   CP	'='
002249 20 07       6473                   JR	NZ,ITEMA1	;Not unary minus
00224B FD 23       6474                   INC	IY		;Bump past '-'
00224D CD 8F 45    6475                   CALL	NXT
002250 1E 2D       6476                   LD	E,'-'		;Unary minus
002252 D5          6477   ITEMA1:         PUSH	DE		;Type and operator
002253 CD 67 42    6478                   CALL	GETVAR
002256 D1          6479                   POP	DE		;Type & operator
002257 20 56       6480                   JR	NZ,ITEMA4	;Non-array expression
002259 CB 77       6481                   BIT	6,A
00225B 28 52       6482                   JR	Z,ITEMA4	;Not a whole array
00225D C1          6483                   POP	BC		;Junk saved original op
00225E C1          6484                   POP	BC		;Junk saved text pointer
00225F CB B7       6485                   RES	6,A
002261 BA          6486                   CP	D
002262 C2 F2 18    6487                   JP	NZ,MISMATev	;'Type mismatch'
002265 D5          6488                   PUSH	DE		;Save type & operator again
002266 CD 51 1A    6489                   CALL	GETAR1
002269 CD 28 1A    6490                   CALL	ARRLEN
00226C 42          6491                   LD	B,D		;BC = number of elements
00226D 4B          6492                   LD	C,E
00226E D1          6493                   POP	DE		;Restore type & operator
00226F E3          6494                   EX	(SP),HL
002270 CD 8F 45    6495                   CALL	NXT
002273 DD E1       6496                   POP	IX		;Pointer to source
002275 FE 2E       6497                   CP	'.'
002277 CA 07 23    6498                   JP	Z,ARRDOT	;Dot product
00227A B7          6499                   OR	A
00227B ED 42       6500                   SBC	HL,BC		;Same number of elements?
00227D C2 F2 18    6501                   JP	NZ,MISMATev	;'Type mismatch'
002280 E1          6502                   POP	HL		;Pointer to destination
002281 CB 7A       6503                   BIT	7,D
002283 20 1D       6504                   JR	NZ,ITEMA3
002285             6505   ;
002285             6506   ; Process numeric array item:
002285             6507   ;
002285 C5          6508   ITEMA2:         PUSH	BC
002286 E5          6509                   PUSH	HL
002287 7A          6510                   LD	A,D
002288 CD A9 19    6511                   CALL	LOADN
00228B DD E3       6512                   EX	(SP),IX
00228D D5          6513                   PUSH	DE
00228E CD 52 32    6514                   CALL	MODIFY
002291 D1          6515                   POP	DE
002292 DD E3       6516                   EX	(SP),IX
002294 E1          6517                   POP	HL
002295 4A          6518                   LD	C,D
002296 06 00       6519                   LD	B,0
002298 DD 09       6520                   ADD	IX,BC
00229A 09          6521                   ADD	HL,BC
00229B C1          6522                   POP	BC
00229C 0B          6523                   DEC	BC
00229D 78          6524                   LD	A,B
00229E B1          6525                   OR	C
00229F 20 E4       6526                   JR	NZ,ITEMA2
0022A1 C9          6527                   RET
0022A2             6528   ;
0022A2             6529   ; Process string array item (just copy descriptors):
0022A2             6530   ;
0022A2 EB          6531   ITEMA3:         EX	DE,HL		;DE = destination
0022A3 60          6532                   LD	H,B
0022A4 69          6533                   LD	L,C
0022A5 29          6534                   ADD	HL,HL
0022A6 29          6535                   ADD	HL,HL
0022A7 44          6536                   LD	B,H
0022A8 4D          6537                   LD	C,L
0022A9 DD E5       6538                   PUSH	IX
0022AB E1          6539                   POP	HL		;HL = source
0022AC ED B0       6540                   LDIR
0022AE C9          6541                   RET
0022AF             6542   ;
0022AF             6543   ; Process numeric non-array item:
0022AF             6544   ;
0022AF D1          6545   ITEMA4:         POP	DE		;Restore original operator
0022B0 FD E1       6546                   POP	IY		;Restore original text pointer
0022B2 CB 7A       6547                   BIT	7,D
0022B4 20 28       6548                   JR	NZ,ITEMA5
0022B6 D5          6549                   PUSH	DE
0022B7 CD 8F 18    6550                   CALL	EXPR45		;; should be EXP345
0022BA 79          6551                   LD	A,C		;Exponent
0022BB D1          6552                   POP	DE		;Type / operator
0022BC C1          6553                   POP	BC		;Count
0022BD DD E1       6554                   POP	IX
0022BF E5          6555   ITEMA7:         PUSH	HL
0022C0 C5          6556                   PUSH	BC
0022C1 D5          6557                   PUSH	DE
0022C2 D9          6558                   EXX
0022C3 E5          6559                   PUSH	HL
0022C4 D9          6560                   EXX
0022C5 F5          6561                   PUSH	AF
0022C6 4F          6562                   LD	C,A
0022C7 CD 52 32    6563                   CALL	MODIFY
0022CA F1          6564                   POP	AF
0022CB D9          6565                   EXX
0022CC E1          6566                   POP	HL
0022CD D9          6567                   EXX
0022CE D1          6568                   POP	DE
0022CF 4A          6569                   LD	C,D
0022D0 06 00       6570                   LD	B,0
0022D2 DD 09       6571                   ADD	IX,BC
0022D4 C1          6572                   POP	BC
0022D5 0B          6573                   DEC	BC
0022D6 ED 62       6574                   SBC	HL,HL
0022D8 ED 42       6575                   SBC	HL,BC
0022DA E1          6576                   POP	HL
0022DB 20 E2       6577                   JR	NZ,ITEMA7	;Copy into every element!
0022DD C9          6578                   RET
0022DE             6579   ;
0022DE             6580   ; Process string non-array item:
0022DE             6581   ;
0022DE CD C0 18    6582   ITEMA5:         CALL	EXPRS
0022E1 7B          6583                   LD	A,E
0022E2 B7          6584                   OR	A
0022E3 28 0B       6585                   JR	Z,ITEMA0
0022E5 21 00 53    6586                   LD	HL,ACCS
0022E8 11 00 54    6587                   LD	DE,BUFFER
0022EB 4F          6588                   LD	C,A
0022EC 06 00       6589                   LD	B,0
0022EE ED B0       6590                   LDIR
0022F0 C1          6591   ITEMA0:         POP	BC
0022F1 DD E1       6592                   POP	IX
0022F3 D9          6593                   EXX
0022F4 6F          6594                   LD	L,A
0022F5 D9          6595                   EXX
0022F6 11 04 00    6596                   LD	DE,4
0022F9 21 00 54    6597                   LD	HL,BUFFER
0022FC CD 8D 32    6598   ITEMA6:         CALL	STORE4
0022FF DD 19       6599                   ADD	IX,DE
002301 0B          6600                   DEC	BC
002302 78          6601                   LD	A,B
002303 B1          6602                   OR	C
002304 20 F6       6603                   JR	NZ,ITEMA6	;Copy into every element!
002306 C9          6604                   RET
002307             6605   ;
002307             6606   ; Array dot-product:
002307             6607   ;
002307 FD 23       6608   ARRDOT:         INC	IY		;Bump past dot
002309 7A          6609                   LD	A,D		;Type
00230A B7          6610                   OR	A
00230B FA F2 18    6611                   JP	M,MISMATev	;'Type mismatch'
00230E EB          6612                   EX	DE,HL
00230F E1          6613                   POP	HL
002310             6614   ;
002310             6615   ; A = type
002310             6616   ; DE = no. of elements in destination array (outer loop counter)
002310             6617   ; IX = pointer to first source array data
002310             6618   ; HL = pointer to destination data
002310             6619   ; IY = text pointer
002310             6620   ;
002310 D5          6621                   PUSH	DE
002311 E5          6622                   PUSH	HL
002312 DD E5       6623                   PUSH	IX
002314 F5          6624                   PUSH	AF
002315 CD 41 1A    6625                   CALL	GETARR
002318 CD 28 1A    6626                   CALL	ARRLEN
00231B F1          6627                   POP	AF
00231C EB          6628                   EX	DE,HL
00231D DD 6E 00    6629                   LD	L,(IX)
002320 DD 66 01    6630                   LD	H,(IX+1)	;Indirect pointer
002323 6E          6631                   LD	L,(HL)		;No. of dimensions
002324 2D          6632                   DEC	L
002325 EB          6633                   EX	DE,HL
002326 DD E1       6634                   POP	IX
002328 C1          6635                   POP	BC
002329 D1          6636                   POP	DE
00232A             6637   ;
00232A FD E5       6638                   PUSH	IY		;Save text pointer
00232C C5          6639                   PUSH	BC		;Save destination pointer
00232D E5          6640                   PUSH	HL
00232E FD E1       6641                   POP	IY
002330             6642   ;
002330             6643   ; Get row counts:
002330             6644   ;
002330 21 01 00    6645                   LD	HL,1
002333 28 06       6646                   JR	Z,ARR1D
002335 FD 66 FF    6647                   LD	H,(IY-1)
002338 FD 6E FE    6648                   LD	L,(IY-2)
00233B D5          6649   ARR1D:          PUSH	DE
00233C EB          6650                   EX	DE,HL
00233D CD 31 37    6651                   CALL	X14OR5
002340 EB          6652                   EX	DE,HL
002341 D1          6653                   POP	DE
002342 DD 46 FF    6654                   LD	B,(IX-1)
002345 DD 4E FE    6655                   LD	C,(IX-2)
002348             6656   ;
002348             6657   ; A = type, Z-flag set if first array is one-dimensional
002348             6658   ; BC = no. of rows of first source array (inner loop counter)
002348             6659   ; DE = no. of elements in destination array (outer loop counter)
002348             6660   ; HL = no. of rows of second source array * size of each element
002348             6661   ; IX = pointer to first source array
002348             6662   ; IY = pointer to second source array
002348             6663   ; (SP) = pointer to destination data
002348             6664   ;
002348             6665   ; Dot-product outer loop:
002348             6666   ;
002348 C5          6667   OUTER:          PUSH	BC		;1
002349 D5          6668                   PUSH	DE		;2
00234A E5          6669                   PUSH	HL		;3
00234B DD E5       6670                   PUSH	IX		;4
00234D FD E5       6671                   PUSH	IY		;5
00234F 50          6672                   LD	D,B
002350 59          6673                   LD	E,C
002351 F5          6674                   PUSH	AF
002352 CD 7C 20    6675                   CALL	ZERO		;Zero accumulator
002355 F1          6676                   POP	AF
002356 D5          6677   INNER:          PUSH	DE		;6
002357 C5          6678                   PUSH	BC		;Save accumulator
002358 E5          6679                   PUSH	HL
002359 D9          6680                   EXX
00235A E5          6681                   PUSH	HL
00235B D9          6682                   EXX
00235C             6683   ;
00235C CD A9 19    6684                   CALL	LOADN		;Load from (IX)
00235F DD E5       6685                   PUSH	IX
002361 FD E3       6686                   EX	(SP),IY
002363 DD E1       6687                   POP	IX
002365             6688   ;
002365 CD 6B 1A    6689                   CALL	DLOADN		;Load from (IY)
002368 DD E5       6690                   PUSH	IX
00236A FD E3       6691                   EX	(SP),IY
00236C DD E1       6692                   POP	IX
00236E             6693   ;
00236E F5          6694                   PUSH	AF
00236F 3E 0A       6695                   LD	A,10
002371 CD 99 45    6696                   CALL	FPP		;Multiply
002374 DA C8 3F    6697                   JP	C,ERROR_
002377 F1          6698                   POP	AF
002378             6699   ;
002378 D9          6700                   EXX			;Restore accumulator
002379 EB          6701                   EX	DE,HL
00237A E1          6702                   POP	HL
00237B D9          6703                   EXX
00237C EB          6704                   EX	DE,HL
00237D E1          6705                   POP	HL
00237E 08          6706                   EX	AF,AF'
00237F 79          6707                   LD	A,C
002380 C1          6708                   POP	BC
002381 47          6709                   LD	B,A
002382 08          6710                   EX	AF,AF'
002383             6711   ;
002383 F5          6712                   PUSH	AF
002384 3E 0B       6713                   LD	A,11
002386 CD 99 45    6714                   CALL	FPP		;Accumulate
002389 DA C8 3F    6715                   JP	C,ERROR_
00238C F1          6716                   POP	AF
00238D             6717   ;
00238D             6718   ; Bump pointers:
00238D             6719   ;
00238D D1          6720                   POP	DE		;5
00238E             6721   ;
00238E D9          6722                   EXX
00238F 4F          6723                   LD	C,A
002390 06 00       6724                   LD	B,0
002392 DD 09       6725                   ADD	IX,BC
002394 D1          6726                   POP	DE
002395 C1          6727                   POP	BC
002396 E3          6728                   EX	(SP),HL
002397 EB          6729                   EX	DE,HL
002398 FD 19       6730                   ADD	IY,DE
00239A EB          6731                   EX	DE,HL
00239B E3          6732                   EX	(SP),HL
00239C C5          6733                   PUSH	BC
00239D D5          6734                   PUSH	DE
00239E D9          6735                   EXX
00239F             6736   ;
00239F             6737   ; Count inner loops:
00239F             6738   ;
00239F 1B          6739                   DEC	DE		;Inner loop counter
0023A0 1C          6740                   INC	E
0023A1 1D          6741                   DEC	E
0023A2 20 B2       6742                   JR	NZ,INNER
0023A4 14          6743                   INC	D
0023A5 15          6744                   DEC	D
0023A6 20 AE       6745                   JR	NZ,INNER
0023A8             6746   ;
0023A8 FD E1       6747                   POP	IY		;4
0023AA DD E1       6748                   POP	IX		;3
0023AC             6749   ;
0023AC             6750   ; Swap pointers:
0023AC             6751   ;
0023AC D9          6752                   EXX
0023AD 08          6753                   EX	AF,AF'
0023AE F1          6754                   POP	AF
0023AF C1          6755                   POP	BC
0023B0 D1          6756                   POP	DE
0023B1 DD E3       6757                   EX	(SP),IX
0023B3 D5          6758                   PUSH	DE
0023B4 C5          6759                   PUSH	BC
0023B5 F5          6760                   PUSH	AF
0023B6 08          6761                   EX	AF,AF'
0023B7 D9          6762                   EXX
0023B8             6763   ;
0023B8             6764   ; Save to destination array and bump pointer:
0023B8             6765   ;
0023B8 F5          6766                   PUSH	AF
0023B9 D5          6767                   PUSH	DE
0023BA CD 74 32    6768                   CALL	STOREN
0023BD D1          6769                   POP	DE
0023BE F1          6770                   POP	AF
0023BF 4F          6771                   LD	C,A
0023C0 06 00       6772                   LD	B,0
0023C2 DD 09       6773                   ADD	IX,BC
0023C4             6774   ;
0023C4             6775   ; Swap pointers:
0023C4             6776   ;
0023C4 D9          6777                   EXX
0023C5 08          6778                   EX	AF,AF'
0023C6 F1          6779                   POP	AF
0023C7 C1          6780                   POP	BC
0023C8 D1          6781                   POP	DE
0023C9 DD E3       6782                   EX	(SP),IX
0023CB D5          6783                   PUSH	DE
0023CC C5          6784                   PUSH	BC
0023CD F5          6785                   PUSH	AF
0023CE 08          6786                   EX	AF,AF'
0023CF D9          6787                   EXX
0023D0             6788   ;
0023D0 E1          6789                   POP	HL		;2
0023D1 D1          6790                   POP	DE		;1 Outer loop counter
0023D2 C1          6791                   POP	BC		;0
0023D3 1B          6792                   DEC	DE		;Count outer loops
0023D4             6793   ;
0023D4             6794   ; Adjust IX & IY
0023D4             6795   ;
0023D4 C5          6796                   PUSH	BC
0023D5 D5          6797                   PUSH	DE
0023D6 E5          6798                   PUSH	HL
0023D7 4F          6799                   LD	C,A
0023D8 06 00       6800                   LD	B,0
0023DA FD 09       6801                   ADD	IY,BC
0023DC F5          6802                   PUSH	AF
0023DD E5          6803                   PUSH	HL
0023DE CD 31 37    6804                   CALL	X14OR5
0023E1 C1          6805                   POP	BC
0023E2 CD 14 24    6806                   CALL	MOD16
0023E5 F1          6807                   POP	AF
0023E6 B7          6808                   OR	A
0023E7 01 00 00    6809                   LD	BC,0
0023EA ED 42       6810                   SBC	HL,BC
0023EC E1          6811                   POP	HL
0023ED D1          6812                   POP	DE
0023EE C1          6813                   POP	BC
0023EF 20 15       6814                   JR	NZ,MODNZ
0023F1 D5          6815                   PUSH	DE
0023F2 E5          6816                   PUSH	HL
0023F3 EB          6817                   EX	DE,HL
0023F4 FD E5       6818                   PUSH	IY
0023F6 E1          6819                   POP	HL
0023F7 B7          6820                   OR	A
0023F8 ED 52       6821                   SBC	HL,DE
0023FA E5          6822                   PUSH	HL
0023FB FD E1       6823                   POP	IY
0023FD 50          6824                   LD	D,B
0023FE 59          6825                   LD	E,C
0023FF CD 31 37    6826                   CALL	X14OR5
002402 DD 19       6827                   ADD	IX,DE
002404 E1          6828                   POP	HL
002405 D1          6829                   POP	DE
002406             6830   MODNZ:
002406             6831   ;
002406             6832   ; Count outer loops:
002406             6833   ;
002406 1C          6834                   INC	E
002407 1D          6835                   DEC	E
002408 C2 48 23    6836                   JP	NZ,OUTER
00240B 14          6837                   INC	D
00240C 15          6838                   DEC	D
00240D C2 48 23    6839                   JP	NZ,OUTER
002410             6840   ;
002410             6841   ; Exit:
002410             6842   ;
002410 E1          6843                   POP	HL
002411 FD E1       6844                   POP	IY
002413 C9          6845                   RET
002414             6846   ;
002414             6847   ; HL = DE MOD BC
002414             6848   ;
002414 AF          6849   MOD16:          XOR	A
002415 67          6850                   LD	H,A
002416 6F          6851                   LD	L,A
002417 3E 11       6852                   LD	A,17
002419 ED 42       6853   MOD160:         SBC	HL,BC
00241B 30 01       6854                   JR	NC,MOD161
00241D 09          6855                   ADD	HL,BC
00241E 3F          6856   MOD161:         CCF
00241F CB 13       6857                   RL	E
002421 CB 12       6858                   RL	D
002423 3D          6859                   DEC	A
002424 C8          6860                   RET	Z
002425 ED 6A       6861                   ADC	HL,HL
002427 18 F0       6862                   JR	MOD160
002429             6863   ;
002429             6864   ;                END
002429             6865   ; --- End eval.asm ---
002429             6866   
002429             6867   ; --- Begin exec.asm ---
002429             6868   ;
002429             6869   ;Automatically created from original source on 2024-12-15 15:29:12
002429             6870   ;
002429             6871                   .ASSUME ADL = 0
002429             6872   ;	.ORG 0x0000
002429             6873   ;                SEGMENT CODE
002429             6874   ;
002429             6875   ;BBC BASIC INTERPRETER - Z80 VERSION
002429             6876   ;STATEMENT EXECUTION MODULE - "EXEC"
002429             6877   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
002429             6878   ;
002429             6879   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
002429             6880   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
002429             6881   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
002429             6882   ;
002429             6883   ;VERSION 2.1, 22-01-1984
002429             6884   ;VERSION 3.1, 11-06-1987
002429             6885   ;VERSION 5.0, 12-07-2024
002429             6886   ;
002429             6887   ;                XDEF	XEQ
002429             6888   ;                XDEF	RUN0
002429             6889   ;                XDEF	CHAIN0
002429             6890   ;                XDEF	CHECK
002429             6891   ;                XDEF	MUL16
002429             6892   ;                XDEF	X14OR5
002429             6893   ;                XDEF	TERMQ
002429             6894   ;                XDEF	STOREN
002429             6895   ;                XDEF	STORE4
002429             6896   ;                XDEF	STORE5
002429             6897   ;                XDEF	STACCS
002429             6898   ;                XDEF	SPACES
002429             6899   ;                XDEF	FN
002429             6900   ;                XDEF	USR
002429             6901   ;                XDEF	ESCAPE
002429             6902   ;                XDEF	SYNTAX
002429             6903   ;                XDEF	CHANEL
002429             6904   ;                XDEF	CHNL
002429             6905   ;                XDEF	VAR_
002429             6906   ;                XDEF	TABIT
002429             6907   ;                XDEF	MODIFY
002429             6908   ;                XDEF	MODIFS
002429             6909   ;
002429             6910   ;                XREF	ASSEM
002429             6911   ;                XREF	ERROR_
002429             6912   ;                XREF	REPORT
002429             6913   ;                XREF	WARM
002429             6914   ;                XREF	CLOOP
002429             6915   ;                XREF	SAYLN
002429             6916   ;                XREF	LOAD0
002429             6917   ;                XREF	CRLF
002429             6918   ;                XREF	PBCDL
002429             6919   ;                XREF	TELL
002429             6920   ;                XREF	FINDL
002429             6921   ;                XREF	SETLIN
002429             6922   ;                XREF	CLEAR
002429             6923   ;                XREF	GETVAR
002429             6924   ;                XREF	PUTVAR
002429             6925   ;                XREF	GETDEF
002429             6926   ;                XREF	LOCATE
002429             6927   ;                XREF	CREATE
002429             6928   ;                XREF	OUTCHR
002429             6929   ;                XREF	EXTERR
002429             6930   ;                XREF	BYE
002429             6931   ;                XREF	NXT
002429             6932   ;                XREF	NLIST
002429             6933   ;                XREF	CSRON
002429             6934   ;                XREF	CSROFF
002429             6935   ;
002429             6936   ;                XREF	OSWRCH
002429             6937   ;                XREF	OSLINE
002429             6938   ;                XREF	OSSHUT
002429             6939   ;                XREF	OSBPUT
002429             6940   ;                XREF	OSBGET
002429             6941   ;                XREF	CLRSCN
002429             6942   ;                XREF	PUTCSR
002429             6943   ;                XREF	PUTIME
002429             6944   ;                XREF	PUTIMS
002429             6945   ;                XREF	PUTPTR
002429             6946   ;                XREF	OSCALL
002429             6947   ;                XREF	OSCLI
002429             6948   ;                XREF	TRAP
002429             6949   ;
002429             6950   ;                XREF	SOUND
002429             6951   ;                XREF	CLG
002429             6952   ;                XREF	DRAW
002429             6953   ;                XREF	ENVEL
002429             6954   ;                XREF	GCOL
002429             6955   ;                XREF	MODE
002429             6956   ;                XREF	MOVE
002429             6957   ;                XREF	PLOT
002429             6958   ;                XREF	COLOUR
002429             6959   ;                XREF	CIRCLE
002429             6960   ;                XREF	ELLIPS
002429             6961   ;                XREF	FILL
002429             6962   ;                XREF	MOUSE
002429             6963   ;                XREF	ORIGIN
002429             6964   ;                XREF	RECTAN
002429             6965   ;                XREF	LINE
002429             6966   ;                XREF	WAIT
002429             6967   ;                XREF	TINT
002429             6968   ;                XREF	SYS
002429             6969   ;
002429             6970   ;                XREF	STR
002429             6971   ;                XREF	HEXSTR
002429             6972   ;                XREF	EXPR
002429             6973   ;                XREF	EXPRN
002429             6974   ;                XREF	EXPRI
002429             6975   ;                XREF	EXPRS
002429             6976   ;                XREF	ITEMI
002429             6977   ;                XREF	CONS
002429             6978   ;                XREF	LOADS
002429             6979   ;                XREF	VAL0
002429             6980   ;                XREF	SFIX
002429             6981   ;                XREF	TEST
002429             6982   ;                XREF	LOAD4
002429             6983   ;                XREF	LOADN
002429             6984   ;                XREF	DLOAD5
002429             6985   ;                XREF	FPP
002429             6986   ;                XREF	COMMA
002429             6987   ;                XREF	BRAKET
002429             6988   ;                XREF	PUSHS
002429             6989   ;                XREF	POPS
002429             6990   ;                XREF	ZERO
002429             6991   ;                XREF	SCP
002429             6992   ;                XREF	LETARR
002429             6993   ;
002429             6994   ;                XREF	ACCS
002429             6995   ;                XREF	PAGE_
002429             6996   ;                XREF	LOMEM
002429             6997   ;                XREF	HIMEM
002429             6998   ;                XREF	FREE
002429             6999   ;                XREF	BUFFER
002429             7000   ;                XREF	ERRTRP
002429             7001   ;                XREF	ONERSP
002429             7002   ;                XREF	CURLIN
002429             7003   ;                XREF	COUNT
002429             7004   ;                XREF	WIDTH
002429             7005   ;                XREF	STAVAR
002429             7006   ;                XREF	DATPTR
002429             7007   ;                XREF	RANDOM
002429             7008   ;                XREF	TRACEN
002429             7009   ;                XREF	LISTON
002429             7010   ;                XREF	PC
002429             7011   ;                XREF	OC
002429             7012   ;
002429             7013   ; LF             EQU	0AH	; in equs.inc
002429             7014   ; CR             EQU	0DH	; in equs.inc
002429             7015   ; IN main.asm
002429             7016   ; TAND:           EQU	80H
002429             7017   ; TOR:            EQU	84H
002429             7018   ; TERROR:         EQU	85H
002429             7019   ; TLINE:          EQU	86H
002429             7020   TOFF:           EQU	87H
002429             7021   TSTEP:          EQU	88H
002429             7022   TSPC:           EQU	89H
002429             7023   TTAB:           EQU	8AH
002429             7024   ; TELSE:          EQU	8BH
002429             7025   ; TTHEN:          EQU	8CH
002429             7026   ; TLINO:          EQU	8DH
002429             7027   ; TTO:            EQU	0B8H
002429             7028   TCMD:           EQU	0C0H
002429             7029   ; TWHILE:         EQU	0C7H
002429             7030   ; TWHEN:          EQU	0C9H
002429             7031   ; TOF:            EQU	0CAH
002429             7032   ; TENDCASE:       EQU	0CBH
002429             7033   ; TOTHERWISE:     EQU	0CCH
002429             7034   ; TENDIF:         EQU	0CDH
002429             7035   ; TENDWHILE:      EQU	0CEH
002429             7036   ; TCALL:          EQU	0D6H
002429             7037   ; TDATA:          EQU	0DCH
002429             7038   ; TDEF:           EQU	0DDH
002429             7039   ; TFOR:           EQU	0E3H
002429             7040   ; TGOSUB:         EQU	0E4H
002429             7041   ; TGOTO:          EQU	0E5H
002429             7042   ; TLOCAL:         EQU	0EAH
002429             7043   ; TNEXT:          EQU	0EDH
002429             7044   ; TON:            EQU	0EEH
002429             7045   ; TPROC:          EQU	0F2H
002429             7046   ; TREM:           EQU	0F4H
002429             7047   ; TREPEAT:        EQU	0F5H
002429             7048   TRETURN:        EQU	0F8H
002429             7049   TSTOP:          EQU	0FAH
002429             7050   ; TUNTIL:         EQU	0FDH
002429             7051   ; TEXIT:          EQU	10H
002429             7052   ; END in main.asm
002429             7053   ;
002429 FB 30       7054   CMDTAB:         DW	LEFTSL
00242B 0F 31       7055                   DW	MIDSL
00242D 05 31       7056                   DW	RITESL
00242F 64 26       7057                   DW	SYNTAX	;STR$
002431 64 26       7058                   DW	SYNTAX	;STRING$
002433 64 26       7059                   DW	SYNTAX	;EOF
002435 64 26       7060                   DW	SYNTAX	;SUM
002437 AA 2E       7061                   DW	WHILE
002439 DB 2D       7062                   DW	CASE
00243B 64 26       7063                   DW	SYNTAX	;WHEN
00243D 64 26       7064                   DW	SYNTAX	;OF
00243F 1D 25       7065                   DW	XEQ	;ENDCASE
002441 64 26       7066                   DW	SYNTAX	;OTHERWISE
002443 1D 25       7067                   DW	XEQ	;ENDIF
002445 C7 2E       7068                   DW	ENDWHI	;ENDWHILE
002447 85 2F       7069                   DW	PTR
002449 99 2F       7070                   DW	PAGEV
00244B A7 2F       7071                   DW	TIMEV
00244D C6 2F       7072                   DW	LOMEMV
00244F D8 2F       7073                   DW	HIMEMV
002451 B5 0E       7074                   DW	SOUND
002453 57 30       7075                   DW	BPUT
002455 90 30       7076                   DW	CALL
002457 D0 24       7077                   DW	CHAIN
002459 1A 2F       7078                   DW	CLR
00245B 4F 30       7079                   DW	CLOSE
00245D F9 0E       7080                   DW	CLG
00245F F9 2E       7081                   DW	CLS
002461 B5 25       7082                   DW	REM		;DATA
002463 B5 25       7083                   DW	REM		;DEF
002465 C2 26       7084                   DW	DIM
002467 00 10       7085                   DW	DRAW
002469 57 25       7086                   DW	END
00246B 01 2C       7087                   DW	ENDPRO
00246D 87 0E       7088                   DW	ENVEL
00246F 98 29       7089                   DW	FORex
002471 4F 29       7090                   DW	GOSUB
002473 38 29       7091                   DW	GOTO
002475 51 0F       7092                   DW	GCOL
002477 4D 2D       7093                   DW	IF_
002479 66 2C       7094                   DW	INPUT
00247B 25 26       7095                   DW	LET
00247D 97 2B       7096                   DW	LOCAL
00247F E9 0E       7097                   DW	MODE
002481 FC 0F       7098                   DW	MOVE
002483 E5 29       7099                   DW	NEXT
002485 BE 28       7100                   DW	ON
002487 20 30       7101                   DW	VDU
002489 08 10       7102                   DW	PLOT
00248B CA 27       7103                   DW	PRINT
00248D 6B 2A       7104                   DW	PROC
00248F 04 2D       7105                   DW	READ
002491 B5 25       7106                   DW	REM
002493 69 29       7107                   DW	REPEAT
002495 15 2F       7108                   DW	REPOR
002497 40 2F       7109                   DW	RESTOR
002499 5A 29       7110                   DW	RETURN
00249B CB 24       7111                   DW	RUN
00249D 02 2F       7112                   DW	STOP
00249F 11 0F       7113                   DW	COLOUR
0024A1 07 30       7114                   DW	TRACE
0024A3 71 29       7115                   DW	UNTIL
0024A5 FD 2F       7116                   DW	WIDTHV
0024A7 8C 25       7117                   DW	CLI		;OSCLI
0024A9 B5 25       7118                   DW	REM		;NUL
0024AB 9F 0F       7119                   DW	CIRCLE
0024AD CB 0F       7120                   DW	ELLIPS
0024AF 04 10       7121                   DW	FILL
0024B1 BE 10       7122                   DW	MOUSE
0024B3 00 0F       7123                   DW	ORIGIN
0024B5 B0 0A       7124                   DW	BYE		;QUIT
0024B7 3D 10       7125                   DW	RECTAN
0024B9 E2 25       7126                   DW	SWAPex
0024BB 95 11       7127                   DW	SYS
0024BD 95 11       7128                   DW	TINT
0024BF FD 10       7129                   DW	WAIT
0024C1 64 26       7130                   DW	SYNTAX		;INSTALL
0024C3 B5 25       7131                   DW	REM		;CR
0024C5 21 32       7132                   DW	PUT		;Token changed
0024C7 64 26       7133                   DW	SYNTAX		;BY
0024C9 A7 31       7134                   DW	EXITex
0024CB             7135   ;
0024CB             7136   CMDTAB_END:     EQU	$
0024CB             7137   TLAST:          EQU	TCMD-128+[[CMDTAB_END-CMDTAB]/2]
0024CB             7138   ;
0024CB CD BA 35    7139   RUN:            CALL	TERMQ
0024CE 28 0D       7140                   JR	Z,RUN0
0024D0 CD C0 18    7141   CHAIN:          CALL	EXPRS
0024D3 3E 0D       7142                   LD	A,CR
0024D5 12          7143                   LD	(DE),A
0024D6 ED 7B E2 55 7144   CHAIN0:         LD	SP,(HIMEM)
0024DA CD 84 40    7145                   CALL	LOAD0
0024DD ED 7B E2 55 7146   RUN0:           LD	SP,(HIMEM)	;PREPARE FOR RUN
0024E1 DD 21 F6 55 7147                   LD	IX,RANDOM
0024E5 ED 5F       7148   RAND:           LD	A,R		;RANDOMISE (CARE!)
0024E7 28 FC       7149                   JR	Z,RAND
0024E9 07          7150                   RLCA
0024EA 07          7151                   RLCA
0024EB DD 77 03    7152                   LD	(IX+3),A
0024EE 9F          7153                   SBC	A,A
0024EF DD 77 04    7154                   LD	(IX+4),A
0024F2 CD C7 40    7155                   CALL	CLEAR
0024F5 21 00 00    7156                   LD	HL,0
0024F8 22 EA 55    7157                   LD	(ERRTRP),HL
0024FB 2A DC 55    7158                   LD	HL,(PAGE_)
0024FE CD 7D 36    7159                   CALL	DSRCH		;LOOK FOR "DATA"
002501 22 F0 55    7160                   LD	(DATPTR),HL	;SET DATA POINTER
002504 FD 2A DC 55 7161                   LD	IY,(PAGE_)
002508 CD 5F 25    7162   XEQ0:           CALL	NEWLIN
00250B FD 7E 00    7163                   LD	A,(IY)
00250E FE 8B       7164                   CP	TELSE
002510 CA B4 2D    7165                   JP	Z,MELSE		;ELSE
002513 FE C9       7166                   CP	TWHEN
002515 CA C7 2D    7167                   JP	Z,WHEN		;WHEN
002518 FE CC       7168                   CP	TOTHERWISE
00251A CA C7 2D    7169                   JP	Z,WHEN
00251D FD 22 F4 55 7170   XEQ:            LD	(CURLIN),IY	;ERROR POINTER
002521 CD 35 06    7171                   CALL	TRAP		;CHECK KEYBOARD
002524 CD 8F 45    7172   XEQ1:           CALL	NXT
002527 FD 23       7173                   INC	IY
002529 FE 3A       7174                   CP	':'		;SEPARATOR
00252B 28 F7       7175                   JR	Z,XEQ1
00252D FE 0D       7176                   CP	CR
00252F 28 D7       7177                   JR	Z,XEQ0		;NEW PROGRAM LINE
002531 FE 91       7178                   CP	TLAST
002533 EA 17 26    7179                   JP	PE,LET0		;IMPLIED LET
002536 D6 C0       7180                   SUB	TCMD
002538 FA 9A 25    7181                   JP	M,EXTRAS
00253B 87          7182                   ADD	A,A
00253C 4F          7183                   LD	C,A
00253D 06 00       7184                   LD	B,0
00253F 21 29 24    7185                   LD	HL,CMDTAB
002542 09          7186                   ADD	HL,BC
002543 7E          7187                   LD	A,(HL)		;TABLE ENTRY
002544 23          7188                   INC	HL
002545 66          7189                   LD	H,(HL)
002546 6F          7190                   LD	L,A
002547 CD 8F 45    7191                   CALL	NXT
00254A E9          7192                   JP	(HL)		;EXECUTE STATEMENT
00254B             7193   ;
00254B             7194   ;END
00254B             7195   ;
00254B FD E5       7196   ENDIM:          PUSH	IY
00254D E1          7197                   POP	HL
00254E ED 4B DC 55 7198                   LD	BC,(PAGE_)
002552 ED 42       7199                   SBC	HL,BC		;IMMEDIATE MODE ?
002554 DA 34 38    7200                   JP	C,CLOOP
002557 1E 00       7201   END:            LD	E,0
002559 CD 55 06    7202                   CALL	OSSHUT		;CLOSE ALL FILES
00255C C3 33 38    7203                   JP	WARM		;"Ready"
00255F             7204   ;
00255F FD 7E 00    7205   NEWLIN:         LD	A,(IY+0)	;A=LINE LENGTH
002562 01 03 00    7206                   LD	BC,3
002565 FD 09       7207                   ADD	IY,BC
002567 B7          7208                   OR	A
002568 28 E1       7209                   JR	Z,ENDIM		;LENGTH=0, EXITex
00256A 2A E6 55    7210                   LD	HL,(TRACEN)
00256D 7C          7211                   LD	A,H
00256E B5          7212                   OR	L
00256F C8          7213                   RET	Z
002570 FD 56 FF    7214                   LD	D,(IY-1)	;DE = LINE NUMBER
002573 FD 5E FE    7215                   LD	E,(IY-2)
002576 ED 52       7216                   SBC	HL,DE
002578 D8          7217                   RET	C
002579 EB          7218                   EX	DE,HL
00257A 3E 5B       7219                   LD	A,'['		;TRACE
00257C CD 86 41    7220                   CALL	OUTCHR
00257F CD 16 42    7221                   CALL	PBCDL
002582 3E 5D       7222                   LD	A,']'
002584 CD 86 41    7223                   CALL	OUTCHR
002587 3E 20       7224                   LD	A,' '
002589 C3 86 41    7225                   JP	OUTCHR
00258C             7226   ;
00258C             7227   ;ROUTINES FOR EACH STATEMENT:
00258C             7228   ;
00258C             7229   ;OSCLI
00258C             7230   ;
00258C CD C0 18    7231   CLI:            CALL	EXPRS
00258F 3E 0D       7232                   LD	A,CR
002591 12          7233                   LD	(DE),A
002592 21 00 53    7234                   LD	HL,ACCS
002595 CD 37 0A    7235                   CALL	OSCLI
002598 18 83       7236                   JR	XEQ
00259A             7237   ;
00259A FE CB       7238   EXTRAS:         CP	TELSE-TCMD
00259C 28 17       7239                   JR	Z,REM		;ELSE
00259E FE C5       7240                   CP	TERROR-TCMD
0025A0 28 21       7241                   JR	Z,THROW		;ERROR
0025A2 FE C6       7242                   CP	TLINE-TCMD
0025A4 CA 89 0F    7243                   JP	Z,LINE		;LINE
0025A7 FE C7       7244                   CP	TOFF-TCMD
0025A9 CA 72 0F    7245                   JP	Z,CSROFF	;OFF
0025AC C3 64 26    7246                   JP	SYNTAX
0025AF             7247   ;
0025AF             7248   ;REM, *
0025AF             7249   ;
0025AF FD E5       7250   EXT:            PUSH	IY
0025B1 E1          7251                   POP	HL
0025B2 CD 37 0A    7252                   CALL	OSCLI
0025B5 FD E5       7253   REM:            PUSH	IY
0025B7 E1          7254                   POP	HL
0025B8 3E 0D       7255                   LD	A,CR
0025BA 47          7256                   LD	B,A
0025BB ED B1       7257                   CPIR			;FIND LINE END
0025BD E5          7258                   PUSH	HL
0025BE FD E1       7259                   POP	IY
0025C0 C3 08 25    7260                   JP	XEQ0
0025C3             7261   ;
0025C3             7262   ;ERROR num,string$
0025C3             7263   ;
0025C3 CD B7 18    7264   THROW:          CALL	EXPRI
0025C6 D9          7265                   EXX
0025C7 E5          7266                   PUSH	HL
0025C8 D9          7267                   EXX
0025C9 CD 26 21    7268                   CALL	COMMA
0025CC CD C0 18    7269                   CALL	EXPRS
0025CF E1          7270                   POP	HL
0025D0 AF          7271                   XOR	A
0025D1 12          7272                   LD	(DE),A
0025D2 7D          7273                   LD	A,L
0025D3 21 00 53    7274                   LD	HL,ACCS
0025D6 11 00 54    7275                   LD	DE,BUFFER
0025D9 D5          7276                   PUSH	DE
0025DA 01 00 01    7277                   LD	BC,256
0025DD ED B0       7278                   LDIR
0025DF C3 D9 3F    7279                   JP	EXTERR
0025E2             7280   ;
0025E2             7281   ; SWAP
0025E2             7282   ;
0025E2 CD 67 42    7283   SWAPex:           CALL	GETVAR
0025E5 20 0B       7284                   JR	NZ,SWAPNZ
0025E7 F5          7285                   PUSH	AF
0025E8 E5          7286                   PUSH	HL
0025E9 CD 26 21    7287                   CALL	COMMA
0025EC CD 8F 45    7288                   CALL	NXT
0025EF CD 67 42    7289                   CALL	GETVAR
0025F2 20 6D       7290   SWAPNZ:         JR	NZ,NOSUCH
0025F4 D1          7291                   POP	DE
0025F5 C1          7292                   POP	BC
0025F6 B8          7293                   CP	B
0025F7 20 74       7294                   JR	NZ,MISMAT
0025F9 E6 0F       7295                   AND	00001111B
0025FB 28 70       7296                   JR	Z,MISMAT
0025FD 78          7297                   LD	A,B
0025FE E6 C0       7298                   AND	11000000B
002600 28 0A       7299                   JR	Z,SWAP1ex
002602 06 02       7300                   LD	B,2
002604 F2 0C 26    7301                   JP	P,SWAP1ex
002607 EA 0C 26    7302                   JP	PE,SWAP1ex
00260A 06 04       7303                   LD	B,4
00260C 4E          7304   SWAP1ex:          LD	C,(HL)
00260D 1A          7305                   LD	A,(DE)
00260E 77          7306                   LD	(HL),A
00260F 79          7307                   LD	A,C
002610 12          7308                   LD	(DE),A
002611 13          7309                   INC	DE
002612 23          7310                   INC	HL
002613 10 F7       7311                   DJNZ	SWAP1ex
002615 18 28       7312                   JR	XEQGO4
002617             7313   ;
002617             7314   ;[LET] var = expr
002617             7315   ;
002617 FE 2A       7316   LET0:           CP	'*'
002619 28 94       7317                   JR	Z,EXT
00261B FE 3D       7318                   CP	'='
00261D 28 71       7319                   JR	Z,FNEND
00261F FE 5B       7320                   CP	'['
002621 28 52       7321                   JR	Z,ASM
002623 FD 2B       7322                   DEC	IY
002625 CD 33 32    7323   LET:            CALL	ASSIGN
002628 CA 1D 25    7324                   JP	Z,XEQ
00262B 38 37       7325                   JR	C,SYNTAX	;"Syntax error"
00262D F2 7F 21    7326                   JP	P,LETARR	;Numeric array
002630 EA 7F 21    7327                   JP	PE,LETARR	;String array
002633 7A          7328                   LD	A,D		;Type
002634 D5          7329                   PUSH	DE
002635 E5          7330                   PUSH	HL
002636 CD C0 18    7331                   CALL	EXPRS
002639 DD E1       7332                   POP	IX
00263B E1          7333                   POP	HL
00263C CD 9C 32    7334                   CALL	MODIFS
00263F C3 1D 25    7335   XEQGO4:         JP	XEQ
002642             7336   ;
002642             7337   ; GETSTR - Get string variable
002642             7338   ;   Inputs: IY = text pointer
002642             7339   ;  Outputs: B = type
002642             7340   ;           Z-flag set if comma
002642             7341   ;
002642 CD 67 42    7342   GETSTR:         CALL	GETVAR
002645 20 1A       7343                   JR	NZ,NOSUCH
002647 47          7344                   LD	B,A
002648 E6 C0       7345                   AND	11000000B
00264A F2 6D 26    7346                   JP	P,MISMAT
00264D EA 6A 26    7347                   JP	PE,BADUSE
002650 CB 40       7348                   BIT	0,B
002652 28 19       7349                   JR	Z,MISMAT
002654 CD 8F 45    7350                   CALL	NXT
002657 FE 2C       7351                   CP	','
002659 C9          7352                   RET
00265A             7353   ;
00265A CD 67 42    7354   VAR_:           CALL	GETVAR
00265D C8          7355                   RET	Z
00265E D2 51 42    7356                   JP	NC,PUTVAR
002661 3E 1A       7357   NOSUCH:         LD	A,26		;'No such variable'
002663 21          7358                   DB	21H
002664 3E 10       7359   SYNTAX:         LD	A,16		;"Syntax error"
002666 21          7360                   DB	21H
002667 3E 11       7361   ESCAPE:         LD	A,17		;"Escape"
002669 21          7362                   DB	21H
00266A 3E 0E       7363   BADUSE:         LD	A,14		;'Bad use of array'
00266C 21          7364                   DB	21H
00266D 3E 06       7365   MISMAT:         LD	A,6		;'Type mismatch'
00266F C3 C8 3F    7366   ERROR0ex:         JP	ERROR_
002672             7367   ;
002672 CD 5F 25    7368   ASM0:           CALL	NEWLIN
002675 FD 22 F4 55 7369   ASM:            LD	(CURLIN),IY
002679 CD 35 06    7370                   CALL	TRAP
00267C CD 9F 11    7371                   CALL	ASSEM
00267F 38 E3       7372                   JR	C,SYNTAX
002681 FE 0D       7373                   CP	CR
002683 28 ED       7374                   JR	Z,ASM0
002685 21 FE 55    7375                   LD	HL,LISTON
002688 7E          7376                   LD	A,(HL)
002689 E6 0F       7377                   AND	0FH
00268B F6 30       7378                   OR	30H
00268D 77          7379                   LD	(HL),A
00268E 18 AF       7380                   JR	XEQGO4
002690             7381   ;
002690             7382   ;=
002690             7383   ;
002690 CD 86 17    7384   FNEND:          CALL	EXPR		;FUNCTION RESULT
002693 08          7385                   EX	AF,AF'
002694 87          7386                   ADD	A,A
002695 7B          7387                   LD	A,E
002696 38 01       7388                   JR	C,FNEND1
002698 79          7389                   LD	A,C
002699 08          7390   FNEND1:         EX	AF,AF'
00269A E5          7391                   PUSH	HL
00269B D9          7392                   EXX
00269C C1          7393                   POP	BC
00269D EB          7394                   EX	DE,HL		;SAVE RESULT IN A'B'C'D'E'
00269E D9          7395                   EXX
00269F C1          7396   FNEND2:         POP	BC
0026A0 21 6B 2A    7397                   LD	HL,FNCHK
0026A3 AF          7398                   XOR	A
0026A4 ED 42       7399                   SBC	HL,BC
0026A6 28 0A       7400                   JR	Z,FNEND3
0026A8 C5          7401                   PUSH	BC
0026A9 CD B5 34    7402                   CALL	RESLOC
0026AC 20 F1       7403                   JR	NZ,FNEND2
0026AE 3E 07       7404                   LD	A,7
0026B0 18 BD       7405                   JR	ERROR0ex		;"No FN"
0026B2             7406   ;
0026B2 FD E1       7407   FNEND3:         POP	IY
0026B4 FD 22 F4 55 7408                   LD	(CURLIN),IY	;IN CASE OF ERROR
0026B8 D9          7409                   EXX
0026B9 EB          7410                   EX	DE,HL
0026BA C5          7411                   PUSH	BC
0026BB D9          7412                   EXX
0026BC E1          7413                   POP	HL
0026BD 08          7414                   EX	AF,AF'
0026BE 5F          7415                   LD	E,A
0026BF 4F          7416                   LD	C,A
0026C0 1F          7417                   RRA
0026C1 C9          7418                   RET
0026C2             7419   ;
0026C2             7420   ;DIM var(dim1[,dim2[,...]])[,var(...]
0026C2             7421   ;DIM var expr[,var expr...]
0026C2             7422   ;
0026C2 FD E5       7423   DIM:            PUSH	IY
0026C4 FE 21       7424                   CP	'!'
0026C6 CA 93 27    7425                   JP	Z,DIM4
0026C9 CD 34 43    7426                   CALL	LOCATE		;VARIABLE
0026CC DA 7D 27    7427                   JP	C,BADDIM
0026CF C4 C0 43    7428                   CALL	NZ,CREATE
0026D2 FD 7E 00    7429                   LD	A,(IY)
0026D5 FE 28       7430                   CP	'('
0026D7 C2 93 27    7431                   JP	NZ,DIM4
0026DA E5          7432                   PUSH	HL
0026DB DD E1       7433                   POP	IX
0026DD 7E          7434                   LD	A,(HL)
0026DE E6 FE       7435                   AND	0FEH
0026E0 23          7436                   INC	HL
0026E1 B6          7437                   OR	(HL)
0026E2 C2 93 27    7438                   JP	NZ,DIM4
0026E5 C1          7439                   POP	BC		;LEVEL STACK
0026E6 7A          7440                   LD	A,D
0026E7 2A E0 55    7441                   LD	HL,(FREE)
0026EA E5          7442                   PUSH	HL
0026EB DD E3       7443                   EX	(SP),IX
0026ED E5          7444                   PUSH	HL
0026EE F5          7445                   PUSH	AF		;SAVE TYPE
0026EF 11 01 00    7446                   LD	DE,1
0026F2 42          7447                   LD	B,D		;DIMENSION COUNTER
0026F3 FD 23       7448   DIM1:           INC	IY
0026F5 C5          7449                   PUSH	BC
0026F6 D5          7450                   PUSH	DE
0026F7 DD E5       7451                   PUSH	IX
0026F9 CD B7 18    7452                   CALL	EXPRI		;DIMENSION SIZE
0026FC CB 7C       7453                   BIT	7,H
0026FE 20 7D       7454                   JR	NZ,BADDIM
002700 D9          7455                   EXX
002701 23          7456                   INC	HL
002702 DD E1       7457                   POP	IX
002704 DD 23       7458                   INC	IX
002706 DD 75 00    7459                   LD	(IX),L		;SAVE SIZE
002709 DD 23       7460                   INC	IX
00270B DD 74 00    7461                   LD	(IX),H
00270E C1          7462                   POP	BC
00270F CD 41 37    7463                   CALL	MUL16		;HL=HL*BC
002712 38 6C       7464                   JR	C,NOROOM	;TOO LARGE
002714 EB          7465                   EX	DE,HL		;DE=PRODUCT
002715 C1          7466                   POP	BC
002716 04          7467                   INC	B		;DIMENSION COUNTER
002717 FD 7E 00    7468                   LD	A,(IY)
00271A FE 2C       7469                   CP	','		;ANOTHER
00271C 28 D5       7470                   JR	Z,DIM1
00271E DD 23       7471                   INC	IX
002720 CD 32 21    7472                   CALL	BRAKET		;CLOSING BRACKET
002723 F1          7473                   POP	AF		;RESTORE TYPE
002724 CD 31 37    7474                   CALL	X14OR5		;DE=DE*n
002727 38 57       7475                   JR	C,NOROOM
002729 E1          7476                   POP	HL
00272A 70          7477                   LD	(HL),B		;NO. OF DIMENSIONS
00272B DD E3       7478                   EX	(SP),IX
00272D E1          7479                   POP	HL
00272E E6 80       7480                   AND	80H
002730 DD B6 00    7481                   OR	(IX)		;FLAGS
002733             7482   ;
002733             7483   ;  A = flags: bit 7 = string, bit 0 = LOCAL
002733             7484   ; DE = amount to allocate
002733             7485   ; HL = where to allocate (if not LOCAL)
002733             7486   ; (HL - FREE is size of 'descriptor')
002733             7487   ; IX = where to store pointer
002733             7488   ;
002733 E5          7489   DIM3:           PUSH	HL
002734 24          7490                   INC	H		;Safety margin
002735 19          7491                   ADD	HL,DE
002736 38 48       7492                   JR	C,NOROOM
002738 ED 72       7493                   SBC	HL,SP
00273A 30 44       7494                   JR	NC,NOROOM
00273C E1          7495                   POP	HL
00273D E5          7496                   PUSH	HL
00273E ED 4B E0 55 7497                   LD	BC,(FREE)
002742 B7          7498                   OR	A
002743 ED 42       7499                   SBC	HL,BC
002745 44          7500                   LD	B,H
002746 4D          7501                   LD	C,L
002747 E1          7502                   POP	HL
002748 ED 42       7503                   SBC	HL,BC
00274A CB 47       7504                   BIT	0,A
00274C 28 12       7505                   JR	Z,ARRCHK	;NOT LOCAL
00274E 21 00 00    7506                   LD	HL,0
002751 ED 52       7507                   SBC	HL,DE
002753 B7          7508                   OR	A
002754 ED 42       7509                   SBC	HL,BC
002756 39          7510                   ADD	HL,SP
002757 28 07       7511                   JR	Z,ARRCHK	;RESERVE NOTHING
002759 F9          7512                   LD	SP,HL
00275A D5          7513                   PUSH	DE
00275B C5          7514                   PUSH	BC
00275C F5          7515                   PUSH	AF
00275D CD 60 27    7516                   CALL	ARRCHK
002760 DD 75 00    7517   ARRCHK:         LD	(IX+0),L	;SAVE POINTER
002763 DD 74 01    7518                   LD	(IX+1),H
002766 78          7519                   LD	A,B
002767 B1          7520                   OR	C
002768 28 09       7521                   JR	Z,DIM2
00276A D5          7522                   PUSH	DE
00276B EB          7523                   EX	DE,HL
00276C 2A E0 55    7524                   LD	HL,(FREE)
00276F ED B0       7525                   LDIR			;COPY DESCRIPTOR
002771 EB          7526                   EX	DE,HL
002772 D1          7527                   POP	DE
002773 7A          7528   DIM2:           LD	A,D
002774 B3          7529                   OR	E
002775 28 0E       7530                   JR	Z,DIM5
002777 36 00       7531                   LD	(HL),0		;INITIALISE ARRAY
002779 23          7532                   INC	HL
00277A 1B          7533                   DEC	DE
00277B 18 F6       7534                   JR	DIM2
00277D             7535   ;
00277D 3E 0A       7536   BADDIM:         LD	A,10		;"Bad DIM"
00277F 21          7537                   DB	21H
002780 3E 0B       7538   NOROOM:         LD	A,11		;"DIM space"
002782 C3 C8 3F    7539   ERROR1ex:         JP	ERROR_
002785             7540   ;
002785 ED 72       7541   DIM5:           SBC	HL,SP
002787 30 04       7542                   JR	NC,DIM7		;LOCAL
002789 39          7543                   ADD	HL,SP
00278A 22 E0 55    7544                   LD	(FREE),HL
00278D CD 84 45    7545   DIM7:           CALL	NLIST		;ANOTHER VARIABLE?
002790 C3 C2 26    7546                   JP	DIM
002793             7547   ;
002793 FD E1       7548   DIM4:           POP	IY
002795 CD 5A 26    7549                   CALL	VAR_
002798 B7          7550                   OR	A
002799 28 E2       7551                   JR	Z,BADDIM
00279B FA 7D 27    7552                   JP	M,BADDIM
00279E CB 77       7553                   BIT	6,A
0027A0 20 DB       7554                   JR	NZ,BADDIM
0027A2 47          7555                   LD	B,A		;TYPE
0027A3 CD 8F 45    7556                   CALL	NXT
0027A6 FE EA       7557                   CP	TLOCAL
0027A8 3E 00       7558                   LD	A,0		;PRESET TO NOT LOCAL
0027AA 20 03       7559                   JR	NZ,DIM8
0027AC FD 23       7560                   INC	IY
0027AE 3C          7561                   INC	A		;FLAG LOCAL
0027AF F5          7562   DIM8:           PUSH	AF
0027B0 78          7563                   LD	A,B		;TYPE
0027B1 D9          7564                   EXX
0027B2 21 00 00    7565                   LD	HL,0
0027B5 4C          7566                   LD	C,H
0027B6 CD 74 32    7567                   CALL	STOREN		;RESERVED AREA
0027B9 DD E5       7568                   PUSH	IX
0027BB CD B7 18    7569                   CALL	EXPRI
0027BE DD E1       7570                   POP	IX
0027C0 D9          7571                   EXX
0027C1 23          7572                   INC	HL
0027C2 EB          7573                   EX	DE,HL
0027C3 2A E0 55    7574                   LD	HL,(FREE)
0027C6 F1          7575                   POP	AF		;LOCAL FLAG
0027C7 C3 33 27    7576                   JP	DIM3
0027CA             7577   ;
0027CA             7578   ;PRINT list...
0027CA             7579   ;PRINT #channel,list...
0027CA             7580   ;
0027CA FE 23       7581   PRINT:          CP	'#'
0027CC 20 64       7582                   JR	NZ,PRINT0
0027CE CD 5F 37    7583                   CALL	CHNL		;CHANNEL NO. = E
0027D1 CD 84 45    7584   PRNTN1:         CALL	NLIST
0027D4 D5          7585                   PUSH	DE
0027D5 CD 86 17    7586                   CALL	EXPR		;ITEM TO PRINT
0027D8 08          7587                   EX	AF,AF'
0027D9 FA F9 27    7588                   JP	M,PRNTN2	;STRING
0027DC D1          7589                   POP	DE
0027DD C5          7590                   PUSH	BC
0027DE D9          7591                   EXX
0027DF 7D          7592                   LD	A,L
0027E0 D9          7593                   EXX
0027E1 CD 65 06    7594                   CALL	OSBPUT
0027E4 D9          7595                   EXX
0027E5 7C          7596                   LD	A,H
0027E6 D9          7597                   EXX
0027E7 CD 65 06    7598                   CALL	OSBPUT
0027EA 7D          7599                   LD	A,L
0027EB CD 65 06    7600                   CALL	OSBPUT
0027EE 7C          7601                   LD	A,H
0027EF CD 65 06    7602                   CALL	OSBPUT
0027F2 C1          7603                   POP	BC
0027F3 79          7604                   LD	A,C
0027F4 CD 65 06    7605                   CALL	OSBPUT
0027F7 18 D8       7606                   JR	PRNTN1
0027F9 4B          7607   PRNTN2:         LD	C,E
0027FA D1          7608                   POP	DE
0027FB 21 00 53    7609                   LD	HL,ACCS
0027FE 0C          7610                   INC	C
0027FF 0D          7611   PRNTN3:         DEC	C
002800 28 09       7612                   JR	Z,PRNTN4
002802 7E          7613                   LD	A,(HL)
002803 23          7614                   INC	HL
002804 C5          7615                   PUSH	BC
002805 CD 65 06    7616                   CALL	OSBPUT
002808 C1          7617                   POP	BC
002809 18 F4       7618                   JR	PRNTN3
00280B 3E 0D       7619   PRNTN4:         LD	A,CR
00280D CD 65 06    7620                   CALL	OSBPUT
002810 18 BF       7621                   JR	PRNTN1
002812             7622   ;
002812 06 02       7623   PRINT6:         LD	B,2
002814 18 22       7624                   JR	PRINTC
002816 01 00 01    7625   PRINT8:         LD	BC,100H
002819 18 1D       7626                   JR	PRINTC
00281B 21 00 55    7627   PRINT9:         LD	HL,STAVAR
00281E AF          7628                   XOR	A
00281F BE          7629                   CP	(HL)
002820 28 10       7630                   JR	Z,PRINT0
002822 3A FB 55    7631                   LD	A,(COUNT)
002825 B7          7632                   OR	A
002826 28 0A       7633                   JR	Z,PRINT0
002828 96          7634   PRINTA:         SUB	(HL)
002829 28 07       7635                   JR	Z,PRINT0
00282B 30 FB       7636                   JR	NC,PRINTA
00282D ED 44       7637                   NEG
00282F CD 27 36    7638                   CALL	SPACES
002832 3A 00 55    7639   PRINT0:         LD	A,(STAVAR)
002835 4F          7640                   LD	C,A		;PRINTS
002836 06 00       7641                   LD	B,0		;PRINTF
002838 CD BA 35    7642   PRINTC:         CALL	TERMQ
00283B 28 38       7643                   JR	Z,PRINT4
00283D CB 80       7644                   RES	0,B
00283F FD 23       7645                   INC	IY
002841 FE 7E       7646                   CP	'~'
002843 28 CD       7647                   JR	Z,PRINT6
002845 FE 3B       7648                   CP	';'
002847 28 CD       7649                   JR	Z,PRINT8
002849 FE 2C       7650                   CP	','
00284B 28 CE       7651                   JR	Z,PRINT9
00284D CD E0 35    7652                   CALL	FORMAT		;SPC, TAB, '
002850 28 E6       7653                   JR	Z,PRINTC
002852 FD 2B       7654                   DEC	IY
002854 C5          7655                   PUSH	BC
002855 CD 86 17    7656                   CALL	EXPR		;VARIABLE TYPE
002858 08          7657                   EX	AF,AF'
002859 FA 6F 28    7658                   JP	M,PRINT3	;STRING
00285C D1          7659                   POP	DE
00285D D5          7660                   PUSH	DE
00285E CB 4A       7661                   BIT	1,D
002860 F5          7662                   PUSH	AF
002861 CC 54 20    7663                   CALL	Z,STR		;DECIMAL
002864 F1          7664                   POP	AF
002865 C4 11 20    7665                   CALL	NZ,HEXSTR	;HEX
002868 C1          7666                   POP	BC
002869 C5          7667                   PUSH	BC
00286A 79          7668                   LD	A,C
00286B 93          7669                   SUB	E
00286C D4 27 36    7670                   CALL	NC,SPACES		;RIGHT JUSTIFY
00286F C1          7671   PRINT3:         POP	BC
002870 CD 35 36    7672                   CALL	PTEXT		;PRINT
002873 18 C3       7673                   JR	PRINTC
002875 CB 40       7674   PRINT4:         BIT	0,B
002877 CC 7F 41    7675                   CALL	Z,CRLF
00287A 18 3F       7676                   JR	XEQGO3
00287C             7677   ;
00287C FD 23       7678   ONERR:          INC	IY		;SKIP "ERROR"
00287E CD 8F 45    7679                   CALL	NXT
002881 21 00 00    7680                   LD	HL,0		;FLAG NOT LOCAL
002884 FE EA       7681                   CP	TLOCAL
002886 20 1D       7682                   JR	NZ,ONERR1
002888 FD 23       7683                   INC	IY		;SKIP "LOCAL"
00288A 2A EA 55    7684                   LD	HL,(ERRTRP)
00288D E5          7685                   PUSH	HL
00288E 2A EC 55    7686                   LD	HL,(ONERSP)
002891 E5          7687                   PUSH	HL
002892 21 00 04    7688                   LD	HL,400H		;TYPE = 4, 'EXPONENT' = 0
002895 E5          7689                   PUSH	HL
002896 21 EA 55    7690                   LD	HL,ERRTRP
002899 E5          7691                   PUSH	HL
00289A 21 AE 35    7692                   LD	HL,LOCCHK
00289D E5          7693                   PUSH	HL
00289E 21 00 00    7694                   LD	HL,0
0028A1 39          7695                   ADD	HL,SP
0028A2 CD 8F 45    7696                   CALL	NXT
0028A5 22 EC 55    7697   ONERR1:         LD	(ONERSP),HL
0028A8 FD 22 EA 55 7698                   LD	(ERRTRP),IY
0028AC FE 87       7699                   CP	TOFF
0028AE C2 B5 25    7700                   JP	NZ,REM
0028B1 FD 23       7701                   INC	IY		;SKIP "OFF"
0028B3 ED 62       7702                   SBC	HL,HL
0028B5 22 EC 55    7703                   LD	(ONERSP),HL
0028B8 22 EA 55    7704                   LD	(ERRTRP),HL
0028BB C3 1D 25    7705   XEQGO3:         JP	XEQ
0028BE             7706   ;
0028BE             7707   ;ON expr GOTO line[,line...] [ELSE statement]
0028BE             7708   ;ON expr GOTO line[,line...] [ELSE line]
0028BE             7709   ;ON expr GOSUB line[,line...] [ELSE statement]
0028BE             7710   ;ON expr GOSUB line[,line...] [ELSE line]
0028BE             7711   ;ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
0028BE             7712   ;ON ERROR [LOCAL] statement [:statement...]
0028BE             7713   ;ON ERROR [LOCAL] OFF
0028BE             7714   ;
0028BE CD BA 35    7715   ON:             CALL	TERMQ
0028C1 CA 6E 0F    7716                   JP	Z,CSRON
0028C4 FE 85       7717                   CP	TERROR
0028C6 28 B4       7718                   JR	Z,ONERR		;"ON ERROR"
0028C8 CD B7 18    7719                   CALL	EXPRI
0028CB FD 7E 00    7720                   LD	A,(IY)
0028CE FD 23       7721                   INC	IY
0028D0 1E 2C       7722                   LD	E,','		;SEPARATOR
0028D2 FE E5       7723                   CP	TGOTO
0028D4 28 0B       7724                   JR	Z,ON1
0028D6 FE E4       7725                   CP	TGOSUB
0028D8 28 07       7726                   JR	Z,ON1
0028DA 1E F2       7727                   LD	E,TPROC
0028DC BB          7728                   CP	E
0028DD 3E 27       7729                   LD	A,39
0028DF 20 4F       7730                   JR	NZ,ERROR2ex	;"ON syntax"
0028E1 57          7731   ON1:            LD	D,A
0028E2 D9          7732                   EXX
0028E3 E5          7733                   PUSH	HL
0028E4 D9          7734                   EXX
0028E5 C1          7735                   POP	BC		;ON INDEX
0028E6 78          7736                   LD	A,B
0028E7 B4          7737                   OR	H
0028E8 B5          7738                   OR	L
0028E9 20 32       7739                   JR	NZ,ON4		;OUT OF RANGE
0028EB B1          7740                   OR	C
0028EC 28 2F       7741                   JR	Z,ON4
0028EE 0D          7742                   DEC	C
0028EF 28 11       7743                   JR	Z,ON3		;INDEX=1
0028F1 CD BA 35    7744   ON2:            CALL	TERMQ
0028F4 28 27       7745                   JR	Z,ON4		;OUT OF RANGE
0028F6 FD 23       7746                   INC	IY		;SKIP DELIMITER
0028F8 FE 22       7747                   CP	'"'
0028FA 28 1A       7748                   JR	Z,ON5
0028FC BB          7749                   CP	E
0028FD 20 F2       7750                   JR	NZ,ON2
0028FF 0D          7751                   DEC	C
002900 20 EF       7752                   JR	NZ,ON2
002902 7B          7753   ON3:            LD	A,E
002903 FE F2       7754                   CP	TPROC
002905 28 2C       7755                   JR	Z,ONPROC
002907 D5          7756                   PUSH	DE
002908 CD E4 18    7757                   CALL	ITEMI		;LINE NUMBER
00290B D1          7758                   POP	DE
00290C 7A          7759                   LD	A,D
00290D FE E5       7760                   CP	TGOTO
00290F 28 30       7761                   JR	Z,GOTO2
002911 CD C6 35    7762                   CALL	SPAN		;SKIP REST OF LIST
002914 18 3C       7763                   JR	GOSUB1
002916             7764   ;
002916 CD 1D 37    7765   ON5:            CALL	QUOTE
002919 FD 23       7766                   INC	IY
00291B 18 D4       7767                   JR	ON2
00291D             7768   ;
00291D FD 7E 00    7769   ON4:            LD	A,(IY)
002920 FD 23       7770                   INC	IY
002922 FE 8B       7771                   CP	TELSE
002924 CA 66 2D    7772                   JP	Z,IF1		;ELSE CLAUSE
002927 FE 0D       7773                   CP	CR
002929 20 F2       7774                   JR	NZ,ON4
00292B 3E 28       7775                   LD	A,40		;'ON range'
00292D 21          7776                   DB	21H
00292E 3E 22       7777   FORVAR:         LD	A,34		;'FOR variable'
002930 C3 C8 3F    7778   ERROR2ex:         JP	ERROR_
002933             7779   ;
002933 3E EE       7780   ONPROC:         LD	A,TON
002935 C3 6B 2A    7781                   JP	PROC
002938             7782   ;
002938             7783   ;GOTO line
002938             7784   ;
002938 CD E4 18    7785   GOTO:           CALL	ITEMI		;LINE NUMBER
00293B CD BA 35    7786   GOTO1:          CALL	TERMQ
00293E C2 64 26    7787                   JP	NZ,SYNTAX
002941 D9          7788   GOTO2:          EXX
002942 CD C7 41    7789                   CALL	FINDL
002945 E5          7790                   PUSH	HL
002946 FD E1       7791                   POP	IY
002948 CA 08 25    7792                   JP	Z,XEQ0
00294B 3E 29       7793                   LD	A,41
00294D 18 E1       7794                   JR	ERROR2ex		;"No such line"
00294F             7795   ;
00294F             7796   ;GOSUB line
00294F             7797   ;
00294F CD E4 18    7798   GOSUB:          CALL	ITEMI		;LINE NUMBER
002952 FD E5       7799   GOSUB1:         PUSH	IY		;TEXT POINTER
002954 CD 0A 33    7800                   CALL	CHECK		;CHECK ROOM
002957 CD 3B 29    7801                   CALL	GOTO1		;SAVE MARKER
00295A             7802   GOSCHK:         EQU	$
00295A             7803   ;
00295A             7804   ;RETURN
00295A             7805   ;
00295A D1          7806   RETURN:         POP	DE		;MARKER
00295B 21 5A 29    7807                   LD	HL,GOSCHK
00295E B7          7808                   OR	A
00295F ED 52       7809                   SBC	HL,DE
002961 FD E1       7810                   POP	IY
002963 28 30       7811                   JR	Z,XEQGO2ex
002965 3E 26       7812                   LD	A,38
002967 18 C7       7813                   JR	ERROR2ex		;"No GOSUB"
002969             7814   ;
002969             7815   ;REPEAT
002969             7816   ;
002969 FD E5       7817   REPEAT:         PUSH	IY
00296B CD 0A 33    7818                   CALL	CHECK
00296E CD 1D 25    7819                   CALL	XEQ
002971             7820   REPCHK:         EQU	$
002971             7821   ;
002971             7822   ;UNTIL expr
002971             7823   ;
002971 C1          7824   UNTIL:          POP	BC
002972 C5          7825                   PUSH	BC
002973 21 71 29    7826                   LD	HL,REPCHK
002976 B7          7827                   OR	A
002977 ED 42       7828                   SBC	HL,BC
002979 28 0B       7829                   JR	Z,UNTIL1
00297B 3E 03       7830                   LD	A,3
00297D CD B5 34    7831                   CALL	RESLOC
002980 20 EF       7832                   JR	NZ,UNTIL
002982 3E 2B       7833                   LD	A,43
002984 18 AA       7834                   JR	ERROR2ex		;"Not in a REPEAT loop"
002986             7835   ;
002986 CD B7 18    7836   UNTIL1:         CALL	EXPRI
002989 CD DD 1F    7837                   CALL	TEST
00298C C1          7838                   POP	BC
00298D D1          7839                   POP	DE
00298E 20 05       7840                   JR	NZ,XEQGO2ex		;TRUE
002990 D5          7841                   PUSH	DE
002991 C5          7842                   PUSH	BC
002992 D5          7843                   PUSH	DE
002993 FD E1       7844                   POP	IY
002995 C3 1D 25    7845   XEQGO2ex:         JP	XEQ
002998             7846   ;
002998             7847   ;FOR var = expr TO expr [STEP expr]
002998             7848   ;
002998 CD 33 32    7849   FORex:            CALL	ASSIGN
00299B 20 91       7850                   JR	NZ,FORVAR	;"FOR variable"
00299D F5          7851                   PUSH	AF		;SAVE TYPE
00299E FD 7E 00    7852                   LD	A,(IY)
0029A1 FE B8       7853                   CP	TTO
0029A3 3E 24       7854                   LD	A,36
0029A5 20 89       7855                   JR	NZ,ERROR2ex	;"No TO"
0029A7 FD 23       7856                   INC	IY
0029A9 DD E5       7857                   PUSH	IX
0029AB CD B0 18    7858                   CALL	EXPRN		;LIMIT
0029AE DD E1       7859                   POP	IX
0029B0 F1          7860                   POP	AF
0029B1 47          7861                   LD	B,A		;TYPE
0029B2 C5          7862                   PUSH	BC		;SAVE ON STACK
0029B3 E5          7863                   PUSH	HL
0029B4 21 00 00    7864                   LD	HL,0
0029B7 4C          7865                   LD	C,H
0029B8 D9          7866                   EXX
0029B9 E5          7867                   PUSH	HL
0029BA 21 01 00    7868                   LD	HL,1		;PRESET STEP
0029BD D9          7869                   EXX
0029BE FD 7E 00    7870                   LD	A,(IY)
0029C1 FE 88       7871                   CP	TSTEP
0029C3 20 09       7872                   JR	NZ,FOR1
0029C5 FD 23       7873                   INC	IY
0029C7 DD E5       7874                   PUSH	IX
0029C9 CD B0 18    7875                   CALL	EXPRN		;STEP
0029CC DD E1       7876                   POP	IX
0029CE 06 08       7877   FOR1:           LD	B,8		;FPP '>'
0029D0 CB 7C       7878                   BIT	7,H
0029D2 20 02       7879                   JR	NZ,FOR2		;STEP SIGN
0029D4 06 0C       7880                   LD	B,12		;FPP '<'
0029D6 C5          7881   FOR2:           PUSH	BC
0029D7 E5          7882                   PUSH	HL
0029D8 D9          7883                   EXX
0029D9 E5          7884                   PUSH	HL
0029DA D9          7885                   EXX
0029DB FD E5       7886                   PUSH	IY		;SAVE TEXT POINTER
0029DD DD E5       7887                   PUSH	IX		;LOOP VARIABLE
0029DF CD 0A 33    7888                   CALL	CHECK
0029E2 CD 1D 25    7889                   CALL	XEQ
0029E5             7890   FORCHK:         EQU	$
0029E5             7891   ;
0029E5             7892   ;NEXT [var[,var...]]
0029E5             7893   ;
0029E5 C1          7894   NEXT:           POP	BC		;MARKER
0029E6 21 E5 29    7895                   LD	HL,FORCHK
0029E9 B7          7896                   OR	A
0029EA ED 42       7897                   SBC	HL,BC
0029EC 28 0C       7898                   JR	Z,NEXT2
0029EE C5          7899                   PUSH	BC
0029EF 3E 03       7900                   LD	A,3
0029F1 CD B5 34    7901                   CALL	RESLOC
0029F4 20 EF       7902                   JR	NZ,NEXT
0029F6 3E 20       7903                   LD	A,32
0029F8 18 6A       7904                   JR	ERROR3ex		;"Not in a FOR loop"
0029FA             7905   ;
0029FA CD BA 35    7906   NEXT2:          CALL	TERMQ
0029FD E1          7907                   POP	HL
0029FE E5          7908                   PUSH	HL
0029FF C5          7909                   PUSH	BC
002A00 E5          7910                   PUSH	HL
002A01 C4 67 42    7911                   CALL	NZ,GETVAR	;VARIABLE
002A04 D1          7912                   POP	DE
002A05 EB          7913                   EX	DE,HL
002A06 B7          7914                   OR	A
002A07 ED 52       7915   NEXT0:          SBC	HL,DE
002A09 20 47       7916                   JR	NZ,NEXT1
002A0B D5          7917                   PUSH	DE
002A0C DD 21 08 00 7918                   LD	IX,6+2
002A10 DD 39       7919                   ADD	IX,SP
002A12 CD 75 1A    7920                   CALL	DLOAD5		;STEP
002A15 DD 7E 0B    7921                   LD	A,(IX+11)	;TYPE
002A18 DD E1       7922                   POP	IX
002A1A CD A9 19    7923                   CALL	LOADN		;LOOP VARIABLE
002A1D F5          7924                   PUSH	AF
002A1E 3E 0B       7925                   LD	A,'+' & 0FH
002A20 CD 99 45    7926                   CALL	FPP		;ADD STEP
002A23 38 3F       7927                   JR	C,ERROR3ex
002A25 F1          7928                   POP	AF		;RESTORE TYPE
002A26 CD 74 32    7929                   CALL	STOREN		;UPDATE VARIABLE
002A29 DD 21 0C 00 7930                   LD	IX,12
002A2D DD 39       7931                   ADD	IX,SP
002A2F CD 75 1A    7932                   CALL	DLOAD5		;LIMIT
002A32 DD 7E FF    7933                   LD	A,(IX-1)
002A35 CD 99 45    7934                   CALL	FPP		;TEST AGAINST LIMIT
002A38 38 2A       7935                   JR	C,ERROR3ex
002A3A 24          7936                   INC	H
002A3B 20 0A       7937                   JR	NZ,LOOP		;KEEP LOOPING
002A3D 21 12 00    7938                   LD	HL,18
002A40 39          7939                   ADD	HL,SP
002A41 F9          7940                   LD	SP,HL
002A42 CD 84 45    7941                   CALL	NLIST
002A45 18 9E       7942                   JR	NEXT
002A47             7943   ;
002A47 C1          7944   LOOP:           POP	BC
002A48 D1          7945                   POP	DE
002A49 FD E1       7946                   POP	IY
002A4B FD E5       7947                   PUSH	IY
002A4D D5          7948                   PUSH	DE
002A4E C5          7949                   PUSH	BC
002A4F C3 1D 25    7950                   JP	XEQ
002A52             7951   ;
002A52 21 12 00    7952   NEXT1:          LD	HL,18
002A55 39          7953                   ADD	HL,SP
002A56 F9          7954                   LD	SP,HL		;"POP" THE STACK
002A57 C1          7955                   POP	BC
002A58 21 E5 29    7956                   LD	HL,FORCHK
002A5B ED 42       7957                   SBC	HL,BC
002A5D E1          7958                   POP	HL		;VARIABLE POINTER
002A5E E5          7959                   PUSH	HL
002A5F C5          7960                   PUSH	BC
002A60 28 A5       7961                   JR	Z,NEXT0
002A62 3E 21       7962                   LD	A,33
002A64 C3 C8 3F    7963   ERROR3ex:         JP	ERROR_		;"Can't match FOR"
002A67             7964   ;
002A67             7965   ;FNname
002A67             7966   ;N.B. ENTERED WITH A <> TON
002A67             7967   ;
002A67 F5          7968   FN:             PUSH	AF		;MAKE SPACE ON STACK
002A68 CD 6F 2A    7969                   CALL	PROC1
002A6B             7970   FNCHK:          EQU	$
002A6B             7971   ;
002A6B             7972   ;PROCname
002A6B             7973   ;N.B. ENTERED WITH A = ON PROC FLAG
002A6B             7974   ;
002A6B F5          7975   PROC:           PUSH	AF		;MAKE SPACE ON STACK
002A6C CD 6F 2A    7976                   CALL	PROC1
002A6F             7977   PROCHK:         EQU	$
002A6F CD 0A 33    7978   PROC1:          CALL	CHECK
002A72 FD 2B       7979                   DEC	IY
002A74 FD E5       7980                   PUSH	IY
002A76 CD 1A 43    7981                   CALL	GETDEF
002A79 C1          7982                   POP	BC
002A7A 28 39       7983                   JR	Z,PROC4
002A7C 3E 1E       7984                   LD	A,30
002A7E 38 E4       7985                   JR	C,ERROR3ex	;"Bad call"
002A80 C5          7986                   PUSH	BC
002A81 2A DC 55    7987                   LD	HL,(PAGE_)
002A84 3E DD       7988   PROC2:          LD	A,TDEF
002A86 CD 7F 36    7989                   CALL	SEARCHex		;LOOK FOR "DEF"
002A89 38 21       7990                   JR	C,PROC3
002A8B E5          7991                   PUSH	HL
002A8C FD E1       7992                   POP	IY
002A8E FD 23       7993                   INC	IY		;SKIP DEF
002A90 CD 8F 45    7994                   CALL	NXT
002A93 CD 1A 43    7995                   CALL	GETDEF
002A96 FD E5       7996                   PUSH	IY
002A98 D1          7997                   POP	DE
002A99 38 09       7998                   JR	C,PROC6
002A9B C4 C0 43    7999                   CALL	NZ,CREATE
002A9E FD E5       8000                   PUSH	IY
002AA0 D1          8001                   POP	DE
002AA1 73          8002                   LD	(HL),E
002AA2 23          8003                   INC	HL
002AA3 72          8004                   LD	(HL),D		;SAVE ADDRESS
002AA4 EB          8005   PROC6:          EX	DE,HL
002AA5 3E 0D       8006                   LD	A,CR
002AA7 47          8007                   LD	B,A
002AA8 ED B1       8008                   CPIR			;SKIP TO END OF LINE
002AAA 18 D8       8009                   JR	PROC2
002AAC FD E1       8010   PROC3:          POP	IY		;RESTORE TEXT POINTER
002AAE CD 1A 43    8011                   CALL	GETDEF
002AB1 3E 1D       8012                   LD	A,29
002AB3 20 AF       8013                   JR	NZ,ERROR3ex	;"No such FN/PROC"
002AB5 5E          8014   PROC4:          LD	E,(HL)
002AB6 23          8015                   INC	HL
002AB7 56          8016                   LD	D,(HL)		;GET ADDRESS
002AB8 21 02 00    8017                   LD	HL,2
002ABB 39          8018                   ADD	HL,SP
002ABC CD 8F 45    8019                   CALL	NXT		;ALLOW SPACE BEFORE (
002ABF D5          8020                   PUSH	DE		;EXCHANGE DE,IY
002AC0 FD E3       8021                   EX	(SP),IY
002AC2 D1          8022                   POP	DE
002AC3 FE 28       8023                   CP	'('		;ARGUMENTS?
002AC5 C2 69 2B    8024                   JP	NZ,PROC5
002AC8 CD 8F 45    8025                   CALL	NXT		;ALLOW SPACE BEFORE (
002ACB FE 28       8026                   CP	'('
002ACD C2 64 26    8027                   JP	NZ,SYNTAX	;"Syntax error"
002AD0 FD E5       8028                   PUSH	IY
002AD2 C1          8029                   POP	BC		;SAVE IY IN BC
002AD3 D9          8030                   EXX
002AD4 08          8031                   EX	AF,AF'
002AD5 AF          8032                   XOR	A		;INITIALISE RETURN COUNT
002AD6 08          8033                   EX	AF,AF'
002AD7 CD 42 35    8034                   CALL	SAVLOC		;SAVE DUMMY VARIABLES
002ADA 08          8035                   EX	AF,AF'
002ADB B7          8036                   OR	A
002ADC 28 16       8037                   JR	Z,RETCHK	;NO RETURNS
002ADE E5          8038                   PUSH	HL
002ADF ED 44       8039                   NEG
002AE1 6F          8040                   LD	L,A
002AE2 ED 44       8041                   NEG
002AE4 26 FF       8042                   LD	H,-1		;HL = -RETURNS
002AE6 29          8043                   ADD	HL,HL
002AE7 29          8044                   ADD	HL,HL
002AE8 29          8045                   ADD	HL,HL		;-RETURNS * 8
002AE9 E3          8046                   EX	(SP),HL
002AEA DD E1       8047                   POP	IX
002AEC DD 39       8048                   ADD	IX,SP
002AEE DD F9       8049                   LD	SP,IX
002AF0 F5          8050                   PUSH	AF		;PUSH RETURN COUNT
002AF1 CD F4 2A    8051                   CALL	RETCHK		;PUSH MARKER
002AF4 08          8052   RETCHK:         EX	AF,AF'
002AF5 CD 32 21    8053                   CALL	BRAKET		;CLOSING BRACKET
002AF8 D9          8054                   EXX
002AF9 C5          8055                   PUSH	BC
002AFA FD E1       8056                   POP	IY		;RESTORE IY
002AFC E5          8057                   PUSH	HL
002AFD CD 51 33    8058                   CALL	ARGUE		;TRANSFER ARGUMENTS
002B00 E1          8059                   POP	HL
002B01             8060   ;
002B01             8061   ; If any of the dummy arguments is the same as a passed-by-reference
002B01             8062   ; variable, then it must not be restored on exit (it would overwrite
002B01             8063   ; the wanted returned values), therefore search the saved values on
002B01             8064   ; the stack and if a match is found set bit 4 of the type.  On exit
002B01             8065   ; from the FN/PROC this will prevent the dummies from being restored.
002B01             8066   ;
002B01 E3          8067                   EX	(SP),HL
002B02 B7          8068                   OR	A
002B03 01 F4 2A    8069                   LD	BC,RETCHK
002B06 ED 42       8070                   SBC	HL,BC
002B08 09          8071                   ADD	HL,BC
002B09 E3          8072                   EX	(SP),HL
002B0A 20 5D       8073                   JR	NZ,PROC5	;No RETURNs
002B0C             8074   ;
002B0C D5          8075                   PUSH	DE
002B0D E5          8076                   PUSH	HL
002B0E 21 07 00    8077                   LD	HL,7		;Skip two PUSHes and RETCHK
002B11 39          8078                   ADD	HL,SP
002B12 7E          8079                   LD	A,(HL)		;RETURN count
002B13 23          8080                   INC	HL
002B14 E5          8081                   PUSH	HL
002B15 DD E1       8082                   POP	IX		;Address RETURNs table
002B17 5F          8083   PROC0:          LD	E,A
002B18 16 00       8084                   LD	D,0
002B1A EB          8085                   EX	DE,HL
002B1B 29          8086                   ADD	HL,HL
002B1C 29          8087                   ADD	HL,HL
002B1D 29          8088                   ADD	HL,HL
002B1E 19          8089                   ADD	HL,DE		;HL addresses SAVLOC stack
002B1F 23          8090                   INC	HL
002B20 23          8091                   INC	HL		;Bump past LOCCHK
002B21 5E          8092   PROC7:          LD	E,(HL)
002B22 23          8093                   INC	HL
002B23 56          8094                   LD	D,(HL)		;DE = SAVLOC VARPTR
002B24 23          8095                   INC	HL
002B25 4E          8096                   LD	C,(HL)		;Length (if string)
002B26 23          8097                   INC	HL
002B27 46          8098                   LD	B,(HL)		;Variable type
002B28             8099   ;
002B28             8100   ; Scan RETURNs table for VARPTR match
002B28             8101   ;
002B28 C5          8102                   PUSH	BC		;Save type
002B29 E5          8103                   PUSH	HL
002B2A DD E5       8104                   PUSH	IX
002B2C 47          8105                   LD	B,A		;B = RETURN count
002B2D DD 6E 04    8106   PROC8:          LD	L,(IX+4)
002B30 DD 66 05    8107                   LD	H,(IX+5)	;HL = RETURNed VARPTR
002B33 B7          8108                   OR	A
002B34 ED 52       8109                   SBC	HL,DE
002B36 28 09       8110                   JR	Z,PROC9
002B38 EB          8111                   EX	DE,HL
002B39 11 08 00    8112                   LD	DE,8
002B3C DD 19       8113                   ADD	IX,DE
002B3E EB          8114                   EX	DE,HL
002B3F 10 EC       8115                   DJNZ	PROC8
002B41 DD E1       8116   PROC9:          POP	IX
002B43 E1          8117                   POP	HL
002B44 C1          8118                   POP	BC		;Restore type
002B45             8119   ;
002B45             8120   ; If match, set bit 4 of type:
002B45             8121   ;
002B45 20 02       8122                   JR	NZ,PROCA
002B47 CB E6       8123                   SET	4,(HL)		;Flag don't restore
002B49             8124   ;
002B49             8125   ; Increment past stacked data:
002B49             8126   ;
002B49 11 03 00    8127   PROCA:          LD	DE,3
002B4C CB 70       8128                   BIT	6,B
002B4E 20 08       8129                   JR	NZ,PROCB	;Whole array
002B50 1E 05       8130                   LD	E,5
002B52 CB 78       8131                   BIT	7,B
002B54 28 02       8132                   JR	Z,PROCB		;Numeric
002B56 59          8133                   LD	E,C
002B57 13          8134                   INC	DE
002B58 19          8135   PROCB:          ADD	HL,DE
002B59 4E          8136                   LD	C,(HL)
002B5A 23          8137                   INC	HL
002B5B 46          8138                   LD	B,(HL)
002B5C 23          8139                   INC	HL		; BC = marker ?
002B5D EB          8140                   EX	DE,HL
002B5E 21 AE 35    8141                   LD	HL,LOCCHK
002B61 B7          8142                   OR	A
002B62 ED 42       8143                   SBC	HL,BC
002B64 EB          8144                   EX	DE,HL
002B65 28 BA       8145                   JR	Z,PROC7		;Another
002B67 E1          8146                   POP	HL
002B68 D1          8147                   POP	DE
002B69             8148   ;
002B69 73          8149   PROC5:          LD	(HL),E		;SAVE "RETURN ADDRESS"
002B6A 23          8150                   INC	HL
002B6B 7E          8151                   LD	A,(HL)
002B6C 72          8152                   LD	(HL),D
002B6D FE EE       8153                   CP	TON		;WAS IT "ON PROC" ?
002B6F 20 0C       8154                   JR	NZ,XEQGO
002B71 D5          8155                   PUSH	DE
002B72 FD E3       8156                   EX	(SP),IY
002B74 CD C6 35    8157                   CALL	SPAN		;SKIP REST OF ON LIST
002B77 FD E3       8158                   EX	(SP),IY
002B79 D1          8159                   POP	DE
002B7A 72          8160                   LD	(HL),D
002B7B 2B          8161                   DEC	HL
002B7C 73          8162                   LD	(HL),E
002B7D C3 1D 25    8163   XEQGO:          JP	XEQ
002B80             8164   ;
002B80 FD 23       8165   LOCERR:         INC	IY
002B82 18 F9       8166                   JR	XEQGO
002B84             8167   ;
002B84             8168   ;LOCAL DATA
002B84             8169   ;
002B84 FD 23       8170   LOCDAT:         INC	IY
002B86 2A F0 55    8171                   LD	HL,(DATPTR)
002B89 E5          8172                   PUSH	HL
002B8A 3E 40       8173                   LD	A,40H
002B8C F5          8174                   PUSH	AF
002B8D 21 F0 55    8175                   LD	HL,DATPTR
002B90 E5          8176                   PUSH	HL
002B91 21 AE 35    8177                   LD	HL,LOCCHK
002B94 E5          8178                   PUSH	HL
002B95 18 E6       8179                   JR	XEQGO
002B97             8180   ;
002B97             8181   ;LOCAL var[,var...]
002B97             8182   ;
002B97 FE 85       8183   LOCAL:          CP	TERROR
002B99 28 E5       8184                   JR	Z,LOCERR
002B9B FE DC       8185                   CP	TDATA
002B9D 28 E5       8186                   JR	Z,LOCDAT
002B9F C1          8187                   POP	BC
002BA0 C5          8188                   PUSH	BC
002BA1 21 6B 2A    8189                   LD	HL,FNCHK
002BA4 B7          8190                   OR	A
002BA5 ED 42       8191                   SBC	HL,BC
002BA7 28 23       8192                   JR	Z,LOCAL1
002BA9 21 6F 2A    8193                   LD	HL,PROCHK
002BAC B7          8194                   OR	A
002BAD ED 42       8195                   SBC	HL,BC
002BAF 28 1B       8196                   JR	Z,LOCAL1
002BB1 21 AE 35    8197                   LD	HL,LOCCHK
002BB4 B7          8198                   OR	A
002BB5 ED 42       8199                   SBC	HL,BC
002BB7 28 13       8200                   JR	Z,LOCAL1
002BB9 21 60 27    8201                   LD	HL,ARRCHK
002BBC B7          8202                   OR	A
002BBD ED 42       8203                   SBC	HL,BC
002BBF 28 0B       8204                   JR	Z,LOCAL1
002BC1 21 F4 2A    8205                   LD	HL,RETCHK
002BC4 B7          8206                   OR	A
002BC5 ED 42       8207                   SBC	HL,BC
002BC7 3E 0C       8208                   LD	A,12
002BC9 C2 C8 3F    8209                   JP	NZ,ERROR_	;"Not LOCAL"
002BCC FD E5       8210   LOCAL1:         PUSH	IY
002BCE C1          8211                   POP	BC
002BCF D9          8212                   EXX
002BD0 FD 2B       8213                   DEC	IY
002BD2 CD 42 35    8214                   CALL	SAVLOC
002BD5 D9          8215                   EXX
002BD6 C5          8216                   PUSH	BC
002BD7 FD E1       8217                   POP	IY
002BD9 CD 67 42    8218   LOCAL2:         CALL	GETVAR
002BDC C2 64 26    8219                   JP	NZ,SYNTAX
002BDF CB 77       8220                   BIT	6,A		;ARRAY?
002BE1 20 14       8221                   JR	NZ,LOCAL4
002BE3 B7          8222                   OR	A		;TYPE
002BE4 08          8223                   EX	AF,AF'
002BE5 CD 7C 20    8224                   CALL	ZERO
002BE8 08          8225                   EX	AF,AF'
002BE9 F5          8226                   PUSH	AF
002BEA F4 74 32    8227                   CALL	P,STOREN	;ZERO
002BED F1          8228                   POP	AF
002BEE 59          8229                   LD	E,C
002BEF FC C5 32    8230                   CALL	M,STORES
002BF2 CD 84 45    8231   LOCAL3:         CALL	NLIST
002BF5 18 E2       8232                   JR	LOCAL2
002BF7             8233   ;
002BF7 DD 36 00 01 8234   LOCAL4:         LD	(IX+0),1	;FLAG LOCAL ARRAY
002BFB DD 36 01 00 8235                   LD	(IX+1),0
002BFF 18 F1       8236                   JR	LOCAL3
002C01             8237   ;
002C01             8238   ;ENDPROC
002C01             8239   ;
002C01 C1          8240   ENDPRO:         POP	BC
002C02 21 6F 2A    8241                   LD	HL,PROCHK	;PROC MARKER
002C05 AF          8242                   XOR	A
002C06 ED 42       8243                   SBC	HL,BC
002C08 28 0B       8244                   JR	Z,ENDPR1
002C0A C5          8245                   PUSH	BC		;PUT BACK
002C0B CD B5 34    8246                   CALL	RESLOC
002C0E 20 F1       8247                   JR	NZ,ENDPRO
002C10 3E 0D       8248                   LD	A,13
002C12 C3 C8 3F    8249                   JP	ERROR_		;"No PROC"
002C15             8250   ;
002C15 FD E1       8251   ENDPR1:         POP	IY
002C17 C3 1D 25    8252   XEQGO6:         JP	XEQ
002C1A             8253   ;
002C1A             8254   ;INPUT #channel,var,var...
002C1A             8255   ;
002C1A CD 5F 37    8256   INPUTN:         CALL	CHNL		;E = CHANNEL NUMBER
002C1D CD 84 45    8257   INPN1:          CALL	NLIST
002C20 D5          8258                   PUSH	DE
002C21 CD 5A 26    8259                   CALL	VAR_
002C24 D1          8260                   POP	DE
002C25 F5          8261                   PUSH	AF		;SAVE TYPE
002C26 E5          8262                   PUSH	HL		;VARPTR
002C27 B7          8263                   OR	A
002C28 FA 4D 2C    8264                   JP	M,INPN2		;STRING
002C2B CD 5D 06    8265                   CALL	OSBGET
002C2E D9          8266                   EXX
002C2F 6F          8267                   LD	L,A
002C30 D9          8268                   EXX
002C31 CD 5D 06    8269                   CALL	OSBGET
002C34 D9          8270                   EXX
002C35 67          8271                   LD	H,A
002C36 D9          8272                   EXX
002C37 CD 5D 06    8273                   CALL	OSBGET
002C3A 6F          8274                   LD	L,A
002C3B CD 5D 06    8275                   CALL	OSBGET
002C3E 67          8276                   LD	H,A
002C3F CD 5D 06    8277                   CALL	OSBGET
002C42 4F          8278                   LD	C,A
002C43 DD E1       8279                   POP	IX
002C45 F1          8280                   POP	AF		;RESTORE TYPE
002C46 D5          8281                   PUSH	DE		;SAVE CHANNEL
002C47 CD 74 32    8282                   CALL	STOREN
002C4A D1          8283                   POP	DE
002C4B 18 D0       8284                   JR	INPN1
002C4D 21 00 53    8285   INPN2:          LD	HL,ACCS
002C50 CD 5D 06    8286   INPN3:          CALL	OSBGET
002C53 FE 0D       8287                   CP	CR
002C55 28 04       8288                   JR	Z,INPN4
002C57 77          8289                   LD	(HL),A
002C58 2C          8290                   INC	L
002C59 20 F5       8291                   JR	NZ,INPN3
002C5B DD E1       8292   INPN4:          POP	IX
002C5D F1          8293                   POP	AF
002C5E D5          8294                   PUSH	DE
002C5F EB          8295                   EX	DE,HL
002C60 CD C2 32    8296                   CALL	STACCS
002C63 D1          8297                   POP	DE
002C64 18 B7       8298                   JR	INPN1
002C66             8299   ;
002C66             8300   ;INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002C66             8301   ;INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002C66             8302   ;
002C66 FE 23       8303   INPUT:          CP	'#'
002C68 28 B0       8304                   JR	Z,INPUTN
002C6A 0E 00       8305                   LD	C,0		;FLAG PROMPT
002C6C FE 86       8306                   CP	TLINE
002C6E 20 04       8307                   JR	NZ,INPUT0
002C70 FD 23       8308                   INC	IY		;SKIP "LINE"
002C72 0E 80       8309                   LD	C,80H
002C74 21 00 54    8310   INPUT0:         LD	HL,BUFFER
002C77 36 0D       8311                   LD	(HL),CR		;INITIALISE EMPTY
002C79 CD BA 35    8312   INPUT1:         CALL	TERMQ
002C7C 28 99       8313                   JR	Z,XEQGO6	;DONE
002C7E FD 23       8314                   INC	IY
002C80 FE 2C       8315                   CP	','
002C82 28 51       8316                   JR	Z,INPUT3	;SKIP COMMA
002C84 FE 3B       8317                   CP	';'
002C86 28 4D       8318                   JR	Z,INPUT3
002C88 E5          8319                   PUSH	HL		;SAVE BUFFER POINTER
002C89 FE 22       8320                   CP	'"'
002C8B 20 0A       8321                   JR	NZ,INPUT6
002C8D C5          8322                   PUSH	BC
002C8E CD FE 19    8323                   CALL	CONS
002C91 C1          8324                   POP	BC
002C92 CD 35 36    8325                   CALL	PTEXT		;PRINT PROMPT
002C95 18 05       8326                   JR	INPUT9
002C97 CD E0 35    8327   INPUT6:         CALL	FORMAT		;SPC, TAB, '
002C9A 20 05       8328                   JR	NZ,INPUT2
002C9C E1          8329   INPUT9:         POP	HL
002C9D CB C1       8330                   SET	0,C		;FLAG NO PROMPT
002C9F 18 D3       8331                   JR	INPUT0
002CA1 FD 2B       8332   INPUT2:         DEC	IY
002CA3 C5          8333                   PUSH	BC
002CA4 CD 5A 26    8334                   CALL	VAR_
002CA7 C1          8335                   POP	BC
002CA8 E1          8336                   POP	HL
002CA9 F5          8337                   PUSH	AF		;SAVE TYPE
002CAA 7E          8338                   LD	A,(HL)
002CAB 23          8339                   INC	HL
002CAC FE 0D       8340                   CP	CR		;BUFFER EMPTY?
002CAE CC D9 2C    8341                   CALL	Z,REFILL
002CB1 CB 79       8342                   BIT	7,C
002CB3 F5          8343                   PUSH	AF
002CB4 C4 53 36    8344                   CALL	NZ,LINES
002CB7 F1          8345                   POP	AF
002CB8 CC 42 36    8346                   CALL	Z,FETCHS
002CBB F1          8347                   POP	AF		;RESTORE TYPE
002CBC C5          8348                   PUSH	BC
002CBD E5          8349                   PUSH	HL
002CBE B7          8350                   OR	A
002CBF FA D0 2C    8351                   JP	M,INPUT4	;STRING
002CC2 F5          8352                   PUSH	AF
002CC3 DD E5       8353                   PUSH	IX
002CC5 CD A6 1C    8354                   CALL	VAL0
002CC8 DD E1       8355                   POP	IX
002CCA F1          8356                   POP	AF
002CCB CD 74 32    8357                   CALL	STOREN
002CCE 18 03       8358                   JR	INPUT5
002CD0 CD C2 32    8359   INPUT4:         CALL	STACCS
002CD3 E1          8360   INPUT5:         POP	HL
002CD4 C1          8361                   POP	BC
002CD5 CB 81       8362   INPUT3:         RES	0,C
002CD7 18 A0       8363                   JR	INPUT1
002CD9             8364   ;
002CD9 CB 41       8365   REFILL:         BIT	0,C
002CDB 20 0A       8366                   JR	NZ,REFIL0	;NO PROMPT
002CDD 3E 3F       8367                   LD	A,'?'
002CDF CD 86 41    8368                   CALL	OUTCHR		;PROMPT
002CE2 3E 20       8369                   LD	A,' '
002CE4 CD 86 41    8370                   CALL	OUTCHR
002CE7 21 00 54    8371   REFIL0:         LD	HL,BUFFER
002CEA C5          8372                   PUSH	BC
002CEB E5          8373                   PUSH	HL
002CEC DD E5       8374                   PUSH	IX
002CEE CD E9 05    8375                   CALL	OSLINE
002CF1 DD E1       8376                   POP	IX
002CF3 E1          8377                   POP	HL
002CF4 C1          8378                   POP	BC
002CF5 47          8379                   LD	B,A		;POS AT ENTRY
002CF6 AF          8380                   XOR	A
002CF7 32 FB 55    8381                   LD	(COUNT),A
002CFA B8          8382                   CP	B
002CFB C8          8383                   RET	Z
002CFC 7E          8384   REFIL1:         LD	A,(HL)
002CFD FE 0D       8385                   CP	CR
002CFF C8          8386                   RET	Z
002D00 23          8387                   INC	HL
002D01 10 F9       8388                   DJNZ	REFIL1
002D03 C9          8389                   RET
002D04             8390   ;
002D04             8391   ;READ var[,var...]
002D04             8392   ;
002D04 FE 23       8393   READ:           CP	'#'
002D06 CA 1A 2C    8394                   JP	Z,INPUTN
002D09 2A F0 55    8395                   LD	HL,(DATPTR)
002D0C 7E          8396   READ0:          LD	A,(HL)
002D0D FE 3A       8397                   CP	':'
002D0F CC FC 2C    8398                   CALL	Z,REFIL1
002D12 23          8399                   INC	HL		;SKIP COMMA | "DATA"
002D13 FE 0D       8400                   CP	CR		;END OF DATA STMT?
002D15 CC 44 2D    8401                   CALL	Z,GETDAT
002D18 E5          8402                   PUSH	HL
002D19 CD 5A 26    8403                   CALL	VAR_
002D1C E1          8404                   POP	HL
002D1D B7          8405                   OR	A
002D1E FA 34 2D    8406                   JP	M,READ1		;STRING
002D21 E5          8407                   PUSH	HL
002D22 FD E3       8408                   EX	(SP),IY
002D24 F5          8409                   PUSH	AF		;SAVE TYPE
002D25 DD E5       8410                   PUSH	IX
002D27 CD B0 18    8411                   CALL	EXPRN
002D2A DD E1       8412                   POP	IX
002D2C F1          8413                   POP	AF
002D2D CD 74 32    8414                   CALL	STOREN
002D30 FD E3       8415                   EX	(SP),IY
002D32 18 07       8416                   JR	READ2
002D34 CD 42 36    8417   READ1:          CALL	FETCHS
002D37 E5          8418                   PUSH	HL
002D38 CD C2 32    8419                   CALL	STACCS
002D3B E1          8420   READ2:          POP	HL
002D3C 22 F0 55    8421                   LD	(DATPTR),HL
002D3F CD 84 45    8422                   CALL	NLIST
002D42 18 C8       8423                   JR	READ0
002D44             8424   ;
002D44 CD 7D 36    8425   GETDAT:         CALL	DSRCH
002D47 23          8426                   INC	HL
002D48 D0          8427                   RET	NC
002D49 3E 2A       8428                   LD	A,42
002D4B 18 64       8429                   JR	ERROR4ex		;"Out of DATA"
002D4D             8430   ;
002D4D             8431   ;IF expr statement
002D4D             8432   ;IF expr THEN statement [ELSE statement]
002D4D             8433   ;IF expr THEN line [ELSE line]
002D4D             8434   ;IF expr THEN
002D4D             8435   ;
002D4D CD B7 18    8436   IF_:            CALL	EXPRI
002D50 CD DD 1F    8437                   CALL	TEST
002D53 28 2A       8438                   JR	Z,IFNOT		;FALSE
002D55 FD 7E 00    8439                   LD	A,(IY)
002D58 FE 8C       8440                   CP	TTHEN
002D5A C2 1D 25    8441                   JP	NZ,XEQ
002D5D FD 23       8442   IF0:            INC	IY		;SKIP "THEN"
002D5F FD 7E 00    8443                   LD	A,(IY)
002D62 FE 3B       8444                   CP	';'
002D64 28 F7       8445                   JR	Z,IF0
002D66 CD 8F 45    8446   IF1:            CALL	NXT
002D69 FE 8D       8447                   CP	TLINO
002D6B C2 1D 25    8448                   JP	NZ,XEQ		;STATEMENT FOLLOWS
002D6E C3 38 29    8449                   JP	GOTO		;LINE NO. FOLLOWS
002D71             8450   ;
002D71 FD 7E 00    8451   IFELSE:         LD	A,(IY)
002D74 FD 23       8452                   INC	IY
002D76 FE 3B       8453                   CP	';'
002D78 20 0A       8454                   JR	NZ,IFNEXT
002D7A 18 1E       8455                   JR	IFTHEN
002D7C             8456   ;
002D7C CD 1D 37    8457   IF2:            CALL	QUOTE		;SKIP STRING
002D7F FD 7E 00    8458   IFNOT:          LD	A,(IY)
002D82 FD 23       8459                   INC	IY
002D84 FE 22       8460   IFNEXT:         CP	'"'
002D86 28 F4       8461                   JR	Z,IF2		;QUOTED STRING
002D88 FE F4       8462                   CP	TREM
002D8A CA B5 25    8463                   JP	Z,REM		;REM
002D8D FE 0D       8464                   CP	CR
002D8F CA 08 25    8465                   JP	Z,XEQ0		;END OF LINE
002D92 FE 8B       8466                   CP	TELSE
002D94 28 D0       8467                   JR	Z,IF1		;ELSE CLAUSE
002D96 FE 8C       8468                   CP	TTHEN
002D98 20 E5       8469                   JR	NZ,IFNOT	;TRY FOR END AGAIN
002D9A FD 7E 00    8470   IFTHEN:         LD	A,(IY)
002D9D FE 0D       8471                   CP	CR
002D9F 20 D0       8472                   JR	NZ,IFELSE
002DA1 01 8B 00    8473                   LD	BC,TELSE
002DA4 11 8C CD    8474                   LD	DE,TENDIF*256+TTHEN
002DA7 FD 23       8475                   INC	IY
002DA9 CD 95 36    8476                   CALL	NSCAN
002DAC CA 24 25    8477                   JP	Z,XEQ1
002DAF 3E 31       8478   NENDIF:         LD	A,49
002DB1 C3 C8 3F    8479   ERROR4ex:         JP	ERROR_		;"Missing ENDIF"
002DB4             8480   ;
002DB4             8481   ; ELSE (multi-line)
002DB4             8482   ;
002DB4 01 FD FF    8483   MELSE:          LD	BC,-3
002DB7 FD 09       8484                   ADD	IY,BC
002DB9 01 CD 00    8485                   LD	BC,TENDIF
002DBC 11 8C CD    8486                   LD	DE,TENDIF*256+TTHEN
002DBF CD 95 36    8487                   CALL	NSCAN
002DC2 20 EB       8488                   JR	NZ,NENDIF
002DC4 C3 1D 25    8489   XEQGO7:         JP	XEQ
002DC7             8490   ;
002DC7             8491   ; WHEN and OTHERWISE:
002DC7             8492   ;
002DC7 01 FD FF    8493   WHEN:           LD	BC,-3
002DCA FD 09       8494                   ADD	IY,BC
002DCC 01 CB 00    8495                   LD	BC,TENDCASE
002DCF 11 CA CB    8496                   LD	DE,TENDCASE*256+TOF
002DD2 CD 95 36    8497                   CALL	NSCAN
002DD5 28 ED       8498                   JR	Z,XEQGO7
002DD7 3E 2F       8499                   LD	A,47
002DD9 18 D6       8500                   JR	ERROR4ex		;"Missing ENDCASE"
002DDB             8501   ;
002DDB             8502   ; CASE
002DDB             8503   ;
002DDB CD 86 17    8504   CASE:           CALL	EXPR		;String or numeric
002DDE 08          8505                   EX	AF,AF'
002DDF 06 00       8506                   LD	B,0		;Flag numeric
002DE1 F2 EA 2D    8507                   JP	P,CASE6		;numeric
002DE4 CD 9D 20    8508                   CALL	PUSHS		;put string on stack
002DE7 C1          8509                   POP	BC		;C = length
002DE8 06 01       8510                   LD	B,1		;Flag string
002DEA FD 7E 00    8511   CASE6:          LD	A,(IY)
002DED FD 23       8512                   INC	IY
002DEF FE CA       8513                   CP	TOF
002DF1 3E 25       8514                   LD	A,37
002DF3 20 BC       8515                   JR	NZ,ERROR4ex	;"Missing OF"
002DF5 FD 7E 00    8516                   LD	A,(IY)
002DF8 FD 23       8517                   INC	IY		;Address line-length byte
002DFA FE 0D       8518                   CP	CR
002DFC 3E 30       8519                   LD	A,48
002DFE 20 B1       8520                   JR	NZ,ERROR4ex	;"OF not last"
002E00 AF          8521   CASE1:          XOR	A		;Level
002E01 D9          8522   CASE0:          EXX
002E02 E5          8523                   PUSH	HL		;Push to stack
002E03 D9          8524                   EXX
002E04 E5          8525                   PUSH	HL
002E05 C5          8526                   PUSH	BC
002E06 6F          8527                   LD	L,A		;Level
002E07 01 C9 CC    8528                   LD	BC,TOTHERWISE*256+TWHEN
002E0A 11 CA CB    8529                   LD	DE,TENDCASE*256+TOF
002E0D CD 97 36    8530                   CALL	NSCAN1
002E10 C1          8531                   POP	BC		;Restore from stack
002E11 E1          8532                   POP	HL
002E12 D9          8533                   EXX
002E13 E1          8534                   POP	HL
002E14 D9          8535                   EXX
002E15 3E 2F       8536                   LD	A,47
002E17 C2 C8 3F    8537                   JP	NZ,ERROR_	;Missing ENDCASE
002E1A FD 7E FF    8538                   LD	A,(IY-1)
002E1D FE CB       8539                   CP	TENDCASE
002E1F 28 56       8540                   JR	Z,CASE9
002E21 FE CC       8541                   CP	TOTHERWISE
002E23 28 52       8542                   JR	Z,CASE9
002E25 CB 40       8543   CASE4:          BIT	0,B		;Numeric or string?
002E27 20 69       8544                   JR	NZ,CASE3
002E29 C5          8545                   PUSH	BC		;Type/exponent/length
002E2A E5          8546                   PUSH	HL		;MS 32 bits
002E2B D9          8547                   EXX
002E2C E5          8548                   PUSH	HL		;LS 32 bits
002E2D D9          8549                   EXX
002E2E CD B0 18    8550                   CALL	EXPRN
002E31 DD 21 00 00 8551                   LD	IX,0
002E35 DD 39       8552                   ADD	IX,SP		;Address stack
002E37 D9          8553                   EXX
002E38 DD 5E 00    8554                   LD	E,(IX+0)	;Get LS 32-bits
002E3B DD 56 01    8555                   LD	D,(IX+1)
002E3E D9          8556                   EXX
002E3F DD 5E 02    8557                   LD	E,(IX+2)
002E42 DD 56 03    8558                   LD	D,(IX+3)	;Get MS 32-bits
002E45 DD 46 04    8559                   LD	B,(IX+4)	;Get exponent
002E48 3E 09       8560                   LD	A,9
002E4A CD 99 45    8561                   CALL	FPP		;In case integer vs float
002E4D 7D          8562                   LD	A,L
002E4E B7          8563                   OR	A		;NZ if equal
002E4F D9          8564                   EXX
002E50 E1          8565                   POP	HL
002E51 D9          8566                   EXX
002E52 E1          8567                   POP	HL
002E53 C1          8568                   POP	BC
002E54 20 2C       8569                   JR	NZ,CASE5	;Match found
002E56 FD 7E 00    8570   CASE2:          LD	A,(IY)
002E59 FD 23       8571                   INC	IY
002E5B FE 2C       8572                   CP	','
002E5D 28 C6       8573                   JR	Z,CASE4		;Not found, try another
002E5F D9          8574                   EXX
002E60 FD E5       8575                   PUSH	IY
002E62 E3          8576                   EX	(SP),HL
002E63 3E 0D       8577                   LD	A,CR
002E65 47          8578                   LD	B,A
002E66 ED B1       8579                   CPIR			;Find CR
002E68 E3          8580                   EX	(SP),HL
002E69 FD E1       8581                   POP	IY
002E6B D9          8582                   EXX
002E6C FD 7E FE    8583                   LD	A,(IY-2)	;Last token in previous line
002E6F FE CA       8584                   CP	TOF		;CASE statement in WHEN line
002E71 20 8D       8585                   JR	NZ,CASE1
002E73 3E 01       8586                   LD	A,1
002E75 18 8A       8587                   JR	CASE0
002E77             8588   ;
002E77             8589   ;Finished, level stack if string:
002E77             8590   ;
002E77 CB 40       8591   CASE9:          BIT	0,B
002E79 28 49       8592                   JR	Z,XEQGO5
002E7B 26 00       8593                   LD	H,0
002E7D 69          8594                   LD	L,C
002E7E 39          8595                   ADD	HL,SP
002E7F F9          8596                   LD	SP,HL
002E80 18 42       8597                   JR	XEQGO5
002E82             8598   ;
002E82             8599   ;Matched, so skip any more expressions:
002E82             8600   ;
002E82 CD 8F 45    8601   CASE5:          CALL	NXT
002E85 FE 2C       8602                   CP	','
002E87 20 EE       8603                   JR	NZ,CASE9	;End of list
002E89 FD 23       8604                   INC	IY
002E8B C5          8605                   PUSH	BC		;Save type and string length
002E8C CD 86 17    8606                   CALL	EXPR		;Evaluate but discard
002E8F C1          8607                   POP	BC
002E90 18 F0       8608                   JR	CASE5
002E92             8609   ;
002E92             8610   ;String compare:
002E92             8611   ;
002E92 C5          8612   CASE3:          PUSH	BC
002E93 CD C0 18    8613                   CALL	EXPRS
002E96 C1          8614                   POP	BC
002E97 21 00 00    8615                   LD	HL,0
002E9A 39          8616                   ADD	HL,SP
002E9B 43          8617                   LD	B,E
002E9C 11 00 53    8618                   LD	DE,ACCS
002E9F C5          8619                   PUSH	BC
002EA0 CD 79 20    8620                   CALL	SCP		;String compare
002EA3 C1          8621                   POP	BC
002EA4 06 01       8622                   LD	B,1
002EA6 20 AE       8623                   JR	NZ,CASE2
002EA8 18 D8       8624                   JR	CASE5
002EAA             8625   ;
002EAA             8626   ; WHILE
002EAA             8627   ;
002EAA FD E5       8628   WHILE:          PUSH	IY		;Save current position
002EAC CD 0A 33    8629                   CALL	CHECK
002EAF CD B2 2E    8630                   CALL	WHICHK		;Push marker
002EB2 CD B7 18    8631   WHICHK:         CALL	EXPRI
002EB5 CD DD 1F    8632                   CALL	TEST
002EB8 20 0A       8633                   JR	NZ,XEQGO5
002EBA C1          8634                   POP	BC		;Pop marker
002EBB C1          8635                   POP	BC		;Level stack
002EBC 01 C7 CE    8636                   LD	BC,TWHILE+[TENDWHILE*256]
002EBF 16 01       8637                   LD	D,1
002EC1 CD D4 36    8638                   CALL	WSRCH
002EC4 C3 1D 25    8639   XEQGO5:         JP	XEQ
002EC7             8640   ;
002EC7             8641   ; ENDWHILE
002EC7             8642   ;
002EC7 C1          8643   ENDWHI:         POP	BC		;Marker
002EC8 D1          8644                   POP	DE		;Saved text pointer
002EC9 D5          8645                   PUSH	DE
002ECA C5          8646                   PUSH	BC
002ECB B7          8647                   OR	A
002ECC 21 B2 2E    8648                   LD	HL,WHICHK
002ECF ED 42       8649                   SBC	HL,BC
002ED1 28 0B       8650                   JR	Z,ENDWH1
002ED3 3E 03       8651                   LD	A,3
002ED5 CD B5 34    8652                   CALL	RESLOC
002ED8 20 ED       8653                   JR	NZ,ENDWHI
002EDA 3E 2E       8654                   LD	A,46
002EDC 18 4F       8655                   JR	ERROR5		;"Not in a WHILE loop"
002EDE             8656   ;
002EDE FD E5       8657   ENDWH1:         PUSH	IY
002EE0 FD 21 00 00 8658                   LD	IY,0
002EE4 FD 19       8659                   ADD	IY,DE
002EE6 CD B7 18    8660                   CALL	EXPRI
002EE9 CD DD 1F    8661                   CALL	TEST
002EEC D1          8662                   POP	DE		;Text pointer
002EED 20 D5       8663                   JR	NZ,XEQGO5
002EEF C1          8664                   POP	BC		;Junk marker
002EF0 C1          8665                   POP	BC		;Junk pointer
002EF1 FD 21 00 00 8666                   LD	IY,0
002EF5 FD 19       8667                   ADD	IY,DE
002EF7 18 CB       8668                   JR	XEQGO5
002EF9             8669   ;
002EF9             8670   ;CLS
002EF9             8671   ;
002EF9 CD 10 0E    8672   CLS:            CALL	CLRSCN
002EFC AF          8673                   XOR	A
002EFD 32 FB 55    8674                   LD	(COUNT),A
002F00 18 C2       8675                   JR	XEQGO5
002F02             8676   ;
002F02             8677   ;STOP
002F02             8678   ;
002F02 CD 7E 45    8679   STOP:           CALL	TELL
002F05 0D          8680                   DB	CR
002F06 0A          8681                   DB	LF
002F07 FA          8682                   DB	TSTOP
002F08 00          8683                   DB	0
002F09 CD DF 41    8684                   CALL	SETLIN		;FIND CURRENT LINE
002F0C CD 06 42    8685                   CALL	SAYLN
002F0F CD 7F 41    8686                   CALL	CRLF
002F12 C3 34 38    8687                   JP	CLOOP
002F15             8688   ;
002F15             8689   ;REPORT
002F15             8690   ;
002F15 CD 69 45    8691   REPOR:          CALL	REPORT
002F18 18 AA       8692                   JR	XEQGO5
002F1A             8693   ;
002F1A             8694   ;CLEAR
002F1A             8695   ;
002F1A CD C7 40    8696   CLR:            CALL	CLEAR
002F1D 2A DC 55    8697                   LD	HL,(PAGE_)
002F20 18 3B       8698                   JR	RESTR1
002F22             8699   ;
002F22             8700   ;RESTORE ERROR
002F22             8701   ;
002F22 FD 23       8702   RESERR:         INC	IY
002F24 3E 02       8703                   LD	A,2
002F26 CD B5 34    8704                   CALL	RESLOC
002F29 20 99       8705                   JR	NZ,XEQGO5
002F2B 3E 35       8706                   LD	A,53		;ON ERROR not LOCAL
002F2D C3 C8 3F    8707   ERROR5:         JP	ERROR_
002F30             8708   ;
002F30             8709   ;RESTORE DATA
002F30             8710   ;
002F30 FD 23       8711   RESDAT:         INC	IY
002F32 3E 01       8712                   LD	A,1
002F34 CD B5 34    8713                   CALL	RESLOC
002F37 20 8B       8714                   JR	NZ,XEQGO5
002F39 3E 36       8715                   LD	A,54		;'DATA not LOCAL'
002F3B 21          8716                   DB	21H
002F3C 3E 29       8717   NOLINE:         LD	A,41		;'No such line'
002F3E 18 ED       8718                   JR	ERROR5
002F40             8719   ;
002F40             8720   ;RESTORE [line]
002F40             8721   ;
002F40 FE 85       8722   RESTOR:         CP	TERROR
002F42 28 DE       8723                   JR	Z,RESERR
002F44 FE DC       8724                   CP	TDATA
002F46 28 E8       8725                   JR	Z,RESDAT
002F48 FE 2B       8726                   CP	'+'
002F4A 28 1A       8727                   JR	Z,RESREL
002F4C 2A DC 55    8728                   LD	HL,(PAGE_)
002F4F CD BA 35    8729                   CALL	TERMQ
002F52 28 09       8730                   JR	Z,RESTR1
002F54 CD E4 18    8731                   CALL	ITEMI
002F57 D9          8732                   EXX
002F58 CD C7 41    8733                   CALL	FINDL		;SEARCH FOR LINE
002F5B 20 DF       8734                   JR	NZ,NOLINE
002F5D CD 7D 36    8735   RESTR1:         CALL	DSRCH
002F60 22 F0 55    8736                   LD	(DATPTR),HL
002F63 C3 1D 25    8737                   JP	XEQ
002F66             8738   ;
002F66 CD B7 18    8739   RESREL:         CALL	EXPRI
002F69 D9          8740                   EXX
002F6A EB          8741                   EX	DE,HL
002F6B FD E5       8742                   PUSH	IY
002F6D E1          8743                   POP	HL
002F6E 3E 0D       8744                   LD	A,CR
002F70 47          8745                   LD	B,A
002F71 ED B1       8746                   CPIR			;FIND LINE END
002F73 1D          8747                   DEC	E
002F74 28 E7       8748                   JR	Z,RESTR1
002F76 FA 5D 2F    8749                   JP	M,RESTR1
002F79 AF          8750                   XOR	A
002F7A 47          8751                   LD	B,A
002F7B 4E          8752   RESTR2:         LD	C,(HL)
002F7C B9          8753                   CP	C
002F7D 28 BD       8754                   JR	Z,NOLINE
002F7F 09          8755                   ADD	HL,BC
002F80 1D          8756                   DEC	E
002F81 20 F8       8757                   JR	NZ,RESTR2
002F83 18 D8       8758                   JR	RESTR1
002F85             8759   ;
002F85             8760   ;PTR#channel=expr
002F85             8761   ;PAGE=expr
002F85             8762   ;TIME=expr
002F85             8763   ;LOMEM=expr
002F85             8764   ;HIMEM=expr
002F85             8765   ;
002F85 CD 55 37    8766   PTR:            CALL	CHANEL
002F88 CD D3 35    8767                   CALL	EQUALS
002F8B 7B          8768                   LD	A,E
002F8C F5          8769                   PUSH	AF
002F8D CD B7 18    8770                   CALL	EXPRI
002F90 E5          8771                   PUSH	HL
002F91 D9          8772                   EXX
002F92 D1          8773                   POP	DE
002F93 F1          8774                   POP	AF
002F94 CD 97 06    8775                   CALL	PUTPTR
002F97 18 61       8776                   JR	XEQGO1ex
002F99             8777   ;
002F99 CD D3 35    8778   PAGEV:          CALL	EQUALS
002F9C CD B7 18    8779                   CALL	EXPRI
002F9F D9          8780                   EXX
002FA0 2E 00       8781                   LD	L,0
002FA2 22 DC 55    8782                   LD	(PAGE_),HL
002FA5 18 53       8783                   JR	XEQGO1ex
002FA7             8784   ;
002FA7 FE 24       8785   TIMEV:          CP	'$'
002FA9 28 0E       8786                   JR	Z,TIMEVS
002FAB CD D3 35    8787                   CALL	EQUALS
002FAE CD B7 18    8788                   CALL	EXPRI
002FB1 E5          8789                   PUSH	HL
002FB2 D9          8790                   EXX
002FB3 D1          8791                   POP	DE
002FB4 CD DB 0D    8792                   CALL	PUTIME
002FB7 18 41       8793                   JR	XEQGO1ex
002FB9             8794   ;
002FB9 FD 23       8795   TIMEVS:         INC	IY		;SKIP '$'
002FBB CD D3 35    8796                   CALL	EQUALS
002FBE CD C0 18    8797                   CALL	EXPRS
002FC1 CD F8 0D    8798                   CALL	PUTIMS
002FC4 18 34       8799                   JR	XEQGO1ex
002FC6             8800   ;
002FC6 CD D3 35    8801   LOMEMV:         CALL	EQUALS
002FC9 CD B7 18    8802                   CALL	EXPRI
002FCC CD C7 40    8803                   CALL	CLEAR
002FCF D9          8804                   EXX
002FD0 22 DE 55    8805                   LD	(LOMEM),HL
002FD3 22 E0 55    8806                   LD	(FREE),HL
002FD6 18 22       8807                   JR	XEQGO1ex
002FD8             8808   ;
002FD8 CD D3 35    8809   HIMEMV:         CALL	EQUALS
002FDB CD B7 18    8810                   CALL	EXPRI
002FDE D9          8811                   EXX
002FDF ED 5B E0 55 8812                   LD	DE,(FREE)
002FE3 14          8813                   INC	D
002FE4 AF          8814                   XOR	A
002FE5 ED 52       8815                   SBC	HL,DE
002FE7 19          8816                   ADD	HL,DE
002FE8 DA C8 3F    8817                   JP	C,ERROR_		;"No room"
002FEB ED 5B E2 55 8818                   LD	DE,(HIMEM)
002FEF 22 E2 55    8819                   LD	(HIMEM),HL
002FF2 EB          8820                   EX	DE,HL
002FF3 ED 72       8821                   SBC	HL,SP
002FF5 C2 1D 25    8822                   JP	NZ,XEQ
002FF8 EB          8823                   EX	DE,HL
002FF9 F9          8824                   LD	SP,HL		;LOAD STACK POINTER
002FFA C3 1D 25    8825   XEQGO1ex:         JP	XEQ
002FFD             8826   ;
002FFD             8827   ;WIDTH expr
002FFD             8828   ;
002FFD CD B7 18    8829   WIDTHV:         CALL	EXPRI
003000 D9          8830                   EXX
003001 7D          8831                   LD	A,L
003002 32 FC 55    8832                   LD	(WIDTH),A
003005 18 F3       8833                   JR	XEQGO1ex
003007             8834   ;
003007             8835   ;TRACE ON
003007             8836   ;TRACE OFF
003007             8837   ;TRACE line
003007             8838   ;
003007 FD 23       8839   TRACE:          INC	IY
003009 21 00 00    8840                   LD	HL,0
00300C FE EE       8841                   CP	TON
00300E 28 0A       8842                   JR	Z,TRACE0
003010 FE 87       8843                   CP	TOFF
003012 28 07       8844                   JR	Z,TRACE1
003014 FD 2B       8845                   DEC	IY
003016 CD B7 18    8846                   CALL	EXPRI
003019 D9          8847                   EXX
00301A 2B          8848   TRACE0:         DEC	HL
00301B 22 E6 55    8849   TRACE1:         LD	(TRACEN),HL
00301E 18 DA       8850                   JR	XEQGO1ex
003020             8851   ;
003020             8852   ;VDU expr,expr;....[|]
003020             8853   ;
003020 CD B7 18    8854   VDU:            CALL	EXPRI
003023 D9          8855                   EXX
003024 7D          8856                   LD	A,L
003025 06 01       8857                   LD	B,1
003027 CD 97 05    8858   VDU1:           CALL	OSWRCH
00302A 10 FB       8859                   DJNZ	VDU1
00302C FD 7E 00    8860                   LD	A,(IY)
00302F FE 7C       8861                   CP	'|'
003031 28 15       8862                   JR	Z,VDU4
003033 FE 2C       8863                   CP	','
003035 28 08       8864                   JR	Z,VDU2
003037 FE 3B       8865                   CP	';'
003039 20 06       8866                   JR	NZ,VDU3
00303B 7C          8867                   LD	A,H
00303C CD 97 05    8868                   CALL	OSWRCH
00303F FD 23       8869   VDU2:           INC	IY
003041 CD BA 35    8870   VDU3:           CALL	TERMQ
003044 20 DA       8871                   JR	NZ,VDU
003046 18 B2       8872                   JR	XEQGO1ex
003048             8873   ;
003048 FD 23       8874   VDU4:           INC	IY
00304A AF          8875                   XOR	A
00304B 06 09       8876                   LD	B,9
00304D 18 D8       8877                   JR	VDU1
00304F             8878   ;
00304F             8879   ;CLOSE channel number
00304F             8880   ;
00304F CD 55 37    8881   CLOSE:          CALL	CHANEL
003052 CD 55 06    8882                   CALL	OSSHUT
003055 18 A3       8883                   JR	XEQGO1ex
003057             8884   ;
003057             8885   ;BPUT #channel,byte
003057             8886   ;BPUT #channel,string[;]
003057             8887   ;
003057 CD 55 37    8888   BPUT:           CALL	CHANEL		;CHANNEL NUMBER
00305A D5          8889                   PUSH	DE
00305B CD 26 21    8890                   CALL	COMMA
00305E CD 86 17    8891                   CALL	EXPR
003061 08          8892                   EX	AF,AF'
003062 FA 70 30    8893                   JP	M,BPUTS
003065 CD 9B 1C    8894                   CALL	SFIX
003068 D9          8895                   EXX
003069 7D          8896                   LD	A,L
00306A D1          8897                   POP	DE
00306B CD 65 06    8898                   CALL	OSBPUT
00306E 18 8A       8899   BPUTX:          JR	XEQGO1ex
003070             8900   ;
003070 7B          8901   BPUTS:          LD	A,E
003071 D1          8902                   POP	DE
003072 57          8903                   LD	D,A
003073 21 00 53    8904                   LD	HL,ACCS
003076 7E          8905   BPUTS1:         LD	A,(HL)
003077 23          8906                   INC	HL
003078 CD 65 06    8907                   CALL	OSBPUT
00307B 15          8908                   DEC	D
00307C 20 F8       8909                   JR	NZ,BPUTS1
00307E CD 8F 45    8910                   CALL	NXT
003081 FE 3B       8911                   CP	';'
003083 FD 23       8912                   INC	IY
003085 28 E7       8913                   JR	Z,BPUTX
003087 3E 0A       8914                   LD	A,LF
003089 CD 65 06    8915                   CALL	OSBPUT
00308C FD 2B       8916                   DEC	IY
00308E 18 DE       8917                   JR	BPUTX
003090             8918   ;
003090             8919   ;CALL address[,var[,var...]]
003090             8920   ;
003090 CD B7 18    8921   CALL:           CALL	EXPRI		;ADDRESS
003093 D9          8922                   EXX
003094 E5          8923                   PUSH	HL		;SAVE IT
003095 06 00       8924                   LD	B,0		;PARAMETER COUNTER
003097 11 00 54    8925                   LD	DE,BUFFER	;VECTOR
00309A CD 8F 45    8926   CALL1:          CALL	NXT
00309D FE 2C       8927                   CP	','
00309F 20 17       8928                   JR	NZ,CALL2
0030A1 FD 23       8929                   INC	IY
0030A3 04          8930                   INC	B
0030A4 CD 8F 45    8931                   CALL	NXT
0030A7 C5          8932                   PUSH	BC
0030A8 D5          8933                   PUSH	DE
0030A9 CD 5A 26    8934                   CALL	VAR_
0030AC D1          8935                   POP	DE
0030AD C1          8936                   POP	BC
0030AE 13          8937                   INC	DE
0030AF 12          8938                   LD	(DE),A		;PARAMETER TYPE
0030B0 13          8939                   INC	DE
0030B1 EB          8940                   EX	DE,HL
0030B2 73          8941                   LD	(HL),E		;PARAMETER ADDRESS
0030B3 23          8942                   INC	HL
0030B4 72          8943                   LD	(HL),D
0030B5 EB          8944                   EX	DE,HL
0030B6 18 E2       8945                   JR	CALL1
0030B8 78          8946   CALL2:          LD	A,B
0030B9 32 00 54    8947                   LD	(BUFFER),A	;PARAMETER COUNT
0030BC E1          8948                   POP	HL		;RESTORE ADDRESS
0030BD CD C7 30    8949                   CALL	USR1
0030C0 C3 1D 25    8950                   JP	XEQ
0030C3             8951   ;
0030C3             8952   ;USR(address)
0030C3             8953   ;
0030C3 CD E4 18    8954   USR:            CALL	ITEMI
0030C6 D9          8955                   EXX
0030C7 E5          8956   USR1:           PUSH	HL		;ADDRESS ON STACK
0030C8 FD E3       8957                   EX	(SP),IY
0030CA 24          8958                   INC	H		;PAGE &FF?
0030CB 21 F6 30    8959                   LD	HL,USR2		;RETURN ADDRESS
0030CE E5          8960                   PUSH	HL
0030CF DD 21 00 55 8961                   LD	IX,STAVAR
0030D3 CC 2C 11    8962                   CALL	Z,OSCALL	;INTERCEPT PAGE &FF
0030D6 DD 4E 18    8963                   LD	C,(IX+24)
0030D9 C5          8964                   PUSH	BC
0030DA F1          8965                   POP	AF		;LOAD FLAGS
0030DB DD 7E 04    8966                   LD	A,(IX+4)	;LOAD Z80 REGISTERS
0030DE DD 46 08    8967                   LD	B,(IX+8)
0030E1 DD 4E 0C    8968                   LD	C,(IX+12)
0030E4 DD 56 10    8969                   LD	D,(IX+16)
0030E7 DD 5E 14    8970                   LD	E,(IX+20)
0030EA DD 66 20    8971                   LD	H,(IX+32)
0030ED DD 6E 30    8972                   LD	L,(IX+48)
0030F0 DD 21 00 54 8973                   LD	IX,BUFFER
0030F4 FD E9       8974                   JP	(IY)		;OFF TO USER ROUTINE
0030F6 FD E1       8975   USR2:           POP	IY
0030F8 AF          8976                   XOR	A
0030F9 4F          8977                   LD	C,A
0030FA C9          8978                   RET
0030FB             8979   ;
0030FB             8980   ; LEFT$(A$[,N]) = string
0030FB             8981   ; MID$(A$,N[,M]) = string
0030FB             8982   ; RIGHT$(A$[,N]) = string
0030FB             8983   ;
0030FB CD 42 26    8984   LEFTSL:         CALL    GETSTR
0030FE 21 00 FF    8985                   LD	HL,0FF00H	;Default all but last
003101 20 48       8986                   JR	NZ,MIDSL1
003103 18 26       8987                   JR	MIDSL0
003105             8988   ;
003105 CD 42 26    8989   RITESL:         CALL	GETSTR
003108 21 FF FF    8990                   LD	HL,0FFFFH	;Default last char only
00310B 20 3E       8991                   JR	NZ,MIDSL1
00310D 18 1C       8992                   JR	MIDSL0
00310F             8993   ;
00310F CD 42 26    8994   MIDSL:          CALL	GETSTR
003112 3E 05       8995                   LD	A,5
003114 C2 C8 3F    8996                   JP	NZ,ERROR_	;'Missing comma'
003117 FD 23       8997                   INC	IY
003119 DD E5       8998                   PUSH	IX
00311B CD B7 18    8999                   CALL	EXPRI
00311E DD E1       9000                   POP	IX
003120 D9          9001                   EXX
003121 CD 8F 45    9002                   CALL	NXT
003124 2D          9003                   DEC	L
003125 26 FE       9004                   LD	H,254		;Default rest of string
003127 FE 2C       9005                   CP	','
003129 20 20       9006                   JR	NZ,MIDSL1
00312B FD 23       9007   MIDSL0:         INC	IY
00312D E5          9008                   PUSH	HL
00312E DD E5       9009                   PUSH	IX
003130 CD B7 18    9010                   CALL	EXPRI
003133 DD E1       9011                   POP	IX
003135 D9          9012                   EXX
003136 7D          9013                   LD	A,L
003137 E1          9014                   POP	HL
003138 B7          9015                   OR	A
003139 28 0D       9016                   JR	Z,MIDSL2	;Zero length
00313B 3D          9017                   DEC	A
00313C 85          9018                   ADD	A,L
00313D 67          9019                   LD	H,A
00313E 30 0B       9020                   JR	NC,MIDSL1
003140 7D          9021                   LD	A,L
003141 3C          9022                   INC	A
003142 28 07       9023                   JR	Z,MIDSL1
003144 26 FE       9024                   LD	H,254
003146 18 03       9025                   JR	MIDSL1
003148             9026   ;
003148 21 01 00    9027   MIDSL2:         LD	HL,1
00314B CD 32 21    9028   MIDSL1:         CALL	BRAKET
00314E CD D3 35    9029                   CALL	EQUALS
003151 E5          9030                   PUSH	HL
003152 DD E5       9031                   PUSH	IX
003154 CD C0 18    9032                   CALL	EXPRS
003157 DD E1       9033                   POP	IX
003159 E1          9034                   POP	HL
00315A 4B          9035                   LD	C,E
00315B DD 46 00    9036                   LD	B,(IX+0)
00315E DD 5E 02    9037                   LD	E,(IX+2)
003161 DD 56 03    9038                   LD	D,(IX+3)
003164             9039   ;
003164             9040   ; Source string at ACCS, length C
003164             9041   ; Destination string at DE, length B
003164             9042   ; L = first character to modify 0-254
003164             9043   ; H =  last character to modify 0-254
003164             9044   ; IF L=255 THEN modify rightmost H + 2 chars
003164             9045   ; ELSE IF H=255 modify all but last character
003164             9046   ; ELSE IF L > H do nothing
003164             9047   ; IX = destination VARPTR
003164             9048   ;
003164 7D          9049                   LD	A,L
003165 3C          9050                   INC	A
003166 20 0F       9051                   JR	NZ,SUBSL1
003168 24          9052                   INC	H
003169 24          9053                   INC	H
00316A 79          9054                   LD	A,C
00316B BC          9055                   CP	H
00316C 30 01       9056                   JR	NC,SUBSL0
00316E 67          9057                   LD	H,A
00316F 78          9058   SUBSL0:         LD	A,B
003170 94          9059                   SUB	H
003171 30 01       9060                   JR	NC,SUBSL6
003173 AF          9061                   XOR	A
003174 6F          9062   SUBSL6:         LD	L,A
003175 18 12       9063                   JR	SUBSL5
003177             9064   ;
003177 7C          9065   SUBSL1:         LD	A,H
003178 3C          9066                   INC	A
003179 20 06       9067                   JR	NZ,SUBSL2
00317B 78          9068                   LD	A,B
00317C D6 02       9069                   SUB	2
00317E 38 24       9070                   JR	C,SUBSL9
003180 67          9071                   LD	H,A
003181 7D          9072   SUBSL2:         LD	A,L
003182 B8          9073                   CP	B
003183 30 1F       9074                   JR	NC,SUBSL9
003185 7C          9075                   LD	A,H
003186 B8          9076                   CP	B
003187 38 03       9077                   JR	C,SUBSL3
003189 78          9078   SUBSL5:         LD	A,B
00318A 3D          9079                   DEC	A
00318B 67          9080                   LD	H,A
00318C 7C          9081   SUBSL3:         LD	A,H
00318D 95          9082                   SUB	L
00318E 38 14       9083                   JR	C,SUBSL9
003190 3C          9084                   INC	A
003191 B9          9085                   CP	C
003192 38 01       9086                   JR	C,SUBSL4
003194 79          9087                   LD	A,C
003195 06 00       9088   SUBSL4:         LD	B,0
003197 60          9089                   LD	H,B
003198 4F          9090                   LD	C,A
003199 B7          9091                   OR	A
00319A 28 08       9092                   JR	Z,SUBSL9
00319C EB          9093                   EX	DE,HL
00319D 19          9094                   ADD	HL,DE
00319E EB          9095                   EX	DE,HL
00319F 21 00 53    9096                   LD	HL,ACCS
0031A2 ED B0       9097                   LDIR
0031A4 C3 1D 25    9098   SUBSL9:         JP	XEQ
0031A7             9099   ;
0031A7             9100   ; EXITex FOR [var]
0031A7             9101   ; EXITex REPEAT
0031A7             9102   ; EXITex WHILE
0031A7             9103   ;
0031A7 FD 23       9104   EXITex:           INC	IY		;Skip FOR/REPEAT/WHILE
0031A9 FE E3       9105                   CP	TFOR
0031AB 20 0C       9106                   JR	NZ,EXIT0
0031AD DD 21 00 00 9107                   LD	IX,0		;For EXITex FOR <var>
0031B1 CD BA 35    9108                   CALL	TERMQ
0031B4 C4 67 42    9109                   CALL	NZ,GETVAR
0031B7 3E E3       9110                   LD	A,TFOR
0031B9 16 01       9111   EXIT0:          LD	D,1		;Level for WSRCH
0031BB 5F          9112                   LD	E,A
0031BC 7B          9113   EXIT1:          LD	A,E
0031BD C1          9114                   POP	BC		;Marker
0031BE 21 E5 29    9115                   LD	HL,FORCHK
0031C1 B7          9116                   OR	A
0031C2 ED 42       9117                   SBC	HL,BC
0031C4 28 25       9118                   JR	Z,EXIT4
0031C6 21 71 29    9119                   LD	HL,REPCHK
0031C9 B7          9120                   OR	A
0031CA ED 42       9121                   SBC	HL,BC
0031CC 28 38       9122                   JR	Z,EXIT6
0031CE 21 B2 2E    9123                   LD	HL,WHICHK
0031D1 B7          9124                   OR	A
0031D2 ED 42       9125                   SBC	HL,BC
0031D4 28 3A       9126                   JR	Z,EXIT7
0031D6 C5          9127                   PUSH	BC		;Put back marker
0031D7 DD E5       9128                   PUSH	IX
0031D9 C1          9129                   POP	BC
0031DA D9          9130                   EXX
0031DB 3E 03       9131                   LD	A,3
0031DD CD B5 34    9132                   CALL	RESLOC
0031E0 D9          9133                   EXX
0031E1 C5          9134                   PUSH	BC
0031E2 DD E1       9135                   POP	IX
0031E4 20 D6       9136                   JR	NZ,EXIT1
0031E6 3E 2C       9137                   LD	A,44
0031E8 C3 C8 3F    9138                   JP	ERROR_		;'Bad EXITex'
0031EB             9139   ;
0031EB C1          9140   EXIT4:          POP	BC		;VARPTR
0031EC 21 0E 00    9141                   LD	HL,14		;Skip text pointer, limit & step
0031EF 39          9142                   ADD	HL,SP
0031F0 F9          9143                   LD	SP,HL		;Pop FOR record
0031F1 FE E3       9144                   CP	TFOR
0031F3 20 C7       9145                   JR	NZ,EXIT1
0031F5 DD E5       9146                   PUSH	IX
0031F7 E1          9147                   POP	HL
0031F8 7C          9148                   LD	A,H
0031F9 B5          9149                   OR	L
0031FA 28 02       9150                   JR	Z,EXIT5
0031FC ED 42       9151                   SBC	HL,BC
0031FE 01 E3 ED    9152   EXIT5:          LD	BC,TFOR+[TNEXT*256]
003201 28 15       9153                   JR	Z,EXIT8
003203 14          9154                   INC	D		;Count nested FOR loops
003204 18 B6       9155                   JR	EXIT1
003206             9156   ;
003206 C1          9157   EXIT6:          POP	BC		;Text pointer
003207 FE F5       9158                   CP	TREPEAT
003209 20 B1       9159                   JR	NZ,EXIT1
00320B 01 F5 FD    9160                   LD	BC,TREPEAT+[TUNTIL*256]
00320E 18 08       9161                   JR	EXIT8
003210             9162   ;
003210 C1          9163   EXIT7:          POP	BC		;Text pointer
003211 FE C7       9164                   CP	TWHILE
003213 20 A7       9165                   JR	NZ,EXIT1
003215 01 C7 CE    9166                   LD	BC,TWHILE+[TENDWHILE*256]
003218 CD D4 36    9167   EXIT8:          CALL	WSRCH
00321B CD C6 35    9168                   CALL	SPAN		;Skip UNTIL expression
00321E C3 1D 25    9169                   JP	XEQ
003221             9170   ;
003221             9171   ;PUT port,data
003221             9172   ;
003221 CD B7 18    9173   PUT:            CALL	EXPRI		;PORT ADDRESS
003224 D9          9174                   EXX
003225 E5          9175                   PUSH	HL
003226 CD 26 21    9176                   CALL	COMMA
003229 CD B7 18    9177                   CALL	EXPRI		;DATA
00322C D9          9178                   EXX
00322D C1          9179                   POP	BC
00322E ED 69       9180                   OUT	(C),L		;OUTPUT TO PORT BC
003230 C3 1D 25    9181                   JP	XEQ
003233             9182   ;
003233             9183   ;SUBROUTINES:
003233             9184   ;
003233             9185   ;ASSIGN - Assign a numeric value to a variable.
003233             9186   ;Outputs: NC,  Z     - OK, numeric scalar
003233             9187   ;         NC, NZ, PE - OK, string array  (D = type, E = operator)
003233             9188   ; else if NC, NZ, P  - OK, numeric array (D = type, E = operator)
003233             9189   ; else if NC, NZ     - OK, string scalar
003233             9190   ;          C, NZ     - illegal / invalid
003233             9191   ;
003233 CD 67 42    9192   ASSIGN:         CALL	GETVAR		;VARIABLE
003236 D8          9193                   RET	C		;ILLEGAL VARIABLE
003237 C4 51 42    9194                   CALL	NZ,PUTVAR
00323A 57          9195                   LD	D,A		;Type
00323B CD 8F 45    9196                   CALL	NXT
00323E FD 23       9197                   INC	IY
003240 5F          9198                   LD	E,A		;Operator (or =)
003241 FE 3D       9199                   CP	'='
003243 C4 D3 35    9200                   CALL	NZ,EQUALS
003246 7A          9201                   LD	A,D
003247 E6 C0       9202                   AND	11000000B
003249 C0          9203                   RET	NZ		;String or array
00324A D5          9204                   PUSH	DE
00324B E5          9205                   PUSH	HL
00324C CD B0 18    9206                   CALL	EXPRN
00324F DD E1       9207                   POP	IX
003251 D1          9208                   POP	DE
003252             9209   ;
003252             9210   ; Falls through to...
003252             9211   ;
003252             9212   ; MODIFY - Update numeric variable according to operator:
003252             9213   ;   Inputs: D = type
003252             9214   ;           E = operator
003252             9215   ;           HLH'L'C = value
003252             9216   ;           IX = destination VARPTR
003252             9217   ; Destroys: Everything except IX,IY,SP
003252             9218   ;
003252 7B          9219   MODIFY:         LD	A,E
003253 FE 3D       9220                   CP	'='
003255 28 1C       9221                   JR	Z,STORE0	;Simple assignment
003257 D5          9222                   PUSH	DE
003258 D9          9223                   EXX
003259 EB          9224                   EX	DE,HL
00325A D9          9225                   EXX
00325B EB          9226                   EX	DE,HL
00325C 41          9227                   LD	B,C
00325D E3          9228                   EX	(SP),HL
00325E 7C          9229                   LD	A,H
00325F E3          9230                   EX	(SP),HL
003260 CD A9 19    9231                   CALL	LOADN
003263 E3          9232                   EX	(SP),HL
003264 7D          9233                   LD	A,L
003265 E3          9234                   EX	(SP),HL
003266 E6 0F       9235                   AND	15
003268 DD E5       9236                   PUSH	IX
00326A CD 99 45    9237                   CALL	FPP
00326D DD E1       9238                   POP	IX
00326F D1          9239                   POP	DE
003270 DA C8 3F    9240                   JP	C,ERROR_
003273 7A          9241   STORE0:         LD	A,D		;Type
003274 FE 05       9242   STOREN:         CP	5
003276 28 12       9243                   JR	Z,STORE5
003278 F5          9244                   PUSH	AF
003279 0C          9245                   INC	C		;SPEED - & PRESERVE F'
00327A 0D          9246                   DEC	C		; WHEN CALLED BY FNEND0
00327B C4 9B 1C    9247                   CALL	NZ,SFIX		;CONVERT TO INTEGER
00327E F1          9248                   POP	AF
00327F FE 04       9249                   CP	4
003281 28 0A       9250                   JR	Z,STORE4
003283 BF          9251                   CP	A		;SET ZERO
003284 D9          9252   STORE1:         EXX
003285 DD 75 00    9253                   LD	(IX+0),L
003288 D9          9254                   EXX
003289 C9          9255                   RET
00328A             9256   ;
00328A DD 71 04    9257   STORE5:         LD	(IX+4),C
00328D D9          9258   STORE4:         EXX
00328E DD 75 00    9259                   LD	(IX+0),L
003291 DD 74 01    9260                   LD	(IX+1),H
003294 D9          9261                   EXX
003295 DD 75 02    9262                   LD	(IX+2),L
003298 DD 74 03    9263                   LD	(IX+3),H
00329B C9          9264                   RET
00329C             9265   ;
00329C             9266   ; MODIFS - Update string variable according to operator:
00329C             9267   ;   Inputs: H = type
00329C             9268   ;           L = operator (= or +)
00329C             9269   ;           E = string length (string in accumulator)
00329C             9270   ;           IX = destination VARPTR
00329C             9271   ; Destroys: Everything except SP, IY
00329C             9272   ;
00329C 7D          9273   MODIFS:         LD	A,L		;Operator
00329D FE 2B       9274                   CP	'+'
00329F 7C          9275                   LD	A,H		;Type
0032A0 20 20       9276                   JR	NZ,STACCS
0032A2 FD E5       9277                   PUSH	IY
0032A4 DD E5       9278                   PUSH	IX
0032A6 FD E1       9279                   POP	IY
0032A8 CD 9D 20    9280                   CALL	PUSHS
0032AB FD E5       9281                   PUSH	IY
0032AD DD E1       9282                   POP	IX
0032AF CD 92 1A    9283                   CALL	LOADS
0032B2 C1          9284                   POP	BC
0032B3 78          9285                   LD	A,B		;Type
0032B4 0C          9286                   INC	C
0032B5 0D          9287                   DEC	C
0032B6 28 08       9288                   JR	Z,MODFS1	;Zero length
0032B8 21 00 00    9289                   LD	HL,0
0032BB 44          9290                   LD	B,H
0032BC 39          9291                   ADD	HL,SP
0032BD ED B0       9292                   LDIR
0032BF F9          9293                   LD	SP,HL
0032C0 FD E1       9294   MODFS1:         POP	IY
0032C2             9295   ;
0032C2             9296   ; Falls through to:
0032C2             9297   ;
0032C2 21 00 53    9298   STACCS:         LD	HL,ACCS
0032C5 1F          9299   STORES:         RRA
0032C6 30 4F       9300                   JR	NC,STORS3	;FIXED STRING
0032C8 E5          9301                   PUSH	HL
0032C9 CD B6 19    9302                   CALL	LOAD4
0032CC 7B          9303                   LD	A,E		;LENGTH OF STRING
0032CD D9          9304                   EXX
0032CE 6F          9305                   LD	L,A
0032CF 7C          9306                   LD	A,H		;LENGTH ALLOCATED
0032D0 D9          9307                   EXX
0032D1 BB          9308                   CP	E
0032D2 30 24       9309                   JR	NC,STORS1	;ENOUGH ROOM
0032D4 D9          9310                   EXX
0032D5 65          9311                   LD	H,L
0032D6 D9          9312                   EXX
0032D7 E5          9313                   PUSH	HL
0032D8 06 00       9314                   LD	B,0
0032DA 4F          9315                   LD	C,A
0032DB 09          9316                   ADD	HL,BC
0032DC ED 4B E0 55 9317                   LD	BC,(FREE)
0032E0 ED 42       9318                   SBC	HL,BC		;IS STRING LAST?
0032E2 E1          9319                   POP	HL
0032E3 28 12       9320                   JR	Z,STORS0
0032E5 60          9321                   LD	H,B
0032E6 69          9322                   LD	L,C		;DESTINATION
0032E7             9323   ;
0032E7 B7          9324                   OR	A		;V5 optimisation
0032E8 28 0D       9325                   JR	Z,STORS0
0032EA 7B          9326                   LD	A,E
0032EB 5F          9327   STORS2:         LD	E,A
0032EC 1D          9328                   DEC	E
0032ED A3          9329                   AND	E
0032EE 20 FB       9330                   JR	NZ,STORS2
0032F0 37          9331                   SCF
0032F1 CB 13       9332                   RL	E
0032F3 7B          9333                   LD	A,E
0032F4 D9          9334                   EXX
0032F5 67          9335                   LD	H,A
0032F6 D9          9336                   EXX
0032F7             9337   ;
0032F7 37          9338   STORS0:         SCF
0032F8 CD 8D 32    9339   STORS1:         CALL	STORE4		;PRESERVES CARRY!
0032FB 06 00       9340                   LD	B,0
0032FD 4B          9341                   LD	C,E
0032FE EB          9342                   EX	DE,HL
0032FF E1          9343                   POP	HL
003300 0D          9344                   DEC	C
003301 0C          9345                   INC	C
003302 C8          9346                   RET	Z		;NULL STRING
003303 ED B0       9347                   LDIR
003305 D0          9348                   RET	NC		;STRING REPLACED
003306 ED 53 E0 55 9349                   LD	(FREE),DE
00330A E5          9350   CHECK:          PUSH	HL
00330B 2A E0 55    9351                   LD	HL,(FREE)
00330E 24          9352                   INC	H
00330F ED 72       9353                   SBC	HL,SP
003311 E1          9354                   POP	HL
003312 D8          9355                   RET	C
003313 AF          9356                   XOR	A
003314 C3 C8 3F    9357                   JP	ERROR_		;"No room"
003317             9358   ;
003317 4B          9359   STORS3:         LD	C,E
003318 DD E5       9360                   PUSH	IX
00331A D1          9361                   POP	DE
00331B AF          9362                   XOR	A
00331C 47          9363                   LD	B,A
00331D B9          9364                   CP	C
00331E 28 02       9365                   JR	Z,STORS5
003320 ED B0       9366                   LDIR
003322 3E 0D       9367   STORS5:         LD	A,CR
003324 12          9368                   LD	(DE),A
003325 C9          9369                   RET
003326             9370   ;
003326             9371   ; SAVRET - SAVE 'RETURNed' PARAMETER INFO
003326             9372   ;
003326 DD 75 00    9373   SAVRET:         LD	(IX+0),L		;Formal VARPTR
003329 DD 74 01    9374                   LD	(IX+1),H
00332C DD 77 02    9375                   LD	(IX+2),A
00332F FD E3       9376                   EX	(SP),IY
003331 F5          9377                   PUSH	AF
003332 FD E5       9378                   PUSH	IY
003334 DD E5       9379                   PUSH	IX
003336 CD 8F 45    9380                   CALL	NXT
003339 CD 5A 26    9381                   CALL	VAR_
00333C DD E1       9382                   POP	IX
00333E DD 75 04    9383                   LD	(IX+4),L		;Actual VARPTR
003341 DD 74 05    9384                   LD	(IX+5),H
003344 DD 77 06    9385                   LD	(IX+6),A
003347 FD E1       9386                   POP	IY
003349 F1          9387                   POP	AF
00334A 01 08 00    9388                   LD	BC,8
00334D DD 09       9389                   ADD	IX,BC
00334F 18 2D       9390                   JR	ARGUE0
003351             9391   ;
003351             9392   ;ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
003351             9393   ; CALLING STATEMENT TO THE DUMMY VARIABLES VIA
003351             9394   ; THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
003351             9395   ; PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
003351             9396   ;   Inputs: DE addresses parameter list
003351             9397   ;           IY addresses dummy variable list
003351             9398   ;           IX addresses RETURNed parameter data block
003351             9399   ;  Outputs: DE,IY updated
003351             9400   ; Destroys: Everything
003351             9401   ;
003351 3E FF       9402   ARGUE:          LD	A,-1
003353 F5          9403                   PUSH	AF		;PUT MARKER ON STACK
003354 FD 23       9404   ARGUE1:         INC	IY		;BUMP PAST ( | ,
003356 13          9405                   INC	DE
003357 D5          9406                   PUSH	DE
003358 06 00       9407                   LD	B,0
00335A CD 8F 45    9408                   CALL	NXT
00335D FE F8       9409                   CP	TRETURN
00335F 20 06       9410                   JR	NZ,ARGUE9
003361 FD 23       9411                   INC	IY		;SKIP 'RETURN'
003363 CD 8F 45    9412                   CALL	NXT
003366 04          9413                   INC	B		;FLAG 'RETURN'
003367 C5          9414   ARGUE9:         PUSH	BC
003368 DD E5       9415                   PUSH	IX
00336A CD 67 42    9416                   CALL	GETVAR		;FORMAL PARAMETER
00336D 38 49       9417                   JR	C,ARGERR
00336F C4 51 42    9418                   CALL	NZ,PUTVAR
003372 DD E1       9419                   POP	IX
003374 C1          9420                   POP	BC
003375 D1          9421                   POP	DE
003376 E5          9422                   PUSH	HL		;VARPTR
003377 F5          9423                   PUSH	AF
003378 D5          9424                   PUSH	DE
003379 05          9425                   DEC	B
00337A 28 AA       9426                   JR	Z,SAVRET
00337C FD E3       9427                   EX	(SP),IY
00337E CB 77       9428   ARGUE0:         BIT	6,A		;ARRAY?
003380 20 3B       9429                   JR	NZ,ARGUE3
003382 B7          9430                   OR	A		;TYPE
003383 FA 99 33    9431                   JP	M,ARGUE2	;STRING
003386 DD E5       9432                   PUSH	IX
003388 CD B0 18    9433                   CALL	EXPRN		;ACTUAL PARAMETER
00338B DD E1       9434                   POP	IX
00338D FD E3       9435                   EX	(SP),IY
00338F D1          9436                   POP	DE
003390 F1          9437                   POP	AF
003391 D9          9438                   EXX
003392 E5          9439                   PUSH	HL
003393 D9          9440                   EXX
003394 E5          9441                   PUSH	HL
003395 47          9442                   LD	B,A
003396 C5          9443                   PUSH	BC
003397 18 13       9444                   JR	ARGUE4
003399             9445   ;
003399 DD E5       9446   ARGUE2:         PUSH	IX
00339B CD C0 18    9447                   CALL	EXPRS
00339E D9          9448                   EXX
00339F C1          9449                   POP	BC
0033A0 FD E3       9450                   EX	(SP),IY
0033A2 D1          9451                   POP	DE
0033A3 D9          9452                   EXX
0033A4 F1          9453                   POP	AF
0033A5 CD 9D 20    9454                   CALL	PUSHS
0033A8 D9          9455                   EXX
0033A9 C5          9456                   PUSH	BC
0033AA DD E1       9457                   POP	IX
0033AC CD 8F 45    9458   ARGUE4:         CALL	NXT
0033AF FE 2C       9459                   CP	','
0033B1 20 27       9460                   JR	NZ,ARGUE5
0033B3 1A          9461                   LD	A,(DE)
0033B4 FE 2C       9462                   CP	','
0033B6 28 9C       9463                   JR	Z,ARGUE1	;ANOTHER
0033B8 3E 1F       9464   ARGERR:         LD	A,31
0033BA C3 C8 3F    9465                   JP	ERROR_		;"Bad arguments"
0033BD             9466   ;
0033BD DD E5       9467   ARGUE3:         PUSH	IX
0033BF CD 8F 45    9468                   CALL	NXT
0033C2 CD 67 42    9469                   CALL	GETVAR
0033C5 38 F1       9470                   JR	C,ARGERR
0033C7 DD 4E 00    9471                   LD	C,(IX+0)
0033CA DD 46 01    9472                   LD	B,(IX+1)
0033CD DD E1       9473                   POP	IX
0033CF CD 8F 45    9474                   CALL	NXT
0033D2 FD E3       9475                   EX	(SP),IY
0033D4 D1          9476                   POP	DE
0033D5 F1          9477                   POP	AF
0033D6 C5          9478                   PUSH	BC		;STACK ARRAY POINTER
0033D7 F5          9479                   PUSH	AF		;STACK TYPE
0033D8 18 D2       9480                   JR	ARGUE4
0033DA             9481   ;
0033DA CD 32 21    9482   ARGUE5:         CALL	BRAKET
0033DD 1A          9483                   LD	A,(DE)
0033DE FE 29       9484                   CP	')'
0033E0 20 D6       9485                   JR	NZ,ARGERR
0033E2 13          9486                   INC	DE
0033E3 D9          9487   UNSTAK:         EXX
0033E4 C1          9488   ARGUE6:         POP	BC
0033E5 78          9489                   LD	A,B
0033E6 3C          9490                   INC	A
0033E7 D9          9491                   EXX
0033E8 C8          9492                   RET	Z		;MARKER POPPED
0033E9 D9          9493                   EXX
0033EA 3D          9494                   DEC	A
0033EB CB 77       9495                   BIT	6,A		;ARRAY
0033ED 20 19       9496                   JR	NZ,ARGUE8
0033EF B7          9497                   OR	A
0033F0 FA FE 33    9498                   JP	M,ARGUE7	;STRING
0033F3 E1          9499                   POP	HL
0033F4 D9          9500                   EXX
0033F5 E1          9501                   POP	HL
0033F6 D9          9502                   EXX
0033F7 DD E1       9503                   POP	IX
0033F9 CD 74 32    9504                   CALL	STOREN		;WRITE TO DUMMY
0033FC 18 E6       9505                   JR	ARGUE6
0033FE             9506   ;
0033FE CD BB 20    9507   ARGUE7:         CALL	POPS
003401 DD E1       9508                   POP	IX
003403 CD C2 32    9509                   CALL	STACCS
003406 18 DC       9510                   JR	ARGUE6
003408             9511   ;
003408 C1          9512   ARGUE8:         POP	BC		;ARRAY POINTER
003409 DD E1       9513                   POP	IX
00340B DD 71 00    9514                   LD	(IX+0),C
00340E DD 70 01    9515                   LD	(IX+1),B
003411 18 D1       9516                   JR	ARGUE6
003413             9517   ;
003413             9518   ;Restore RETURNed parameters, via the stack to ensure that
003413             9519   ; PROCFRED(A,B)    DEF PROCFRED(RETURN B,RETURN A)  works.
003413             9520   ;
003413 3E FF       9521   RETXFR:         LD	A,-1
003415 F5          9522                   PUSH	AF		;PUT MARKER ON STACK
003416 D9          9523   RETXF1:         EXX
003417 DD 6E 04    9524                   LD	L,(IX+4)	;Actual parameter (destination)
00341A DD 66 05    9525                   LD	H,(IX+5)
00341D E5          9526                   PUSH	HL		;STACK VARPTR
00341E DD 6E 00    9527                   LD	L,(IX+0)	;Formal parameter (source)
003421 DD 66 01    9528                   LD	H,(IX+1)
003424 DD 7E 02    9529                   LD	A,(IX+2)
003427 CB 77       9530                   BIT	6,A		;ARRAY?
003429 20 19       9531                   JR	NZ,RETXF3
00342B B7          9532                   OR	A		;TYPE
00342C FA 4A 34    9533                   JP	M,RETXF2	;STRING
00342F E5          9534                   PUSH	HL
003430 DD E3       9535                   EX	(SP),IX
003432 CD A9 19    9536                   CALL	LOADN
003435 DD E1       9537                   POP	IX
003437 D9          9538                   EXX			;STACK VALUE
003438 E5          9539                   PUSH	HL
003439 D9          9540                   EXX
00343A E5          9541                   PUSH	HL
00343B DD 46 06    9542   RETXF6:         LD	B,(IX+6)
00343E C5          9543                   PUSH	BC		;TYPE & EXPONENT
00343F CD 0A 33    9544   RETXF5:         CALL	CHECK		;CHECK ROOM
003442 18 1E       9545                   JR	RETXF4
003444             9546   ;
003444 5E          9547   RETXF3:         LD	E,(HL)
003445 23          9548                   INC	HL
003446 56          9549                   LD	D,(HL)
003447 D5          9550                   PUSH	DE		;STACK ARRAY POINTER
003448 18 F1       9551                   JR	RETXF6
00344A             9552   ;
00344A E5          9553   RETXF2:         PUSH	HL
00344B DD E3       9554                   EX	(SP),IX
00344D CD 92 1A    9555                   CALL	LOADS
003450 DD E1       9556                   POP	IX
003452 DD 7E 06    9557                   LD	A,(IX+6)
003455 D9          9558                   EXX
003456 DD E5       9559                   PUSH	IX
003458 E1          9560                   POP	HL
003459 D9          9561                   EXX
00345A CD 9D 20    9562                   CALL	PUSHS
00345D D9          9563                   EXX
00345E E5          9564                   PUSH	HL
00345F DD E1       9565                   POP	IX
003461 D9          9566                   EXX
003462 11 08 00    9567   RETXF4:         LD	DE,8
003465 DD 19       9568                   ADD	IX,DE
003467 D9          9569                   EXX
003468 10 AC       9570                   DJNZ	RETXF1
00346A C3 E3 33    9571                   JP	UNSTAK
00346D             9572   ;
00346D             9573   ;Restore 'RETURNed' parameters,
00346D             9574   ;
00346D C1          9575   RESRET:         POP	BC		;B = 'RETURN' COUNT
00346E 26 00       9576                   LD	H,0
003470 68          9577                   LD	L,B
003471 29          9578                   ADD	HL,HL
003472 29          9579                   ADD	HL,HL
003473 29          9580                   ADD	HL,HL		;RETURN COUNT * 8
003474 39          9581                   ADD	HL,SP
003475 DD 21 00 00 9582                   LD	IX,0
003479 DD 39       9583                   ADD	IX,SP		;ADDRESS PARAMETER LIST
00347B F5          9584                   PUSH	AF
00347C D5          9585                   PUSH	DE
00347D E5          9586                   PUSH	HL
00347E D9          9587                   EXX
00347F C5          9588                   PUSH	BC
003480 D5          9589                   PUSH	DE
003481 D9          9590                   EXX
003482 78          9591                   LD	A,B
003483 21 00 53    9592                   LD	HL,ACCS
003486 11 00 54    9593                   LD	DE,BUFFER
003489 01 FF 00    9594                   LD	BC,255
00348C ED B0       9595                   LDIR
00348E 47          9596                   LD	B,A
00348F CD 13 34    9597                   CALL	RETXFR		;TRANSFER VIA STACK
003492 21 00 54    9598                   LD	HL,BUFFER
003495 11 00 53    9599                   LD	DE,ACCS
003498 01 FF 00    9600                   LD	BC,255
00349B ED B0       9601                   LDIR
00349D D9          9602                   EXX
00349E D1          9603                   POP	DE
00349F C1          9604                   POP	BC
0034A0 D9          9605                   EXX
0034A1 E1          9606                   POP	HL
0034A2 D1          9607                   POP	DE
0034A3 F1          9608                   POP	AF
0034A4 18 0A       9609                   JR	RESAR1
0034A6             9610   ;
0034A6             9611   ; Restore LOCAL array or memory block:
0034A6             9612   ;
0034A6 C1          9613   RESARR:         POP	BC
0034A7 CB 78       9614                   BIT	7,B		;String array?
0034A9 E1          9615                   POP	HL
0034AA C1          9616                   POP	BC
0034AB 09          9617                   ADD	HL,BC
0034AC 39          9618                   ADD	HL,SP
0034AD C4 67 37    9619                   CALL	NZ,FREESA	;Free string array
0034B0 F9          9620   RESAR1:         LD	SP,HL
0034B1 DD 23       9621                   INC	IX		;Flag something restored
0034B3 18 05       9622                   JR	RESLO1
0034B5             9623   ;
0034B5             9624   ; RESLOC - Restore local variables/arrays or DATA/ERROR status from stack
0034B5             9625   ;   Inputs: A = 0 if everything OK, bit0 set if DATPTR, bit1 set if ERRTRP
0034B5             9626   ;  Outputs: Z if nothing was restored, NZ if something was restored
0034B5             9627   ; Destroys: A,B,C,D,E,H,L,H',L',IX,SP,flags
0034B5             9628   ;
0034B5 D1          9629   RESLOC:         POP	DE		;Return address
0034B6 DD 21 00 00 9630                   LD	IX,0		;To flag nothing was restored
0034BA C1          9631   RESLO1:         POP	BC		;Marker ?
0034BB 21 AE 35    9632                   LD	HL,LOCCHK
0034BE B7          9633                   OR	A
0034BF ED 42       9634                   SBC	HL,BC
0034C1 28 1A       9635                   JR	Z,RESLO2	;Something to restore
0034C3 B7          9636                   OR	A
0034C4 20 0F       9637                   JR	NZ,RESLO8
0034C6 21 F4 2A    9638                   LD	HL,RETCHK
0034C9 ED 42       9639                   SBC	HL,BC
0034CB 28 A0       9640                   JR	Z,RESRET
0034CD 21 60 27    9641                   LD	HL,ARRCHK
0034D0 B7          9642                   OR	A
0034D1 ED 42       9643                   SBC	HL,BC
0034D3 28 D1       9644                   JR	Z,RESARR
0034D5 DD E5       9645   RESLO8:         PUSH	IX
0034D7 E1          9646                   POP	HL
0034D8 7C          9647                   LD	A,H
0034D9 B5          9648                   OR	L
0034DA C5          9649   RESLO0:         PUSH	BC		;Put back marker
0034DB EB          9650                   EX	DE,HL
0034DC E9          9651                   JP	(HL)		;Return
0034DD             9652   ;
0034DD DD E1       9653   RESLO2:         POP	IX		;Variable pointer
0034DF B7          9654                   OR	A
0034E0 28 20       9655                   JR	Z,RESLO3	;Everything allowed
0034E2 DD E5       9656                   PUSH	IX
0034E4 C1          9657                   POP	BC
0034E5 CB 47       9658                   BIT	0,A
0034E7 28 07       9659                   JR	Z,RESLO6	;Bit 0 set, so
0034E9 21 F0 55    9660                   LD	HL,DATPTR	;test for DATPTR
0034EC ED 42       9661                   SBC	HL,BC
0034EE 28 12       9662                   JR	Z,RESLO3
0034F0 B7          9663   RESLO6:         OR	A
0034F1 CB 4F       9664                   BIT	1,A
0034F3 28 07       9665                   JR	Z,RESLO7	;Bit 1 set, so
0034F5 21 EA 55    9666                   LD	HL,ERRTRP	;test for ERRPTR
0034F8 ED 42       9667                   SBC	HL,BC
0034FA 28 06       9668                   JR	Z,RESLO3
0034FC C5          9669   RESLO7:         PUSH	BC		;Put back pointer
0034FD 01 AE 35    9670                   LD	BC,LOCCHK
003500 18 D8       9671                   JR	RESLO0
003502             9672   ;
003502 C1          9673   RESLO3:         POP	BC		;Type / exponent
003503 CB 70       9674                   BIT	6,B
003505 20 14       9675                   JR	NZ,RESLO4	;Array?
003507 CB 78       9676                   BIT	7,B
003509 20 23       9677                   JR	NZ,RESLO5	;String?
00350B E1          9678                   POP	HL
00350C D9          9679                   EXX
00350D E1          9680                   POP	HL
00350E D9          9681                   EXX
00350F CB 60       9682                   BIT	4,B
003511 20 A7       9683                   JR	NZ,RESLO1
003513 F5          9684                   PUSH	AF
003514 78          9685                   LD	A,B
003515 CD 74 32    9686                   CALL	STOREN		;Numeric
003518 F1          9687                   POP	AF
003519 18 9F       9688                   JR	RESLO1
00351B             9689   ;
00351B E1          9690   RESLO4:         POP	HL
00351C CB 60       9691                   BIT	4,B
00351E 20 9A       9692                   JR	NZ,RESLO1
003520 DD 75 00    9693                   LD	(IX+0),L	;Array
003523 DD 74 01    9694                   LD	(IX+1),H
003526 18 92       9695                   JR	RESLO1
003528             9696   ;
003528 06 00       9697   RESLO9:         LD	B,0
00352A 09          9698                   ADD	HL,BC
00352B F9          9699                   LD	SP,HL
00352C 18 8C       9700   RESLGO:         JR	RESLO1
00352E             9701   ;
00352E 21 00 00    9702   RESLO5:         LD	HL,0
003531 39          9703                   ADD	HL,SP
003532 CB 60       9704                   BIT	4,B
003534 20 F2       9705                   JR	NZ,RESLO9
003536 F5          9706                   PUSH	AF
003537 D5          9707                   PUSH	DE
003538 59          9708                   LD	E,C
003539 78          9709                   LD	A,B
00353A CD C5 32    9710                   CALL	STORES		;String
00353D D1          9711                   POP	DE
00353E F1          9712                   POP	AF
00353F F9          9713                   LD	SP,HL
003540 18 EA       9714                   JR	RESLGO
003542             9715   ;
003542             9716   ;SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
003542             9717   ;  OF A FUNCTION OR PROCEDURE.
003542             9718   ;THERE IS A LOT OF STACK MANIPULATION - CARE!!
003542             9719   ;   Inputs: IY is parameters pointer
003542             9720   ;  Outputs: IY updated
003542             9721   ;           A' incremented for each RETURN
003542             9722   ; Destroys: A',A,B,C,D,E,H,L,IX,IY,F,SP
003542             9723   ;
003542 D1          9724   SAVLOC:         POP	DE		;RETURN ADDRESS
003543 FD 23       9725   SAVLO1:         INC	IY		;BUMP PAST ( | ,
003545 CD 8F 45    9726                   CALL	NXT
003548 FE F8       9727                   CP	TRETURN
00354A 20 08       9728                   JR	NZ,SAVLO6
00354C 08          9729                   EX	AF,AF'
00354D 3C          9730                   INC	A		;RETURN counter
00354E 08          9731                   EX	AF,AF'
00354F FD 23       9732                   INC	IY		;Bump past RETURN
003551 CD 8F 45    9733                   CALL	NXT
003554 D5          9734   SAVLO6:         PUSH	DE
003555 D9          9735                   EXX
003556 C5          9736                   PUSH	BC
003557 D5          9737                   PUSH	DE
003558 E5          9738                   PUSH	HL
003559 D9          9739                   EXX
00355A CD 5A 26    9740                   CALL	VAR_		;DUMMY VARIABLE
00355D D9          9741                   EXX
00355E E1          9742                   POP	HL
00355F D1          9743                   POP	DE
003560 C1          9744                   POP	BC
003561 D9          9745                   EXX
003562 D1          9746                   POP	DE
003563 CB 77       9747                   BIT	6,A		;ARRAY?
003565 20 12       9748                   JR	NZ,SAVLO3
003567 B7          9749                   OR	A		;TYPE
003568 FA 83 35    9750                   JP	M,SAVLO2	;STRING
00356B D9          9751                   EXX
00356C E5          9752                   PUSH	HL		;SAVE H'L'
00356D D9          9753                   EXX
00356E 47          9754                   LD	B,A		;TYPE
00356F CD A9 19    9755                   CALL	LOADN
003572 D9          9756                   EXX
003573 E3          9757                   EX	(SP),HL
003574 D9          9758                   EXX
003575 E5          9759                   PUSH	HL
003576 C5          9760                   PUSH	BC
003577 18 30       9761                   JR	SAVLO4
003579             9762   ;
003579 DD 4E 00    9763   SAVLO3:         LD	C,(IX+0)	;ARRAY POINTER
00357C DD 46 01    9764                   LD	B,(IX+1)
00357F C5          9765                   PUSH	BC		;SAVE TO STACK
003580 F5          9766                   PUSH	AF		;SAVE TYPE
003581 18 26       9767                   JR	SAVLO4
003583             9768   ;
003583 F5          9769   SAVLO2:         PUSH	AF		;STRING TYPE
003584 D5          9770                   PUSH	DE
003585 D9          9771                   EXX
003586 E5          9772                   PUSH	HL
003587 D9          9773                   EXX
003588 CD 92 1A    9774                   CALL	LOADS
00358B D9          9775                   EXX
00358C E1          9776                   POP	HL
00358D D9          9777                   EXX
00358E 4B          9778                   LD	C,E
00358F D1          9779                   POP	DE
003590 CD 0A 33    9780                   CALL	CHECK
003593 F1          9781                   POP	AF		;LEVEL STACK
003594 21 00 00    9782                   LD	HL,0
003597 45          9783                   LD	B,L
003598 ED 42       9784                   SBC	HL,BC
00359A 39          9785                   ADD	HL,SP
00359B F9          9786                   LD	SP,HL
00359C 47          9787                   LD	B,A		;TYPE
00359D C5          9788                   PUSH	BC
00359E 28 09       9789                   JR	Z,SAVLO4
0035A0 D5          9790                   PUSH	DE
0035A1 11 00 53    9791                   LD	DE,ACCS
0035A4 EB          9792                   EX	DE,HL
0035A5 45          9793                   LD	B,L
0035A6 ED B0       9794                   LDIR			;SAVE STRING ON STACK
0035A8 D1          9795                   POP	DE
0035A9 DD E5       9796   SAVLO4:         PUSH	IX		;VARPTR
0035AB CD AE 35    9797                   CALL	SAVLO5
0035AE             9798   LOCCHK:         EQU	$
0035AE CD 0A 33    9799   SAVLO5:         CALL	CHECK
0035B1 CD 8F 45    9800                   CALL	NXT
0035B4 FE 2C       9801                   CP	','		;MORE?
0035B6 28 8B       9802                   JR	Z,SAVLO1
0035B8 EB          9803                   EX	DE,HL
0035B9 E9          9804                   JP	(HL)		;"RETURN"
0035BA             9805   ;
0035BA CD 8F 45    9806   TERMQ:          CALL	NXT
0035BD FE 8B       9807                   CP	TELSE
0035BF D0          9808                   RET	NC
0035C0 FE 3A       9809                   CP	':'		;ASSEMBLER SEPARATOR
0035C2 D0          9810                   RET	NC
0035C3 FE 0D       9811                   CP	CR
0035C5 C9          9812                   RET
0035C6             9813   ;
0035C6 CD BA 35    9814   SPAN:           CALL	TERMQ
0035C9 C8          9815                   RET	Z
0035CA FD 23       9816                   INC	IY
0035CC FE 22       9817                   CP	'"'
0035CE CC 1D 37    9818                   CALL	Z,QUOTE
0035D1 18 F3       9819                   JR	SPAN
0035D3             9820   ;
0035D3 CD 8F 45    9821   EQUALS:         CALL	NXT
0035D6 FD 23       9822                   INC	IY
0035D8 FE 3D       9823                   CP	'='
0035DA C8          9824                   RET	Z
0035DB 3E 04       9825                   LD	A,4
0035DD C3 C8 3F    9826                   JP	ERROR_		;"Mistake"
0035E0             9827   ;
0035E0 FE 8A       9828   FORMAT:         CP	TTAB
0035E2 28 0C       9829                   JR	Z,DOTAB
0035E4 FE 89       9830                   CP	TSPC
0035E6 28 38       9831                   JR	Z,DOSPC
0035E8             9832                   ; CP	'''
0035E8 FE 27       9833                   CP	39	; apostrophe
0035EA C0          9834                   RET	NZ
0035EB CD 7F 41    9835                   CALL	CRLF
0035EE AF          9836                   XOR	A
0035EF C9          9837                   RET
0035F0             9838   ;
0035F0 C5          9839   DOTAB:          PUSH	BC
0035F1 CD B7 18    9840                   CALL	EXPRI
0035F4 D9          9841                   EXX
0035F5 C1          9842                   POP	BC
0035F6 FD 7E 00    9843                   LD	A,(IY)
0035F9 FE 2C       9844                   CP	','
0035FB 28 11       9845                   JR	Z,DOTAB1
0035FD CD 32 21    9846                   CALL	BRAKET
003600 7D          9847                   LD	A,L
003601 21 FB 55    9848   TABIT:          LD	HL,COUNT
003604 BE          9849                   CP	(HL)
003605 C8          9850                   RET	Z
003606 F5          9851                   PUSH	AF
003607 DC 7F 41    9852                   CALL	C,CRLF
00360A F1          9853                   POP	AF
00360B 96          9854                   SUB	(HL)
00360C 18 19       9855                   JR	SPACES
00360E FD 23       9856   DOTAB1:         INC	IY
003610 C5          9857                   PUSH	BC
003611 E5          9858                   PUSH	HL
003612 CD B7 18    9859                   CALL	EXPRI
003615 D9          9860                   EXX
003616 D1          9861                   POP	DE
003617 C1          9862                   POP	BC
003618 CD 32 21    9863                   CALL	BRAKET
00361B CD 20 0E    9864                   CALL	PUTCSR
00361E AF          9865                   XOR	A
00361F C9          9866                   RET
003620             9867   ;
003620 C5          9868   DOSPC:          PUSH	BC
003621 CD E4 18    9869                   CALL	ITEMI
003624 D9          9870                   EXX
003625 7D          9871                   LD	A,L
003626 C1          9872                   POP	BC
003627 B7          9873   SPACES:         OR	A
003628 C8          9874                   RET	Z
003629 C5          9875                   PUSH	BC
00362A 47          9876                   LD	B,A
00362B 3E 20       9877   FILL1:          LD	A,' '
00362D CD 86 41    9878                   CALL	OUTCHR
003630 10 F9       9879                   DJNZ	FILL1
003632 C1          9880                   POP	BC
003633 AF          9881                   XOR	A
003634 C9          9882                   RET
003635             9883   ;
003635 21 00 53    9884   PTEXT:          LD	HL,ACCS
003638 1C          9885                   INC	E
003639 1D          9886   PTEXT1:         DEC	E
00363A C8          9887                   RET	Z
00363B 7E          9888                   LD	A,(HL)
00363C 23          9889                   INC	HL
00363D CD 86 41    9890                   CALL	OUTCHR
003640 18 F7       9891                   JR	PTEXT1
003642             9892   ;
003642 F5          9893   FETCHS:         PUSH	AF
003643 C5          9894                   PUSH	BC
003644 E5          9895                   PUSH	HL
003645 FD E3       9896                   EX	(SP),IY
003647 CD 5F 36    9897                   CALL	XTRACT
00364A CD 8F 45    9898                   CALL	NXT
00364D FD E3       9899                   EX	(SP),IY
00364F E1          9900                   POP	HL
003650 C1          9901                   POP	BC
003651 F1          9902                   POP	AF
003652 C9          9903                   RET
003653             9904   ;
003653 11 00 53    9905   LINES:          LD	DE,ACCS
003656 7E          9906   LINE1S:         LD	A,(HL)
003657 12          9907                   LD	(DE),A
003658 FE 0D       9908                   CP	CR
00365A C8          9909                   RET	Z
00365B 23          9910                   INC	HL
00365C 1C          9911                   INC	E
00365D 18 F7       9912                   JR	LINE1S
00365F             9913   ;
00365F CD 8F 45    9914   XTRACT:         CALL	NXT
003662 FE 22       9915                   CP	'"'
003664 FD 23       9916                   INC	IY
003666 CA FE 19    9917                   JP	Z,CONS
003669 FD 2B       9918                   DEC	IY
00366B 11 00 53    9919                   LD	DE,ACCS
00366E FD 7E 00    9920   XTRAC1:         LD	A,(IY)
003671 12          9921                   LD	(DE),A
003672 FE 2C       9922                   CP	','
003674 C8          9923                   RET	Z
003675 FE 0D       9924                   CP	CR
003677 C8          9925                   RET	Z
003678 FD 23       9926                   INC	IY
00367A 1C          9927                   INC	E
00367B 18 F1       9928                   JR	XTRAC1
00367D             9929   ;
00367D 3E DC       9930   DSRCH:          LD	A,TDATA
00367F 06 00       9931   SEARCHex:         LD	B,0
003681 4E          9932   SRCH1:          LD	C,(HL)
003682 0C          9933                   INC	C
003683 0D          9934                   DEC	C
003684 28 0C       9935                   JR	Z,SRCH2		;FAIL
003686 23          9936                   INC	HL
003687 23          9937                   INC	HL
003688 23          9938                   INC	HL
003689 BE          9939                   CP	(HL)
00368A C8          9940                   RET	Z
00368B 0D          9941                   DEC	C
00368C 0D          9942                   DEC	C
00368D 0D          9943                   DEC	C
00368E 09          9944                   ADD	HL,BC
00368F C3 81 36    9945                   JP	SRCH1
003692 2B          9946   SRCH2:          DEC	HL		;POINT TO CR
003693 37          9947                   SCF
003694 C9          9948                   RET
003695             9949   ;
003695             9950   ; NSCAN - scan for token at start of line, with nesting of inner structures
003695             9951   ; Alternative entry at NSCAN1 with L = level (used by CASE)
003695             9952   ;
003695             9953   ;   Inputs: B = token to find (1, start of line)
003695             9954   ;           C = token to find (2, start of line)
003695             9955   ;           E = token to nest (end of line)
003695             9956   ;           D = token to unnest (start of line)
003695             9957   ;           IY = start search area (line length byte)
003695             9958   ;  Outputs: NZ if not found
003695             9959   ;           Z if found, IY points to byte after token
003695             9960   ; Destroys: A,B,C,L,IY,F
003695             9961   ;
003695 2E 00       9962   NSCAN:          LD	L,0		;nest level
003697 FD 7E 00    9963   NSCAN1:         LD	A,(IY)		;get line length
00369A B7          9964                   OR	A		;test zero = end of prog
00369B 28 34       9965                   JR	Z,NSCAN6
00369D FD 7E 03    9966                   LD	A,(IY+3)	;initial token
0036A0 B8          9967                   CP	B		;test value reqd
0036A1 28 1D       9968                   JR	Z,NSCAN3	;found (1)
0036A3 B9          9969                   CP	C
0036A4 28 1A       9970                   JR	Z,NSCAN3	;found (2)
0036A6 BA          9971   NSCAN7:         CP	D		;unnest?
0036A7 28 22       9972                   JR	Z,NSCAN5
0036A9 C5          9973   NSCAN2:         PUSH	BC
0036AA 06 00       9974                   LD	B,0
0036AC FD 4E 00    9975                   LD	C,(IY)
0036AF FD 09       9976                   ADD	IY,BC		;go to next line
0036B1 FD 7E FE    9977                   LD	A,(IY-2)
0036B4 BB          9978                   CP	E		;nest?
0036B5 79          9979                   LD	A,C
0036B6 C1          9980                   POP	BC
0036B7 20 DE       9981                   JR	NZ,NSCAN1	;continue
0036B9 FE 05       9982                   CP	5		;empty line ?
0036BB 38 DA       9983                   JR	C,NSCAN1	;continue
0036BD 2C          9984                   INC	L		;increment nest level
0036BE 18 D7       9985                   JR	NSCAN1		;continue
0036C0             9986   ;
0036C0 2C          9987   NSCAN3:         INC	L
0036C1 2D          9988                   DEC	L
0036C2 20 E2       9989                   JR	NZ,NSCAN7
0036C4 01 04 00    9990   NSCAN4:         LD	BC,4
0036C7 FD 09       9991                   ADD	IY,BC
0036C9 AF          9992                   XOR	A		;Z
0036CA C9          9993                   RET
0036CB             9994   ;
0036CB 2D          9995   NSCAN5:         DEC	L		;decrement nest level
0036CC F2 A9 36    9996                   JP	P,NSCAN2
0036CF 18 F3       9997                   JR	NSCAN4
0036D1             9998   ;
0036D1 F6 01       9999   NSCAN6:         OR	1		;NZ
0036D3 C9          10000                   RET
0036D4             10001   ;
0036D4             10002   ; WSRCH - search for token, with nesting of inner structures
0036D4             10003   ;
0036D4             10004   ;   Inputs: B = token to find or unnest (anywhere)
0036D4             10005   ;           C = token to nest (anywhere), ignore after EXITex
0036D4             10006   ;           D = ordinal (1 = find first token, 2 = second)
0036D4             10007   ;           IY = address to start looking
0036D4             10008   ;  Outputs: IY points to byte after that found
0036D4             10009   ;           if not found abort to END
0036D4             10010   ; Destroys: A,D,IY,F
0036D4             10011   ;
0036D4 FD 7E 00    10012   WSRCH:          LD	A,(IY)
0036D7 FD 23       10013                   INC	IY
0036D9 FE 22       10014                   CP	'"'
0036DB CC 1D 37    10015                   CALL	Z,QUOTE
0036DE FE F4       10016                   CP	TREM
0036E0 28 22       10017                   JR	Z,WSRCHM
0036E2 FE 10       10018                   CP	TEXIT
0036E4 28 30       10019                   JR	Z,WSRCHE
0036E6 B8          10020                   CP	B
0036E7 28 29       10021                   JR	Z,WSRCHX
0036E9 B9          10022                   CP	C
0036EA 28 23       10023                   JR	Z,WSRCHP
0036EC FE 0D       10024                   CP	CR
0036EE 20 E4       10025                   JR	NZ,WSRCH
0036F0 FD 7E 00    10026   WSRCH1:         LD	A,(IY)			;Line length
0036F3 FD 23       10027                   INC	IY
0036F5 B7          10028                   OR	A
0036F6 CA 57 25    10029                   JP	Z,END
0036F9 FD 23       10030                   INC	IY
0036FB FD 23       10031                   INC	IY			;Skip line number
0036FD FD 7E 00    10032                   LD	A,(IY)
003700 FE DC       10033                   CP	TDATA
003702 20 D0       10034                   JR	NZ,WSRCH
003704 FD 7E 00    10035   WSRCHM:         LD	A,(IY)
003707 FD 23       10036                   INC	IY
003709 FE 0D       10037                   CP	CR
00370B 20 F7       10038                   JR	NZ,WSRCHM		;Skip to end of line
00370D 18 E1       10039                   JR	WSRCH1
00370F             10040   ;
00370F 14          10041   WSRCHP:         INC	D
003710 18 C2       10042                   JR	WSRCH
003712             10043   ;
003712 15          10044   WSRCHX:         DEC	D
003713 20 BF       10045                   JR	NZ,WSRCH
003715 C9          10046                   RET
003716             10047   ;
003716 CD 8F 45    10048   WSRCHE:         CALL	NXT
003719 FD 23       10049                   INC	IY
00371B 18 B7       10050                   JR	WSRCH
00371D             10051   ;
00371D             10052   ; QUOTE - skip quoted string
00371D             10053   ;
00371D FD 7E 00    10054   QUOTE:          LD	A,(IY)
003720 FD 23       10055                   INC	IY
003722 FE 0D       10056                   CP	CR
003724 CA 2C 37    10057                   JP	Z,MISQUO
003727 FE 22       10058                   CP	'"'
003729 20 F2       10059                   JR	NZ,QUOTE
00372B C9          10060                   RET
00372C             10061   ;
00372C 3E 09       10062   MISQUO:         LD	A,9
00372E C3 C8 3F    10063                   JP	ERROR_		;"Missing quote"
003731             10064   ;
003731             10065   ; X14OR5 - multiply by 1, 4 or 5
003731             10066   ;   Inputs: DE = number to be multiplied
003731             10067   ;           A = 1, 4 or 5 (else multiply by 4)
003731             10068   ;  Outputs: DE = DE * A
003731             10069   ;           Carry set if overflow
003731             10070   ; Destroys: D,E,H,L,F
003731             10071   ;
003731 62          10072   X14OR5:         LD	H,D
003732 6B          10073                   LD	L,E
003733 FE 01       10074                   CP	1
003735 C8          10075                   RET	Z
003736 FE 05       10076                   CP	5
003738 29          10077                   ADD	HL,HL
003739 D8          10078                   RET	C
00373A 29          10079                   ADD	HL,HL
00373B D8          10080                   RET	C
00373C EB          10081                   EX	DE,HL
00373D C0          10082                   RET	NZ
00373E 19          10083                   ADD	HL,DE
00373F EB          10084                   EX	DE,HL
003740 C9          10085                   RET
003741             10086   ;
003741             10087   ; MUL16 - 16-bit multiply
003741             10088   ;   Inputs: HL = number to be multiplied
003741             10089   ;           BC = multiplier
003741             10090   ;  Outputs: HL = HL * BC
003741             10091   ;           Carry set if overflow
003741             10092   ; Destroys: A,D,E,H,L,F
003741             10093   ;
003741 EB          10094   MUL16:          EX	DE,HL
003742 21 00 00    10095                   LD	HL,0
003745 3E 10       10096                   LD	A,16
003747 29          10097   MUL161:         ADD	HL,HL
003748 D8          10098                   RET	C		;OVERFLOW
003749 CB 23       10099                   SLA	E
00374B CB 12       10100                   RL	D
00374D 30 02       10101                   JR	NC,MUL162
00374F 09          10102                   ADD	HL,BC
003750 D8          10103                   RET	C
003751 3D          10104   MUL162:         DEC	A
003752 20 F3       10105                   JR	NZ,MUL161
003754 C9          10106                   RET
003755             10107   ;
003755 CD 8F 45    10108   CHANEL:         CALL	NXT
003758 FE 23       10109                   CP	'#'
00375A 3E 2D       10110                   LD	A,45
00375C C2 C8 3F    10111                   JP	NZ,ERROR_	;"Missing #"
00375F FD 23       10112   CHNL:           INC	IY		;SKIP '#'
003761 CD E4 18    10113                   CALL	ITEMI
003764 D9          10114                   EXX
003765 EB          10115                   EX	DE,HL
003766 C9          10116                   RET
003767             10117   ;
003767             10118   ; FREESA - Free members of a string array if adjacent to the top of heap
003767             10119   ;   Inputs: BC = length of array (= 4 * number of elements)
003767             10120   ;           HL addresses array first byte *above* array
003767             10121   ;  Outputs: NZ if any array element freed, Z if none
003767             10122   ; Destroys: nothing
003767             10123   ;
003767 F5          10124   FREESA:         PUSH	AF
003768 C5          10125   FREES0:         PUSH	BC
003769 D5          10126                   PUSH	DE
00376A E5          10127                   PUSH	HL
00376B AF          10128                   XOR	A
00376C 50          10129                   LD	D,B
00376D 59          10130                   LD	E,C
00376E 47          10131                   LD	B,A
00376F D5          10132   FREES1:         PUSH	DE
003770 2B          10133                   DEC	HL
003771 56          10134                   LD	D,(HL)
003772 2B          10135                   DEC	HL
003773 5E          10136                   LD	E,(HL)
003774 2B          10137                   DEC	HL
003775 4E          10138                   LD	C,(HL)
003776 2B          10139                   DEC	HL
003777 E5          10140                   PUSH	HL
003778 2A E0 55    10141                   LD	HL,(FREE)
00377B EB          10142                   EX	DE,HL
00377C 09          10143                   ADD	HL,BC
00377D ED 52       10144                   SBC	HL,DE
00377F 20 07       10145                   JR	NZ,FREES2
003781 19          10146                   ADD	HL,DE
003782 ED 42       10147                   SBC	HL,BC
003784 22 E0 55    10148                   LD	(FREE),HL
003787 B4          10149                   OR	H
003788 D1          10150   FREES2:         POP	DE
003789 E1          10151                   POP	HL
00378A 0E 04       10152                   LD	C,4
00378C B7          10153                   OR	A
00378D ED 42       10154                   SBC	HL,BC
00378F EB          10155                   EX	DE,HL
003790 20 DD       10156                   JR	NZ,FREES1
003792 B7          10157                   OR	A
003793 E1          10158                   POP	HL
003794 D1          10159                   POP	DE
003795 C1          10160                   POP	BC
003796 B7          10161                   OR	A
003797 20 CF       10162                   JR	NZ,FREES0
003799 F1          10163                   POP	AF
00379A C9          10164                   RET
00379B             10165   ;
00379B             10166   ;                END
00379B             10167   ; --- End exec.asm ---
00379B             10168   
00379B             10169   ; --- Begin main.asm ---
00379B             10170   ;
00379B             10171   ;Automatically created from original source on 2024-12-15 15:29:12
00379B             10172   ;
00379B             10173                   .ASSUME ADL = 0
00379B             10174   ;	.ORG 0x0000
00379B             10175   ;                SEGMENT CODE
00379B             10176   ;
00379B             10177   ;                XDEF	NEWIT
00379B             10178   ;                XDEF	BAD
00379B             10179   ;                XDEF	CLEAN
00379B             10180   ;                XDEF	LINNUM
00379B             10181   ;                XDEF	ERROR_
00379B             10182   ;                XDEF	GETTOP
00379B             10183   ;                XDEF	DEL
00379B             10184   ;                XDEF	LISTIT
00379B             10185   ;
00379B             10186   ;BBC BASIC INTERPRETER - Z80 VERSION
00379B             10187   ;COMMANDS AND COMMON MODULE - "MAIN"
00379B             10188   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
00379B             10189   ;
00379B             10190   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
00379B             10191   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
00379B             10192   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
00379B             10193   ;
00379B             10194   ;VERSION 2.3, 07-05-1984
00379B             10195   ;VERSION 3.0, 01-03-1987
00379B             10196   ;VERSION 5.0, 31-05-2024
00379B             10197   ;VERSION 5.1, 10-08-2024
00379B             10198   ;
00379B             10199   ;                XREF	XEQ
00379B             10200   ;                XREF	RUN0
00379B             10201   ;                XREF	CHAIN0
00379B             10202   ;                XREF	TERMQ
00379B             10203   ;                XREF	MUL16
00379B             10204   ;                XREF	X14OR5
00379B             10205   ;                XREF	SPACES
00379B             10206   ;                XREF	ESCAPE
00379B             10207   ;                XREF	CHECK
00379B             10208   ;                XREF	SEARCH
00379B             10209   ;
00379B             10210   ;                XREF	OSWRCH
00379B             10211   ;                XREF	OSLINE
00379B             10212   ;                XREF	OSINIT
00379B             10213   ;                XREF	OSLOAD
00379B             10214   ;                XREF	OSSAVE
00379B             10215   ;                XREF	OSBGET
00379B             10216   ;                XREF	OSBPUT
00379B             10217   ;                XREF	OSSHUT
00379B             10218   ;                XREF	OSSTAT
00379B             10219   ;                XREF	PROMPT
00379B             10220   ;                XREF	LTRAP
00379B             10221   ;                XREF	OSCLI
00379B             10222   ;                XREF	RESET
00379B             10223   ;
00379B             10224   ;                XREF	COMMA
00379B             10225   ;                XREF	BRAKET
00379B             10226   ;                XREF	ZERO
00379B             10227   ;                XREF	ITEMI
00379B             10228   ;                XREF	EXPRI
00379B             10229   ;                XREF	EXPRS
00379B             10230   ;                XREF	DECODE
00379B             10231   ;                XREF	LOADN
00379B             10232   ;                XREF	SFIX
00379B             10233   ;
00379B             10234   ;                XDEF	NXT
00379B             10235   ;                XDEF	NLIST
00379B             10236   ;                XDEF	START
00379B             10237   ;                XDEF	OUTCHR
00379B             10238   ;                XDEF	OUT
00379B             10239   ;                XDEF	ERROR_
00379B             10240   ;                XDEF	EXTERR
00379B             10241   ;                XDEF	REPORT
00379B             10242   ;                XDEF	CLOOP
00379B             10243   ;                XDEF	WARM
00379B             10244   ;                XDEF	CLEAR
00379B             10245   ;                XDEF	CRLF
00379B             10246   ;                XDEF	SAYLN
00379B             10247   ;                XDEF	LOAD0
00379B             10248   ;                XDEF	TELL
00379B             10249   ;                XDEF	FINDL
00379B             10250   ;                XDEF	GETTOP
00379B             10251   ;                XDEF	SETLIN
00379B             10252   ;                XDEF	GETVAR
00379B             10253   ;                XDEF	PUTVAR
00379B             10254   ;                XDEF	GETDEF
00379B             10255   ;                XDEF	LOCATE
00379B             10256   ;                XDEF	CREATE
00379B             10257   ;                XDEF	PBCDL
00379B             10258   ;                XDEF	LEXAN2
00379B             10259   ;                XDEF	RANGE
00379B             10260   ;                XDEF	VERMSG
00379B             10261   ;                XDEF	KEYWDS
00379B             10262   ;                XDEF	KEYWDL
00379B             10263   ;
00379B             10264   ;                XREF	PAGE_
00379B             10265   ;                XREF	ACCS
00379B             10266   ;                XREF	BUFFER
00379B             10267   ;                XREF	LOMEM
00379B             10268   ;                XREF	HIMEM
00379B             10269   ;                XREF	COUNT
00379B             10270   ;                XREF	WIDTH
00379B             10271   ;                XREF	FREE
00379B             10272   ;                XREF	STAVAR
00379B             10273   ;                XREF	DYNVAR
00379B             10274   ;                XREF	ERRTXT
00379B             10275   ;                XREF	ERR
00379B             10276   ;                XREF	ERL
00379B             10277   ;                XREF	CURLIN
00379B             10278   ;                XREF	ERRTRP
00379B             10279   ;                XREF	ONERSP
00379B             10280   ;                XREF	FNPTR
00379B             10281   ;                XREF	PROPTR
00379B             10282   ;                XREF	AUTONO
00379B             10283   ;                XREF	INCREM
00379B             10284   ;                XREF	LISTON
00379B             10285   ;                XREF	TRACEN
00379B             10286   ;
00379B             10287   ; CR             EQU	0DH
00379B             10288   ; LF             EQU	0AH
00379B             10289   ; ESC            EQU	1BH
00379B             10290   ;
00379B             10291   TERROR:         EQU	85H
00379B             10292   TLINE:          EQU	86H
00379B             10293   TELSE:          EQU	8BH
00379B             10294   TTHEN:          EQU	8CH
00379B             10295   TLINO:          EQU	8DH
00379B             10296   TFN:            EQU	0A4H
00379B             10297   TTO:            EQU	0B8H
00379B             10298   TWHILE:         EQU	0C7H
00379B             10299   TCASE:          EQU	0C8H
00379B             10300   TWHEN:          EQU	0C9H
00379B             10301   TOF:            EQU	0CAH
00379B             10302   TENDCASE:       EQU	0CBH
00379B             10303   TOTHERWISE:     EQU	0CCH
00379B             10304   TENDIF:         EQU	0CDH
00379B             10305   TENDWHILE:      EQU	0CEH
00379B             10306   TDATA:          EQU	0DCH
00379B             10307   TDIM:           EQU	0DEH
00379B             10308   TFOR:           EQU	0E3H
00379B             10309   TGOSUB:         EQU	0E4H
00379B             10310   TGOTO:          EQU	0E5H
00379B             10311   TIF:            EQU	0E7H
00379B             10312   TLOCAL:         EQU	0EAH
00379B             10313   TNEXT:          EQU	0EDH
00379B             10314   TON:            EQU	0EEH
00379B             10315   TPROC:          EQU	0F2H
00379B             10316   TREM:           EQU	0F4H
00379B             10317   TREPEAT:        EQU	0F5H
00379B             10318   TRESTORE:       EQU	0F7H
00379B             10319   TTRACE:         EQU	0FCH
00379B             10320   TUNTIL:         EQU	0FDH
00379B             10321   TEXIT:          EQU	10H
00379B             10322   ;
00379B             10323   TOKLO:          EQU	8FH
00379B             10324   TOKHI:          EQU	93H
00379B             10325   OFFSET:         EQU	0CFH-TOKLO
00379B             10326   ;
00379B C3 C5 37    10327   START:          JP	COLD
00379E C3 33 38    10328                   JP	WARM
0037A1 C3 67 26    10329                   JP	ESCAPE
0037A4 C3 D9 3F    10330                   JP	EXTERR
0037A7 C3 7E 45    10331                   JP	TELL
0037AA C3 6C 45    10332                   JP	TEXT_
0037AD C3 E4 18    10333                   JP	ITEMI
0037B0 C3 B7 18    10334                   JP	EXPRI
0037B3 C3 C0 18    10335                   JP	EXPRS
0037B6 C3 37 0A    10336                   JP	OSCLI
0037B9 C3 5D 06    10337                   JP	OSBGET
0037BC C3 65 06    10338                   JP	OSBPUT
0037BF C3 6E 06    10339                   JP	OSSTAT
0037C2 C3 55 06    10340                   JP	OSSHUT
0037C5 21 00 55    10341   COLD:           LD	HL,STAVAR	;COLD START
0037C8 F9          10342                   LD	SP,HL
0037C9 36 0A       10343                   LD	(HL),10
0037CB 2C          10344                   INC	L
0037CC 36 09       10345                   LD	(HL),9
0037CE 2C          10346                   INC	L
0037CF AF          10347                   XOR	A
0037D0 77          10348   PURGE:          LD	(HL),A		;CLEAR SCRATCHPAD
0037D1 2C          10349                   INC	L
0037D2 20 FC       10350                   JR	NZ,PURGE
0037D4 3E 37       10351                   LD	A,37H		;V3.0
0037D6 32 FE 55    10352                   LD	(LISTON),A
0037D9 21 12 38    10353                   LD	HL,NOTICE
0037DC 22 EE 55    10354                   LD	(ERRTXT),HL
0037DF CD 82 05    10355                   CALL	OSINIT
0037E2 ED 53 E2 55 10356                   LD	(HIMEM),DE
0037E6 22 DC 55    10357                   LD	(PAGE_),HL
0037E9 CD C2 40    10358                   CALL	NEWIT
0037EC C2 D6 24    10359                   JP	NZ,CHAIN0	;AUTO-RUN
0037EF CD 7E 45    10360                   CALL	TELL
0037F2 42 42 43 20 10361   VERMSG:         DB	"BBC BASIC (Z80) Version 5.00  "
       42 41 53 49 
       43 20 28 5A 
       38 30 29 20 
       56 65 72 73 
       69 6F 6E 20 
       35 2E 30 30 
       20 20       
003810 0D          10362                   DB	CR
003811 0A          10363                   DB	LF
003812 28 43 29 20 10364   NOTICE:         DB	"(C) Copyright R.T.Russell 2024"
       43 6F 70 79 
       72 69 67 68 
       74 20 52 2E 
       54 2E 52 75 
       73 73 65 6C 
       6C 20 32 30 
       32 34       
003830 0D          10365                   DB	CR
003831 0A          10366                   DB	LF
003832 00          10367                   DB	0
003833 F6          10368   WARM:           DB	0F6H
003834 37          10369   CLOOP:          SCF
003835 ED 7B E2 55 10370                   LD	SP,(HIMEM)
003839 CD 95 05    10371                   CALL	PROMPT		;PROMPT USER
00383C 21 FE 55    10372                   LD	HL,LISTON
00383F 7E          10373                   LD	A,(HL)
003840 E6 0F       10374                   AND	0FH		;LISTO
003842 F6 30       10375                   OR	30H		;OPT 3
003844 77          10376                   LD	(HL),A
003845 ED 62       10377                   SBC	HL,HL		;HL <- 0 (V3.0)
003847 22 EA 55    10378                   LD	(ERRTRP),HL
00384A 22 EC 55    10379                   LD	(ONERSP),HL
00384D 22 F4 55    10380                   LD	(CURLIN),HL	;For CMOS EDIT->LIST
003850 2A E8 55    10381                   LD	HL,(AUTONO)
003853 E5          10382                   PUSH	HL
003854 7C          10383                   LD	A,H
003855 B5          10384                   OR	L
003856 28 17       10385                   JR	Z,NOAUTO
003858 E5          10386                   PUSH	HL
003859 CD 1A 42    10387                   CALL	PBCD		;AUTO NUMBER
00385C E1          10388                   POP	HL
00385D ED 4B FF 55 10389                   LD	BC,(INCREM)
003861 06 00       10390                   LD	B,0
003863 09          10391                   ADD	HL,BC
003864 DA 33 44    10392                   JP	C,TOOBIGmn
003867 22 E8 55    10393                   LD	(AUTONO),HL
00386A 3E 20       10394                   LD	A,' '
00386C CD 86 41    10395                   CALL	OUTCHR
00386F 21 00 53    10396   NOAUTO:         LD	HL,ACCS
003872 CD E9 05    10397                   CALL	OSLINE		;GET CONSOLE INPUT
003875 AF          10398                   XOR	A
003876 32 FB 55    10399                   LD	(COUNT),A
003879 FD 21 00 53 10400                   LD	IY,ACCS
00387D 21 65 3C    10401                   LD	HL,COMNDS
003880 CD 2A 40    10402                   CALL	LEX0
003883 E1          10403                   POP	HL
003884 20 19       10404                   JR	NZ,NOTCMD
003886 87          10405                   ADD	A,A
003887 4F          10406                   LD	C,A
003888 7C          10407                   LD	A,H
003889 B5          10408                   OR	L
00388A 20 0F       10409                   JR	NZ,INAUTO
00388C 47          10410                   LD	B,A
00388D 21 95 3C    10411                   LD	HL,CMDTABmn
003890 09          10412                   ADD	HL,BC
003891 7E          10413                   LD	A,(HL)		;TABLE ENTRY
003892 23          10414                   INC	HL
003893 66          10415                   LD	H,(HL)
003894 6F          10416                   LD	L,A
003895 FD 23       10417                   INC	IY
003897 CD 8F 45    10418                   CALL	NXT
00389A E9          10419                   JP	(HL)		;EXECUTE COMMAND
00389B             10420   ;
00389B FD 21 00 53 10421   INAUTO:         LD	IY,ACCS
00389F 7C          10422   NOTCMD:         LD	A,H
0038A0 B5          10423                   OR	L
0038A1 CC 0E 44    10424                   CALL	Z,LINNUM
0038A4 CD 8F 45    10425                   CALL	NXT
0038A7 11 00 54    10426                   LD	DE,BUFFER
0038AA 0E 01       10427                   LD	C,1		;LEFT MODE
0038AC E5          10428                   PUSH	HL
0038AD CD 9C 44    10429                   CALL	LEXAN2		;LEXICAL ANALYSIS
0038B0 E1          10430                   POP	HL
0038B1 12          10431                   LD	(DE),A		;TERMINATOR
0038B2 AF          10432                   XOR	A
0038B3 47          10433                   LD	B,A
0038B4 4B          10434                   LD	C,E		;BC=LINE LENGTH
0038B5 13          10435                   INC	DE
0038B6 12          10436                   LD	(DE),A		;ZERO NEXT
0038B7 7C          10437                   LD	A,H
0038B8 B5          10438                   OR	L
0038B9 FD 21 00 54 10439                   LD	IY,BUFFER	;FOR XEQ
0038BD CA 1D 25    10440                   JP	Z,XEQ		;DIRECT MODE
0038C0 C5          10441                   PUSH	BC
0038C1 CD C7 41    10442                   CALL	FINDL
0038C4 CC 6D 40    10443                   CALL	Z,DEL
0038C7 C1          10444                   POP	BC
0038C8 79          10445                   LD	A,C
0038C9 B7          10446                   OR	A
0038CA 28 39       10447                   JR	Z,CLOOP2	;DELETE LINE ONLY
0038CC C6 04       10448                   ADD	A,4
0038CE 4F          10449                   LD	C,A		;LENGTH INCLUSIVE
0038CF D5          10450                   PUSH	DE		;LINE NUMBER
0038D0 C5          10451                   PUSH	BC		;SAVE LINE LENGTH
0038D1 EB          10452                   EX	DE,HL
0038D2 C5          10453                   PUSH	BC
0038D3 CD A9 40    10454                   CALL	GETTOP
0038D6 C1          10455                   POP	BC
0038D7 E5          10456                   PUSH	HL
0038D8 09          10457                   ADD	HL,BC
0038D9 E5          10458                   PUSH	HL
0038DA 24          10459                   INC	H
0038DB AF          10460                   XOR	A
0038DC ED 72       10461                   SBC	HL,SP
0038DE E1          10462                   POP	HL
0038DF D2 C8 3F    10463                   JP	NC,ERROR_	;"No room"
0038E2 E3          10464                   EX	(SP),HL
0038E3 E5          10465                   PUSH	HL
0038E4 23          10466                   INC	HL
0038E5 B7          10467                   OR	A
0038E6 ED 52       10468                   SBC	HL,DE
0038E8 44          10469                   LD	B,H		;BC=AMOUNT TO MOVE
0038E9 4D          10470                   LD	C,L
0038EA E1          10471                   POP	HL
0038EB D1          10472                   POP	DE
0038EC 28 02       10473                   JR	Z,ATEND
0038EE ED B8       10474                   LDDR			;MAKE SPACE
0038F0 C1          10475   ATEND:          POP	BC		;LINE LENGTH
0038F1 D1          10476                   POP	DE		;LINE NUMBER
0038F2 23          10477                   INC	HL
0038F3 71          10478                   LD	(HL),C		;STORE LENGTH
0038F4 23          10479                   INC	HL
0038F5 73          10480                   LD	(HL),E		;STORE LINE NUMBER
0038F6 23          10481                   INC	HL
0038F7 72          10482                   LD	(HL),D
0038F8 23          10483                   INC	HL
0038F9 11 00 54    10484                   LD	DE,BUFFER
0038FC EB          10485                   EX	DE,HL
0038FD 0D          10486                   DEC	C
0038FE 0D          10487                   DEC	C
0038FF 0D          10488                   DEC	C
003900 ED B0       10489                   LDIR			;ADD LINE
003902 CD 9E 40    10490                   CALL	CLEAN
003905 C3 34 38    10491   CLOOP2:         JP	CLOOP
003908             10492   ;
003908             10493   ;LIST OF TOKENS AND KEYWORDS.
003908             10494   ;IF A KEYWORD IS FOLLOWED BY NUL THEN IT WILL
003908             10495   ; ONLY MATCH WITH THE WORD FOLLOWED IMMEDIATELY
003908             10496   ; BY A DELIMITER.
003908             10497   ;
003908 80          10498   KEYWDS:         DB	80H
003909 41 4E 44    10499                   DB	"AND"
00390C 94          10500                   DB	94H
00390D 41 42 53    10501                   DB	"ABS"
003910 95          10502                   DB	95H
003911 41 43 53    10503                   DB	"ACS"
003914 96          10504                   DB	96H
003915 41 44 56 41 10505                   DB	"ADVAL"
       4C          
00391A 97          10506                   DB	97H
00391B 41 53 43    10507                   DB	"ASC"
00391E 98          10508                   DB	98H
00391F 41 53 4E    10509                   DB	"ASN"
003922 99          10510                   DB	99H
003923 41 54 4E    10511                   DB	"ATN"
003926 9A          10512                   DB	9AH
003927 42 47 45 54 10513                   DB	"BGET "
       20          
00392C D5          10514                   DB	0D5H
00392D 42 50 55 54 10515                   DB	"BPUT "
       20          
003932 0F          10516                   DB	0FH
003933 42 59 20    10517                   DB	"BY "		; v5
003936 FB          10518                   DB	0FBH
003937 43 4F 4C 4F 10519                   DB	"COLOUR"
       55 52       
00393D FB          10520                   DB	0FBH
00393E 43 4F 4C 4F 10521                   DB	"COLOR"
       52          
003943 D6          10522                   DB	0D6H
003944 43 41 4C 4C 10523                   DB	"CALL"
003948 C8          10524                   DB	0C8H
003949 43 41 53 45 10525                   DB	"CASE"		; v5
00394D D7          10526                   DB	0D7H
00394E 43 48 41 49 10527                   DB	"CHAIN"
       4E          
003953 BD          10528                   DB	0BDH
003954 43 48 52 24 10529                   DB	"CHR$"
003958 D8          10530                   DB	0D8H
003959 43 4C 45 41 10531                   DB	"CLEAR "
       52 20       
00395F D9          10532                   DB	0D9H
003960 43 4C 4F 53 10533                   DB	"CLOSE "
       45 20       
003966 DA          10534                   DB	0DAH
003967 43 4C 47 20 10535                   DB	"CLG "
00396B DB          10536                   DB	0DBH
00396C 43 4C 53 20 10537                   DB	"CLS "
003970 9B          10538                   DB	9BH
003971 43 4F 53    10539                   DB	"COS"
003974 9C          10540                   DB	9CH
003975 43 4F 55 4E 10541                   DB	"COUNT "
       54 20       
00397B 01          10542                   DB	01H
00397C 43 49 52 43 10543                   DB	"CIRCLE"	; v5
       4C 45       
003982 DC          10544                   DB	0DCH
003983 44 41 54 41 10545                   DB	"DATA"
003987 9D          10546                   DB	9DH
003988 44 45 47    10547                   DB	"DEG"
00398B DD          10548                   DB	0DDH
00398C 44 45 46    10549                   DB	"DEF"
00398F 81          10550                   DB	81H
003990 44 49 56    10551                   DB	"DIV"
003993 DE          10552                   DB	0DEH
003994 44 49 4D    10553                   DB	"DIM"
003997 DF          10554                   DB	0DFH
003998 44 52 41 57 10555                   DB	"DRAW"
00399C E1          10556                   DB	0E1H
00399D 45 4E 44 50 10557                   DB	"ENDPROC "
       52 4F 43 20 
0039A5 CE          10558                   DB	0CEH
0039A6 45 4E 44 57 10559                   DB	"ENDWHILE "	; v5
       48 49 4C 45 
       20          
0039AF CB          10560                   DB	0CBH
0039B0 45 4E 44 43 10561                   DB	"ENDCASE "	; v5
       41 53 45 20 
0039B8 CD          10562                   DB	0CDH
0039B9 45 4E 44 49 10563                   DB	"ENDIF "	; v5
       46 20       
0039BF E0          10564                   DB	0E0H
0039C0 45 4E 44 20 10565                   DB	"END "
0039C4 E2          10566                   DB	0E2H
0039C5 45 4E 56 45 10567                   DB	"ENVELOPE"
       4C 4F 50 45 
0039CD 8B          10568                   DB	8BH
0039CE 45 4C 53 45 10569                   DB	"ELSE"
0039D2 A0          10570                   DB	0A0H
0039D3 45 56 41 4C 10571                   DB	"EVAL"
0039D7 9E          10572                   DB	9EH
0039D8 45 52 4C 20 10573                   DB	"ERL "
0039DC 85          10574                   DB	85H
0039DD 45 52 52 4F 10575                   DB	"ERROR"
       52          
0039E2 C5          10576                   DB	0C5H
0039E3 45 4F 46 20 10577                   DB	"EOF "
0039E7 82          10578                   DB	82H
0039E8 45 4F 52    10579                   DB	"EOR"
0039EB 9F          10580                   DB	9FH
0039EC 45 52 52 20 10581                   DB	"ERR "
0039F0 10          10582                   DB	10H
0039F1 45 58 49 54 10583                   DB	"EXIT "		; v5
       20          
0039F6 A1          10584                   DB	0A1H
0039F7 45 58 50    10585                   DB	"EXP"
0039FA A2          10586                   DB	0A2H
0039FB 45 58 54 20 10587                   DB	"EXT "
0039FF 02          10588                   DB	02H
003A00 45 4C 4C 49 10589                   DB	"ELLIPSE"	; v5
       50 53 45    
003A07 E3          10590                   DB	0E3H
003A08 46 4F 52    10591                   DB	"FOR"
003A0B A3          10592                   DB	0A3H
003A0C 46 41 4C 53 10593                   DB	"FALSE "
       45 20       
003A12 03          10594                   DB	03H
003A13 46 49 4C 4C 10595                   DB	"FILL"		; v5
003A17 A4          10596                   DB	0A4H
003A18 46 4E       10597                   DB	"FN"
003A1A E5          10598                   DB	0E5H
003A1B 47 4F 54 4F 10599                   DB	"GOTO"
003A1F BE          10600                   DB	0BEH
003A20 47 45 54 24 10601                   DB	"GET$"
003A24 A5          10602                   DB	0A5H
003A25 47 45 54    10603                   DB	"GET"
003A28 E4          10604                   DB	0E4H
003A29 47 4F 53 55 10605                   DB	"GOSUB"
       42          
003A2E E6          10606                   DB	0E6H
003A2F 47 43 4F 4C 10607                   DB	"GCOL"
003A33 93          10608                   DB	93H
003A34 48 49 4D 45 10609                   DB	"HIMEM "
       4D 20       
003A3A E8          10610                   DB	0E8H
003A3B 49 4E 50 55 10611                   DB	"INPUT"
       54          
003A40 E7          10612                   DB	0E7H
003A41 49 46       10613                   DB	"IF"
003A43 BF          10614                   DB	0BFH
003A44 49 4E 4B 45 10615                   DB	"INKEY$"
       59 24       
003A4A A6          10616                   DB	0A6H
003A4B 49 4E 4B 45 10617                   DB	"INKEY"
       59          
003A50 A8          10618                   DB	0A8H
003A51 49 4E 54    10619                   DB	"INT"
003A54 A7          10620                   DB	0A7H
003A55 49 4E 53 54 10621                   DB	"INSTR("
       52 28       
003A5B 0C          10622                   DB	0CH
003A5C 49 4E 53 54 10623                   DB	"INSTALL"	; v5
       41 4C 4C    
003A63 86          10624                   DB	86H
003A64 4C 49 4E 45 10625                   DB	"LINE"
003A68 92          10626                   DB	92H
003A69 4C 4F 4D 45 10627                   DB	"LOMEM "
       4D 20       
003A6F EA          10628                   DB	0EAH
003A70 4C 4F 43 41 10629                   DB	"LOCAL"
       4C          
003A75 C0          10630                   DB	0C0H
003A76 4C 45 46 54 10631                   DB	"LEFT$("
       24 28       
003A7C A9          10632                   DB	0A9H
003A7D 4C 45 4E    10633                   DB	"LEN"
003A80 E9          10634                   DB	0E9H
003A81 4C 45 54    10635                   DB	"LET"
003A84 AB          10636                   DB	0ABH
003A85 4C 4F 47    10637                   DB	"LOG"
003A88 AA          10638                   DB	0AAH
003A89 4C 4E       10639                   DB	"LN"
003A8B C1          10640                   DB	0C1H
003A8C 4D 49 44 24 10641                   DB	"MID$("
       28          
003A91 EB          10642                   DB	0EBH
003A92 4D 4F 44 45 10643                   DB	"MODE"
003A96 83          10644                   DB	83H
003A97 4D 4F 44    10645                   DB	"MOD"
003A9A EC          10646                   DB	0ECH
003A9B 4D 4F 56 45 10647                   DB	"MOVE"
003A9F 04          10648                   DB	04H
003AA0 4D 4F 55 53 10649                   DB	"MOUSE"		; v5
       45          
003AA5 ED          10650                   DB	0EDH
003AA6 4E 45 58 54 10651                   DB	"NEXT"
003AAA AC          10652                   DB	0ACH
003AAB 4E 4F 54    10653                   DB	"NOT"
003AAE EE          10654                   DB	0EEH
003AAF 4F 4E       10655                   DB	"ON"
003AB1 87          10656                   DB	87H
003AB2 4F 46 46 20 10657                   DB	"OFF "
003AB6 CA          10658                   DB	0CAH
003AB7 4F 46 20    10659                   DB	"OF "		; v5
003ABA 05          10660                   DB	05H
003ABB 4F 52 49 47 10661                   DB	"ORIGIN"	; v5
       49 4E       
003AC1 84          10662                   DB	84H
003AC2 4F 52       10663                   DB	"OR"
003AC4 8E          10664                   DB	8EH
003AC5 4F 50 45 4E 10665                   DB	"OPENIN"
       49 4E       
003ACB AE          10666                   DB	0AEH
003ACC 4F 50 45 4E 10667                   DB	"OPENOUT"
       4F 55 54    
003AD3 AD          10668                   DB	0ADH
003AD4 4F 50 45 4E 10669                   DB	"OPENUP"
       55 50       
003ADA FF          10670                   DB	0FFH
003ADB 4F 53 43 4C 10671                   DB	"OSCLI"
       49          
003AE0 CC          10672                   DB	0CCH
003AE1 4F 54 48 45 10673                   DB	"OTHERWISE"	; v5
       52 57 49 53 
       45          
003AEA F1          10674                   DB	0F1H
003AEB 50 52 49 4E 10675                   DB	"PRINT"
       54          
003AF0 90          10676                   DB	90H
003AF1 50 41 47 45 10677                   DB	"PAGE "
       20          
003AF6 8F          10678                   DB	8FH
003AF7 50 54 52 20 10679                   DB	"PTR "
003AFB AF          10680                   DB	0AFH
003AFC 50 49 20    10681                   DB	"PI "
003AFF F0          10682                   DB	0F0H
003B00 50 4C 4F 54 10683                   DB	"PLOT"
003B04 B0          10684                   DB	0B0H
003B05 50 4F 49 4E 10685                   DB	"POINT("
       54 28       
003B0B F2          10686                   DB	0F2H
003B0C 50 52 4F 43 10687                   DB	"PROC"
003B10 B1          10688                   DB	0B1H
003B11 50 4F 53 20 10689                   DB	"POS "
003B15 0E          10690                   DB	0EH
003B16 50 55 54    10691                   DB	"PUT"		; Token changed
003B19 06          10692                   DB	06H
003B1A 51 55 49 54 10693                   DB	"QUIT "		; v5
       20          
003B1F F8          10694                   DB	0F8H
003B20 52 45 54 55 10695                   DB	"RETURN "
       52 4E 20    
003B27 F5          10696                   DB	0F5H
003B28 52 45 50 45 10697                   DB	"REPEAT"
       41 54       
003B2E F6          10698                   DB	0F6H
003B2F 52 45 50 4F 10699                   DB	"REPORT "
       52 54 20    
003B36 F3          10700                   DB	0F3H
003B37 52 45 41 44 10701                   DB	"READ"
003B3B F4          10702                   DB	0F4H
003B3C 52 45 4D    10703                   DB	"REM"
003B3F F9          10704                   DB	0F9H
003B40 52 55 4E 20 10705                   DB	"RUN "
003B44 B2          10706                   DB	0B2H
003B45 52 41 44    10707                   DB	"RAD"
003B48 F7          10708                   DB	0F7H
003B49 52 45 53 54 10709                   DB	"RESTORE"
       4F 52 45    
003B50 C2          10710                   DB	0C2H
003B51 52 49 47 48 10711                   DB	"RIGHT$("
       54 24 28    
003B58 B3          10712                   DB	0B3H
003B59 52 4E 44 20 10713                   DB	"RND "
003B5D 07          10714                   DB	07H
003B5E 52 45 43 54 10715                   DB	"RECTANGLE"	; v5
       41 4E 47 4C 
       45          
003B67 88          10716                   DB	88H
003B68 53 54 45 50 10717                   DB	"STEP"
003B6C B4          10718                   DB	0B4H
003B6D 53 47 4E    10719                   DB	"SGN"
003B70 B5          10720                   DB	0B5H
003B71 53 49 4E    10721                   DB	"SIN"
003B74 B6          10722                   DB	0B6H
003B75 53 51 52    10723                   DB	"SQR"
003B78 89          10724                   DB	89H
003B79 53 50 43    10725                   DB	"SPC"
003B7C C3          10726                   DB	0C3H
003B7D 53 54 52 24 10727                   DB	"STR$"
003B81 C4          10728                   DB	0C4H
003B82 53 54 52 49 10729                   DB	"STRING$("
       4E 47 24 28 
003B8A D4          10730                   DB	0D4H
003B8B 53 4F 55 4E 10731                   DB	"SOUND"
       44          
003B90 FA          10732                   DB	0FAH
003B91 53 54 4F 50 10733                   DB	"STOP "
       20          
003B96 C6          10734                   DB	0C6H
003B97 53 55 4D    10735                   DB	"SUM"		; v5
003B9A 08          10736                   DB	08H
003B9B 53 57 41 50 10737                   DB	"SWAP"		; v5
003B9F 09          10738                   DB	09H
003BA0 53 59 53    10739                   DB	"SYS"		; v5
003BA3 B7          10740                   DB	0B7H
003BA4 54 41 4E    10741                   DB	"TAN"
003BA7 8A          10742                   DB	8AH
003BA8 54 41 42 28 10743                   DB	"TAB("
003BAC 8C          10744                   DB	8CH
003BAD 54 48 45 4E 10745                   DB	"THEN"
003BB1 91          10746                   DB	91H
003BB2 54 49 4D 45 10747                   DB	"TIME "
       20          
003BB7 0A          10748                   DB	0AH
003BB8 54 49 4E 54 10749                   DB	"TINT"
003BBC B8          10750                   DB	0B8H
003BBD 54 4F       10751                   DB	"TO"
003BBF FC          10752                   DB	0FCH
003BC0 54 52 41 43 10753                   DB	"TRACE"
       45          
003BC5 B9          10754                   DB	0B9H
003BC6 54 52 55 45 10755                   DB	"TRUE "
       20          
003BCB FD          10756                   DB	0FDH
003BCC 55 4E 54 49 10757                   DB	"UNTIL"
       4C          
003BD1 BA          10758                   DB	0BAH
003BD2 55 53 52    10759                   DB	"USR"
003BD5 EF          10760                   DB	0EFH
003BD6 56 44 55    10761                   DB	"VDU"
003BD9 BB          10762                   DB	0BBH
003BDA 56 41 4C    10763                   DB	"VAL"
003BDD BC          10764                   DB	0BCH
003BDE 56 50 4F 53 10765                   DB	"VPOS "
       20          
003BE3 C7          10766                   DB	0C7H
003BE4 57 48 49 4C 10767                   DB	"WHILE"		; v5
       45          
003BE9 C9          10768                   DB	0C9H
003BEA 57 48 45 4E 10769                   DB	"WHEN"		; v5
003BEE 0B          10770                   DB	0BH
003BEF 57 41 49 54 10771                   DB	"WAIT "		; v5
       20          
003BF4 FE          10772                   DB	0FEH
003BF5 57 49 44 54 10773                   DB	"WIDTH"
       48          
003BFA             10774   ;'LEFT' TOKENS:
003BFA CF          10775                   DB	0CFH
003BFB 50 54 52    10776                   DB	"PTR"
003BFE D1          10777                   DB	0D1H
003BFF 54 49 4D 45 10778                   DB	"TIME"
003C03 D3          10779                   DB	0D3H
003C04 48 49 4D 45 10780                   DB	"HIMEM"
       4D          
003C09 D2          10781                   DB	0D2H
003C0A 4C 4F 4D 45 10782                   DB	"LOMEM"
       4D          
003C0F D0          10783                   DB	0D0H
003C10 50 41 47 45 10784                   DB	"PAGE"
003C14             10785   ;
003C14 11          10786                   DB	11H
003C15 4D 69 73 73 10787                   DB	"Missing "
       69 6E 67 20 
003C1D 12          10788                   DB	12H
003C1E 4E 6F 20 73 10789                   DB	"No such "
       75 63 68 20 
003C26 13          10790                   DB	13H
003C27 42 61 64 20 10791                   DB	"Bad "
003C2B 14          10792                   DB	14H
003C2C 20 72 61 6E 10793                   DB	" range"
       67 65       
003C32 15          10794                   DB	15H
003C33 76 61 72 69 10795                   DB	"variable"
       61 62 6C 65 
003C3B 16          10796                   DB	16H
003C3C 4F 75 74 20 10797                   DB	"Out of"
       6F 66       
003C42 17          10798                   DB	17H
003C43 4E 6F 20    10799                   DB	"No "
003C46 18          10800                   DB	18H
003C47 20 73 70 61 10801                   DB	" space"
       63 65       
003C4D 19          10802                   DB	19H
003C4E 4E 6F 74 20 10803                   DB	"Not in a "
       69 6E 20 61 
       20          
003C57 1A          10804                   DB	1AH
003C58 20 6C 6F 6F 10805                   DB	" loop"
       70          
003C5D 1B          10806                   DB	1BH
003C5E 20 6E 6F 74 10807                   DB	" not "
       20          
003C63             10808   KEYWDL:         EQU	$-KEYWDS
003C63 FF FF       10809                   DW	-1
003C65             10810   ;
003C65             10811   ;LIST OF IMMEDIATE MODE COMMANDS:
003C65             10812   ;
003C65 80          10813   COMNDS:         DB	80H
003C66 41 55 54 4F 10814                   DB	"AUTO"
003C6A 81          10815                   DB	81H
003C6B 44 45 4C 45 10816                   DB	"DELETE"
       54 45       
003C71 82          10817                   DB	82H
003C72 4C 49 53 54 10818                   DB	"LIST"
003C76 83          10819                   DB	83H
003C77 4C 4F 41 44 10820                   DB	"LOAD"
003C7B 84          10821                   DB	84H
003C7C 4E 45 57 20 10822                   DB	"NEW "
003C80 85          10823                   DB	85H
003C81 4F 4C 44 20 10824                   DB	"OLD "
003C85 86          10825                   DB	86H
003C86 52 45 4E 55 10826                   DB	"RENUMBER"
       4D 42 45 52 
003C8E 87          10827                   DB	87H
003C8F 53 41 56 45 10828                   DB	"SAVE"
003C93 FF FF       10829                   DW	-1
003C95             10830   ;
003C95             10831   ;IMMEDIATE MODE COMMANDS:
003C95             10832   ;
003C95 67 3F       10833   CMDTABmn:         DW	AUTO
003C97 0A 3E       10834                   DW	DELETE
003C99 32 3E       10835                   DW	LIST
003C9B 86 3F       10836                   DW	LOAD
003C9D 81 3F       10837                   DW	NEW
003C9F 94 3F       10838                   DW	OLD
003CA1 B7 3E       10839                   DW	RENUM
003CA3 AD 3F       10840                   DW	SAVE
003CA5             10841   ;
003CA5             10842   ;ERROR MESSAGES:
003CA5             10843   ;
003CA5 17          10844   ERRWDS:         DB	17H
003CA6 72 6F 6F 6D 10845                   DB	"room"
003CAA 00          10846                   DB	0
003CAB 16          10847                   DB	16H
003CAC 14          10848                   DB	14H
003CAD 00 00       10849                   DW	0
003CAF 4D 75 6C 74 10850                   DB	"Multiple label"
       69 70 6C 65 
       20 6C 61 62 
       65 6C       
003CBD 00          10851                   DB	0
003CBE 4D 69 73 74 10852                   DB	"Mistake"
       61 6B 65    
003CC5 00          10853                   DB	0
003CC6 11          10854                   DB	11H
003CC7 2C          10855                   DB	','
003CC8 00          10856                   DB	0
003CC9 54 79 70 65 10857                   DB	"Type mismatch"
       20 6D 69 73 
       6D 61 74 63 
       68          
003CD6 00          10858                   DB	0
003CD7 19          10859                   DB	19H
003CD8 A4          10860                   DB	TFN
003CD9 00 00       10861                   DW	0
003CDB 11          10862                   DB	11H
003CDC 22          10863                   DB	'"'
003CDD 00          10864                   DB	0
003CDE 13          10865                   DB	13H
003CDF DE          10866                   DB	TDIM
003CE0 00          10867                   DB	0
003CE1 DE          10868                   DB	TDIM
003CE2 18          10869                   DB	18H
003CE3 00          10870                   DB	0
003CE4 19          10871                   DB	19H
003CE5 A4          10872                   DB	TFN
003CE6 20 6F 72 20 10873                   DB	" or "
003CEA F2          10874                   DB	TPROC
003CEB 00          10875                   DB	0
003CEC 19          10876                   DB	19H
003CED F2          10877                   DB	TPROC
003CEE 00          10878                   DB	0
003CEF 13          10879                   DB	13H
003CF0 75 73 65 20 10880                   DB	"use of array"
       6F 66 20 61 
       72 72 61 79 
003CFC 00          10881                   DB	0
003CFD 13          10882                   DB	13H
003CFE 73 75 62 73 10883                   DB	"subscript"
       63 72 69 70 
       74          
003D07 00          10884                   DB	0
003D08 53 79 6E 74 10885                   DB	"Syntax error"
       61 78 20 65 
       72 72 6F 72 
003D14 00          10886                   DB	0
003D15 45 73 63 61 10887                   DB	"Escape"
       70 65       
003D1B 00          10888                   DB	0
003D1C 44 69 76 69 10889                   DB	"Division by zero"
       73 69 6F 6E 
       20 62 79 20 
       7A 65 72 6F 
003D2C 00          10890                   DB	0
003D2D 53 74 72 69 10891                   DB	"String too long"
       6E 67 20 74 
       6F 6F 20 6C 
       6F 6E 67    
003D3C 00          10892                   DB	0
003D3D 4E 75 6D 62 10893                   DB	"Number too big"
       65 72 20 74 
       6F 6F 20 62 
       69 67       
003D4B 00          10894                   DB	0
003D4C 2D 76 65 20 10895                   DB	"-ve root"
       72 6F 6F 74 
003D54 00          10896                   DB	0
003D55 4C 6F 67    10897                   DB	"Log"
003D58 14          10898                   DB	14H
003D59 00          10899                   DB	0
003D5A 41 63 63 75 10900                   DB	"Accuracy lost"
       72 61 63 79 
       20 6C 6F 73 
       74          
003D67 00          10901                   DB	0
003D68 45 78 70 6F 10902                   DB	"Exponent"
       6E 65 6E 74 
003D70 14          10903                   DB	14H
003D71 00 00       10904                   DW	0
003D73 12          10905                   DB	12H
003D74 15          10906                   DB	15H
003D75 00          10907                   DB	0
003D76 11          10908                   DB	11H
003D77 29          10909                   DB	')'
003D78 00          10910                   DB	0
003D79 13          10911                   DB	13H
003D7A 68 65 78 20 10912                   DB	"hex or binary"
       6F 72 20 62 
       69 6E 61 72 
       79          
003D87 00          10913                   DB	0
003D88 12          10914                   DB	12H
003D89 A4          10915                   DB	TFN
003D8A 2F          10916                   DB	'/'
003D8B F2          10917                   DB	TPROC
003D8C 00          10918                   DB	0
003D8D 13          10919                   DB	13H
003D8E 63 61 6C 6C 10920                   DB	"call"
003D92 00          10921                   DB	0
003D93 13          10922                   DB	13H
003D94 61 72 67 75 10923                   DB	"arguments"
       6D 65 6E 74 
       73          
003D9D 00          10924                   DB	0
003D9E 19          10925                   DB	19H
003D9F E3          10926                   DB	TFOR
003DA0 1A          10927                   DB	1AH
003DA1 00          10928                   DB	0
003DA2 43 61 6E 27 10929                   DB	"Can't match "
       74 20 6D 61 
       74 63 68 20 
003DAE E3          10930                   DB	TFOR
003DAF 00          10931                   DB	0
003DB0 13          10932                   DB	13H
003DB1 E3          10933                   DB	TFOR
003DB2 20          10934                   DB	' '
003DB3 15          10935                   DB	15H
003DB4 00 00       10936                   DW	0
003DB6 11          10937                   DB	11H
003DB7 B8          10938                   DB	TTO
003DB8 00 00       10939                   DW	0
003DBA 17          10940                   DB	17H
003DBB E4          10941                   DB	TGOSUB
003DBC 00          10942                   DB	0
003DBD EE          10943                   DB	TON
003DBE 20 73 79 6E 10944                   DB	" syntax"
       74 61 78    
003DC5 00          10945                   DB	0
003DC6 EE          10946                   DB	TON
003DC7 14          10947                   DB	14H
003DC8 00          10948                   DB	0
003DC9 12          10949                   DB	12H
003DCA 6C 69 6E 65 10950                   DB	"line"
003DCE 00          10951                   DB	0
003DCF 16          10952                   DB	16H
003DD0 20          10953                   DB	' '
003DD1 DC          10954                   DB	TDATA
003DD2 00          10955                   DB	0
003DD3 19          10956                   DB	19H
003DD4 F5          10957                   DB	TREPEAT
003DD5 1A          10958                   DB	1AH
003DD6 00          10959                   DB	0
003DD7 13          10960                   DB	13H
003DD8 10          10961                   DB	TEXIT
003DD9 00          10962                   DB	0
003DDA 11          10963                   DB	11H
003DDB 23          10964                   DB	'#'
003DDC 00          10965                   DB	0
003DDD 19          10966                   DB	19H		;46 Not in a WHILE loop
003DDE C7          10967                   DB	TWHILE
003DDF 1A          10968                   DB	1AH
003DE0 00          10969                   DB	0
003DE1 11          10970                   DB	11H		;47 Missing ENDCASE
003DE2 CB          10971                   DB	TENDCASE
003DE3 00          10972                   DB	0
003DE4 CA          10973                   DB	TOF		;48 OF not last
003DE5 1B          10974                   DB	1BH
003DE6 6C 61 73 74 10975                   DB	"last"
003DEA 00          10976                   DB	0
003DEB 11          10977                   DB	11H		;49 Missing ENDIF
003DEC CD          10978                   DB	TENDIF
003DED 00          10979                   DB	0
003DEE 00 00       10980                   DW	0
003DF0 00          10981                   DB	0
003DF1 EE          10982                   DB	TON		;53 ON ERROR not LOCAL
003DF2 20          10983                   DB	' '
003DF3 85          10984                   DB	TERROR
003DF4 1B          10985                   DB	1BH
003DF5 EA          10986                   DB	TLOCAL
003DF6 00          10987                   DB	0
003DF7 DC          10988                   DB	TDATA		;54 DATA not LOCAL
003DF8 1B          10989                   DB	1BH
003DF9 EA          10990                   DB	TLOCAL
003DFA 00          10991                   DB	0
003DFB             10992   ;
003DFB             10993   ;Indent tokens (first four needn't be at start of line):
003DFB             10994   ;
003DFB E3          10995   TOKADD:         DB	TFOR
003DFC F5          10996                   DB	TREPEAT
003DFD C7          10997                   DB	TWHILE
003DFE C8          10998                   DB	TCASE
003DFF 8B          10999                   DB	TELSE
003E00 C9          11000                   DB	TWHEN
003E01 CC          11001                   DB	TOTHERWISE
003E02             11002   LENADD:         EQU	$-TOKADD
003E02             11003   ;
003E02             11004   ;Outdent tokens (first three needn't be at start of line):
003E02             11005   ;
003E02 ED          11006   TOKSUB:         DB	TNEXT
003E03 FD          11007                   DB	TUNTIL
003E04 CE          11008                   DB	TENDWHILE
003E05 CB          11009                   DB	TENDCASE
003E06 CD          11010                   DB	TENDIF
003E07 8B          11011                   DB	TELSE
003E08 C9          11012                   DB	TWHEN
003E09 CC          11013                   DB	TOTHERWISE
003E0A             11014   LENSUB:         EQU	$-TOKSUB
003E0A             11015   ;
003E0A             11016   ;COMMANDS:
003E0A             11017   ;
003E0A             11018   ;DELETE line,line
003E0A             11019   ;
003E0A CD 5B 44    11020   DELETE:         CALL	DLPAIR
003E0D 7E          11021   DELET1:         LD	A,(HL)
003E0E B7          11022                   OR	A
003E0F 28 79       11023                   JR	Z,WARMNC
003E11 23          11024                   INC	HL
003E12 5E          11025                   LD	E,(HL)
003E13 23          11026                   INC	HL
003E14 56          11027                   LD	D,(HL)
003E15 2B          11028                   DEC	HL
003E16 2B          11029                   DEC	HL
003E17 EB          11030                   EX	DE,HL
003E18 37          11031                   SCF
003E19 ED 42       11032                   SBC	HL,BC
003E1B EB          11033                   EX	DE,HL
003E1C 30 6C       11034                   JR	NC,WARMNC
003E1E C5          11035                   PUSH	BC
003E1F CD 6D 40    11036                   CALL	DEL
003E22 C1          11037                   POP	BC
003E23 18 E8       11038                   JR	DELET1
003E25             11039   ;
003E25             11040   ;LISTO expr
003E25             11041   ;
003E25 FD 23       11042   LISTO:          INC	IY		;SKIP "O"
003E27 CD B7 18    11043                   CALL	EXPRI
003E2A D9          11044                   EXX
003E2B 7D          11045                   LD	A,L
003E2C 32 FE 55    11046                   LD	(LISTON),A
003E2F C3 34 38    11047                   JP	CLOOP
003E32             11048   ;
003E32             11049   ;LIST
003E32             11050   ;LIST line
003E32             11051   ;LIST line,line [IF string]
003E32             11052   ;LIST ,line
003E32             11053   ;LIST line,
003E32             11054   ;
003E32 FE 4F       11055   LIST:           CP	'O'
003E34 28 EF       11056                   JR	Z,LISTO
003E36 0E 01       11057                   LD	C,1
003E38 11 00 54    11058                   LD	DE,BUFFER
003E3B CD 9C 44    11059                   CALL	LEXAN2
003E3E 12          11060                   LD	(DE),A
003E3F FD 21 00 54 11061                   LD	IY,BUFFER
003E43 CD 5B 44    11062                   CALL	DLPAIR
003E46 CD 8F 45    11063                   CALL	NXT
003E49 FE E7       11064                   CP	TIF		;IF CLAUSE ?
003E4B 3E 00       11065                   LD	A,0		;INIT IF-CLAUSE LENGTH
003E4D 20 15       11066                   JR	NZ,LISTB
003E4F FD 23       11067                   INC	IY		;SKIP IF
003E51 CD 8F 45    11068                   CALL	NXT		;SKIP SPACES (IF ANY)
003E54 EB          11069                   EX	DE,HL
003E55 FD E5       11070                   PUSH	IY
003E57 E1          11071                   POP	HL		;HL ADDRESSES IF CLAUSE
003E58 3E 0D       11072                   LD	A,CR
003E5A C5          11073                   PUSH	BC
003E5B 01 00 01    11074                   LD	BC,256
003E5E ED B1       11075                   CPIR			;LOCATE CR
003E60 79          11076                   LD	A,C
003E61 2F          11077                   CPL			;A = SUBSTRING LENGTH
003E62 C1          11078                   POP	BC
003E63 EB          11079                   EX	DE,HL
003E64 5F          11080   LISTB:          LD	E,A		;IF-CLAUSE LENGTH
003E65 78          11081                   LD	A,B
003E66 B1          11082                   OR	C
003E67 20 01       11083                   JR	NZ,LISTA
003E69 0B          11084                   DEC	BC
003E6A D9          11085   LISTA:          EXX
003E6B DD 21 FE 55 11086                   LD	IX,LISTON
003E6F 1E 00       11087                   LD	E,0		;INDENTATION COUNT
003E71 D9          11088                   EXX
003E72 3E 14       11089                   LD	A,20
003E74             11090   ;
003E74 C5          11091   LISTC:          PUSH	BC		;SAVE HIGH LINE NUMBER
003E75 D5          11092                   PUSH	DE		;SAVE IF-CLAUSE LENGTH
003E76 E5          11093                   PUSH	HL		;SAVE PROGRAM POINTER
003E77 08          11094                   EX	AF,AF'
003E78 7E          11095                   LD	A,(HL)
003E79 B7          11096                   OR	A
003E7A 28 0E       11097                   JR	Z,WARMNC
003E7C             11098   ;
003E7C             11099   ;CHECK IF PAST TERMINATING LINE NUMBER:
003E7C             11100   ;
003E7C 7B          11101                   LD	A,E		;A = IF-CLAUSE LENGTH
003E7D 23          11102                   INC	HL
003E7E 5E          11103                   LD	E,(HL)
003E7F 23          11104                   INC	HL
003E80 56          11105                   LD	D,(HL)		;DE = LINE NUMBER
003E81 2B          11106                   DEC	HL
003E82 2B          11107                   DEC	HL
003E83 D5          11108                   PUSH	DE		;SAVE LINE NUMBER
003E84 EB          11109                   EX	DE,HL
003E85 37          11110                   SCF
003E86 ED 42       11111                   SBC	HL,BC
003E88 EB          11112                   EX	DE,HL
003E89 D1          11113                   POP	DE		;RESTORE LINE NUMBER
003E8A D2 33 38    11114   WARMNC:         JP	NC,WARM
003E8D 4E          11115                   LD	C,(HL)		;C = LINE LENGTH + 4
003E8E 47          11116                   LD	B,A		;B = IF-CLAUSE LENGTH
003E8F             11117   ;
003E8F             11118   ;CHECK FOR IF CLAUSE:
003E8F             11119   ;
003E8F 23          11120                   INC	HL
003E90 23          11121                   INC	HL
003E91 23          11122                   INC	HL		;HL ADDRESSES LINE TEXT
003E92 0D          11123                   DEC	C
003E93 0D          11124                   DEC	C
003E94 0D          11125                   DEC	C
003E95 0D          11126                   DEC	C		;C = LINE LENGTH
003E96 D5          11127                   PUSH	DE		;SAVE LINE NUMBER
003E97 E5          11128                   PUSH	HL		;SAVE LINE ADDRESS
003E98 AF          11129                   XOR	A		;A <- 0
003E99 B8          11130                   CP	B		;WAS THERE AN IF-CLAUSE
003E9A FD E5       11131                   PUSH	IY
003E9C D1          11132                   POP	DE		;DE ADDRESSES IF-CLAUSE
003E9D C4 76 1E    11133                   CALL	NZ,SEARCH	;SEARCH FOR IF CLAUSE
003EA0 E1          11134                   POP	HL		;RESTORE LINE ADDRESS
003EA1 D1          11135                   POP	DE		;RESTORE LINE NUMBER
003EA2 FD E5       11136                   PUSH	IY
003EA4 CC E1 40    11137                   CALL	Z,LISTIT	;LIST IF MATCH
003EA7 FD E1       11138                   POP	IY
003EA9             11139   ;
003EA9 08          11140                   EX	AF,AF'
003EAA 3D          11141                   DEC	A
003EAB CD 38 06    11142                   CALL	LTRAP
003EAE E1          11143                   POP	HL		;RESTORE POINTER
003EAF 5E          11144                   LD	E,(HL)
003EB0 16 00       11145                   LD	D,0
003EB2 19          11146                   ADD	HL,DE		;ADDRESS NEXT LINE
003EB3 D1          11147                   POP	DE		;RESTORE IF-CLAUSE LEN
003EB4 C1          11148                   POP	BC		;RESTORE HI LINE NUMBER
003EB5 18 BD       11149                   JR	LISTC
003EB7             11150   ;
003EB7             11151   ;RENUMBER
003EB7             11152   ;RENUMBER start
003EB7             11153   ;RENUMBER start,increment
003EB7             11154   ;RENUMBER ,increment
003EB7             11155   ;
003EB7 CD C7 40    11156   RENUM:          CALL	CLEAR		;USES DYNAMIC AREA
003EBA CD 38 44    11157                   CALL	PAIR		;LOAD HL,BC
003EBD D9          11158                   EXX
003EBE 2A DC 55    11159                   LD	HL,(PAGE_)
003EC1 ED 5B DE 55 11160                   LD	DE,(LOMEM)
003EC5 7E          11161   RENUM1:         LD	A,(HL)		;BUILD TABLE
003EC6 B7          11162                   OR	A
003EC7 28 28       11163                   JR	Z,RENUM2
003EC9 23          11164                   INC	HL
003ECA 4E          11165                   LD	C,(HL)		;OLD LINE NUMBER
003ECB 23          11166                   INC	HL
003ECC 46          11167                   LD	B,(HL)
003ECD EB          11168                   EX	DE,HL
003ECE 71          11169                   LD	(HL),C
003ECF 23          11170                   INC	HL
003ED0 70          11171                   LD	(HL),B
003ED1 23          11172                   INC	HL
003ED2 D9          11173                   EXX
003ED3 E5          11174                   PUSH	HL
003ED4 09          11175                   ADD	HL,BC		;ADD INCREMENT
003ED5 DA 33 44    11176                   JP	C,TOOBIGmn	;"Too big"
003ED8 D9          11177                   EXX
003ED9 C1          11178                   POP	BC
003EDA 71          11179                   LD	(HL),C
003EDB 23          11180                   INC	HL
003EDC 70          11181                   LD	(HL),B
003EDD 23          11182                   INC	HL
003EDE EB          11183                   EX	DE,HL
003EDF 2B          11184                   DEC	HL
003EE0 2B          11185                   DEC	HL
003EE1 AF          11186                   XOR	A
003EE2 47          11187                   LD	B,A
003EE3 4E          11188                   LD	C,(HL)
003EE4 09          11189                   ADD	HL,BC		;NEXT LINE
003EE5 EB          11190                   EX	DE,HL
003EE6 E5          11191                   PUSH	HL
003EE7 24          11192                   INC	H
003EE8 ED 72       11193                   SBC	HL,SP
003EEA E1          11194                   POP	HL
003EEB EB          11195                   EX	DE,HL
003EEC 38 D7       11196                   JR	C,RENUM1	;CONTINUE
003EEE C3 C8 3F    11197                   JP	ERROR_		;'No room' (A = 0)
003EF1             11198   ;
003EF1 EB          11199   RENUM2:         EX	DE,HL
003EF2 36 FF       11200                   LD	(HL),-1
003EF4 23          11201                   INC	HL
003EF5 36 FF       11202                   LD	(HL),-1
003EF7 ED 5B DE 55 11203                   LD	DE,(LOMEM)
003EFB D9          11204                   EXX
003EFC 2A DC 55    11205                   LD	HL,(PAGE_)
003EFF 4E          11206   RENUM3:         LD	C,(HL)
003F00 79          11207                   LD	A,C
003F01 B7          11208                   OR	A
003F02 28 86       11209                   JR	Z,WARMNC
003F04 D9          11210                   EXX
003F05 EB          11211                   EX	DE,HL
003F06 23          11212                   INC	HL
003F07 23          11213                   INC	HL
003F08 5E          11214                   LD	E,(HL)
003F09 23          11215                   INC	HL
003F0A 56          11216                   LD	D,(HL)
003F0B 23          11217                   INC	HL
003F0C D5          11218                   PUSH	DE
003F0D EB          11219                   EX	DE,HL
003F0E D9          11220                   EXX
003F0F D1          11221                   POP	DE
003F10 23          11222                   INC	HL
003F11 73          11223                   LD	(HL),E		;NEW LINE NUMBER
003F12 23          11224                   INC	HL
003F13 72          11225                   LD	(HL),D
003F14 23          11226                   INC	HL
003F15 0D          11227                   DEC	C
003F16 0D          11228                   DEC	C
003F17 0D          11229                   DEC	C
003F18 06 00       11230                   LD	B,0
003F1A 3E 8D       11231   RENUM7:         LD	A,TLINO
003F1C ED B1       11232                   CPIR			;SEARCH FOR LINE NUMBER
003F1E 20 DF       11233                   JR	NZ,RENUM3
003F20 C5          11234                   PUSH	BC
003F21 E5          11235                   PUSH	HL
003F22 E5          11236                   PUSH	HL
003F23 FD E1       11237                   POP	IY
003F25 D9          11238                   EXX
003F26 E5          11239                   PUSH	HL
003F27 CD E4 1F    11240                   CALL	DECODE		;DECODE LINE NUMBER
003F2A E1          11241                   POP	HL
003F2B D9          11242                   EXX
003F2C 44          11243                   LD	B,H
003F2D 4D          11244                   LD	C,L
003F2E 2A DE 55    11245                   LD	HL,(LOMEM)
003F31 5E          11246   RENUM4:         LD	E,(HL)		;CROSS-REFERENCE TABLE
003F32 23          11247                   INC	HL
003F33 56          11248                   LD	D,(HL)
003F34 23          11249                   INC	HL
003F35 EB          11250                   EX	DE,HL
003F36 B7          11251                   OR	A		;CLEAR CARRY
003F37 ED 42       11252                   SBC	HL,BC
003F39 EB          11253                   EX	DE,HL
003F3A 5E          11254                   LD	E,(HL)		;NEW NUMBER
003F3B 23          11255                   INC	HL
003F3C 56          11256                   LD	D,(HL)
003F3D 23          11257                   INC	HL
003F3E 38 F1       11258                   JR	C,RENUM4
003F40 EB          11259                   EX	DE,HL
003F41 28 1A       11260                   JR	Z,RENUM5	;FOUND
003F43 CD 7E 45    11261                   CALL	TELL
003F46 46 61 69 6C 11262                   DB	"Failed at "
       65 64 20 61 
       74 20       
003F50 00          11263                   DB	0
003F51 D9          11264                   EXX
003F52 E5          11265                   PUSH	HL
003F53 D9          11266                   EXX
003F54 E1          11267                   POP	HL
003F55 CD 16 42    11268                   CALL	PBCDL
003F58 CD 7F 41    11269                   CALL	CRLF
003F5B 18 06       11270                   JR	RENUM6
003F5D D1          11271   RENUM5:         POP	DE
003F5E D5          11272                   PUSH	DE
003F5F 1B          11273                   DEC	DE
003F60 CD 43 45    11274                   CALL	ENCODE		;RE-WRITE NUMBER
003F63 E1          11275   RENUM6:         POP	HL
003F64 C1          11276                   POP	BC
003F65 18 B3       11277                   JR	RENUM7
003F67             11278   ;
003F67             11279   ;AUTO
003F67             11280   ;AUTO start,increment
003F67             11281   ;AUTO start
003F67             11282   ;AUTO ,increment
003F67             11283   ;
003F67 CD 38 44    11284   AUTO:           CALL	PAIR
003F6A 22 E8 55    11285                   LD	(AUTONO),HL
003F6D 79          11286                   LD	A,C
003F6E 32 FF 55    11287                   LD	(INCREM),A
003F71 18 37       11288                   JR	CLOOP0
003F73             11289   ;
003F73             11290   ;BAD
003F73             11291   ;NEW
003F73             11292   ;
003F73 CD 7E 45    11293   BAD:            CALL	TELL		;"Bad program'
003F76 13          11294                   DB	13H
003F77 70 72 6F 67 11295                   DB	"program"
       72 61 6D    
003F7E 0D          11296                   DB	CR
003F7F 0A          11297                   DB	LF
003F80 00          11298                   DB	0
003F81 CD C2 40    11299   NEW:            CALL	NEWIT
003F84 18 24       11300                   JR	CLOOP0
003F86             11301   ;
003F86             11302   ;LOAD filename
003F86             11303   ;
003F86 CD C0 18    11304   LOAD:           CALL	EXPRS		;GET FILENAME
003F89 3E 0D       11305                   LD	A,CR
003F8B 12          11306                   LD	(DE),A
003F8C CD 84 40    11307                   CALL	LOAD0
003F8F CD C7 40    11308                   CALL	CLEAR
003F92 18 31       11309                   JR	WARM0
003F94             11310   ;
003F94             11311   ;OLD
003F94             11312   ;
003F94 2A DC 55    11313   OLD:            LD	HL,(PAGE_)
003F97 E5          11314                   PUSH	HL
003F98 23          11315                   INC	HL
003F99 23          11316                   INC	HL
003F9A 23          11317                   INC	HL
003F9B 01 FC 00    11318                   LD	BC,252
003F9E 3E 0D       11319                   LD	A,CR
003FA0 ED B1       11320                   CPIR
003FA2 20 CF       11321                   JR	NZ,BAD
003FA4 7D          11322                   LD	A,L
003FA5 E1          11323                   POP	HL
003FA6 77          11324                   LD	(HL),A
003FA7 CD 9E 40    11325                   CALL	CLEAN
003FAA C3 34 38    11326   CLOOP0:         JP	CLOOP
003FAD             11327   ;
003FAD             11328   ;SAVE filename
003FAD             11329   ;
003FAD CD C0 18    11330   SAVE:           CALL	EXPRS		;FILENAME
003FB0 3E 0D       11331                   LD	A,CR
003FB2 12          11332                   LD	(DE),A
003FB3 ED 5B DC 55 11333                   LD	DE,(PAGE_)
003FB7 CD A9 40    11334                   CALL	GETTOP
003FBA B7          11335                   OR	A
003FBB ED 52       11336                   SBC	HL,DE
003FBD 44          11337                   LD	B,H		;LENGTH OF PROGRAM
003FBE 4D          11338                   LD	C,L
003FBF 21 00 53    11339                   LD	HL,ACCS
003FC2 CD C4 07    11340                   CALL	OSSAVE
003FC5 C3 33 38    11341   WARM0:          JP	WARM
003FC8             11342   ;
003FC8             11343   ;ERROR
003FC8             11344   ;N.B. CARE NEEDED BECAUSE SP MAY NOT BE VALID (E.G. ABOVE HIMEM)
003FC8             11345   ;
003FC8 21 A5 3C    11346   ERROR_:         LD	HL,ERRWDS
003FCB 4F          11347                   LD	C,A
003FCC B7          11348                   OR	A
003FCD 28 0C       11349                   JR	Z,ERROR1
003FCF 47          11350                   LD	B,A		;ERROR NUMBER
003FD0 AF          11351                   XOR	A
003FD1 BE          11352   ERROR0:         CP	(HL)
003FD2 23          11353                   INC	HL
003FD3 20 FC       11354                   JR	NZ,ERROR0
003FD5 10 FA       11355                   DJNZ	ERROR0
003FD7 18 02       11356                   JR	ERROR1		;MUST NOT PUSH HL HERE
003FD9             11357   ;
003FD9 E1          11358   EXTERR:         POP	HL
003FDA 4F          11359                   LD	C,A
003FDB 22 EE 55    11360   ERROR1:         LD	(ERRTXT),HL
003FDE 2A EC 55    11361                   LD	HL,(ONERSP)
003FE1 7C          11362                   LD	A,H
003FE2 B5          11363                   OR	L
003FE3 ED 7B E2 55 11364                   LD	SP,(HIMEM)	;MUST SET SP BEFORE 'CALL'
003FE7 28 01       11365                   JR	Z,ERROR4
003FE9 F9          11366                   LD	SP,HL
003FEA 79          11367   ERROR4:         LD	A,C		;ERROR NUMBER
003FEB CD DF 41    11368                   CALL	SETLIN		;SP IS SET NOW
003FEE 32 FD 55    11369                   LD	(ERR),A
003FF1 22 F2 55    11370                   LD	(ERL),HL
003FF4 B7          11371                   OR	A
003FF5 28 0B       11372                   JR	Z,ERROR2	;'FATAL' ERROR
003FF7 2A EA 55    11373                   LD	HL,(ERRTRP)
003FFA 7C          11374                   LD	A,H
003FFB B5          11375                   OR	L
003FFC E5          11376                   PUSH	HL
003FFD FD E1       11377                   POP	IY
003FFF C2 1D 25    11378                   JP	NZ,XEQ		;ERROR TRAPPED
004002 ED 7B E2 55 11379   ERROR2:         LD	SP,(HIMEM)
004006 ED 62       11380                   SBC	HL,HL
004008 22 E8 55    11381                   LD	(AUTONO),HL
00400B 22 E6 55    11382                   LD	(TRACEN),HL	;CANCEL TRACE
00400E CD 45 06    11383                   CALL	RESET		;RESET OPSYS
004011 CD 7F 41    11384                   CALL	CRLF
004014 CD 69 45    11385                   CALL	REPORT		;MESSAGE
004017 2A F2 55    11386                   LD	HL,(ERL)
00401A CD 06 42    11387                   CALL	SAYLN
00401D 1E 00       11388                   LD	E,0
00401F DC 55 06    11389                   CALL	C,OSSHUT	;CLOSE ALL FILES
004022 CD 7F 41    11390                   CALL	CRLF
004025 18 83       11391                   JR	CLOOP0
004027             11392   ;
004027             11393   ;SUBROUTINES:
004027             11394   ;
004027             11395   ;
004027             11396   ;LEX - SEARCH FOR KEYWORDS
004027             11397   ;   Inputs: HL = start of keyword table
004027             11398   ;           IY = start of match text
004027             11399   ;  Outputs: If found, Z-flag set, A=token.
004027             11400   ;           If not found, Z-flag reset, A=(IY).
004027             11401   ;           IY updated (if NZ, IY unchanged).
004027             11402   ; Destroys: A,B,H,L,IY,F
004027             11403   ;
004027 21 08 39    11404   LEX:            LD	HL,KEYWDS
00402A FD 7E 00    11405   LEX0:           LD	A,(IY)
00402D 46          11406                   LD	B,(HL)
00402E 23          11407                   INC	HL
00402F BE          11408                   CP	(HL)
004030 28 0A       11409                   JR	Z,LEX2
004032 D8          11410                   RET	C		;FAIL EXIT
004033 23          11411   LEX1:           INC	HL
004034 7E          11412                   LD	A,(HL)
004035 FE A0       11413                   CP	160
004037 EA 33 40    11414                   JP	PE,LEX1
00403A 18 EE       11415                   JR	LEX0
00403C             11416   ;
00403C FD E5       11417   LEX2:           PUSH	IY		;SAVE POINTER
00403E 23          11418   LEX3:           INC	HL
00403F 7E          11419                   LD	A,(HL)
004040 FE A0       11420                   CP	160
004042 E2 69 40    11421                   JP	PO,LEX6		;FOUND
004045 FD 23       11422                   INC	IY
004047 FD 7E 00    11423                   LD	A,(IY)
00404A BE          11424                   CP	(HL)
00404B 20 05       11425                   JR	NZ,LEX7
00404D FE A1       11426                   CP	161
00404F EA 3E 40    11427                   JP	PE,LEX3
004052 FD 7E 00    11428   LEX7:           LD	A,(IY)
004055 FE 2E       11429                   CP	'.'
004057 28 10       11430                   JR	Z,LEX6		;FOUND (ABBREV.)
004059 CD 80 44    11431                   CALL	RANGE1
00405C 38 04       11432                   JR	C,LEX5
00405E FD E1       11433   LEX4:           POP	IY		;RESTORE POINTER
004060 18 D1       11434                   JR	LEX1
004062             11435   ;
004062 7E          11436   LEX5:           LD	A,(HL)
004063 FE 20       11437                   CP	' '
004065 20 F7       11438                   JR	NZ,LEX4
004067 FD 2B       11439                   DEC	IY
004069 F1          11440   LEX6:           POP	AF
00406A AF          11441                   XOR	A
00406B 78          11442                   LD	A,B
00406C C9          11443                   RET
00406D             11444   ;
00406D             11445   ;DEL - DELETE A PROGRAM LINE.
00406D             11446   ;   Inputs: HL addresses program line.
00406D             11447   ; Destroys: B,C,F
00406D             11448   ;
00406D D5          11449   DEL:            PUSH	DE
00406E E5          11450                   PUSH	HL
00406F E5          11451                   PUSH	HL
004070 06 00       11452                   LD	B,0
004072 4E          11453                   LD	C,(HL)
004073 09          11454                   ADD	HL,BC
004074 E5          11455                   PUSH	HL
004075 EB          11456                   EX	DE,HL
004076 CD A9 40    11457                   CALL	GETTOP
004079 ED 52       11458                   SBC	HL,DE
00407B 44          11459                   LD	B,H
00407C 4D          11460                   LD	C,L
00407D E1          11461                   POP	HL
00407E D1          11462                   POP	DE
00407F ED B0       11463                   LDIR			;DELETE LINE
004081 E1          11464                   POP	HL
004082 D1          11465                   POP	DE
004083 C9          11466                   RET
004084             11467   ;
004084             11468   ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
004084             11469   ;   Inputs: Filename in ACCS (term CR)
004084             11470   ; Destroys: A,B,C,D,E,H,L,F
004084             11471   ;
004084             11472   ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
004084             11473   ; AND WRITE FF FF.
004084             11474   ; Destroys: A,B,C,H,L,F
004084             11475   ;
004084 ED 5B DC 55 11476   LOAD0:          LD	DE,(PAGE_)
004088 21 00 FF    11477                   LD	HL,-256
00408B 39          11478                   ADD	HL,SP
00408C ED 52       11479                   SBC	HL,DE		;FIND AVAILABLE SPACE
00408E 44          11480                   LD	B,H
00408F 4D          11481                   LD	C,L
004090 21 00 53    11482                   LD	HL,ACCS
004093 CD CE 06    11483                   CALL	OSLOAD		;LOAD
004096 D4 C2 40    11484                   CALL	NC,NEWIT
004099 3E 00       11485                   LD	A,0
00409B D2 C8 3F    11486                   JP	NC,ERROR_	;"No room"
00409E CD A9 40    11487   CLEAN:          CALL	GETTOP
0040A1 2B          11488                   DEC	HL
0040A2 36 FF       11489                   LD	(HL),-1		;WRITE &FFFF
0040A4 2B          11490                   DEC	HL
0040A5 36 FF       11491                   LD	(HL),-1
0040A7 18 1E       11492                   JR	CLEAR
0040A9             11493   ;
0040A9 2A DC 55    11494   GETTOP:         LD	HL,(PAGE_)
0040AC 06 00       11495                   LD	B,0
0040AE 3E 0D       11496                   LD	A,CR
0040B0 4E          11497   GETOP1:         LD	C,(HL)
0040B1 0C          11498                   INC	C
0040B2 0D          11499                   DEC	C
0040B3 28 09       11500                   JR	Z,GETOP2
0040B5 09          11501                   ADD	HL,BC
0040B6 2B          11502                   DEC	HL
0040B7 BE          11503                   CP	(HL)
0040B8 23          11504                   INC	HL
0040B9 28 F5       11505                   JR	Z,GETOP1
0040BB C3 73 3F    11506                   JP	BAD
0040BE 23          11507   GETOP2:         INC	HL		;N.B. CALLED FROM NEWIT
0040BF 23          11508                   INC	HL
0040C0 23          11509                   INC	HL
0040C1 C9          11510                   RET
0040C2             11511   ;
0040C2             11512   ;NEWIT - NEW PROGRAM THEN CLEAR
0040C2             11513   ;   Destroys: H,L
0040C2             11514   ;
0040C2             11515   ;CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
0040C2             11516   ; FUNCTION AND PROCEDURE POINTERS.
0040C2             11517   ;   Destroys: Nothing
0040C2             11518   ;
0040C2 2A DC 55    11519   NEWIT:          LD	HL,(PAGE_)
0040C5 36 00       11520                   LD	(HL),0
0040C7 E5          11521   CLEAR:          PUSH	HL
0040C8 C5          11522                   PUSH	BC
0040C9 F5          11523                   PUSH	AF
0040CA CD A9 40    11524                   CALL	GETTOP
0040CD 22 DE 55    11525                   LD	(LOMEM),HL
0040D0 22 E0 55    11526                   LD	(FREE),HL
0040D3 21 6C 55    11527                   LD	HL,DYNVAR
0040D6             11528                   ; LD	B,2*(54+2)
0040D6 06 70       11529                   LD	B,54+2*2
0040D8 36 00       11530   CLEAR1:         LD	(HL),0
0040DA 23          11531                   INC	HL
0040DB 10 FB       11532                   DJNZ	CLEAR1
0040DD F1          11533                   POP	AF
0040DE C1          11534                   POP	BC
0040DF E1          11535                   POP	HL
0040E0 C9          11536                   RET
0040E1             11537   ;
0040E1             11538   ;LISTIT - LIST A PROGRAM LINE.
0040E1             11539   ;    Inputs: HL addresses line
0040E1             11540   ;            DE = line number (binary)
0040E1             11541   ;	     E' = indentation count
0040E1             11542   ;            IX addresses LISTON
0040E1             11543   ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
0040E1             11544   ;
0040E1 E5          11545   LISTIT:         PUSH	HL
0040E2 EB          11546                   EX	DE,HL
0040E3 C5          11547                   PUSH	BC
0040E4 CD 1A 42    11548                   CALL	PBCD
0040E7 C1          11549                   POP	BC
0040E8 E1          11550                   POP	HL
0040E9 7E          11551                   LD	A,(HL)
0040EA D9          11552                   EXX
0040EB 21 02 3E    11553                   LD	HL,TOKSUB
0040EE 01 08 00    11554                   LD	BC,LENSUB
0040F1 ED B1       11555                   CPIR
0040F3 CC 79 41    11556                   CALL	Z,INDSUB
0040F6 FE CB       11557                   CP	TENDCASE
0040F8 CC 79 41    11558                   CALL	Z,INDSUB
0040FB 3E 20       11559                   LD	A,' '
0040FD DD CB 00 46 11560                   BIT	0,(IX)
004101 C4 86 41    11561                   CALL	NZ,OUTCHR
004104 7B          11562                   LD	A,E
004105 87          11563                   ADD	A,A
004106 DD CB 00 4E 11564                   BIT	1,(IX)
00410A C4 27 36    11565                   CALL	NZ,SPACES
00410D D9          11566                   EXX
00410E 7E          11567                   LD	A,(HL)
00410F 1E 00       11568                   LD	E,0
004111 D9          11569                   EXX
004112 01 07 00    11570                   LD	BC,LENADD
004115 21 FB 3D    11571   LIST5:          LD	HL,TOKADD
004118 ED B1       11572                   CPIR
00411A CC 7D 41    11573                   CALL	Z,INDADD
00411D FE C8       11574                   CP	TCASE
00411F CC 7D 41    11575                   CALL	Z,INDADD
004122 D9          11576                   EXX
004123 7E          11577   LIST8:          LD	A,(HL)
004124 23          11578                   INC	HL
004125 FE 0D       11579                   CP	CR
004127 28 25       11580                   JR	Z,LIST9
004129 57          11581                   LD	D,A
00412A FE 10       11582                   CP	TEXIT
00412C 20 02       11583                   JR	NZ,LIST6
00412E CB FB       11584                   SET	7,E
004130 FE 22       11585   LIST6:          CP	'"'
004132 20 01       11586                   JR	NZ,LIST7
004134 1C          11587                   INC	E
004135 CD 6D 41    11588   LIST7:          CALL	LOUT
004138 7B          11589                   LD	A,E
004139 E6 81       11590                   AND	81H
00413B 20 E6       11591                   JR	NZ,LIST8
00413D 7E          11592                   LD	A,(HL)
00413E D9          11593                   EXX
00413F 21 02 3E    11594                   LD	HL,TOKSUB
004142 01 03 00    11595                   LD	BC,3
004145 ED B1       11596                   CPIR
004147 CC 79 41    11597                   CALL	Z,INDSUB
00414A 0E 04       11598                   LD	C,4
00414C 18 C7       11599                   JR	LIST5
00414E             11600   ;
00414E 7A          11601   LIST9:          LD	A,D
00414F FE 8C       11602                   CP	TTHEN
004151 D9          11603                   EXX
004152 CC 7D 41    11604                   CALL	Z,INDADD
004155 D9          11605                   EXX
004156 18 27       11606                   JR	CRLF
004158             11607   ;
004158 E5          11608   PRLINO:         PUSH	HL
004159 FD E1       11609                   POP	IY
00415B C5          11610                   PUSH	BC
00415C CD E4 1F    11611                   CALL	DECODE
00415F C1          11612                   POP	BC
004160 D9          11613                   EXX
004161 C5          11614                   PUSH	BC
004162 D5          11615                   PUSH	DE
004163 CD 16 42    11616                   CALL	PBCDL
004166 D1          11617                   POP	DE
004167 C1          11618                   POP	BC
004168 D9          11619                   EXX
004169 FD E5       11620                   PUSH	IY
00416B E1          11621                   POP	HL
00416C C9          11622                   RET
00416D             11623   ;
00416D CB 43       11624   LOUT:           BIT	0,E
00416F 20 15       11625                   JR	NZ,OUTCHR
004171 FE 8D       11626                   CP	TLINO
004173 28 E3       11627                   JR	Z,PRLINO
004175 CD 9F 41    11628                   CALL	OUT
004178 C9          11629                   RET
004179             11630   ;
004179 1D          11631   INDSUB:         DEC	E
00417A F2 7E 41    11632                   JP	P,INDRET
00417D 1C          11633   INDADD:         INC	E
00417E C9          11634   INDRET:         RET
00417F             11635   ;
00417F             11636   ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
00417F             11637   ;  Destroys: A,F
00417F             11638   ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
00417F             11639   ;    Inputs: A = character
00417F             11640   ;  Destroys: A,F
00417F             11641   ;
00417F 3E 0D       11642   CRLF:           LD	A,CR
004181 CD 86 41    11643                   CALL	OUTCHR
004184 3E 0A       11644                   LD	A,LF
004186 CD 97 05    11645   OUTCHR:         CALL	OSWRCH
004189 D6 0D       11646                   SUB	CR
00418B 28 05       11647                   JR	Z,CARRET
00418D D8          11648                   RET	C		;NON-PRINTING
00418E 3A FB 55    11649                   LD	A,(COUNT)
004191 3C          11650                   INC	A
004192 32 FB 55    11651   CARRET:         LD	(COUNT),A
004195 C8          11652                   RET	Z
004196 E5          11653                   PUSH	HL
004197 2A FC 55    11654                   LD	HL,(WIDTH)
00419A BD          11655                   CP	L
00419B E1          11656                   POP	HL
00419C C0          11657                   RET	NZ
00419D 18 E0       11658                   JR	CRLF
00419F             11659   ;
00419F             11660   ;OUT - SEND CHARACTER OR KEYWORD
00419F             11661   ;   Inputs: A = character (>=10, <128)
00419F             11662   ;           A = Token (<10, >=128)
00419F             11663   ;  Destroys: A,F
00419F             11664   ;
00419F FE A0       11665   OUT:            CP	160
0041A1 EA 86 41    11666                   JP	PE,OUTCHR
0041A4 C5          11667                   PUSH	BC
0041A5 E5          11668                   PUSH	HL
0041A6 21 08 39    11669                   LD	HL,KEYWDS
0041A9 01 5B 03    11670                   LD	BC,KEYWDL
0041AC ED B1       11671                   CPIR
0041AE C4 86 41    11672                   CALL	NZ,OUTCHR
0041B1 06 A0       11673                   LD	B,160
0041B3 FE 91       11674                   CP	145
0041B5 EA B9 41    11675                   JP	PE,TOKEN1
0041B8 04          11676                   INC	B
0041B9 7E          11677   TOKEN1:         LD	A,(HL)
0041BA 23          11678                   INC	HL
0041BB B8          11679                   CP	B
0041BC F5          11680                   PUSH	AF
0041BD EC 86 41    11681                   CALL	PE,OUTCHR
0041C0 F1          11682                   POP	AF
0041C1 EA B9 41    11683                   JP	PE,TOKEN1
0041C4 E1          11684                   POP	HL
0041C5 C1          11685                   POP	BC
0041C6 C9          11686                   RET
0041C7             11687   ;
0041C7             11688   ;FINDL - FIND PROGRAM LINE.
0041C7             11689   ;   Inputs: HL = line number (binary)
0041C7             11690   ;  Outputs: HL addresses line (if found)
0041C7             11691   ;           DE = line number
0041C7             11692   ;           Z-flag set if found.
0041C7             11693   ; Destroys: A,B,C,D,E,H,L,F
0041C7             11694   ;
0041C7 EB          11695   FINDL:          EX	DE,HL
0041C8 2A DC 55    11696                   LD	HL,(PAGE_)
0041CB AF          11697                   XOR	A		;A=0
0041CC BE          11698                   CP	(HL)
0041CD 3C          11699                   INC	A
0041CE D0          11700                   RET	NC
0041CF AF          11701                   XOR	A		;CLEAR CARRY
0041D0 47          11702                   LD	B,A
0041D1 4E          11703   FINDL1:         LD	C,(HL)
0041D2 E5          11704                   PUSH	HL
0041D3 23          11705                   INC	HL
0041D4 7E          11706                   LD	A,(HL)
0041D5 23          11707                   INC	HL
0041D6 66          11708                   LD	H,(HL)
0041D7 6F          11709                   LD	L,A
0041D8 ED 52       11710                   SBC	HL,DE
0041DA E1          11711                   POP	HL
0041DB D0          11712                   RET	NC		;FOUND | PAST
0041DC 09          11713                   ADD	HL,BC
0041DD 18 F2       11714                   JR	FINDL1
0041DF             11715   ;
0041DF             11716   ;SETLIN - Search program for line containing address.
0041DF             11717   ;   Inputs: Address in (CURLIN)
0041DF             11718   ;  Outputs: Line number in HL
0041DF             11719   ; Destroys: B,C,D,E,H,L,F
0041DF             11720   ;
0041DF 06 00       11721   SETLIN:         LD	B,0
0041E1 ED 5B F4 55 11722                   LD	DE,(CURLIN)
0041E5 2A DC 55    11723                   LD	HL,(PAGE_)
0041E8 B7          11724                   OR	A
0041E9 ED 52       11725                   SBC	HL,DE
0041EB 19          11726                   ADD	HL,DE
0041EC 30 13       11727                   JR	NC,SET3
0041EE 4E          11728   SET1:           LD	C,(HL)
0041EF 0C          11729                   INC	C
0041F0 0D          11730                   DEC	C
0041F1 28 0E       11731                   JR	Z,SET3
0041F3 09          11732                   ADD	HL,BC
0041F4 ED 52       11733                   SBC	HL,DE
0041F6 19          11734                   ADD	HL,DE
0041F7 38 F5       11735                   JR	C,SET1
0041F9 ED 42       11736                   SBC	HL,BC
0041FB 23          11737                   INC	HL
0041FC 5E          11738                   LD	E,(HL)		;LINE NUMBER
0041FD 23          11739                   INC	HL
0041FE 56          11740                   LD	D,(HL)
0041FF EB          11741                   EX	DE,HL
004200 C9          11742   SET2:           RET
004201             11743   ;
004201 21 00 00    11744   SET3:           LD	HL,0
004204 18 FA       11745                   JR	SET2
004206             11746   ;
004206             11747   ;SAYLN - PRINT " at line nnnn" MESSAGE.
004206             11748   ;   Inputs: HL = line number
004206             11749   ;  Outputs: Carry=0 if line number is zero.
004206             11750   ;           Carry=1 if line number is non-zero.
004206             11751   ; Destroys: A,B,C,D,E,H,L,F
004206             11752   ;
004206 7C          11753   SAYLN:          LD	A,H
004207 B5          11754                   OR	L
004208 C8          11755                   RET	Z
004209 CD 7E 45    11756                   CALL	TELL
00420C 20 61 74 20 11757                   DB	" at line "
       6C 69 6E 65 
       20          
004215 00          11758                   DB	0
004216 0E 00       11759   PBCDL:          LD	C,0
004218 18 02       11760                   JR	PBCD0
00421A             11761   ;
00421A             11762   ;PBCD - PRINT NUMBER AS DECIMAL INTEGER.
00421A             11763   ;   Inputs: HL = number (binary).
00421A             11764   ;  Outputs: Carry = 1
00421A             11765   ; Destroys: A,B,C,D,E,H,L,F
00421A             11766   ;
00421A 0E 20       11767   PBCD:           LD	C,' '
00421C 06 05       11768   PBCD0:          LD	B,5
00421E 11 10 27    11769                   LD	DE,10000
004221 AF          11770   PBCD1:          XOR	A
004222 ED 52       11771   PBCD2:          SBC	HL,DE
004224 3C          11772                   INC	A
004225 30 FB       11773                   JR	NC,PBCD2
004227 19          11774                   ADD	HL,DE
004228 3D          11775                   DEC	A
004229 28 04       11776                   JR	Z,PBCD3
00422B CB E1       11777                   SET	4,C
00422D CB E9       11778                   SET	5,C
00422F B1          11779   PBCD3:          OR	C
004230 C4 86 41    11780                   CALL	NZ,OUTCHR
004233 78          11781                   LD	A,B
004234 FE 05       11782                   CP	5
004236 28 06       11783                   JR	Z,PBCD4
004238 29          11784                   ADD	HL,HL
004239 54          11785                   LD	D,H
00423A 5D          11786                   LD	E,L
00423B 29          11787                   ADD	HL,HL
00423C 29          11788                   ADD	HL,HL
00423D 19          11789                   ADD	HL,DE
00423E 11 E8 03    11790   PBCD4:          LD	DE,1000
004241 10 DE       11791                   DJNZ	PBCD1
004243 37          11792                   SCF
004244 C9          11793                   RET
004245             11794   ;
004245             11795   ;HANDLE WHOLE ARRAY:
004245             11796   ;
004245 FD 23       11797   GETV1:          INC	IY
004247 FD 23       11798                   INC	IY		;SKIP ()
004249 E5          11799                   PUSH	HL		;SET EXIT CONDITIONS
00424A DD E1       11800                   POP	IX
00424C 7A          11801                   LD	A,D
00424D F6 40       11802                   OR	64		;FLAG ARRAY
00424F BF          11803                   CP	A
004250 C9          11804                   RET
004251             11805   ;
004251             11806   ;PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
004251             11807   ;   Inputs: HL, IY as returned from GETVAR (NZ).
004251             11808   ;  Outputs: As GETVAR.
004251             11809   ; Destroys: everything
004251             11810   ;
004251 CD C0 43    11811   PUTVAR:         CALL	CREATE
004254 FD 7E 00    11812                   LD	A,(IY)
004257 FE 28       11813                   CP	'('
004259 20 7D       11814                   JR	NZ,GETVZ	;SET EXIT CONDITIONS
00425B FD 7E 01    11815                   LD	A,(IY+1)
00425E FE 29       11816                   CP	')'		;WHOLE ARRAY?
004260 28 E3       11817                   JR	Z,GETV1
004262 3E 0E       11818   ARRAY:          LD	A,14		;'Bad use of array'
004264 C3 C8 3F    11819   ERROR3:         JP	ERROR_
004267             11820   ;
004267             11821   ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
004267             11822   ;   Inputs: IY addresses first character.
004267             11823   ;  Outputs: Carry set and NZ if illegal character.
004267             11824   ;           Z-flag set if variable found, then:
004267             11825   ;            A = variable type (0,4,5,128 or 129)
004267             11826   ;                (68,69 or 193 for whole array)
004267             11827   ;            HL = IX = variable pointer.
004267             11828   ;            IY updated
004267             11829   ;           If Z-flag & carry reset, then:
004267             11830   ;            HL, IY set for subsequent PUTVAR call.
004267             11831   ; Destroys: everything
004267             11832   ;
004267 FD 7E 00    11833   GETVAR:         LD	A,(IY)
00426A FE 21       11834                   CP	'!'
00426C 28 76       11835                   JR	Z,GETV5
00426E FE 3F       11836                   CP	'?'
004270 28 76       11837                   JR	Z,GETV6
004272 FE 7C       11838                   CP	'|'
004274 28 75       11839                   JR	Z,GETVF
004276 FE 24       11840                   CP	'$'
004278 28 75       11841                   JR	Z,GETV4
00427A CD 34 43    11842                   CALL	LOCATE
00427D C0          11843                   RET	NZ
00427E FD 7E 00    11844                   LD	A,(IY)
004281 FE 28       11845                   CP	'('		;ARRAY?
004283 20 4B       11846                   JR	NZ,GETVX	;EXIT
004285 FD 7E 01    11847                   LD	A,(IY+1)
004288 FE 29       11848                   CP	')'		;WHOLE ARRAY?
00428A 28 B9       11849                   JR	Z,GETV1
00428C D5          11850                   PUSH	DE		;SAVE TYPE
00428D 7E          11851                   LD	A,(HL)
00428E 23          11852                   INC	HL
00428F 66          11853                   LD	H,(HL)
004290 6F          11854                   LD	L,A		;INDIRECT LINK
004291 E6 FE       11855                   AND	0FEH
004293 B4          11856                   OR	H
004294 28 CC       11857                   JR	Z,ARRAY
004296 7E          11858                   LD	A,(HL)		;NO. OF DIMENSIONS
004297 B7          11859                   OR	A
004298 28 C8       11860                   JR	Z,ARRAY
00429A 23          11861                   INC	HL
00429B 11 00 00    11862                   LD	DE,0		;ACCUMULATOR
00429E F5          11863                   PUSH	AF
00429F FD 23       11864                   INC	IY		;SKIP (
0042A1 E5          11865   GETV3:          PUSH	HL
0042A2 D5          11866                   PUSH	DE
0042A3 CD B7 18    11867                   CALL	EXPRI		;SUBSCRIPT
0042A6 D9          11868                   EXX
0042A7 D1          11869                   POP	DE
0042A8 E3          11870                   EX	(SP),HL
0042A9 4E          11871                   LD	C,(HL)
0042AA 23          11872                   INC	HL
0042AB 46          11873                   LD	B,(HL)
0042AC 23          11874                   INC	HL
0042AD E3          11875                   EX	(SP),HL
0042AE EB          11876                   EX	DE,HL
0042AF D5          11877                   PUSH	DE
0042B0 CD 41 37    11878                   CALL	MUL16		;HL=HL*BC
0042B3 D1          11879                   POP	DE
0042B4 19          11880                   ADD	HL,DE
0042B5 EB          11881                   EX	DE,HL
0042B6 B7          11882                   OR	A
0042B7 ED 42       11883                   SBC	HL,BC
0042B9 3E 0F       11884                   LD	A,15
0042BB 30 A7       11885                   JR	NC,ERROR3	;"Subscript"
0042BD E1          11886                   POP	HL
0042BE F1          11887                   POP	AF
0042BF 3D          11888                   DEC	A		;DIMENSION COUNTER
0042C0 20 1C       11889                   JR	NZ,GETV2
0042C2 CD 32 21    11890                   CALL	BRAKET		;CLOSING BRACKET
0042C5 F1          11891                   POP	AF		;RESTORE TYPE
0042C6 E5          11892                   PUSH	HL
0042C7 CD 31 37    11893                   CALL	X14OR5		;DE=DE*n
0042CA E1          11894                   POP	HL
0042CB 19          11895                   ADD	HL,DE
0042CC 57          11896                   LD	D,A		;TYPE
0042CD FD 7E 00    11897                   LD	A,(IY)
0042D0 FE 3F       11898   GETVX:          CP	'?'
0042D2 28 26       11899                   JR	Z,GETV9
0042D4 FE 21       11900                   CP	'!'
0042D6 28 1E       11901                   JR	Z,GETV8
0042D8 E5          11902   GETVZ:          PUSH	HL		;SET EXIT CONDITIONS
0042D9 DD E1       11903                   POP	IX
0042DB 7A          11904                   LD	A,D
0042DC BF          11905                   CP	A
0042DD C9          11906                   RET
0042DE             11907   ;
0042DE F5          11908   GETV2:          PUSH	AF
0042DF CD 26 21    11909                   CALL	COMMA
0042E2 18 BD       11910                   JR	GETV3
0042E4             11911   ;
0042E4             11912   ;PROCESS UNARY & BINARY INDIRECTION:
0042E4             11913   ;
0042E4 3E 04       11914   GETV5:          LD	A,4		;UNARY 32-BIT INDIRN.
0042E6 18 09       11915                   JR	GETV7
0042E8 AF          11916   GETV6:          XOR	A		;UNARY 8-BIT INDIRECTION
0042E9 18 06       11917                   JR	GETV7
0042EB 3E 05       11918   GETVF:          LD	A,5		;VARIANT INDIRECTION
0042ED 18 02       11919                   JR	GETV7
0042EF 3E 80       11920   GETV4:          LD	A,128		;STATIC STRING
0042F1 ED 62       11921   GETV7:          SBC	HL,HL
0042F3 F5          11922                   PUSH	AF
0042F4 18 15       11923                   JR	GETV0
0042F6             11924   ;
0042F6 06 04       11925   GETV8:          LD	B,4		;32-BIT BINARY INDIRN.
0042F8 18 02       11926                   JR	GETVA
0042FA 06 00       11927   GETV9:          LD	B,0		;8-BIT BINARY INDIRN.
0042FC E5          11928   GETVA:          PUSH	HL
0042FD DD E1       11929                   POP	IX
0042FF 7A          11930                   LD	A,D		;TYPE
004300 FE 81       11931                   CP	129
004302 C8          11932                   RET	Z		;STRING!
004303 C5          11933                   PUSH	BC
004304 CD A9 19    11934                   CALL	LOADN		;LEFT OPERAND
004307 CD 9B 1C    11935                   CALL	SFIX
00430A D9          11936                   EXX
00430B E5          11937   GETV0:          PUSH	HL
00430C FD 23       11938                   INC	IY
00430E CD E4 18    11939                   CALL	ITEMI
004311 D9          11940                   EXX
004312 D1          11941                   POP	DE
004313 F1          11942                   POP	AF
004314 19          11943                   ADD	HL,DE
004315 E5          11944                   PUSH	HL
004316 DD E1       11945                   POP	IX
004318 BF          11946                   CP	A
004319 C9          11947                   RET
00431A             11948   ;
00431A             11949   ;GETDEF - Find entry for FN or PROC in dynamic area.
00431A             11950   ;   Inputs: IY addresses byte following "DEF" token.
00431A             11951   ;  Outputs: Z flag set if found
00431A             11952   ;           Carry set if neither FN or PROC first.
00431A             11953   ;           If Z: HL points to entry
00431A             11954   ;                 IY addresses delimiter
00431A             11955   ; Destroys: A,D,E,H,L,IY,F
00431A             11956   ;
00431A FD 7E 01    11957   GETDEF:         LD	A,(IY+1)
00431D CD 80 44    11958                   CALL	RANGE1
004320 D8          11959                   RET	C
004321 FD 7E 00    11960                   LD	A,(IY)
004324 21 D8 55    11961                   LD	HL,FNPTR
004327 FE A4       11962                   CP	TFN
004329 28 43       11963                   JR	Z,LOC2
00432B 21 DA 55    11964                   LD	HL,PROPTR
00432E FE F2       11965                   CP	TPROC
004330 28 3C       11966                   JR	Z,LOC2
004332 37          11967                   SCF
004333 C9          11968                   RET
004334             11969   ;
004334             11970   ;LOCATE - Try to locate variable name in static or
004334             11971   ;dynamic variables.  If illegal first character return
004334             11972   ;carry, non-zero.  If found, return no-carry, zero.
004334             11973   ;If not found, return no-carry, non-zero.
004334             11974   ;   Inputs: IY addresses first character of name.
004334             11975   ;           A=(IY)
004334             11976   ;  Outputs: Z-flag set if found, then:
004334             11977   ;            IY addresses terminator
004334             11978   ;            HL addresses location of variable
004334             11979   ;            D=type of variable:  4 = integer
004334             11980   ;                                 5 = floating point
004334             11981   ;                               129 = string
004334             11982   ; Destroys: A,D,E,H,L,IY,F
004334             11983   ;
004334 D6 40       11984   LOCATE:         SUB	'@'
004336 D8          11985                   RET	C
004337 26 00       11986                   LD	H,0
004339 FE 1B       11987                   CP	'Z'-'@'+1
00433B 30 1D       11988                   JR	NC,LOC0		;NOT STATIC
00433D 87          11989                   ADD	A,A
00433E 6F          11990                   LD	L,A
00433F FD 7E 01    11991                   LD	A,(IY+1)	;2nd CHARACTER
004342 FE 25       11992                   CP	'%'
004344 20 20       11993                   JR	NZ,LOC1		;NOT STATIC
004346 FD 7E 02    11994                   LD	A,(IY+2)
004349 FE 28       11995                   CP	'('
00434B 28 19       11996                   JR	Z,LOC1		;NOT STATIC
00434D 29          11997                   ADD	HL,HL
00434E 11 00 55    11998                   LD	DE,STAVAR	;STATIC VARIABLES
004351 19          11999                   ADD	HL,DE
004352 FD 23       12000                   INC	IY
004354 FD 23       12001                   INC	IY
004356 16 04       12002                   LD	D,4		;INTEGER TYPE
004358 AF          12003                   XOR	A
004359 C9          12004                   RET
00435A             12005   ;
00435A FE 1F       12006   LOC0:           CP	'_'-'@'
00435C D8          12007                   RET	C
00435D FE 3B       12008                   CP	'z'-'@'+1
00435F 3F          12009                   CCF
004360 3D          12010                   DEC	A		;SET NZ
004361 D8          12011                   RET	C
004362 D6 03       12012                   SUB	3
004364 87          12013                   ADD	A,A
004365 6F          12014                   LD	L,A
004366 11 6C 55    12015   LOC1:           LD	DE,DYNVAR	;DYNAMIC VARIABLES
004369 2D          12016                   DEC	L
00436A 2D          12017                   DEC	L
00436B 37          12018                   SCF
00436C F8          12019                   RET	M
00436D 19          12020                   ADD	HL,DE
00436E 5E          12021   LOC2:           LD	E,(HL)
00436F 23          12022                   INC	HL
004370 56          12023                   LD	D,(HL)
004371 7A          12024                   LD	A,D
004372 B3          12025                   OR	E
004373 28 49       12026                   JR	Z,LOC6		;UNDEFINED VARIABLE
004375 62          12027                   LD	H,D
004376 6B          12028                   LD	L,E
004377 23          12029                   INC	HL		;SKIP LINK
004378 23          12030                   INC	HL
004379 FD E5       12031                   PUSH	IY
00437B 7E          12032   LOC3:           LD	A,(HL)		;COMPARE
00437C 23          12033                   INC	HL
00437D FD 23       12034                   INC	IY
00437F FD BE 00    12035                   CP	(IY)
004382 28 F7       12036                   JR	Z,LOC3
004384 B7          12037                   OR	A		;0=TERMINATOR
004385 28 05       12038                   JR	Z,LOC5		;FOUND (MAYBE)
004387 FD E1       12039   LOC4:           POP	IY
004389 EB          12040                   EX	DE,HL
00438A 18 E2       12041                   JR	LOC2		;TRY NEXT ENTRY
00438C             12042   ;
00438C FD 2B       12043   LOC5:           DEC	IY
00438E FD 7E 00    12044                   LD	A,(IY)
004391 FE 28       12045                   CP	'('
004393 28 13       12046                   JR	Z,LOCX		;FOUND
004395 FD 23       12047                   INC	IY
004397 CD 73 44    12048                   CALL	RANGE
00439A 38 0C       12049                   JR	C,LOCX		;FOUND
00439C FE 28       12050                   CP	'('
00439E 28 E7       12051                   JR	Z,LOC4		;KEEP LOOKING
0043A0 FD 7E FF    12052                   LD	A,(IY-1)
0043A3 CD 80 44    12053                   CALL	RANGE1
0043A6 30 DF       12054                   JR	NC,LOC4		;KEEP LOOKING
0043A8 D1          12055   LOCX:           POP	DE
0043A9 FD 7E FF    12056   TYPE:           LD	A,(IY-1)
0043AC FE 24       12057                   CP	'$'
0043AE 16 81       12058                   LD	D,129
0043B0 C8          12059                   RET	Z		;STRING
0043B1 FE 26       12060                   CP	'&'
0043B3 16 01       12061                   LD	D,1
0043B5 C8          12062                   RET	Z		;BYTE
0043B6 FE 25       12063                   CP	'%'
0043B8 16 04       12064                   LD	D,4
0043BA C8          12065                   RET	Z		;INTEGER
0043BB 14          12066                   INC	D
0043BC BF          12067                   CP	A
0043BD C9          12068                   RET
0043BE             12069   ;
0043BE 3C          12070   LOC6:           INC	A		;SET NZ
0043BF C9          12071                   RET
0043C0             12072   ;
0043C0             12073   ;CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
0043C0             12074   ;   Inputs: HL, IY as returned from LOCATE (NZ).
0043C0             12075   ;  Outputs: As LOCATE, GETDEF.
0043C0             12076   ; Destroys: As LOCATE, GETDEF.
0043C0             12077   ;
0043C0 AF          12078   CREATE:         XOR	A
0043C1 ED 5B E0 55 12079                   LD	DE,(FREE)
0043C5 72          12080                   LD	(HL),D
0043C6 2B          12081                   DEC	HL
0043C7 73          12082                   LD	(HL),E
0043C8 EB          12083                   EX	DE,HL
0043C9 77          12084                   LD	(HL),A
0043CA 23          12085                   INC	HL
0043CB 77          12086                   LD	(HL),A
0043CC 23          12087                   INC	HL
0043CD FD 23       12088   LOC7:           INC	IY
0043CF CD 73 44    12089                   CALL	RANGE		;END OF VARIABLE?
0043D2 38 14       12090                   JR	C,LOC8
0043D4 77          12091                   LD	(HL),A
0043D5 23          12092                   INC	HL
0043D6 CD 80 44    12093                   CALL	RANGE1
0043D9 30 F2       12094                   JR	NC,LOC7
0043DB FE 28       12095                   CP	'('
0043DD 28 09       12096                   JR	Z,LOC8
0043DF FD 7E 01    12097                   LD	A,(IY+1)
0043E2 FE 28       12098                   CP	'('
0043E4 28 E7       12099                   JR	Z,LOC7
0043E6 FD 23       12100                   INC	IY
0043E8 36 00       12101   LOC8:           LD	(HL),0		;TERMINATOR
0043EA 23          12102                   INC	HL
0043EB E5          12103                   PUSH	HL
0043EC CD A9 43    12104                   CALL	TYPE
0043EF FD 7E 00    12105                   LD	A,(IY)
0043F2 FE 28       12106                   CP	'('
0043F4 3E 02       12107                   LD	A,2		;SIZE OF INDIRECT LINK
0043F6 28 07       12108                   JR	Z,LOC9
0043F8 7A          12109                   LD	A,D
0043F9 B7          12110                   OR	A		;STRING?
0043FA F2 FF 43    12111                   JP	P,LOC9
0043FD 3E 04       12112                   LD	A,4
0043FF 36 00       12113   LOC9:           LD	(HL),0		;INITIALISE TO ZERO
004401 23          12114                   INC	HL
004402 3D          12115                   DEC	A
004403 20 FA       12116                   JR	NZ,LOC9
004405 22 E0 55    12117                   LD	(FREE),HL
004408 CD 0A 33    12118                   CALL	CHECK
00440B E1          12119                   POP	HL
00440C AF          12120                   XOR	A
00440D C9          12121                   RET
00440E             12122   ;
00440E             12123   ;LINNUM - GET LINE NUMBER FROM TEXT STRING
00440E             12124   ;   Inputs: IY = Text Pointer
00440E             12125   ;  Outputs: HL = Line number (zero if none)
00440E             12126   ;           IY updated
00440E             12127   ; Destroys: A,D,E,H,L,IY,F
00440E             12128   ;
00440E CD 8F 45    12129   LINNUM:         CALL	NXT
004411 21 00 00    12130                   LD	HL,0
004414 FD 7E 00    12131   LINNM1:         LD	A,(IY)
004417 D6 30       12132                   SUB	'0'
004419 D8          12133                   RET	C
00441A FE 0A       12134                   CP	10
00441C D0          12135                   RET	NC
00441D FD 23       12136                   INC	IY
00441F 54          12137                   LD	D,H
004420 5D          12138                   LD	E,L
004421 29          12139                   ADD	HL,HL		;*2
004422 38 0F       12140                   JR	C,TOOBIGmn
004424 29          12141                   ADD	HL,HL		;*4
004425 38 0C       12142                   JR	C,TOOBIGmn
004427 19          12143                   ADD	HL,DE		;*5
004428 38 09       12144                   JR	C,TOOBIGmn
00442A 29          12145                   ADD	HL,HL		;*10
00442B 38 06       12146                   JR	C,TOOBIGmn
00442D 5F          12147                   LD	E,A
00442E 16 00       12148                   LD	D,0
004430 19          12149                   ADD	HL,DE		;ADD IN DIGIT
004431 30 E1       12150                   JR	NC,LINNM1
004433 3E 14       12151   TOOBIGmn:         LD	A,20
004435 C3 C8 3F    12152                   JP	ERROR_		;"Too big"
004438             12153   ;
004438             12154   ;PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
004438             12155   ;   Inputs: IY = text pointer
004438             12156   ;  Outputs: HL = first number (10 by default)
004438             12157   ;           BC = second number (10 by default)
004438             12158   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
004438             12159   ;
004438 CD 0E 44    12160   PAIR:           CALL	LINNUM		;FIRST
00443B 7C          12161                   LD	A,H
00443C B5          12162                   OR	L
00443D 20 02       12163                   JR	NZ,PAIR1
00443F 2E 0A       12164                   LD	L,10
004441 CD BA 35    12165   PAIR1:          CALL	TERMQ
004444 FD 23       12166                   INC	IY
004446 E5          12167                   PUSH	HL
004447 21 0A 00    12168                   LD	HL,10
00444A C4 0E 44    12169                   CALL	NZ,LINNUM	;SECOND
00444D E3          12170                   EX	(SP),HL
00444E C1          12171                   POP	BC
00444F 78          12172                   LD	A,B
004450 B1          12173                   OR	C
004451 C0          12174                   RET	NZ
004452 CD D9 3F    12175                   CALL	EXTERR
004455 53 69 6C 6C 12176                   DB	"Silly"
       79          
00445A 00          12177                   DB	0
00445B             12178   ;
00445B             12179   ;DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
00445B             12180   ;   Inputs: IY = text pointer
00445B             12181   ;  Outputs: HL = points to program text
00445B             12182   ;           BC = second number (0 by default)
00445B             12183   ; Destroys: A,B,C,D,E,H,L,IY,F
00445B             12184   ;
00445B CD 0E 44    12185   DLPAIR:         CALL	LINNUM
00445E E5          12186                   PUSH	HL
00445F CD BA 35    12187                   CALL	TERMQ
004462 28 09       12188                   JR	Z,DLP1
004464 FE E7       12189                   CP	TIF
004466 28 05       12190                   JR	Z,DLP1
004468 FD 23       12191                   INC	IY
00446A CD 0E 44    12192                   CALL	LINNUM
00446D E3          12193   DLP1:           EX	(SP),HL
00446E CD C7 41    12194                   CALL	FINDL
004471 C1          12195                   POP	BC
004472 C9          12196                   RET
004473             12197   ;
004473             12198   ;TEST FOR VALID CHARACTER IN VARIABLE NAME:
004473             12199   ;   Inputs: IY addresses character
004473             12200   ;  Outputs: Carry set if out-of-range.
004473             12201   ; Destroys: A,F
004473             12202   ;
004473 FD 7E 00    12203   RANGE:          LD	A,(IY)
004476 FE 24       12204                   CP	'$'
004478 D8          12205                   RET	C
004479 FE 27       12206                   CP	'&'+1
00447B 3F          12207                   CCF
00447C D0          12208                   RET	NC
00447D FE 28       12209                   CP	'('
00447F C8          12210                   RET	Z
004480 FE 30       12211   RANGE1:         CP	'0'
004482 D8          12212                   RET	C
004483 FE 3A       12213                   CP	'9'+1
004485 3F          12214                   CCF
004486 D0          12215                   RET	NC
004487 FE 40       12216                   CP	'@'		;V2.4
004489 C8          12217                   RET	Z
00448A FE 41       12218   RANGE2:         CP	'A'
00448C D8          12219                   RET	C
00448D FE 5B       12220                   CP	'Z'+1
00448F 3F          12221                   CCF
004490 D0          12222                   RET	NC
004491 FE 5F       12223                   CP	'_'
004493 D8          12224                   RET	C
004494 FE 7B       12225                   CP	'z'+1
004496 3F          12226                   CCF
004497 C9          12227                   RET
004498             12228   ;
004498             12229   ;LEXAN - LEXICAL ANALYSIS.
004498             12230   ;  Bit 0,C: 1=left, 0=right
004498             12231   ;  Bit 3,C: 1=in HEX
004498             12232   ;  Bit 4,C: 1=accept line number
004498             12233   ;  Bit 5,C: 1=in variable, FN, PROC
004498             12234   ;  Bit 6,C: 1=in REM, DATA, *
004498             12235   ;  Bit 7,C: 1=in quotes
004498             12236   ;   Inputs: IY addresses source string
004498             12237   ;           DE addresses destination string
004498             12238   ;           (must be page boundary)
004498             12239   ;           C  sets initial mode
004498             12240   ;  Outputs: DE, IY updated
004498             12241   ;           A holds carriage return
004498             12242   ;
004498 12          12243   LEXAN1:         LD	(DE),A		;TRANSFER TO BUFFER
004499 13          12244                   INC	DE		;INCREMENT POINTERS
00449A FD 23       12245                   INC	IY
00449C 7B          12246   LEXAN2:         LD	A,E		;MAIN ENTRY
00449D FE FC       12247                   CP	252		;TEST LENGTH
00449F 3E 13       12248                   LD	A,19
0044A1 D2 C8 3F    12249                   JP	NC,ERROR_	;'String too long'
0044A4 FD 7E 00    12250                   LD	A,(IY)
0044A7 FE 0D       12251                   CP	CR
0044A9 C8          12252                   RET	Z		;END OF LINE
0044AA CD 80 44    12253                   CALL	RANGE1
0044AD 30 04       12254                   JR	NC,LEXAN3
0044AF CB A9       12255                   RES	5,C		;NOT IN VARIABLE
0044B1 CB 99       12256                   RES	3,C		;NOT IN HEX
0044B3 FE 20       12257   LEXAN3:         CP	' '
0044B5 28 E1       12258                   JR	Z,LEXAN1	;PASS SPACES
0044B7 FE 2C       12259                   CP	','
0044B9 28 DD       12260                   JR	Z,LEXAN1	;PASS COMMAS
0044BB FE 47       12261                   CP	'G'
0044BD 38 02       12262                   JR	C,LEXAN4
0044BF CB 99       12263                   RES	3,C		;NOT IN HEX
0044C1 FE 22       12264   LEXAN4:         CP	'"'
0044C3 20 05       12265                   JR	NZ,LEXAN5
0044C5 CB 11       12266                   RL	C
0044C7 3F          12267                   CCF			;TOGGLE C7
0044C8 CB 19       12268                   RR	C
0044CA CB 61       12269   LEXAN5:         BIT	4,C
0044CC 28 10       12270                   JR	Z,LEXAN6
0044CE CB A1       12271                   RES	4,C
0044D0 C5          12272                   PUSH	BC
0044D1 D5          12273                   PUSH	DE
0044D2 CD 0E 44    12274                   CALL	LINNUM		;GET LINE NUMBER
0044D5 D1          12275                   POP	DE
0044D6 C1          12276                   POP	BC
0044D7 7C          12277                   LD	A,H
0044D8 B5          12278                   OR	L
0044D9 C4 43 45    12279                   CALL	NZ,ENCODE	;ENCODE LINE NUMBER
0044DC 18 BE       12280                   JR	LEXAN2		;CONTINUE
0044DE             12281   ;
0044DE 0D          12282   LEXAN6:         DEC	C
0044DF 28 09       12283                   JR	Z,LEXAN7	;C=1 (LEFT)
0044E1 0C          12284                   INC	C
0044E2 20 B4       12285                   JR	NZ,LEXAN1
0044E4 B7          12286                   OR	A
0044E5 F4 27 40    12287                   CALL	P,LEX		;TOKENISE IF POSS.
0044E8 18 12       12288                   JR	LEXAN8
0044EA             12289   ;
0044EA FE 2A       12290   LEXAN7:         CP	'*'
0044EC 28 16       12291                   JR	Z,LEXAN9
0044EE B7          12292                   OR	A
0044EF F4 27 40    12293                   CALL	P,LEX		;TOKENISE IF POSS.
0044F2 FE 8F       12294                   CP	TOKLO
0044F4 38 06       12295                   JR	C,LEXAN8
0044F6 FE 94       12296                   CP	TOKHI+1
0044F8 30 02       12297                   JR	NC,LEXAN8
0044FA C6 40       12298                   ADD	A,OFFSET	;LEFT VERSION
0044FC FE F4       12299   LEXAN8:         CP	TREM
0044FE 28 04       12300                   JR	Z,LEXAN9
004500 FE DC       12301                   CP	TDATA
004502 20 02       12302                   JR	NZ,LEXANA
004504 CB F1       12303   LEXAN9:         SET	6,C		;QUIT TOKENISING
004506 FE A4       12304   LEXANA:         CP	TFN
004508 28 09       12305                   JR	Z,LEXANB
00450A FE F2       12306                   CP	TPROC
00450C 28 05       12307                   JR	Z,LEXANB
00450E CD 8A 44    12308                   CALL	RANGE2
004511 38 02       12309                   JR	C,LEXANC
004513 CB E9       12310   LEXANB:         SET	5,C		;IN VARIABLE/FN/PROC
004515 FE 26       12311   LEXANC:         CP	'&'
004517 20 02       12312                   JR	NZ,LEXAND
004519 CB D9       12313                   SET	3,C		;IN HEX
00451B 21 3A 45    12314   LEXAND:         LD	HL,LIST1
00451E C5          12315                   PUSH	BC
00451F 01 06 00    12316                   LD	BC,LIST1L
004522 ED B1       12317                   CPIR
004524 C1          12318                   POP	BC
004525 20 02       12319                   JR	NZ,LEXANE
004527 CB E1       12320                   SET	4,C		;ACCEPT LINE NUMBER
004529 21 3E 45    12321   LEXANE:         LD	HL,LIST2
00452C C5          12322                   PUSH	BC
00452D 01 05 00    12323                   LD	BC,LIST2L
004530 ED B1       12324                   CPIR
004532 C1          12325                   POP	BC
004533 20 02       12326                   JR	NZ,LEXANF
004535 CB C1       12327                   SET	0,C		;ENTER LEFT MODE
004537 C3 98 44    12328   LEXANF:         JP	LEXAN1
00453A             12329   ;
00453A E5          12330   LIST1:          DB	TGOTO
00453B E4          12331                   DB	TGOSUB
00453C F7          12332                   DB	TRESTORE
00453D FC          12333                   DB	TTRACE
00453E 8C          12334   LIST2:          DB	TTHEN
00453F 8B          12335                   DB	TELSE
004540             12336   LIST1L:         EQU	$-LIST1
004540 F5          12337                   DB	TREPEAT
004541 85          12338                   DB	TERROR
004542 3A          12339                   DB	':'
004543             12340   LIST2L:         EQU	$-LIST2
004543             12341   ;
004543             12342   ;ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
004543             12343   ;   Inputs: HL=line number, DE=string pointer
004543             12344   ;  Outputs: DE updated, BIT 4,C set.
004543             12345   ; Destroys: A,B,C,D,E,H,L,F
004543             12346   ;
004543 CB E1       12347   ENCODE:         SET	4,C
004545 EB          12348                   EX	DE,HL
004546 36 8D       12349                   LD	(HL),TLINO
004548 23          12350                   INC	HL
004549 7A          12351                   LD	A,D
00454A E6 C0       12352                   AND	0C0H
00454C 0F          12353                   RRCA
00454D 0F          12354                   RRCA
00454E 47          12355                   LD	B,A
00454F 7B          12356                   LD	A,E
004550 E6 C0       12357                   AND	0C0H
004552 B0          12358                   OR	B
004553 0F          12359                   RRCA
004554 0F          12360                   RRCA
004555 EE 54       12361                   XOR	01010100B
004557 77          12362                   LD	(HL),A
004558 23          12363                   INC	HL
004559 7B          12364                   LD	A,E
00455A E6 3F       12365                   AND	3FH
00455C F6 40       12366                   OR	'@'
00455E 77          12367                   LD	(HL),A
00455F 23          12368                   INC	HL
004560 7A          12369                   LD	A,D
004561 E6 3F       12370                   AND	3FH
004563 F6 40       12371                   OR	'@'
004565 77          12372                   LD	(HL),A
004566 23          12373                   INC	HL
004567 EB          12374                   EX	DE,HL
004568 C9          12375                   RET
004569             12376   ;
004569             12377   ;TEXT - OUTPUT MESSAGE.
004569             12378   ;   Inputs: HL addresses text (terminated by nul)
004569             12379   ;  Outputs: HL addresses character following nul.
004569             12380   ; Destroys: A,H,L,F
004569             12381   ;
004569 2A EE 55    12382   REPORT:         LD	HL,(ERRTXT)
00456C 7E          12383   TEXT_:          LD	A,(HL)
00456D 23          12384                   INC	HL
00456E B7          12385                   OR	A
00456F C8          12386                   RET	Z
004570 FE 0A       12387                   CP	LF
004572 28 05       12388                   JR	Z,TEXTLF	;Token for TINT
004574 CD 9F 41    12389                   CALL	OUT
004577 18 F3       12390                   JR	TEXT_
004579             12391   ;
004579 CD 86 41    12392   TEXTLF:         CALL	OUTCHR
00457C 18 EE       12393                   JR	TEXT_
00457E             12394   ;
00457E             12395   ;TELL - OUTPUT MESSAGE.
00457E             12396   ;   Inputs: Text follows subroutine call (term=nul)
00457E             12397   ; Destroys: A,F
00457E             12398   ;
00457E E3          12399   TELL:           EX	(SP),HL		;GET RETURN ADDRESS
00457F CD 6C 45    12400                   CALL	TEXT_
004582 E3          12401                   EX	(SP),HL
004583 C9          12402                   RET
004584             12403   ;
004584             12404   ; NLIST - Check for end of list
004584             12405   ;
004584 CD 8F 45    12406   NLIST:          CALL	NXT
004587 FE 2C       12407                   CP	','		;ANOTHER VARIABLE?
004589 28 0A       12408                   JR	Z,NXT1
00458B C1          12409                   POP	BC		;DITCH RETURN ADDRESS
00458C C3 1D 25    12410                   JP	XEQ
00458F             12411   ;
00458F FD 7E 00    12412   NXT:            LD	A,(IY)
004592 FE 20       12413                   CP	' '
004594 C0          12414                   RET	NZ
004595 FD 23       12415   NXT1:           INC	IY
004597 18 F6       12416                   JR	NXT
004599             12417   ;
004599             12418   ;                END	START
004599             12419   ; --- End main.asm ---
004599             12420   
004599             12421   ; --- Begin math.asm ---
004599             12422   ;
004599             12423   ;Automatically created from original source on 2024-12-15 15:29:12
004599             12424   ;
004599             12425                   .ASSUME ADL = 0
004599             12426   ;	.ORG 0x0000
004599             12427   ;                SEGMENT CODE
004599             12428   ;
004599             12429   ;Z80 FLOATING POINT PACKAGE
004599             12430   ;(C) COPYRIGHT  R.T.RUSSELL  1986-2024
004599             12431   ;VERSION 0.0, 26-10-1986
004599             12432   ;VERSION 0.1, 14-12-1988 (BUG FIX)
004599             12433   ;VERSION 5.0, 16-06-2024 (SHIFTS ADDED)
004599             12434   ;
004599             12435   ;BINARY FLOATING POINT REPRESENTATION:
004599             12436   ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
004599             12437   ;    8 BIT EXCESS-128 SIGNED EXPONENT
004599             12438   ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
004599             12439   ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
004599             12440   ;
004599             12441   ;BINARY INTEGER REPRESENTATION:
004599             12442   ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
004599             12443   ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
004599             12444   ;
004599             12445   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
004599             12446   ;                            EXPONENT - C
004599             12447   ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
004599             12448   ;                               EXPONENT - B
004599             12449   ;
004599             12450   ;Error codes:
004599             12451   ;
004599             12452   BADOP:          EQU	1		;Bad operation code
004599             12453   DIVBY0:         EQU	18		;Division by zero
004599             12454   TOOBIG:         EQU	20		;Too big
004599             12455   NGROOT:         EQU	21		;Negative root
004599             12456   LOGRNG:         EQU	22		;Log range
004599             12457   ACLOST:         EQU	23		;Accuracy lost
004599             12458   EXPRNG:         EQU	24		;Exp range
004599             12459   ;
004599             12460   ;                XDEF	FPP
004599             12461   ;                XREF	STORE5
004599             12462   ;                XREF	DLOAD5
004599             12463   ;
004599             12464   ;Call entry and despatch code:
004599             12465   ;
004599 FD E5       12466   FPP:            PUSH	IY		;Save IY
00459B FD 21 00 00 12467                   LD	IY,0
00459F FD 39       12468                   ADD	IY,SP		;Save SP in IY
0045A1 CD B0 45    12469                   CALL	OP		;Perform operation
0045A4 BF          12470                   CP	A		;Good return (Z, NC)
0045A5 FD E1       12471   EXITmat:           POP	IY		;Restore IY
0045A7 C9          12472                   RET			;Return to caller
0045A8             12473   ;
0045A8             12474   ;Error exit:
0045A8             12475   ;
0045A8 3E 01       12476   BADmat:            LD	A,BADOP		;"Bad operation code"
0045AA FD F9       12477   ERROR_mat:         LD	SP,IY		;Restore SP from IY
0045AC B7          12478                   OR	A		;Set NZ
0045AD 37          12479                   SCF			;Set C
0045AE 18 F5       12480                   JR	EXITmat
0045B0             12481   ;
0045B0             12482   ;Perform operation or function:
0045B0             12483   ;
0045B0             12484   ; OP:             CP	(RTABLE-DTABLE)/2
0045B0 FE 2E       12485   OP:             CP	RTABLE-DTABLE/2
0045B2 30 F4       12486                   JR	NC,BADmat
0045B4             12487                   ; CP	(FTABLE-DTABLE)/2
0045B4 FE 10       12488                   CP	FTABLE-DTABLE/2
0045B6 30 07       12489                   JR	NC,DISPAT
0045B8 08          12490                   EX	AF,AF'
0045B9 78          12491                   LD	A,B
0045BA B1          12492                   OR	C		;Both integer?
0045BB C4 29 4F    12493                   CALL	NZ,FLOATA	;No, so float both
0045BE 08          12494                   EX	AF,AF'
0045BF E5          12495   DISPAT:         PUSH	HL
0045C0 21 D0 45    12496                   LD	HL,DTABLE
0045C3 C5          12497                   PUSH	BC
0045C4 87          12498                   ADD	A,A		;A = op-code * 2
0045C5 4F          12499                   LD	C,A
0045C6 06 00       12500                   LD	B,0		;BC = op-code * 2
0045C8 09          12501                   ADD	HL,BC
0045C9 7E          12502                   LD	A,(HL)		;Get low byte
0045CA 23          12503                   INC	HL
0045CB 66          12504                   LD	H,(HL)		;Get high byte
0045CC 6F          12505                   LD	L,A
0045CD C1          12506                   POP	BC
0045CE E3          12507                   EX	(SP),HL
0045CF C9          12508                   RET			;Off to routine
0045D0             12509   ;
0045D0             12510   ;Despatch table:
0045D0             12511   ;
0045D0 4F 46       12512   DTABLE:         DW	IAND		;0  & (INTEGER)
0045D2 9C 46       12513                   DW	IBDIV		;1  DIV
0045D4 61 46       12514                   DW	IEOR		;2  EOR
0045D6 85 46       12515                   DW	IMOD		;3  MOD
0045D8 73 46       12516                   DW	IOR		;4  |
0045DA 9A 48       12517                   DW	ILE		;5  <=
0045DC A7 48       12518                   DW	INE		;6  <>
0045DE 8F 48       12519                   DW	IGE		;7  >=
0045E0 78 48       12520                   DW	ILT		;8  <
0045E2 B2 48       12521                   DW	IEQ		;9  =
0045E4 66 47       12522                   DW	IMUL		;10 *
0045E6 BF 46       12523                   DW	IADD		;11 +
0045E8 83 48       12524                   DW	IGT		;12 >
0045EA A9 46       12525                   DW	ISUB		;13 -
0045EC E1 47       12526                   DW	IPOW		;14 ^
0045EE 1E 47       12527                   DW	IDIV		;15 /
0045F0             12528   ;
0045F0 02 49       12529   FTABLE:         DW	ABS		;16 ABS
0045F2 5E 4C       12530                   DW	ACS		;17 ACS
0045F4 BA 4B       12531                   DW	ASN		;18 ASN
0045F6 DF 4B       12532                   DW	ATN		;19 ATN
0045F8 F8 49       12533                   DW	COS		;20 COS
0045FA 2C 49       12534                   DW	DEG		;21 DEG
0045FC 9D 4A       12535                   DW	EXP		;22 EXP
0045FE 72 49       12536                   DW	INT_		;23 INT_
004600 28 4B       12537                   DW	LN		;24 LN
004602 A8 4B       12538                   DW	LOG		;25 LOG
004604 0D 49       12539                   DW	CPL_		;26 NOT
004606 34 49       12540                   DW	RAD		;27 RAD
004608 4A 49       12541                   DW	SGN		;28 SGN
00460A 03 4A       12542                   DW	SIN		;29 SIN
00460C 88 49       12543                   DW	SQR		;30 SQR
00460E DB 49       12544                   DW	TAN		;31 TAN
004610             12545   ;
004610 A5 4F       12546                   DW	ZEROmat		;32 ZERO
004612 7C 4A       12547                   DW	FONE		;33 FONE
004614 B6 48       12548                   DW	TRUE		;34 TRUE
004616 20 49       12549                   DW	PI		;35 PI
004618             12550   ;
004618 5A 49       12551                   DW	VAL		;36 VAL
00461A 66 4C       12552                   DW	STRmat		;37 STR$
00461C             12553   ;
00461C 7B 4E       12554                   DW	SFIXmat		;38 FIX
00461E 36 4F       12555                   DW	SFLOAT		;39 FLOAT
004620             12556   ;
004620 7B 4F       12557                   DW	FTEST		;40 TEST
004622 8C 4F       12558                   DW	FCOMP		;41 COMPARE
004624             12559   ;
004624 C1 48       12560                   DW	ISHL		;42 <<
004626 C1 48       12561                   DW	ISHX		;43 <<<
004628 CE 48       12562                   DW	ISAR		;44 >>
00462A E0 48       12563                   DW	ISHR		;45 >>>
00462C             12564   ;
00462C 4C 46       12565   RTABLE:         DW	FAND		;& (FLOATING-POINT)
00462E 99 46       12566                   DW	FBDIV		;DIV
004630 5E 46       12567                   DW	FEOR		;EOR
004632 82 46       12568                   DW	FMOD		;MOD
004634 70 46       12569                   DW	FOR		;|
004636 95 48       12570                   DW	FLE		;<=
004638 A2 48       12571                   DW	FNE		;<>
00463A 8A 48       12572                   DW	FGE		;>=
00463C 73 48       12573                   DW	FLT		;<
00463E AD 48       12574                   DW	FEQ		;=
004640 91 47       12575                   DW	FMUL		;*
004642 C9 46       12576                   DW	FADD		;+
004644 7E 48       12577                   DW	FGT		;>
004646 B3 46       12578                   DW	FSUB		;-
004648 49 48       12579                   DW	FPOW		;^
00464A 21 47       12580                   DW	FDIV		;/
00464C             12581   ;
00464C             12582   ;ARITHMETIC AND LOGICAL OPERATORS:
00464C             12583   ;All take two arguments, in HLH'L'C & DED'E'B.
00464C             12584   ;Output in HLH'L'C
00464C             12585   ;All registers except IX, IY destroyed.
00464C             12586   ; (N.B. FPOW destroys IX).
00464C             12587   ;
00464C             12588   ;FAND - Floating-point AND.
00464C             12589   ;IAND - Integer AND.
00464C             12590   ;
00464C CD 72 4E    12591   FAND:           CALL	FIX2
00464F 7C          12592   IAND:           LD	A,H
004650 A2          12593                   AND	D
004651 67          12594                   LD	H,A
004652 7D          12595                   LD	A,L
004653 A3          12596                   AND	E
004654 6F          12597                   LD	L,A
004655 D9          12598                   EXX
004656 7C          12599                   LD	A,H
004657 A2          12600                   AND	D
004658 67          12601                   LD	H,A
004659 7D          12602                   LD	A,L
00465A A3          12603                   AND	E
00465B 6F          12604                   LD	L,A
00465C D9          12605                   EXX
00465D C9          12606                   RET
00465E             12607   ;
00465E             12608   ;FEOR - Floating-point exclusive-OR.
00465E             12609   ;IEOR - Integer exclusive-OR.
00465E             12610   ;
00465E CD 72 4E    12611   FEOR:           CALL	FIX2
004661 7C          12612   IEOR:           LD	A,H
004662 AA          12613                   XOR	D
004663 67          12614                   LD	H,A
004664 7D          12615                   LD	A,L
004665 AB          12616                   XOR	E
004666 6F          12617                   LD	L,A
004667 D9          12618                   EXX
004668 7C          12619                   LD	A,H
004669 AA          12620                   XOR	D
00466A 67          12621                   LD	H,A
00466B 7D          12622                   LD	A,L
00466C AB          12623                   XOR	E
00466D 6F          12624                   LD	L,A
00466E D9          12625                   EXX
00466F C9          12626                   RET
004670             12627   ;
004670             12628   ;FOR - Floating-point OR.
004670             12629   ;IOR - Integer OR.
004670             12630   ;
004670 CD 72 4E    12631   FOR:            CALL	FIX2
004673 7C          12632   IOR:            LD	A,H
004674 B2          12633                   OR	D
004675 67          12634                   LD	H,A
004676 7D          12635                   LD	A,L
004677 B3          12636                   OR	E
004678 6F          12637                   LD	L,A
004679 D9          12638                   EXX
00467A 7C          12639                   LD	A,H
00467B B2          12640                   OR	D
00467C 67          12641                   LD	H,A
00467D 7D          12642                   LD	A,L
00467E B3          12643                   OR	E
00467F 6F          12644                   LD	L,A
004680 D9          12645                   EXX
004681 C9          12646                   RET
004682             12647   ;
004682             12648   ;FMOD - Floating-point remainder.
004682             12649   ;IMOD - Integer remainder.
004682             12650   ;
004682 CD 72 4E    12651   FMOD:           CALL	FIX2
004685 7C          12652   IMOD:           LD	A,H
004686 AA          12653                   XOR	D		;DIV RESULT SIGN
004687 CB 7C       12654                   BIT	7,H
004689 CD 79 51    12655                   CALL	ABS2		;MAKE BOTH POSITIVE
00468C 3E DF       12656                   LD	A,-33
00468E CD B5 50    12657                   CALL	DIVA		;DIVIDE
004691 D9          12658                   EXX
004692 0E 00       12659                   LD	C,0		;INTEGER MARKER
004694 08          12660                   EX	AF,AF'
004695 C8          12661                   RET	Z
004696 C3 8A 4E    12662                   JP	NEGATE
004699             12663   ;
004699             12664   ;BDIV - Integer division.
004699             12665   ;
004699 CD 72 4E    12666   FBDIV:          CALL	FIX2
00469C CD 85 46    12667   IBDIV:          CALL	IMOD
00469F B7          12668                   OR	A
0046A0 CD 60 4F    12669                   CALL	SWAP
0046A3 0E 00       12670                   LD	C,0
0046A5 F0          12671                   RET	P
0046A6 C3 8A 4E    12672                   JP	NEGATE
0046A9             12673   ;
0046A9             12674   ;ISUB - Integer subtraction.
0046A9             12675   ;FSUB - Floating point subtraction with rounding.
0046A9             12676   ;
0046A9 CD E8 4F    12677   ISUB:           CALL	SUB
0046AC E0          12678                   RET	PO
0046AD CD E2 4F    12679                   CALL	ADD
0046B0 CD 2D 4F    12680                   CALL	FLOAT2
0046B3 7A          12681   FSUB:           LD	A,D
0046B4 EE 80       12682                   XOR	80H		;CHANGE SIGN THEN ADD
0046B6 57          12683                   LD	D,A
0046B7 18 10       12684                   JR	FADD
0046B9             12685   ;
0046B9             12686   ;Reverse subtract.
0046B9             12687   ;
0046B9 7C          12688   RSUB:           LD	A,H
0046BA EE 80       12689                   XOR	80H
0046BC 67          12690                   LD	H,A
0046BD 18 0A       12691                   JR	FADD
0046BF             12692   ;
0046BF             12693   ;IADD - Integer addition.
0046BF             12694   ;FADD - Floating point addition with rounding.
0046BF             12695   ;
0046BF CD E2 4F    12696   IADD:           CALL	ADD
0046C2 E0          12697                   RET	PO
0046C3 CD E8 4F    12698                   CALL	SUB
0046C6 CD 2D 4F    12699                   CALL	FLOAT2
0046C9 05          12700   FADD:           DEC	B
0046CA 04          12701                   INC	B
0046CB C8          12702                   RET	Z		;ARG 2 ZERO
0046CC 0D          12703                   DEC	C
0046CD 0C          12704                   INC	C
0046CE CA 60 4F    12705                   JP	Z,SWAP		;ARG 1 ZERO
0046D1 D9          12706                   EXX
0046D2 01 00 00    12707                   LD	BC,0		;INITIALISE
0046D5 D9          12708                   EXX
0046D6 7C          12709                   LD	A,H
0046D7 AA          12710                   XOR	D		;XOR SIGNS
0046D8 F5          12711                   PUSH	AF
0046D9 78          12712                   LD	A,B
0046DA B9          12713                   CP	C		;COMPARE EXPONENTS
0046DB DC 60 4F    12714                   CALL	C,SWAP		;MAKE DED'E'B LARGEST
0046DE 78          12715                   LD	A,B
0046DF CB FC       12716                   SET	7,H		;IMPLIED 1
0046E1 C4 62 4E    12717                   CALL	NZ,FIX		;ALIGN
0046E4 F1          12718                   POP	AF
0046E5 7A          12719                   LD	A,D		;SIGN OF LARGER
0046E6 CB FA       12720                   SET	7,D		;IMPLIED 1
0046E8 FA F5 46    12721                   JP	M,FADD3		;SIGNS DIFFERENT
0046EB CD E2 4F    12722                   CALL	ADD		;HLH'L'=HLH'L'+DED'E'
0046EE DC 68 4F    12723                   CALL	C,DIV2		;NORMALISE
0046F1 CB FC       12724                   SET	7,H
0046F3 18 0A       12725                   JR	FADD4
0046F5             12726   ;
0046F5 CD E8 4F    12727   FADD3:          CALL	SUB		;HLH'L'=HLH'L'-DED'E'
0046F8 DC 9E 4E    12728                   CALL	C,NEG		;NEGATE HLH'L'B'C'
0046FB CD 0A 4F    12729                   CALL	FLO48
0046FE 2F          12730                   CPL			;CHANGE RESULT SIGN
0046FF D9          12731   FADD4:          EXX
004700 EB          12732                   EX	DE,HL
004701 21 00 80    12733                   LD	HL,8000H
004704 B7          12734                   OR	A		;CLEAR CARRY
004705 ED 42       12735                   SBC	HL,BC
004707 EB          12736                   EX	DE,HL
004708 D9          12737                   EXX
004709 CC 5A 4F    12738                   CALL	Z,ODD		;ROUND UNBIASSED
00470C DC 4C 4F    12739                   CALL	C,ADD1		;ROUND UP
00470F DC 74 4F    12740                   CALL	C,INCC
004712 CB BC       12741                   RES	7,H
004714 0D          12742                   DEC	C
004715 0C          12743                   INC	C
004716 CA A5 4F    12744                   JP	Z,ZEROmat
004719 B7          12745                   OR	A		;RESULT SIGNQ
00471A F0          12746                   RET	P		;POSITIVE
00471B CB FC       12747                   SET	7,H		;NEGATIVE
00471D C9          12748                   RET
00471E             12749   ;
00471E             12750   ;IDIV - Integer division.
00471E             12751   ;FDIV - Floating point division with rounding.
00471E             12752   ;
00471E CD 2D 4F    12753   IDIV:           CALL	FLOAT2
004721 05          12754   FDIV:           DEC	B		;TEST FOR ZERO
004722 04          12755                   INC	B
004723 3E 12       12756                   LD	A,DIVBY0
004725 CA AA 45    12757                   JP	Z,ERROR_mat		;"Division by zero"
004728 0D          12758                   DEC	C		;TEST FOR ZERO
004729 0C          12759                   INC	C
00472A C8          12760                   RET	Z
00472B 7C          12761                   LD	A,H
00472C AA          12762                   XOR	D		;CALC. RESULT SIGN
00472D 08          12763                   EX	AF,AF'		;SAVE SIGN
00472E CB FA       12764                   SET	7,D		;REPLACE IMPLIED 1's
004730 CB FC       12765                   SET	7,H
004732 C5          12766                   PUSH	BC		;SAVE EXPONENTS
004733 42          12767                   LD	B,D		;LOAD REGISTERS
004734 4B          12768                   LD	C,E
004735 11 00 00    12769                   LD	DE,0
004738 D9          12770                   EXX
004739 42          12771                   LD	B,D
00473A 4B          12772                   LD	C,E
00473B 11 00 00    12773                   LD	DE,0
00473E 3E E0       12774                   LD	A,-32		;LOOP COUNTER
004740 CD B5 50    12775                   CALL	DIVA		;DIVIDE
004743 D9          12776                   EXX
004744 CB 7A       12777                   BIT	7,D
004746 D9          12778                   EXX
004747 CC D0 50    12779                   CALL	Z,DIVB		;NORMALISE & INC A
00474A EB          12780                   EX	DE,HL
00474B D9          12781                   EXX
00474C CB 38       12782                   SRL	B		;DIVISOR/2
00474E CB 19       12783                   RR	C
004750 B7          12784                   OR	A		;CLEAR CARRY
004751 ED 42       12785                   SBC	HL,BC		;REMAINDER-DIVISOR/2
004753 3F          12786                   CCF
004754 EB          12787                   EX	DE,HL		;RESULT IN HLH'L'
004755 CC 5A 4F    12788                   CALL	Z,ODD		;ROUND UNBIASSED
004758 DC 4C 4F    12789                   CALL	C,ADD1		;ROUND UP
00475B C1          12790                   POP	BC		;RESTORE EXPONENTS
00475C DC 74 4F    12791                   CALL	C,INCC
00475F 1F          12792                   RRA			;LSB OF A TO CARRY
004760 79          12793                   LD	A,C		;COMPUTE NEW EXPONENT
004761 98          12794                   SBC	A,B
004762 3F          12795                   CCF
004763 C3 CA 47    12796                   JP	CHKOVF
004766             12797   ;
004766             12798   ;IMUL - Integer multiplication.
004766             12799   ;
004766 7C          12800   IMUL:           LD	A,H
004767 AA          12801                   XOR	D
004768 CD 79 51    12802                   CALL	ABS2		;MAKE BOTH POSITIVE
00476B 3E DF       12803                   LD	A,-33
00476D CD E3 50    12804                   CALL	MULA		;MULTIPLY
004770 D9          12805                   EXX
004771 0E BF       12806                   LD	C,191		;PRESET EXPONENT
004773 CD 85 4F    12807                   CALL	TESTmat		;TEST RANGE
004776 20 0D       12808                   JR	NZ,IMUL1	;TOO BIG
004778 CB 7A       12809                   BIT	7,D
00477A 20 09       12810                   JR	NZ,IMUL1
00477C CD 60 4F    12811                   CALL	SWAP
00477F 4A          12812                   LD	C,D		;INTEGER MARKER
004780 08          12813                   EX	AF,AF'
004781 F0          12814                   RET	P
004782 C3 8A 4E    12815                   JP	NEGATE
004785             12816   ;
004785 0D          12817   IMUL1:          DEC	C
004786 CD 4C 51    12818                   CALL	SLA8
004789 F2 85 47    12819                   JP	P,IMUL1		;NORMALISE
00478C 08          12820                   EX	AF,AF'
00478D F8          12821                   RET	M
00478E CB BC       12822                   RES	7,H		;POSITIVE
004790 C9          12823                   RET
004791             12824   ;
004791             12825   ;FMUL - Floating point multiplication with rounding.
004791             12826   ;
004791 05          12827   FMUL:           DEC	B		;TEST FOR ZERO
004792 04          12828                   INC	B
004793 CA A5 4F    12829                   JP	Z,ZEROmat
004796 0D          12830                   DEC	C		;TEST FOR ZERO
004797 0C          12831                   INC	C
004798 C8          12832                   RET	Z
004799 7C          12833                   LD	A,H
00479A AA          12834                   XOR	D		;CALC. RESULT SIGN
00479B 08          12835                   EX	AF,AF'
00479C CB FA       12836                   SET	7,D		;REPLACE IMPLIED 1's
00479E CB FC       12837                   SET	7,H
0047A0 C5          12838                   PUSH	BC		;SAVE EXPONENTS
0047A1 44          12839                   LD	B,H		;LOAD REGISTERS
0047A2 4D          12840                   LD	C,L
0047A3 21 00 00    12841                   LD	HL,0
0047A6 D9          12842                   EXX
0047A7 44          12843                   LD	B,H
0047A8 4D          12844                   LD	C,L
0047A9 21 00 00    12845                   LD	HL,0
0047AC 3E E0       12846                   LD	A,-32		;LOOP COUNTER
0047AE CD E3 50    12847                   CALL	MULA		;MULTIPLY
0047B1 DC F7 50    12848                   CALL	C,MULB		;NORMALISE & INC A
0047B4 D9          12849                   EXX
0047B5 E5          12850                   PUSH	HL
0047B6 21 00 80    12851                   LD	HL,8000H
0047B9 B7          12852                   OR	A		;CLEAR CARRY
0047BA ED 52       12853                   SBC	HL,DE
0047BC E1          12854                   POP	HL
0047BD CC 5A 4F    12855                   CALL	Z,ODD		;ROUND UNBIASSED
0047C0 DC 4C 4F    12856                   CALL	C,ADD1		;ROUND UP
0047C3 C1          12857                   POP	BC		;RESTORE EXPONENTS
0047C4 DC 74 4F    12858                   CALL	C,INCC
0047C7 1F          12859                   RRA			;LSB OF A TO CARRY
0047C8 79          12860                   LD	A,C		;COMPUTE NEW EXPONENT
0047C9 88          12861                   ADC	A,B
0047CA 38 05       12862   CHKOVF:         JR	C,CHKO1
0047CC F2 A5 4F    12863                   JP	P,ZEROmat		;UNDERFLOW
0047CF 18 03       12864                   JR	CHKO2
0047D1 FA 76 4F    12865   CHKO1:          JP	M,OFLOW		;OVERFLOW
0047D4 C6 80       12866   CHKO2:          ADD	A,80H
0047D6 4F          12867                   LD	C,A
0047D7 CA A5 4F    12868                   JP	Z,ZEROmat
0047DA 08          12869                   EX	AF,AF'		;RESTORE SIGN BIT
0047DB CB BC       12870                   RES	7,H
0047DD F0          12871                   RET	P
0047DE CB FC       12872                   SET	7,H
0047E0 C9          12873                   RET
0047E1             12874   ;
0047E1             12875   ;IPOW - Integer involution.
0047E1             12876   ;
0047E1 CD 60 4F    12877   IPOW:           CALL	SWAP
0047E4 CB 7C       12878                   BIT	7,H
0047E6 F5          12879                   PUSH	AF		;SAVE SIGN
0047E7 C4 8A 4E    12880                   CALL	NZ,NEGATE
0047EA 48          12881   IPOW0:          LD	C,B
0047EB 06 20       12882                   LD	B,32		;LOOP COUNTER
0047ED CD FF 4F    12883   IPOW1:          CALL	X2
0047F0 38 08       12884                   JR	C,IPOW2
0047F2 10 F9       12885                   DJNZ	IPOW1
0047F4 F1          12886                   POP	AF
0047F5 D9          12887                   EXX
0047F6 2C          12888                   INC	L		;RESULT=1
0047F7 D9          12889                   EXX
0047F8 4C          12890                   LD	C,H
0047F9 C9          12891                   RET
0047FA             12892   ;
0047FA F1          12893   IPOW2:          POP	AF
0047FB C5          12894                   PUSH	BC
0047FC EB          12895                   EX	DE,HL
0047FD E5          12896                   PUSH	HL
0047FE D9          12897                   EXX
0047FF EB          12898                   EX	DE,HL
004800 E5          12899                   PUSH	HL
004801 D9          12900                   EXX
004802 DD 21 00 00 12901                   LD	IX,0
004806 DD 39       12902                   ADD	IX,SP
004808 28 34       12903                   JR	Z,IPOW4
00480A C5          12904                   PUSH	BC
00480B D9          12905                   EXX
00480C D5          12906                   PUSH	DE
00480D D9          12907                   EXX
00480E D5          12908                   PUSH	DE
00480F CD 36 4F    12909                   CALL	SFLOAT
004812 CD 14 4B    12910                   CALL	RECIP
004815 CD 8A 32    12911                   CALL	STORE5
004818 18 1D       12912                   JR	IPOW5
00481A             12913   ;
00481A C5          12914   IPOW3:          PUSH	BC
00481B D9          12915                   EXX
00481C CB 23       12916                   SLA	E
00481E CB 12       12917                   RL	D
004820 D5          12918                   PUSH	DE
004821 D9          12919                   EXX
004822 CB 13       12920                   RL	E
004824 CB 12       12921                   RL	D
004826 D5          12922                   PUSH	DE
004827 3E 0A       12923                   LD	A,'*' & 0FH
004829 F5          12924                   PUSH	AF
00482A CD 11 50    12925                   CALL	COPY
00482D CD B0 45    12926                   CALL	OP		;SQUARE
004830 F1          12927                   POP	AF
004831 CD 75 1A    12928                   CALL	DLOAD5
004834 DC B0 45    12929                   CALL	C,OP		;MULTIPLY BY X
004837 D1          12930   IPOW5:          POP	DE
004838 D9          12931                   EXX
004839 D1          12932                   POP	DE
00483A D9          12933                   EXX
00483B 79          12934                   LD	A,C
00483C C1          12935                   POP	BC
00483D 4F          12936                   LD	C,A
00483E 10 DA       12937   IPOW4:          DJNZ	IPOW3
004840 F1          12938                   POP	AF
004841 F1          12939                   POP	AF
004842 F1          12940                   POP	AF
004843 C9          12941                   RET
004844             12942   ;
004844 F1          12943   FPOW0:          POP	AF
004845 F1          12944                   POP	AF
004846 F1          12945                   POP	AF
004847 18 A1       12946                   JR	IPOW0
004849             12947   ;
004849             12948   ;FPOW - Floating-point involution.
004849             12949   ;
004849 CB 7A       12950   FPOW:           BIT	7,D
00484B F5          12951                   PUSH	AF
00484C CD 60 4F    12952                   CALL	SWAP
00484F CD 1F 50    12953                   CALL	PUSH5
004852 0D          12954                   DEC	C
004853 0C          12955                   INC	C
004854 28 EE       12956                   JR	Z,FPOW0
004856 3E 9E       12957                   LD	A,158
004858 B9          12958                   CP	C
004859 38 08       12959                   JR	C,FPOW1
00485B 3C          12960                   INC	A
00485C CD 62 4E    12961                   CALL	FIX
00485F 08          12962                   EX	AF,AF'
004860 F2 44 48    12963                   JP	P,FPOW0
004863 CD 60 4F    12964   FPOW1:          CALL	SWAP
004866 CD 2B 4B    12965                   CALL	LN0
004869 CD 28 50    12966                   CALL	POP5
00486C F1          12967                   POP	AF
00486D CD 91 47    12968                   CALL	FMUL
004870 C3 A0 4A    12969                   JP	EXP0
004873             12970   ;
004873             12971   ;Integer and floating-point compare.
004873             12972   ;Result is TRUE (-1) or FALSE (0).
004873             12973   ;
004873 CD AF 4F    12974   FLT:            CALL	FCP
004876 18 03       12975                   JR	ILT1
004878 CD A2 4F    12976   ILT:            CALL	ICP
00487B D0          12977   ILT1:           RET	NC
00487C 18 38       12978                   JR	TRUE
00487E             12979   ;
00487E CD AF 4F    12980   FGT:            CALL	FCP
004881 18 03       12981                   JR	IGT1
004883 CD A2 4F    12982   IGT:            CALL	ICP
004886 C8          12983   IGT1:           RET	Z
004887 D8          12984                   RET	C
004888 18 2C       12985                   JR	TRUE
00488A             12986   ;
00488A CD AF 4F    12987   FGE:            CALL	FCP
00488D 18 03       12988                   JR	IGE1
00488F CD A2 4F    12989   IGE:            CALL	ICP
004892 D8          12990   IGE1:           RET	C
004893 18 21       12991                   JR	TRUE
004895             12992   ;
004895 CD AF 4F    12993   FLE:            CALL	FCP
004898 18 03       12994                   JR	ILE1
00489A CD A2 4F    12995   ILE:            CALL	ICP
00489D 28 17       12996   ILE1:           JR	Z,TRUE
00489F D0          12997                   RET	NC
0048A0 18 14       12998                   JR	TRUE
0048A2             12999   ;
0048A2 CD AF 4F    13000   FNE:            CALL	FCP
0048A5 18 03       13001                   JR	INE1
0048A7 CD A2 4F    13002   INE:            CALL	ICP
0048AA C8          13003   INE1:           RET	Z
0048AB 18 09       13004                   JR	TRUE
0048AD             13005   ;
0048AD CD AF 4F    13006   FEQ:            CALL	FCP
0048B0 18 03       13007                   JR	IEQ1
0048B2 CD A2 4F    13008   IEQ:            CALL	ICP
0048B5 C0          13009   IEQ1:           RET	NZ
0048B6 21 FF FF    13010   TRUE:           LD	HL,-1
0048B9 D9          13011                   EXX
0048BA 21 FF FF    13012                   LD	HL,-1
0048BD D9          13013                   EXX
0048BE AF          13014                   XOR	A
0048BF 4F          13015                   LD	C,A
0048C0 C9          13016                   RET
0048C1             13017   ;
0048C1             13018   ;Integer shifts:
0048C1             13019   ;
0048C1             13020   ISHX:
0048C1 CD F2 48    13021   ISHL:           CALL	SHIFTS
0048C4 28 07       13022                   JR	Z,SHRET
0048C6 D9          13023   ISHL1:          EXX
0048C7 29          13024                   ADD	HL,HL
0048C8 D9          13025                   EXX
0048C9 ED 6A       13026                   ADC	HL,HL
0048CB 10 F9       13027                   DJNZ	ISHL1
0048CD C9          13028   SHRET:          RET
0048CE             13029   ;
0048CE CD F2 48    13030   ISAR:           CALL	SHIFTS
0048D1 28 FA       13031                   JR	Z,SHRET
0048D3 CB 2C       13032   ISAR1:          SRA	H
0048D5 CB 1D       13033                   RR	L
0048D7 D9          13034                   EXX
0048D8 CB 1C       13035                   RR	H
0048DA CB 1D       13036                   RR	L
0048DC D9          13037                   EXX
0048DD 10 F4       13038                   DJNZ	ISAR1
0048DF C9          13039                   RET
0048E0             13040   ;
0048E0 CD F2 48    13041   ISHR:           CALL	SHIFTS
0048E3 28 E8       13042                   JR	Z,SHRET
0048E5 CB 3C       13043   ISHR1:          SRL	H
0048E7 CB 1D       13044                   RR	L
0048E9 D9          13045                   EXX
0048EA CB 1C       13046                   RR	H
0048EC CB 1D       13047                   RR	L
0048EE D9          13048                   EXX
0048EF 10 F4       13049                   DJNZ	ISHR1
0048F1 C9          13050                   RET
0048F2             13051   ;
0048F2 CD 72 4E    13052   SHIFTS:         CALL	FIX2
0048F5 7A          13053                   LD	A,D
0048F6 B3          13054                   OR	E
0048F7 D9          13055                   EXX
0048F8 B2          13056                   OR	D
0048F9 7B          13057                   LD	A,E
0048FA D9          13058                   EXX
0048FB 06 20       13059                   LD	B,32
0048FD 20 02       13060                   JR	NZ,SHMAX
0048FF 47          13061                   LD	B,A
004900 B7          13062                   OR	A
004901 C9          13063   SHMAX:          RET
004902             13064   ;
004902             13065   ;FUNCTIONS:
004902             13066   ;
004902             13067   ;Result returned in HLH'L'C (floating point)
004902             13068   ;Result returned in HLH'L' (C=0) (integer)
004902             13069   ;All registers except IY destroyed.
004902             13070   ;
004902             13071   ;ABS - Absolute value
004902             13072   ;Result is numeric, variable type.
004902             13073   ;
004902 CB 7C       13074   ABS:            BIT	7,H
004904 C8          13075                   RET	Z		;POSITIVE/ZERO
004905 0D          13076                   DEC	C
004906 0C          13077                   INC	C
004907 CA 8A 4E    13078                   JP	Z,NEGATE	;INTEGER
00490A CB BC       13079                   RES	7,H
00490C C9          13080                   RET
00490D             13081   ;
00490D             13082   ;NOT - Complement integer.
00490D             13083   ;Result is integer numeric.
00490D             13084   ;
00490D CD 7B 4E    13085   CPL_:           CALL	SFIXmat
004910 7C          13086                   LD	A,H
004911 2F          13087                   CPL
004912 67          13088                   LD	H,A
004913 7D          13089                   LD	A,L
004914 2F          13090                   CPL
004915 6F          13091                   LD	L,A
004916 D9          13092                   EXX
004917 7C          13093                   LD	A,H
004918 2F          13094                   CPL
004919 67          13095                   LD	H,A
00491A 7D          13096                   LD	A,L
00491B 2F          13097                   CPL
00491C 6F          13098                   LD	L,A
00491D D9          13099                   EXX
00491E AF          13100                   XOR	A		;NUMERIC MARKER
00491F C9          13101                   RET
004920             13102   ;
004920             13103   ;PI - Return PI (3.141592654)
004920             13104   ;Result is floating-point numeric.
004920             13105   ;
004920 21 0F 49    13106   PI:             LD	HL,490FH
004923 D9          13107                   EXX
004924 21 A2 DA    13108                   LD	HL,0DAA2H
004927 D9          13109                   EXX
004928 0E 81       13110                   LD	C,81H
00492A AF          13111                   XOR	A		;NUMERIC MARKER
00492B C9          13112                   RET
00492C             13113   ;
00492C             13114   ;DEG - Convert radians to degrees
00492C             13115   ;Result is floating-point numeric.
00492C             13116   ;
00492C CD 3C 49    13117   DEG:            CALL	FPI180
00492F CD 91 47    13118                   CALL	FMUL
004932 AF          13119                   XOR	A
004933 C9          13120                   RET
004934             13121   ;
004934             13122   ;RAD - Convert degrees to radians
004934             13123   ;Result is floating-point numeric.
004934             13124   ;
004934 CD 3C 49    13125   RAD:            CALL	FPI180
004937 CD 21 47    13126                   CALL	FDIV
00493A AF          13127                   XOR	A
00493B C9          13128                   RET
00493C             13129   ;
00493C             13130   ;180/PI
00493C             13131   ;
00493C CD 36 4F    13132   FPI180:         CALL	SFLOAT
00493F 11 2E 65    13133                   LD	DE,652EH
004942 D9          13134                   EXX
004943 11 D3 E0    13135                   LD	DE,0E0D3H
004946 D9          13136                   EXX
004947 06 85       13137                   LD	B,85H
004949 C9          13138                   RET
00494A             13139   ;
00494A             13140   ;SGN - Return -1, 0 or +1
00494A             13141   ;Result is integer numeric.
00494A             13142   ;
00494A CD 85 4F    13143   SGN:            CALL	TESTmat
00494D B1          13144                   OR	C
00494E C8          13145                   RET	Z		;ZERO
00494F CB 7C       13146                   BIT	7,H
004951 C2 B6 48    13147                   JP	NZ,TRUE		;-1
004954 CD A5 4F    13148                   CALL	ZEROmat
004957 C3 4C 4F    13149                   JP	ADD1		;1
00495A             13150   ;
00495A             13151   ;VAL - Return numeric value of string.
00495A             13152   ;Input: ASCII string at IX
00495A             13153   ;Result is variable type numeric.
00495A             13154   ;
00495A CD 67 51    13155   VAL:            CALL	SIGNQ
00495D F5          13156                   PUSH	AF
00495E CD B8 4D    13157                   CALL	CON
004961 F1          13158                   POP	AF
004962 FE 2D       13159                   CP	'-'
004964 3E 00       13160                   LD	A,0		;NUMERIC MARKER
004966 C0          13161                   RET	NZ
004967 0D          13162                   DEC	C
004968 0C          13163                   INC	C
004969 CA 8A 4E    13164                   JP	Z,NEGATE	;ZERO/INTEGER
00496C 7C          13165                   LD	A,H
00496D EE 80       13166                   XOR	80H		;CHANGE SIGN (FP)
00496F 67          13167                   LD	H,A
004970 AF          13168                   XOR	A
004971 C9          13169                   RET
004972             13170   ;
004972             13171   ;INT - Floor function
004972             13172   ;Result is integer numeric.
004972             13173   ;
004972 0D          13174   INT_:           DEC	C
004973 0C          13175                   INC	C
004974 C8          13176                   RET	Z		;ZERO/INTEGER
004975 3E 9F       13177                   LD	A,159
004977 44          13178                   LD	B,H		;B7=SIGN BIT
004978 CD 62 4E    13179                   CALL	FIX
00497B 08          13180                   EX	AF,AF'
00497C A0          13181                   AND	B
00497D FC 4C 4F    13182                   CALL	M,ADD1		;NEGATIVE NON-INTEGER
004980 78          13183                   LD	A,B
004981 B7          13184                   OR	A
004982 FC 8A 4E    13185                   CALL	M,NEGATE
004985 AF          13186                   XOR	A
004986 4F          13187                   LD	C,A
004987 C9          13188                   RET
004988             13189   ;
004988             13190   ;SQR - square root
004988             13191   ;Result is floating-point numeric.
004988             13192   ;
004988 CD 36 4F    13193   SQR:            CALL	SFLOAT
00498B CB 7C       13194   SQR0:           BIT	7,H
00498D 3E 15       13195                   LD	A,NGROOT
00498F C2 AA 45    13196                   JP	NZ,ERROR_mat	;"-ve root"
004992 0D          13197                   DEC	C
004993 0C          13198                   INC	C
004994 C8          13199                   RET	Z		;ZERO
004995 CB FC       13200                   SET	7,H		;IMPLIED 1
004997 CB 41       13201                   BIT	0,C
004999 CC 68 4F    13202                   CALL	Z,DIV2		;MAKE EXPONENT ODD
00499C 79          13203                   LD	A,C
00499D D6 80       13204                   SUB	80H
00499F CB 2F       13205                   SRA	A		;HALVE EXPONENT
0049A1 C6 80       13206                   ADD	A,80H
0049A3 4F          13207                   LD	C,A
0049A4 C5          13208                   PUSH	BC		;SAVE EXPONENT
0049A5 EB          13209                   EX	DE,HL
0049A6 21 00 00    13210                   LD	HL,0
0049A9 44          13211                   LD	B,H
0049AA 4D          13212                   LD	C,L
0049AB D9          13213                   EXX
0049AC EB          13214                   EX	DE,HL
0049AD 21 00 00    13215                   LD	HL,0
0049B0 44          13216                   LD	B,H
0049B1 4D          13217                   LD	C,L
0049B2 3E E1       13218                   LD	A,-31
0049B4 CD 16 51    13219                   CALL	SQRA		;ROOT
0049B7 D9          13220                   EXX
0049B8 CB 78       13221                   BIT	7,B
0049BA D9          13222                   EXX
0049BB CC 16 51    13223                   CALL	Z,SQRA		;NORMALISE & INC A
0049BE CD 35 51    13224                   CALL	SQRB
0049C1 B7          13225                   OR	A		;CLEAR CARRY
0049C2 CD D0 50    13226                   CALL	DIVB
0049C5 CB 1B       13227                   RR	E		;LSB TO CARRY
0049C7 60          13228                   LD	H,B
0049C8 69          13229                   LD	L,C
0049C9 D9          13230                   EXX
0049CA 60          13231                   LD	H,B
0049CB 69          13232                   LD	L,C
0049CC DC 4C 4F    13233                   CALL	C,ADD1		;ROUND UP
0049CF C1          13234                   POP	BC		;RESTORE EXPONENT
0049D0 DC 74 4F    13235                   CALL	C,INCC
0049D3 1F          13236                   RRA
0049D4 9F          13237                   SBC	A,A
0049D5 81          13238                   ADD	A,C
0049D6 4F          13239                   LD	C,A
0049D7 CB BC       13240                   RES	7,H		;POSITIVE
0049D9 AF          13241                   XOR	A
0049DA C9          13242                   RET
0049DB             13243   ;
0049DB             13244   ;TAN - Tangent function
0049DB             13245   ;Result is floating-point numeric.
0049DB             13246   ;
0049DB CD 36 4F    13247   TAN:            CALL	SFLOAT
0049DE CD 1F 50    13248                   CALL	PUSH5
0049E1 CD FB 49    13249                   CALL	COS0
0049E4 CD 28 50    13250                   CALL	POP5
0049E7 CD 1F 50    13251                   CALL	PUSH5
0049EA CD 60 4F    13252                   CALL	SWAP
0049ED CD 06 4A    13253                   CALL	SIN0
0049F0 CD 28 50    13254                   CALL	POP5
0049F3 CD 21 47    13255                   CALL	FDIV
0049F6 AF          13256                   XOR	A		;NUMERIC MARKER
0049F7 C9          13257                   RET
0049F8             13258   ;
0049F8             13259   ;COS - Cosine function
0049F8             13260   ;Result is floating-point numeric.
0049F8             13261   ;
0049F8 CD 36 4F    13262   COS:            CALL	SFLOAT
0049FB CD AB 4E    13263   COS0:           CALL	SCALE
0049FE 1C          13264                   INC	E
0049FF 1C          13265                   INC	E
004A00 7B          13266                   LD	A,E
004A01 18 0E       13267                   JR	SIN1
004A03             13268   ;
004A03             13269   ;SIN - Sine function
004A03             13270   ;Result is floating-point numeric.
004A03             13271   ;
004A03 CD 36 4F    13272   SIN:            CALL	SFLOAT
004A06 E5          13273   SIN0:           PUSH	HL		;H7=SIGN
004A07 CD AB 4E    13274                   CALL	SCALE
004A0A F1          13275                   POP	AF
004A0B 07          13276                   RLCA
004A0C 07          13277                   RLCA
004A0D 07          13278                   RLCA
004A0E E6 04       13279                   AND	4
004A10 AB          13280                   XOR	E
004A11 F5          13281   SIN1:           PUSH	AF		;OCTANT
004A12 CB BC       13282                   RES	7,H
004A14 1F          13283                   RRA
004A15 CD 92 4A    13284                   CALL	PIBY4
004A18 DC B9 46    13285                   CALL	C,RSUB		;X=(PI/4)-X
004A1B F1          13286                   POP	AF
004A1C F5          13287                   PUSH	AF
004A1D E6 03       13288                   AND	3
004A1F E2 50 4A    13289                   JP	PO,SIN2		;USE COSINE APPROX.
004A22 CD 1F 50    13290                   CALL	PUSH5		;SAVE X
004A25 CD 19 50    13291                   CALL	SQUARE		;PUSH X*X
004A28 CD 52 50    13292                   CALL	POLY
004A2B B7 A8       13293                   DW	0A8B7H		;a(8)
004A2D 11 36       13294                   DW	3611H
004A2F 6D          13295                   DB	6DH
004A30 26 DE       13296                   DW	0DE26H		;a(6)
004A32 05 D0       13297                   DW	0D005H
004A34 73          13298                   DB	73H
004A35 C0 80       13299                   DW	80C0H		;a(4)
004A37 88 08       13300                   DW	888H
004A39 79          13301                   DB	79H
004A3A 9D AA       13302                   DW	0AA9DH		;a(2)
004A3C AA AA       13303                   DW	0AAAAH
004A3E 7D          13304                   DB	7DH
004A3F 00 00       13305                   DW	0		;a(0)
004A41 00 00       13306                   DW	0
004A43 80          13307                   DB	80H
004A44 CD 28 50    13308                   CALL	POP5
004A47 CD 28 50    13309                   CALL	POP5
004A4A CD 91 47    13310                   CALL	FMUL
004A4D C3 72 4A    13311                   JP	SIN3
004A50             13312   ;
004A50 CD 19 50    13313   SIN2:           CALL	SQUARE		;PUSH X*X
004A53 CD 52 50    13314                   CALL	POLY
004A56 71 D5       13315                   DW	0D571H		;b(8)
004A58 78 4C       13316                   DW	4C78H
004A5A 70          13317                   DB	70H
004A5B AF 94       13318                   DW	94AFH		;b(6)
004A5D 03 B6       13319                   DW	0B603H
004A5F 76          13320                   DB	76H
004A60 C8 9C       13321                   DW	9CC8H		;b(4)
004A62 AA 2A       13322                   DW	2AAAH
004A64 7B          13323                   DB	7BH
004A65 DD FF       13324                   DW	0FFDDH		;b(2)
004A67 FF FF       13325                   DW	0FFFFH
004A69 7E          13326                   DB	7EH
004A6A 00 00       13327                   DW	0		;b(0)
004A6C 00 00       13328                   DW	0
004A6E 80          13329                   DB	80H
004A6F CD 28 50    13330                   CALL	POP5
004A72 F1          13331   SIN3:           POP	AF
004A73 E6 04       13332                   AND	4
004A75 C8          13333                   RET	Z
004A76 0D          13334                   DEC	C
004A77 0C          13335                   INC	C
004A78 C8          13336                   RET	Z		;ZERO
004A79 CB FC       13337                   SET	7,H		;MAKE NEGATIVE
004A7B C9          13338                   RET
004A7C             13339   ;
004A7C             13340   ;Floating-point one:
004A7C             13341   ;
004A7C 21 00 00    13342   FONE:           LD	HL,0
004A7F D9          13343                   EXX
004A80 21 00 00    13344                   LD	HL,0
004A83 D9          13345                   EXX
004A84 0E 80       13346                   LD	C,80H
004A86 C9          13347                   RET
004A87             13348   ;
004A87 11 00 00    13349   DONE:           LD	DE,0
004A8A D9          13350                   EXX
004A8B 11 00 00    13351                   LD	DE,0
004A8E D9          13352                   EXX
004A8F 06 80       13353                   LD	B,80H
004A91 C9          13354                   RET
004A92             13355   ;
004A92 11 0F 49    13356   PIBY4:          LD	DE,490FH
004A95 D9          13357                   EXX
004A96 11 A2 DA    13358                   LD	DE,0DAA2H
004A99 D9          13359                   EXX
004A9A 06 7F       13360                   LD	B,7FH
004A9C C9          13361                   RET
004A9D             13362   ;
004A9D             13363   ;EXP - Exponential function
004A9D             13364   ;Result is floating-point numeric.
004A9D             13365   ;
004A9D CD 36 4F    13366   EXP:            CALL	SFLOAT
004AA0 CD 1D 4B    13367   EXP0:           CALL	LN2		;LN(2)
004AA3 D9          13368                   EXX
004AA4 1D          13369                   DEC	E
004AA5 01 CF D1    13370                   LD	BC,0D1CFH	;0.6931471805599453
004AA8 D9          13371                   EXX
004AA9 E5          13372                   PUSH	HL		;H7=SIGN
004AAA CD BB 4E    13373                   CALL	MOD48		;"MODULUS"
004AAD F1          13374                   POP	AF
004AAE CB 7B       13375                   BIT	7,E
004AB0 28 09       13376                   JR	Z,EXP1
004AB2 17          13377                   RLA
004AB3 DA A5 4F    13378                   JP	C,ZEROmat
004AB6 3E 18       13379                   LD	A,EXPRNG
004AB8 C3 AA 45    13380                   JP	ERROR_mat		;"Exp range"
004ABB             13381   ;
004ABB E6 80       13382   EXP1:           AND	80H
004ABD B3          13383                   OR	E
004ABE F5          13384                   PUSH	AF		;INTEGER PART
004ABF CB BC       13385                   RES	7,H
004AC1 CD 1F 50    13386                   CALL	PUSH5		;PUSH X*LN(2)
004AC4 CD 52 50    13387                   CALL	POLY
004AC7 72 40       13388                   DW	4072H		;a(7)
004AC9 2E 94       13389                   DW	942EH
004ACB 73          13390                   DB	73H
004ACC 65 6F       13391                   DW	6F65H		;a(6)
004ACE 4F 2E       13392                   DW	2E4FH
004AD0 76          13393                   DB	76H
004AD1 37 6D       13394                   DW	6D37H		;a(5)
004AD3 02 88       13395                   DW	8802H
004AD5 79          13396                   DB	79H
004AD6 12 E5       13397                   DW	0E512H		;a(4)
004AD8 A0 2A       13398                   DW	2AA0H
004ADA 7B          13399                   DB	7BH
004ADB 14 4F       13400                   DW	4F14H		;a(3)
004ADD AA AA       13401                   DW	0AAAAH
004ADF 7D          13402                   DB	7DH
004AE0 56 FD       13403                   DW	0FD56H		;a(2)
004AE2 FF 7F       13404                   DW	7FFFH
004AE4 7E          13405                   DB	7EH
004AE5 FE FF       13406                   DW	0FFFEH		;a(1)
004AE7 FF FF       13407                   DW	0FFFFH
004AE9 7F          13408                   DB	7FH
004AEA 00 00       13409                   DW	0		;a(0)
004AEC 00 00       13410                   DW	0
004AEE 80          13411                   DB	80H
004AEF CD 28 50    13412                   CALL	POP5
004AF2 F1          13413                   POP	AF
004AF3 F5          13414                   PUSH	AF
004AF4 F4 14 4B    13415                   CALL	P,RECIP		;X=1/X
004AF7 F1          13416                   POP	AF
004AF8 F2 FF 4A    13417                   JP	P,EXP4
004AFB E6 7F       13418                   AND	7FH
004AFD ED 44       13419                   NEG
004AFF C6 80       13420   EXP4:           ADD	A,80H
004B01 81          13421                   ADD	A,C
004B02 38 05       13422                   JR	C,EXP2
004B04 F2 A5 4F    13423                   JP	P,ZEROmat		;UNDERFLOW
004B07 18 03       13424                   JR	EXP3
004B09 FA 76 4F    13425   EXP2:           JP	M,OFLOW		;OVERFLOW
004B0C C6 80       13426   EXP3:           ADD	A,80H
004B0E CA A5 4F    13427                   JP	Z,ZEROmat
004B11 4F          13428                   LD	C,A
004B12 AF          13429                   XOR	A		;NUMERIC MARKER
004B13 C9          13430                   RET
004B14             13431   ;
004B14 CD 87 4A    13432   RECIP:          CALL	DONE
004B17 CD 60 4F    13433   RDIV:           CALL	SWAP
004B1A C3 21 47    13434                   JP	FDIV		;RECIPROCAL
004B1D             13435   ;
004B1D 11 72 31    13436   LN2:            LD	DE,3172H	;LN(2)
004B20 D9          13437                   EXX
004B21 11 F8 17    13438                   LD	DE,17F8H
004B24 D9          13439                   EXX
004B25 06 7F       13440                   LD	B,7FH
004B27 C9          13441                   RET
004B28             13442   ;
004B28             13443   ;LN - Natural log.
004B28             13444   ;Result is floating-point numeric.
004B28             13445   ;
004B28 CD 36 4F    13446   LN:             CALL	SFLOAT
004B2B 3E 16       13447   LN0:            LD	A,LOGRNG
004B2D CB 7C       13448                   BIT	7,H
004B2F C2 AA 45    13449                   JP	NZ,ERROR_mat	;"Log range"
004B32 0C          13450                   INC	C
004B33 0D          13451                   DEC	C
004B34 CA AA 45    13452                   JP	Z,ERROR_mat
004B37 11 04 35    13453                   LD	DE,3504H	;SQR(2)
004B3A D9          13454                   EXX
004B3B 11 33 F3    13455                   LD	DE,0F333H	;1.41421356237
004B3E D9          13456                   EXX
004B3F CD B7 4F    13457                   CALL	ICP0		;MANTISSA>SQR(2)?
004B42 79          13458                   LD	A,C		;EXPONENT
004B43 0E 80       13459                   LD	C,80H		;1 <= X < 2
004B45 38 02       13460                   JR	C,LN4
004B47 0D          13461                   DEC	C
004B48 3C          13462                   INC	A
004B49 F5          13463   LN4:            PUSH	AF		;SAVE EXPONENT
004B4A CD 34 50    13464                   CALL	RATIO		;X=(X-1)/(X+1)
004B4D CD 1F 50    13465                   CALL	PUSH5
004B50 CD 19 50    13466                   CALL	SQUARE		;PUSH X*X
004B53 CD 52 50    13467                   CALL	POLY
004B56 48 CC       13468                   DW	0CC48H		;a(9)
004B58 FB 74       13469                   DW	74FBH
004B5A 7D          13470                   DB	7DH
004B5B AF AE       13471                   DW	0AEAFH		;a(7)
004B5D FF 11       13472                   DW	11FFH
004B5F 7E          13473                   DB	7EH
004B60 8C D9       13474                   DW	0D98CH		;a(5)
004B62 CD 4C       13475                   DW	4CCDH
004B64 7E          13476                   DB	7EH
004B65 E3 A9       13477                   DW	0A9E3H		;a(3)
004B67 AA 2A       13478                   DW	2AAAH
004B69 7F          13479                   DB	7FH
004B6A 00 00       13480                   DW	0		;a(1)
004B6C 00 00       13481                   DW	0
004B6E 81          13482                   DB	81H
004B6F CD 28 50    13483                   CALL	POP5
004B72 CD 28 50    13484                   CALL	POP5
004B75 CD 91 47    13485                   CALL	FMUL
004B78 F1          13486                   POP	AF		;EXPONENT
004B79 CD 1F 50    13487                   CALL	PUSH5
004B7C 08          13488                   EX	AF,AF'
004B7D CD A5 4F    13489                   CALL	ZEROmat
004B80 08          13490                   EX	AF,AF'
004B81 D6 80       13491                   SUB	80H
004B83 28 1B       13492                   JR	Z,LN3
004B85 30 02       13493                   JR	NC,LN1
004B87 2F          13494                   CPL
004B88 3C          13495                   INC	A
004B89 67          13496   LN1:            LD	H,A
004B8A 0E 87       13497                   LD	C,87H
004B8C F5          13498                   PUSH	AF
004B8D CD 1C 4F    13499                   CALL	FLOAT
004B90 CB BC       13500                   RES	7,H
004B92 CD 1D 4B    13501                   CALL	LN2
004B95 CD 91 47    13502                   CALL	FMUL
004B98 F1          13503                   POP	AF
004B99 30 05       13504                   JR	NC,LN3
004B9B FA A0 4B    13505                   JP	M,LN3
004B9E CB FC       13506                   SET	7,H
004BA0 CD 28 50    13507   LN3:            CALL	POP5
004BA3 CD C9 46    13508                   CALL	FADD
004BA6 AF          13509                   XOR	A
004BA7 C9          13510                   RET
004BA8             13511   ;
004BA8             13512   ;LOG - base-10 logarithm.
004BA8             13513   ;Result is floating-point numeric.
004BA8             13514   ;
004BA8 CD 28 4B    13515   LOG:            CALL	LN
004BAB 11 5B 5E    13516                   LD	DE,5E5BH	;LOG(e)
004BAE D9          13517                   EXX
004BAF 11 A9 D8    13518                   LD	DE,0D8A9H
004BB2 D9          13519                   EXX
004BB3 06 7E       13520                   LD	B,7EH
004BB5 CD 91 47    13521                   CALL	FMUL
004BB8 AF          13522                   XOR	A
004BB9 C9          13523                   RET
004BBA             13524   ;
004BBA             13525   ;ASN - Arc-sine
004BBA             13526   ;Result is floating-point numeric.
004BBA             13527   ;
004BBA CD 36 4F    13528   ASN:            CALL	SFLOAT
004BBD CD 1F 50    13529                   CALL	PUSH5
004BC0 CD 11 50    13530                   CALL	COPY
004BC3 CD 91 47    13531                   CALL	FMUL
004BC6 CD 87 4A    13532                   CALL	DONE
004BC9 CD B9 46    13533                   CALL	RSUB
004BCC CD 8B 49    13534                   CALL	SQR0
004BCF CD 28 50    13535                   CALL	POP5
004BD2 0C          13536                   INC	C
004BD3 0D          13537                   DEC	C
004BD4 3E 02       13538                   LD	A,2
004BD6 D5          13539                   PUSH	DE
004BD7 28 70       13540                   JR	Z,ACS1
004BD9 D1          13541                   POP	DE
004BDA CD 17 4B    13542                   CALL	RDIV
004BDD 18 03       13543                   JR	ATN0
004BDF             13544   ;
004BDF             13545   ;ATN - arc-tangent
004BDF             13546   ;Result is floating-point numeric.
004BDF             13547   ;
004BDF CD 36 4F    13548   ATN:            CALL	SFLOAT
004BE2 E5          13549   ATN0:           PUSH	HL		;SAVE SIGN
004BE3 CB BC       13550                   RES	7,H
004BE5 11 13 54    13551                   LD	DE,5413H	;TAN(PI/8)=SQR(2)-1
004BE8 D9          13552                   EXX
004BE9 11 D0 CC    13553                   LD	DE,0CCD0H
004BEC D9          13554                   EXX
004BED 06 7E       13555                   LD	B,7EH
004BEF CD B4 4F    13556                   CALL	FCP0		;COMPARE
004BF2 06 00       13557                   LD	B,0
004BF4 38 1C       13558                   JR	C,ATN2
004BF6 11 82 1A    13559                   LD	DE,1A82H	;TAN(3*PI/8)=SQR(2)+1
004BF9 D9          13560                   EXX
004BFA 11 9A 79    13561                   LD	DE,799AH
004BFD D9          13562                   EXX
004BFE 06 81       13563                   LD	B,81H
004C00 CD B4 4F    13564                   CALL	FCP0		;COMPARE
004C03 38 08       13565                   JR	C,ATN1
004C05 CD 14 4B    13566                   CALL	RECIP		;X=1/X
004C08 06 02       13567                   LD	B,2
004C0A C3 12 4C    13568                   JP	ATN2
004C0D CD 34 50    13569   ATN1:           CALL	RATIO		;X=(X-1)/(X+1)
004C10 06 01       13570                   LD	B,1
004C12 C5          13571   ATN2:           PUSH	BC		;SAVE FLAG
004C13 CD 1F 50    13572                   CALL	PUSH5
004C16 CD 19 50    13573                   CALL	SQUARE		;PUSH X*X
004C19 CD 52 50    13574                   CALL	POLY
004C1C 35 F3       13575                   DW	0F335H		;a(13)
004C1E D8 37       13576                   DW	37D8H
004C20 7B          13577                   DB	7BH
004C21 91 6B       13578                   DW	6B91H		;a(11)
004C23 B9 AA       13579                   DW	0AAB9H
004C25 7C          13580                   DB	7CH
004C26 DE 41       13581                   DW	41DEH		;a(9)
004C28 97 61       13582                   DW	6197H
004C2A 7C          13583                   DB	7CH
004C2B 7B 9D       13584                   DW	9D7BH		;a(7)
004C2D 37 92       13585                   DW	9237H
004C2F 7D          13586                   DB	7DH
004C30 5A 2A       13587                   DW	2A5AH		;a(5)
004C32 CC 4C       13588                   DW	4CCCH
004C34 7D          13589                   DB	7DH
004C35 5C A9       13590                   DW	0A95CH		;a(3)
004C37 AA AA       13591                   DW	0AAAAH
004C39 7E          13592                   DB	7EH
004C3A 00 00       13593                   DW	0		;a(1)
004C3C 00 00       13594                   DW	0
004C3E 80          13595                   DB	80H
004C3F CD 28 50    13596                   CALL	POP5
004C42 CD 28 50    13597                   CALL	POP5
004C45 CD 91 47    13598                   CALL	FMUL
004C48 F1          13599                   POP	AF
004C49 CD 92 4A    13600   ACS1:           CALL	PIBY4		;PI/4
004C4C 1F          13601                   RRA
004C4D F5          13602                   PUSH	AF
004C4E DC C9 46    13603                   CALL	C,FADD
004C51 F1          13604                   POP	AF
004C52 04          13605                   INC	B
004C53 1F          13606                   RRA
004C54 DC B9 46    13607                   CALL	C,RSUB
004C57 F1          13608                   POP	AF
004C58 B7          13609                   OR	A
004C59 F0          13610                   RET	P
004C5A CB FC       13611                   SET	7,H		;MAKE NEGATIVE
004C5C AF          13612                   XOR	A
004C5D C9          13613                   RET
004C5E             13614   ;
004C5E             13615   ;ACS - Arc cosine=PI/2-ASN.
004C5E             13616   ;Result is floating point numeric.
004C5E             13617   ;
004C5E CD BA 4B    13618   ACS:            CALL	ASN
004C61 3E 02       13619                   LD	A,2
004C63 F5          13620                   PUSH	AF
004C64 18 E3       13621                   JR	ACS1
004C66             13622   ;
004C66             13623   ;Function STR - convert numeric value to ASCII string.
004C66             13624   ;   Inputs: HLH'L'C = integer or floating-point number
004C66             13625   ;           DE = address at which to store string
004C66             13626   ;           IX = address of @% format control
004C66             13627   ;  Outputs: String stored, with NUL terminator
004C66             13628   ;
004C66             13629   ;First normalise for decimal output:
004C66             13630   ;
004C66 CD 36 4F    13631   STRmat:            CALL	SFLOAT
004C69 06 00       13632                   LD	B,0		;DEFAULT PT. POSITION
004C6B CB 7C       13633                   BIT	7,H		;NEGATIVE?
004C6D 28 06       13634                   JR	Z,STR10
004C6F CB BC       13635                   RES	7,H
004C71 3E 2D       13636                   LD	A,'-'
004C73 12          13637                   LD	(DE),A		;STORE SIGN
004C74 13          13638                   INC	DE
004C75 AF          13639   STR10:          XOR	A		;CLEAR A
004C76 B9          13640                   CP	C
004C77 28 47       13641                   JR	Z,STR2mat		;ZERO
004C79 D5          13642                   PUSH	DE		;SAVE TEXT POINTER
004C7A 78          13643                   LD	A,B
004C7B F5          13644   STR11:          PUSH	AF		;SAVE DECIMAL COUNTER
004C7C 79          13645                   LD	A,C		;BINARY EXPONENT
004C7D FE A1       13646                   CP	161
004C7F 30 1A       13647                   JR	NC,STR14
004C81 FE 9B       13648                   CP	155
004C83 30 25       13649                   JR	NC,STR15
004C85 2F          13650                   CPL
004C86 FE E1       13651                   CP	225
004C88 38 02       13652                   JR	C,STR13
004C8A 3E F8       13653                   LD	A,-8
004C8C C6 1C       13654   STR13:          ADD	A,28
004C8E CD 79 50    13655                   CALL	POWR10
004C91 F5          13656                   PUSH	AF
004C92 CD 91 47    13657                   CALL	FMUL
004C95 F1          13658                   POP	AF
004C96 47          13659                   LD	B,A
004C97 F1          13660                   POP	AF
004C98 90          13661                   SUB	B
004C99 18 E0       13662                   JR	STR11
004C9B D6 20       13663   STR14:          SUB	32
004C9D CD 79 50    13664                   CALL	POWR10
004CA0 F5          13665                   PUSH	AF
004CA1 CD 21 47    13666                   CALL	FDIV
004CA4 F1          13667                   POP	AF
004CA5 47          13668                   LD	B,A
004CA6 F1          13669                   POP	AF
004CA7 80          13670                   ADD	A,B
004CA8 18 D1       13671                   JR	STR11
004CAA 3E 09       13672   STR15:          LD	A,9
004CAC CD 79 50    13673                   CALL	POWR10		;10^9
004CAF CD B4 4F    13674                   CALL	FCP0
004CB2 79          13675                   LD	A,C
004CB3 C1          13676                   POP	BC
004CB4 4F          13677                   LD	C,A
004CB5 CB FC       13678                   SET	7,H		;IMPLIED 1
004CB7 DC D6 4F    13679                   CALL	C,X10B		;X10, DEC B
004CBA D1          13680                   POP	DE		;RESTORE TEXT POINTER
004CBB CB B9       13681                   RES	7,C
004CBD 3E 00       13682                   LD	A,0
004CBF 17          13683                   RLA			;PUT CARRY IN LSB
004CC0             13684   ;
004CC0             13685   ;At this point decimal normalisation has been done,
004CC0             13686   ;now convert to decimal digits:
004CC0             13687   ;      AHLH'L' = number in normalised integer form
004CC0             13688   ;            B = decimal place adjustment
004CC0             13689   ;            C = binary place adjustment (29-33)
004CC0             13690   ;
004CC0 0C          13691   STR2mat:           INC	C
004CC1 08          13692                   EX	AF,AF'		;SAVE A
004CC2 78          13693                   LD	A,B
004CC3 DD CB 02 4E 13694                   BIT	1,(IX+2)
004CC7 20 08       13695                   JR	NZ,STR20
004CC9 AF          13696                   XOR	A
004CCA DD BE 01    13697                   CP	(IX+1)
004CCD 28 0A       13698                   JR	Z,STR21
004CCF 3E F6       13699                   LD	A,-10
004CD1 DD 86 01    13700   STR20:          ADD	A,(IX+1)	;SIG. FIG. COUNT
004CD4 B7          13701                   OR	A		;CLEAR CARRY
004CD5 FA D9 4C    13702                   JP	M,STR21
004CD8 AF          13703                   XOR	A
004CD9 F5          13704   STR21:          PUSH	AF
004CDA 08          13705                   EX	AF,AF'		;RESTORE A
004CDB CD FF 4F    13706   STR22:          CALL	X2		;RL AHLH'L'
004CDE 8F          13707                   ADC	A,A
004CDF FE 0A       13708                   CP	10
004CE1 38 05       13709                   JR	C,STR23
004CE3 D6 0A       13710                   SUB	10
004CE5 D9          13711                   EXX
004CE6 2C          13712                   INC	L		;SET RESULT BIT
004CE7 D9          13713                   EXX
004CE8 0D          13714   STR23:          DEC	C
004CE9 20 F0       13715                   JR	NZ,STR22	;32 TIMES
004CEB 4F          13716                   LD	C,A		;REMAINDER
004CEC 7C          13717                   LD	A,H
004CED E6 3F       13718                   AND	3FH		;CLEAR OUT JUNK
004CEF 67          13719                   LD	H,A
004CF0 F1          13720                   POP	AF
004CF1 F2 FE 4C    13721                   JP	P,STR24
004CF4 3C          13722                   INC	A
004CF5 20 1C       13723                   JR	NZ,STR26
004CF7 3E 04       13724                   LD	A,4
004CF9 B9          13725                   CP	C		;ROUND UP?
004CFA 3E 00       13726                   LD	A,0
004CFC 18 15       13727                   JR	STR26
004CFE F5          13728   STR24:          PUSH	AF
004CFF 79          13729                   LD	A,C
004D00 CE 30       13730                   ADC	A,'0'		;ADD CARRY
004D02 FE 30       13731                   CP	'0'
004D04 28 05       13732                   JR	Z,STR25		;SUPPRESS ZERO
004D06 FE 3A       13733                   CP	'9'+1
004D08 3F          13734                   CCF
004D09 30 08       13735                   JR	NC,STR26
004D0B E3          13736   STR25:          EX	(SP),HL
004D0C CB 75       13737                   BIT	6,L		;ZERO FLAG
004D0E E3          13738                   EX	(SP),HL
004D0F 20 05       13739                   JR	NZ,STR27
004D11 3E 30       13740                   LD	A,'0'
004D13 3C          13741   STR26:          INC	A		;SET +VE
004D14 3D          13742                   DEC	A
004D15 F5          13743                   PUSH	AF		;PUT ON STACK + CARRY
004D16 04          13744   STR27:          INC	B
004D17 CD 85 4F    13745                   CALL	TESTmat		;IS HLH'L' ZERO?
004D1A 0E 20       13746                   LD	C,32
004D1C 3E 00       13747                   LD	A,0
004D1E 20 BB       13748                   JR	NZ,STR22
004D20 F1          13749                   POP	AF
004D21 F5          13750                   PUSH	AF
004D22 3E 00       13751                   LD	A,0
004D24 38 B5       13752                   JR	C,STR22
004D26             13753   ;
004D26             13754   ;At this point, the decimal character string is stored
004D26             13755   ; on the stack. Trailing zeroes are suppressed and may
004D26             13756   ; need to be replaced.
004D26             13757   ;B register holds decimal point position.
004D26             13758   ;Now format number and store as ASCII string:
004D26             13759   ;
004D26 EB          13760   STR3:           EX	DE,HL		;STRING POINTER
004D27 0E FF       13761                   LD	C,-1		;FLAG "E"
004D29 16 01       13762                   LD	D,1
004D2B DD 5E 01    13763                   LD	E,(IX+1)	;f2
004D2E DD CB 02 46 13764                   BIT	0,(IX+2)
004D32 20 32       13765                   JR	NZ,STR34	;E MODE
004D34 DD CB 02 4E 13766                   BIT	1,(IX+2)
004D38 28 11       13767                   JR	Z,STR31
004D3A 78          13768                   LD	A,B		;F MODE
004D3B B7          13769                   OR	A
004D3C 28 04       13770                   JR	Z,STR30
004D3E FA 42 4D    13771                   JP	M,STR30
004D41 50          13772                   LD	D,B
004D42 7A          13773   STR30:          LD	A,D
004D43 DD 86 01    13774                   ADD	A,(IX+1)
004D46 5F          13775                   LD	E,A
004D47 FE 0B       13776                   CP	11
004D49 38 17       13777                   JR	C,STR32
004D4B 78          13778   STR31:          LD	A,B		;G MODE
004D4C 11 01 01    13779                   LD	DE,101H
004D4F B7          13780                   OR	A
004D50 FA 66 4D    13781                   JP	M,STR34
004D53 28 0D       13782                   JR	Z,STR32
004D55 DD 7E 01    13783                   LD	A,(IX+1)
004D58 B7          13784                   OR	A
004D59 20 02       13785                   JR	NZ,STR3A
004D5B 3E 0A       13786                   LD	A,10
004D5D B8          13787   STR3A:          CP	B
004D5E 38 06       13788                   JR	C,STR34
004D60 50          13789                   LD	D,B
004D61 58          13790                   LD	E,B
004D62 78          13791   STR32:          LD	A,B
004D63 C6 81       13792                   ADD	A,129
004D65 4F          13793                   LD	C,A
004D66 CB FA       13794   STR34:          SET	7,D
004D68 1D          13795                   DEC	E
004D69 7A          13796   STR35:          LD	A,D
004D6A B9          13797                   CP	C
004D6B 30 0C       13798                   JR	NC,STR33
004D6D F1          13799   STR36:          POP	AF
004D6E 28 03       13800                   JR	Z,STR37
004D70 F2 7B 4D    13801                   JP	P,STR38
004D73 F5          13802   STR37:          PUSH	AF
004D74 1C          13803                   INC	E
004D75 1D          13804                   DEC	E
004D76 FA 8A 4D    13805                   JP	M,STR4
004D79 3E 30       13806   STR33:          LD	A,'0'
004D7B 15          13807   STR38:          DEC	D
004D7C E2 82 4D    13808                   JP	PO,STR39
004D7F 36 2E       13809                   LD	(HL),'.'
004D81 23          13810                   INC	HL
004D82 77          13811   STR39:          LD	(HL),A
004D83 23          13812                   INC	HL
004D84 1D          13813                   DEC	E
004D85 F2 69 4D    13814                   JP	P,STR35
004D88 18 E3       13815                   JR	STR36
004D8A             13816   ;
004D8A F1          13817   STR4:           POP	AF
004D8B 0C          13818   STR40:          INC	C
004D8C 4D          13819                   LD	C,L
004D8D 20 27       13820                   JR	NZ,STR44
004D8F 36 45       13821                   LD	(HL),'E'	;EXPONENT
004D91 23          13822                   INC	HL
004D92 78          13823                   LD	A,B
004D93 3D          13824                   DEC	A
004D94 F2 9C 4D    13825                   JP	P,STR41
004D97 36 2D       13826                   LD	(HL),'-'
004D99 23          13827                   INC	HL
004D9A ED 44       13828                   NEG
004D9C 36 30       13829   STR41:          LD	(HL),'0'
004D9E 28 15       13830                   JR	Z,STR47
004DA0 FE 0A       13831                   CP	10
004DA2 47          13832                   LD	B,A
004DA3 3E 3A       13833                   LD	A,':'
004DA5 38 03       13834                   JR	C,STR42
004DA7 23          13835                   INC	HL
004DA8 36 30       13836                   LD	(HL),'0'
004DAA 34          13837   STR42:          INC	(HL)
004DAB BE          13838                   CP	(HL)
004DAC 20 05       13839                   JR	NZ,STR43
004DAE 36 30       13840                   LD	(HL),'0'
004DB0 2B          13841                   DEC	HL
004DB1 34          13842                   INC	(HL)
004DB2 23          13843                   INC	HL
004DB3 10 F5       13844   STR43:          DJNZ	STR42
004DB5 23          13845   STR47:          INC	HL
004DB6 EB          13846   STR44:          EX	DE,HL
004DB7 C9          13847                   RET
004DB8             13848   ;
004DB8             13849   ;Support subroutines:
004DB8             13850   ;
004DB8             13851   ;CON - Get unsigned numeric constant from ASCII string.
004DB8             13852   ;   Inputs: ASCII string at (IX).
004DB8             13853   ;  Outputs: Variable-type result in HLH'L'C
004DB8             13854   ;           IX updated (points to delimiter)
004DB8             13855   ;           A7 = 0 (numeric marker)
004DB8             13856   ;
004DB8 CD A5 4F    13857   CON:            CALL	ZEROmat		;INITIALISE TO ZERO
004DBB 0E 00       13858                   LD	C,0		;TRUNCATION COUNTER
004DBD CD 3D 4E    13859                   CALL	NUMBERmat		;GET INTEGER PART
004DC0 FE 2E       13860                   CP	'.'
004DC2 06 00       13861                   LD	B,0		;DECL. PLACE COUNTER
004DC4 CC 3B 4E    13862                   CALL	Z,NUMBIX	;GET FRACTION PART
004DC7 FE 45       13863                   CP	'E'
004DC9 3E 00       13864                   LD	A,0		;INITIALISE EXPONENT
004DCB CC 0C 4E    13865                   CALL	Z,GETEXP	;GET EXPONENT
004DCE CB 7C       13866                   BIT	7,H
004DD0 20 08       13867                   JR	NZ,CON0		;INTEGER OVERFLOW
004DD2 B7          13868                   OR	A
004DD3 20 05       13869                   JR	NZ,CON0		;EXPONENT NON-ZERO
004DD5 B8          13870                   CP	B
004DD6 20 02       13871                   JR	NZ,CON0		;DECIMAL POINT
004DD8 B9          13872                   CP	C
004DD9 C8          13873                   RET	Z		;INTEGER
004DDA 90          13874   CON0:           SUB	B
004DDB 81          13875                   ADD	A,C
004DDC 0E 9F       13876                   LD	C,159
004DDE CD 1C 4F    13877                   CALL	FLOAT
004DE1 CB BC       13878                   RES	7,H		;DITCH IMPLIED 1
004DE3 B7          13879                   OR	A
004DE4 C8          13880                   RET	Z		;DONE
004DE5 FA F0 4D    13881                   JP	M,CON2		;NEGATIVE EXPONENT
004DE8 CD 79 50    13882                   CALL	POWR10
004DEB CD 91 47    13883                   CALL	FMUL		;SCALE
004DEE AF          13884                   XOR	A
004DEF C9          13885                   RET
004DF0 FE DA       13886   CON2:           CP	-38
004DF2 38 0A       13887                   JR	C,CON3		;CAN'T SCALE IN ONE GO
004DF4 ED 44       13888                   NEG
004DF6 CD 79 50    13889                   CALL	POWR10
004DF9 CD 21 47    13890                   CALL	FDIV		;SCALE
004DFC AF          13891                   XOR	A
004DFD C9          13892                   RET
004DFE F5          13893   CON3:           PUSH	AF
004DFF 3E 26       13894                   LD	A,38
004E01 CD 79 50    13895                   CALL	POWR10
004E04 CD 21 47    13896                   CALL	FDIV
004E07 F1          13897                   POP	AF
004E08 C6 26       13898                   ADD	A,38
004E0A 18 E4       13899                   JR	CON2
004E0C             13900   ;
004E0C             13901   ;GETEXP - Get decimal exponent from string
004E0C             13902   ;     Inputs: ASCII string at (IX)
004E0C             13903   ;             (IX points at 'E')
004E0C             13904   ;             A = initial value
004E0C             13905   ;    Outputs: A = new exponent
004E0C             13906   ;             IX updated.
004E0C             13907   ;   Destroys: A,A',IX,F,F'
004E0C             13908   ;
004E0C C5          13909   GETEXP:         PUSH	BC		;SAVE REGISTERS
004E0D 47          13910                   LD	B,A		;INITIAL VALUE
004E0E 0E 02       13911                   LD	C,2		;2 DIGITS MAX
004E10 DD 23       13912                   INC	IX		;BUMP PAST 'E'
004E12 CD 67 51    13913                   CALL	SIGNQ
004E15 08          13914                   EX	AF,AF'		;SAVE EXPONENT SIGN
004E16 CD 5D 51    13915   GETEX1:         CALL	DIGITQ
004E19 38 17       13916                   JR	C,GETEX2
004E1B 78          13917                   LD	A,B		;B=B*10
004E1C 87          13918                   ADD	A,A
004E1D 87          13919                   ADD	A,A
004E1E 80          13920                   ADD	A,B
004E1F 87          13921                   ADD	A,A
004E20 47          13922                   LD	B,A
004E21 DD 7E 00    13923                   LD	A,(IX)		;GET BACK DIGIT
004E24 DD 23       13924                   INC	IX
004E26 E6 0F       13925                   AND	0FH		;MASK UNWANTED BITS
004E28 80          13926                   ADD	A,B		;ADD IN DIGIT
004E29 47          13927                   LD	B,A
004E2A 0D          13928                   DEC	C
004E2B F2 16 4E    13929                   JP	P,GETEX1
004E2E 06 64       13930                   LD	B,100		;FORCE OVERFLOW
004E30 18 E4       13931                   JR	GETEX1
004E32 08          13932   GETEX2:         EX	AF,AF'		;RESTORE SIGN
004E33 FE 2D       13933                   CP	'-'
004E35 78          13934                   LD	A,B
004E36 C1          13935                   POP	BC		;RESTORE
004E37 C0          13936                   RET	NZ
004E38 ED 44       13937                   NEG			;NEGATE EXPONENT
004E3A C9          13938                   RET
004E3B             13939   ;
004E3B             13940   ;NUMBER: Get unsigned integer from string.
004E3B             13941   ;    Inputs: string at (IX)
004E3B             13942   ;            C = truncated digit count
004E3B             13943   ;                (initially zero)
004E3B             13944   ;            B = total digit count
004E3B             13945   ;            HLH'L' = initial value
004E3B             13946   ;   Outputs: HLH'L' = number (binary integer)
004E3B             13947   ;            A = delimiter.
004E3B             13948   ;            B, C & IX updated
004E3B             13949   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004E3B             13950   ;
004E3B DD 23       13951   NUMBIX:         INC	IX
004E3D CD 5D 51    13952   NUMBERmat:         CALL	DIGITQ
004E40 D8          13953                   RET	C
004E41 04          13954                   INC	B		;INCREMENT DIGIT COUNT
004E42 DD 23       13955                   INC	IX
004E44 CD F0 4F    13956                   CALL	X10		;*10 & COPY OLD VALUE
004E47 38 13       13957                   JR	C,NUMB1		;OVERFLOW
004E49 0D          13958                   DEC	C		;SEE IF TRUNCATED
004E4A 0C          13959                   INC	C
004E4B 20 0F       13960                   JR	NZ,NUMB1	;IMPORTANT!
004E4D E6 0F       13961                   AND	0FH
004E4F D9          13962                   EXX
004E50 06 00       13963                   LD	B,0
004E52 4F          13964                   LD	C,A
004E53 09          13965                   ADD	HL,BC		;ADD IN DIGIT
004E54 D9          13966                   EXX
004E55 30 E6       13967                   JR	NC,NUMBERmat
004E57 23          13968                   INC	HL		;CARRY
004E58 7C          13969                   LD	A,H
004E59 B5          13970                   OR	L
004E5A 20 E1       13971                   JR	NZ,NUMBERmat
004E5C 0C          13972   NUMB1:          INC	C		;TRUNCATION COUNTER
004E5D CD 63 4F    13973                   CALL	SWAP1		;RESTORE PREVIOUS VALUE
004E60 18 DB       13974                   JR	NUMBERmat
004E62             13975   ;
004E62             13976   ;FIX - Fix number to specified exponent value.
004E62             13977   ;    Inputs: HLH'L'C = +ve non-zero number (floated)
004E62             13978   ;            A = desired exponent (A>C)
004E62             13979   ;   Outputs: HLH'L'C = fixed number (unsigned)
004E62             13980   ;            fraction shifted into B'C'
004E62             13981   ;            A'F' positive if integer input
004E62             13982   ;  Destroys: C,H,L,A',B',C',H',L',F,F'
004E62             13983   ;
004E62 08          13984   FIX:            EX	AF,AF'
004E63 AF          13985                   XOR	A
004E64 08          13986                   EX	AF,AF'
004E65 CB FC       13987                   SET	7,H		;IMPLIED 1
004E67 CD 68 4F    13988   FIX1:           CALL	DIV2
004E6A B9          13989                   CP	C
004E6B C8          13990                   RET	Z
004E6C D2 67 4E    13991                   JP	NC,FIX1
004E6F C3 76 4F    13992                   JP	OFLOW
004E72             13993   ;
004E72             13994   ;SFIXmat - Convert to integer if necessary.
004E72             13995   ;    Input: Variable-type number in HLH'L'C
004E72             13996   ;   Output: Integer in HLH'L', C=0
004E72             13997   ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
004E72             13998   ;
004E72             13999   ;NEGATE - Negate HLH'L'
004E72             14000   ;    Destroys: H,L,H',L',F
004E72             14001   ;
004E72 CD 60 4F    14002   FIX2:           CALL	SWAP
004E75 CD 7B 4E    14003                   CALL	SFIXmat
004E78 CD 60 4F    14004                   CALL	SWAP
004E7B 0D          14005   SFIXmat:           DEC	C
004E7C 0C          14006                   INC	C
004E7D C8          14007                   RET	Z		;INTEGER/ZERO
004E7E CB 7C       14008                   BIT	7,H		;SIGN
004E80 F5          14009                   PUSH	AF
004E81 3E 9F       14010                   LD	A,159
004E83 CD 62 4E    14011                   CALL	FIX
004E86 F1          14012                   POP	AF
004E87 0E 00       14013                   LD	C,0
004E89 C8          14014                   RET	Z
004E8A B7          14015   NEGATE:         OR	A		;CLEAR CARRY
004E8B D9          14016                   EXX
004E8C D5          14017   NEG0:           PUSH	DE
004E8D EB          14018                   EX	DE,HL
004E8E 21 00 00    14019                   LD	HL,0
004E91 ED 52       14020                   SBC	HL,DE
004E93 D1          14021                   POP	DE
004E94 D9          14022                   EXX
004E95 D5          14023                   PUSH	DE
004E96 EB          14024                   EX	DE,HL
004E97 21 00 00    14025                   LD	HL,0
004E9A ED 52       14026                   SBC	HL,DE
004E9C D1          14027                   POP	DE
004E9D C9          14028                   RET
004E9E             14029   ;
004E9E             14030   ;NEG - Negate HLH'L'B'C'
004E9E             14031   ;    Also complements A (used in FADD)
004E9E             14032   ;    Destroys: A,H,L,B',C',H',L',F
004E9E             14033   ;
004E9E D9          14034   NEG:            EXX
004E9F 2F          14035                   CPL
004EA0 E5          14036                   PUSH	HL
004EA1 B7          14037                   OR	A		;CLEAR CARRY
004EA2 ED 62       14038                   SBC	HL,HL
004EA4 ED 42       14039                   SBC	HL,BC
004EA6 44          14040                   LD	B,H
004EA7 4D          14041                   LD	C,L
004EA8 E1          14042                   POP	HL
004EA9 18 E1       14043                   JR	NEG0
004EAB             14044   ;
004EAB             14045   ;SCALE - Trig scaling.
004EAB             14046   ;MOD48 - 48-bit floating-point "modulus" (remainder).
004EAB             14047   ;   Inputs: HLH'L'C unsigned floating-point dividend
004EAB             14048   ;           DED'E'B'C'B unsigned 48-bit FP divisor
004EAB             14049   ;  Outputs: HLH'L'C floating point remainder (H7=1)
004EAB             14050   ;           E = quotient (bit 7 is sticky)
004EAB             14051   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004EAB             14052   ;FLO48 - Float unsigned number (48 bits)
004EAB             14053   ;    Input/output in HLH'L'B'C'C
004EAB             14054   ;   Destroys: C,H,L,B',C',H',L',F
004EAB             14055   ;
004EAB 3E 96       14056   SCALE:          LD	A,150
004EAD B9          14057                   CP	C
004EAE 3E 17       14058                   LD	A,ACLOST
004EB0 DA AA 45    14059                   JP	C,ERROR_mat		;"Accuracy lost"
004EB3 CD 92 4A    14060                   CALL	PIBY4
004EB6 D9          14061                   EXX
004EB7 01 69 21    14062                   LD	BC,2169H	;3.141592653589793238
004EBA D9          14063                   EXX
004EBB CB FA       14064   MOD48:          SET	7,D		;IMPLIED 1
004EBD CB FC       14065                   SET	7,H
004EBF 79          14066                   LD	A,C
004EC0 0E 00       14067                   LD	C,0		;INIT QUOTIENT
004EC2 DD 21 00 00 14068                   LD	IX,0
004EC6 DD E5       14069                   PUSH	IX		;PUT ZERO ON STACK
004EC8 B8          14070                   CP	B
004EC9 38 3A       14071                   JR	C,MOD485	;DIVIDEND<DIVISOR
004ECB D9          14072   MOD481:         EXX			;CARRY=0 HERE
004ECC E3          14073                   EX	(SP),HL
004ECD ED 42       14074                   SBC	HL,BC
004ECF E3          14075                   EX	(SP),HL
004ED0 ED 52       14076                   SBC	HL,DE
004ED2 D9          14077                   EXX
004ED3 ED 52       14078                   SBC	HL,DE
004ED5 30 09       14079                   JR	NC,MOD482	;DIVIDEND>=DIVISOR
004ED7 D9          14080                   EXX
004ED8 E3          14081                   EX	(SP),HL
004ED9 09          14082                   ADD	HL,BC
004EDA E3          14083                   EX	(SP),HL
004EDB ED 5A       14084                   ADC	HL,DE
004EDD D9          14085                   EXX
004EDE ED 5A       14086                   ADC	HL,DE
004EE0 3F          14087   MOD482:         CCF
004EE1 CB 11       14088                   RL	C		;QUOTIENT
004EE3 30 02       14089                   JR	NC,MOD483
004EE5 CB F9       14090                   SET	7,C		;STICKY BIT
004EE7 3D          14091   MOD483:         DEC	A
004EE8 B8          14092                   CP	B
004EE9 38 19       14093                   JR	C,MOD484	;DIVIDEND<DIVISOR
004EEB E3          14094                   EX	(SP),HL
004EEC 29          14095                   ADD	HL,HL		;DIVIDEND * 2
004EED E3          14096                   EX	(SP),HL
004EEE D9          14097                   EXX
004EEF ED 6A       14098                   ADC	HL,HL
004EF1 D9          14099                   EXX
004EF2 ED 6A       14100                   ADC	HL,HL
004EF4 30 D5       14101                   JR	NC,MOD481	;AGAIN
004EF6 B7          14102                   OR	A
004EF7 D9          14103                   EXX
004EF8 E3          14104                   EX	(SP),HL
004EF9 ED 42       14105                   SBC	HL,BC		;OVERFLOW, SO SUBTRACT
004EFB E3          14106                   EX	(SP),HL
004EFC ED 52       14107                   SBC	HL,DE
004EFE D9          14108                   EXX
004EFF ED 52       14109                   SBC	HL,DE
004F01 B7          14110                   OR	A
004F02 18 DC       14111                   JR	MOD482
004F04             14112   ;
004F04 3C          14113   MOD484:         INC	A
004F05 59          14114   MOD485:         LD	E,C		;QUOTIENT
004F06 4F          14115                   LD	C,A		;REMAINDER EXPONENT
004F07 D9          14116                   EXX
004F08 C1          14117                   POP	BC
004F09 D9          14118                   EXX
004F0A CB 7C       14119   FLO48:          BIT	7,H
004F0C C0          14120                   RET	NZ
004F0D D9          14121                   EXX
004F0E CB 21       14122                   SLA	C
004F10 CB 10       14123                   RL	B
004F12 ED 6A       14124                   ADC	HL,HL
004F14 D9          14125                   EXX
004F15 ED 6A       14126                   ADC	HL,HL
004F17 0D          14127                   DEC	C
004F18 C2 0A 4F    14128                   JP	NZ,FLO48
004F1B C9          14129                   RET
004F1C             14130   ;
004F1C             14131   ;Float unsigned number
004F1C             14132   ;    Input/output in HLH'L'C
004F1C             14133   ;   Destroys: C,H,L,H',L',F
004F1C             14134   ;
004F1C CB 7C       14135   FLOAT:          BIT	7,H
004F1E C0          14136                   RET	NZ
004F1F D9          14137                   EXX			;SAME AS "X2"
004F20 29          14138                   ADD	HL,HL		;TIME-CRITICAL
004F21 D9          14139                   EXX			;REGION
004F22 ED 6A       14140                   ADC	HL,HL		;(BENCHMARKS)
004F24 0D          14141                   DEC	C
004F25 C2 1C 4F    14142                   JP	NZ,FLOAT
004F28 C9          14143                   RET
004F29             14144   ;
004F29             14145   ;SFLOAT - Convert to floating-point if necessary.
004F29             14146   ;    Input: Variable-type number in HLH'L'C
004F29             14147   ;    Output: Floating-point in HLH'L'C
004F29             14148   ;    Destroys: A,C,H,L,H',L',F
004F29             14149   ;
004F29 08          14150   FLOATA:         EX	AF,AF'
004F2A             14151                   ; ADD	A,(RTABLE-DTABLE)/2
004F2A C6 2E       14152                   ADD	A,RTABLE-DTABLE/2
004F2C 08          14153                   EX	AF,AF'
004F2D CD 60 4F    14154   FLOAT2:         CALL	SWAP
004F30 CD 36 4F    14155                   CALL	SFLOAT
004F33 CD 60 4F    14156                   CALL	SWAP
004F36 0D          14157   SFLOAT:         DEC	C
004F37 0C          14158                   INC	C
004F38 C0          14159                   RET	NZ		;ALREADY FLOATING-POINT
004F39 CD 85 4F    14160                   CALL	TESTmat
004F3C C8          14161                   RET	Z		;ZERO
004F3D 7C          14162                   LD	A,H
004F3E B7          14163                   OR	A
004F3F FC 8A 4E    14164                   CALL	M,NEGATE
004F42 0E 9F       14165                   LD	C,159
004F44 CD 1C 4F    14166                   CALL	FLOAT
004F47 B7          14167                   OR	A
004F48 F8          14168                   RET	M		;NEGATIVE
004F49 CB BC       14169                   RES	7,H
004F4B C9          14170                   RET
004F4C             14171   ;
004F4C             14172   ;ROUND UP
004F4C             14173   ;Return with carry set if 32-bit overflow
004F4C             14174   ;   Destroys: H,L,B',C',H',L',F
004F4C             14175   ;
004F4C D9          14176   ADD1:           EXX
004F4D 01 01 00    14177                   LD	BC,1
004F50 09          14178                   ADD	HL,BC
004F51 D9          14179                   EXX
004F52 D0          14180                   RET	NC
004F53 C5          14181                   PUSH	BC
004F54 01 01 00    14182                   LD	BC,1
004F57 09          14183                   ADD	HL,BC
004F58 C1          14184                   POP	BC
004F59 C9          14185                   RET
004F5A             14186   ;
004F5A             14187   ;ODD - Add one if even, leave alone if odd.
004F5A             14188   ; (Used to perform unbiassed rounding, i.e.
004F5A             14189   ;  number is rounded up half the time)
004F5A             14190   ;    Destroys: L',F (carry cleared)
004F5A             14191   ;
004F5A B7          14192   ODD:            OR	A		;CLEAR CARRY
004F5B D9          14193                   EXX
004F5C CB C5       14194                   SET	0,L		;MAKE ODD
004F5E D9          14195                   EXX
004F5F C9          14196                   RET
004F60             14197   ;
004F60             14198   ;SWAP - Swap arguments.
004F60             14199   ;    Exchanges DE,HL D'E',H'L' and B,C
004F60             14200   ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
004F60             14201   ;SWAP1 - Swap DEHL with D'E'H'L'
004F60             14202   ;    Destroys: D,E,H,L,D',E',H',L'
004F60             14203   ;
004F60 79          14204   SWAP:           LD	A,C
004F61 48          14205                   LD	C,B
004F62 47          14206                   LD	B,A
004F63 EB          14207   SWAP1:          EX	DE,HL
004F64 D9          14208                   EXX
004F65 EB          14209                   EX	DE,HL
004F66 D9          14210                   EXX
004F67 C9          14211                   RET
004F68             14212   ;
004F68             14213   ;DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
004F68             14214   ;INCC - destroys C,F
004F68             14215   ;OFLOW
004F68             14216   ;
004F68 CD 06 50    14217   DIV2:           CALL	D2
004F6B D9          14218                   EXX
004F6C CB 18       14219                   RR	B
004F6E CB 19       14220                   RR	C
004F70 08          14221                   EX	AF,AF'
004F71 B0          14222                   OR	B
004F72 08          14223                   EX	AF,AF'
004F73 D9          14224                   EXX
004F74 0C          14225   INCC:           INC	C
004F75 C0          14226                   RET	NZ
004F76 3E 14       14227   OFLOW:          LD	A,TOOBIG
004F78 C3 AA 45    14228                   JP	ERROR_mat		;"Too big"
004F7B             14229   ;
004F7B             14230   ;FTEST - Test for zero & sign
004F7B             14231   ;    Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
004F7B             14232   ;
004F7B CD 85 4F    14233   FTEST:          CALL	TESTmat
004F7E C8          14234                   RET	Z
004F7F 7C          14235                   LD	A,H
004F80 E6 80       14236                   AND	10000000B
004F82 F6 40       14237                   OR	01000000B
004F84 C9          14238                   RET
004F85             14239   ;
004F85             14240   ;TEST - Test HLH'L' for zero.
004F85             14241   ;    Output: Z-flag set & A=0 if HLH'L'=0
004F85             14242   ;    Destroys: A,F
004F85             14243   ;
004F85 7C          14244   TESTmat:           LD	A,H
004F86 B5          14245                   OR	L
004F87 D9          14246                   EXX
004F88 B4          14247                   OR	H
004F89 B5          14248                   OR	L
004F8A D9          14249                   EXX
004F8B C9          14250                   RET
004F8C             14251   ;
004F8C             14252   ;FCOMP - Compare two numbers
004F8C             14253   ;    Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
004F8C             14254   ;
004F8C 78          14255   FCOMP:          LD	A,B
004F8D B1          14256                   OR	C		;Both integer?
004F8E 20 0A       14257                   JR	NZ,FCOMP1
004F90 CD A2 4F    14258                   CALL	ICP
004F93 3E 00       14259   FCOMP0:         LD	A,0
004F95 C8          14260                   RET	Z		;Equal
004F96 3E 80       14261                   LD	A,80H
004F98 1F          14262                   RRA
004F99 C9          14263                   RET
004F9A             14264   ;
004F9A CD 2D 4F    14265   FCOMP1:         CALL	FLOAT2		;Float both
004F9D CD AF 4F    14266                   CALL	FCP
004FA0 18 F1       14267                   JR	FCOMP0
004FA2             14268   ;
004FA2             14269   ;Integer and floating point compare.
004FA2             14270   ;Sets carry & zero flags according to HLH'L'C-DED'E'B
004FA2             14271   ;Result pre-set to FALSE
004FA2             14272   ;ICP1, FCP1 destroy A,F
004FA2             14273   ;
004FA2             14274   ;ZERO - Return zero.
004FA2             14275   ; Destroys: A,C,H,L,H',L'
004FA2             14276   ;
004FA2 CD CE 4F    14277   ICP:            CALL	ICP1
004FA5 3E 00       14278   ZEROmat:           LD	A,0
004FA7 D9          14279                   EXX
004FA8 67          14280                   LD	H,A
004FA9 6F          14281                   LD	L,A
004FAA D9          14282                   EXX
004FAB 67          14283                   LD	H,A
004FAC 6F          14284                   LD	L,A
004FAD 4F          14285                   LD	C,A
004FAE C9          14286                   RET
004FAF             14287   ;
004FAF CD C1 4F    14288   FCP:            CALL	FCP1
004FB2 18 F1       14289                   JR	ZEROmat		;PRESET FALSE
004FB4             14290   ;
004FB4 79          14291   FCP0:           LD	A,C
004FB5 B8          14292                   CP	B		;COMPARE EXPONENTS
004FB6 C0          14293                   RET	NZ
004FB7 ED 52       14294   ICP0:           SBC	HL,DE		;COMP MANTISSA MSB
004FB9 19          14295                   ADD	HL,DE
004FBA C0          14296                   RET	NZ
004FBB D9          14297                   EXX
004FBC ED 52       14298                   SBC	HL,DE		;COMP MANTISSA LSB
004FBE 19          14299                   ADD	HL,DE
004FBF D9          14300                   EXX
004FC0 C9          14301                   RET
004FC1             14302   ;
004FC1 7C          14303   FCP1:           LD	A,H
004FC2 AA          14304                   XOR	D
004FC3 7C          14305                   LD	A,H
004FC4 17          14306                   RLA
004FC5 F8          14307                   RET	M
004FC6 30 EC       14308                   JR	NC,FCP0
004FC8 CD B4 4F    14309                   CALL	FCP0
004FCB C8          14310                   RET	Z		;** V0.1 BUG FIX
004FCC 3F          14311                   CCF
004FCD C9          14312                   RET
004FCE             14313   ;
004FCE 7C          14314   ICP1:           LD	A,H
004FCF AA          14315                   XOR	D
004FD0 F2 B7 4F    14316                   JP	P,ICP0
004FD3 7C          14317                   LD	A,H
004FD4 17          14318                   RLA
004FD5 C9          14319                   RET
004FD6             14320   ;
004FD6             14321   ;ADD - Integer add.
004FD6             14322   ;Carry, sign & zero flags valid on exit
004FD6             14323   ;    Destroys: H,L,H',L',F
004FD6             14324   ;
004FD6 05          14325   X10B:           DEC	B
004FD7 0C          14326                   INC	C
004FD8 CD 12 50    14327   X5:             CALL	COPY0
004FDB CD 05 50    14328                   CALL	D2C
004FDE CD 05 50    14329                   CALL	D2C
004FE1 08          14330                   EX	AF,AF'		;SAVE CARRY
004FE2 D9          14331   ADD:            EXX
004FE3 19          14332                   ADD	HL,DE
004FE4 D9          14333                   EXX
004FE5 ED 5A       14334                   ADC	HL,DE
004FE7 C9          14335                   RET
004FE8             14336   ;
004FE8             14337   ;SUB - Integer subtract.
004FE8             14338   ;Carry, sign & zero flags valid on exit
004FE8             14339   ;    Destroys: H,L,H',L',F
004FE8             14340   ;
004FE8 D9          14341   SUB:            EXX
004FE9 B7          14342                   OR	A
004FEA ED 52       14343                   SBC	HL,DE
004FEC D9          14344                   EXX
004FED ED 52       14345                   SBC	HL,DE
004FEF C9          14346                   RET
004FF0             14347   ;
004FF0             14348   ;X10 - unsigned integer * 10
004FF0             14349   ;   Inputs: HLH'L' initial value
004FF0             14350   ;  Outputs: DED'E' = initial HLH'L'
004FF0             14351   ;           Carry bit set if overflow
004FF0             14352   ;           If carry not set HLH'L'=result
004FF0             14353   ; Destroys: D,E,H,L,D',E',H',L',F
004FF0             14354   ;X2 - Multiply HLH'L' by 2 as 32-bit integer.
004FF0             14355   ;    Carry set if MSB=1 before shift.
004FF0             14356   ;    Sign set if MSB=1 after shift.
004FF0             14357   ;    Destroys: H,L,H',L',F
004FF0             14358   ;
004FF0 CD 12 50    14359   X10:            CALL	COPY0		;DED'E'=HLH'L'
004FF3 CD FF 4F    14360                   CALL	X2
004FF6 D8          14361                   RET	C		;TOO BIG
004FF7 CD FF 4F    14362                   CALL	X2
004FFA D8          14363                   RET	C
004FFB CD E2 4F    14364                   CALL	ADD
004FFE D8          14365                   RET	C
004FFF D9          14366   X2:             EXX
005000 29          14367                   ADD	HL,HL
005001 D9          14368                   EXX
005002 ED 6A       14369                   ADC	HL,HL
005004 C9          14370                   RET
005005             14371   ;
005005             14372   ;D2 - Divide HLH'L' by 2 as 32-bit integer.
005005             14373   ;    Carry set if LSB=1 before shift.
005005             14374   ;    Destroys: H,L,H',L',F
005005             14375   ;
005005 0C          14376   D2C:            INC	C
005006 CB 3C       14377   D2:             SRL	H
005008 CB 1D       14378                   RR	L
00500A D9          14379                   EXX
00500B CB 1C       14380                   RR	H
00500D CB 1D       14381                   RR	L
00500F D9          14382                   EXX
005010 C9          14383                   RET
005011             14384   ;
005011             14385   ;COPY - COPY HLH'L'C INTO DED'E'B
005011             14386   ;  Destroys: B,C,D,E,H,L,D',E',H',L'
005011             14387   ;
005011 41          14388   COPY:           LD	B,C
005012 54          14389   COPY0:          LD	D,H
005013 5D          14390                   LD	E,L
005014 D9          14391                   EXX
005015 54          14392                   LD	D,H
005016 5D          14393                   LD	E,L
005017 D9          14394                   EXX
005018 C9          14395                   RET
005019             14396   ;
005019             14397   ;SQUARE - PUSH X*X
005019             14398   ;PUSH5 - PUSH HLH'L'C ONTO STACK.
005019             14399   ;  Destroys: SP,IX
005019             14400   ;
005019 CD 11 50    14401   SQUARE:         CALL	COPY
00501C CD 91 47    14402                   CALL	FMUL
00501F DD E1       14403   PUSH5:          POP	IX		;RETURN ADDRESS
005021 C5          14404                   PUSH	BC
005022 E5          14405                   PUSH	HL
005023 D9          14406                   EXX
005024 E5          14407                   PUSH	HL
005025 D9          14408                   EXX
005026 DD E9       14409                   JP	(IX)		;"RETURN"
005028             14410   ;
005028             14411   ;POP5 - POP DED'E'B OFF STACK.
005028             14412   ;  Destroys: A,B,D,E,D',E',SP,IX
005028             14413   ;
005028 DD E1       14414   POP5:           POP	IX		;RETURN ADDRESS
00502A D9          14415                   EXX
00502B D1          14416                   POP	DE
00502C D9          14417                   EXX
00502D D1          14418                   POP	DE
00502E 79          14419                   LD	A,C
00502F C1          14420                   POP	BC
005030 41          14421                   LD	B,C
005031 4F          14422                   LD	C,A
005032 DD E9       14423                   JP	(IX)		;"RETURN"
005034             14424   ;
005034             14425   ;RATIO - Calculate (X-1)/(X+1)
005034             14426   ;    Inputs: X in HLH'L'C
005034             14427   ;   Outputs: (X-1)/(X+1) in HLH'L'C
005034             14428   ;  Destroys: Everything except IY,SP,I
005034             14429   ;
005034 CD 1F 50    14430   RATIO:          CALL	PUSH5		;SAVE X
005037 CD 87 4A    14431                   CALL	DONE
00503A CD C9 46    14432                   CALL	FADD
00503D CD 28 50    14433                   CALL	POP5		;RESTORE X
005040 CD 1F 50    14434                   CALL	PUSH5		;SAVE X+1
005043 CD 60 4F    14435                   CALL	SWAP
005046 CD 87 4A    14436                   CALL	DONE
005049 CD B3 46    14437                   CALL	FSUB
00504C CD 28 50    14438                   CALL	POP5		;RESTORE X+1
00504F C3 21 47    14439                   JP	FDIV
005052             14440   ;
005052             14441   ;POLY - Evaluate a polynomial.
005052             14442   ;    Inputs: X in HLH'L'C and also stored at (SP+2)
005052             14443   ;            Polynomial coefficients follow call.
005052             14444   ;   Outputs: Result in HLH'L'C
005052             14445   ;  Destroys: Everything except IY,SP,I
005052             14446   ;Routine terminates on finding a coefficient >=1.
005052             14447   ;Note: The last coefficient is EXECUTED on return
005052             14448   ;      so must contain only innocuous bytes!
005052             14449   ;
005052 DD 21 02 00 14450   POLY:           LD	IX,2
005056 DD 39       14451                   ADD	IX,SP
005058 DD E3       14452                   EX	(SP),IX
00505A CD 75 1A    14453                   CALL	DLOAD5		;FIRST COEFFICIENT
00505D CD 91 47    14454   POLY1:          CALL	FMUL
005060 11 05 00    14455                   LD	DE,5
005063 DD 19       14456                   ADD	IX,DE
005065 CD 75 1A    14457                   CALL	DLOAD5		;NEXT COEFFICIENT
005068 DD E3       14458                   EX	(SP),IX
00506A 04          14459                   INC	B
00506B 05          14460                   DEC	B		;TEST
00506C FA C9 46    14461                   JP	M,FADD
00506F CD C9 46    14462                   CALL	FADD
005072 CD 75 1A    14463                   CALL	DLOAD5		;X
005075 DD E3       14464                   EX	(SP),IX
005077 18 E4       14465                   JR	POLY1
005079             14466   ;
005079             14467   ;POWR10 - Calculate power of ten.
005079             14468   ;    Inputs: A=power of 10 required (A<128)
005079             14469   ;            A=binary exponent to be exceeded (A>=128)
005079             14470   ;   Outputs: DED'E'B = result
005079             14471   ;            A = actual power of ten returned
005079             14472   ;  Destroys: A,B,D,E,A',D',E',F,F'
005079             14473   ;
005079 3C          14474   POWR10:         INC	A
00507A 08          14475                   EX	AF,AF'
00507B E5          14476                   PUSH	HL
00507C D9          14477                   EXX
00507D E5          14478                   PUSH	HL
00507E D9          14479                   EXX
00507F CD 87 4A    14480                   CALL	DONE
005082 CD 60 4F    14481                   CALL	SWAP
005085 AF          14482                   XOR	A
005086 08          14483   POWR11:         EX	AF,AF'
005087 3D          14484                   DEC	A
005088 28 20       14485                   JR	Z,POWR14	;EXITmat TYPE 1
00508A F2 91 50    14486                   JP	P,POWR13
00508D B9          14487                   CP	C
00508E 38 1A       14488                   JR	C,POWR14	;EXITmat TYPE 2
005090 3C          14489                   INC	A
005091 08          14490   POWR13:         EX	AF,AF'
005092 3C          14491                   INC	A
005093 CB FC       14492                   SET	7,H
005095 CD D8 4F    14493                   CALL	X5
005098 30 05       14494                   JR	NC,POWR12
00509A 08          14495                   EX	AF,AF'
00509B CD 05 50    14496                   CALL	D2C
00509E 08          14497                   EX	AF,AF'
00509F 08          14498   POWR12:         EX	AF,AF'
0050A0 DC 4C 4F    14499                   CALL	C,ADD1		;ROUND UP
0050A3 0C          14500                   INC	C
0050A4 FA 86 50    14501                   JP	M,POWR11
0050A7 C3 76 4F    14502                   JP	OFLOW
0050AA CD 60 4F    14503   POWR14:         CALL	SWAP
0050AD CB BA       14504                   RES	7,D
0050AF D9          14505                   EXX
0050B0 E1          14506                   POP	HL
0050B1 D9          14507                   EXX
0050B2 E1          14508                   POP	HL
0050B3 08          14509                   EX	AF,AF'
0050B4 C9          14510                   RET
0050B5             14511   ;
0050B5             14512   ;DIVA, DIVB - DIVISION PRIMITIVE.
0050B5             14513   ;    Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
0050B5             14514   ;              Remainder in H'L'HL
0050B5             14515   ;    Inputs: A = loop counter (normally -32)
0050B5             14516   ;    Destroys: A,D,E,H,L,D',E',H',L',F
0050B5             14517   ;
0050B5 B7          14518   DIVA:           OR	A		;CLEAR CARRY
0050B6 ED 42       14519   DIV0:           SBC	HL,BC		;DIVIDEND-DIVISOR
0050B8 D9          14520                   EXX
0050B9 ED 42       14521                   SBC	HL,BC
0050BB D9          14522                   EXX
0050BC 30 05       14523                   JR	NC,DIV1
0050BE 09          14524                   ADD	HL,BC		;DIVIDEND+DIVISOR
0050BF D9          14525                   EXX
0050C0 ED 4A       14526                   ADC	HL,BC
0050C2 D9          14527                   EXX
0050C3 3F          14528   DIV1:           CCF
0050C4 CB 13       14529   DIVC:           RL	E		;SHIFT RESULT INTO DE
0050C6 CB 12       14530                   RL	D
0050C8 D9          14531                   EXX
0050C9 CB 13       14532                   RL	E
0050CB CB 12       14533                   RL	D
0050CD D9          14534                   EXX
0050CE 3C          14535                   INC	A
0050CF F0          14536                   RET	P
0050D0 ED 6A       14537   DIVB:           ADC	HL,HL		;DIVIDEND*2
0050D2 D9          14538                   EXX
0050D3 ED 6A       14539                   ADC	HL,HL
0050D5 D9          14540                   EXX
0050D6 30 DE       14541                   JR	NC,DIV0
0050D8 B7          14542                   OR	A
0050D9 ED 42       14543                   SBC	HL,BC		;DIVIDEND-DIVISOR
0050DB D9          14544                   EXX
0050DC ED 42       14545                   SBC	HL,BC
0050DE D9          14546                   EXX
0050DF 37          14547                   SCF
0050E0 C3 C4 50    14548                   JP	DIVC
0050E3             14549   ;
0050E3             14550   ;MULA, MULB - MULTIPLICATION PRIMITIVE.
0050E3             14551   ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
0050E3             14552   ;    Inputs: A = loop counter (usually -32)
0050E3             14553   ;            H'L'HL = 0
0050E3             14554   ;    Destroys: D,E,H,L,D',E',H',L',A,F
0050E3             14555   ;
0050E3 B7          14556   MULA:           OR	A		;CLEAR CARRY
0050E4 D9          14557   MUL0:           EXX
0050E5 CB 1A       14558                   RR	D		;MULTIPLIER/2
0050E7 CB 1B       14559                   RR	E
0050E9 D9          14560                   EXX
0050EA CB 1A       14561                   RR	D
0050EC CB 1B       14562                   RR	E
0050EE 30 05       14563                   JR	NC,MUL1
0050F0 09          14564                   ADD	HL,BC		;ADD IN MULTIPLICAND
0050F1 D9          14565                   EXX
0050F2 ED 4A       14566                   ADC	HL,BC
0050F4 D9          14567                   EXX
0050F5 3C          14568   MUL1:           INC	A
0050F6 F0          14569                   RET	P
0050F7 D9          14570   MULB:           EXX
0050F8 CB 1C       14571                   RR	H		;PRODUCT/2
0050FA CB 1D       14572                   RR	L
0050FC D9          14573                   EXX
0050FD CB 1C       14574                   RR	H
0050FF CB 1D       14575                   RR	L
005101 C3 E4 50    14576                   JP	MUL0
005104             14577   ;
005104             14578   ;SQRA, SQRB - SQUARE ROOT PRIMITIVES
005104             14579   ;    Function: B'C'BC = SQR (D'E'DE)
005104             14580   ;    Inputs: A = loop counter (normally -31)
005104             14581   ;            B'C'BCH'L'HL initialised to 0
005104             14582   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
005104             14583   ;
005104 ED 42       14584   SQR1:           SBC	HL,BC
005106 D9          14585                   EXX
005107 ED 42       14586                   SBC	HL,BC
005109 D9          14587                   EXX
00510A 0C          14588                   INC	C
00510B 30 07       14589                   JR	NC,SQR2
00510D 0D          14590                   DEC	C
00510E 09          14591                   ADD	HL,BC
00510F D9          14592                   EXX
005110 ED 4A       14593                   ADC	HL,BC
005112 D9          14594                   EXX
005113 0D          14595                   DEC	C
005114 3C          14596   SQR2:           INC	A
005115 F0          14597                   RET	P
005116 CB 21       14598   SQRA:           SLA	C
005118 CB 10       14599                   RL	B
00511A 0C          14600                   INC	C
00511B D9          14601                   EXX
00511C CB 11       14602                   RL	C
00511E CB 10       14603                   RL	B
005120 CD 4C 51    14604                   CALL	SLA8
005123 CD 4C 51    14605                   CALL	SLA8
005126 D9          14606                   EXX
005127 D2 04 51    14607                   JP	NC,SQR1
00512A B7          14608   SQR3:           OR	A
00512B ED 42       14609                   SBC	HL,BC
00512D D9          14610                   EXX
00512E ED 42       14611                   SBC	HL,BC
005130 D9          14612                   EXX
005131 0C          14613                   INC	C
005132 C3 14 51    14614                   JP	SQR2
005135             14615   ;
005135 29          14616   SQRB:           ADD	HL,HL
005136 D9          14617                   EXX
005137 ED 6A       14618                   ADC	HL,HL
005139 D9          14619                   EXX
00513A 38 EE       14620                   JR	C,SQR3
00513C 3C          14621                   INC	A
00513D 0C          14622                   INC	C
00513E ED 42       14623                   SBC	HL,BC
005140 D9          14624                   EXX
005141 ED 42       14625                   SBC	HL,BC
005143 D9          14626                   EXX
005144 D0          14627                   RET	NC
005145 09          14628                   ADD	HL,BC
005146 D9          14629                   EXX
005147 ED 4A       14630                   ADC	HL,BC
005149 D9          14631                   EXX
00514A 0D          14632                   DEC	C
00514B C9          14633                   RET
00514C             14634   ;
00514C D9          14635   SLA8:           EXX
00514D CB 23       14636                   SLA	E
00514F CB 12       14637                   RL	D
005151 D9          14638                   EXX
005152 CB 13       14639                   RL	E
005154 CB 12       14640                   RL	D
005156 D9          14641                   EXX
005157 ED 6A       14642                   ADC	HL,HL
005159 D9          14643                   EXX
00515A ED 6A       14644                   ADC	HL,HL
00515C C9          14645                   RET
00515D             14646   ;
00515D DD 7E 00    14647   DIGITQ:         LD	A,(IX)
005160 FE 3A       14648                   CP	'9'+1
005162 3F          14649                   CCF
005163 D8          14650                   RET	C
005164 FE 30       14651                   CP	'0'
005166 C9          14652                   RET
005167             14653   ;
005167 DD 7E 00    14654   SIGNQ:          LD	A,(IX)
00516A DD 23       14655                   INC	IX
00516C FE 20       14656                   CP	' '
00516E 28 F7       14657                   JR	Z,SIGNQ
005170 FE 2B       14658                   CP	'+'
005172 C8          14659                   RET	Z
005173 FE 2D       14660                   CP	'-'
005175 C8          14661                   RET	Z
005176 DD 2B       14662                   DEC	IX
005178 C9          14663                   RET
005179             14664   ;
005179 08          14665   ABS2:           EX	AF,AF'
00517A CB 7C       14666                   BIT	7,H
00517C C4 8A 4E    14667                   CALL	NZ,NEGATE	;MAKE ARGUMENTS +VE
00517F CD 60 4F    14668                   CALL	SWAP
005182 CB 7C       14669                   BIT	7,H
005184 C4 8A 4E    14670                   CALL	NZ,NEGATE
005187 44          14671                   LD	B,H
005188 4D          14672                   LD	C,L
005189 21 00 00    14673                   LD	HL,0
00518C D9          14674                   EXX
00518D 44          14675                   LD	B,H
00518E 4D          14676                   LD	C,L
00518F 21 00 00    14677                   LD	HL,0
005192 C9          14678                   RET
005193             14679   ;
005193             14680   ;                END
005193             14681   ; --- End math.asm ---
005193             14682   
005193             14683   ; --- Begin data.asm ---
005193             14684   ;
005193             14685   ;Automatically created from original source on 2024-12-15 15:29:12
005193             14686   ;
005193             14687                   .ASSUME ADL = 0
005193             14688   ;	.ORG 0x0000
005193             14689               ;    DEFINE LORAM, SPACE = ROM
005193             14690               ;    SEGMENT LORAM
005193             14691   ;
005193             14692   ;                XDEF	FLAGS
005193             14693   ;                XDEF	OSWRCHPT
005193             14694   ;                XDEF	OSWRCHCH
005193             14695   ;                XDEF	OSWRCHFH
005193             14696   ;                XDEF	KEYDOWN
005193             14697   ;                XDEF	KEYASCII
005193             14698   ;                XDEF	KEYCOUNT
005193             14699   ;                XDEF	SCRAP
005193             14700   ;                XDEF	BUFFER
005193             14701   ;                XDEF	LISTON
005193             14702   ;                XDEF	PAGE_
005193             14703   ;
005193             14704   end_binary: ;  for 05_assemble.py to know where to truncate the binary file
005193 FF FF FF FF 14705                   ALIGN 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
005200             14706   FLAGS:          DS	1
005201             14707   OSWRCHPT:       DS	2
005203             14708   OSWRCHCH:       DS	1
005204             14709   OSWRCHFH:       DS	1
005205             14710   KEYDOWN:        DS	1
005206             14711   KEYASCII:       DS	1
005207             14712   KEYCOUNT:       DS	1
005208             14713   SCRAP:          DS	31
005227             14714   ;
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 
005227 FF FF FF FF 14715                   ALIGN 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
005300             14716   ;
005300             14717   ;RAM MODULE FOR BBC BASIC INTERPRETER
005300             14718   ;FOR USE WITH VERSION 5.0 OF BBC BASIC
005300             14719   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
005300             14720   ;
005300             14721   ;                XDEF	ACCS
005300             14722   ;                XDEF	BUFFER
005300             14723   ;                XDEF	ONERSP
005300             14724   ;                XDEF	LIBASE
005300             14725   ;                XDEF	PAGE_
005300             14726   ;                XDEF	LOMEM
005300             14727   ;                XDEF	FREE
005300             14728   ;                XDEF	HIMEM
005300             14729   ;                XDEF	RANDOM
005300             14730   ;                XDEF	COUNT
005300             14731   ;                XDEF	WIDTH
005300             14732   ;                XDEF	ERL
005300             14733   ;                XDEF	ERR
005300             14734   ;                XDEF	ERRTRP
005300             14735   ;                XDEF	ERRTXT
005300             14736   ;                XDEF	TRACEN
005300             14737   ;                XDEF	AUTONO
005300             14738   ;                XDEF	INCREM
005300             14739   ;                XDEF	LISTON
005300             14740   ;                XDEF	DATPTR
005300             14741   ;                XDEF	FNPTR
005300             14742   ;                XDEF	PROPTR
005300             14743   ;                XDEF	STAVAR
005300             14744   ;                XDEF	OC
005300             14745   ;                XDEF	PC
005300             14746   ;                XDEF	DYNVAR
005300             14747   ;                XDEF	CURLIN
005300             14748   ;                XDEF	USER
005300             14749   ;
005300             14750   ;n.b. ACCS, BUFFER & STAVAR must be on page boundaries.
005300             14751   ;
005300             14752   ACCS:           DS	256		;STRING ACCUMULATOR
005400             14753   BUFFER:         DS	256		;STRING INPUT BUFFER
005500             14754   
005500             14755   STAVAR:         DS	27*4		;STATIC VARIABLES
00556C             14756   ; OC:             EQU	STAVAR+15*4	;CODE ORIGIN (O%)	; restored from equs.inc
00556C             14757   ; PC:             EQU	STAVAR+16*4	;PROGRAM COUNTER (P%)	; restored from equs.inc
00556C             14758   OC:             EQU	15*4+STAVAR	;CODE ORIGIN (O%)	; restored from equs.inc
00556C             14759   PC:             EQU	16*4+STAVAR	;PROGRAM COUNTER (P%)	; restored from equs.inc
00556C             14760   DYNVAR:         DS	54*2		;DYN. VARIABLE POINTERS
0055D8             14761   FNPTR:          DS	2		;DYN. FUNCTION POINTER
0055DA             14762   PROPTR:         DS	2		;DYN. PROCEDURE POINTER
0055DC             14763   ;
0055DC             14764   PAGE_:          DS	2		;START OF USER PROGRAM
0055DE             14765   LOMEM:          DS	2		;START OF DYN. STORAGE
0055E0             14766   FREE:           DS	2		;FIRST FREE-SPACE BYTE
0055E2             14767   HIMEM:          DS	2		;FIRST BYTE ABOVE STACK
0055E4             14768   LIBASE:         DS	2		;START OF FIRST LIBRARY
0055E6             14769   ;
0055E6             14770   TRACEN:         DS	2		;TRACE FLAG & NUMBER
0055E8             14771   AUTONO:         DS	2		;AUTO FLAG & NUMBER
0055EA             14772   ERRTRP:         DS	2		;ON ERROR STMT POINTER \
0055EC             14773   ONERSP:         DS	2		;ON ERROR LOCAL STKPTR /
0055EE             14774   ERRTXT:         DS	2		;ERROR MESSAGE POINTER
0055F0             14775   DATPTR:         DS	2		;DATA POINTER
0055F2             14776   ERL:            DS	2		;LINE NO OF LAST ERROR
0055F4             14777   CURLIN:         DS	2		;POINTER TO CURRENT LINE
0055F6             14778   RANDOM:         DS	5		;RANDOM NUMBER
0055FB             14779   COUNT:          DS	1		;PRINT POSITION
0055FC             14780   WIDTH:          DS	1		;PRINT WIDTH
0055FD             14781   ERR:            DS	1		;ERROR NUMBER
0055FE             14782   LISTON:         DS	1		;LISTO & OPT FLAG
0055FF             14783   INCREM:         DS	1		;AUTO INCREMENT
005600             14784   VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; originally in equs.inc
005600             14785   ;
005600             14786   USER:           ; END
005600             14787   ; --- End data.asm ---
005600             14788   
