PC     Output      Line
040000             0001   ; --- Begin mos_api.inc ---
040000             0002   ;
040000             0003   ; Title:	AGON MOS - API for user projects
040000             0004   ; Author:	Dean Belfield
040000             0005   ; Created:	03/08/2022
040000             0006   ; Last Updated:	11/11/2023
040000             0007   ;
040000             0008   ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
040000             0009   ;
040000             0010   ; Modinfo:
040000             0011   ; 05/08/2022:	Added mos_feof
040000             0012   ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0013   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0014   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0015   ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0016   ; 13/10/2022:	Added mos_oscli
040000             0017   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0018   ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0019   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0020   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0021   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0022   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0023   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0024   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0025   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0026   ; 19/05/2023:	Added sysvar_scrMode
040000             0027   ; 05/06/2023:	Added sysvar_rtcEnable
040000             0028   ; 03/08/2023:	Added mos_setkbvector
040000             0029   ; 10/08/2023:	Added mos_getkbmap
040000             0030   ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0031   ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
040000             0032   ;
040000             0033   ; VDP control (VDU 23, 0, n)
040000             0034   ;
040000             0035   vdp_gp:			EQU 	80h
040000             0036   vdp_keycode:		EQU 	81h
040000             0037   vdp_cursor:		EQU	82h
040000             0038   vdp_scrchar:		EQU	83h
040000             0039   vdp_scrpixel:		EQU	84h
040000             0040   vdp_audio:		EQU	85h
040000             0041   vdp_mode:		EQU	86h
040000             0042   vdp_rtc:		EQU	87h
040000             0043   vdp_keystate:		EQU	88h
040000             0044   vdp_logicalcoords:	EQU	C0h
040000             0045   vdp_terminalmode:	EQU	FFh
040000             0046   
040000             0047   ; MOS high level functions
040000             0048   ;
040000             0049   mos_getkey:		EQU	00h
040000             0050   mos_load:		EQU	01h
040000             0051   mos_save:		EQU	02h
040000             0052   mos_cd:			EQU	03h
040000             0053   mos_dir:		EQU	04h
040000             0054   mos_del:		EQU	05h
040000             0055   mos_ren:		EQU	06h
040000             0056   mos_mkdir:		EQU	07h
040000             0057   mos_sysvars:		EQU	08h
040000             0058   mos_editline:		EQU	09h
040000             0059   mos_fopen:		EQU	0Ah
040000             0060   mos_fclose:		EQU	0Bh
040000             0061   mos_fgetc:		EQU	0Ch
040000             0062   mos_fputc:		EQU	0Dh
040000             0063   mos_feof:		EQU	0Eh
040000             0064   mos_getError:		EQU	0Fh
040000             0065   mos_oscli:		EQU	10h
040000             0066   mos_copy:		EQU	11h
040000             0067   mos_getrtc:		EQU	12h
040000             0068   mos_setrtc:		EQU	13h
040000             0069   mos_setintvector:	EQU	14h
040000             0070   mos_uopen:		EQU	15h
040000             0071   mos_uclose:		EQU	16h
040000             0072   mos_ugetc:		EQU	17h
040000             0073   mos_uputc:		EQU 	18h
040000             0074   mos_getfil:		EQU	19h
040000             0075   mos_fread:		EQU	1Ah
040000             0076   mos_fwrite:		EQU	1Bh
040000             0077   mos_flseek:		EQU	1Ch
040000             0078   mos_setkbvector:	EQU	1Dh
040000             0079   mos_getkbmap:		EQU	1Eh
040000             0080   mos_i2c_open:		EQU	1Fh
040000             0081   mos_i2c_close:		EQU	20h
040000             0082   mos_i2c_write:		EQU	21h
040000             0083   mos_i2c_read:		EQU	22h
040000             0084   
040000             0085   
040000             0086   ; FatFS file access functions
040000             0087   ;
040000             0088   ffs_fopen:		EQU	80h
040000             0089   ffs_fclose:		EQU	81h
040000             0090   ffs_fread:		EQU	82h
040000             0091   ffs_fwrite:		EQU	83h
040000             0092   ffs_flseek:		EQU	84h
040000             0093   ffs_ftruncate:		EQU	85h
040000             0094   ffs_fsync:		EQU	86h
040000             0095   ffs_fforward:		EQU	87h
040000             0096   ffs_fexpand:		EQU	88h
040000             0097   ffs_fgets:		EQU	89h
040000             0098   ffs_fputc:		EQU	8Ah
040000             0099   ffs_fputs:		EQU	8Bh
040000             0100   ffs_fprintf:		EQU	8Ch
040000             0101   ffs_ftell:		EQU	8Dh
040000             0102   ffs_feof:		EQU	8Eh
040000             0103   ffs_fsize:		EQU	8Fh
040000             0104   ffs_ferror:		EQU	90h
040000             0105   
040000             0106   ; FatFS directory access functions
040000             0107   ;
040000             0108   ffs_dopen:		EQU	91h
040000             0109   ffs_dclose:		EQU	92h
040000             0110   ffs_dread:		EQU	93h
040000             0111   ffs_dfindfirst:		EQU	94h
040000             0112   ffs_dfindnext:		EQU	95h
040000             0113   
040000             0114   ; FatFS file and directory management functions
040000             0115   ;
040000             0116   ffs_stat:		EQU	96h
040000             0117   ffs_unlink:		EQU	97h
040000             0118   ffs_rename:		EQU	98h
040000             0119   ffs_chmod:		EQU	99h
040000             0120   ffs_utime:		EQU	9Ah
040000             0121   ffs_mkdir:		EQU	9Bh
040000             0122   ffs_chdir:		EQU	9Ch
040000             0123   ffs_chdrive:		EQU	9Dh
040000             0124   ffs_getcwd:		EQU	9Eh
040000             0125   
040000             0126   ; FatFS volume management and system configuration functions
040000             0127   ;
040000             0128   ffs_mount:		EQU	9Fh
040000             0129   ffs_mkfs:		EQU	A0h
040000             0130   ffs_fdisk:		EQU	A1h
040000             0131   ffs_getfree:		EQU	A2h
040000             0132   ffs_getlabel:		EQU	A3h
040000             0133   ffs_setlabel:		EQU	A4h
040000             0134   ffs_setcp:		EQU	A5h
040000             0135   
040000             0136   ; File access modes
040000             0137   ;
040000             0138   fa_read:		EQU	01h
040000             0139   fa_write:		EQU	02h
040000             0140   fa_open_existing:	EQU	00h
040000             0141   fa_create_new:		EQU	04h
040000             0142   fa_create_always:	EQU	08h
040000             0143   fa_open_always:		EQU	10h
040000             0144   fa_open_append:		EQU	30h
040000             0145   
040000             0146   ; System variable indexes for api_sysvars
040000             0147   ; Index into _sysvars in globals.asm
040000             0148   ;
040000             0149   sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0150   sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0151   sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0152   sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0153   sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0154   sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0155   sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0156   sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0157   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0158   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0159   sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0160   sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0161   sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0162   sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0163   sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0164   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0165   sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0166   sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0167   sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0168   sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0169   sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0170   sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0171   sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0172   sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0173   sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0174   sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0175   sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0176   sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0177   sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0178   sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0179   sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0180   sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0181   ;
040000             0182   ; Flags for the VPD protocol
040000             0183   ;
040000             0184   vdp_pflag_cursor:	EQU	00000001b
040000             0185   vdp_pflag_scrchar:	EQU	00000010b
040000             0186   vdp_pflag_point:	EQU	00000100b
040000             0187   vdp_pflag_audio:	EQU	00001000b
040000             0188   vdp_pflag_mode:		EQU	00010000b
040000             0189   vdp_pflag_rtc:		EQU	00100000b
040000             0190   vdp_pflag_mouse:	EQU	01000000b
040000             0191   ; vdp_pflag_buffered:	EQU	10000000b
040000             0192   
040000             0193   
040000             0194   ; FatFS structures
040000             0195   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0196   ;
040000             0197   ; Object ID and allocation information (FFOBJID)
040000             0198   FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0199   FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0200   FFOBJID.attr:     EQU 5    ; Object attribute
040000             0201   FFOBJID.stat:     EQU 6    ; Object chain status
040000             0202   FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0203   FFOBJID.objsize:  EQU 11   ; Object size
040000             0204   FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0205   ;
040000             0206   ; File object structure (FIL)
040000             0207   ;
040000             0208   FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0209   FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0210   FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0211   FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0212   FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0213   FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0214   FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0215   FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0216   FIL.obj.objsize:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0217   ;
040000             0218   ; Directory object structure (DIR)
040000             0219   ;
040000             0220   DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0221   DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0222   DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0223   DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0224   DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0225   DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226   DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0227   DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0228   ;
040000             0229   ; File information structure (FILINFO)
040000             0230   ;
040000             0231   FILINFO.fsize:    EQU 0    ; File size
040000             0232   FILINFO.fdate:    EQU 4    ; Modified date
040000             0233   FILINFO.ftime:    EQU 6    ; Modified time
040000             0234   FILINFO.fattrib:  EQU 8    ; File attribute
040000             0235   FILINFO.altname:  EQU 9    ; Alternative file name
040000             0236   FILINFO.fname:    EQU 22   ; Primary file name
040000             0237   FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0238   ;
040000             0239   ; Macro for calling the API
040000             0240   ; Parameters:
040000             0241   ; - function: One of the function numbers listed above
040000             0242   ;
040000             0243   			MACRO MOSCALL	function
040000             0244   			LD	A, function
040000             0245   			RST.LIS	08h
040000             0246   			ENDMACRO 	; --- End mos_api.inc ---
040000             0247   
040000             0248   ; --- Begin equs.inc ---
040000             0249   ; ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0250   ; STAVAR: EQU 0
040000             0251   ; ACCS: EQU 0
040000             0252   ; ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0253   
040000             0254   ;
040000             0255   ; Title:	BBC Basic for AGON - Equs
040000             0256   ; Author:	Dean Belfield
040000             0257   ; Created:	04/12/2024
040000             0258   ; Last Updated:	05/12/2024
040000             0259   ;
040000             0260   ; Modinfo:
040000             0261   ; 05/12/2024:	Removed Stack_Top
040000             0262   
040000             0263   ;			XREF		STAVAR
040000             0264   ;			XREF		ACCS
040000             0265   
040000             0266   RAM_Top:		EQU		0FF00h
040000             0267   
040000             0268   ; For GPIO
040000             0269   ; PA not available on eZ80L92
040000             0270   ;
040000             0271   PA_DR:			EQU		96h
040000             0272   PA_DDR:			EQU		97h
040000             0273   PA_ALT1:		EQU		98h
040000             0274   PA_ALT2:		EQU		99h
040000             0275   PB_DR:          	EQU		9Ah
040000             0276   PB_DDR:        	 	EQU		9Bh
040000             0277   PB_ALT1:        	EQU		9Ch
040000             0278   PB_ALT2:        	EQU		9Dh
040000             0279   PC_DR:          	EQU		9Eh
040000             0280   PC_DDR:         	EQU		9Fh
040000             0281   PC_ALT1:        	EQU		A0h
040000             0282   PC_ALT2:        	EQU		A1h
040000             0283   PD_DR:          	EQU		A2h
040000             0284   PD_DDR:			EQU		A3h
040000             0285   PD_ALT1:		EQU		A4h
040000             0286   PD_ALT2:		EQU		A5h
040000             0287   
040000             0288   GPIOMODE_OUT:		EQU		0	; Output
040000             0289   GPIOMODE_IN:		EQU		1	; Input
040000             0290   GPIOMODE_DIO:		EQU		2	; Open Drain IO
040000             0291   GPIOMODE_SIO:		EQU		3	; Open Source IO
040000             0292   GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040000             0293   GPIOMODE_ALTF:		EQU		5;	; Alt Function
040000             0294   GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040000             0295   GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040000             0296   GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040000             0297   GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040000             0298   
040000             0299   ; Originally in ram.asm
040000             0300   ;
040000             0301   ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%) ; back to data.asm
040000             0302   ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%) ; back to data.asm
040000             0303   ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; moved to data.asm
040000             0304   
040000             0305   ; Originally in main.asm
040000             0306   ;
040000             0307   CR:			EQU     0DH
040000             0308   LF:			EQU     0AH
040000             0309   ESC:			EQU     1BH
040000             0310   ; --- End equs.inc ---
040000             0311   
040000             0312   ; --- Begin macros.inc ---
040000             0313   ;
040000             0314   ; Title:	BBC Basic Interpreter - Z80 version
040000             0315   ;		Useful macros
040000             0316   ; Author:	Dean Belfield
040000             0317   ; Created:	04/12/2024
040000             0318   ; Last Updated:	04/12/2024
040000             0319   ;
040000             0320   ; Modinfo:
040000             0321   
040000             0322           MACRO EXREG rp1, rp2
040000             0323           PUSH    rp1
040000             0324           POP     rp2
040000             0325           ENDMACRO
040000             0326   
040000             0327           MACRO ADD8U_DE ; reg
040000             0328           ADD     A, E
040000             0329           LD      E, A
040000             0330           ADC     A, D
040000             0331           SUB     E
040000             0332           LD      D, A
040000             0333           ENDMACRO
040000             0334   
040000             0335           MACRO ADD8U_HL ; reg
040000             0336           ADD     A, L
040000             0337           LD      L, A
040000             0338           ADC     A, H
040000             0339           SUB     L
040000             0340           LD      H, A
040000             0341           ENDMACRO
040000             0342   
040000             0343           MACRO VDU VAL
040000             0344           LD      A, VAL
040000             0345           CALL    OSWRCH
040000             0346           ENDMACRO
040000             0347   
040000             0348           MACRO SET_GPIO REG, VAL
040000             0349           IN0     A, (REG)
040000             0350           OR      VAL
040000             0351           OUT0    (REG), A
040000             0352           ENDMACRO
040000             0353   
040000             0354           MACRO RES_GPIO REG, VAL
040000             0355           PUSH    BC
040000             0356           LD      A, VAL
040000             0357           CPL
040000             0358           LD      C, A
040000             0359           IN0     A, (REG)
040000             0360           AND     C
040000             0361           OUT0    (REG), A
040000             0362           POP     BC
040000             0363           ENDMACRO
040000             0364   ; --- End macros.inc ---
040000             0365   
040000             0366   ; --- Begin agon_init.asm ---
040000             0367   ;
040000             0368   ; Title:	BBC Basic for AGON - Initialisation Code
040000             0369   ;		Initialisation Code
040000             0370   ; Author:	Dean Belfield
040000             0371   ; Created:	04/12/2024
040000             0372   ; Last Updated:	14/12/2024
040000             0373   ;
040000             0374   ; Modinfo:
040000             0375   ; 14/12/2024:	Fix for *BYE command
040000             0376   
040000             0377   ;			SEGMENT __VECTORS
040000             0378   
040000             0379   ;			XREF	START
040000             0380   ;			XREF	ACCS
040000             0381   ;			XREF	TELL
040000             0382   
040000             0383   			.ASSUME	ADL = 0
040000             0384   			.ORG 0x0000
000000             0385   
000000             0386   			; INCLUDE	"equs.inc"
000000             0387   
000000             0388   argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
000000             0389   
000000             0390   ;
000000             0391   ; Start in mixed mode. Assumes MBASE is set to correct segment
000000             0392   ;
000000 C3 52 00    0393   			JP	_start				; Jump to start
000003             0394   			DS	5
000008             0395   
       FF FF FF FF 
       FF 
000008 49 CF       0396   RST_08:			RST.LIS	08h				; API call
00000A C9          0397   			RET
00000B             0398   			DS 	5
000010             0399   
       FF FF FF FF 
       FF 
000010 49 D7       0400   RST_10:			RST.LIS 10h				; Output
000012 C9          0401   			RET
000013             0402   			DS	5
000018             0403   
       FF FF FF FF 
       FF 
000018 49 DF       0404   RST_18:			RST.LIS	18h				; Block Output
00001A C9          0405   			RET
00001B             0406   			DS	5
000020             0407   
000020             0408   RST_20:			DS	8
000028             0409   RST_28:			DS	8
000030             0410   RST_30:			DS	8
000038             0411   
000038             0412   ;
000038             0413   ; The NMI interrupt vector (not currently used by AGON)
000038             0414   ;
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 
000038 FB          0415   RST_38:			EI
000039 ED 4D       0416   			RETI
00003B             0417   ;
00003B             0418   ; The header stuff is from byte 64 onwards
00003B             0419   ;
00003B FF FF FF FF 0420   			ALIGN	64
       FF          
000040             0421   
000040 4D 4F 53    0422   			DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
000043 00          0423   			DB	00h				; MOS header version 0
000044 00          0424   			DB	00h				; Flag for run mode (0: Z80, 1: ADL)
000045             0425   
000045 42 42 43 42 0426   _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
       41 53 49 43 
       2E 42 49 4E 
       00          
000052             0427   
000052             0428   ;
000052             0429   ; And the code follows on immediately after the header
000052             0430   ;
000052 5B FD E5    0431   _start:			PUSH.LIL	IY			; Preserve IY
000055             0432   
000055 FD 21 00 00 0433   			LD		IY, 0			; Preserve SPS
000059 FD 39       0434   			ADD		IY, SP
00005B 5B FD E5    0435   			PUSH.LIL	IY
00005E             0436   
00005E E3          0437   			EX		(SP), HL		; Get the SPS part of the return address
00005F 5B E5       0438   			PUSH.LIL	HL
000061 E3          0439   			EX		(SP), HL		; And restore it for BASIC
000062             0440   
000062 5B F5       0441   			PUSH.LIL	AF			; Preserve the rest of the registers
000064 5B C5       0442   			PUSH.LIL	BC
000066 5B D5       0443   			PUSH.LIL	DE
000068 5B DD E5    0444   			PUSH.LIL	IX
00006B             0445   
00006B ED 6E       0446   			LD		A, MB			; Segment base
00006D DD 21 65 01 0447   			LD		IX, argv_ptrs		; The argv array pointer address
000071 CD 51 01    0448   			CALL		_set_aix24		; Convert to a 24-bit address
000074 5B DD E5    0449   			PUSH.LIL	IX
000077 CD E1 00    0450   			CALL		_parse_params		; Parse the parameters
00007A 5B DD E1    0451   			POP.LIL		IX			; IX: argv
00007D 06 00       0452   			LD		B, 0			;  C: argc
00007F CD 9A 00    0453   			CALL		_main			; Start user code
000082             0454   
000082 5B DD E1    0455   			POP.LIL		IX			; Restore the registers
000085 5B D1       0456   			POP.LIL		DE
000087 5B C1       0457   			POP.LIL		BC
000089 5B F1       0458   			POP.LIL		AF
00008B             0459   
00008B EB          0460   			EX		DE, HL 			; DE: Return code from BASIC
00008C 5B E1       0461   			POP.LIL		HL 			; The SPS part of the return address
00008E 5B FD E1    0462   			POP.LIL		IY			; Get the preserved SPS
000091 FD F9       0463   			LD		SP, IY			; Restore SPS
000093 E3          0464   			EX		(SP), HL		; Store the SPS part of the return address on the stack
000094 EB          0465   			EX		DE, HL 			; HL: Return code from BASIC
000095             0466   
000095 5B FD E1    0467   			POP.LIL		IY			; Restore IY
000098 49 C9       0468   			RET.L					; Return to MOS
00009A             0469   
00009A             0470   ; The main routine
00009A             0471   ; IXU: argv - pointer to array of parameters
00009A             0472   ;   C: argc - number of parameters
00009A             0473   ; Returns:
00009A             0474   ;  HL: Error code, or 0 if OK
00009A             0475   ;
00009A 21 00 52    0476   _main:			LD	HL, ACCS		; Clear the ACCS
00009D 36 00       0477   			LD	(HL), 0
00009F 79          0478   			LD	A, C
0000A0 FE 02       0479   			CP	2
0000A2 28 24       0480   			JR	Z, _autoload		; 2 parameters = autoload
0000A4 38 35       0481   			JR	C, _startbasic		; 1 parameter = normal start
0000A6             0482   ;			CALL	STAR_VERSION		; Output the AGON version
0000A6 CD DC 44    0483   			CALL	TELL
0000A9 55 73 61 67 0484   			DB	"Usage:\n\r"
       65 3A 0A 0D 
0000B1 52 55 4E 20 0485   			DB	"RUN . <filename>\n\r", 0
       2E 20 3C 66 
       69 6C 65 6E 
       61 6D 65 3E 
       0A 0D 00    
0000C4 21 00 00    0486   			LD	HL, 0			; The error code
0000C7 C9          0487   			RET
0000C8             0488   ;
0000C8 5B DD 27 03 0489   _autoload:		LD.LIL	HL, (IX+3)		; HLU: Address of filename
0000CC 11 00 52    0490   			LD	DE, ACCS		;  DE: Destination address
0000CF 5B 7E       0491   @@:			LD.LIL	A, (HL)			; Fetch the filename byte
0000D1 12          0492   			LD	(DE), A			;
0000D2 5B 23       0493   			INC.LIL	HL			; Increase the source pointer
0000D4 1C          0494   			INC	E			; We only need to increase E as ACCS is on a page boundary
0000D5 20 F8       0495   			JR	NZ, @B			; Loop until we hit a 0 byte
0000D7 1D          0496   			DEC	E
0000D8 3E 0D       0497   			LD	A, CR
0000DA 12          0498   			LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
0000DB             0499   ;
0000DB E1          0500   _startbasic:		POP	 HL			; Pop the return address to init off SPS
0000DC 5B E5       0501   			PUSH.LIL HL 			; Stack it on SPL (*BYE will use this as the return address)
0000DE C3 F9 36    0502   			JP	 START			; And start BASIC
0000E1             0503   
0000E1             0504   ; Parse the parameter string into a C array
0000E1             0505   ; Parameters
0000E1             0506   ; -   A: Segment base
0000E1             0507   ; - HLU: Address of parameter string
0000E1             0508   ; - IXU: Address for array pointer storage
0000E1             0509   ; Returns:
0000E1             0510   ; -   C: Number of parameters parsed
0000E1             0511   ;
0000E1 01 45 00    0512   _parse_params:		LD		BC, _exec_name		; Get the address of the app name in this segment
0000E4 CD 3F 01    0513   			CALL		_set_abc24		; Convert it to a 24-bit address based upon segment base
0000E7 5B DD 0F 00 0514   			LD.LIL		(IX+0), BC		; ARGV[0] = the executable name
0000EB 5B DD 23    0515   			INC.LIL		IX
0000EE 5B DD 23    0516   			INC.LIL		IX
0000F1 5B DD 23    0517   			INC.LIL		IX
0000F4 CD 36 01    0518   			CALL		_skip_spaces		; Skip HL past any leading spaces
0000F7             0519   ;
0000F7 01 01 00    0520   			LD		BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0000FA 06 0F       0521   			LD		B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0000FC             0522   ;
0000FC C5          0523   _parse_params_1:	PUSH		BC			; Stack ARGC
0000FD 5B E5       0524   			PUSH.LIL	HL			; Stack start address of token
0000FF CD 25 01    0525   			CALL		_get_token		; Get the next token
000102 79          0526   			LD		A, C			; A: Length of the token in characters
000103 5B D1       0527   			POP.LIL		DE			; Start address of token (was in HL)
000105 C1          0528   			POP		BC			; ARGC
000106 B7          0529   			OR		A			; Check for A=0 (no token found) OR at end of string
000107 C8          0530   			RET		Z
000108             0531   ;
000108 5B DD 1F 00 0532   			LD.LIL		(IX+0), DE		; Store the pointer to the token
00010C 5B E5       0533   			PUSH.LIL	HL			; DE=HL
00010E 5B D1       0534   			POP.LIL		DE
000110 CD 36 01    0535   			CALL		_skip_spaces		; And skip HL past any spaces onto the next character
000113 AF          0536   			XOR		A
000114 5B 12       0537   			LD.LIL		(DE), A			; Zero-terminate the token
000116 5B DD 23    0538   			INC.LIL		IX
000119 5B DD 23    0539   			INC.LIL		IX
00011C 5B DD 23    0540   			INC.LIL		IX			; Advance to next pointer position
00011F 0C          0541   			INC		C			; Increment ARGC
000120 79          0542   			LD		A, C			; Check for C >= A
000121 B8          0543   			CP		B
000122 38 D8       0544   			JR		C, _parse_params_1	; And loop
000124 C9          0545   			RET
000125             0546   
000125             0547   ; Get the next token
000125             0548   ; Parameters:
000125             0549   ; - HL: Address of parameter string
000125             0550   ; Returns:
000125             0551   ; - HL: Address of first character after token
000125             0552   ; -  C: Length of token (in characters)
000125             0553   ;
000125 0E 00       0554   _get_token:		LD		C, 0			; Initialise length
000127 5B 7E       0555   @@:			LD.LIL		A, (HL)			; Get the character from the parameter string
000129 B7          0556   			OR		A			; Exit if 0 (end of parameter string in MOS)
00012A C8          0557   			RET 		Z
00012B FE 0D       0558   			CP		13			; Exit if CR (end of parameter string in BBC BASIC)
00012D C8          0559   			RET		Z
00012E FE 20       0560   			CP		' '			; Exit if space (end of token)
000130 C8          0561   			RET		Z
000131 5B 23       0562   			INC.LIL		HL			; Advance to next character
000133 0C          0563   			INC 		C			; Increment length
000134 18 F1       0564   			JR		@B
000136             0565   
000136             0566   ; Skip spaces in the parameter string
000136             0567   ; Parameters:
000136             0568   ; - HL: Address of parameter string
000136             0569   ; Returns:
000136             0570   ; - HL: Address of next none-space character
000136             0571   ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
000136             0572   ;
000136 5B 7E       0573   _skip_spaces:		LD.LIL		A, (HL)			; Get the character from the parameter string
000138 FE 20       0574   			CP		' '			; Exit if not space
00013A C0          0575   			RET		NZ
00013B 5B 23       0576   			INC.LIL		HL			; Advance to next character
00013D 18 F7       0577   			JR		_skip_spaces		; Increment length
00013F             0578   
00013F             0579   ; Set the MSB of BC (U) to A
00013F             0580   ; Parameters:
00013F             0581   ; - BC: 16-bit address
00013F             0582   ; -  A: Value to stick in U of BC
00013F             0583   ; Returns:
00013F             0584   ; - BCU
00013F             0585   ;
00013F 5B E5       0586   _set_abc24:		PUSH.LIL	HL			; Preserve HL
000141 5B C5       0587   			PUSH.LIL	BC			; Stick BC onto SPL
000143 5B 21 02 00 0588   			LD.LIL		HL, 2			; HL: SP+2
       00          
000148 5B 39       0589   			ADD.LIL		HL, SP
00014A 5B 77       0590   			LD.LIL		(HL), A			; Store A in it
00014C 5B C1       0591   			POP.LIL		BC			; Fetch ammended BC
00014E 5B E1       0592   			POP.LIL		HL			; Restore HL
000150 C9          0593   			RET
000151             0594   
000151             0595   ; Set the MSB of BC (U) to A
000151             0596   ; Parameters:
000151             0597   ; - IX: 16-bit address
000151             0598   ; -  A: Value to stick in U of BC
000151             0599   ; Returns:
000151             0600   ; - IXU
000151             0601   ;
000151 5B DD E5    0602   _set_aix24:		PUSH.LIL	IX			; Stick IX onto SPL
000154 5B DD 21 02 0603   			LD.LIL		IX, 2			; IX: SP+2
       00 00       
00015A 5B DD 39    0604   			ADD.LIL		IX, SP
00015D 5B DD 77 00 0605   			LD.LIL		(IX), A			; Store A in it
000161 5B DD E1    0606   			POP.LIL		IX			; Fetch ammended IX
000164 C9          0607   			RET
000165             0608   
000165             0609   ; Storage for the argv array pointers
000165             0610   ;
000165 00 00 00 00 0611   argv_ptrs:		BLKP	argv_ptrs_max, 0		; Storage for the argv array pointers
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
000195             0612   ; --- End agon_init.asm ---
000195             0613   
000195             0614   ; --- Begin agon_graphics.asm ---
000195             0615   ;
000195             0616   ; Title:	BBC Basic for AGON - Graphics stuff
000195             0617   ; Author:	Dean Belfield
000195             0618   ; Created:	04/12/2024
000195             0619   ; Last Updated:	11/12/2024
000195             0620   ;
000195             0621   ; Modinfo:
000195             0622   ; 11/12/2024:	Modified POINT_ to work with OSWORD
000195             0623   
000195             0624   			.ASSUME	ADL = 0
000195             0625   ;	.ORG 0x0000
000195             0626   
000195             0627   			; INCLUDE	"equs.inc"
000195             0628   			; INCLUDE "macros.inc"
000195             0629   			; INCLUDE "mos_api.inc"	; In MOS/src
000195             0630   
000195             0631   ;			SEGMENT CODE
000195             0632   
000195             0633   ;			XDEF	MODE_
000195             0634   ;			XDEF	COLOUR_
000195             0635   ;			XDEF	POINT_
000195             0636   ;			XDEF	GETSCHR
000195             0637   ;			XDEF	GETSCHR_1
000195             0638   
000195             0639   ;			XREF	ACCS
000195             0640   ;			XREF	OSWRCH
000195             0641   ;			XREF	ASC_TO_NUMBER
000195             0642   ;			XREF	EXTERR
000195             0643   ;			XREF	EXPRI
000195             0644   ;			XREF	COMMA
000195             0645   ;			XREF	XEQ
000195             0646   ;			XREF	NXT
000195             0647   ;			XREF	BRAKET
000195             0648   ;			XREF	CRTONULL
000195             0649   ;			XREF	NULLTOCR
000195             0650   ;			XREF	CRLF
000195             0651   ;			XREF	EXPR_W2
000195             0652   ;			XREF	INKEY1
000195             0653   
000195             0654   ; MODE n: Set video mode
000195             0655   ;
000195 DD E5       0656   MODE_:			PUSH	IX			; Get the system vars in IX
000197             0657   			MOSCALL	mos_sysvars		; Reset the semaphore
000197 3E 08       0001M1 			LD	A, function
000199 49 CF       0002M1 			RST.LIS	08h
00019B 5B DD CB 04 0658   			RES.LIL	4, (IX+sysvar_vpd_pflags)
       A6          
0001A0 CD 15 18    0659   			CALL    EXPRI
0001A3 D9          0660   			EXX
0001A4             0661   			VDU	16H			; Mode change
0001A4 3E 16       0001M1         LD      A, VAL
0001A6 CD 93 05    0002M1         CALL    OSWRCH
0001A9             0662   			VDU	L
0001A9 7D          0001M1         LD      A, VAL
0001AA CD 93 05    0002M1         CALL    OSWRCH
0001AD             0663   			MOSCALL	mos_sysvars
0001AD 3E 08       0001M1 			LD	A, function
0001AF 49 CF       0002M1 			RST.LIS	08h
0001B1 5B DD CB 04 0664   @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
       66          
0001B6 28 F9       0665   			JR	Z, @B			; Wait for the result
0001B8 DD E1       0666   			POP	IX
0001BA C3 7B 24    0667   			JP	XEQ
0001BD             0668   
0001BD             0669   ; ; GET(x,y): Get the ASCII code of a character on screen
0001BD             0670   ; ;
0001BD             0671   ; GETSCHR:		INC	IY
0001BD             0672   ; 			CALL    EXPRI      		; Get X coordinate
0001BD             0673   ; 			EXX
0001BD             0674   ; 			PUSH	HL			; Stack X
0001BD             0675   ; 			CALL	COMMA
0001BD             0676   ; 			CALL	EXPRI			; Get Y coordinate
0001BD             0677   ; 			EXX
0001BD             0678   ; 			CALL	BRAKET			; Closing bracket
0001BD             0679   ; 			POP	DE			; Pop X back into DE
0001BD             0680   ; 			CALL	GETSCHR_1
0001BD             0681   ; ;			JP	INKEY1
0001BD             0682   ; 	        	LD	DE,ACCS
0001BD             0683   ; 	                LD	(DE),A
0001BD             0684   ; 	                LD	A,80H
0001BD             0685   ;         	        RET	NC
0001BD             0686   ; 	                INC	E
0001BD             0687   ;                 	RET
0001BD             0688   ;
0001BD             0689   ; Fetch a character from the screen
0001BD             0690   ; - DE: X coordinate
0001BD             0691   ; - HL: Y coordinate
0001BD             0692   ; Returns
0001BD             0693   ; - A: The character or FFh if no match
0001BD             0694   ; - F: C if match, otherwise NC
0001BD             0695   ;
0001BD DD E5       0696   GETSCHR_1:		PUSH	IX			; Get the system vars in IX
0001BF             0697   			MOSCALL	mos_sysvars		; Reset the semaphore
0001BF 3E 08       0001M1 			LD	A, function
0001C1 49 CF       0002M1 			RST.LIS	08h
0001C3 5B DD CB 04 0698   			RES.LIL	1, (IX+sysvar_vpd_pflags)
       8E          
0001C8             0699   			VDU	23
0001C8 3E 17       0001M1         LD      A, VAL
0001CA CD 93 05    0002M1         CALL    OSWRCH
0001CD             0700   			VDU	0
0001CD 3E 00       0001M1         LD      A, VAL
0001CF CD 93 05    0002M1         CALL    OSWRCH
0001D2             0701   			VDU	vdp_scrchar
0001D2 3E 83       0001M1         LD      A, VAL
0001D4 CD 93 05    0002M1         CALL    OSWRCH
0001D7             0702   			VDU	E
0001D7 7B          0001M1         LD      A, VAL
0001D8 CD 93 05    0002M1         CALL    OSWRCH
0001DB             0703   			VDU	D
0001DB 7A          0001M1         LD      A, VAL
0001DC CD 93 05    0002M1         CALL    OSWRCH
0001DF             0704   			VDU	L
0001DF 7D          0001M1         LD      A, VAL
0001E0 CD 93 05    0002M1         CALL    OSWRCH
0001E3             0705   			VDU	H
0001E3 7C          0001M1         LD      A, VAL
0001E4 CD 93 05    0002M1         CALL    OSWRCH
0001E7 5B DD CB 04 0706   @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
       4E          
0001EC 28 F9       0707   			JR	Z, @B			; Wait for the result
0001EE 5B DD 7E 09 0708   			LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
0001F2 B7          0709   			OR	A			; Check for 00h
0001F3 37          0710   			SCF				; C = character map
0001F4 20 01       0711   			JR	NZ, @F			; We have a character, so skip next bit
0001F6 AF          0712   			XOR	A			; Clear carry
0001F7 DD E1       0713   @@:			POP	IX
0001F9 C9          0714   			RET
0001FA             0715   
0001FA             0716   ; POINT(x,y): Get the pixel colour of a point on screen
0001FA             0717   ; Parameters:
0001FA             0718   ; - DE: X-coordinate
0001FA             0719   ; - HL: Y-coordinate
0001FA             0720   ; Returns:
0001FA             0721   ; -  A: Pixel colour
0001FA             0722   ;
0001FA DD E5       0723   POINT_:			PUSH	IX			; Get the system vars in IX
0001FC             0724   			MOSCALL	mos_sysvars		; Reset the semaphore
0001FC 3E 08       0001M1 			LD	A, function
0001FE 49 CF       0002M1 			RST.LIS	08h
000200 5B DD CB 04 0725   			RES.LIL	2, (IX+sysvar_vpd_pflags)
       96          
000205             0726   			VDU	23
000205 3E 17       0001M1         LD      A, VAL
000207 CD 93 05    0002M1         CALL    OSWRCH
00020A             0727   			VDU	0
00020A 3E 00       0001M1         LD      A, VAL
00020C CD 93 05    0002M1         CALL    OSWRCH
00020F             0728   			VDU	vdp_scrpixel
00020F 3E 84       0001M1         LD      A, VAL
000211 CD 93 05    0002M1         CALL    OSWRCH
000214             0729   			VDU	E
000214 7B          0001M1         LD      A, VAL
000215 CD 93 05    0002M1         CALL    OSWRCH
000218             0730   			VDU	D
000218 7A          0001M1         LD      A, VAL
000219 CD 93 05    0002M1         CALL    OSWRCH
00021C             0731   			VDU	L
00021C 7D          0001M1         LD      A, VAL
00021D CD 93 05    0002M1         CALL    OSWRCH
000220             0732   			VDU	H
000220 7C          0001M1         LD      A, VAL
000221 CD 93 05    0002M1         CALL    OSWRCH
000224 5B DD CB 04 0733   @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
       56          
000229 28 F9       0734   			JR	Z, @B			; Wait for the result
00022B             0735   ;
00022B             0736   ; Return the data as a 1 byte index
00022B             0737   ;
00022B 5B DD 7E 16 0738   			LD.LIL	A, (IX+sysvar_scrpixelIndex)
00022F DD E1       0739   			POP	IX
000231 C9          0740   			RET
000232             0741   
000232             0742   ; COLOUR colour
000232             0743   ; COLOUR L,P
000232             0744   ; COLOUR L,R,G,B
000232             0745   ;
000232 CD 15 18    0746   COLOUR_:		CALL	EXPRI			; The colour / mode
000235 D9          0747   			EXX
000236 7D          0748   			LD	A, L
000237 32 00 52    0749   			LD	(VDU_BUFFER+0), A	; Store first parameter
00023A CD ED 44    0750   			CALL	NXT			; Are there any more parameters?
00023D FE 2C       0751   			CP	','
00023F 28 0E       0752   			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
000241             0753   ;
000241             0754   			VDU	11h			; Just set the colour
000241 3E 11       0001M1         LD      A, VAL
000243 CD 93 05    0002M1         CALL    OSWRCH
000246             0755   			VDU	(VDU_BUFFER+0)
000246 3A 00 52    0001M1         LD      A, VAL
000249 CD 93 05    0002M1         CALL    OSWRCH
00024C C3 7B 24    0756   			JP	XEQ
00024F             0757   ;
00024F CD 84 20    0758   COLOUR_1:		CALL	COMMA
000252 CD 15 18    0759   			CALL	EXPRI			; Parse R (OR P)
000255 D9          0760   			EXX
000256 7D          0761   			LD	A, L
000257 32 01 52    0762   			LD	(VDU_BUFFER+1), A
00025A CD ED 44    0763   			CALL	NXT			; Are there any more parameters?
00025D FE 2C       0764   			CP	','
00025F 28 23       0765   			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
000261             0766   ;
000261             0767   			VDU	13h			; VDU:COLOUR
000261 3E 13       0001M1         LD      A, VAL
000263 CD 93 05    0002M1         CALL    OSWRCH
000266             0768   			VDU	(VDU_BUFFER+0)		; Logical Colour
000266 3A 00 52    0001M1         LD      A, VAL
000269 CD 93 05    0002M1         CALL    OSWRCH
00026C             0769   			VDU	(VDU_BUFFER+1)		; Palette Colour
00026C 3A 01 52    0001M1         LD      A, VAL
00026F CD 93 05    0002M1         CALL    OSWRCH
000272             0770   			VDU	0			; RGB set to 0
000272 3E 00       0001M1         LD      A, VAL
000274 CD 93 05    0002M1         CALL    OSWRCH
000277             0771   			VDU	0
000277 3E 00       0001M1         LD      A, VAL
000279 CD 93 05    0002M1         CALL    OSWRCH
00027C             0772   			VDU	0
00027C 3E 00       0001M1         LD      A, VAL
00027E CD 93 05    0002M1         CALL    OSWRCH
000281 C3 7B 24    0773   			JP	XEQ
000284             0774   ;
000284 CD 84 20    0775   COLOUR_2:		CALL	COMMA
000287 CD 15 18    0776   			CALL	EXPRI			; Parse G
00028A D9          0777   			EXX
00028B 7D          0778   			LD	A, L
00028C 32 02 52    0779   			LD	(VDU_BUFFER+2), A
00028F CD 84 20    0780   			CALL	COMMA
000292 CD 15 18    0781   			CALL	EXPRI			; Parse B
000295 D9          0782   			EXX
000296 7D          0783   			LD	A, L
000297 32 03 52    0784   			LD	(VDU_BUFFER+3), A
00029A             0785   			VDU	13h			; VDU:COLOUR
00029A 3E 13       0001M1         LD      A, VAL
00029C CD 93 05    0002M1         CALL    OSWRCH
00029F             0786   			VDU	(VDU_BUFFER+0)		; Logical Colour
00029F 3A 00 52    0001M1         LD      A, VAL
0002A2 CD 93 05    0002M1         CALL    OSWRCH
0002A5             0787   			VDU	FFh			; Physical Colour (-1 for RGB mode)
0002A5 3E FF       0001M1         LD      A, VAL
0002A7 CD 93 05    0002M1         CALL    OSWRCH
0002AA             0788   			VDU	(VDU_BUFFER+1)		; R
0002AA 3A 01 52    0001M1         LD      A, VAL
0002AD CD 93 05    0002M1         CALL    OSWRCH
0002B0             0789   			VDU	(VDU_BUFFER+2)		; G
0002B0 3A 02 52    0001M1         LD      A, VAL
0002B3 CD 93 05    0002M1         CALL    OSWRCH
0002B6             0790   			VDU	(VDU_BUFFER+3)		; B
0002B6 3A 03 52    0001M1         LD      A, VAL
0002B9 CD 93 05    0002M1         CALL    OSWRCH
0002BC C3 7B 24    0791   			JP	XEQ
0002BF             0792   ; --- End agon_graphics.asm ---
0002BF             0793   
0002BF             0794   ; --- Begin agon_gpio.asm ---
0002BF             0795   ;
0002BF             0796   ; Title:	BBC Basic for AGON - GPIO functions
0002BF             0797   ; Author:	Dean Belfield
0002BF             0798   ; Created:	04/12/2024
0002BF             0799   ; Last Updated:	04/12/2024
0002BF             0800   ;
0002BF             0801   ; Modinfo:
0002BF             0802   
0002BF             0803   			; INCLUDE	"macros.inc"
0002BF             0804   			; INCLUDE	"equs.inc"
0002BF             0805   
0002BF             0806   			.ASSUME	ADL = 0
0002BF             0807   ;	.ORG 0x0000
0002BF             0808   
0002BF             0809   ;			SEGMENT CODE
0002BF             0810   
0002BF             0811   ;			XDEF	GPIOB_SETMODE
0002BF             0812   
0002BF             0813   ;			XREF	SWITCH_A
0002BF             0814   
0002BF             0815   ;  A: Mode
0002BF             0816   ;  B: Pins
0002BF             0817   ;
0002BF CD 18 05    0818   GPIOB_SETMODE:		CALL	SWITCH_A
0002C2 D6 02       0819   			DW	GPIOB_M0	; Output
0002C4 FB 02       0820   			DW	GPIOB_M1	; Input
0002C6 1B 03       0821   			DW	GPIOB_M2	; Open Drain IO
0002C8 3B 03       0822   			DW	GPIOB_M3	; Open Source IO
0002CA 56 03       0823   			DW	GPIOB_M4	; Interrupt, Dual Edge
0002CC 82 03       0824   			DW	GPIOB_M5	; Alt Function
0002CE 9D 03       0825   			DW	GPIOB_M6	; Interrupt, Active Low
0002D0 C4 03       0826   			DW	GPIOB_M7	; Interrupt, Active High
0002D2 E6 03       0827   			DW	GPIOB_M8	; Interrupt, Falling Edge
0002D4 08 04       0828   			DW	GPIOB_M9	; Interrupt, Rising Edge
0002D6             0829   
0002D6             0830   ; Output
0002D6             0831   ;
0002D6             0832   GPIOB_M0:		RES_GPIO PB_DDR,  B
0002D6 C5          0001M1         PUSH    BC
0002D7 78          0002M1         LD      A, VAL
0002D8 2F          0003M1         CPL
0002D9 4F          0004M1         LD      C, A
0002DA ED 38 9B    0005M1         IN0     A, (REG)
0002DD A1          0006M1         AND     C
0002DE ED 39 9B    0007M1         OUT0    (REG), A
0002E1 C1          0008M1         POP     BC
0002E2             0833   			RES_GPIO PB_ALT1, B
0002E2 C5          0001M1         PUSH    BC
0002E3 78          0002M1         LD      A, VAL
0002E4 2F          0003M1         CPL
0002E5 4F          0004M1         LD      C, A
0002E6 ED 38 9C    0005M1         IN0     A, (REG)
0002E9 A1          0006M1         AND     C
0002EA ED 39 9C    0007M1         OUT0    (REG), A
0002ED C1          0008M1         POP     BC
0002EE             0834   			RES_GPIO PB_ALT2, B
0002EE C5          0001M1         PUSH    BC
0002EF 78          0002M1         LD      A, VAL
0002F0 2F          0003M1         CPL
0002F1 4F          0004M1         LD      C, A
0002F2 ED 38 9D    0005M1         IN0     A, (REG)
0002F5 A1          0006M1         AND     C
0002F6 ED 39 9D    0007M1         OUT0    (REG), A
0002F9 C1          0008M1         POP     BC
0002FA C9          0835   			RET
0002FB             0836   
0002FB             0837   ; Input
0002FB             0838   ;
0002FB             0839   GPIOB_M1:		SET_GPIO PB_DDR,  B
0002FB ED 38 9B    0001M1         IN0     A, (REG)
0002FE B0          0002M1         OR      VAL
0002FF ED 39 9B    0003M1         OUT0    (REG), A
000302             0840   			RES_GPIO PB_ALT1, B
000302 C5          0001M1         PUSH    BC
000303 78          0002M1         LD      A, VAL
000304 2F          0003M1         CPL
000305 4F          0004M1         LD      C, A
000306 ED 38 9C    0005M1         IN0     A, (REG)
000309 A1          0006M1         AND     C
00030A ED 39 9C    0007M1         OUT0    (REG), A
00030D C1          0008M1         POP     BC
00030E             0841   			RES_GPIO PB_ALT2, B
00030E C5          0001M1         PUSH    BC
00030F 78          0002M1         LD      A, VAL
000310 2F          0003M1         CPL
000311 4F          0004M1         LD      C, A
000312 ED 38 9D    0005M1         IN0     A, (REG)
000315 A1          0006M1         AND     C
000316 ED 39 9D    0007M1         OUT0    (REG), A
000319 C1          0008M1         POP     BC
00031A C9          0842   			RET
00031B             0843   
00031B             0844   ; Open Drain IO
00031B             0845   ;
00031B             0846   GPIOB_M2:		RES_GPIO PB_DDR,  B
00031B C5          0001M1         PUSH    BC
00031C 78          0002M1         LD      A, VAL
00031D 2F          0003M1         CPL
00031E 4F          0004M1         LD      C, A
00031F ED 38 9B    0005M1         IN0     A, (REG)
000322 A1          0006M1         AND     C
000323 ED 39 9B    0007M1         OUT0    (REG), A
000326 C1          0008M1         POP     BC
000327             0847   			SET_GPIO PB_ALT1, B
000327 ED 38 9C    0001M1         IN0     A, (REG)
00032A B0          0002M1         OR      VAL
00032B ED 39 9C    0003M1         OUT0    (REG), A
00032E             0848   			RES_GPIO PB_ALT2, B
00032E C5          0001M1         PUSH    BC
00032F 78          0002M1         LD      A, VAL
000330 2F          0003M1         CPL
000331 4F          0004M1         LD      C, A
000332 ED 38 9D    0005M1         IN0     A, (REG)
000335 A1          0006M1         AND     C
000336 ED 39 9D    0007M1         OUT0    (REG), A
000339 C1          0008M1         POP     BC
00033A C9          0849   			RET
00033B             0850   
00033B             0851   ; Open Source IO
00033B             0852   ;
00033B             0853   GPIOB_M3:		SET_GPIO PB_DDR,  B
00033B ED 38 9B    0001M1         IN0     A, (REG)
00033E B0          0002M1         OR      VAL
00033F ED 39 9B    0003M1         OUT0    (REG), A
000342             0854   			SET_GPIO PB_ALT1, B
000342 ED 38 9C    0001M1         IN0     A, (REG)
000345 B0          0002M1         OR      VAL
000346 ED 39 9C    0003M1         OUT0    (REG), A
000349             0855   			RES_GPIO PB_ALT2, B
000349 C5          0001M1         PUSH    BC
00034A 78          0002M1         LD      A, VAL
00034B 2F          0003M1         CPL
00034C 4F          0004M1         LD      C, A
00034D ED 38 9D    0005M1         IN0     A, (REG)
000350 A1          0006M1         AND     C
000351 ED 39 9D    0007M1         OUT0    (REG), A
000354 C1          0008M1         POP     BC
000355 C9          0856   			RET
000356             0857   
000356             0858   ; Interrupt, Dual Edge
000356             0859   ;
000356             0860   GPIOB_M4:		SET_GPIO PB_DR,   B
000356 ED 38 9A    0001M1         IN0     A, (REG)
000359 B0          0002M1         OR      VAL
00035A ED 39 9A    0003M1         OUT0    (REG), A
00035D             0861   			RES_GPIO PB_DDR,  B
00035D C5          0001M1         PUSH    BC
00035E 78          0002M1         LD      A, VAL
00035F 2F          0003M1         CPL
000360 4F          0004M1         LD      C, A
000361 ED 38 9B    0005M1         IN0     A, (REG)
000364 A1          0006M1         AND     C
000365 ED 39 9B    0007M1         OUT0    (REG), A
000368 C1          0008M1         POP     BC
000369             0862   			RES_GPIO PB_ALT1, B
000369 C5          0001M1         PUSH    BC
00036A 78          0002M1         LD      A, VAL
00036B 2F          0003M1         CPL
00036C 4F          0004M1         LD      C, A
00036D ED 38 9C    0005M1         IN0     A, (REG)
000370 A1          0006M1         AND     C
000371 ED 39 9C    0007M1         OUT0    (REG), A
000374 C1          0008M1         POP     BC
000375             0863   			RES_GPIO PB_ALT2, B
000375 C5          0001M1         PUSH    BC
000376 78          0002M1         LD      A, VAL
000377 2F          0003M1         CPL
000378 4F          0004M1         LD      C, A
000379 ED 38 9D    0005M1         IN0     A, (REG)
00037C A1          0006M1         AND     C
00037D ED 39 9D    0007M1         OUT0    (REG), A
000380 C1          0008M1         POP     BC
000381 C9          0864   			RET
000382             0865   
000382             0866   ; Alt Function
000382             0867   ;
000382             0868   GPIOB_M5:		SET_GPIO PB_DDR,  B
000382 ED 38 9B    0001M1         IN0     A, (REG)
000385 B0          0002M1         OR      VAL
000386 ED 39 9B    0003M1         OUT0    (REG), A
000389             0869   			RES_GPIO PB_ALT1, B
000389 C5          0001M1         PUSH    BC
00038A 78          0002M1         LD      A, VAL
00038B 2F          0003M1         CPL
00038C 4F          0004M1         LD      C, A
00038D ED 38 9C    0005M1         IN0     A, (REG)
000390 A1          0006M1         AND     C
000391 ED 39 9C    0007M1         OUT0    (REG), A
000394 C1          0008M1         POP     BC
000395             0870   			SET_GPIO PB_ALT2, B
000395 ED 38 9D    0001M1         IN0     A, (REG)
000398 B0          0002M1         OR      VAL
000399 ED 39 9D    0003M1         OUT0    (REG), A
00039C C9          0871   			RET
00039D             0872   
00039D             0873   ; Interrupt, Active Low
00039D             0874   ;
00039D             0875   GPIOB_M6:		RES_GPIO PB_DR,   B
00039D C5          0001M1         PUSH    BC
00039E 78          0002M1         LD      A, VAL
00039F 2F          0003M1         CPL
0003A0 4F          0004M1         LD      C, A
0003A1 ED 38 9A    0005M1         IN0     A, (REG)
0003A4 A1          0006M1         AND     C
0003A5 ED 39 9A    0007M1         OUT0    (REG), A
0003A8 C1          0008M1         POP     BC
0003A9             0876   			RES_GPIO PB_DDR,  B
0003A9 C5          0001M1         PUSH    BC
0003AA 78          0002M1         LD      A, VAL
0003AB 2F          0003M1         CPL
0003AC 4F          0004M1         LD      C, A
0003AD ED 38 9B    0005M1         IN0     A, (REG)
0003B0 A1          0006M1         AND     C
0003B1 ED 39 9B    0007M1         OUT0    (REG), A
0003B4 C1          0008M1         POP     BC
0003B5             0877   			SET_GPIO PB_ALT1, B
0003B5 ED 38 9C    0001M1         IN0     A, (REG)
0003B8 B0          0002M1         OR      VAL
0003B9 ED 39 9C    0003M1         OUT0    (REG), A
0003BC             0878   			SET_GPIO PB_ALT2, B
0003BC ED 38 9D    0001M1         IN0     A, (REG)
0003BF B0          0002M1         OR      VAL
0003C0 ED 39 9D    0003M1         OUT0    (REG), A
0003C3 C9          0879   			RET
0003C4             0880   
0003C4             0881   
0003C4             0882   ; Interrupt, Active High
0003C4             0883   ;
0003C4             0884   GPIOB_M7:		SET_GPIO PB_DR,   B
0003C4 ED 38 9A    0001M1         IN0     A, (REG)
0003C7 B0          0002M1         OR      VAL
0003C8 ED 39 9A    0003M1         OUT0    (REG), A
0003CB             0885   			RES_GPIO PB_DDR,  B
0003CB C5          0001M1         PUSH    BC
0003CC 78          0002M1         LD      A, VAL
0003CD 2F          0003M1         CPL
0003CE 4F          0004M1         LD      C, A
0003CF ED 38 9B    0005M1         IN0     A, (REG)
0003D2 A1          0006M1         AND     C
0003D3 ED 39 9B    0007M1         OUT0    (REG), A
0003D6 C1          0008M1         POP     BC
0003D7             0886   			SET_GPIO PB_ALT1, B
0003D7 ED 38 9C    0001M1         IN0     A, (REG)
0003DA B0          0002M1         OR      VAL
0003DB ED 39 9C    0003M1         OUT0    (REG), A
0003DE             0887   			SET_GPIO PB_ALT2, B
0003DE ED 38 9D    0001M1         IN0     A, (REG)
0003E1 B0          0002M1         OR      VAL
0003E2 ED 39 9D    0003M1         OUT0    (REG), A
0003E5 C9          0888   			RET
0003E6             0889   
0003E6             0890   
0003E6             0891   ; Interrupt, Falling Edge
0003E6             0892   ;
0003E6             0893   GPIOB_M8:		RES_GPIO PB_DR,   B
0003E6 C5          0001M1         PUSH    BC
0003E7 78          0002M1         LD      A, VAL
0003E8 2F          0003M1         CPL
0003E9 4F          0004M1         LD      C, A
0003EA ED 38 9A    0005M1         IN0     A, (REG)
0003ED A1          0006M1         AND     C
0003EE ED 39 9A    0007M1         OUT0    (REG), A
0003F1 C1          0008M1         POP     BC
0003F2             0894   			SET_GPIO PB_DDR,  B
0003F2 ED 38 9B    0001M1         IN0     A, (REG)
0003F5 B0          0002M1         OR      VAL
0003F6 ED 39 9B    0003M1         OUT0    (REG), A
0003F9             0895   			SET_GPIO PB_ALT1, B
0003F9 ED 38 9C    0001M1         IN0     A, (REG)
0003FC B0          0002M1         OR      VAL
0003FD ED 39 9C    0003M1         OUT0    (REG), A
000400             0896   			SET_GPIO PB_ALT2, B
000400 ED 38 9D    0001M1         IN0     A, (REG)
000403 B0          0002M1         OR      VAL
000404 ED 39 9D    0003M1         OUT0    (REG), A
000407 C9          0897   			RET
000408             0898   
000408             0899   ; Interrupt, Rising Edge
000408             0900   ;
000408             0901   GPIOB_M9:		SET_GPIO PB_DR,   B
000408 ED 38 9A    0001M1         IN0     A, (REG)
00040B B0          0002M1         OR      VAL
00040C ED 39 9A    0003M1         OUT0    (REG), A
00040F             0902   			SET_GPIO PB_DDR,  B
00040F ED 38 9B    0001M1         IN0     A, (REG)
000412 B0          0002M1         OR      VAL
000413 ED 39 9B    0003M1         OUT0    (REG), A
000416             0903   			SET_GPIO PB_ALT1, B
000416 ED 38 9C    0001M1         IN0     A, (REG)
000419 B0          0002M1         OR      VAL
00041A ED 39 9C    0003M1         OUT0    (REG), A
00041D             0904   			SET_GPIO PB_ALT2, B
00041D ED 38 9D    0001M1         IN0     A, (REG)
000420 B0          0002M1         OR      VAL
000421 ED 39 9D    0003M1         OUT0    (REG), A
000424 C9          0905   			RET
000425             0906   ; --- End agon_gpio.asm ---
000425             0907   
000425             0908   ; --- Begin agon_interrupt.asm ---
000425             0909   ;
000425             0910   ; Title:	BBC Basic for AGON - Interrupts
000425             0911   ; Author:	Dean Belfield
000425             0912   ; Created:	04/12/2024
000425             0913   ; Last Updated:	04/12/2024
000425             0914   ;
000425             0915   ; Modinfo:
000425             0916   
000425             0917   			.ASSUME	ADL = 0
000425             0918   ;	.ORG 0x0000
000425             0919   
000425             0920   			; INCLUDE	"macros.inc"
000425             0921   			; INCLUDE	"equs.inc"
000425             0922   			; INCLUDE "mos_api.inc"	; In MOS/src
000425             0923   
000425             0924   ;			SEGMENT CODE
000425             0925   
000425             0926   ;			XDEF	VBLANK_INIT
000425             0927   ;			XDEF	VBLANK_STOP
000425             0928   ;			XDEF	VBLANK_HANDLER
000425             0929   
000425             0930   ;			XREF	ESCSET
000425             0931   ;			XREF	KEYDOWN		; In ram.asm
000425             0932   ;			XREF	KEYASCII 	; In ram.asm
000425             0933   ;			XREF	KEYCOUNT	; In ram.asm
000425             0934   
000425             0935   ; Hook into the MOS VBLANK interrupt
000425             0936   ;
000425 F3          0937   VBLANK_INIT:		DI
000426             0938   
000426 ED 6E       0939   			LD		A, MB 				; Get a 24-bit pointer to
000428 21 A3 04    0940   			LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
00042B CD 65 04    0941   			CALL		SET_AHL16 			; address is a 16-bit pointer in BBC BASIC's segment
00042E             0942   
00042E 1E 32       0943   			LD		E, 32h				; Set up the VBlank Interrupt Vector
000430             0944   			MOSCALL		mos_setintvector
000430 3E 14       0001M1 			LD	A, function
000432 49 CF       0002M1 			RST.LIS	08h
000434             0945   
000434 5B E5       0946   			PUSH.LIL	HL				; HLU: Pointer to the MOS interrupt vector
000436 5B D1       0947   			POP.LIL		DE 				; DEU: Pointer to the MOS interrupt vector
000438             0948   
000438 21 BB 04    0949   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
00043B ED 6E       0950   			LD		A, MB	 			; Get the segment BBC BASIC is running in
00043D 32 AC 04    0951   			LD		(VBLANK_HANDLER_MB + 1), A 	; Store in the interrupt handler
000440 CD 65 04    0952   			CALL		SET_AHL16 			; Convert pointer to an absolute 24-bit address
000443 5B ED 1F    0953   			LD.LIL		(HL), DE			; Self-modify the code
000446 FB          0954   			EI
000447 C9          0955   			RET
000448             0956   
000448             0957   ; Unhook the custom VBLANK interrupt
000448             0958   ;
000448 F3          0959   VBLANK_STOP:		DI
000449 21 BB 04    0960   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
00044C 3A AC 04    0961   			LD		A, (VBLANK_HANDLER_MB + 1)	; The stored MB of the segment BBC BASIC is running in
00044F F5          0962   			PUSH		AF 				; Stack the MB for later
000450 CD 65 04    0963   			CALL		SET_AHL16			; Convert pointer to an absolute 24-bit address
000453 5B ED 17    0964   			LD.LIL		DE, (HL)			; DEU: Address of MOS interrupt vector
000456 5B D5       0965   			PUSH.LIL	DE				; Transfer to HL
000458 5B E1       0966   			POP.LIL		HL
00045A 1E 32       0967   			LD		E, 32h
00045C             0968   			MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
00045C 3E 14       0001M1 			LD	A, function
00045E 49 CF       0002M1 			RST.LIS	08h
000460 F1          0969   			POP		AF 				; Restore MB to this segment
000461 ED 6D       0970   			LD		MB, A
000463 FB          0971   			EI
000464 C9          0972   			RET
000465             0973   
000465             0974   ; Set the MSB of HL (U) to A
000465             0975   ;
000465 5B E5       0976   SET_AHL16:		PUSH.LIL	HL
000467 5B 21 02 00 0977   			LD.LIL		HL, 2
       00          
00046C 5B 39       0978   			ADD.LIL		HL, SP
00046E 5B 77       0979   			LD.LIL		(HL), A
000470 5B E1       0980   			POP.LIL		HL
000472 C9          0981   			RET
000473             0982   
000473             0983   ; A safe LIS call to ESCSET
000473             0984   ;
000473             0985   DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
000473 3E 08       0001M1 			LD	A, function
000475 49 CF       0002M1 			RST.LIS	08h
000477 21 F8 50    0986   			LD		HL, KEYCOUNT 			; Check whether the keycount has changed
00047A 5B DD 7E 19 0987   			LD.LIL		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
00047E BE          0988   			CP 		(HL)				; with our local copy
00047F 20 09       0989   			JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
000481             0990   ;
000481 AF          0991   DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
000482 32 F7 50    0992   			LD		(KEYASCII), A
000485 32 F6 50    0993   			LD		(KEYDOWN), A
000488 5B C9       0994   			RET.LIL 					; And return
00048A             0995   ;
00048A 77          0996   DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
00048B 5B DD 7E 18 0997   			LD.LIL		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
00048F B7          0998   			OR		A
000490 28 EF       0999   			JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
000492             1000   ;
000492 32 F6 50    1001   			LD		(KEYDOWN), A 			; Store the keydown value
000495 5B DD 7E 05 1002   			LD.LIL		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
000499 32 F7 50    1003   			LD		(KEYASCII), A 			; Store locally
00049C FE 1B       1004   			CP		1Bh				; Is it escape?
00049E CC F8 05    1005   			CALL		Z, ESCSET			; Yes, so set the escape flags
0004A1 49 C9       1006   			RET.LIS						; Return to the interrupt handler
0004A3             1007   
0004A3             1008   ;
0004A3             1009   ; Interrupts in mixed mode always run in ADL mode
0004A3             1010   ;
0004A3             1011   			.ASSUME	ADL = 1
0004A3             1012   
0004A3 F3          1013   VBLANK_HANDLER:		DI
0004A4 F5          1014   			PUSH		AF
0004A5 E5          1015   			PUSH		HL
0004A6 DD E5       1016   			PUSH		IX
0004A8 ED 6E       1017   			LD		A, MB
0004AA F5          1018   			PUSH		AF
0004AB 3E 00       1019   VBLANK_HANDLER_MB:	LD		A, 0				; This is self-modified by VBLANK_INIT
0004AD ED 6D       1020   			LD		MB, A
0004AF 49 CD 73 04 1021   			CALL.LIS	DO_KEYBOARD
0004B3 F1          1022   			POP		AF
0004B4 ED 6D       1023   			LD		MB, A
0004B6 DD E1       1024   			POP		IX
0004B8 E1          1025   			POP		HL
0004B9 F1          1026   			POP		AF
0004BA             1027   ;
0004BA             1028   ; Finally jump to the MOS interrupt
0004BA             1029   ;
0004BA C3 00 00 00 1030   VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
0004BE             1031   ; --- End agon_interrupt.asm ---
0004BE             1032   
0004BE             1033   ; --- Begin agon_misc.asm ---
0004BE             1034   ;
0004BE             1035   ; Title:	BBC Basic for AGON - Miscellaneous helper functions
0004BE             1036   ; Author:	Dean Belfield
0004BE             1037   ; Created:	04/12/2024
0004BE             1038   ; Last Updated:	04/12/2024
0004BE             1039   ;
0004BE             1040   ; Modinfo:
0004BE             1041   
0004BE             1042   			; INCLUDE	"equs.inc"
0004BE             1043   			; INCLUDE	"macros.inc"
0004BE             1044   
0004BE             1045   			.ASSUME	ADL = 0
0004BE             1046   ;	.ORG 0x0000
0004BE             1047   
0004BE             1048   ;			SEGMENT CODE
0004BE             1049   
0004BE             1050   ;			XDEF	ASC_TO_NUMBER
0004BE             1051   ;			XDEF	SWITCH_A
0004BE             1052   ;			XDEF	NULLTOCR
0004BE             1053   ;			XDEF	CRTONULL
0004BE             1054   ;			XDEF	CSTR_FNAME
0004BE             1055   ;			XDEF	CSTR_LINE
0004BE             1056   ;			XDEF	CSTR_FINDCH
0004BE             1057   ;			XDEF	CSTR_ENDSWITH
0004BE             1058   ;			XDEF	CSTR_CAT
0004BE             1059   
0004BE             1060   ;			XREF	OSWRCH
0004BE             1061   ;			XREF	KEYWDS
0004BE             1062   ;			XREF	KEYWDL
0004BE             1063   
0004BE             1064   ; Read a number and convert to binary
0004BE             1065   ; If prefixed with &, will read as hex, otherwise decimal
0004BE             1066   ;   Inputs: HL: Pointer in string buffer
0004BE             1067   ;  Outputs: HL: Updated text pointer
0004BE             1068   ;           DE: Value
0004BE             1069   ;            A: Terminator (spaces skipped)
0004BE             1070   ; Destroys: A,D,E,H,L,F
0004BE             1071   ;
0004BE C5          1072   ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
0004BF 11 00 00    1073   			LD	DE, 0			; Initialise DE
0004C2 CD 02 05    1074   			CALL	SKIPSPmisc			; Skip whitespace
0004C5 7E          1075   			LD	A, (HL)			; Read first character
0004C6 FE 26       1076   			CP	'&'			; Is it prefixed with '&' (HEX number)?
0004C8 20 1E       1077   			JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0004CA 23          1078   			INC	HL			; Otherwise fall through to ASC_TO_HEX
0004CB             1079   ;
0004CB 7E          1080   ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
0004CC CD 10 05    1081   			CALL    UPPRCmisc			; Convert to uppercase
0004CF D6 30       1082   			SUB	'0'			; Normalise to 0
0004D1 38 2E       1083   			JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0004D3 FE 0A       1084   			CP 	10			; Check if >= 10
0004D5 38 06       1085   			JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
0004D7 D6 07       1086   			SUB 	7			; Adjust ASCII A-F to nibble
0004D9 FE 10       1087   			CP 	16			; Check for > F
0004DB 30 24       1088   			JR 	NC, ASC_TO_NUMBER4	; Return if out of range
0004DD EB          1089   ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
0004DE 29          1090   			ADD	HL, HL
0004DF 29          1091   			ADD	HL, HL
0004E0 29          1092   			ADD	HL, HL
0004E1 29          1093   			ADD	HL, HL
0004E2 EB          1094   			EX	DE, HL
0004E3 B3          1095   			OR      E			; OR the new digit in to the least significant nibble
0004E4 5F          1096   			LD      E, A
0004E5 23          1097   			INC     HL			; Onto the next character
0004E6 18 E3       1098   			JR      ASC_TO_NUMBER1		; And loop
0004E8             1099   ;
0004E8 7E          1100   ASC_TO_NUMBER3:		LD	A, (HL)
0004E9 D6 30       1101   			SUB	'0'			; Normalise to 0
0004EB 38 14       1102   			JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0004ED FE 0A       1103   			CP	10			; Check if >= 10
0004EF 30 10       1104   			JR	NC, ASC_TO_NUMBER4	; Return if >= 10
0004F1 EB          1105   			EX 	DE, HL 			; Stick DE in HL
0004F2 44          1106   			LD	B, H 			; And copy HL into BC
0004F3 4D          1107   			LD	C, L
0004F4 29          1108   			ADD	HL, HL 			; x 2
0004F5 29          1109   			ADD	HL, HL 			; x 4
0004F6 09          1110   			ADD	HL, BC 			; x 5
0004F7 29          1111   			ADD	HL, HL 			; x 10
0004F8 EB          1112   			EX	DE, HL
0004F9             1113   			ADD8U_DE 			; Add A to DE (macro)
0004F9 83          0001M1         ADD     A, E
0004FA 5F          0002M1         LD      E, A
0004FB 8A          0003M1         ADC     A, D
0004FC 93          0004M1         SUB     E
0004FD 57          0005M1         LD      D, A
0004FE 23          1114   			INC	HL
0004FF 18 E7       1115   			JR	ASC_TO_NUMBER3
000501 C1          1116   ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSP here
000502             1117   
000502             1118   ; Skip a space
000502             1119   ; HL: Pointer in string buffer
000502             1120   ;
000502 7E          1121   SKIPSPmisc:			LD      A, (HL)
000503 FE 20       1122   			CP      ' '
000505 C0          1123   			RET     NZ
000506 23          1124   			INC     HL
000507 18 F9       1125   			JR      SKIPSPmisc
000509             1126   
000509             1127   ; Skip a string
000509             1128   ; HL: Pointer in string buffer
000509             1129   ;
000509 7E          1130   SKIPNOTSP:		LD	A, (HL)
00050A FE 20       1131   			CP	' '
00050C C8          1132   			RET	Z
00050D 23          1133   			INC	HL
00050E 18 F9       1134   			JR	SKIPNOTSP
000510             1135   
000510             1136   ; Convert a character to upper case
000510             1137   ;  A: Character to convert
000510             1138   ;
000510 E6 7F       1139   UPPRCmisc:  		AND     7FH
000512 FE 60       1140   			CP      '`'
000514 D8          1141   			RET     C
000515 E6 5F       1142   			AND     5FH			; Convert to upper case
000517 C9          1143   			RET
000518             1144   
000518             1145   ; Switch on A - lookup table immediately after call
000518             1146   ;  A: Index into lookup table
000518             1147   ;
000518 E3          1148   SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
000519 87          1149   			ADD	A, A			; Multiply A by two
00051A             1150   			ADD8U_HL 			; Add to HL (macro)
00051A 85          0001M1         ADD     A, L
00051B 6F          0002M1         LD      L, A
00051C 8C          0003M1         ADC     A, H
00051D 95          0004M1         SUB     L
00051E 67          0005M1         LD      H, A
00051F 7E          1151   			LD	A, (HL)			; follow the call. Fetch an address from the
000520 23          1152   			INC	HL 			; table.
000521 66          1153   			LD	H, (HL)
000522 6F          1154   			LD	L, A
000523 E3          1155   			EX	(SP), HL		; Swap this new address back, restores HL
000524 C9          1156   			RET				; Return program control to this new address
000525             1157   
000525             1158   ; Convert the buffer to a null terminated string and back
000525             1159   ; HL: Buffer address
000525             1160   ;
000525 C5          1161   NULLTOCR:		PUSH 	BC
000526 06 00       1162   			LD	B, 0
000528 0E 0D       1163   			LD	C, CR
00052A 18 05       1164   			JR	CRTONULL0
00052C             1165   ;
00052C C5          1166   CRTONULL:		PUSH	BC
00052D 06 0D       1167   			LD	B, CR
00052F 0E 00       1168   			LD	C, 0
000531             1169   ;
000531 E5          1170   CRTONULL0:		PUSH	HL
000532 7E          1171   CRTONULL1:		LD	A, (HL)
000533 B8          1172   			CP 	B
000534 28 03       1173   			JR	Z, CRTONULL2
000536 23          1174   			INC	HL
000537 18 F9       1175   			JR	CRTONULL1
000539 71          1176   CRTONULL2:		LD	(HL), C
00053A E1          1177   			POP 	HL
00053B C1          1178   			POP	BC
00053C C9          1179   			RET
00053D             1180   
00053D             1181   ; Copy a filename to DE and zero terminate it
00053D             1182   ; HL: Source
00053D             1183   ; DE: Destination (ACCS)
00053D             1184   ;
00053D 7E          1185   CSTR_FNAME:		LD	A, (HL)			; Get source
00053E FE 20       1186   			CP	32			; Is it space
000540 28 09       1187   			JR	Z, @F
000542 FE 0D       1188   			CP	CR			; Or is it CR
000544 28 05       1189   			JR	Z, @F
000546 12          1190   			LD	(DE), A			; No, so store
000547 23          1191   			INC	HL			; Increment
000548 13          1192   			INC	DE
000549 18 F2       1193   			JR	CSTR_FNAME		; And loop
00054B AF          1194   @@:			XOR	A			; Zero terminate the target string
00054C 12          1195   			LD	(DE), A
00054D 13          1196   			INC	DE			; And point to next free address
00054E C9          1197   			RET
00054F             1198   
00054F             1199   ; Copy a CR terminated line to DE and zero terminate it
00054F             1200   ; HL: Source
00054F             1201   ; DE: Destination (ACCS)
00054F             1202   ;
00054F 7E          1203   CSTR_LINE:		LD	A, (HL)			; Get source
000550 FE 0D       1204   			CP	CR			; Is it CR
000552 28 05       1205   			JR	Z, @F
000554 12          1206   			LD	(DE), A			; No, so store
000555 23          1207   			INC	HL			; Increment
000556 13          1208   			INC	DE
000557 18 F6       1209   			JR	CSTR_LINE		; And loop
000559 AF          1210   @@:			XOR	A			; Zero terminate the target string
00055A 12          1211   			LD	(DE), A
00055B 13          1212   			INC	DE			; And point to next free address
00055C C9          1213   			RET
00055D             1214   
00055D             1215   ; Find the first occurrence of a character (case sensitive)
00055D             1216   ; HL: Source
00055D             1217   ;  C: Character to find
00055D             1218   ; Returns:
00055D             1219   ; HL: Pointer to character, or end of string marker
00055D             1220   ;
00055D 7E          1221   CSTR_FINDCH:		LD	A, (HL)			; Get source
00055E B9          1222   			CP	C			; Is it our character?
00055F C8          1223   			RET	Z			; Yes, so exit
000560 B7          1224   			OR	A			; Is it the end of string?
000561 C8          1225   			RET	Z			; Yes, so exit
000562 23          1226   			INC	HL
000563 18 F8       1227   			JR	CSTR_FINDCH
000565             1228   
000565             1229   ; Check whether a string ends with another string (case insensitive)
000565             1230   ; HL: Source
000565             1231   ; DE: The substring we want to test with
000565             1232   ; Returns:
000565             1233   ;  F: Z if HL ends with DE, otherwise NZ
000565             1234   ;
000565 7E          1235   CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
000566 CD 10 05    1236   			CALL	UPPRCmisc			; Convert to upper case
000569 4F          1237   			LD	C, A
00056A 1A          1238   			LD	A, (DE)			; Get the substring byte
00056B B9          1239   			CP	C
00056C C0          1240   			RET	NZ			; Return NZ if at any point the strings don't match
00056D B1          1241   			OR	C			; Check whether both bytes are zero
00056E C8          1242   			RET	Z			; If so, return, as we have reached the end of both strings
00056F 23          1243   			INC	HL
000570 13          1244   			INC	DE
000571 18 F2       1245   			JR	CSTR_ENDSWITH		; And loop
000573             1246   
000573             1247   ; Concatenate a string onto the end of another string
000573             1248   ; HL: Source
000573             1249   ; DE: Second string
000573             1250   ;
000573 7E          1251   CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
000574 B7          1252   			OR	A
000575 28 03       1253   			JR	Z, CSTR_CAT_1
000577 23          1254   			INC	HL
000578 18 F9       1255   			JR	CSTR_CAT
00057A             1256   ;
00057A 1A          1257   CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
00057B 77          1258   			LD	(HL), A
00057C B7          1259   			OR	A			; Check for end of string
00057D C8          1260   			RET	Z			; And return
00057E 23          1261   			INC	HL
00057F 13          1262   			INC	DE
000580 18 F8       1263   			JR	CSTR_CAT_1		; Loop until finished
000582             1264   ; --- End agon_misc.asm ---
000582             1265   
000582             1266   ; --- Begin agon_os.asm ---
000582             1267   ;
000582             1268   ; Title:	BBC Basic for AGON - MOS stuff
000582             1269   ; Author:	Dean Belfield
000582             1270   ; Created:	04/12/2024
000582             1271   ; Last Updated:	12/12/2024
000582             1272   ;
000582             1273   ; Modinfo:
000582             1274   ; 08/12/2024:	Added OSCLI and file I/O
000582             1275   ; 11/12/2024:	Added ESC key handling
000582             1276   ; 		Added OSWORD
000582             1277   ; 12/12/2024:	Added OSRDCH, OSBYTE_81 and fixed *EDIT
000582             1278   
000582             1279   			.ASSUME	ADL = 0
000582             1280   ;			.ORG 0x0000
000582             1281   
000582             1282   			; INCLUDE	"equs.inc"
000582             1283   			; INCLUDE "macros.inc"
000582             1284   			; INCLUDE "mos_api.inc"	; In MOS/src
000582             1285   
000582             1286   ;			SEGMENT CODE
000582             1287   
000582             1288   ;			XDEF	OSWORD
000582             1289   ;			XDEF	OSBYTE
000582             1290   ;			XDEF	OSINIT
000582             1291   ;			XDEF	OSOPEN
000582             1292   ;			XDEF	OSSHUT
000582             1293   ;			XDEF	OSLOAD
000582             1294   ;			XDEF	OSSAVE
000582             1295   ;			XDEF	OSLINE
000582             1296   ;			XDEF	OSSTAT
000582             1297   ;			XDEF	OSWRCH
000582             1298   ;			XDEF	OSRDCH
000582             1299   ;			XDEF	OSBGET
000582             1300   ;			XDEF	OSBPUT
000582             1301   ;			XDEF	OSCLI
000582             1302   ;			XDEF	PROMPT
000582             1303   ;			XDEF	GETPTR
000582             1304   ;			XDEF	PUTPTR
000582             1305   ;			XDEF	GETEXT
000582             1306   ;			XDEF	TRAP
000582             1307   ;			XDEF	LTRAP
000582             1308   ;			XDEF	BYE
000582             1309   ;			XDEF	RESET
000582             1310   ;			XDEF	ESCSET
000582             1311   
000582             1312   ;			XREF	EXTERR
000582             1313   ;			XREF	VBLANK_INIT
000582             1314   ;			XREF	VBLANK_STOP
000582             1315   ;			XREF	USER
000582             1316   ;			XREF	COUNT
000582             1317   ;			XREF	COUNT0
000582             1318   ;			XREF	COUNT1
000582             1319   ;			XREF	GETCSR
000582             1320   ;			XREF	GETSCHR_1
000582             1321   ;			XREF	NULLTOCR
000582             1322   ;			XREF	CRLF
000582             1323   ;			XREF	FLAGS
000582             1324   ;			XREF	OSWRCHPT
000582             1325   ;			XREF	OSWRCHCH
000582             1326   ;			XREF	OSWRCHFH
000582             1327   ;			XREF	KEYASCII
000582             1328   ;			XREF	KEYDOWN
000582             1329   ;			XREF	LISTON
000582             1330   ;			XREF	PAGE_
000582             1331   ;			XREF	CSTR_FNAME
000582             1332   ;			XREF	CSTR_FINDCH
000582             1333   ;			XREF	CSTR_CAT
000582             1334   ;			XREF	CSTR_ENDSWITH
000582             1335   ;			XREF	CSTR_LINE
000582             1336   ;			XREF	NEWIT
000582             1337   ;			XREF	BAD
000582             1338   ;			XREF	CLEAN
000582             1339   ;			XREF	LINNUM
000582             1340   ;			XREF	BUFFER
000582             1341   ;			XREF	NXT
000582             1342   ;			XREF	ERROR_
000582             1343   ;			XREF	XEQ
000582             1344   ;			XREF	LEXAN2
000582             1345   ;			XREF	GETTOP
000582             1346   ;			XREF	FINDL
000582             1347   ;			XREF	DEL
000582             1348   ;			XREF	LISTIT
000582             1349   ;			XREF	ESCAPE
000582             1350   ;			XREF	ASC_TO_NUMBER
000582             1351   ;			XREF	CLOOP
000582             1352   ;			XREF	SCRAP
000582             1353   ;			XREF	POINT_
000582             1354   ;			XREF	SOUND_
000582             1355   
000582             1356   ;OSINIT - Initialise RAM mapping etc.
000582             1357   ;If BASIC is entered by BBCBASIC FILENAME then file
000582             1358   ;FILENAME.BBC is automatically CHAINed.
000582             1359   ;   Outputs: DE = initial value of HIMEM (top of RAM)
000582             1360   ;            HL = initial value of PAGE (user program)
000582             1361   ;            Z-flag reset indicates AUTO-RUN.
000582             1362   ;  Destroys: A,D,E,H,L,F
000582             1363   ;
000582 CD 25 04    1364   OSINIT:			CALL	VBLANK_INIT
000585 AF          1365   			XOR	A
000586 32 F1 50    1366   			LD	(FLAGS), A		; Clear flags and set F = Z
000589 21 00 55    1367   			LD 	HL, USER
00058C 11 00 FF    1368   			LD	DE, RAM_Top
00058F 5F          1369   			LD	E, A			; Page boundary
000590 C9          1370   			RET
000591             1371   
000591             1372   ; PROMPT: output the input prompt
000591             1373   ;
000591 3E 3E       1374   PROMPT: 		LD	A,'>'			; Falls through to OSWRCH
000593             1375   
000593             1376   ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
000593             1377   ; Parameters:
000593             1378   ; - A: Character to write
000593             1379   ;
000593 E5          1380   OSWRCH:			PUSH	HL
000594 21 FE 54    1381   			LD	HL, LISTON		; Fetch the LISTON variable
000597 CB 5E       1382   			BIT	3, (HL)			; Check whether we are in *EDIT mode
000599 20 0A       1383   			JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
00059B             1384   ;
00059B 2A F4 50    1385   			LD	HL, (OSWRCHCH)		; L: Channel #
00059E 2D          1386   			DEC	L			; If it is 1
00059F 28 17       1387   			JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0005A1             1388   ;
0005A1 E1          1389   			POP	HL			; Otherwise
0005A2 49 D7       1390   			RST.LIS	10h			; Output the character to MOS
0005A4 C9          1391   			RET
0005A5             1392   ;
0005A5 2A F2 50    1393   OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0005A8 FE 0A       1394   			CP	0AH			; Just ignore this
0005AA 28 0A       1395   			JR	Z, OSWRCH_BUFFER2
0005AC FE 0D       1396   			CP	0DH			; Is it the end of line?
0005AE 20 01       1397   			JR	NZ, OSWRCH_BUFFER1	; No, so carry on
0005B0 AF          1398   			XOR	A			; Turn it into a NUL character
0005B1 77          1399   OSWRCH_BUFFER1:		LD	(HL), A			; Echo the character into the buffer
0005B2 23          1400   			INC	HL			; Increment pointer
0005B3 22 F2 50    1401   			LD	(OSWRCHPT), HL		; Write pointer back
0005B6 E1          1402   OSWRCH_BUFFER2:		POP	HL
0005B7 C9          1403   			RET
0005B8             1404   ;
0005B8 D5          1405   OSWRCH_FILE:		PUSH	DE
0005B9 5C          1406   			LD	E, H			; Filehandle to E
0005BA CD 45 06    1407   			CALL	OSBPUT			; Write the byte out
0005BD D1          1408   			POP	DE
0005BE E1          1409   			POP	HL
0005BF C9          1410   			RET
0005C0             1411   
0005C0             1412   ; OSRDCH
0005C0             1413   ;
0005C0             1414   OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0005C0 3E 00       0001M1 			LD	A, function
0005C2 49 CF       0002M1 			RST.LIS	08h
0005C4 FE 1B       1415   			CP	1Bh
0005C6 28 55       1416   			JR	Z, LTRAP1
0005C8 C9          1417   			RET
0005C9             1418   
0005C9             1419   ; OSLINE: Invoke the line editor
0005C9             1420   ;
0005C9 1E 01       1421   OSLINE:			LD 	E, 1			; Default is to clear the buffer
0005CB             1422   
0005CB             1423   ; Entry point to line editor that does not clear the buffer
0005CB             1424   ; Parameters:
0005CB             1425   ; - HL: addresses destination buffer (on page boundary)
0005CB             1426   ; Returns:
0005CB             1427   ; -  A: 0
0005CB             1428   ; NB: Buffer filled, terminated by CR
0005CB             1429   ;
0005CB FD E5       1430   OSLINE1:		PUSH	IY
0005CD E5          1431   			PUSH	HL			; Buffer address
0005CE 01 00 01    1432   			LD	BC, 256			; Buffer length
0005D1             1433   			MOSCALL	mos_editline		; Call the MOS line editor
0005D1 3E 09       0001M1 			LD	A, function
0005D3 49 CF       0002M1 			RST.LIS	08h
0005D5 E1          1434   			POP	HL			; Pop the address
0005D6 FD E1       1435   			POP	IY
0005D8 F5          1436   			PUSH	AF			; Stack the return value (key pressed)
0005D9 CD 25 05    1437   			CALL	NULLTOCR		; Turn the 0 character to a CR
0005DC CD DD 40    1438   			CALL	CRLF			; Display CRLF
0005DF F1          1439   			POP	AF
0005E0 FE 1B       1440   			CP	1Bh 			; Check if ESC terminated the input
0005E2 CA 1D 06    1441   			JP	Z, LTRAP1 		; Yes, so do the ESC thing
0005E5 3A F1 50    1442   			LD	A, (FLAGS)		; Otherwise
0005E8 CB BF       1443   			RES	7, A 			; Clear the escape flag
0005EA 32 F1 50    1444   			LD	(FLAGS), A
0005ED CD 6D 0A    1445   			CALL	WAIT_VBLANK 		; Wait a frame
0005F0 AF          1446    			XOR	A			; Return A = 0
0005F1 32 F6 50    1447   			LD	(KEYDOWN), A
0005F4 32 F7 50    1448   			LD	(KEYASCII), A
0005F7 C9          1449   			RET
0005F8             1450   
0005F8             1451   ;
0005F8             1452   ; ESCSET
0005F8             1453   ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
0005F8             1454   ;
0005F8 E5          1455   ESCSET: 		PUSH    HL
0005F9 21 F1 50    1456           		LD      HL,FLAGS		; Pointer to FLAGS
0005FC CB 76       1457           		BIT     6,(HL)			; If bit 6 is set, then
0005FE 20 02       1458           		JR      NZ,ESCDIS		; escape is disabled, so skip
000600 CB FE       1459           		SET     7,(HL)			; Set bit 7, the escape flag
000602 E1          1460   ESCDIS: 		POP     HL
000603 C9          1461           		RET
000604             1462   
000604             1463   ;
000604             1464   ; ESCTEST
000604             1465   ; Test for ESC key
000604             1466   ;
000604 CD 0D 06    1467   ESCTEST:		CALL	READKEY			; Read the keyboard
000607 C0          1468   			RET	NZ			; Skip if no key is pressed
000608 FE 1B       1469   			CP	1BH			; If ESC pressed then
00060A 28 EC       1470   			JR	Z,ESCSET		; jump to the escape set routine
00060C C9          1471   			RET
00060D             1472   
00060D             1473   ; Read the keyboard
00060D             1474   ; Returns:
00060D             1475   ; - A: ASCII of the pressed key
00060D             1476   ; - F: Z if the key is pressed, otherwise NZ
00060D             1477   ;
00060D 3A F6 50    1478   READKEY:		LD	A, (KEYDOWN)		; Get key down
000610 3D          1479   			DEC	A 			; Set Z flag if keydown is 1
000611 3A F7 50    1480   			LD	A, (KEYASCII)		; Get key ASCII value
000614 C9          1481   			RET
000615             1482   ;
000615             1483   ; TRAP
000615             1484   ; This is called whenever BASIC needs to check for ESC
000615             1485   ;
000615 CD 04 06    1486   TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
000618             1487   ;
000618 3A F1 50    1488   LTRAP:			LD	A,(FLAGS)		; Get FLAGS
00061B B7          1489   			OR	A			; This checks for bit 7; if it is not set then the result will
00061C F0          1490   			RET	P			; be positive (bit 7 is the sign bit in Z80), so return
00061D 21 F1 50    1491   LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
000620 CB BE       1492   			RES	7,(HL)			; Clear the escape pressed flag and
000622 C3 C5 25    1493   			JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
000625             1494   
000625             1495   ; RESET
000625             1496   ;
000625 C9          1497   RESET:			RET				; Yes this is fine
000626             1498   
000626             1499   ; OSOPEN
000626             1500   ; HL: Pointer to path
000626             1501   ;  F: C Z
000626             1502   ;     x x OPENIN
000626             1503   ; 	  OPENOUT
000626             1504   ;     x	  OPENUP
000626             1505   ; Returns:
000626             1506   ;  A: Filehandle, 0 if cannot open
000626             1507   ;
000626 0E 01       1508   OSOPEN:			LD	C, fa_read
000628 28 06       1509   			JR	Z, @F
00062A 0E 32       1510   			LD	C, fa_write | fa_open_append
00062C 38 02       1511   			JR	C, @F
00062E 0E 0A       1512   			LD	C, fa_write | fa_create_always
000630             1513   @@:			MOSCALL	mos_fopen
000630 3E 0A       0001M1 			LD	A, function
000632 49 CF       0002M1 			RST.LIS	08h
000634 C9          1514   			RET
000635             1515   
000635             1516   ;OSSHUT - Close disk file(s).
000635             1517   ; E = file channel
000635             1518   ;  If E=0 all files are closed (except SPOOL)
000635             1519   ; Destroys: A,B,C,D,E,H,L,F
000635             1520   ;
000635 C5          1521   OSSHUT:			PUSH	BC
000636 4B          1522   			LD	C, E
000637             1523   			MOSCALL	mos_fclose
000637 3E 0B       0001M1 			LD	A, function
000639 49 CF       0002M1 			RST.LIS	08h
00063B C1          1524   			POP	BC
00063C C9          1525   			RET
00063D             1526   
00063D             1527   ; OSBGET - Read a byte from a random disk file.
00063D             1528   ;  E = file channel
00063D             1529   ; Returns
00063D             1530   ;  A = byte read
00063D             1531   ;  Carry set if LAST BYTE of file
00063D             1532   ; Destroys: A,B,C,F
00063D             1533   ;
00063D C5          1534   OSBGET:			PUSH	BC
00063E 4B          1535   			LD	C, E
00063F             1536   			MOSCALL	mos_fgetc
00063F 3E 0C       0001M1 			LD	A, function
000641 49 CF       0002M1 			RST.LIS	08h
000643 C1          1537   			POP	BC
000644 C9          1538   			RET
000645             1539   
000645             1540   ; OSBPUT - Write a byte to a random disk file.
000645             1541   ;  E = file channel
000645             1542   ;  A = byte to write
000645             1543   ; Destroys: A,B,C,F
000645             1544   ;
000645 C5          1545   OSBPUT:			PUSH	BC
000646 4B          1546   			LD	C, E
000647 47          1547   			LD	B, A
000648             1548   			MOSCALL	mos_fputc
000648 3E 0D       0001M1 			LD	A, function
00064A 49 CF       0002M1 			RST.LIS	08h
00064C C1          1549   			POP	BC
00064D C9          1550   			RET
00064E             1551   
00064E             1552   ; OSSTAT - Read file status
00064E             1553   ;  E = file channel
00064E             1554   ; Returns
00064E             1555   ;  F: Z flag set - EOF
00064E             1556   ;  A: If Z then A = 0
00064E             1557   ; Destroys: A,D,E,H,L,F
00064E             1558   ;
00064E C5          1559   OSSTAT:			PUSH	BC
00064F 4B          1560   			LD	C, E
000650             1561   			MOSCALL	mos_feof
000650 3E 0E       0001M1 			LD	A, function
000652 49 CF       0002M1 			RST.LIS	08h
000654 C1          1562   			POP	BC
000655 FE 01       1563   			CP	1
000657 C9          1564   			RET
000658             1565   
000658             1566   ; GETPTR - Return file pointer.
000658             1567   ;    E = file channel
000658             1568   ; Returns:
000658             1569   ; DEHL = pointer (0-&7FFFFF)
000658             1570   ; Destroys: A,B,C,D,E,H,L,F
000658             1571   ;
000658 FD E5       1572   GETPTR:			PUSH		IY
00065A 4B          1573   			LD		C, E
00065B             1574   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
00065B 3E 19       0001M1 			LD	A, function
00065D 49 CF       0002M1 			RST.LIS	08h
00065F 5B E5       1575   			PUSH.LIL	HL
000661 5B FD E1    1576   			POP.LIL		IY		; IYU: Pointer to FIL structure
000664 5B FD 6E 11 1577   			LD.LIL		L, (IY + FIL.fptr + 0)
000668 5B FD 66 12 1578   			LD.LIL		H, (IY + FIL.fptr + 1)
00066C 5B FD 5E 13 1579   			LD.LIL		E, (IY + FIL.fptr + 2)
000670 5B FD 56 14 1580   			LD.LIL		D, (IY + FIL.fptr + 3)
000674 FD E1       1581   			POP		IY
000676 C9          1582   			RET
000677             1583   
000677             1584   ; PUTPTR - Update file pointer.
000677             1585   ;    A = file channel
000677             1586   ; DEHL = new pointer (0-&7FFFFF)
000677             1587   ; Destroys: A,B,C,D,E,H,L,F
000677             1588   ;
000677 FD E5       1589   PUTPTR:			PUSH		IY
000679 4F          1590   			LD		C, A  		; C: Filehandle
00067A 5B E5       1591   			PUSH.LIL	HL
00067C 5B 21 02 00 1592   			LD.LIL		HL, 2
       00          
000681 5B 39       1593   			ADD.LIL		HL, SP
000683 5B 73       1594   			LD.LIL		(HL), E 	; 3rd byte of DWORD set to E
000685 5B E1       1595   			POP.LIL		HL
000687 5A          1596   			LD		E, D  		; 4th byte passed as E
000688             1597   			MOSCALL		mos_flseek
000688 3E 1C       0001M1 			LD	A, function
00068A 49 CF       0002M1 			RST.LIS	08h
00068C FD E1       1598   			POP		IY
00068E C9          1599   			RET
00068F             1600   
00068F             1601   ; GETEXT - Find file size.
00068F             1602   ;    E = file channel
00068F             1603   ; Returns:
00068F             1604   ; DEHL = file size (0-&800000)
00068F             1605   ; Destroys: A,B,C,D,E,H,L,F
00068F             1606   ;
00068F FD E5       1607   GETEXT:			PUSH		IY
000691 4B          1608   			LD		C, E
000692             1609   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
000692 3E 19       0001M1 			LD	A, function
000694 49 CF       0002M1 			RST.LIS	08h
000696 5B E5       1610   			PUSH.LIL	HL
000698 5B FD E1    1611   			POP.LIL		IY		; IYU: Pointer to FIL structure
00069B 5B FD 6E 24 1612   			LD.LIL		L, (IY + FIL.obj.objsize + 0)
00069F 5B FD 66 25 1613   			LD.LIL		H, (IY + FIL.obj.objsize + 1)
0006A3 5B FD 5E 26 1614   			LD.LIL		E, (IY + FIL.obj.objsize + 2)
0006A7 5B FD 56 27 1615   			LD.LIL		D, (IY + FIL.obj.objsize + 3)
0006AB FD E1       1616   			POP		IY
0006AD C9          1617   			RET
0006AE             1618   
0006AE             1619   ;OSLOAD - Load an area of memory from a file.
0006AE             1620   ;   Inputs: HL addresses filename (CR terminated)
0006AE             1621   ;           DE = address at which to load
0006AE             1622   ;           BC = maximum allowed size (bytes)
0006AE             1623   ;  Outputs: Carry reset indicates no room for file.
0006AE             1624   ; Destroys: A,B,C,D,E,H,L,F
0006AE             1625   ;
0006AE C5          1626   OSLOAD:			PUSH	BC			; Stack the size
0006AF D5          1627   			PUSH	DE			; Stack the load address
0006B0 11 00 52    1628   			LD	DE, ACCS		; Buffer address for filename
0006B3 CD 3D 05    1629   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0006B6 21 00 52    1630   			LD	HL, ACCS		; HL: Filename
0006B9 CD F7 07    1631   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0006BC CD 08 08    1632   			CALL	EXT_HANDLER		; Get the default handler
0006BF D1          1633   			POP	DE			; Restore the load address
0006C0 C1          1634   			POP	BC			; Restore the size
0006C1 B7          1635   			OR	A
0006C2 CA 89 07    1636   			JP 	Z, OSLOAD_BBC
0006C5             1637   ;
0006C5             1638   ; Load the file in as a text file
0006C5             1639   ;
0006C5 AF          1640   OSLOAD_TXT:		XOR	A			; Set file attributes to read
0006C6 CD 26 06    1641   			CALL	OSOPEN			; Open the file
0006C9 5F          1642   			LD 	E, A 			; The filehandle
0006CA B7          1643   			OR	A
0006CB 3E 04       1644   			LD	A, 4			; File not found error
0006CD CA 91 07    1645   			JP	Z, OSERROR		; Jump to error handler
0006D0 CD 20 40    1646   			CALL	NEWIT			; Call NEW to clear the program space
0006D3             1647   ;
0006D3 21 00 52    1648   OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0006D6             1649   ;
0006D6             1650   ; First skip any whitespace (indents) at the beginning of the input
0006D6             1651   ;
0006D6 CD 3D 06    1652   @@:			CALL	OSBGET			; Read the byte into A
0006D9 38 1C       1653   			JR	C, OSLOAD_TXT3		; Is it EOF?
0006DB FE 0A       1654   			CP	LF 			; Is it LF?
0006DD 28 18       1655   			JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0006DF FE 21       1656   			CP	21h			; Is it less than or equal to ASCII space?
0006E1 38 F3       1657   			JR	C, @B 			; Yes, so keep looping
0006E3 77          1658   			LD	(HL), A 		; Store the first character
0006E4 2C          1659   			INC	L
0006E5             1660   ;
0006E5             1661   ; Now read the rest of the line in
0006E5             1662   ;
0006E5 CD 3D 06    1663   OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
0006E8 38 26       1664   			JR	C, OSLOAD_TXT4		; Is it EOF?
0006EA FE 20       1665   			CP	20h			; Skip if not an ASCII character
0006EC 38 05       1666   			JR	C, @F
0006EE 77          1667   			LD	(HL), A 		; Store in the input buffer
0006EF 2C          1668   			INC	L			; Increment the buffer pointer
0006F0 CA D1 3E    1669   			JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
0006F3 FE 0A       1670   @@:			CP	LF			; Check for LF
0006F5 20 EE       1671   			JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
0006F7             1672   ;
0006F7             1673   ; Finally, handle EOL/EOF
0006F7             1674   ;
0006F7 36 0D       1675   OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
0006F9 7D          1676   			LD	A, L			; Check for minimum line length
0006FA FE 02       1677   			CP	2			; If it is 2 characters or less (including CR)
0006FC 38 08       1678   			JR	C, @F			; Then don't bother entering it
0006FE D5          1679   			PUSH	DE			; Preserve the filehandle
0006FF CD 1B 07    1680   			CALL	OSEDIT			; Enter the line in memory
000702 DC FC 3F    1681   			CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
000705 D1          1682   			POP	DE
000706 CD 4E 06    1683   @@:			CALL	OSSTAT			; End of file?
000709 20 C8       1684   			JR	NZ, OSLOAD_TXT1		; No, so loop
00070B CD 35 06    1685   			CALL	OSSHUT			; Close the file
00070E 37          1686   			SCF				; Flag to BASIC that we're good
00070F C9          1687   			RET
000710             1688   ;
000710             1689   ; Special case for BASIC programs with no blank line at the end
000710             1690   ;
000710 FE 20       1691   OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
000712 38 05       1692   			JR	C, @F
000714 77          1693   			LD	(HL), A			; Store the character
000715 2C          1694   			INC	L
000716 CA D1 3E    1695   			JP	Z, BAD
000719 18 DC       1696   @@:			JR	OSLOAD_TXT3
00071B             1697   ;
00071B             1698   ; This bit enters the line into memory
00071B             1699   ; Also called from OSLOAD_TXT
00071B             1700   ; Returns:
00071B             1701   ; F: C if a new line has been entered (CLEAN will need to be called)
00071B             1702   ;
00071B AF          1703   OSEDIT:			XOR	A			; Entry point after *EDIT
00071C 32 FB 54    1704   			LD      (COUNT),A
00071F FD 21 00 52 1705   			LD      IY,ACCS
000723 CD 6C 43    1706   			CALL    LINNUM			; HL: The line number from the input buffer
000726 CD ED 44    1707   			CALL    NXT			; Skip spaces
000729 7C          1708   			LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
00072A B5          1709   			OR      L
00072B 28 00       1710   			JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
00072D             1711   ;
00072D             1712   ; This bit does the lexical analysis and tokenisation
00072D             1713   ;
00072D 11 00 53    1714   LNZERO:			LD	DE,BUFFER
000730 0E 01       1715                   	LD	C,1			; LEFT MODE
000732 E5          1716                   	PUSH	HL
000733 CD FA 43    1717                   	CALL	LEXAN2			; LEXICAL ANALYSIS
000736 E1          1718                   	POP	HL
000737 12          1719                   	LD	(DE),A			; TERMINATOR
000738 AF          1720                   	XOR	A
000739 47          1721                   	LD	B,A
00073A 4B          1722                   	LD	C,E			; BC=LINE LENGTH
00073B 13          1723                   	INC	DE
00073C 12          1724                   	LD	(DE),A			; ZERO NEXT
00073D 7C          1725                   	LD	A,H
00073E B5          1726                   	OR	L
00073F FD 21 00 53 1727                   	LD	IY,BUFFER		; FOR XEQ
000743 CA 7B 24    1728                   	JP	Z,XEQ			; DIRECT MODE
000746 C5          1729                   	PUSH	BC
000747 CD 25 41    1730                   	CALL	FINDL
00074A CC CB 3F    1731                   	CALL	Z,DEL
00074D C1          1732                   	POP	BC
00074E 79          1733                   	LD	A,C
00074F B7          1734                   	OR	A
000750 C8          1735                   	RET	Z
000751 C6 04       1736                   	ADD	A,4
000753 4F          1737                   	LD	C,A			; LENGTH INCLUSIVE
000754 D5          1738                   	PUSH	DE			; LINE NUMBER
000755 C5          1739                   	PUSH	BC			; SAVE LINE LENGTH
000756 EB          1740                   	EX	DE,HL
000757 C5          1741                   	PUSH	BC
000758 CD 07 40    1742                   	CALL	GETTOP
00075B C1          1743                   	POP	BC
00075C E5          1744                   	PUSH	HL
00075D 09          1745                   	ADD	HL,BC
00075E E5          1746                   	PUSH	HL
00075F 24          1747                   	INC	H
000760 AF          1748                   	XOR	A
000761 ED 72       1749                   	SBC	HL,SP
000763 E1          1750                   	POP	HL
000764 D2 26 3F    1751                   	JP	NC,ERROR_		; "No room"
000767 E3          1752                   	EX	(SP),HL
000768 E5          1753                   	PUSH	HL
000769 23          1754                   	INC	HL
00076A B7          1755                   	OR	A
00076B ED 52       1756                   	SBC	HL,DE
00076D 44          1757                   	LD	B,H			; BC=AMOUNT TO MOVE
00076E 4D          1758                   	LD	C,L
00076F E1          1759                   	POP	HL
000770 D1          1760                   	POP	DE
000771 28 02       1761                   	JR	Z,ATENDos
000773 ED B8       1762                   	LDDR				; MAKE SPACE
000775 C1          1763   ATENDos:          	POP	BC			; LINE LENGTH
000776 D1          1764                   	POP	DE			; LINE NUMBER
000777 23          1765                   	INC	HL
000778 71          1766                   	LD	(HL),C			; STORE LENGTH
000779 23          1767                   	INC	HL
00077A 73          1768                   	LD	(HL),E			; STORE LINE NUMBER
00077B 23          1769                   	INC	HL
00077C 72          1770                   	LD	(HL),D
00077D 23          1771                   	INC	HL
00077E 11 00 53    1772                   	LD	DE,BUFFER
000781 EB          1773                   	EX	DE,HL
000782 0D          1774                   	DEC	C
000783 0D          1775                   	DEC	C
000784 0D          1776                   	DEC	C
000785 ED B0       1777                   	LDIR				; ADD LINE
000787 37          1778   			SCF
000788 C9          1779   			RET
000789             1780   ;
000789             1781   ; Load the file in as a tokenised binary blob
000789             1782   ;
000789             1783   OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
000789 3E 01       0001M1 			LD	A, function
00078B 49 CF       0002M1 			RST.LIS	08h
00078D D0          1784   			RET	NC			; If load returns with carry reset - NO ROOM
00078E B7          1785   			OR	A			; If there is no error (A=0)
00078F 37          1786   			SCF				; Need to set carry indicating there was room
000790 C8          1787   			RET	Z			; Return
000791             1788   ;
000791 F5          1789   OSERROR:		PUSH	AF			; Handle the MOS error
000792 21 00 52    1790   			LD	HL, ACCS		; Address of the buffer
000795 01 00 01    1791   			LD	BC, 256			; Length of the buffer
000798 5F          1792   			LD	E, A			; The error code
000799             1793   			MOSCALL	mos_getError		; Copy the error message into the buffer
000799 3E 0F       0001M1 			LD	A, function
00079B 49 CF       0002M1 			RST.LIS	08h
00079D F1          1794   			POP	AF
00079E E5          1795   			PUSH	HL			; Stack the address of the error (now in ACCS)
00079F C6 7F       1796   			ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0007A1 C3 37 3F    1797   			JP	EXTERR			; Trigger an external error
0007A4             1798   
0007A4             1799   ;OSSAVE - Save an area of memory to a file.
0007A4             1800   ;   Inputs: HL addresses filename (term CR)
0007A4             1801   ;           DE = start address of data to save
0007A4             1802   ;           BC = length of data to save (bytes)
0007A4             1803   ; Destroys: A,B,C,D,E,H,L,F
0007A4             1804   ;
0007A4 C5          1805   OSSAVE:			PUSH	BC			; Stack the size
0007A5 D5          1806   			PUSH	DE			; Stack the save address
0007A6 11 00 52    1807   			LD	DE, ACCS		; Buffer address for filename
0007A9 CD 3D 05    1808   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0007AC 21 00 52    1809   			LD	HL, ACCS		; HL: Filename
0007AF CD F7 07    1810   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0007B2 CD 08 08    1811   			CALL	EXT_HANDLER		; Get the default handler
0007B5 D1          1812   			POP	DE			; Restore the save address
0007B6 C1          1813   			POP	BC			; Restore the size
0007B7 B7          1814   			OR	A			; Is the extension .BBC
0007B8 28 35       1815   			JR	Z, OSSAVE_BBC		; Yes, so use that
0007BA             1816   ;
0007BA             1817   ; Save the file out as a text file
0007BA             1818   ;
0007BA 3A F4 50    1819   OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0007BD F5          1820   			PUSH	AF
0007BE AF          1821   			XOR	A
0007BF 3C          1822   			INC	A			; Make sure C is clear, A is 1, for OPENOUT
0007C0 32 F4 50    1823   			LD	(OSWRCHCH), A
0007C3 CD 26 06    1824   			CALL	OSOPEN			; Open the file
0007C6 32 F5 50    1825   			LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0007C9 DD 21 FE 54 1826   			LD	IX, LISTON		; Required for LISTIT
0007CD 2A DC 54    1827   			LD	HL, (PAGE_)		; Get start of program area
0007D0 D9          1828   			EXX
0007D1 01 00 00    1829   			LD	BC, 0			; Set the initial indent counters
0007D4 D9          1830   			EXX
0007D5 7E          1831   OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0007D6 B7          1832   			OR	A
0007D7 28 0A       1833   			JR	Z, OSSAVE_TXT2
0007D9 23          1834   			INC	HL			; Skip the length byte
0007DA 5E          1835   			LD	E, (HL)			; Get the line number
0007DB 23          1836   			INC	HL
0007DC 56          1837   			LD	D, (HL)
0007DD 23          1838   			INC	HL
0007DE CD 3F 40    1839   			CALL	LISTIT			; List the line
0007E1 18 F2       1840   			JR	OSSAVE_TXT1
0007E3 3A F5 50    1841   OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
0007E6 5F          1842   			LD	E, A
0007E7 CD 35 06    1843   			CALL	OSSHUT			; Close it
0007EA F1          1844   			POP	AF			; Restore the channel
0007EB 32 F4 50    1845   			LD	(OSWRCHCH), A
0007EE C9          1846   			RET
0007EF             1847   ;
0007EF             1848   ; Save the file out as a tokenised binary blob
0007EF             1849   ;
0007EF             1850   OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
0007EF 3E 02       0001M1 			LD	A, function
0007F1 49 CF       0002M1 			RST.LIS	08h
0007F3 B7          1851   			OR	A			; If there is no error (A=0)
0007F4 C8          1852   			RET	Z			; Just return
0007F5 18 9A       1853   			JR	OSERROR			; Trip an error
0007F7             1854   
0007F7             1855   ; Check if an extension is specified in the filename
0007F7             1856   ; Add a default if not specified
0007F7             1857   ; HL: Filename (CSTR format)
0007F7             1858   ;
0007F7 E5          1859   EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
0007F8 0E 2E       1860   			LD	C, '.'			; Search for dot (marks start of extension)
0007FA CD 5D 05    1861   			CALL	CSTR_FINDCH
0007FD B7          1862   			OR	A			; Check for end of string marker
0007FE 20 06       1863   			JR	NZ, @F			; No, so skip as we have an extension at this point
000800 11 34 08    1864   			LD	DE, EXT_LOOKUP		; Get the first (default extension)
000803 CD 73 05    1865   			CALL	CSTR_CAT		; Concat it to string pointed to by HL
000806 E1          1866   @@:			POP	HL			; Restore the filename pointer
000807 C9          1867   			RET
000808             1868   
000808             1869   ; Check if an extension is valid and, if so, provide a pointer to a handler
000808             1870   ; HL: Filename (CSTR format)
000808             1871   ; Returns:
000808             1872   ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
000808             1873   ;
000808 E5          1874   EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
000809 0E 2E       1875   			LD	C, '.'			; Find the '.'
00080B CD 5D 05    1876   			CALL	CSTR_FINDCH
00080E 11 34 08    1877   			LD	DE, EXT_LOOKUP		; The lookup table
000811             1878   ;
000811 E5          1879   EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
000812 CD 65 05    1880   			CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
000815 E1          1881   			POP	HL			; Restore the pointer to the extension
000816 28 18       1882   			JR	Z, EXT_HANDLER_2	; We have a match!
000818             1883   ;
000818 1A          1884   @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
000819 13          1885   			INC	DE
00081A B7          1886   			OR	A
00081B 20 FB       1887   			JR	NZ, @B
00081D 13          1888   			INC	DE			; Skip the file extension # byte
00081E             1889   ;
00081E 1A          1890   			LD	A, (DE)			; Are we at the end of the table?
00081F B7          1891   			OR	A
000820 20 EF       1892   			JR	NZ, EXT_HANDLER_1	; No, so loop
000822             1893   ;
000822 3E CC       1894   			LD      A,204			; Throw a "Bad name" error
000824 CD 37 3F    1895           		CALL    EXTERR
000827 42 61 64 20 1896           		DB    	"Bad name", 0
       6E 61 6D 65 
       00          
000830             1897   ;
000830 13          1898   EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
000831 1A          1899   			LD	A, (DE)
000832 E1          1900   			POP	HL			; Restore the filename pointer
000833 C9          1901   			RET
000834             1902   
000834             1903   ; Extension lookup table
000834             1904   ; CSTR, TYPE
000834             1905   ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
000834             1906   ; 	- 1: Human readable plain text
000834             1907   ;
000834 2E 42 42 43 1908   EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
       00 00       
00083A 2E 54 58 54 1909   			DB	".TXT", 0, 1
       00 01       
000840 2E 41 53 43 1910   			DB	".ASC", 0, 1
       00 01       
000846 2E 42 41 53 1911   			DB	".BAS", 0, 1
       00 01       
00084C 00          1912   			DB	0			; End of table
00084D             1913   
00084D             1914   ; OSWORD
00084D             1915   ;
00084D FE 07       1916   OSWORD:			CP	07H			; SOUND
00084F             1917   			; JR	Z, OSWORD_07
00084F CA 80 0A    1918   			JP	Z, OSWORD_07 ; JR WAS TOO LARGE
000852 FE 08       1919   			CP	08H			; ENVELOPE
000854 28 14       1920   			JR	Z, OSWORD_08
000856 FE 09       1921   			CP	09H			; POINT
000858 28 03       1922   			JR	Z, OSWORD_09
00085A C3 8F 08    1923   			JP	HUH			; Anything else trips an error
00085D             1924   
00085D             1925   ; moved to agon_sound.asm
00085D             1926   ; ; SOUND channel,volume,pitch,duration
00085D             1927   ; ; Parameters:
00085D             1928   ; ; - HL: Pointer to data
00085D             1929   ; ;   - 0,1: Channel
00085D             1930   ; ;   - 2,3: Volume 0 (off) to 15 (full volume)
00085D             1931   ; ;   - 4,5: Pitch 0 - 255
00085D             1932   ; ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
00085D             1933   ; ;
00085D             1934   ; OSWORD_07:		EQU	SOUND_
00085D             1935   ; end moved to agon_sound.asm
00085D             1936   
00085D             1937   ; OSWORD 0x09: POINT
00085D             1938   ; Parameters:
00085D             1939   ; - HL: Address of data
00085D             1940   ;   - 0,1: X coordinate
00085D             1941   ;   - 2,3: Y coordinate
00085D             1942   ;
00085D ED 5B F9 50 1943   OSWORD_09:		LD	DE,(SCRAP+0)
000861 2A FB 50    1944   			LD	HL,(SCRAP+2)
000864 CD FA 01    1945   			CALL	POINT_
000867 32 FD 50    1946   			LD	(SCRAP+4),A
00086A C9          1947   OSWORD_08:		RET				; Envelope not currently implemented
00086B             1948   
00086B             1949   ;
00086B             1950   ; OSBYTE
00086B             1951   ; Parameters:
00086B             1952   ; - A: FX #
00086B             1953   ; - L: First parameter
00086B             1954   ; - H: Second parameter
00086B             1955   ;
00086B FE 0B       1956   OSBYTE:			CP	0BH			; Keyboard auto-repeat delay
00086D 28 31       1957   			JR	Z, OSBYTE_0B
00086F FE 0C       1958   			CP	0CH			; Keyboard auto-repeat rate
000871 28 54       1959   			JR	Z, OSBYTE_0C
000873 FE 13       1960   			CP	13H			; Wait for vblank
000875 28 77       1961   			JR	Z, OSBYTE_13
000877 FE 76       1962   			CP	76H			; Set keyboard LED
000879 28 7B       1963   			JR	Z, OSBYTE_76
00087B FE 81       1964   			CP	81H			; Read the keyboard
00087D CA 1E 09    1965   			JP	Z, OSBYTE_81
000880 FE 86       1966   			CP	86H			; Get cursor coordinates
000882 CA 38 09    1967   			JP	Z, OSBYTE_86
000885 FE 87       1968   			CP	87H			; Fetch current mode and character under cursor
000887 CA 67 09    1969   			JP	Z, OSBYTE_87
00088A FE A0       1970   			CP	A0H			; Fetch system variable
00088C CA 7D 09    1971   			JP	Z, OSBYTE_A0
00088F             1972   ;
00088F             1973   ; Anything else trips an error
00088F             1974   ;
00088F 3E FE       1975   HUH:    		LD      A,254			; Bad command error
000891 CD 37 3F    1976           		CALL    EXTERR
000894 42 61 64 20 1977           		DB    	"Bad command"
       63 6F 6D 6D 
       61 6E 64    
00089F 00          1978           		DEFB    0
0008A0             1979   
0008A0             1980   ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
0008A0             1981   ; Parameters:
0008A0             1982   ; - HL: Repeat delay
0008A0             1983   ;
0008A0             1984   OSBYTE_0B:		VDU	23
0008A0 3E 17       0001M1         LD      A, VAL
0008A2 CD 93 05    0002M1         CALL    OSWRCH
0008A5             1985   			VDU	0
0008A5 3E 00       0001M1         LD      A, VAL
0008A7 CD 93 05    0002M1         CALL    OSWRCH
0008AA             1986   			VDU	vdp_keystate
0008AA 3E 88       0001M1         LD      A, VAL
0008AC CD 93 05    0002M1         CALL    OSWRCH
0008AF             1987   			VDU	L
0008AF 7D          0001M1         LD      A, VAL
0008B0 CD 93 05    0002M1         CALL    OSWRCH
0008B3             1988   			VDU	H
0008B3 7C          0001M1         LD      A, VAL
0008B4 CD 93 05    0002M1         CALL    OSWRCH
0008B7             1989   			VDU	0
0008B7 3E 00       0001M1         LD      A, VAL
0008B9 CD 93 05    0002M1         CALL    OSWRCH
0008BC             1990   			VDU 	0
0008BC 3E 00       0001M1         LD      A, VAL
0008BE CD 93 05    0002M1         CALL    OSWRCH
0008C1             1991   			VDU	255
0008C1 3E FF       0001M1         LD      A, VAL
0008C3 CD 93 05    0002M1         CALL    OSWRCH
0008C6 C9          1992   			RET
0008C7             1993   
0008C7             1994   ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
0008C7             1995   ; Parameters:
0008C7             1996   ; - HL: Repeat rate
0008C7             1997   ;
0008C7             1998   OSBYTE_0C:		VDU	23
0008C7 3E 17       0001M1         LD      A, VAL
0008C9 CD 93 05    0002M1         CALL    OSWRCH
0008CC             1999   			VDU	0
0008CC 3E 00       0001M1         LD      A, VAL
0008CE CD 93 05    0002M1         CALL    OSWRCH
0008D1             2000   			VDU	vdp_keystate
0008D1 3E 88       0001M1         LD      A, VAL
0008D3 CD 93 05    0002M1         CALL    OSWRCH
0008D6             2001   			VDU	0
0008D6 3E 00       0001M1         LD      A, VAL
0008D8 CD 93 05    0002M1         CALL    OSWRCH
0008DB             2002   			VDU 	0
0008DB 3E 00       0001M1         LD      A, VAL
0008DD CD 93 05    0002M1         CALL    OSWRCH
0008E0             2003   			VDU	L
0008E0 7D          0001M1         LD      A, VAL
0008E1 CD 93 05    0002M1         CALL    OSWRCH
0008E4             2004   			VDU	H
0008E4 7C          0001M1         LD      A, VAL
0008E5 CD 93 05    0002M1         CALL    OSWRCH
0008E8             2005   			VDU	255
0008E8 3E FF       0001M1         LD      A, VAL
0008EA CD 93 05    0002M1         CALL    OSWRCH
0008ED C9          2006   			RET
0008EE             2007   
0008EE             2008   ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
0008EE             2009   ;
0008EE CD 6D 0A    2010   OSBYTE_13:		CALL	WAIT_VBLANK
0008F1 2E 00       2011   			LD	L, 0			; Returns 0
0008F3 C3 30 1B    2012   			JP	COUNT0
0008F6             2013   ;
0008F6             2014   ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
0008F6             2015   ; Parameters:
0008F6             2016   ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
0008F6             2017   ;
0008F6             2018   OSBYTE_76:		VDU	23
0008F6 3E 17       0001M1         LD      A, VAL
0008F8 CD 93 05    0002M1         CALL    OSWRCH
0008FB             2019   			VDU	0
0008FB 3E 00       0001M1         LD      A, VAL
0008FD CD 93 05    0002M1         CALL    OSWRCH
000900             2020   			VDU	vdp_keystate
000900 3E 88       0001M1         LD      A, VAL
000902 CD 93 05    0002M1         CALL    OSWRCH
000905             2021   			VDU	0
000905 3E 00       0001M1         LD      A, VAL
000907 CD 93 05    0002M1         CALL    OSWRCH
00090A             2022   			VDU 	0
00090A 3E 00       0001M1         LD      A, VAL
00090C CD 93 05    0002M1         CALL    OSWRCH
00090F             2023   			VDU	0
00090F 3E 00       0001M1         LD      A, VAL
000911 CD 93 05    0002M1         CALL    OSWRCH
000914             2024   			VDU	0
000914 3E 00       0001M1         LD      A, VAL
000916 CD 93 05    0002M1         CALL    OSWRCH
000919             2025   			VDU	L
000919 7D          0001M1         LD      A, VAL
00091A CD 93 05    0002M1         CALL    OSWRCH
00091D C9          2026   			RET
00091E             2027   
00091E             2028   ; OSBYTE 0x81: Read the keyboard
00091E             2029   ; Parameters:
00091E             2030   ; - HL = Time to wait (centiseconds)
00091E             2031   ; Returns:
00091E             2032   ; - F: Carry reset indicates time-out
00091E             2033   ; - A: If carry set, A = character typed
00091E             2034   ; Destroys: A,D,E,H,L,F
00091E             2035   ;
00091E CD 0D 06    2036   OSBYTE_81:		CALL	READKEY			; Read the keyboard
000921 28 09       2037   			JR	Z, @F 			; Skip if we have a key
000923 7C          2038   			LD	A, H 			; Check loop counter
000924 B5          2039   			OR 	L
000925 C8          2040   			RET 	Z 			; Return, we've not got a key at this point
000926 CD 6D 0A    2041   			CALL	WAIT_VBLANK 		; Wait a frame
000929 2B          2042   			DEC 	HL			; Decrement
00092A 18 F2       2043   			JR	OSBYTE_81		; And loop
00092C             2044   ;
00092C 21 F6 50    2045   @@:			LD	HL, KEYDOWN		; We have a key, so
00092F 36 00       2046   			LD	(HL), 0			; clear the keydown flag
000931 FE 1B       2047   			CP	1BH			; If we are not pressing ESC,
000933 37          2048   			SCF 				; then flag we've got a character
000934 C0          2049   			RET	NZ
000935 C3 F8 05    2050   			JP	ESCSET			; Handle ESC
000938             2051   
000938             2052   ; OSBYTE 0x86: Fetch cursor coordinates
000938             2053   ; Returns:
000938             2054   ; - DE: X Coordinate (POS)
000938             2055   ; - HL: Y Coordinate (VPOS)
000938             2056   ;
000938 DD E5       2057   OSBYTE_86:		PUSH	IX			; Get the system vars in IX
00093A             2058   			MOSCALL	mos_sysvars		; Reset the semaphore
00093A 3E 08       0001M1 			LD	A, function
00093C 49 CF       0002M1 			RST.LIS	08h
00093E 5B DD CB 04 2059   			RES.LIL	0, (IX+sysvar_vpd_pflags)
       86          
000943             2060   			VDU	23
000943 3E 17       0001M1         LD      A, VAL
000945 CD 93 05    0002M1         CALL    OSWRCH
000948             2061   			VDU	0
000948 3E 00       0001M1         LD      A, VAL
00094A CD 93 05    0002M1         CALL    OSWRCH
00094D             2062   			VDU	vdp_cursor
00094D 3E 82       0001M1         LD      A, VAL
00094F CD 93 05    0002M1         CALL    OSWRCH
000952 5B DD CB 04 2063   @@:			BIT.LIL	0, (IX+sysvar_vpd_pflags)
       46          
000957 28 F9       2064   			JR	Z, @B			; Wait for the result
000959 16 00       2065   			LD 	D, 0
00095B 62          2066   			LD	H, D
00095C 5B DD 5E 07 2067   			LD.LIL	E, (IX + sysvar_cursorX)
000960 5B DD 6E 08 2068   			LD.LIL	L, (IX + sysvar_cursorY)
000964 DD E1       2069   			POP	IX
000966 C9          2070   			RET
000967             2071   
000967             2072   ; OSBYTE 0x87: Fetch current mode and character under cursor
000967             2073   ;
000967 DD E5       2074   OSBYTE_87:		PUSH	IX
000969 CD 8B 0D    2075   			CALL	GETCSR			; Get the current screen position
00096C CD BD 01    2076   			CALL	GETSCHR_1		; Read character from screen
00096F 6F          2077   			LD	L, A
000970             2078   			MOSCALL	mos_sysvars
000970 3E 08       0001M1 			LD	A, function
000972 49 CF       0002M1 			RST.LIS	08h
000974 5B DD 66 27 2079   			LD.LIL	H, (IX+sysvar_scrMode)	; H: Screen mode
000978 DD E1       2080   			POP	IX
00097A C3 32 1B    2081   			JP	COUNT1
00097D             2082   
00097D             2083   ; OSBYTE 0xA0: Fetch system variable
00097D             2084   ; Parameters:
00097D             2085   ; - L: The system variable to fetch
00097D             2086   ;
00097D DD E5       2087   OSBYTE_A0:		PUSH	IX
00097F             2088   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
00097F 3E 08       0001M1 			LD	A, function
000981 49 CF       0002M1 			RST.LIS	08h
000983 5B 01 00 00 2089   			LD.LIL	BC, 0
       00          
000988 4D          2090   			LD	C, L			; BCU = L
000989 5B DD 09    2091   			ADD.LIL	IX, BC			; Add to IX
00098C 5B DD 6E 00 2092   			LD.LIL	L, (IX + 0)		; Fetch the return value
000990 DD E1       2093   			POP	IX
000992 C3 30 1B    2094   			JP 	COUNT0
000995             2095   
000995             2096   ; OSCLI
000995             2097   ;
000995             2098   ;
000995             2099   ;OSCLI - Process a MOS command
000995             2100   ;
000995 CD EF 09    2101   OSCLI: 			CALL    SKIPSP
000998 FE 0D       2102   			CP      CR
00099A C8          2103   			RET     Z
00099B FE 7C       2104   			CP      '|'
00099D C8          2105   			RET     Z
00099E EB          2106   			EX      DE,HL
00099F 21 FE 09    2107   			LD      HL,COMDS
0009A2 1A          2108   OSCLI0:			LD      A,(DE)
0009A3 CD F6 09    2109   			CALL    UPPRC
0009A6 BE          2110   			CP      (HL)
0009A7 28 0B       2111   			JR      Z,OSCLI2
0009A9 38 2E       2112   			JR      C,OSCLI6
0009AB CB 7E       2113   OSCLI1:			BIT     7,(HL)
0009AD 23          2114   			INC     HL
0009AE 28 FB       2115   			JR      Z,OSCLI1
0009B0 23          2116   			INC     HL
0009B1 23          2117   			INC     HL
0009B2 18 EE       2118   			JR      OSCLI0
0009B4             2119   ;
0009B4 D5          2120   OSCLI2:			PUSH    DE
0009B5 13          2121   OSCLI3:			INC     DE
0009B6 23          2122   			INC     HL
0009B7 1A          2123   			LD      A,(DE)
0009B8 CD F6 09    2124   			CALL    UPPRC
0009BB FE 2E       2125   			CP      '.'			; ABBREVIATED?
0009BD 28 0A       2126   			JR      Z,OSCLI4
0009BF AE          2127   			XOR     (HL)
0009C0 28 F3       2128   			JR      Z,OSCLI3
0009C2 FE 80       2129   			CP      80H
0009C4 28 03       2130   			JR      Z,OSCLI4
0009C6 D1          2131   			POP     DE
0009C7 18 E2       2132   			JR      OSCLI1
0009C9             2133   ;
0009C9 F1          2134   OSCLI4:			POP     AF
0009CA 13          2135   		        INC     DE
0009CB CB 7E       2136   OSCLI5:			BIT     7,(HL)
0009CD 23          2137   			INC     HL
0009CE 28 FB       2138   			JR      Z,OSCLI5
0009D0 7E          2139   			LD      A,(HL)
0009D1 23          2140   			INC     HL
0009D2 66          2141   			LD      H,(HL)
0009D3 6F          2142   			LD      L,A
0009D4 E5          2143   			PUSH    HL
0009D5 EB          2144   			EX      DE,HL
0009D6 C3 EF 09    2145   			JP      SKIPSP
0009D9             2146   ;
0009D9 EB          2147   OSCLI6:			EX	DE, HL			; HL: Buffer for command
0009DA 11 00 52    2148   			LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0009DD D5          2149   			PUSH	DE			; Store buffer address
0009DE CD 4F 05    2150   			CALL	CSTR_LINE		; Fetch the line
0009E1 E1          2151   			POP	HL			; HL: Pointer to command string in ACCS
0009E2 FD E5       2152   			PUSH	IY
0009E4             2153   			MOSCALL	mos_oscli		; Returns OSCLI error in A
0009E4 3E 10       0001M1 			LD	A, function
0009E6 49 CF       0002M1 			RST.LIS	08h
0009E8 FD E1       2154   			POP	IY
0009EA B7          2155   			OR	A			; 0 means MOS returned OK
0009EB C8          2156   			RET	Z			; So don't do anything
0009EC C3 91 07    2157   			JP 	OSERROR			; Otherwise it's a MOS error
0009EF             2158   
0009EF 7E          2159   SKIPSP:			LD      A,(HL)
0009F0 FE 20       2160           		CP      ' '
0009F2 C0          2161           		RET     NZ
0009F3 23          2162           		INC     HL
0009F4 18 F9       2163           		JR      SKIPSP
0009F6             2164   
0009F6 E6 7F       2165   UPPRC:  		AND     7FH
0009F8 FE 60       2166   			CP      '`'
0009FA D8          2167   			RET     C
0009FB E6 5F       2168   			AND     5FH			; CONVERT TO UPPER CASE
0009FD C9          2169   			RET
0009FE             2170   
0009FE             2171   ; Each command has bit 7 of the last character set, and is followed by the address of the handler
0009FE             2172   ; These must be in alphabetical order
0009FE             2173   ;
0009FE 42 59 45    2174   COMDS:  		DB	"BY","E"+80h		; BYE
000A01 0E 0A       2175   			DW	BYE
000A03 45 44 49 54 2176   			DB	"EDI","T"+80h		; EDIT
000A07 19 0A       2177   			DW	STAR_EDIT
000A09 46 58       2178   			DB	"F","X"+80h		; FX
000A0B 55 0A       2179   			DW	STAR_FX
000A0D             2180   ;			DB	'VERSIO','N'+80h	; VERSION
000A0D             2181   ;			DW	STAR_VERSION
000A0D FF          2182   			DB	FFh
000A0E             2183   
000A0E             2184   ; *BYE
000A0E             2185   ;
000A0E CD 48 04    2186   BYE:			CALL	VBLANK_STOP		; Restore MOS interrupts
000A11 5B DD E1    2187   			POP.LIL	IX 			; The return address to init
000A14 21 00 00    2188   			LD	HL, 0			; The return code
000A17 DD E9       2189   			JP	(IX)
000A19             2190   
000A19             2191   ; *EDIT linenum
000A19             2192   ;
000A19 CD BE 04    2193   STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
000A1C EB          2194   			EX	DE, HL			; HL: Line number
000A1D CD 25 41    2195   			CALL	FINDL			; HL: Address in RAM of tokenised line
000A20 3E 29       2196   			LD	A, 41			; F:NZ If the line is not found
000A22 C2 26 3F    2197   			JP	NZ, ERROR_		; Do error 41: No such line in that case
000A25             2198   ;
000A25             2199   ; Use LISTIT to output the line to the ACCS buffer
000A25             2200   ;
000A25 23          2201   			INC	HL			; Skip the length byte
000A26 5E          2202   			LD	E, (HL)			; Fetch the line number
000A27 23          2203   			INC	HL
000A28 56          2204   			LD	D, (HL)
000A29 23          2205   			INC	HL
000A2A DD 21 00 52 2206   			LD	IX, ACCS		; Pointer to where the copy is to be stored
000A2E DD 22 F2 50 2207   			LD	(OSWRCHPT), IX
000A32 DD 21 FE 54 2208   			LD	IX, LISTON		; Pointer to LISTON variable in RAM
000A36 DD 7E 00    2209   			LD	A, (IX)			; Store that variable
000A39 F5          2210   			PUSH	AF
000A3A DD 36 00 09 2211   			LD	(IX), 09h		; Set to echo to buffer
000A3E CD 3F 40    2212   			CALL	LISTIT
000A41 F1          2213   			POP	AF
000A42 DD 77 00    2214   			LD	(IX), A			; Restore the original LISTON variable
000A45 21 00 52    2215   			LD	HL, ACCS		; HL: ACCS
000A48 5D          2216   			LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
000A49 CD CB 05    2217   			CALL	OSLINE1			; Invoke the editor
000A4C CD 1B 07    2218   			CALL	OSEDIT
000A4F DC FC 3F    2219   			CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
000A52 C3 92 37    2220   			JP      CLOOP			; Jump back to immediate mode
000A55             2221   
000A55             2222   ; OSCLI FX n
000A55             2223   ;
000A55 CD BE 04    2224   STAR_FX:		CALL	ASC_TO_NUMBER
000A58 4B          2225   			LD	C, E			; C: Save FX #
000A59 CD BE 04    2226   			CALL	ASC_TO_NUMBER
000A5C 7A          2227   			LD	A, D  			; Is first parameter > 255?
000A5D B7          2228   			OR 	A
000A5E 28 03       2229   			JR	Z, STAR_FX1		; Yes, so skip next bit
000A60 EB          2230   			EX	DE, HL 			; Parameter is 16-bit
000A61 18 06       2231   			JR	STAR_FX2
000A63             2232   ;
000A63 43          2233   STAR_FX1:		LD	B, E 			; B: Save First parameter
000A64 CD BE 04    2234   			CALL	ASC_TO_NUMBER		; Fetch second parameter
000A67 68          2235   			LD	L, B 			; L: First parameter
000A68 63          2236   			LD	H, E 			; H: Second parameter
000A69             2237   ;
000A69 79          2238   STAR_FX2:		LD	A, C 			; A: FX #
000A6A C3 6B 08    2239   			JP	OSBYTE
000A6D             2240   
000A6D             2241   ; Helper Functions
000A6D             2242   ;
000A6D DD E5       2243   WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
000A6F             2244   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
000A6F 3E 08       0001M1 			LD	A, function
000A71 49 CF       0002M1 			RST.LIS	08h
000A73 5B DD 7E 00 2245   			LD.LIL	A, (IX + sysvar_time + 0)
000A77 5B DD BE 00 2246   @@:			CP.LIL 	A, (IX + sysvar_time + 0)
000A7B 28 FA       2247   			JR	Z, @B
000A7D DD E1       2248   			POP	IX
000A7F C9          2249   			RET
000A80             2250   			; --- End agon_os.asm ---
000A80             2251   
000A80             2252   ; --- Begin agon_sound.asm ---
000A80             2253   ;
000A80             2254   ; Title:	BBC Basic for AGON - Audio stuff
000A80             2255   ; Author:	Dean Belfield
000A80             2256   ; Created:	04/12/2024
000A80             2257   ; Last Updated:	11/12/2024
000A80             2258   ;
000A80             2259   ; Modinfo:
000A80             2260   ; 11/12/2024:	Modified SOUND_ to work with OSWORD
000A80             2261   
000A80             2262   			.ASSUME	ADL = 0
000A80             2263   ;	.ORG 0x0000
000A80             2264   
000A80             2265   			; INCLUDE	"equs.inc"
000A80             2266   			; INCLUDE "macros.inc"
000A80             2267   			; INCLUDE "mos_api.inc"	; In MOS/src
000A80             2268   
000A80             2269   ;			SEGMENT CODE
000A80             2270   
000A80             2271   ;			XDEF	SOUND_
000A80             2272   
000A80             2273   ;			XREF	OSWRCH
000A80             2274   ;			XREF	VDU_BUFFER
000A80             2275   ;			XREF	LTRAP
000A80             2276   
000A80             2277   ; SOUND channel,volume,pitch,duration
000A80             2278   ; Parameters:
000A80             2279   ; - HL: Pointer to data
000A80             2280   ;   - 0,1: Channel
000A80             2281   ;   - 2,3: Volume 0 (off) to 15 (full volume)
000A80             2282   ;   - 4,5: Pitch 0 - 255
000A80             2283   ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000A80             2284   ;
000A80 7E          2285   SOUND_:			LD	A, (HL)			; Channel
000A81 32 00 52    2286   			LD	(VDU_BUFFER+0), A
000A84 AF          2287   			XOR	A			; Waveform
000A85 32 01 52    2288   			LD	(VDU_BUFFER+1), A
000A88 23          2289   			INC	HL
000A89 23          2290   			INC	HL
000A8A             2291   ;
000A8A             2292   ; Calculate the volume
000A8A             2293   ;
000A8A 4E          2294   			LD	C, (HL)			; Volume
000A8B 06 06       2295   			LD	B, 6			; C already contains the volume
000A8D ED 4C       2296   			MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
000A8F 79          2297   			LD	A, C
000A90 32 02 52    2298   			LD	(VDU_BUFFER+2), A
000A93 23          2299   			INC	HL
000A94 23          2300   			INC	HL
000A95             2301   ;
000A95             2302   ; And the frequency
000A95             2303   ;
000A95 E5          2304   			PUSH	HL
000A96 6E          2305   			LD	L, (HL)
000A97 26 00       2306   			LD	H, 0
000A99 11 0B 0B    2307   			LD	DE, SOUND_FREQ_LOOKUP
000A9C 29          2308   			ADD	HL, HL
000A9D 19          2309   			ADD	HL, DE
000A9E 7E          2310   			LD	A, (HL)
000A9F 32 03 52    2311   			LD	(VDU_BUFFER+3), A
000AA2 23          2312   			INC	HL
000AA3 7E          2313   			LD	A, (HL)
000AA4 32 04 52    2314   			LD	(VDU_BUFFER+4), A
000AA7 E1          2315   			POP	HL
000AA8 23          2316   			INC	HL
000AA9 23          2317   			INC	HL
000AAA             2318   ;
000AAA             2319   ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
000AAA             2320   ;
000AAA 4E          2321   			LD	C, (HL)
000AAB 06 32       2322   			LD	B, 50			; C contains the duration, so MLT by 50
000AAD ED 4C       2323   			MLT	BC
000AAF ED 43 05 52 2324   			LD	(VDU_BUFFER+5), BC
000AB3             2325   ;
000AB3 DD E5       2326   			PUSH	IX			; Get the system vars in IX
000AB5             2327   			MOSCALL	mos_sysvars		; Reset the semaphore
000AB5 3E 08       0001M1 			LD	A, function
000AB7 49 CF       0002M1 			RST.LIS	08h
000AB9 5B DD CB 04 2328   SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
       9E          
000ABE             2329   ;
000ABE             2330   			VDU	23			; Send the sound command
000ABE 3E 17       0001M1         LD      A, VAL
000AC0 CD 93 05    0002M1         CALL    OSWRCH
000AC3             2331   			VDU	0
000AC3 3E 00       0001M1         LD      A, VAL
000AC5 CD 93 05    0002M1         CALL    OSWRCH
000AC8             2332   			VDU	vdp_audio
000AC8 3E 85       0001M1         LD      A, VAL
000ACA CD 93 05    0002M1         CALL    OSWRCH
000ACD             2333   			VDU	(VDU_BUFFER+0)		; 0: Channel
000ACD 3A 00 52    0001M1         LD      A, VAL
000AD0 CD 93 05    0002M1         CALL    OSWRCH
000AD3             2334   			VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
000AD3 3A 01 52    0001M1         LD      A, VAL
000AD6 CD 93 05    0002M1         CALL    OSWRCH
000AD9             2335   			VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
000AD9 3A 02 52    0001M1         LD      A, VAL
000ADC CD 93 05    0002M1         CALL    OSWRCH
000ADF             2336   			VDU	(VDU_BUFFER+3)		; 3: Frequency L
000ADF 3A 03 52    0001M1         LD      A, VAL
000AE2 CD 93 05    0002M1         CALL    OSWRCH
000AE5             2337   			VDU	(VDU_BUFFER+4)		; 4: Frequency H
000AE5 3A 04 52    0001M1         LD      A, VAL
000AE8 CD 93 05    0002M1         CALL    OSWRCH
000AEB             2338   			VDU	(VDU_BUFFER+5)		; 5: Duration L
000AEB 3A 05 52    0001M1         LD      A, VAL
000AEE CD 93 05    0002M1         CALL    OSWRCH
000AF1             2339   			VDU	(VDU_BUFFER+6)		; 6: Duration H
000AF1 3A 06 52    0001M1         LD      A, VAL
000AF4 CD 93 05    0002M1         CALL    OSWRCH
000AF7             2340   ;
000AF7             2341   ; Wait for acknowledgement
000AF7             2342   ;
000AF7 5B DD CB 04 2343   @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
       5E          
000AFC 28 F9       2344   			JR	Z, @B			; Wait for the result
000AFE CD 18 06    2345   			CALL	LTRAP			; Check for ESC
000B01 5B DD 7E 0E 2346   			LD.LIL	A, (IX+sysvar_audioSuccess)
000B05 A7          2347   			AND	A			; Check if VDP has queued the note
000B06 28 B1       2348   			JR	Z, SOUND0		; No, so loop back and send again
000B08             2349   ;
000B08 DD E1       2350   			POP	IX
000B0A C9          2351   			RET
000B0B             2352   
000B0B             2353   ; FROM agon_os.asm
000B0B             2354   ; SOUND channel,volume,pitch,duration
000B0B             2355   ; Parameters:
000B0B             2356   ; - HL: Pointer to data
000B0B             2357   ;   - 0,1: Channel
000B0B             2358   ;   - 2,3: Volume 0 (off) to 15 (full volume)
000B0B             2359   ;   - 4,5: Pitch 0 - 255
000B0B             2360   ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000B0B             2361   ;
000B0B             2362   OSWORD_07:		EQU	SOUND_
000B0B             2363   ; end from agon_os.asm
000B0B             2364   
000B0B             2365   ; Frequency Lookup Table
000B0B             2366   ; Set up to replicate the BBC Micro audio frequencies
000B0B             2367   ;
000B0B             2368   ; Split over 5 complete octaves, with 53 being middle C
000B0B             2369   ; * C4: 262hz
000B0B             2370   ; + A4: 440hz
000B0B             2371   ;
000B0B             2372   ;	2	3	4	5	6	7	8
000B0B             2373   ;
000B0B             2374   ; B	1	49	97	145	193	241
000B0B             2375   ; A#	0	45	93	141	189	237
000B0B             2376   ; A		41	89+	137	185	233
000B0B             2377   ; G#		37	85	133	181	229
000B0B             2378   ; G		33	81	129	177	225
000B0B             2379   ; F#		29	77	125	173	221
000B0B             2380   ; F		25	73	121	169	217
000B0B             2381   ; E		21	69	117	165	213
000B0B             2382   ; D#		17	65	113	161	209
000B0B             2383   ; D		13	61	109	157	205	253
000B0B             2384   ; C#		9	57	105	153	201	249
000B0B             2385   ; C		5	53*	101	149	197	245
000B0B             2386   ;
000B0B 75 00 76 00 2387   SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
       78 00 7A 00 
       7B 00 83 00 
       85 00 87 00 
000B1B 89 00 8B 00 2388   			DW	 137,  139,  141,  143,  145,  147,  149,  151
       8D 00 8F 00 
       91 00 93 00 
       95 00 97 00 
000B2B 99 00 9C 00 2389   			DW	 153,  156,  158,  160,  162,  165,  167,  170
       9E 00 A0 00 
       A2 00 A5 00 
       A7 00 AA 00 
000B3B AC 00 AF 00 2390   			DW	 172,  175,  177,  180,  182,  185,  188,  190
       B1 00 B4 00 
       B6 00 B9 00 
       BC 00 BE 00 
000B4B C1 00 C4 00 2391   			DW	 193,  196,  199,  202,  205,  208,  211,  214
       C7 00 CA 00 
       CD 00 D0 00 
       D3 00 D6 00 
000B5B D9 00 DC 00 2392   			DW	 217,  220,  223,  226,  230,  233,  236,  240
       DF 00 E2 00 
       E6 00 E9 00 
       EC 00 F0 00 
000B6B F3 00 F7 00 2393   			DW	 243,  247,  251,  254,  258,  262,  265,  269
       FB 00 FE 00 
       02 01 06 01 
       09 01 0D 01 
000B7B 11 01 15 01 2394   			DW	 273,  277,  281,  285,  289,  294,  298,  302
       19 01 1D 01 
       21 01 26 01 
       2A 01 2E 01 
000B8B 33 01 37 01 2395   			DW	 307,  311,  316,  320,  325,  330,  334,  339
       3C 01 40 01 
       45 01 4A 01 
       4E 01 53 01 
000B9B 58 01 5D 01 2396   			DW	 344,  349,  354,  359,  365,  370,  375,  381
       62 01 67 01 
       6D 01 72 01 
       77 01 7D 01 
000BAB 82 01 88 01 2397   			DW	 386,  392,  398,  403,  409,  415,  421,  427
       8E 01 93 01 
       99 01 9F 01 
       A5 01 AB 01 
000BBB B2 01 B8 01 2398   			DW	 434,  440,  446,  453,  459,  466,  473,  480
       BE 01 C5 01 
       CB 01 D2 01 
       D9 01 E0 01 
000BCB E7 01 EE 01 2399   			DW	 487,  494,  501,  508,  516,  523,  531,  539
       F5 01 FC 01 
       04 02 0B 02 
       13 02 1B 02 
000BDB 22 02 2A 02 2400   			DW	 546,  554,  562,  571,  579,  587,  596,  605
       32 02 3B 02 
       43 02 4B 02 
       54 02 5D 02 
000BEB 65 02 6E 02 2401   			DW	 613,  622,  631,  641,  650,  659,  669,  679
       77 02 81 02 
       8A 02 93 02 
       9D 02 A7 02 
000BFB B1 02 BB 02 2402   			DW	 689,  699,  709,  719,  729,  740,  751,  762
       C5 02 CF 02 
       D9 02 E4 02 
       EF 02 FA 02 
000C0B 05 03 10 03 2403   			DW	 773,  784,  795,  807,  819,  831,  843,  855
       1B 03 27 03 
       33 03 3F 03 
       4B 03 57 03 
000C1B 63 03 70 03 2404   			DW	 867,  880,  893,  906,  919,  932,  946,  960
       7D 03 8A 03 
       97 03 A4 03 
       B2 03 C0 03 
000C2B CE 03 DC 03 2405   			DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
       EA 03 F9 03 
       08 04 17 04 
       26 04 36 04 
000C3B 45 04 55 04 2406   			DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
       65 04 76 04 
       86 04 97 04 
       A8 04 BA 04 
000C4B CB 04 DD 04 2407   			DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
       EF 04 02 05 
       14 05 27 05 
       3A 05 4E 05 
000C5B 62 05 76 05 2408   			DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
       8A 05 9F 05 
       B3 05 C9 05 
       DE 05 F4 05 
000C6B 0A 06 21 06 2409   			DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
       38 06 4F 06 
       66 06 7E 06 
       96 06 AF 06 
000C7B C8 06 E1 06 2410   			DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
       FA 06 14 07 
       2F 07 4A 07 
       65 07 80 07 
000C8B 9C 07 B8 07 2411   			DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
       D5 07 F2 07 
       10 08 2D 08 
       4B 08 6A 08 
000C9B 8A 08 A9 08 2412   			DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
       CA 08 EA 08 
       0C 09 2D 09 
       4F 09 72 09 
000CAB 95 09 B9 09 2413   			DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
       DD 09 02 0A 
       27 0A 4D 0A 
       73 0A 9A 0A 
000CBB C2 0A EA 0A 2414   			DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
       12 0B 3C 0B 
       66 0B 90 0B 
       BB 0B E7 0B 
000CCB 13 0C 40 0C 2415   			DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
       6E 0C 9C 0C 
       CB 0C FA 0C 
       2B 0D 5C 0D 
000CDB 8E 0D C0 0D 2416   			DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
       F3 0D 27 0E 
       5C 0E 91 0E 
       C8 0E FF 0E 
000CEB 36 0F 6F 0F 2417   			DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
       A9 0F E3 0F 
       1E 10 5A 10 
       97 10 D5 10 
000CFB 13 11 53 11 2418   			DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
       93 11 D5 11 
       17 12 5B 12 
       9F 12 E4 12 
000D0B             2419   ; --- End agon_sound.asm ---
000D0B             2420   
000D0B             2421   ; --- Begin acorn.asm ---
000D0B             2422   ;
000D0B             2423   ;Automatically created from original source on 2024-12-15 15:29:12
000D0B             2424   ;
000D0B             2425                   .ASSUME ADL = 0
000D0B             2426   ;	.ORG 0x0000
000D0B             2427   ;                SEGMENT CODE
000D0B             2428   ;
000D0B             2429   ;PATCH FOR BBC BASIC TO CP/M 2.2 & 3.0
000D0B             2430   ;* ACORN COMPUTERS Z80 TUBE VERSION  *
000D0B             2431   ;(C) COPYRIGHT R.T.RUSSELL, 02-01-1984
000D0B             2432   ;VERSION 5.0, 12-07-2024
000D0B             2433   ;
000D0B             2434   ;                XREF	OSWRCH
000D0B             2435   ;                XREF	OSWORD
000D0B             2436   ;                XREF	OSBYTE
000D0B             2437   ;
000D0B             2438   ; ESC            EQU	1BH
000D0B             2439   TBY:            EQU	0FH
000D0B             2440   ; TTO:            EQU	0B8H in main.asm
000D0B             2441   TFILL:          EQU	03H
000D0B             2442   ;
000D0B             2443   ;                XREF	ITEMI
000D0B             2444   ;                XREF	EXPRI
000D0B             2445   ;                XREF	COMMA
000D0B             2446   ;                XREF	TERMQ
000D0B             2447   ;                XREF	BRAKET
000D0B             2448   ;                XREF	EXTERR
000D0B             2449   ;                XREF	STOREN
000D0B             2450   ;                XREF	TRAP
000D0B             2451   ;                XREF	VAR_
000D0B             2452   ;                XREF	NXT
000D0B             2453   ;                XREF	XEQ
000D0B             2454   ;
000D0B             2455   ;                XREF	ACCS
000D0B             2456   ;                XREF	COUNT
000D0B             2457   ;                XREF	WIDTH
000D0B             2458   ;                XREF	SCRAP
000D0B             2459   ;
000D0B             2460   ;                XDEF	OSCALL
000D0B             2461   ;                XDEF	CLRSCN
000D0B             2462   ;                XDEF	PUTCSR
000D0B             2463   ;                XDEF	GETCSR
000D0B             2464   ;                XDEF	PUTIME
000D0B             2465   ;                XDEF	GETIME
000D0B             2466   ;                XDEF	OSKEY
000D0B             2467   ;
000D0B             2468   ;                XDEF	CLG
000D0B             2469   ;                XDEF	MOVE
000D0B             2470   ;                XDEF	DRAW
000D0B             2471   ;                XDEF	PLOT
000D0B             2472   ;                XDEF	MODE
000D0B             2473   ;                XDEF	COLOUR
000D0B             2474   ;                XDEF	GCOL
000D0B             2475   ;                XDEF	ADVAL
000D0B             2476   ;                XDEF	SOUND
000D0B             2477   ;                XDEF	ENVEL
000D0B             2478   ;                XDEF	POINT
000D0B             2479   ;
000D0B             2480   ;                XDEF	CIRCLE
000D0B             2481   ;                XDEF	ELLIPS
000D0B             2482   ;                XDEF	FILL
000D0B             2483   ;                XDEF	MOUSE
000D0B             2484   ;                XDEF	ORIGIN
000D0B             2485   ;                XDEF	RECTAN
000D0B             2486   ;                XDEF	LINE
000D0B             2487   ;                XDEF	TINT
000D0B             2488   ;                XDEF	WAIT
000D0B             2489   ;                XDEF	SYS
000D0B             2490   ;                XDEF	CSRON
000D0B             2491   ;                XDEF	CSROFF
000D0B             2492   ;
000D0B             2493   ;                XDEF	PUTIMS
000D0B             2494   ;                XDEF	GETIMS
000D0B             2495   ;                XDEF	TINTFN
000D0B             2496   ;                XDEF	MODEFN
000D0B             2497   ;                XDEF	WIDFN
000D0B             2498   ;
000D0B             2499   ;GETIME	- Read elapsed-time clock.
000D0B             2500   ;  	  Outputs:  DEHL = elapsed time (centiseconds)
000D0B             2501   ; 	  Destroys: A,D,E,H,L,F
000D0B             2502   ;
000D0B 3E 01       2503   GETIME:         LD	A,1
000D0D 21 F9 50    2504                   LD	HL,SCRAP
000D10 CD 4D 08    2505                   CALL	OSWORD
000D13 21 F9 50    2506                   LD	HL,SCRAP
000D16 5E          2507                   LD	E,(HL)
000D17 23          2508                   INC	HL
000D18 56          2509                   LD	D,(HL)
000D19 23          2510                   INC	HL
000D1A 7E          2511                   LD	A,(HL)
000D1B 23          2512                   INC	HL
000D1C 66          2513                   LD	H,(HL)
000D1D 6F          2514                   LD	L,A
000D1E EB          2515                   EX	DE,HL
000D1F C9          2516                   RET
000D20             2517   ;
000D20             2518   ;GETIMS	- Read real-time clock as string.
000D20             2519   ;  	  Outputs:  TIME$ in string accumulator
000D20             2520   ;                   E = string length (25)
000D20             2521   ; 	  Destroys: A,B,C,D,E,H,L,F
000D20             2522   ;
000D20 3E 0E       2523   GETIMS:         LD	A,14
000D22 21 F9 50    2524                   LD	HL,SCRAP
000D25 36 00       2525                   LD	(HL),0
000D27 CD 4D 08    2526                   CALL	OSWORD
000D2A 21 F9 50    2527                   LD	HL,SCRAP
000D2D 11 00 52    2528                   LD	DE,ACCS
000D30 7E          2529                   LD	A,(HL)
000D31 BB          2530                   CP	E
000D32 C8          2531                   RET	Z
000D33 01 19 00    2532                   LD	BC,25
000D36 ED B0       2533                   LDIR
000D38 C9          2534                   RET
000D39             2535   ;
000D39             2536   ;
000D39             2537   ;PUTIME	- Load elapsed-time clock.
000D39             2538   ;   	  Inputs:   DEHL = time to load (centiseconds)
000D39             2539   ; 	  Destroys: A,D,E,H,L,F
000D39             2540   ;
000D39 DD E5       2541   PUTIME:         PUSH	IX
000D3B DD 21 F9 50 2542                   LD	IX,SCRAP
000D3F DD 75 00    2543                   LD	(IX+0),L
000D42 DD 74 01    2544                   LD	(IX+1),H
000D45 DD 73 02    2545                   LD	(IX+2),E
000D48 DD 72 03    2546                   LD	(IX+3),D
000D4B 3E 02       2547                   LD	A,2
000D4D 21 F9 50    2548                   LD	HL,SCRAP
000D50 CD 4D 08    2549                   CALL	OSWORD
000D53 DD E1       2550                   POP	IX
000D55 C9          2551                   RET
000D56             2552   ;
000D56             2553   ;PUTIMS	- Wtite real-time clock as string.
000D56             2554   ;  	  Inputs:   string in string accumulator
000D56             2555   ;                   E = string length
000D56             2556   ; 	  Destroys: A,B,C,D,E,H,L,F
000D56             2557   ;
000D56 7B          2558   PUTIMS:         LD	A,E		;Length
000D57 FE 1A       2559                   CP	26
000D59 D0          2560                   RET	NC
000D5A 06 00       2561                   LD	B,0
000D5C 4F          2562                   LD	C,A
000D5D 11 FA 50    2563                   LD	DE,SCRAP+1
000D60 21 00 52    2564                   LD	HL,ACCS
000D63 ED B0       2565                   LDIR
000D65 21 F9 50    2566                   LD	HL,SCRAP
000D68 77          2567                   LD	(HL),A
000D69 3E 0F       2568                   LD	A,15
000D6B C3 4D 08    2569                   JP	OSWORD
000D6E             2570   ;
000D6E             2571   ;
000D6E             2572   ;CLRSCN	- Clear screen.
000D6E             2573   ; 	  Destroys: A,D,E,H,L,F
000D6E             2574   ;
000D6E 3E 0C       2575   CLRSCN:         LD	A,0CH
000D70 C3 93 05    2576                   JP	OSWRCH
000D73             2577   ;
000D73             2578   ;
000D73             2579   ;OSKEY	- Sample keyboard with specified wait.
000D73             2580   ;   	  Inputs:   HL = Time to wait (centiseconds)
000D73             2581   ;  	  Outputs:  Carry reset indicates time-out.
000D73             2582   ;                   If carry set, A = character typed.
000D73             2583   ; 	  Destroys: A,D,E,H,L,F
000D73             2584   ;
000D73 3E 81       2585   OSKEY:          LD	A,129
000D75 CD 6B 08    2586                   CALL	OSBYTE
000D78 7C          2587                   LD	A,H
000D79 B7          2588                   OR	A
000D7A C0          2589                   RET	NZ		;TIME-OUT, CARRY RESET
000D7B 7D          2590                   LD	A,L
000D7C 37          2591                   SCF
000D7D C9          2592                   RET			;NORMAL, CARRY SET
000D7E             2593   ;
000D7E             2594   ;PUTCSR	- Move cursor to specified position.
000D7E             2595   ;   	  Inputs:   DE = horizontal position (LHS=0)
000D7E             2596   ;                   HL = vertical position (TOP=0)
000D7E             2597   ; 	  Destroys: A,D,E,H,L,F
000D7E             2598   ;
000D7E 3E 1F       2599   PUTCSR:         LD	A,1FH
000D80 CD 93 05    2600                   CALL	OSWRCH
000D83 7B          2601                   LD	A,E
000D84 CD 93 05    2602                   CALL	OSWRCH
000D87 7D          2603                   LD	A,L
000D88 C3 93 05    2604                   JP	OSWRCH
000D8B             2605   ;
000D8B             2606   ;GETCSR	- Return cursor coordinates.
000D8B             2607   ;   	  Outputs:  DE = X coordinate (POS)
000D8B             2608   ;                   HL = Y coordinate (VPOS)
000D8B             2609   ;  	  Destroys: A,D,E,H,L,F
000D8B             2610   ;
000D8B 3E 86       2611   GETCSR:         LD	A,134
000D8D CD 6B 08    2612                   CALL	OSBYTE
000D90 5D          2613                   LD	E,L
000D91 6C          2614                   LD	L,H
000D92 16 00       2615                   LD	D,0
000D94 62          2616                   LD	H,D
000D95 C9          2617                   RET
000D96             2618   ;
000D96             2619   ;POINT - var=POINT(x,y)
000D96             2620   ;
000D96 CD 15 18    2621   POINT:          CALL	EXPRI
000D99 D9          2622                   EXX
000D9A E5          2623                   PUSH	HL
000D9B CD D3 10    2624                   CALL	CEXPRI
000D9E D9          2625                   EXX
000D9F D1          2626                   POP	DE
000DA0 CD 90 20    2627                   CALL	BRAKET
000DA3 DD 21 F9 50 2628                   LD	IX,SCRAP
000DA7 DD 73 00    2629                   LD	(IX+0),E
000DAA DD 72 01    2630                   LD	(IX+1),D
000DAD DD 75 02    2631                   LD	(IX+2),L
000DB0 DD 74 03    2632                   LD	(IX+3),H
000DB3 21 F9 50    2633                   LD	HL,SCRAP
000DB6 3E 09       2634                   LD	A,9
000DB8 CD 4D 08    2635                   CALL	OSWORD
000DBB DD 7E 04    2636                   LD	A,(IX+4)
000DBE 6F          2637                   LD	L,A
000DBF C6 01       2638                   ADD	A,1
000DC1 9F          2639                   SBC	A,A
000DC2 67          2640                   LD	H,A
000DC3 D9          2641   RETEXX:         EXX
000DC4 67          2642                   LD	H,A
000DC5 6F          2643                   LD	L,A
000DC6 AF          2644                   XOR	A
000DC7 4F          2645                   LD	C,A
000DC8 C9          2646                   RET
000DC9             2647   ;
000DC9             2648   ;ADVAL - var=ADVAL(n)
000DC9             2649   ;
000DC9 CD 42 18    2650   ADVAL:          CALL	ITEMI
000DCC D9          2651                   EXX
000DCD 3E 80       2652                   LD	A,128
000DCF CD 6B 08    2653                   CALL	OSBYTE
000DD2 AF          2654                   XOR	A
000DD3 18 EE       2655                   JR	RETEXX
000DD5             2656   ;
000DD5             2657   ;MODEFN - var=MODE
000DD5             2658   ;
000DD5 3E 87       2659   MODEFN:         LD	A,135
000DD7 CD 6B 08    2660                   CALL	OSBYTE
000DDA 6C          2661                   LD	L,H
000DDB AF          2662   RETU8:          XOR	A
000DDC 67          2663                   LD	H,A
000DDD 18 E4       2664                   JR	RETEXX
000DDF             2665   ;
000DDF             2666   ;WIDFN - var=WIDTH
000DDF             2667   ;
000DDF 3A FC 54    2668   WIDFN:          LD	A,(WIDTH)
000DE2 6F          2669                   LD	L,A
000DE3 18 F6       2670                   JR	RETU8
000DE5             2671   ;
000DE5             2672   ;ENVEL - ENVELOPE var,var,var,var,var,var,var,
000DE5             2673   ;                 var,var,var,var,var,var,var
000DE5             2674   ;
000DE5 06 00       2675   ENVEL:          LD	B,0
000DE7 DD 21 F9 50 2676                   LD	IX,SCRAP
000DEB C5          2677                   PUSH	BC
000DEC DD E5       2678                   PUSH	IX
000DEE CD 15 18    2679   ENVEL1:         CALL	EXPRI
000DF1 D9          2680                   EXX
000DF2 DD E1       2681                   POP	IX
000DF4 C1          2682                   POP	BC
000DF5 DD 75 00    2683                   LD	(IX),L
000DF8 78          2684                   LD	A,B
000DF9 FE 0D       2685                   CP	13
000DFB 28 0B       2686                   JR	Z,ENVEL2
000DFD 04          2687                   INC	B
000DFE DD 23       2688                   INC	IX
000E00 C5          2689                   PUSH	BC
000E01 DD E5       2690                   PUSH	IX
000E03 CD 84 20    2691                   CALL	COMMA
000E06 18 E6       2692                   JR	ENVEL1
000E08 21 F9 50    2693   ENVEL2:         LD	HL,SCRAP
000E0B 3E 08       2694                   LD	A,8
000E0D CD 4D 08    2695                   CALL	OSWORD
000E10 C3 7B 24    2696                   JP	XEQ
000E13             2697   ;
000E13             2698   ;SOUND - SOUND var,var,var,var
000E13             2699   ;
000E13 06 00       2700   SOUND:          LD	B,0
000E15 DD 21 F9 50 2701                   LD	IX,SCRAP
000E19 C5          2702                   PUSH	BC
000E1A DD E5       2703                   PUSH	IX
000E1C CD 15 18    2704   SOUND1:         CALL	EXPRI
000E1F D9          2705                   EXX
000E20 DD E1       2706                   POP	IX
000E22 C1          2707                   POP	BC
000E23 DD 75 00    2708                   LD	(IX+0),L
000E26 DD 74 01    2709                   LD	(IX+1),H
000E29 DD 23       2710                   INC	IX
000E2B DD 23       2711                   INC	IX
000E2D 04          2712                   INC	B
000E2E 04          2713                   INC	B
000E2F 78          2714                   LD	A,B
000E30 FE 08       2715                   CP	8
000E32 28 08       2716                   JR	Z,SOUND2
000E34 C5          2717                   PUSH	BC
000E35 DD E5       2718                   PUSH	IX
000E37 CD 84 20    2719                   CALL	COMMA
000E3A 18 E0       2720                   JR	SOUND1
000E3C 21 F9 50    2721   SOUND2:         LD	HL,SCRAP
000E3F 3E 07       2722                   LD	A,7
000E41 CD 4D 08    2723                   CALL	OSWORD
000E44 C3 7B 24    2724                   JP	XEQ
000E47             2725   ;
000E47             2726   ;MODE - MODE n
000E47             2727   ;
000E47 CD 15 18    2728   MODE:           CALL	EXPRI
000E4A AF          2729                   XOR	A
000E4B 32 FB 54    2730                   LD	(COUNT),A
000E4E D9          2731                   EXX
000E4F 65          2732                   LD	H,L
000E50 2E 16       2733                   LD	L,22
000E52 CD BA 10    2734                   CALL	WRCH2
000E55 18 72       2735                   JR	XEQGO1
000E57             2736   ;
000E57             2737   ;CLG
000E57             2738   ;
000E57 3E 10       2739   CLG:            LD	A,16
000E59 CD 93 05    2740                   CALL	OSWRCH
000E5C 18 6B       2741                   JR	XEQGO1
000E5E             2742   ;
000E5E             2743   ;ORIGIN x,y
000E5E             2744   ;
000E5E CD 15 18    2745   ORIGIN:         CALL    EXPRI
000E61 D9          2746                   EXX
000E62 E5          2747                   PUSH	HL
000E63 CD D3 10    2748                   CALL    CEXPRI
000E66 D9          2749                   EXX
000E67 D1          2750                   POP	DE
000E68 0E 1D       2751                   LD	C,29
000E6A CD AE 10    2752                   CALL	WRCH5
000E6D 18 5A       2753                   JR	XEQGO1
000E6F             2754   ;
000E6F             2755   ;COLOUR n
000E6F             2756   ;COLOUR n,p
000E6F             2757   ;COLOUR n,r,g,b
000E6F             2758   ;
000E6F CD 15 18    2759   COLOUR:         CALL	EXPRI		;n
000E72 D9          2760                   EXX
000E73 FD 7E 00    2761                   LD	A,(IY)
000E76 FE 2C       2762                   CP	','
000E78 28 08       2763                   JR      Z,PALCOL
000E7A 65          2764                   LD	H,L
000E7B 2E 11       2765                   LD	L,17
000E7D CD BA 10    2766                   CALL	WRCH2
000E80 18 47       2767                   JR	XEQGO1
000E82             2768   ;
000E82 E5          2769   PALCOL:         PUSH	HL
000E83 CD D3 10    2770                   CALL	CEXPRI		;p or r
000E86 D9          2771                   EXX
000E87 EB          2772                   EX	DE,HL
000E88 21 00 00    2773                   LD	HL,0
000E8B FD 7E 00    2774                   LD	A,(IY)
000E8E FE 2C       2775                   CP	','
000E90 20 15       2776                   JR	NZ,PALET1
000E92 D5          2777                   PUSH	DE
000E93 CD D3 10    2778                   CALL	CEXPRI		;g
000E96 D9          2779                   EXX
000E97 E5          2780                   PUSH	HL
000E98 CD D3 10    2781                   CALL	CEXPRI		;b
000E9B D9          2782                   EXX
000E9C D1          2783                   POP	DE
000E9D C1          2784                   POP	BC
000E9E 7D          2785                   LD	A,L
000E9F E1          2786                   POP	HL
000EA0 51          2787                   LD	D,C		;r
000EA1 4D          2788                   LD	C,L		;n
000EA2 6B          2789                   LD	L,E		;g
000EA3 67          2790                   LD	H,A		;b
000EA4 1E 10       2791                   LD	E,16
000EA6 C5          2792                   PUSH	BC
000EA7 C1          2793   PALET1:         POP	BC
000EA8 06 13       2794                   LD	B,19
000EAA CD AA 10    2795                   CALL	WRCH6
000EAD 18 1A       2796                   JR	XEQGO1
000EAF             2797   ;
000EAF             2798   ;GCOL [a,]b
000EAF             2799   ;
000EAF CD 15 18    2800   GCOL:           CALL	EXPRI
000EB2 D9          2801                   EXX
000EB3 1E 00       2802                   LD	E,0
000EB5 FD 7E 00    2803                   LD	A,(IY)
000EB8 FE 2C       2804                   CP	','
000EBA 20 06       2805                   JR	NZ,GCOL0
000EBC E5          2806                   PUSH	HL
000EBD CD D3 10    2807                   CALL	CEXPRI
000EC0 D9          2808                   EXX
000EC1 D1          2809                   POP	DE
000EC2 65          2810   GCOL0:          LD	H,L
000EC3 6B          2811                   LD	L,E
000EC4 16 12       2812                   LD	D,18
000EC6 CD B6 10    2813                   CALL	WRCH3		;DLH
000EC9 C3 7B 24    2814   XEQGO1:         JP	XEQ
000ECC             2815   ;
000ECC             2816   ;CSRON  - Turn caret on
000ECC             2817   ;CSROFF - Turn caret off
000ECC             2818   ;
000ECC 0E 01       2819   CSRON:          LD	C,1
000ECE 18 02       2820                   JR	CSRGO
000ED0             2821   ;
000ED0 0E 00       2822   CSROFF:         LD	C,0
000ED2 3E 17       2823   CSRGO:          LD	A,23
000ED4 CD 93 05    2824                   CALL	OSWRCH
000ED7 3E 01       2825                   LD	A,1
000ED9 CD 93 05    2826                   CALL	OSWRCH
000EDC 79          2827                   LD	A,C
000EDD 06 08       2828                   LD	B,8
000EDF CD 93 05    2829   CSRGO1:         CALL	OSWRCH
000EE2 AF          2830                   XOR	A
000EE3 10 FA       2831                   DJNZ	CSRGO1
000EE5 18 E2       2832                   JR	XEQGO1
000EE7             2833   ;
000EE7             2834   ;LINE x1,y1,x2,y2
000EE7             2835   ;
000EE7 CD 15 18    2836   LINE:           CALL	EXPRI
000EEA D9          2837                   EXX
000EEB E5          2838                   PUSH	HL
000EEC CD C2 10    2839                   CALL	EXPR3
000EEF E3          2840                   EX	(SP),HL		;HL <- x1, (SP) <- y2
000EF0 C5          2841                   PUSH	BC
000EF1 EB          2842                   EX	DE,HL
000EF2 0E 04       2843                   LD	C,4
000EF4 CD A8 10    2844                   CALL	VDU25
000EF7 D1          2845                   POP	DE
000EF8 E1          2846                   POP	HL
000EF9 0E 05       2847                   LD	C,5
000EFB 18 2A       2848                   JR	PLOT4A
000EFD             2849   ;
000EFD             2850   ;CIRCLE [FILL] x,y,r
000EFD             2851   ;
000EFD FE 03       2852   CIRCLE:         CP	TFILL
000EFF F5          2853                   PUSH	AF
000F00 20 02       2854                   JR	NZ,CIRCL0
000F02 FD 23       2855                   INC	IY
000F04 CD 15 18    2856   CIRCL0:         CALL	EXPRI
000F07 D9          2857                   EXX
000F08 E5          2858                   PUSH	HL
000F09 CD D3 10    2859                   CALL	CEXPRI
000F0C D9          2860                   EXX
000F0D E5          2861                   PUSH	HL
000F0E CD D3 10    2862                   CALL	CEXPRI
000F11 D9          2863                   EXX
000F12 C1          2864                   POP	BC		;y
000F13 D1          2865                   POP	DE		;x
000F14 E5          2866                   PUSH	HL
000F15 69          2867                   LD	L,C
000F16 60          2868                   LD	H,B
000F17 0E 04       2869                   LD	C,4		; PLOT 4 = MOVE
000F19 CD A8 10    2870                   CALL	VDU25
000F1C D1          2871                   POP	DE		;r
000F1D 21 00 00    2872                   LD	HL,0
000F20 F1          2873                   POP	AF
000F21 0E 91       2874                   LD	C,145		; PLOT 145 = outline circle
000F23 20 02       2875                   JR	NZ,PLOT4A
000F25 0E 99       2876                   LD	C,153		; PLOT 153 = filled circle
000F27 18 6C       2877   PLOT4A:         JR	PLOT4
000F29             2878   ;
000F29             2879   ;ELLIPSE [FILL] x,y,a,b
000F29             2880   ;
000F29 FE 03       2881   ELLIPS:         CP	TFILL
000F2B F5          2882                   PUSH	AF
000F2C 20 02       2883                   JR	NZ,ELLIP0
000F2E FD 23       2884                   INC	IY
000F30 CD 15 18    2885   ELLIP0:         CALL	EXPRI
000F33 D9          2886                   EXX
000F34 E5          2887                   PUSH	HL
000F35 CD C2 10    2888                   CALL	EXPR3
000F38 E3          2889                   EX	(SP),HL		;HL <- x, (SP) <- b
000F39 C5          2890                   PUSH	BC
000F3A EB          2891                   EX	DE,HL
000F3B 0E 04       2892                   LD	C,4		; PLOT 4 = Move absolute
000F3D CD A8 10    2893                   CALL	VDU25
000F40 D1          2894                   POP	DE		;a
000F41 D5          2895                   PUSH	DE
000F42 21 00 00    2896                   LD	HL,0
000F45 4D          2897                   LD	C,L		; PLOT 0 - Move relative
000F46 CD A8 10    2898                   CALL	VDU25
000F49 D1          2899                   POP	DE		;a
000F4A AF          2900                   XOR	A
000F4B 6F          2901                   LD	L,A
000F4C 67          2902                   LD	H,A
000F4D ED 52       2903                   SBC	HL,DE
000F4F EB          2904                   EX	DE,HL
000F50 E1          2905                   POP	HL		;b
000F51 F1          2906                   POP	AF
000F52 0E C1       2907                   LD	C,193		; PLOT 193 = outline ellipse
000F54 20 3F       2908                   JR	NZ,PLOT4
000F56 0E C9       2909                   LD	C,201		; PLOT 201 = filled ellipse
000F58 18 3B       2910                   JR	PLOT4
000F5A             2911   ;
000F5A             2912   ;MOVE [BY} x,y
000F5A             2913   ;DRAW [BY] x,y
000F5A             2914   ;PLOT [BY] [n,]x,y
000F5A             2915   ;FILL [BY] x,y
000F5A             2916   ;
000F5A 0E 04       2917   MOVE:           LD	C,4
000F5C 18 23       2918                   JR	PLOT1
000F5E             2919   ;
000F5E 0E 05       2920   DRAW:           LD	C,5
000F60 18 1F       2921                   JR	PLOT1
000F62             2922   ;
000F62 0E 85       2923   FILL:           LD	C,133
000F64 18 1B       2924                   JR	PLOT1
000F66             2925   ;
000F66 0E 45       2926   PLOT:           LD	C,69
000F68 FE 0F       2927                   CP	TBY
000F6A 28 15       2928                   JR	Z,PLOT1
000F6C CD 15 18    2929                   CALL	EXPRI
000F6F D9          2930                   EXX
000F70 E5          2931                   PUSH	HL
000F71 CD D3 10    2932                   CALL	CEXPRI
000F74 D9          2933                   EXX
000F75 FD 7E 00    2934                   LD	A,(IY)
000F78 FE 2C       2935                   CP	','
000F7A 28 12       2936                   JR	Z,PLOT3
000F7C D1          2937                   POP	DE
000F7D 0E 45       2938                   LD	C,69
000F7F 18 14       2939                   JR	PLOT4
000F81             2940   ;
000F81 FE 0F       2941   PLOT1:          CP	TBY
000F83 20 04       2942                   JR	NZ,PLOT2
000F85 FD 23       2943                   INC	IY
000F87 CB 91       2944                   RES	2,C		;Change absolute to relative
000F89 C5          2945   PLOT2:          PUSH	BC
000F8A CD 15 18    2946                   CALL	EXPRI
000F8D D9          2947                   EXX
000F8E E5          2948   PLOT3:          PUSH	HL
000F8F CD D3 10    2949                   CALL	CEXPRI
000F92 D9          2950                   EXX
000F93 D1          2951                   POP	DE
000F94 C1          2952                   POP	BC
000F95 CD A8 10    2953   PLOT4:          CALL	VDU25
000F98 C3 7B 24    2954                   JP	XEQ
000F9B             2955   ;
000F9B             2956   ;RECTANGLE [FILL] x,y,w[,h] [TO xnew,ynew]
000F9B             2957   ;
000F9B FE 03       2958   RECTAN:         CP	TFILL
000F9D F5          2959                   PUSH	AF
000F9E 20 02       2960                   JR	NZ,RECT0
000FA0 FD 23       2961                   INC	IY
000FA2 CD 15 18    2962   RECT0:          CALL	EXPRI
000FA5 D9          2963                   EXX
000FA6 E5          2964                   PUSH	HL
000FA7 CD D3 10    2965                   CALL	CEXPRI
000FAA D9          2966                   EXX
000FAB E5          2967                   PUSH	HL
000FAC CD D3 10    2968                   CALL	CEXPRI
000FAF D9          2969                   EXX
000FB0 E5          2970                   PUSH	HL
000FB1 FD 7E 00    2971                   LD	A,(IY)
000FB4 FE 2C       2972                   CP	','
000FB6 20 04       2973                   JR	NZ,RECT1
000FB8 CD D3 10    2974                   CALL	CEXPRI
000FBB D9          2975                   EXX
000FBC C1          2976   RECT1:          POP	BC		;w
000FBD D1          2977                   POP	DE		;y
000FBE E3          2978                   EX	(SP),HL		;HL <- x, (SP) <- h
000FBF C5          2979                   PUSH	BC
000FC0 EB          2980                   EX	DE,HL
000FC1 0E 04       2981                   LD	C,4
000FC3 CD A8 10    2982                   CALL	VDU25
000FC6 FD 7E 00    2983                   LD	A,(IY)
000FC9 FE B8       2984                   CP	TTO
000FCB 28 09       2985                   JR	Z,RECTTO
000FCD D1          2986                   POP	DE		;w
000FCE E1          2987                   POP	HL		;h
000FCF F1          2988                   POP	AF
000FD0 20 22       2989                   JR	NZ,OUTLIN
000FD2 0E 61       2990                   LD	C,97
000FD4 18 BF       2991                   JR	PLOT4
000FD6             2992   ;
000FD6             2993   ;Block copy / move:
000FD6             2994   ;
000FD6 FD 23       2995   RECTTO:         INC	IY		; Bump over TO
000FD8 CD 15 18    2996                   CALL	EXPRI
000FDB D9          2997                   EXX
000FDC E5          2998                   PUSH	HL
000FDD CD D3 10    2999                   CALL	CEXPRI
000FE0 D9          3000                   EXX
000FE1 C1          3001                   POP	BC		;newx
000FE2 D1          3002                   POP	DE		;w
000FE3 E3          3003                   EX	(SP),HL		;HL <- h, (SP) <- newy
000FE4 C5          3004                   PUSH	BC
000FE5 0E 00       3005                   LD	C,0
000FE7 CD A8 10    3006                   CALL	VDU25
000FEA D1          3007                   POP	DE		;newx
000FEB E1          3008                   POP	HL		;newy
000FEC F1          3009                   POP	AF
000FED 0E BE       3010                   LD	C,190		; PLOT 190 - Block copy
000FEF 20 01       3011                   JR	NZ,PLOT4B
000FF1 0D          3012                   DEC	C		; PLOT 189 - Block move
000FF2 18 A1       3013   PLOT4B:         JR	PLOT4
000FF4             3014   ;
000FF4             3015   ;Outline rectangle:
000FF4             3016   ;
000FF4 0E 09       3017   OUTLIN:         LD	C,9		; PLOT 9 - draw relative
000FF6 E5          3018                   PUSH	HL
000FF7 21 00 00    3019                   LD	HL,0
000FFA CD A8 10    3020                   CALL	VDU25		; side 1
000FFD E1          3021                   POP	HL
000FFE D5          3022                   PUSH	DE
000FFF 11 00 00    3023                   LD	DE,0
001002 CD A8 10    3024                   CALL	VDU25		; side 2
001005 D1          3025                   POP	DE
001006 E5          3026                   PUSH	HL
001007 AF          3027                   XOR	A
001008 6F          3028                   LD	L,A
001009 67          3029                   LD	H,A
00100A ED 52       3030                   SBC	HL,DE
00100C EB          3031                   EX	DE,HL
00100D 6F          3032                   LD	L,A
00100E 67          3033                   LD	H,A
00100F CD A8 10    3034                   CALL 	VDU25		; side 3
001012 D1          3035                   POP	DE
001013 AF          3036                   XOR	A
001014 6F          3037                   LD	L,A
001015 67          3038                   LD	H,A
001016 ED 52       3039                   SBC	HL,DE
001018 5F          3040                   LD	E,A
001019 57          3041                   LD	D,A
00101A 18 D6       3042                   JR	PLOT4B
00101C             3043   ;
00101C             3044   ;MOUSE x, y, b
00101C             3045   ;
00101C 3E 80       3046   MOUSE:          LD	A,128
00101E 21 09 00    3047                   LD	HL,9
001021 CD 6B 08    3048                   CALL	OSBYTE
001024 E5          3049                   PUSH	HL
001025 3E 80       3050                   LD	A,128
001027 21 08 00    3051                   LD	HL,8
00102A CD 6B 08    3052                   CALL	OSBYTE
00102D E5          3053                   PUSH	HL
00102E 3E 80       3054                   LD	A,128
001030 21 07 00    3055                   LD	HL,7
001033 CD 6B 08    3056                   CALL	OSBYTE
001036 E5          3057                   PUSH	HL
001037 CD B8 25    3058                   CALL	VAR_
00103A E1          3059                   POP	HL
00103B CD D9 10    3060                   CALL	STOREI
00103E CD 84 20    3061                   CALL	COMMA
001041 CD ED 44    3062                   CALL	NXT
001044 CD B8 25    3063                   CALL	VAR_
001047 E1          3064                   POP	HL
001048 CD D9 10    3065                   CALL	STOREI
00104B CD 84 20    3066                   CALL	COMMA
00104E CD ED 44    3067                   CALL	NXT
001051 CD B8 25    3068                   CALL	VAR_
001054 E1          3069                   POP	HL
001055 CD D9 10    3070                   CALL	STOREI
001058 C3 7B 24    3071   XEQGO2:         JP	XEQ
00105B             3072   ;
00105B             3073   ;WAIT [n]
00105B             3074   ;
00105B CD 18 35    3075   WAIT:           CALL	TERMQ
00105E 28 F8       3076                   JR	Z,XEQGO2
001060 CD 15 18    3077                   CALL	EXPRI
001063 D9          3078                   EXX
001064 44          3079                   LD	B,H
001065 4D          3080                   LD	C,L
001066 CD 0B 0D    3081                   CALL	GETIME
001069 09          3082                   ADD	HL,BC
00106A 01 00 00    3083                   LD	BC,0
00106D EB          3084                   EX	DE,HL
00106E ED 4A       3085                   ADC	HL,BC
001070 EB          3086                   EX	DE,HL
001071 CD 15 06    3087   WAIT1:          CALL	TRAP
001074 D5          3088                   PUSH	DE
001075 E5          3089                   PUSH	HL
001076 CD 0B 0D    3090                   CALL	GETIME
001079 C1          3091                   POP	BC
00107A B7          3092                   OR	A
00107B ED 42       3093                   SBC	HL,BC
00107D 60          3094                   LD	H,B
00107E 69          3095                   LD	L,C
00107F EB          3096                   EX	DE,HL
001080 C1          3097                   POP	BC
001081 ED 42       3098                   SBC	HL,BC
001083 30 D3       3099                   JR	NC,XEQGO2
001085 EB          3100                   EX	DE,HL
001086 50          3101                   LD	D,B
001087 59          3102                   LD	E,C
001088 18 E7       3103                   JR	WAIT1
00108A             3104   ;
00108A             3105   ;OSCALL - Trap call to FFxx
00108A             3106   ;
00108A E1          3107   OSCALL:         POP	HL		;DITCH RETURN ADDRESS
00108B 21 9D 10    3108                   LD	HL,OSRET
00108E E5          3109                   PUSH	HL		;NEW RETURN ADDRESS
00108F DD 7E 04    3110                   LD	A,(IX+4)	;A%
001092 DD 5E 14    3111                   LD	E,(IX+20)	;E%
001095 DD 66 64    3112                   LD	H,(IX+100)	;Y%
001098 DD 6E 60    3113                   LD	L,(IX+96)	;X%
00109B FD E9       3114                   JP	(IY)
00109D F5          3115   OSRET:          PUSH	AF
00109E 7D          3116                   LD	A,L		;F  H  L  A
00109F 6C          3117                   LD	L,H		;|  |  |  |
0010A0 D9          3118                   EXX			;|  |  |  |
0010A1 C1          3119                   POP	BC		;|  |  |  |
0010A2 67          3120                   LD	H,A		;|  |  |  |
0010A3 68          3121                   LD	L,B		;H  L  H' L'
0010A4 79          3122                   LD	A,C
0010A5 D9          3123                   EXX
0010A6 67          3124                   LD	H,A
0010A7 C9          3125                   RET
0010A8             3126   ;
0010A8 06 19       3127   VDU25:          LD	B,25
0010AA 78          3128   WRCH6:          LD	A,B
0010AB CD 93 05    3129                   CALL	OSWRCH
0010AE 79          3130   WRCH5:          LD	A,C
0010AF CD 93 05    3131                   CALL	OSWRCH
0010B2 7B          3132   WRCH4:          LD	A,E
0010B3 CD 93 05    3133                   CALL	OSWRCH
0010B6 7A          3134   WRCH3:          LD	A,D
0010B7 CD 93 05    3135                   CALL	OSWRCH
0010BA 7D          3136   WRCH2:          LD	A,L
0010BB CD 93 05    3137                   CALL	OSWRCH
0010BE 7C          3138                   LD	A,H
0010BF C3 93 05    3139                   JP	OSWRCH
0010C2             3140   ;
0010C2 CD D3 10    3141   EXPR3:          CALL	CEXPRI
0010C5 D9          3142                   EXX
0010C6 E5          3143                   PUSH	HL
0010C7 CD D3 10    3144                   CALL	CEXPRI
0010CA D9          3145                   EXX
0010CB E5          3146                   PUSH	HL
0010CC CD D3 10    3147                   CALL	CEXPRI
0010CF D9          3148                   EXX
0010D0 C1          3149                   POP	BC		;x2
0010D1 D1          3150                   POP	DE		;y1
0010D2 C9          3151                   RET
0010D3             3152   ;
0010D3 CD 84 20    3153   CEXPRI:         CALL	COMMA
0010D6 C3 15 18    3154                   JP	EXPRI
0010D9             3155   ;
0010D9 CB 7F       3156   STOREI:         BIT	7,A
0010DB 20 0C       3157                   JR	NZ,EEK
0010DD CB 77       3158                   BIT	6,A
0010DF 20 08       3159                   JR	NZ,EEK
0010E1 D9          3160                   EXX
0010E2 21 00 00    3161                   LD	HL,0
0010E5 4D          3162                   LD	C,L
0010E6 C3 D2 31    3163                   JP	STOREN
0010E9             3164   ;
0010E9 3E 32       3165   EEK:            LD	A,50
0010EB CD 37 3F    3166                   CALL	EXTERR
0010EE 13          3167                   DB	13H		;'Bad '
0010EF 04          3168                   DB	04H		;'MOUSE'
0010F0 20          3169                   DB	20H
0010F1 15          3170                   DB	15H		;'variable'
0010F2 00          3171                   DB	0
0010F3             3172   ;
0010F3             3173   TINT:
0010F3             3174   TINTFN:
0010F3             3175   SYS:
0010F3 AF          3176                   XOR	A
0010F4 CD 37 3F    3177                   CALL	EXTERR
0010F7 53 6F 72 72 3178                   DB	"Sorry"
       79          
0010FC 00          3179                   DB	0
0010FD             3180   ;
0010FD             3181   ;                END
0010FD             3182   ; --- End acorn.asm ---
0010FD             3183   
0010FD             3184   ; --- Begin asmb.asm ---
0010FD             3185   ;
0010FD             3186   ;Automatically created from original source on 2024-12-15 15:29:12
0010FD             3187   ;
0010FD             3188                   .ASSUME ADL = 0
0010FD             3189   ;	.ORG 0x0000
0010FD             3190   ;                SEGMENT CODE
0010FD             3191   ;
0010FD             3192   ;BBC BASIC INTERPRETER - Z80 VERSION
0010FD             3193   ;Z80 CPU ASSEMBLER MODULE - "ASMB"
0010FD             3194   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0010FD             3195   ;
0010FD             3196   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0010FD             3197   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0010FD             3198   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0010FD             3199   ;
0010FD             3200   ;VERSION 5.0, 14-05-2024
0010FD             3201   ;
0010FD             3202   ;                XDEF	ASSEM
0010FD             3203   ;
0010FD             3204   ;                XREF	TABIT
0010FD             3205   ;                XREF	CRLF
0010FD             3206   ;                XREF	OUT
0010FD             3207   ;                XREF	VAR_
0010FD             3208   ;                XREF	ZERO
0010FD             3209   ;                XREF	STOREN
0010FD             3210   ;                XREF	ERROR_
0010FD             3211   ;                XREF	EXPRI
0010FD             3212   ;                XREF	EXPRS
0010FD             3213   ;
0010FD             3214   ;                XREF	LISTON
0010FD             3215   ;                XREF	COUNT
0010FD             3216   ;                XREF	ACCS
0010FD             3217   ;                XREF	OC
0010FD             3218   ;                XREF	PC
0010FD             3219   ;
0010FD             3220   ; CR             EQU	0DH	; in equs.inc
0010FD             3221   TAND:           EQU	80H
0010FD             3222   TOR:            EQU	84H
0010FD             3223   ; TERROR:         EQU	85H	; in exec.asm
0010FD             3224   TCALL:          EQU	0D6H
0010FD             3225   TDEF:           EQU	0DDH
0010FD             3226   ;
0010FD             3227   ;ASSEMBLER:
0010FD             3228   ;LANGUAGE-INDEPENDENT CONTROL SECTION:
0010FD             3229   ; Outputs: A=delimiter, carry set if syntax error.
0010FD             3230   ;
0010FD CD 85 14    3231   ASSEM:          CALL	SKIP
001100 FD 23       3232                   INC	IY
001102 FE 3A       3233                   CP	':'
001104 28 F7       3234                   JR	Z,ASSEM
001106 FE 5D       3235                   CP	']'
001108 C8          3236                   RET	Z
001109 FE 0D       3237                   CP	CR
00110B C8          3238                   RET	Z
00110C FD 2B       3239                   DEC	IY
00110E DD 2A 40 54 3240                   LD	IX,(PC)		;PROGRAM COUNTER
001112 21 FE 54    3241                   LD	HL,LISTON
001115 CB 76       3242                   BIT	6,(HL)
001117 28 04       3243                   JR	Z,ASSEM0
001119 DD 2A 3C 54 3244                   LD	IX,(OC)		;ORIGIN of CODE
00111D DD E5       3245   ASSEM0:         PUSH	IX
00111F FD E5       3246                   PUSH	IY
001121 CD B1 11    3247                   CALL	ASMB
001124 C1          3248                   POP	BC
001125 D1          3249                   POP	DE
001126 D8          3250                   RET	C
001127 CD 85 14    3251                   CALL	SKIP
00112A 37          3252                   SCF
00112B C0          3253                   RET	NZ
00112C FD 2B       3254                   DEC	IY
00112E FD 23       3255   ASSEM3:         INC	IY
001130 FD 7E 00    3256                   LD	A,(IY)
001133 CD A9 14    3257                   CALL	TERM0
001136 20 F6       3258                   JR	NZ,ASSEM3
001138 3A FE 54    3259                   LD	A,(LISTON)
00113B DD E5       3260                   PUSH	IX
00113D E1          3261                   POP	HL
00113E B7          3262                   OR	A
00113F ED 52       3263                   SBC	HL,DE
001141 EB          3264                   EX	DE,HL		;DE= NO. OF BYTES
001142 E5          3265                   PUSH	HL
001143 2A 40 54    3266                   LD	HL,(PC)
001146 E5          3267                   PUSH	HL
001147 19          3268                   ADD	HL,DE
001148 22 40 54    3269                   LD	(PC),HL		;UPDATE PC
00114B CB 77       3270                   BIT	6,A
00114D 28 07       3271                   JR	Z,ASSEM5
00114F 2A 3C 54    3272                   LD	HL,(OC)
001152 19          3273                   ADD	HL,DE
001153 22 3C 54    3274                   LD	(OC),HL		;UPDATE OC
001156 E1          3275   ASSEM5:         POP	HL		;OLD PC
001157 DD E1       3276                   POP	IX		;CODE HERE
001159 CB 67       3277                   BIT	4,A
00115B 28 A0       3278                   JR	Z,ASSEM
00115D 7C          3279                   LD	A,H
00115E CD 9D 11    3280                   CALL	HEX
001161 7D          3281                   LD	A,L
001162 CD 96 11    3282                   CALL	HEXSP
001165 AF          3283                   XOR	A
001166 BB          3284                   CP	E
001167 28 15       3285                   JR	Z,ASSEM2
001169 3A FB 54    3286   ASSEM1:         LD	A,(COUNT)
00116C FE 11       3287                   CP	17
00116E 3E 05       3288                   LD	A,5
001170 D4 5F 35    3289                   CALL	NC,TABIT	;NEXT LINE
001173 DD 7E 00    3290                   LD	A,(IX)
001176 CD 96 11    3291                   CALL	HEXSP
001179 DD 23       3292                   INC	IX
00117B 1D          3293                   DEC	E
00117C 20 EB       3294                   JR	NZ,ASSEM1
00117E 3E 12       3295   ASSEM2:         LD	A,18
001180 CD 5F 35    3296                   CALL	TABIT
001183 FD E5       3297                   PUSH	IY
001185 E1          3298                   POP	HL
001186 ED 42       3299                   SBC	HL,BC
001188 0A          3300   ASSEM4:         LD	A,(BC)
001189 CD FD 40    3301                   CALL	OUT
00118C 03          3302                   INC	BC
00118D 2D          3303                   DEC	L
00118E 20 F8       3304                   JR	NZ,ASSEM4
001190 CD DD 40    3305                   CALL	CRLF
001193 C3 FD 10    3306                   JP	ASSEM
001196             3307   ;
001196 CD 9D 11    3308   HEXSP:          CALL	HEX
001199 3E 20       3309                   LD	A,' '
00119B 18 11       3310                   JR	OUTCH1
00119D F5          3311   HEX:            PUSH	AF
00119E 0F          3312                   RRCA
00119F 0F          3313                   RRCA
0011A0 0F          3314                   RRCA
0011A1 0F          3315                   RRCA
0011A2 CD A6 11    3316                   CALL	HEXOUT
0011A5 F1          3317                   POP	AF
0011A6 E6 0F       3318   HEXOUT:         AND	0FH
0011A8 C6 90       3319                   ADD	A,90H
0011AA 27          3320                   DAA
0011AB CE 40       3321                   ADC	A,40H
0011AD 27          3322                   DAA
0011AE C3 FD 40    3323   OUTCH1:         JP	OUT
0011B1             3324   ;
0011B1             3325   ;PROCESSOR-SPECIFIC TRANSLATION SECTION:
0011B1             3326   ;
0011B1             3327   ;REGISTER USAGE: B - TYPE OF MOST RECENT OPERAND
0011B1             3328   ;                C - OPCODE BEING BUILT
0011B1             3329   ;                D - (IX) OR (IY) FLAG
0011B1             3330   ;                E - OFFSET FROM IX OR IY
0011B1             3331   ;               HL - NUMERIC OPERAND VALUE
0011B1             3332   ;               IX - CODE DESTINATION
0011B1             3333   ;               IY - SOURCE TEXT POINTER
0011B1             3334   ;   Inputs: A = initial character
0011B1             3335   ;  Outputs: Carry set if syntax error.
0011B1             3336   ;
0011B1 FE 2E       3337   ASMB:           CP	'.'
0011B3 20 28       3338                   JR	NZ,ASMB1
0011B5 FD 23       3339                   INC	IY
0011B7 DD E5       3340                   PUSH	IX
0011B9 CD B8 25    3341                   CALL	VAR_
0011BC F5          3342                   PUSH	AF
0011BD CD DA 1F    3343                   CALL	ZERO
0011C0 D9          3344                   EXX
0011C1 2A 40 54    3345                   LD	HL,(PC)
0011C4 D9          3346                   EXX
0011C5 3A FE 54    3347                   LD	A,(LISTON)
0011C8 E6 20       3348                   AND	20H
0011CA 20 0B       3349                   JR	NZ,ASMB0
0011CC DD 7E 00    3350                   LD	A,(IX)
0011CF DD B6 01    3351                   OR	(IX+1)
0011D2 3E 03       3352                   LD	A,3
0011D4 C2 26 3F    3353                   JP	NZ,ERROR_	;Multiple label
0011D7 F1          3354   ASMB0:          POP	AF
0011D8 CD D2 31    3355                   CALL	STOREN
0011DB DD E1       3356                   POP	IX
0011DD CD 85 14    3357   ASMB1:          CALL	SKIP
0011E0 C8          3358                   RET	Z
0011E1 FE D6       3359                   CP	TCALL
0011E3 0E C4       3360                   LD	C,0C4H
0011E5 FD 23       3361                   INC	IY
0011E7 CA D4 12    3362                   JP	Z,GRPC
0011EA FD 2B       3363                   DEC	IY
0011EC 21 AF 14    3364                   LD	HL,OPCODS
0011EF CD 3C 14    3365                   CALL	FIND
0011F2 D8          3366                   RET	C
0011F3 48          3367                   LD	C,B	;ROOT OPCODE
0011F4 16 00       3368                   LD	D,0	;CLEAR IX/IY FLAG
0011F6             3369   ;
0011F6             3370   ;GROUP 0 - TRIVIAL CASES REQUIRING NO COMPUTATION
0011F6             3371   ;GROUP 1 - AS GROUP 0 BUT WITH "ED" PREFIX
0011F6             3372   ;
0011F6 D6 27       3373                   SUB	39
0011F8 30 07       3374                   JR	NC,GROUP2
0011FA FE E8       3375                   CP	15-39
0011FC D4 A2 13    3376                   CALL	NC,ED
0011FF 18 68       3377                   JR	BYTE0
001201             3378   ;
001201             3379   ;GROUP 2 - BIT, RES, SET
001201             3380   ;GROUP 3 - RLC, RRC, RL, RR, SLA, SRA, SRL
001201             3381   ;
001201 D6 0A       3382   GROUP2:         SUB	10
001203 30 0F       3383                   JR	NC,GROUP4
001205 FE F9       3384                   CP	3-10
001207 DC 2C 14    3385                   CALL	C,BIT
00120A D8          3386                   RET	C
00120B CD 01 14    3387                   CALL	REGLO
00120E D8          3388                   RET	C
00120F CD A6 13    3389                   CALL	CB
001212 18 55       3390                   JR	BYTE0
001214             3391   ;
001214             3392   ;GROUP 4 - PUSH, POP, EX (SP)
001214             3393   ;
001214 D6 03       3394   GROUP4:         SUB	3
001216 30 06       3395                   JR	NC,GROUP5
001218 CD 20 14    3396   G4:             CALL	PAIRasm
00121B D8          3397                   RET	C
00121C 18 4B       3398                   JR	BYTE0
00121E             3399   ;
00121E             3400   ;GROUP 5 - SUB, AND, XOR, OR, CP
00121E             3401   ;GROUP 6 - ADD, ADC, SBC
00121E             3402   ;
00121E D6 0A       3403   GROUP5:         SUB	8+2
001220 30 32       3404                   JR	NC,GROUP7
001222 FE FD       3405                   CP	5-8
001224 06 07       3406                   LD	B,7
001226 D4 B4 13    3407                   CALL	NC,OPND
001229 78          3408                   LD	A,B
00122A FE 07       3409                   CP	7
00122C 20 10       3410                   JR	NZ,G6HL
00122E CD 01 14    3411   G6:             CALL	REGLO
001231 79          3412                   LD	A,C
001232 30 28       3413                   JR	NC,BIND1
001234 EE 46       3414                   XOR	46H
001236 CD A8 13    3415                   CALL	BIND
001239 CD E4 13    3416   DB:             CALL	NUMBER
00123C 18 78       3417                   JR	VAL8
00123E             3418   ;
00123E E6 3F       3419   G6HL:           AND	3FH
001240 FE 0C       3420                   CP	12
001242 37          3421                   SCF
001243 C0          3422                   RET	NZ
001244 79          3423                   LD	A,C
001245 FE 80       3424                   CP	80H
001247 0E 09       3425                   LD	C,9
001249 28 CD       3426                   JR	Z,G4
00124B EE 1C       3427                   XOR	1CH
00124D 0F          3428                   RRCA
00124E 4F          3429                   LD	C,A
00124F CD A2 13    3430                   CALL	ED
001252 18 C4       3431                   JR	G4
001254             3432   ;
001254             3433   ;GROUP 7 - INC, DEC
001254             3434   ;
001254 D6 02       3435   GROUP7:         SUB	2
001256 30 14       3436                   JR	NC,GROUP8
001258 CD 07 14    3437                   CALL	REGHI
00125B 79          3438                   LD	A,C
00125C D2 A8 13    3439   BIND1:          JP	NC,BIND
00125F EE 64       3440                   XOR	64H
001261 07          3441                   RLCA
001262 07          3442                   RLCA
001263 07          3443                   RLCA
001264 4F          3444                   LD	C,A
001265 CD 24 14    3445                   CALL	PAIR1asm
001268 D8          3446                   RET	C
001269 79          3447   BYTE0:          LD	A,C
00126A 18 7F       3448                   JR	BYTE2
00126C             3449   ;
00126C             3450   ;GROUP 8 - IN
00126C             3451   ;GROUP 9 - OUT
00126C             3452   ;
00126C D6 02       3453   GROUP8:         SUB	2
00126E 30 21       3454                   JR	NC,GROUPA
001270 FE FF       3455                   CP	1-2
001272 CC 97 13    3456                   CALL	Z,CORN
001275 08          3457                   EX	AF,AF'
001276 CD 07 14    3458                   CALL	REGHI
001279 D8          3459                   RET	C
00127A 08          3460                   EX	AF,AF'
00127B DC 97 13    3461                   CALL	C,CORN
00127E 24          3462                   INC	H
00127F 28 E8       3463                   JR	Z,BYTE0
001281 78          3464                   LD	A,B
001282 FE 07       3465                   CP	7
001284 37          3466                   SCF
001285 C0          3467                   RET	NZ
001286 79          3468                   LD	A,C
001287 EE 03       3469                   XOR	3
001289 07          3470                   RLCA
00128A 07          3471                   RLCA
00128B 07          3472                   RLCA
00128C CD D4 13    3473                   CALL	BYTE
00128F 18 25       3474                   JR	VAL8
001291             3475   ;
001291             3476   ;GROUP 10 - JR, DJNZ
001291             3477   ;
001291 D6 02       3478   GROUPA:         SUB	2
001293 30 24       3479                   JR	NC,GROUPB
001295 FE FF       3480                   CP	1-2
001297 C4 0D 14    3481                   CALL	NZ,COND_
00129A 79          3482                   LD	A,C
00129B 30 02       3483                   JR	NC,GRPA
00129D 3E 18       3484                   LD	A,18H
00129F CD D4 13    3485   GRPA:           CALL	BYTE
0012A2 CD E4 13    3486                   CALL	NUMBER
0012A5 ED 5B 40 54 3487                   LD	DE,(PC)
0012A9 13          3488                   INC	DE
0012AA 37          3489                   SCF
0012AB ED 52       3490                   SBC	HL,DE
0012AD 7D          3491                   LD	A,L
0012AE 17          3492                   RLA
0012AF 9F          3493                   SBC	A,A
0012B0 BC          3494                   CP	H
0012B1 3E 01       3495   TOOFAR:         LD	A,1
0012B3 C2 26 3F    3496                   JP	NZ,ERROR_	;"Out of range"
0012B6 7D          3497   VAL8:           LD	A,L
0012B7 18 32       3498                   JR	BYTE2
0012B9             3499   ;
0012B9             3500   ;GROUP 11 - JP
0012B9             3501   ;
0012B9 47          3502   GROUPB:         LD	B,A
0012BA 20 16       3503                   JR	NZ,GROUPC
0012BC CD 0D 14    3504                   CALL	COND_
0012BF 79          3505                   LD	A,C
0012C0 30 0B       3506                   JR	NC,GRPB
0012C2 78          3507                   LD	A,B
0012C3 E6 3F       3508                   AND	3FH
0012C5 FE 06       3509                   CP	6
0012C7 3E E9       3510                   LD	A,0E9H
0012C9 28 20       3511                   JR	Z,BYTE2
0012CB 3E C3       3512                   LD	A,0C3H
0012CD CD D4 13    3513   GRPB:           CALL	BYTE
0012D0 18 05       3514                   JR	ADDR_
0012D2             3515   ;
0012D2             3516   ;GROUP 12 - CALL
0012D2             3517   ;
0012D2 10 0C       3518   GROUPC:         DJNZ	GROUPD
0012D4 CD EF 12    3519   GRPC:           CALL	GRPE
0012D7 CD E4 13    3520   ADDR_:          CALL	NUMBER
0012DA CD B6 12    3521   VAL16:          CALL	VAL8
0012DD 7C          3522                   LD	A,H
0012DE 18 0B       3523                   JR	BYTE2
0012E0             3524   ;
0012E0             3525   ;GROUP 13 - RST
0012E0             3526   ;
0012E0 10 0B       3527   GROUPD:         DJNZ	GROUPE
0012E2 CD E4 13    3528                   CALL	NUMBER
0012E5 A1          3529                   AND	C
0012E6 B4          3530                   OR	H
0012E7 20 C8       3531                   JR	NZ,TOOFAR
0012E9 7D          3532                   LD	A,L
0012EA B1          3533                   OR	C
0012EB 18 78       3534   BYTE2:          JR	BYTE1
0012ED             3535   ;
0012ED             3536   ;GROUP 14 - RET
0012ED             3537   ;
0012ED 10 0A       3538   GROUPE:         DJNZ	GROUPF
0012EF CD 0D 14    3539   GRPE:           CALL	COND_
0012F2 79          3540                   LD	A,C
0012F3 30 70       3541                   JR	NC,BYTE1
0012F5 F6 09       3542                   OR	9
0012F7 18 6C       3543                   JR	BYTE1
0012F9             3544   ;
0012F9             3545   ;GROUP 15 - LD
0012F9             3546   ;
0012F9 10 6C       3547   GROUPF:         DJNZ	MISC
0012FB CD 39 14    3548                   CALL	LDOP
0012FE 30 5F       3549                   JR	NC,LDA
001300 CD 07 14    3550                   CALL	REGHI
001303 08          3551                   EX	AF,AF'
001304 CD 85 14    3552                   CALL	SKIP
001307 FE 28       3553                   CP	'('
001309 28 1D       3554                   JR	Z,LDIN
00130B 08          3555                   EX	AF,AF'
00130C D2 2E 12    3556                   JP	NC,G6
00130F 0E 01       3557                   LD	C,1
001311 CD 24 14    3558                   CALL	PAIR1asm
001314 D8          3559                   RET	C
001315 3E 0E       3560                   LD	A,14
001317 B8          3561                   CP	B
001318 47          3562                   LD	B,A
001319 CC 20 14    3563                   CALL	Z,PAIRasm
00131C 78          3564                   LD	A,B
00131D E6 3F       3565                   AND	3FH
00131F FE 0C       3566                   CP	12
001321 79          3567                   LD	A,C
001322 20 A9       3568                   JR	NZ,GRPB
001324 3E F9       3569                   LD	A,0F9H
001326 18 3D       3570                   JR	BYTE1
001328             3571   ;
001328 08          3572   LDIN:           EX	AF,AF'
001329 C5          3573                   PUSH	BC
00132A D4 01 14    3574                   CALL	NC,REGLO
00132D 79          3575                   LD	A,C
00132E C1          3576                   POP	BC
00132F 30 77       3577                   JR	NC,BIND
001331 0E 0A       3578                   LD	C,0AH
001333 CD 24 14    3579                   CALL	PAIR1asm
001336 CD 7E 13    3580                   CALL	LD16
001339 30 92       3581                   JR	NC,GRPB
00133B CD E4 13    3582                   CALL	NUMBER
00133E 0E 02       3583                   LD	C,2
001340 CD 20 14    3584                   CALL	PAIRasm
001343 CD 7E 13    3585                   CALL	LD16
001346 D8          3586                   RET	C
001347 CD D4 13    3587                   CALL	BYTE
00134A 18 8E       3588                   JR	VAL16
00134C             3589   ;
00134C             3590   ;OPT - SET OPTION
00134C             3591   ;
00134C 05          3592   OPT:            DEC	B
00134D CA 39 12    3593                   JP	Z,DB
001350 10 85       3594                   DJNZ	ADDR_
001352 CD E4 13    3595                   CALL	NUMBER
001355 21 FE 54    3596                   LD	HL,LISTON
001358 4F          3597                   LD	C,A
001359 ED 6F       3598                   RLD
00135B 79          3599                   LD	A,C
00135C ED 67       3600                   RRD
00135E C9          3601                   RET
00135F             3602   ;
00135F FE 04       3603   LDA:            CP	4
001361 DC A2 13    3604                   CALL	C,ED
001364 78          3605                   LD	A,B
001365 18 6D       3606   BYTE1:          JR	BYTE
001367             3607   ;
001367             3608   ;MISC - DEFB, DEFW, DEFM
001367             3609   ;
001367 10 E3       3610   MISC:           DJNZ	OPT
001369 DD E5       3611                   PUSH	IX
00136B CD 1E 18    3612                   CALL	EXPRS
00136E DD E1       3613                   POP	IX
001370 21 00 52    3614                   LD	HL,ACCS
001373 AF          3615   DEFM1:          XOR	A
001374 BB          3616                   CP	E
001375 C8          3617                   RET	Z
001376 7E          3618                   LD	A,(HL)
001377 23          3619                   INC	HL
001378 CD D4 13    3620                   CALL	BYTE
00137B 1D          3621                   DEC	E
00137C 18 F5       3622                   JR	DEFM1
00137E             3623   ;
00137E             3624   ;SUBROUTINES:
00137E             3625   ;
00137E 78          3626   LD16:           LD	A,B
00137F 38 0E       3627                   JR	C,LD8
001381 78          3628                   LD	A,B
001382 E6 3F       3629                   AND	3FH
001384 FE 0C       3630                   CP	12
001386 79          3631                   LD	A,C
001387 C8          3632                   RET	Z
001388 CD A2 13    3633                   CALL	ED
00138B 79          3634                   LD	A,C
00138C F6 43       3635                   OR	43H
00138E C9          3636                   RET
00138F             3637   ;
00138F FE 07       3638   LD8:            CP	7
001391 37          3639                   SCF
001392 C0          3640                   RET	NZ
001393 79          3641                   LD	A,C
001394 F6 30       3642                   OR	30H
001396 C9          3643                   RET
001397             3644   ;
001397 C5          3645   CORN:           PUSH	BC
001398 CD B4 13    3646                   CALL	OPND
00139B CB 68       3647                   BIT	5,B
00139D C1          3648                   POP	BC
00139E 28 44       3649                   JR	Z,NUMBER
0013A0 26 FF       3650                   LD	H,-1
0013A2 3E ED       3651   ED:             LD	A,0EDH
0013A4 18 2E       3652                   JR	BYTE
0013A6             3653   ;
0013A6 3E CB       3654   CB:             LD	A,0CBH
0013A8 FE 76       3655   BIND:           CP	76H
0013AA 37          3656                   SCF
0013AB C8          3657                   RET	Z		;REJECT LD (HL),(HL)
0013AC CD D4 13    3658                   CALL	BYTE
0013AF 14          3659                   INC	D
0013B0 F0          3660                   RET	P
0013B1 7B          3661                   LD	A,E
0013B2 18 20       3662                   JR	BYTE
0013B4             3663   ;
0013B4 E5          3664   OPND:           PUSH	HL
0013B5 21 F6 15    3665                   LD	HL,OPRNDS
0013B8 CD 3C 14    3666                   CALL	FIND
0013BB E1          3667                   POP	HL
0013BC D8          3668                   RET	C
0013BD CB 78       3669                   BIT	7,B
0013BF C8          3670                   RET	Z
0013C0 CB 58       3671                   BIT	3,B
0013C2 E5          3672                   PUSH	HL
0013C3 CC DB 13    3673                   CALL	Z,OFFSETasm
0013C6 5D          3674                   LD	E,L
0013C7 E1          3675                   POP	HL
0013C8 3E DD       3676                   LD	A,0DDH
0013CA CB 70       3677                   BIT	6,B
0013CC 28 02       3678                   JR	Z,OP1
0013CE 3E FD       3679                   LD	A,0FDH
0013D0 B7          3680   OP1:            OR	A
0013D1 14          3681                   INC	D
0013D2 57          3682                   LD	D,A
0013D3 F8          3683                   RET	M
0013D4 DD 77 00    3684   BYTE:           LD	(IX),A
0013D7 DD 23       3685                   INC	IX
0013D9 B7          3686                   OR	A
0013DA C9          3687                   RET
0013DB             3688   ;
0013DB FD 7E 00    3689   OFFSETasm:         LD	A,(IY)
0013DE FE 29       3690                   CP	')'
0013E0 21 00 00    3691                   LD	HL,0
0013E3 C8          3692                   RET	Z
0013E4 CD 85 14    3693   NUMBER:         CALL	SKIP
0013E7 C5          3694                   PUSH	BC
0013E8 D5          3695                   PUSH	DE
0013E9 DD E5       3696                   PUSH	IX
0013EB CD 15 18    3697                   CALL	EXPRI
0013EE DD E1       3698                   POP	IX
0013F0 D9          3699                   EXX
0013F1 D1          3700                   POP	DE
0013F2 C1          3701                   POP	BC
0013F3 7D          3702                   LD	A,L
0013F4 B7          3703                   OR	A
0013F5 C9          3704                   RET
0013F6             3705   ;
0013F6 CD B4 13    3706   REG:            CALL	OPND
0013F9 D8          3707                   RET	C
0013FA 78          3708                   LD	A,B
0013FB E6 3F       3709                   AND	3FH
0013FD FE 08       3710                   CP	8
0013FF 3F          3711                   CCF
001400 C9          3712                   RET
001401             3713   ;
001401 CD F6 13    3714   REGLO:          CALL	REG
001404 D8          3715                   RET	C
001405 18 2F       3716                   JR	ORC
001407             3717   ;
001407 CD F6 13    3718   REGHI:          CALL	REG
00140A D8          3719                   RET	C
00140B 18 26       3720                   JR	SHL3
00140D             3721   ;
00140D CD B4 13    3722   COND_:          CALL	OPND
001410 D8          3723                   RET	C
001411 78          3724                   LD	A,B
001412 E6 1F       3725                   AND	1FH
001414 D6 10       3726                   SUB	16
001416 30 1B       3727                   JR	NC,SHL3
001418 FE F1       3728                   CP	-15
00141A 37          3729                   SCF
00141B C0          3730                   RET	NZ
00141C 3E 03       3731                   LD	A,3
00141E 18 13       3732                   JR	SHL3
001420             3733   ;
001420 CD B4 13    3734   PAIRasm:           CALL	OPND
001423 D8          3735                   RET	C
001424 78          3736   PAIR1asm:          LD	A,B
001425 E6 0F       3737                   AND	0FH
001427 D6 08       3738                   SUB	8
001429 D8          3739                   RET	C
00142A 18 07       3740                   JR	SHL3
00142C             3741   ;
00142C CD E4 13    3742   BIT:            CALL	NUMBER
00142F FE 08       3743                   CP	8
001431 3F          3744                   CCF
001432 D8          3745                   RET	C
001433 07          3746   SHL3:           RLCA
001434 07          3747                   RLCA
001435 07          3748                   RLCA
001436 B1          3749   ORC:            OR	C
001437 4F          3750                   LD	C,A
001438 C9          3751                   RET
001439             3752   ;
001439 21 3B 16    3753   LDOP:           LD	HL,LDOPS
00143C CD 85 14    3754   FIND:           CALL	SKIP
00143F 06 00       3755   EXIT:           LD	B,0
001441 37          3756                   SCF
001442 C8          3757                   RET	Z
001443 FE DD       3758                   CP	TDEF
001445 28 04       3759                   JR	Z,FIND0
001447 FE 85       3760                   CP	TOR+1
001449 3F          3761                   CCF
00144A D8          3762                   RET	C
00144B 7E          3763   FIND0:          LD	A,(HL)
00144C B7          3764                   OR	A
00144D 28 F0       3765                   JR	Z,EXIT
00144F FD AE 00    3766                   XOR	(IY)
001452 E6 5F       3767                   AND	01011111B
001454 28 09       3768                   JR	Z,FIND2
001456 CB 7E       3769   FIND1:          BIT	7,(HL)
001458 23          3770                   INC	HL
001459 28 FB       3771                   JR	Z,FIND1
00145B 23          3772                   INC	HL
00145C 04          3773                   INC	B
00145D 18 EC       3774                   JR	FIND0
00145F             3775   ;
00145F FD E5       3776   FIND2:          PUSH	IY
001461 CB 7E       3777   FIND3:          BIT	7,(HL)
001463 FD 23       3778                   INC	IY
001465 23          3779                   INC	HL
001466 20 10       3780                   JR	NZ,FIND5
001468 BE          3781                   CP	(HL)
001469 CC 84 14    3782                   CALL	Z,SKIP0
00146C 7E          3783                   LD	A,(HL)
00146D FD AE 00    3784                   XOR	(IY)
001470 E6 5F       3785                   AND	01011111B
001472 28 ED       3786                   JR	Z,FIND3
001474 FD E1       3787   FIND4:          POP	IY
001476 18 DE       3788                   JR	FIND1
001478             3789   ;
001478 CD 97 14    3790   FIND5:          CALL	DELIM
00147B C4 91 14    3791                   CALL	NZ,SIGN
00147E 20 F4       3792                   JR	NZ,FIND4
001480 78          3793   FIND6:          LD	A,B
001481 46          3794                   LD	B,(HL)
001482 E1          3795                   POP	HL
001483 C9          3796                   RET
001484             3797   ;
001484 23          3798   SKIP0:          INC	HL
001485 CD 97 14    3799   SKIP:           CALL	DELIM
001488 C0          3800                   RET	NZ
001489 CD A3 14    3801                   CALL	TERM
00148C C8          3802                   RET	Z
00148D FD 23       3803                   INC	IY
00148F 18 F4       3804                   JR	SKIP
001491             3805   ;
001491 FE 2B       3806   SIGN:           CP	'+'
001493 C8          3807                   RET	Z
001494 FE 2D       3808                   CP	'-'
001496 C9          3809                   RET
001497             3810   ;
001497 FD 7E 00    3811   DELIM:          LD	A,(IY)		;ASSEMBLER DELIMITER
00149A FE 20       3812                   CP	' '
00149C C8          3813                   RET	Z
00149D FE 2C       3814                   CP	','
00149F C8          3815                   RET	Z
0014A0 FE 29       3816                   CP	')'
0014A2 C8          3817                   RET	Z
0014A3 FE 3B       3818   TERM:           CP	';'		;ASSEMBLER TERMINATOR
0014A5 C8          3819                   RET	Z
0014A6 FE 5C       3820                   CP	'\'
0014A8 C8          3821                   RET	Z
0014A9 FE 3A       3822   TERM0:          CP	':'		;ASSEMBLER SEPARATOR
0014AB D0          3823                   RET	NC
0014AC FE 0D       3824                   CP	CR
0014AE C9          3825                   RET
0014AF             3826   ;
0014AF 4E 4F       3827   OPCODS:         DB	"NO"
0014B1 D0          3828                   DB	'P'+80H
0014B2 00          3829                   DB	0
0014B3 52 4C 43    3830                   DB	"RLC"
0014B6 C1          3831                   DB	'A'+80H
0014B7 07          3832                   DB	7
0014B8 45 58       3833                   DB	"EX"
0014BA 00          3834                   DB	0
0014BB 41 46       3835                   DB	"AF"
0014BD 00          3836                   DB	0
0014BE 41 46       3837                   DB	"AF"
0014C0 27          3838                   DB	"'"+80H
0014C1 08          3839                   DB	8
0014C2 52 52 43    3840                   DB	"RRC"
0014C5 C1          3841                   DB	'A'+80H
0014C6 0F          3842                   DB	0FH
0014C7 52 4C       3843                   DB	"RL"
0014C9 C1          3844                   DB	'A'+80H
0014CA 17          3845                   DB	17H
0014CB 52 52       3846                   DB	"RR"
0014CD C1          3847                   DB	'A'+80H
0014CE 1F          3848                   DB	1FH
0014CF 44 41       3849                   DB	"DA"
0014D1 C1          3850                   DB	'A'+80H
0014D2 27          3851                   DB	27H
0014D3 43 50       3852                   DB	"CP"
0014D5 CC          3853                   DB	'L'+80H
0014D6 2F          3854                   DB	2FH
0014D7 53 43       3855                   DB	"SC"
0014D9 C6          3856                   DB	'F'+80H
0014DA 37          3857                   DB	37H
0014DB 43 43       3858                   DB	"CC"
0014DD C6          3859                   DB	'F'+80H
0014DE 3F          3860                   DB	3FH
0014DF 48 41 4C    3861                   DB	"HAL"
0014E2 D4          3862                   DB	'T'+80H
0014E3 76          3863                   DB	76H
0014E4 45 58       3864                   DB	"EX"
0014E6 D8          3865                   DB	'X'+80H
0014E7 D9          3866                   DB	0D9H
0014E8 45 58       3867                   DB	"EX"
0014EA 00          3868                   DB	0
0014EB 44 45       3869                   DB	"DE"
0014ED 00          3870                   DB	0
0014EE 48          3871                   DB	'H'
0014EF CC          3872                   DB	'L'+80H
0014F0 EB          3873                   DB	0EBH
0014F1 44          3874                   DB	'D'
0014F2 C9          3875                   DB	'I'+80H
0014F3 F3          3876                   DB	0F3H
0014F4 45          3877                   DB	'E'
0014F5 C9          3878                   DB	'I'+80H
0014F6 FB          3879                   DB	0FBH
0014F7             3880   ;
0014F7 4E 45       3881                   DB	"NE"
0014F9 C7          3882                   DB	'G'+80H
0014FA 44          3883                   DB	44H
0014FB 49 4D       3884                   DB	"IM"
0014FD 00          3885                   DB	0
0014FE B0          3886                   DB	'0'+80H
0014FF 46          3887                   DB	46H
001500 52 45 54    3888                   DB	"RET"
001503 CE          3889                   DB	'N'+80H
001504 45          3890                   DB	45H
001505 52 45 54    3891                   DB	"RET"
001508 C9          3892                   DB	'I'+80H
001509 4D          3893                   DB	4DH
00150A 49 4D       3894                   DB	"IM"
00150C 00          3895                   DB	0
00150D B1          3896                   DB	'1'+80H
00150E 56          3897                   DB	56H
00150F 49 4D       3898                   DB	"IM"
001511 00          3899                   DB	0
001512 B2          3900                   DB	'2'+80H
001513 5E          3901                   DB	5EH
001514 52 52       3902                   DB	"RR"
001516 C4          3903                   DB	'D'+80H
001517 67          3904                   DB	67H
001518 52 4C       3905                   DB	"RL"
00151A C4          3906                   DB	'D'+80H
00151B 6F          3907                   DB	6FH
00151C 4C 44       3908                   DB	"LD"
00151E C9          3909                   DB	'I'+80H
00151F A0          3910                   DB	0A0H
001520 43 50       3911                   DB	"CP"
001522 C9          3912                   DB	'I'+80H
001523 A1          3913                   DB	0A1H
001524 49 4E       3914                   DB	"IN"
001526 C9          3915                   DB	'I'+80H
001527 A2          3916                   DB	0A2H
001528 4F 55 54    3917                   DB	"OUT"
00152B C9          3918                   DB	'I'+80H
00152C A3          3919                   DB	0A3H
00152D 4C 44       3920                   DB	"LD"
00152F C4          3921                   DB	'D'+80H
001530 A8          3922                   DB	0A8H
001531 43 50       3923                   DB	"CP"
001533 C4          3924                   DB	'D'+80H
001534 A9          3925                   DB	0A9H
001535 49 4E       3926                   DB	"IN"
001537 C4          3927                   DB	'D'+80H
001538 AA          3928                   DB	0AAH
001539 4F 55 54    3929                   DB	"OUT"
00153C C4          3930                   DB	'D'+80H
00153D AB          3931                   DB	0ABH
00153E 4C 44 49    3932                   DB	"LDI"
001541 D2          3933                   DB	'R'+80H
001542 B0          3934                   DB	0B0H
001543 43 50 49    3935                   DB	"CPI"
001546 D2          3936                   DB	'R'+80H
001547 B1          3937                   DB	0B1H
001548 49 4E 49    3938                   DB	"INI"
00154B D2          3939                   DB	'R'+80H
00154C B2          3940                   DB	0B2H
00154D 4F 54 49    3941                   DB	"OTI"
001550 D2          3942                   DB	'R'+80H
001551 B3          3943                   DB	0B3H
001552 4C 44 44    3944                   DB	"LDD"
001555 D2          3945                   DB	'R'+80H
001556 B8          3946                   DB	0B8H
001557 43 50 44    3947                   DB	"CPD"
00155A D2          3948                   DB	'R'+80H
00155B B9          3949                   DB	0B9H
00155C 49 4E 44    3950                   DB	"IND"
00155F D2          3951                   DB	'R'+80H
001560 BA          3952                   DB	0BAH
001561 4F 54 44    3953                   DB	"OTD"
001564 D2          3954                   DB	'R'+80H
001565 BB          3955                   DB	0BBH
001566             3956   ;
001566 42 49       3957                   DB	"BI"
001568 D4          3958                   DB	'T'+80H
001569 40          3959                   DB	40H
00156A 52 45       3960                   DB	"RE"
00156C D3          3961                   DB	'S'+80H
00156D 80          3962                   DB	80H
00156E 53 45       3963                   DB	"SE"
001570 D4          3964                   DB	'T'+80H
001571 C0          3965                   DB	0C0H
001572             3966   ;
001572 52 4C       3967                   DB	"RL"
001574 C3          3968                   DB	'C'+80H
001575 00          3969                   DB	0
001576 52 52       3970                   DB	"RR"
001578 C3          3971                   DB	'C'+80H
001579 08          3972                   DB	8
00157A 52          3973                   DB	'R'
00157B CC          3974                   DB	'L'+80H
00157C 10          3975                   DB	10H
00157D 52          3976                   DB	'R'
00157E D2          3977                   DB	'R'+80H
00157F 18          3978                   DB	18H
001580 53 4C       3979                   DB	"SL"
001582 C1          3980                   DB	'A'+80H
001583 20          3981                   DB	20H
001584 53 52       3982                   DB	"SR"
001586 C1          3983                   DB	'A'+80H
001587 28          3984                   DB	28H
001588 53 52       3985                   DB	"SR"
00158A CC          3986                   DB	'L'+80H
00158B 38          3987                   DB	38H
00158C             3988   ;
00158C 50 4F       3989                   DB	"PO"
00158E D0          3990                   DB	'P'+80H
00158F C1          3991                   DB	0C1H
001590 50 55 53    3992                   DB	"PUS"
001593 C8          3993                   DB	'H'+80H
001594 C5          3994                   DB	0C5H
001595 45 58       3995                   DB	"EX"
001597 00          3996                   DB	0
001598 28 53       3997                   DB	"(S"
00159A D0          3998                   DB	'P'+80H
00159B E3          3999                   DB	0E3H
00159C             4000   ;
00159C 53 55       4001                   DB	"SU"
00159E C2          4002                   DB	'B'+80H
00159F 90          4003                   DB	90H
0015A0 41 4E       4004                   DB	"AN"
0015A2 C4          4005                   DB	'D'+80H
0015A3 A0          4006                   DB	0A0H
0015A4 58 4F       4007                   DB	"XO"
0015A6 D2          4008                   DB	'R'+80H
0015A7 A8          4009                   DB	0A8H
0015A8 4F          4010                   DB	'O'
0015A9 D2          4011                   DB	'R'+80H
0015AA B0          4012                   DB	0B0H
0015AB 43          4013                   DB	'C'
0015AC D0          4014                   DB	'P'+80H
0015AD B8          4015                   DB	0B8H
0015AE 80          4016                   DB	TAND
0015AF A0          4017                   DB	0A0H
0015B0 84          4018                   DB	TOR
0015B1 B0          4019                   DB	0B0H
0015B2             4020   ;
0015B2 41 44       4021                   DB	"AD"
0015B4 C4          4022                   DB	'D'+80H
0015B5 80          4023                   DB	80H
0015B6 41 44       4024                   DB	"AD"
0015B8 C3          4025                   DB	'C'+80H
0015B9 88          4026                   DB	88H
0015BA 53 42       4027                   DB	"SB"
0015BC C3          4028                   DB	'C'+80H
0015BD 98          4029                   DB	98H
0015BE             4030   ;
0015BE 49 4E       4031                   DB	"IN"
0015C0 C3          4032                   DB	'C'+80H
0015C1 04          4033                   DB	4
0015C2 44 45       4034                   DB	"DE"
0015C4 C3          4035                   DB	'C'+80H
0015C5 05          4036                   DB	5
0015C6             4037   ;
0015C6 49          4038                   DB	'I'
0015C7 CE          4039                   DB	'N'+80H
0015C8 40          4040                   DB	40H
0015C9 4F 55       4041                   DB	"OU"
0015CB D4          4042                   DB	'T'+80H
0015CC 41          4043                   DB	41H
0015CD             4044   ;
0015CD 4A          4045                   DB	'J'
0015CE D2          4046                   DB	'R'+80H
0015CF 20          4047                   DB	20H
0015D0 44 4A 4E    4048                   DB	"DJN"
0015D3 DA          4049                   DB	'Z'+80H
0015D4 10          4050                   DB	10H
0015D5             4051   ;
0015D5 4A          4052                   DB	'J'
0015D6 D0          4053                   DB	'P'+80H
0015D7 C2          4054                   DB	0C2H
0015D8             4055   ;
0015D8 43 41 4C    4056                   DB	"CAL"
0015DB CC          4057                   DB	'L'+80H
0015DC C4          4058                   DB	0C4H
0015DD             4059   ;
0015DD 52 53       4060                   DB	"RS"
0015DF D4          4061                   DB	'T'+80H
0015E0 C7          4062                   DB	0C7H
0015E1             4063   ;
0015E1 52 45       4064                   DB	"RE"
0015E3 D4          4065                   DB	'T'+80H
0015E4 C0          4066                   DB	0C0H
0015E5             4067   ;
0015E5 4C          4068                   DB	'L'
0015E6 C4          4069                   DB	'D'+80H
0015E7 40          4070                   DB	40H
0015E8             4071   ;
0015E8 5D          4072                   DB	TDEF & 7FH
0015E9 CD          4073                   DB	'M'+80H
0015EA 00          4074                   DB	0
0015EB             4075   ;
0015EB 5D          4076                   DB	TDEF & 7FH
0015EC C2          4077                   DB	'B'+80H
0015ED 00          4078                   DB	0
0015EE             4079   ;
0015EE 4F 50       4080                   DB	"OP"
0015F0 D4          4081                   DB	'T'+80H
0015F1 00          4082                   DB	0
0015F2             4083   ;
0015F2 5D          4084                   DB	TDEF & 7FH
0015F3 D7          4085                   DB	'W'+80H
0015F4 00          4086                   DB	0
0015F5             4087   ;
0015F5 00          4088                   DB	0
0015F6             4089   ;
0015F6 C2          4090   OPRNDS:         DB	'B'+80H
0015F7 00          4091                   DB	0
0015F8 C3          4092                   DB	'C'+80H
0015F9 01          4093                   DB	1
0015FA C4          4094                   DB	'D'+80H
0015FB 02          4095                   DB	2
0015FC C5          4096                   DB	'E'+80H
0015FD 03          4097                   DB	3
0015FE C8          4098                   DB	'H'+80H
0015FF 04          4099                   DB	4
001600 CC          4100                   DB	'L'+80H
001601 05          4101                   DB	5
001602 28 48       4102                   DB	"(H"
001604 CC          4103                   DB	'L'+80H
001605 06          4104                   DB	6
001606 C1          4105                   DB	'A'+80H
001607 07          4106                   DB	7
001608 28 49       4107                   DB	"(I"
00160A D8          4108                   DB	'X'+80H
00160B 86          4109                   DB	86H
00160C 28 49       4110                   DB	"(I"
00160E D9          4111                   DB	'Y'+80H
00160F C6          4112                   DB	0C6H
001610             4113   ;
001610 42          4114                   DB	'B'
001611 C3          4115                   DB	'C'+80H
001612 08          4116                   DB	8
001613 44          4117                   DB	'D'
001614 C5          4118                   DB	'E'+80H
001615 0A          4119                   DB	10
001616 48          4120                   DB	'H'
001617 CC          4121                   DB	'L'+80H
001618 0C          4122                   DB	12
001619 49          4123                   DB	'I'
00161A D8          4124                   DB	'X'+80H
00161B 8C          4125                   DB	8CH
00161C 49          4126                   DB	'I'
00161D D9          4127                   DB	'Y'+80H
00161E CC          4128                   DB	0CCH
00161F 41          4129                   DB	'A'
001620 C6          4130                   DB	'F'+80H
001621 0E          4131                   DB	14
001622 53          4132                   DB	'S'
001623 D0          4133                   DB	'P'+80H
001624 0E          4134                   DB	14
001625             4135   ;
001625 4E          4136                   DB	'N'
001626 DA          4137                   DB	'Z'+80H
001627 10          4138                   DB	16
001628 DA          4139                   DB	'Z'+80H
001629 11          4140                   DB	17
00162A 4E          4141                   DB	'N'
00162B C3          4142                   DB	'C'+80H
00162C 12          4143                   DB	18
00162D 50          4144                   DB	'P'
00162E CF          4145                   DB	'O'+80H
00162F 14          4146                   DB	20
001630 50          4147                   DB	'P'
001631 C5          4148                   DB	'E'+80H
001632 15          4149                   DB	21
001633 D0          4150                   DB	'P'+80H
001634 16          4151                   DB	22
001635 CD          4152                   DB	'M'+80H
001636 17          4153                   DB	23
001637             4154   ;
001637 28          4155                   DB	'('
001638 C3          4156                   DB	'C'+80H
001639 20          4157                   DB	20H
00163A             4158   ;
00163A 00          4159                   DB	0
00163B             4160   ;
00163B 49          4161   LDOPS:          DB	'I'
00163C 00          4162                   DB	0
00163D C1          4163                   DB	'A'+80H
00163E 47          4164                   DB	47H
00163F 52          4165                   DB	'R'
001640 00          4166                   DB	0
001641 C1          4167                   DB	'A'+80H
001642 4F          4168                   DB	4FH
001643 41          4169                   DB	'A'
001644 00          4170                   DB	0
001645 C9          4171                   DB	'I'+80H
001646 57          4172                   DB	57H
001647 41          4173                   DB	'A'
001648 00          4174                   DB	0
001649 D2          4175                   DB	'R'+80H
00164A 5F          4176                   DB	5FH
00164B 28 42 43    4177                   DB	"(BC"
00164E 00          4178                   DB	0
00164F C1          4179                   DB	'A'+80H
001650 02          4180                   DB	2
001651 28 44 45    4181                   DB	"(DE"
001654 00          4182                   DB	0
001655 C1          4183                   DB	'A'+80H
001656 12          4184                   DB	12H
001657 41          4185                   DB	'A'
001658 00          4186                   DB	0
001659 28 42       4187                   DB	"(B"
00165B C3          4188                   DB	'C'+80H
00165C 0A          4189                   DB	0AH
00165D 41          4190                   DB	'A'
00165E 00          4191                   DB	0
00165F 28 44       4192                   DB	"(D"
001661 C5          4193                   DB	'E'+80H
001662 1A          4194                   DB	1AH
001663             4195   ;
001663 00          4196                   DB	0
001664             4197   ;
001664             4198   FIN:            ; END
001664             4199   ; --- End asmb.asm ---
001664             4200   
001664             4201   ; --- Begin eval.asm ---
001664             4202   ;
001664             4203   ;Automatically created from original source on 2024-12-15 15:29:12
001664             4204   ;
001664             4205                   .ASSUME ADL = 0
001664             4206   ;	.ORG 0x0000
001664             4207   ;                SEGMENT CODE
001664             4208   ;
001664             4209   ;                XDEF	COUNT0
001664             4210   ;                XDEF	COUNT1
001664             4211   ;
001664             4212   ;BBC BASIC INTERPRETER - Z80 VERSION
001664             4213   ;EVALUATE EXPRESSION MODULE - "EVAL"
001664             4214   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
001664             4215   ;
001664             4216   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
001664             4217   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
001664             4218   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
001664             4219   ;
001664             4220   ;VERSION 2.3, 07-05-1984
001664             4221   ;VERSION 3.0, 08-03-1987
001664             4222   ;VERSION 5.0, 31-05-2024
001664             4223   ;
001664             4224   ;BINARY FLOATING POINT REPRESENTATION:
001664             4225   ; 32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
001664             4226   ; 8 BIT EXCESS-128 SIGNED EXPONENT
001664             4227   ; SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
001664             4228   ; MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
001664             4229   ;
001664             4230   ;BINARY INTEGER REPRESENTATION:
001664             4231   ; 32 BIT 2'S-COMPLEMENT SIGNED INTEGER
001664             4232   ; "EXPONENT" BYTE = 0 (WHEN PRESENT)
001664             4233   ;
001664             4234   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
001664             4235   ;                            EXPONENT - C
001664             4236   ;
001664             4237   ;                XDEF	EXPR
001664             4238   ;                XDEF	EXPRN
001664             4239   ;                XDEF	EXPRI
001664             4240   ;                XDEF	EXPRS
001664             4241   ;                XDEF	ITEMI
001664             4242   ;                XDEF	CONS
001664             4243   ;                XDEF	LOADS
001664             4244   ;                XDEF	VAL0
001664             4245   ;                XDEF	SFIX
001664             4246   ;                XDEF	STR
001664             4247   ;                XDEF	HEXSTR
001664             4248   ;                XDEF	LOAD4
001664             4249   ;                XDEF	LOADN
001664             4250   ;                XDEF	DLOAD5
001664             4251   ;                XDEF	TEST
001664             4252   ;                XDEF	ZERO
001664             4253   ;                XDEF	COMMA
001664             4254   ;                XDEF	BRAKET
001664             4255   ;                XDEF	DECODE
001664             4256   ;                XDEF	PUSHS
001664             4257   ;                XDEF	POPS
001664             4258   ;                XDEF	SEARCH
001664             4259   ;                XDEF	SCP
001664             4260   ;                XDEF	LETARR
001664             4261   ;
001664             4262   ;                XREF	MUL16
001664             4263   ;                XREF	ERROR_
001664             4264   ;                XREF	SYNTAX
001664             4265   ;                XREF	CHANEL
001664             4266   ;                XREF	CHNL
001664             4267   ;                XREF	STOREN
001664             4268   ;                XREF	STORE4
001664             4269   ;                XREF	STORE5
001664             4270   ;                XREF	STACCS
001664             4271   ;                XREF	CHECK
001664             4272   ;                XREF	USR
001664             4273   ;                XREF	VAR_
001664             4274   ;                XREF	FN
001664             4275   ;                XREF	XEQ
001664             4276   ;                XREF	NXT
001664             4277   ;                XREF	X14OR5
001664             4278   ;                XREF	MODIFY
001664             4279   ;                XREF	MODIFS
001664             4280   ;                XREF	TERMQ
001664             4281   ;
001664             4282   ;                XREF	GETVAR
001664             4283   ;                XREF	LEXAN2
001664             4284   ;                XREF	RANGE
001664             4285   ;                XREF	GETTOP
001664             4286   ;
001664             4287   ;                XREF	STAVAR
001664             4288   ;                XREF	PAGE_
001664             4289   ;                XREF	LOMEM
001664             4290   ;                XREF	HIMEM
001664             4291   ;                XREF	RANDOM
001664             4292   ;                XREF	COUNT
001664             4293   ;                XREF	LISTON
001664             4294   ;                XREF	PC
001664             4295   ;                XREF	ERL
001664             4296   ;                XREF	ERR
001664             4297   ;                XREF	ACCS
001664             4298   ;                XREF	ERRTXT
001664             4299   ;                XREF	KEYWDS
001664             4300   ;                XREF	KEYWDL
001664             4301   ;                XREF	FREE
001664             4302   ;                XREF	BUFFER
001664             4303   ;
001664             4304   ;                XREF	OSRDCH
001664             4305   ;                XREF	OSOPEN
001664             4306   ;                XREF	OSBGET
001664             4307   ;                XREF	OSSTAT
001664             4308   ;                XREF	GETCSR
001664             4309   ;                XREF	GETIME
001664             4310   ;                XREF	GETIMS
001664             4311   ;                XREF	GETEXT
001664             4312   ;                XREF	GETPTR
001664             4313   ;                XREF	OSKEY
001664             4314   ;
001664             4315   ;                XREF	POINT
001664             4316   ;                XREF	ADVAL
001664             4317   ;                XREF	TINTFN
001664             4318   ;                XREF	MODEFN
001664             4319   ;                XREF	WIDFN
001664             4320   ;
001664             4321   ;                XREF	FPP
001664             4322   ;
001664             4323   FUNTOK:         EQU	8DH		;1st FUNCTION TOKEN
001664             4324   TMOD:           EQU	83H
001664             4325   TLEN:           EQU	0A9H
001664             4326   ; TTO:            EQU	0B8H	; IN main.asm
001664             4327   ; TDIM:           EQU	0DEH	; IN main.asm
001664             4328   TEND:           EQU	0E0H
001664             4329   TMODE:          EQU	0EBH
001664             4330   TREPORT:        EQU	0F6H
001664             4331   TWIDTH:         EQU	0FEH
001664             4332   TTINT:          EQU	0AH
001664             4333   ; TBY:            EQU	0FH	; IN main.asm
001664             4334   ;
001664             4335   ;TABLE OF ADDRESSES FOR FUNCTIONS:
001664             4336   ;
001664 42 1F       4337   FUNTBL:         DW	DECODE		;Line number
001666 3D 1B       4338                   DW	OPENIN		;OPENIN
001668 5A 1B       4339                   DW	PTRev		;PTR
00166A 0F 1B       4340                   DW	PAGEVev		;PAGE
00166C 62 1B       4341                   DW	TIMEVev		;TIME
00166E 05 1B       4342                   DW	LOMEMVev		;LOMEM
001670 0A 1B       4343                   DW	HIMEMVev		;HIMEM
001672 AE 1B       4344                   DW	ABSev		;ABS
001674 EA 1B       4345                   DW	ACSev		;ACS
001676 C9 0D       4346                   DW	ADVAL		;ADVAL
001678 F2 1A       4347                   DW	ASC		;ASC
00167A E2 1B       4348                   DW	ASNev		;ASN
00167C E6 1B       4349                   DW	ATNev		;ATN
00167E CE 1A       4350                   DW	BGET		;BGET
001680 CE 1B       4351                   DW	COSev		;COS
001682 2D 1B       4352                   DW	COUNTV		;COUNT
001684 B6 1B       4353                   DW	DEGev		;DEG
001686 23 1B       4354                   DW	ERLV		;ERL
001688 28 1B       4355                   DW	ERRV		;ERR
00168A 0E 1C       4356                   DW	EVAL_		;EVAL_
00168C D6 1B       4357                   DW	EXPev		;EXP
00168E 52 1B       4358                   DW	EXTev		;EXT
001690 DA 1F       4359                   DW	ZERO		;FALSE
001692 C5 29       4360                   DW	FN		;FN
001694 DC 1A       4361                   DW	GET		;GET
001696 D7 1A       4362                   DW	INKEY		;INKEY
001698 87 1D       4363                   DW	INSTR		;INSTR(
00169A C2 1B       4364                   DW	INT_ev		;INT_
00169C FF 1A       4365                   DW	LEN		;LEN
00169E DA 1B       4366                   DW	LNev		;LN
0016A0 DE 1B       4367                   DW	LOGev		;LOG
0016A2 B2 1B       4368                   DW	CPL_ev		;NOT
0016A4 3A 1B       4369                   DW	OPENUP		;OPENUP
0016A6 38 1B       4370                   DW	OPENOT		;OPENOUT
0016A8 AA 1B       4371                   DW	PIev		;PI
0016AA 96 0D       4372                   DW	POINT		;POINT(
0016AC B7 1A       4373                   DW	POS		;POS
0016AE BA 1B       4374                   DW	RADev		;RAD
0016B0 3B 1C       4375                   DW	RND		;RND
0016B2 BE 1B       4376                   DW	SGNev		;SGN
0016B4 D2 1B       4377                   DW	SINev		;SIN
0016B6 C6 1B       4378                   DW	SQRev		;SQR
0016B8 CA 1B       4379                   DW	TANev		;TAN
0016BA 14 1B       4380                   DW	TOPV		;TO(P)
0016BC 9F 1B       4381                   DW	TRUEev		;TRUE
0016BE 21 30       4382                   DW	USR		;USR
0016C0 01 1C       4383                   DW	VALev		;VAL
0016C2 BD 1A       4384                   DW	VPOS		;VPOS
0016C4 08 1E       4385                   DW	CHRS		;CHR$
0016C6 0F 1E       4386                   DW	GETS		;GET$
0016C8 70 1E       4387                   DW	INKEYS		;INKEY$
0016CA B0 1E       4388                   DW	LEFTS		;LEFT$(
0016CC 80 1E       4389                   DW	MIDS		;MID$(
0016CE DE 1E       4390                   DW	RIGHTS		;RIGHT$(
0016D0 9A 1F       4391                   DW	STRS		;STR$
0016D2 08 1F       4392                   DW	STRING_		;STRING_$(
0016D4 C2 1A       4393                   DW	EOF		;EOF
0016D6 CB 1C       4394                   DW	SUM		;SUM
0016D8             4395   ;
0016D8             4396   FUNTBL_END:     EQU	$
0016D8             4397   ; TCMD:           EQU	FUNTOK+(FUNTBL_END-FUNTBL)/2
0016D8             4398   TCMD:           EQU	FUNTBL_END-FUNTBL/2+FUNTOK
0016D8             4399   ;
0016D8             4400   ; CR             EQU	0DH
0016D8             4401   ; LF             EQU	0AH
0016D8             4402   AND_:           EQU	80H
0016D8             4403   DIV_:           EQU	81H
0016D8             4404   EOR:            EQU	82H
0016D8             4405   MOD_:           EQU	83H
0016D8             4406   OR_:            EQU	84H
0016D8             4407   ;
0016D8 8D 1B       4408   SOPTBL:         DW	SLE		;<= (STRING)
0016DA 95 1B       4409                   DW	SNE		;<>
0016DC 87 1B       4410                   DW	SGE		;>=
0016DE 7A 1B       4411                   DW	SLT		;<
0016E0 9B 1B       4412                   DW	SEQ		;=
0016E2 80 1B       4413                   DW	SGT		;>
0016E4             4414   ;
0016E4             4415   ;EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
0016E4             4416   ; Expression type is returned in A'F':
0016E4             4417   ; Numeric - A' bit 7=0, F' sign bit cleared.
0016E4             4418   ; String - A' bit 7=1, F' sign bit set.
0016E4             4419   ;Floating-point or integer result returned in HLH'L'C
0016E4             4420   ; Integer result denoted by C=0 and HLH'L' non-zero.
0016E4             4421   ;String result returned in string accumulator, DE set.
0016E4             4422   ;
0016E4             4423   ;Hierarchy is: (1) Variables, functions,
0016E4             4424   ; constants, bracketed expressions.
0016E4             4425   ; (2) ^
0016E4             4426   ; (3) * / MOD DIV
0016E4             4427   ; (4) + -
0016E4             4428   ; (5) = <> <= >= > <
0016E4             4429   ; (6) AND
0016E4             4430   ; (7) EOR OR
0016E4             4431   ;
0016E4 CD F9 16    4432   EXPR:           CALL	EXPR1		;GET FIRST OPERAND
0016E7 FE 82       4433   EXPR0A:         CP	EOR		;CHECK OPERATOR
0016E9 28 03       4434                   JR	Z,EXPR0B
0016EB FE 84       4435                   CP	OR_
0016ED C0          4436                   RET	NZ
0016EE CD 55 20    4437   EXPR0B:         CALL	SAVEev		;SAVE FIRST OPERAND
0016F1 CD F9 16    4438                   CALL	EXPR1		;GET SECOND OPERAND
0016F4 CD 65 20    4439                   CALL	DOIT		;DO OPERATION
0016F7 18 EE       4440                   JR	EXPR0A		;CONTINUE
0016F9             4441   ;
0016F9 CD 0A 17    4442   EXPR1:          CALL	EXPR2
0016FC FE 80       4443   EXPR1A:         CP	AND_
0016FE C0          4444                   RET	NZ
0016FF CD 55 20    4445                   CALL	SAVEev
001702 CD 0A 17    4446                   CALL	EXPR2
001705 CD 65 20    4447                   CALL	DOIT
001708 18 F2       4448                   JR	EXPR1A
00170A             4449   ;
00170A CD 82 17    4450   EXPR2:          CALL	EXPR3ev
00170D CD 4C 20    4451                   CALL	RELOPQ
001710 C0          4452                   RET	NZ
001711 47          4453                   LD	B,A
001712 FD 23       4454                   INC	IY		;BUMP OVER OPERATOR
001714 CD ED 44    4455                   CALL	NXT
001717 CD 4C 20    4456                   CALL	RELOPQ		;COMPOUND OPERATOR?
00171A 20 07       4457                   JR	NZ,EXPR2B
00171C FD 23       4458                   INC	IY
00171E B8          4459                   CP	B
00171F 28 1C       4460                   JR	Z,SHIFT		;SHIFT | ==
001721 80          4461                   ADD	A,B
001722 47          4462                   LD	B,A
001723 78          4463   EXPR2B:         LD	A,B
001724 08          4464                   EX	AF,AF'
001725 FA 55 17    4465                   JP	M,EXPR2S
001728 08          4466                   EX	AF,AF'
001729 D6 04       4467                   SUB	4
00172B FE 3A       4468                   CP	'>'-4
00172D 20 02       4469                   JR	NZ,EXPR2C
00172F C6 02       4470                   ADD	A,2
001731 E6 0F       4471   EXPR2C:         AND	0FH
001733 CD 59 20    4472   EXPR2D:         CALL	SAVE1
001736 CD 82 17    4473                   CALL	EXPR3ev
001739 CD 65 20    4474                   CALL	DOIT		;Must NOT be "JP DOIT"
00173C C9          4475                   RET
00173D             4476   ;
00173D FE 3D       4477   SHIFT:          CP	'='
00173F 28 E2       4478                   JR	Z,EXPR2B	;==
001741 CD ED 44    4479                   CALL	NXT
001744 CD 4C 20    4480                   CALL	RELOPQ
001747 20 07       4481                   JR	NZ,SHIFT1
001749 B8          4482                   CP	B
00174A C2 C2 25    4483                   JP	NZ,SYNTAX
00174D FD 23       4484                   INC	IY
00174F 04          4485                   INC	B
001750 78          4486   SHIFT1:         LD	A,B
001751 D6 12       4487                   SUB	18
001753 18 DE       4488                   JR	EXPR2D
001755             4489   ;
001755 08          4490   EXPR2S:         EX	AF,AF'
001756 3D          4491                   DEC	A
001757 E6 07       4492                   AND	7
001759 CD FB 1F    4493                   CALL	PUSHS		;SAVE STRING ON STACK
00175C F5          4494                   PUSH	AF		;SAVE OPERATOR
00175D CD 82 17    4495                   CALL	EXPR3ev		;SECOND STRING
001760 08          4496                   EX	AF,AF'
001761 F2 50 18    4497                   JP	P,MISMATev
001764 F1          4498                   POP	AF
001765 4B          4499                   LD	C,E		;LENGTH OF STRING #2
001766 D1          4500                   POP	DE
001767 21 00 00    4501                   LD	HL,0
00176A 39          4502                   ADD	HL,SP
00176B 43          4503                   LD	B,E		;LENGTH OF STRING #1
00176C D5          4504                   PUSH	DE
00176D 11 00 52    4505                   LD	DE,ACCS
001770 EB          4506                   EX	DE,HL
001771 CD 9D 20    4507                   CALL	DISPT2
001774 D1          4508                   POP	DE
001775 EB          4509                   EX	DE,HL
001776 26 00       4510                   LD	H,0
001778 39          4511                   ADD	HL,SP
001779 F9          4512                   LD	SP,HL
00177A EB          4513                   EX	DE,HL
00177B AF          4514                   XOR	A		;NUMERIC MARKER
00177C 4F          4515                   LD	C,A		;INTEGER MARKER
00177D 08          4516                   EX	AF,AF'
00177E FD 7E 00    4517                   LD	A,(IY)
001781 C9          4518                   RET
001782             4519   ;
001782 CD D0 17    4520   EXPR3ev:          CALL	EXPR4
001785 FE 2D       4521   EXPR3A:         CP	'-'
001787 28 08       4522                   JR	Z,EXPR3B
001789 FE 2B       4523                   CP	'+'
00178B C0          4524                   RET	NZ
00178C 08          4525                   EX	AF,AF'
00178D FA 9C 17    4526                   JP	M,EXPR3S
001790 08          4527                   EX	AF,AF'
001791 CD 55 20    4528   EXPR3B:         CALL	SAVEev
001794 CD D0 17    4529                   CALL	EXPR4
001797 CD 65 20    4530                   CALL	DOIT
00179A 18 E9       4531                   JR	EXPR3A
00179C             4532   ;
00179C 08          4533   EXPR3S:         EX	AF,AF'
00179D FD 23       4534                   INC	IY		;BUMP PAST '+'
00179F CD FB 1F    4535                   CALL	PUSHS		;SAVE STRING ON STACK
0017A2 CD D0 17    4536                   CALL	EXPR4		;SECOND STRING
0017A5 08          4537                   EX	AF,AF'
0017A6 F2 50 18    4538                   JP	P,MISMATev
0017A9 4B          4539                   LD	C,E		;C=LENGTH
0017AA D1          4540                   POP	DE
0017AB D5          4541                   PUSH	DE
0017AC 21 00 52    4542                   LD	HL,ACCS
0017AF 54          4543                   LD	D,H
0017B0 79          4544                   LD	A,C
0017B1 B7          4545                   OR	A
0017B2 28 0E       4546                   JR	Z,EXP3S3
0017B4 45          4547                   LD	B,L
0017B5 6F          4548                   LD	L,A		;SOURCE
0017B6 83          4549                   ADD	A,E
0017B7 5F          4550                   LD	E,A		;DESTINATION
0017B8 3E 13       4551                   LD	A,19
0017BA 38 6B       4552                   JR	C,ERROR2ev	;"String too long"
0017BC D5          4553                   PUSH	DE
0017BD 1D          4554                   DEC	E
0017BE 2D          4555                   DEC	L
0017BF ED B8       4556                   LDDR			;COPY
0017C1 D1          4557                   POP	DE
0017C2 D9          4558   EXP3S3:         EXX
0017C3 C1          4559                   POP	BC
0017C4 CD 19 20    4560                   CALL	POPS		;RESTORE FROM STACK
0017C7 D9          4561                   EXX
0017C8 F6 80       4562                   OR	80H		;FLAG STRING
0017CA 08          4563                   EX	AF,AF'
0017CB FD 7E 00    4564                   LD	A,(IY)
0017CE 18 B5       4565                   JR	EXPR3A
0017D0             4566   ;
0017D0 CD F6 17    4567   EXPR4:          CALL	EXPR5
0017D3 FE 2A       4568   EXPR4A:         CP	'*'
0017D5 28 0B       4569                   JR	Z,EXPR4B
0017D7 FE 2F       4570                   CP	'/'
0017D9 28 07       4571                   JR	Z,EXPR4B
0017DB FE 83       4572                   CP	MOD_
0017DD 28 03       4573                   JR	Z,EXPR4B
0017DF FE 81       4574                   CP	DIV_
0017E1 C0          4575                   RET	NZ
0017E2 CD 55 20    4576   EXPR4B:         CALL	SAVEev
0017E5 CD F6 17    4577                   CALL	EXPR5
0017E8 CD 65 20    4578                   CALL	DOIT
0017EB 18 E6       4579                   JR	EXPR4A
0017ED             4580   ;
0017ED 7B          4581   EXPR45:         LD	A,E
0017EE FE 2B       4582                   CP	'+'
0017F0 28 DE       4583                   JR	Z,EXPR4
0017F2 FE 2D       4584                   CP	'-'
0017F4 28 DA       4585                   JR	Z,EXPR4
0017F6 CD B2 18    4586   EXPR5:          CALL	ITEM
0017F9 B7          4587                   OR	A		;TEST TYPE
0017FA 08          4588                   EX	AF,AF'		;SAVE TYPE
0017FB CD ED 44    4589   EXPR5A:         CALL	NXT
0017FE FE 5E       4590                   CP	'^'
001800 C0          4591                   RET	NZ
001801 CD 55 20    4592                   CALL	SAVEev
001804 CD B2 18    4593                   CALL	ITEM
001807 B7          4594                   OR	A
001808 08          4595                   EX	AF,AF'
001809 CD 65 20    4596                   CALL	DOIT
00180C 18 ED       4597                   JR	EXPR5A
00180E             4598   ;
00180E CD E4 16    4599   EXPRN:          CALL	EXPR
001811 08          4600                   EX	AF,AF'
001812 F0          4601                   RET	P
001813 18 3B       4602                   JR	MISMATev
001815             4603   ;
001815 CD E4 16    4604   EXPRI:          CALL	EXPR
001818 08          4605                   EX	AF,AF'
001819 F2 F9 1B    4606                   JP	P,SFIX
00181C 18 32       4607                   JR	MISMATev
00181E             4608   ;
00181E CD E4 16    4609   EXPRS:          CALL	EXPR
001821 08          4610                   EX	AF,AF'
001822 F8          4611                   RET	M
001823 18 2B       4612                   JR	MISMATev
001825             4613   ;
001825 3E 1C       4614   BADHEX:         LD	A,28
001827 C3 26 3F    4615   ERROR2ev:         JP	ERROR_		;"Bad HEX or binary"
00182A             4616   ;
00182A D9          4617   NEGATEev:         EXX
00182B 7C          4618                   LD	A,H
00182C 2F          4619                   CPL
00182D 67          4620                   LD	H,A
00182E 7D          4621                   LD	A,L
00182F 2F          4622                   CPL
001830 6F          4623                   LD	L,A
001831 D9          4624                   EXX
001832 7C          4625                   LD	A,H
001833 2F          4626                   CPL
001834 67          4627                   LD	H,A
001835 7D          4628                   LD	A,L
001836 2F          4629                   CPL
001837 6F          4630                   LD	L,A
001838 D9          4631   ADD1ev:           EXX
001839 23          4632                   INC	HL
00183A 7C          4633                   LD	A,H
00183B B5          4634                   OR	L
00183C D9          4635                   EXX
00183D 3E 00       4636                   LD	A,0		;NUMERIC MARKER
00183F C0          4637                   RET	NZ
001840 23          4638                   INC	HL
001841 C9          4639                   RET
001842             4640   ;
001842 CD B2 18    4641   ITEMI:          CALL	ITEM
001845 B7          4642                   OR	A
001846 F2 F9 1B    4643                   JP	P,SFIX
001849 18 05       4644                   JR	MISMATev
00184B             4645   ;
00184B CD B2 18    4646   ITEMS:          CALL	ITEM
00184E B7          4647                   OR	A
00184F F8          4648                   RET	M
001850 3E 06       4649   MISMATev:         LD	A,6
001852 18 D3       4650                   JR	ERROR2ev		;"Type mismatch"
001854             4651   ;
001854 CD E4 16    4652   ITEM1:          CALL	EXPR		;BRACKETED EXPR
001857 CD 90 20    4653                   CALL	BRAKET
00185A 08          4654                   EX	AF,AF'
00185B C9          4655                   RET
00185C             4656   ;
00185C CD B2 18    4657   ITEMN:          CALL	ITEM
00185F B7          4658                   OR	A
001860 F0          4659                   RET	P
001861 18 ED       4660                   JR	MISMATev
001863             4661   ;
001863             4662   ;HEX - Get hexadecimal constant.
001863             4663   ;   Inputs: ASCII string at (IY)
001863             4664   ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
001863             4665   ;           IY updated (points to delimiter)
001863             4666   ;
001863 CD DA 1F    4667   HEXev:            CALL	ZERO
001866 CD 39 20    4668                   CALL	HEXDIG
001869 38 BA       4669                   JR	C,BADHEX
00186B FD 23       4670   HEX1:           INC	IY
00186D E6 0F       4671                   AND	0FH
00186F 06 04       4672                   LD	B,4
001871 D9          4673   HEX2:           EXX
001872 29          4674                   ADD	HL,HL
001873 D9          4675                   EXX
001874 ED 6A       4676                   ADC	HL,HL
001876 10 F9       4677                   DJNZ	HEX2
001878 D9          4678                   EXX
001879 B5          4679                   OR	L
00187A 6F          4680                   LD	L,A
00187B D9          4681                   EXX
00187C CD 39 20    4682                   CALL	HEXDIG
00187F 30 EA       4683                   JR	NC,HEX1
001881 AF          4684                   XOR	A
001882 C9          4685                   RET
001883             4686   ;
001883             4687   ;BIN - Get binary constant.
001883             4688   ;   Inputs: ASCII string at (IY)
001883             4689   ;  Outputs: Integer result in H'L'HL, C=0, A=0.
001883             4690   ;           IY updated (points to delimiter)
001883             4691   ;
001883 CD DA 1F    4692   BIN:            CALL	ZERO
001886 CD 2C 20    4693                   CALL	BINDIG
001889 38 9A       4694                   JR	C,BADHEX
00188B FD 23       4695   BIN1:           INC	IY
00188D CB 1F       4696                   RR	A
00188F D9          4697                   EXX
001890 ED 6A       4698                   ADC	HL,HL
001892 D9          4699                   EXX
001893 ED 6A       4700                   ADC	HL,HL
001895 CD 2C 20    4701                   CALL	BINDIG
001898 30 F1       4702                   JR	NC,BIN1
00189A AF          4703                   XOR	A
00189B C9          4704                   RET
00189C             4705   ;
00189C             4706   ;MINUS - Unary minus.
00189C             4707   ;   Inputs: IY = text pointer
00189C             4708   ;  Outputs: Numeric result, same type as argument.
00189C             4709   ;           Result in H'L'HLC
00189C             4710   ;
00189C CD 5C 18    4711   MINUS:          CALL	ITEMN
00189F 0D          4712   MINUS0:         DEC	C
0018A0 0C          4713                   INC	C
0018A1 28 87       4714                   JR	Z,NEGATEev	;ZERO/INTEGER
0018A3 7C          4715                   LD	A,H
0018A4 EE 80       4716                   XOR	80H		;CHANGE SIGN (FP)
0018A6 67          4717                   LD	H,A
0018A7 AF          4718                   XOR	A		;NUMERIC MARKER
0018A8 C9          4719                   RET
0018A9             4720   ;
0018A9 CD B8 25    4721   ADDROF:         CALL	VAR_
0018AC E5          4722                   PUSH	HL
0018AD D9          4723                   EXX
0018AE E1          4724                   POP	HL
0018AF C3 32 1B    4725                   JP	COUNT1
0018B2             4726   ;
0018B2             4727   ;ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
0018B2             4728   ;Item type is returned in A: Bit 7=0 numeric.
0018B2             4729   ; Bit 7=1 string.
0018B2             4730   ;Numeric item returned in HLH'L'C.
0018B2             4731   ;String item returned in string accumulator,
0018B2             4732   ; DE addresses byte after last (E=length).
0018B2             4733   ;
0018B2 CD 68 32    4734   ITEM:           CALL	CHECK
0018B5 CD ED 44    4735                   CALL	NXT
0018B8 FD 23       4736                   INC	IY
0018BA FE 8D       4737                   CP	FUNTOK
0018BC 38 08       4738                   JR	C,ITEM0
0018BE FE C7       4739                   CP	TCMD
0018C0 DA A3 20    4740                   JP	C,DISPATev	;FUNCTIONS
0018C3 C3 12 1A    4741                   JP	EXTRASev		;DIM, END, MODE, REPORT$, WIDTH
0018C6             4742   ;
0018C6 FE 3A       4743   ITEM0:          CP	':'
0018C8 30 25       4744                   JR	NC,ITEM2	;VARIABLES
0018CA FE 30       4745                   CP	'0'
0018CC 30 7B       4746                   JR	NC,CONev		;NUMERIC CONSTANT
0018CE FE 28       4747                   CP	'('
0018D0 28 82       4748                   JR	Z,ITEM1		;EXPRESSION
0018D2 FE 2D       4749                   CP	'-'
0018D4 28 C6       4750                   JR	Z,MINUS		;UNARY MINUS
0018D6 FE 2B       4751                   CP	'+'
0018D8 28 82       4752                   JR	Z,ITEMN		;UNARY PLUS
0018DA FE 2E       4753                   CP	'.'
0018DC 28 6B       4754                   JR	Z,CONev		;NUMERIC CONSTANT
0018DE FE 26       4755                   CP	'&'
0018E0 28 81       4756                   JR	Z,HEXev		;HEX CONSTANT
0018E2 FE 25       4757                   CP	'%'
0018E4 28 9D       4758                   JR	Z,BIN		;BINARY CONSTANT
0018E6 FE 22       4759                   CP	'"'
0018E8 28 72       4760                   JR	Z,CONS		;STRING CONSTANT
0018EA FE 0A       4761                   CP	TTINT
0018EC CA B2 1A    4762                   JP	Z,TINTev		;TINT FUNCTION
0018EF FE 83       4763   ITEM2:          CP	TMOD
0018F1 CA 2F 1D    4764                   JP	Z,MODFUN	;MOD
0018F4 FE 5E       4765                   CP	'^'
0018F6 28 B1       4766                   JR	Z,ADDROF	;^ OPERATOR
0018F8 FD 2B       4767                   DEC	IY
0018FA CD C5 41    4768                   CALL	GETVAR		;VARIABLE
0018FD 20 2F       4769                   JR	NZ,NOSUCHev
0018FF CB 77       4770                   BIT	6,A
001901 20 7E       4771                   JR	NZ,ARRAYev
001903 B7          4772                   OR	A
001904 FA F0 19    4773                   JP	M,LOADS		;STRING VARIABLE
001907 CB 57       4774   LOADN:          BIT	2,A
001909 0E 00       4775                   LD	C,0
00190B 28 16       4776                   JR	Z,LOAD1		;BYTE VARIABLE
00190D CB 47       4777                   BIT	0,A
00190F 28 03       4778                   JR	Z,LOAD4		;INTEGER VARIABLE
001911 DD 4E 04    4779   LOAD5:          LD	C,(IX+4)
001914 D9          4780   LOAD4:          EXX
001915 DD 6E 00    4781                   LD	L,(IX+0)
001918 DD 66 01    4782                   LD	H,(IX+1)
00191B D9          4783                   EXX
00191C DD 6E 02    4784                   LD	L,(IX+2)
00191F DD 66 03    4785                   LD	H,(IX+3)
001922 C9          4786                   RET
001923             4787   ;
001923 21 00 00    4788   LOAD1:          LD	HL,0
001926 D9          4789                   EXX
001927 26 00       4790                   LD	H,0
001929 DD 6E 00    4791                   LD	L,(IX+0)
00192C D9          4792                   EXX
00192D C9          4793                   RET
00192E             4794   ;
00192E DA C2 25    4795   NOSUCHev:         JP	C,SYNTAX
001931 3A FE 54    4796                   LD	A,(LISTON)
001934 CB 6F       4797                   BIT	5,A
001936 3E 1A       4798                   LD	A,26
001938 20 36       4799                   JR	NZ,ERROR0ev	;"No such variable"
00193A FD 23       4800   NOS1:           INC	IY
00193C CD D1 43    4801                   CALL	RANGE
00193F 30 F9       4802                   JR	NC,NOS1
001941 DD 21 40 54 4803                   LD	IX,PC
001945 AF          4804                   XOR	A
001946 4F          4805                   LD	C,A
001947 18 CB       4806                   JR	LOAD4
001949             4807   ;
001949             4808   ;CON - Get unsigned numeric constant from ASCII string.
001949             4809   ;   Inputs: ASCII string at (IY-1)
001949             4810   ;  Outputs: Variable-type result in HLH'L'C
001949             4811   ;           IY updated (points to delimiter)
001949             4812   ;           A7 = 0 (numeric marker)
001949             4813   ;
001949 FD 2B       4814   CONev:            DEC	IY
00194B FD E5       4815                   PUSH	IY
00194D DD E1       4816                   POP	IX
00194F 3E 24       4817                   LD	A,36
001951 CD F7 44    4818                   CALL	FPP
001954 38 1A       4819                   JR	C,ERROR0ev
001956 DD E5       4820                   PUSH	IX
001958 FD E1       4821                   POP	IY
00195A AF          4822                   XOR	A
00195B C9          4823                   RET
00195C             4824   ;
00195C             4825   ;CONS - Get string constant from ASCII string.
00195C             4826   ;   Inputs: ASCII string at (IY)
00195C             4827   ;  Outputs: Result in string accumulator.
00195C             4828   ;           D = MS byte of ACCS, E = string length
00195C             4829   ;           A7 = 1 (string marker)
00195C             4830   ;           IY updated
00195C             4831   ;
00195C 11 00 52    4832   CONS:           LD	DE,ACCS
00195F FD 7E 00    4833   CONS3:          LD	A,(IY)
001962 FD 23       4834                   INC	IY
001964 FE 22       4835                   CP	'"'
001966 28 0B       4836                   JR	Z,CONS2
001968 12          4837   CONS1:          LD	(DE),A
001969 1C          4838                   INC	E
00196A FE 0D       4839                   CP	CR
00196C 20 F1       4840                   JR	NZ,CONS3
00196E 3E 09       4841                   LD	A,9
001970 C3 26 3F    4842   ERROR0ev:         JP	ERROR_		;"Missing """
001973             4843   ;
001973 FD 7E 00    4844   CONS2:          LD	A,(IY)
001976 FE 22       4845                   CP	'"'
001978 FD 23       4846                   INC	IY
00197A 28 EC       4847                   JR	Z,CONS1
00197C FD 2B       4848                   DEC	IY
00197E 3E 80       4849                   LD	A,80H		;STRING MARKER
001980 C9          4850                   RET
001981             4851   ;
001981 3E 0E       4852   ARRAYev:          LD	A,14		;'Bad use of array'
001983 C3 26 3F    4853                   JP	ERROR_
001986             4854   ;
001986             4855   ; ARRLEN - Get start address and number of elements of an array
001986             4856   ;   Inputs: HL addresses array descriptor
001986             4857   ;  Outputs: HL = address of first element
001986             4858   ;           DE = total number of elements
001986             4859   ;           A = 0
001986             4860   ; Destroys: A,B,C,D,E,H,L,flags
001986             4861   ;
001986 7E          4862   ARRLEN:         LD	A,(HL)		;Number of dimensions
001987 23          4863                   INC	HL
001988 B7          4864                   OR	A
001989 28 F6       4865                   JR	Z,ARRAYev
00198B 11 01 00    4866                   LD	DE,1
00198E 4E          4867   ARLOOP:         LD	C,(HL)
00198F 23          4868                   INC	HL
001990 46          4869                   LD	B,(HL)		;BC = size of this dimension
001991 23          4870                   INC	HL
001992 EB          4871                   EX	DE,HL
001993 F5          4872                   PUSH	AF
001994 D5          4873                   PUSH	DE
001995 CD 9F 36    4874                   CALL	MUL16		;HL=HL*BC
001998 D1          4875                   POP	DE
001999 F1          4876                   POP	AF
00199A EB          4877                   EX	DE,HL
00199B 3D          4878                   DEC	A
00199C 20 F0       4879                   JR	NZ,ARLOOP
00199E C9          4880                   RET
00199F             4881   ;
00199F CD ED 44    4882   GETARR:         CALL	NXT
0019A2 CD C5 41    4883                   CALL	GETVAR
0019A5 20 87       4884                   JR	NZ,NOSUCHev
0019A7 CB 77       4885                   BIT	6,A
0019A9 37          4886                   SCF
0019AA 28 82       4887                   JR	Z,NOSUCHev
0019AC E6 8F       4888                   AND	8FH
0019AE 47          4889                   LD	B,A		;Type + size
0019AF 7E          4890   GETAR1:         LD	A,(HL)
0019B0 23          4891                   INC	HL
0019B1 66          4892                   LD	H,(HL)
0019B2 6F          4893                   LD	L,A
0019B3 E6 FE       4894                   AND	0FEH
0019B5 B4          4895                   OR	H
0019B6 28 C9       4896                   JR	Z,ARRAYev		;Bad use of array
0019B8 C9          4897                   RET
0019B9             4898   ;
0019B9 CD ED 44    4899   GETARB:         CALL	NXT
0019BC FE 28       4900                   CP	'('
0019BE 20 DF       4901                   JR	NZ,GETARR
0019C0 FD 23       4902                   INC	IY
0019C2 CD 9F 19    4903                   CALL	GETARR
0019C5 CD 90 20    4904                   CALL	BRAKET
0019C8 C9          4905                   RET
0019C9             4906   ;
0019C9 CB 57       4907   DLOADN:         BIT	2,A
0019CB 06 00       4908                   LD	B,0
0019CD 28 16       4909                   JR	Z,DLOAD1	;BYTE VARIABLE
0019CF CB 47       4910                   BIT	0,A
0019D1 28 03       4911                   JR	Z,DLOAD4	;INTEGER VARIABLE
0019D3 DD 46 04    4912   DLOAD5:         LD	B,(IX+4)
0019D6 D9          4913   DLOAD4:         EXX
0019D7 DD 5E 00    4914                   LD	E,(IX+0)
0019DA DD 56 01    4915                   LD	D,(IX+1)
0019DD D9          4916                   EXX
0019DE DD 5E 02    4917                   LD	E,(IX+2)
0019E1 DD 56 03    4918                   LD	D,(IX+3)
0019E4 C9          4919                   RET
0019E5             4920   ;
0019E5 11 00 00    4921   DLOAD1:         LD	DE,0
0019E8 D9          4922                   EXX
0019E9 16 00       4923                   LD	D,0
0019EB DD 5E 00    4924                   LD	E,(IX+0)
0019EE D9          4925                   EXX
0019EF C9          4926                   RET
0019F0             4927   ;
0019F0 11 00 52    4928   LOADS:          LD	DE,ACCS
0019F3 1F          4929                   RRA
0019F4 30 10       4930                   JR	NC,LOADS2	;FIXED STRING
0019F6 CD 14 19    4931                   CALL	LOAD4
0019F9 D9          4932                   EXX
0019FA 7D          4933                   LD	A,L
0019FB D9          4934                   EXX
0019FC B7          4935                   OR	A
0019FD 4F          4936                   LD	C,A
0019FE 3E 80       4937                   LD	A,80H		;STRING MARKER
001A00 C8          4938                   RET	Z
001A01 06 00       4939                   LD	B,0
001A03 ED B0       4940                   LDIR
001A05 C9          4941                   RET
001A06             4942   ;
001A06 7E          4943   LOADS2:         LD	A,(HL)
001A07 12          4944                   LD	(DE),A
001A08 23          4945                   INC	HL
001A09 FE 0D       4946                   CP	CR
001A0B 3E 80       4947   REPDUN:         LD	A,80H		;STRING MARKER
001A0D C8          4948                   RET	Z
001A0E 1C          4949                   INC	E
001A0F 20 F5       4950                   JR	NZ,LOADS2
001A11 C9          4951                   RET			;RETURN NULL STRING
001A12             4952   ;
001A12             4953   ; Version 5 extensions:
001A12             4954   ;
001A12 FE EB       4955   EXTRASev:         CP	TMODE
001A14 CA D5 0D    4956                   JP	Z,MODEFN	;MODE
001A17 FE FE       4957                   CP	TWIDTH
001A19 CA DF 0D    4958                   JP	Z,WIDFN		;WIDTH
001A1C FE F6       4959                   CP	TREPORT
001A1E 28 11       4960                   JR	Z,REPORS	;REPORT$
001A20 FE E0       4961                   CP	TEND
001A22 28 07       4962                   JR	Z,ENDFUN	;END
001A24 FE DE       4963                   CP	TDIM
001A26 28 44       4964                   JR	Z,DIMFUN	;DIM
001A28 C3 C2 25    4965   SYNERR:         JP	SYNTAX		; 'Syntax error'
001A2B             4966   ;
001A2B             4967   ; END (function)
001A2B             4968   ;
001A2B 2A E0 54    4969   ENDFUN:         LD	HL,(FREE)
001A2E C3 32 1B    4970                   JP	COUNT1
001A31             4971   ;
001A31             4972   ; REPORT$
001A31             4973   ;
001A31 FD 7E 00    4974   REPORS:         LD	A,(IY)
001A34 FE 24       4975                   CP	'$'
001A36 20 F0       4976                   JR	NZ,SYNERR
001A38 FD 23       4977                   INC	IY
001A3A 2A EE 54    4978                   LD	HL,(ERRTXT)
001A3D 11 00 52    4979                   LD	DE,ACCS
001A40 7E          4980   REPCPY:         LD	A,(HL)
001A41 B7          4981                   OR	A
001A42 28 C7       4982                   JR	Z,REPDUN
001A44 ED A0       4983                   LDI
001A46 FE A0       4984                   CP	160
001A48 EA 40 1A    4985                   JP	PE,REPCPY
001A4B FE 0A       4986                   CP	LF
001A4D 28 F1       4987                   JR	Z,REPCPY
001A4F 1D          4988                   DEC	E
001A50 E5          4989                   PUSH	HL
001A51 21 66 38    4990                   LD	HL,KEYWDS
001A54 01 5B 03    4991                   LD	BC,KEYWDL
001A57 ED B1       4992                   CPIR
001A59 06 A0       4993                   LD	B,160
001A5B FE 91       4994                   CP	145
001A5D EA 61 1A    4995                   JP	PE,REPTOK
001A60 04          4996                   INC	B
001A61 7E          4997   REPTOK:         LD	A,(HL)
001A62 ED A0       4998                   LDI
001A64 B8          4999                   CP	B
001A65 EA 61 1A    5000                   JP	PE,REPTOK
001A68 E1          5001                   POP	HL
001A69 1D          5002                   DEC	E
001A6A 18 D4       5003                   JR	REPCPY
001A6C             5004   ;
001A6C             5005   ; DIM(array()[,sub])
001A6C             5006   ;
001A6C CD ED 44    5007   DIMFUN:         CALL	NXT
001A6F FE 28       5008                   CP	'('
001A71 20 09       5009                   JR	NZ,DIMF0
001A73 FD 23       5010                   INC	IY
001A75 CD 7C 1A    5011                   CALL	DIMF0
001A78 CD 90 20    5012                   CALL	BRAKET
001A7B C9          5013                   RET
001A7C             5014   ;
001A7C CD 9F 19    5015   DIMF0:          CALL	GETARR
001A7F E5          5016                   PUSH	HL
001A80 CD ED 44    5017                   CALL	NXT
001A83 1E 00       5018                   LD	E,0
001A85 FE 2C       5019                   CP	','
001A87 20 0B       5020                   JR	NZ,DIMF1
001A89 FD 23       5021                   INC	IY
001A8B CD 15 18    5022                   CALL	EXPRI
001A8E D9          5023                   EXX
001A8F EB          5024                   EX	DE,HL
001A90 1C          5025                   INC	E
001A91 1D          5026                   DEC	E
001A92 28 19       5027                   JR	Z,BADSUB
001A94 E1          5028   DIMF1:          POP	HL
001A95 7E          5029                   LD	A,(HL)
001A96 23          5030                   INC	HL
001A97 BB          5031                   CP	E
001A98 38 13       5032                   JR	C,BADSUB
001A9A 1D          5033                   DEC	E
001A9B FA A8 1A    5034                   JP	M,DIMF3
001A9E 19          5035                   ADD	HL,DE
001A9F 19          5036                   ADD	HL,DE
001AA0 7E          5037                   LD	A,(HL)
001AA1 23          5038                   INC	HL
001AA2 66          5039                   LD	H,(HL)
001AA3 6F          5040                   LD	L,A
001AA4 2B          5041                   DEC	HL
001AA5 C3 32 1B    5042   DIMF2:          JP	COUNT1
001AA8 6F          5043   DIMF3:          LD	L,A
001AA9 26 00       5044                   LD	H,0
001AAB 18 F8       5045                   JR	DIMF2
001AAD             5046   ;
001AAD 3E 0F       5047   BADSUB:         LD	A,15
001AAF C3 26 3F    5048                   JP	ERROR_			;"Bad subscript"
001AB2             5049   ;
001AB2             5050   ;VARIABLE-TYPE FUNCTIONS:
001AB2             5051   ;
001AB2             5052   ;Result returned in HLH'L'C (floating point)
001AB2             5053   ;Result returned in HLH'L' (C=0) (integer)
001AB2             5054   ;Result returned in string accumulator & DE (string)
001AB2             5055   ;All registers destroyed.
001AB2             5056   ;IY (text pointer) updated.
001AB2             5057   ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
001AB2             5058   ;
001AB2             5059   ;
001AB2             5060   ;POS - horizontal cursor position.
001AB2             5061   ;VPOS - vertical cursor position.
001AB2             5062   ;EOF - return status of file.
001AB2             5063   ;BGET - read byte from file.
001AB2             5064   ;INKEY - as GET but wait only n centiseconds.
001AB2             5065   ;GET - wait for keypress and return ASCII value.
001AB2             5066   ;GET(n) - input from Z80 port n.
001AB2             5067   ;ASC - ASCII value of string.
001AB2             5068   ;LEN - length of string.
001AB2             5069   ;LOMEM - location of dynamic variables.
001AB2             5070   ;HIMEM - top of available RAM.
001AB2             5071   ;PAGE - start of current text page.
001AB2             5072   ;TOP - address of first free byte after program.
001AB2             5073   ;ERL - line number where last error occurred.
001AB2             5074   ;ERR - number of last error.
001AB2             5075   ;COUNT - number of printing characters since CR.
001AB2             5076   ;Results are integer numeric.
001AB2             5077   ;
001AB2 CD F3 10    5078   TINTev:           CALL	TINTFN
001AB5 18 7B       5079                   JR	COUNT1
001AB7 CD 8B 0D    5080   POS:            CALL	GETCSR
001ABA EB          5081                   EX	DE,HL
001ABB 18 75       5082                   JR	COUNT1
001ABD CD 8B 0D    5083   VPOS:           CALL	GETCSR
001AC0 18 70       5084                   JR	COUNT1
001AC2 CD B3 36    5085   EOF:            CALL	CHANEL
001AC5 CD 4E 06    5086                   CALL	OSSTAT
001AC8 CA 9F 1B    5087                   JP	Z,TRUEev
001ACB C3 DA 1F    5088                   JP	ZERO
001ACE CD B3 36    5089   BGET:           CALL	CHANEL		;CHANNEL NUMBER
001AD1 CD 3D 06    5090                   CALL	OSBGET
001AD4 6F          5091                   LD	L,A
001AD5 18 59       5092                   JR	COUNT0
001AD7 CD 70 1E    5093   INKEY:          CALL	INKEYS
001ADA 18 19       5094                   JR	ASC0
001ADC CD ED 44    5095   GET:            CALL	NXT
001ADF FE 28       5096                   CP	'('
001AE1 20 0A       5097                   JR	NZ,GET0
001AE3 CD 42 18    5098                   CALL	ITEMI		;PORT ADDRESS
001AE6 D9          5099                   EXX
001AE7 44          5100                   LD	B,H
001AE8 4D          5101                   LD	C,L
001AE9 ED 68       5102                   IN	L,(C)		;INPUT FROM PORT BC
001AEB 18 43       5103                   JR	COUNT0
001AED CD 0F 1E    5104   GET0:           CALL	GETS
001AF0 18 08       5105                   JR	ASC1
001AF2 CD 4B 18    5106   ASC:            CALL	ITEMS
001AF5 AF          5107   ASC0:           XOR	A
001AF6 BB          5108                   CP	E
001AF7 CA 9F 1B    5109                   JP	Z,TRUEev		;NULL STRING
001AFA 2A 00 52    5110   ASC1:           LD	HL,(ACCS)
001AFD 18 31       5111                   JR	COUNT0
001AFF CD 4B 18    5112   LEN:            CALL	ITEMS
001B02 EB          5113                   EX	DE,HL
001B03 18 2B       5114                   JR	COUNT0
001B05 2A DE 54    5115   LOMEMVev:         LD	HL,(LOMEM)
001B08 18 28       5116                   JR	COUNT1
001B0A 2A E2 54    5117   HIMEMVev:         LD	HL,(HIMEM)
001B0D 18 23       5118                   JR	COUNT1
001B0F 2A DC 54    5119   PAGEVev:          LD	HL,(PAGE_)
001B12 18 1E       5120                   JR	COUNT1
001B14 FD 7E 00    5121   TOPV:           LD	A,(IY)
001B17 FD 23       5122                   INC	IY		;SKIP "P"
001B19 FE 50       5123                   CP	'P'
001B1B C2 C2 25    5124                   JP	NZ,SYNTAX	;"Syntax Error"
001B1E CD 07 40    5125                   CALL	GETTOP
001B21 18 0F       5126                   JR	COUNT1
001B23 2A F2 54    5127   ERLV:           LD	HL,(ERL)
001B26 18 0A       5128                   JR	COUNT1
001B28 2A FD 54    5129   ERRV:           LD	HL,(ERR)
001B2B 18 03       5130                   JR	COUNT0
001B2D 2A FB 54    5131   COUNTV:         LD	HL,(COUNT)
001B30 26 00       5132   COUNT0:         LD	H,0
001B32 D9          5133   COUNT1:         EXX
001B33 AF          5134                   XOR	A
001B34 4F          5135                   LD	C,A		;INTEGER MARKER
001B35 67          5136                   LD	H,A
001B36 6F          5137                   LD	L,A
001B37 C9          5138                   RET
001B38             5139   ;
001B38             5140   ;OPENIN - Open a file for reading.
001B38             5141   ;OPENOUT - Open a file for writing.
001B38             5142   ;OPENUP - Open a file for reading or writing.
001B38             5143   ;Result is integer channel number (0 if error)
001B38             5144   ;
001B38 AF          5145   OPENOT:         XOR	A
001B39 21          5146                   DB	21H		;SKIP NEXT 2 BYTES
001B3A 3E 02       5147   OPENUP:         LD	A,2
001B3C 21          5148                   DB	21H		;SKIP NEXT 2 BYTES
001B3D 3E 01       5149   OPENIN:         LD	A,1
001B3F F5          5150                   PUSH	AF		;SAVE OPEN TYPE
001B40 CD 4B 18    5151                   CALL	ITEMS		;FILENAME
001B43 3E 0D       5152                   LD	A,CR
001B45 12          5153                   LD	(DE),A
001B46 F1          5154                   POP	AF		;RESTORE OPEN TYPE
001B47 C6 FF       5155                   ADD	A,-1		;AFFECT FLAGS
001B49 21 00 52    5156                   LD	HL,ACCS
001B4C CD 26 06    5157                   CALL	OSOPEN
001B4F 6F          5158                   LD	L,A
001B50 18 DE       5159                   JR	COUNT0
001B52             5160   ;
001B52             5161   ;EXT - Return length of file.
001B52             5162   ;PTR - Return current file pointer.
001B52             5163   ;Results are integer numeric.
001B52             5164   ;
001B52 CD B3 36    5165   EXTev:            CALL	CHANEL
001B55 CD 8F 06    5166                   CALL	GETEXT
001B58 18 12       5167                   JR	TIME0
001B5A             5168   ;
001B5A CD B3 36    5169   PTRev:            CALL	CHANEL
001B5D CD 58 06    5170                   CALL	GETPTR
001B60 18 0A       5171                   JR	TIME0
001B62             5172   ;
001B62             5173   ;TIME - Return current value of elapsed time.
001B62             5174   ;Result is integer numeric.
001B62             5175   ;
001B62 FD 7E 00    5176   TIMEVev:          LD	A,(IY)
001B65 FE 24       5177                   CP	'$'
001B67 28 09       5178                   JR	Z,TIMEVSev
001B69 CD 0B 0D    5179                   CALL	GETIME
001B6C D5          5180   TIME0:          PUSH	DE
001B6D D9          5181                   EXX
001B6E E1          5182                   POP	HL
001B6F AF          5183                   XOR	A
001B70 4F          5184                   LD	C,A
001B71 C9          5185                   RET
001B72             5186   ;
001B72             5187   ;TIME$ - Return date/time string.
001B72             5188   ;Result is string
001B72             5189   ;
001B72 FD 23       5190   TIMEVSev:         INC	IY		;SKIP $
001B74 CD 20 0D    5191                   CALL	GETIMS
001B77 3E 80       5192                   LD	A,80H		;MARK STRING
001B79 C9          5193                   RET
001B7A             5194   ;
001B7A             5195   ;String comparison:
001B7A             5196   ;
001B7A CD D7 1F    5197   SLT:            CALL	SCP
001B7D D0          5198                   RET	NC
001B7E 18 1F       5199                   JR	TRUEev
001B80             5200   ;
001B80 CD D7 1F    5201   SGT:            CALL	SCP
001B83 C8          5202                   RET	Z
001B84 D8          5203                   RET	C
001B85 18 18       5204                   JR	TRUEev
001B87             5205   ;
001B87 CD D7 1F    5206   SGE:            CALL	SCP
001B8A D8          5207                   RET	C
001B8B 18 12       5208                   JR	TRUEev
001B8D             5209   ;
001B8D CD D7 1F    5210   SLE:            CALL	SCP
001B90 28 0D       5211                   JR	Z,TRUEev
001B92 D0          5212                   RET	NC
001B93 18 0A       5213                   JR	TRUEev
001B95             5214   ;
001B95 CD D7 1F    5215   SNE:            CALL	SCP
001B98 C8          5216                   RET	Z
001B99 18 04       5217                   JR	TRUEev
001B9B             5218   ;
001B9B CD D7 1F    5219   SEQ:            CALL	SCP
001B9E C0          5220                   RET	NZ
001B9F 3E FF       5221   TRUEev:           LD	A,-1
001BA1 D9          5222                   EXX
001BA2 67          5223                   LD	H,A
001BA3 6F          5224                   LD	L,A
001BA4 D9          5225                   EXX
001BA5 67          5226                   LD	H,A
001BA6 6F          5227                   LD	L,A
001BA7 3C          5228                   INC	A
001BA8 4F          5229                   LD	C,A
001BA9 C9          5230                   RET
001BAA             5231   ;
001BAA             5232   ;PI - Return PI (3.141592654)
001BAA             5233   ;Result is floating-point numeric.
001BAA             5234   ;
001BAA 3E 23       5235   PIev:             LD	A,35
001BAC 18 43       5236                   JR	FPP1
001BAE             5237   ;
001BAE             5238   ;ABS - Absolute value
001BAE             5239   ;Result is numeric, variable type.
001BAE             5240   ;
001BAE 3E 10       5241   ABSev:            LD	A,16
001BB0 18 3A       5242                   JR	FPPN
001BB2             5243   ;
001BB2             5244   ;NOT - Complement integer.
001BB2             5245   ;Result is integer numeric.
001BB2             5246   ;
001BB2 3E 1A       5247   CPL_ev:           LD	A,26
001BB4 18 36       5248                   JR	FPPN
001BB6             5249   ;
001BB6             5250   ;DEG - Convert radians to degrees
001BB6             5251   ;Result is floating-point numeric.
001BB6             5252   ;
001BB6 3E 15       5253   DEGev:            LD	A,21
001BB8 18 32       5254                   JR	FPPN
001BBA             5255   ;
001BBA             5256   ;RAD - Convert degrees to radians
001BBA             5257   ;Result is floating-point numeric.
001BBA             5258   ;
001BBA 3E 1B       5259   RADev:            LD	A,27
001BBC 18 2E       5260                   JR	FPPN
001BBE             5261   ;
001BBE             5262   ;SGN - Return -1, 0 or +1
001BBE             5263   ;Result is integer numeric.
001BBE             5264   ;
001BBE 3E 1C       5265   SGNev:            LD	A,28
001BC0 18 2A       5266                   JR	FPPN
001BC2             5267   ;
001BC2             5268   ;INT - Floor function
001BC2             5269   ;Result is integer numeric.
001BC2             5270   ;
001BC2 3E 17       5271   INT_ev:           LD	A,23
001BC4 18 26       5272                   JR	FPPN
001BC6             5273   ;
001BC6             5274   ;SQR - square root
001BC6             5275   ;Result is floating-point numeric.
001BC6             5276   ;
001BC6 3E 1E       5277   SQRev:            LD	A,30
001BC8 18 22       5278                   JR	FPPN
001BCA             5279   ;
001BCA             5280   ;TAN - Tangent function
001BCA             5281   ;Result is floating-point numeric.
001BCA             5282   ;
001BCA 3E 1F       5283   TANev:            LD	A,31
001BCC 18 1E       5284                   JR	FPPN
001BCE             5285   ;
001BCE             5286   ;COS - Cosine function
001BCE             5287   ;Result is floating-point numeric.
001BCE             5288   ;
001BCE 3E 14       5289   COSev:            LD	A,20
001BD0 18 1A       5290                   JR	FPPN
001BD2             5291   ;
001BD2             5292   ;SIN - Sine function
001BD2             5293   ;Result is floating-point numeric.
001BD2             5294   ;
001BD2 3E 1D       5295   SINev:            LD	A,29
001BD4 18 16       5296                   JR	FPPN
001BD6             5297   ;
001BD6             5298   ;EXP - Exponential function
001BD6             5299   ;Result is floating-point numeric.
001BD6             5300   ;
001BD6 3E 16       5301   EXPev:            LD	A,22
001BD8 18 12       5302                   JR	FPPN
001BDA             5303   ;
001BDA             5304   ;LN - Natural log.
001BDA             5305   ;Result is floating-point numeric.
001BDA             5306   ;
001BDA 3E 18       5307   LNev:             LD	A,24
001BDC 18 0E       5308                   JR	FPPN
001BDE             5309   ;
001BDE             5310   ;LOG - base-10 logarithm.
001BDE             5311   ;Result is floating-point numeric.
001BDE             5312   ;
001BDE 3E 19       5313   LOGev:            LD	A,25
001BE0 18 0A       5314                   JR	FPPN
001BE2             5315   ;
001BE2             5316   ;ASN - Arc-sine
001BE2             5317   ;Result is floating-point numeric.
001BE2             5318   ;
001BE2 3E 12       5319   ASNev:            LD	A,18
001BE4 18 06       5320                   JR	FPPN
001BE6             5321   ;
001BE6             5322   ;ATN - arc-tangent
001BE6             5323   ;Result is floating-point numeric.
001BE6             5324   ;
001BE6 3E 13       5325   ATNev:            LD	A,19
001BE8 18 02       5326                   JR	FPPN
001BEA             5327   ;
001BEA             5328   ;ACS - arc-cosine
001BEA             5329   ;Result is floating point numeric.
001BEA             5330   ;
001BEA 3E 11       5331   ACSev:            LD	A,17
001BEC F5          5332   FPPN:           PUSH	AF
001BED CD 5C 18    5333                   CALL	ITEMN
001BF0 F1          5334                   POP	AF
001BF1 CD F7 44    5335   FPP1:           CALL	FPP
001BF4 DA 26 3F    5336                   JP	C,ERROR_
001BF7 AF          5337                   XOR	A
001BF8 C9          5338                   RET
001BF9             5339   ;
001BF9             5340   ;SFIX - Convert to fixed-point notation
001BF9             5341   ;
001BF9 3E 26       5342   SFIX:           LD	A,38
001BFB 18 F4       5343                   JR	FPP1
001BFD             5344   ;
001BFD             5345   ;SFLOAT - Convert to floating-point notation
001BFD             5346   ;
001BFD 3E 27       5347   SFLOATev:         LD	A,39
001BFF 18 F0       5348                   JR	FPP1
001C01             5349   ;
001C01             5350   ;VAL - Return numeric value of string.
001C01             5351   ;Result is variable type numeric.
001C01             5352   ;
001C01 CD 4B 18    5353   VALev:            CALL	ITEMS
001C04 AF          5354   VAL0:           XOR	A
001C05 12          5355                   LD	(DE),A
001C06 DD 21 00 52 5356                   LD	IX,ACCS
001C0A 3E 24       5357                   LD	A,36
001C0C 18 E3       5358                   JR	FPP1
001C0E             5359   ;
001C0E             5360   ;EVAL - Pass string to expression evaluator.
001C0E             5361   ;Result is variable type (numeric or string).
001C0E             5362   ;
001C0E CD 4B 18    5363   EVAL_:          CALL	ITEMS
001C11 3E 0D       5364                   LD	A,CR
001C13 12          5365                   LD	(DE),A
001C14 FD E5       5366                   PUSH	IY
001C16 11 00 52    5367                   LD	DE,ACCS
001C19 FD 21 00 52 5368                   LD	IY,ACCS
001C1D 0E 00       5369                   LD	C,0
001C1F CD FA 43    5370                   CALL	LEXAN2		;TOKENISE
001C22 12          5371                   LD	(DE),A
001C23 13          5372                   INC	DE
001C24 AF          5373                   XOR	A
001C25 CD FB 1F    5374                   CALL	PUSHS		;PUT ON STACK
001C28 FD 21 02 00 5375                   LD	IY,2
001C2C FD 39       5376                   ADD	IY,SP
001C2E CD E4 16    5377                   CALL	EXPR
001C31 FD E1       5378                   POP	IY
001C33 FD 39       5379                   ADD	IY,SP
001C35 FD F9       5380                   LD	SP,IY		;ADJUST STACK POINTER
001C37 FD E1       5381                   POP	IY
001C39 08          5382                   EX	AF,AF'
001C3A C9          5383                   RET
001C3B             5384   ;
001C3B             5385   ;RND - Random number function.
001C3B             5386   ; RND gives random integer 0-&FFFFFFFF
001C3B             5387   ; RND(-n) seeds random number & returns -n.
001C3B             5388   ; RND(0) returns last value in RND(1) form.
001C3B             5389   ; RND(1) returns floating-point 0-0.99999999.
001C3B             5390   ; RND(n) returns random integer 1-n.
001C3B             5391   ;
001C3B DD 21 F6 54 5392   RND:            LD	IX,RANDOM
001C3F CD ED 44    5393                   CALL	NXT
001C42 FE 28       5394                   CP	'('
001C44 28 1C       5395                   JR	Z,RND5		;ARGUMENT FOLLOWS
001C46 CD 11 19    5396                   CALL	LOAD5
001C49 CB 19       5397   RND1:           RR	C
001C4B 06 20       5398                   LD	B,32
001C4D D9          5399   RND2:           EXX			;CALCULATE NEXT
001C4E ED 6A       5400                   ADC	HL,HL
001C50 D9          5401                   EXX
001C51 ED 6A       5402                   ADC	HL,HL
001C53 CB 5D       5403                   BIT	3,L
001C55 28 01       5404                   JR	Z,RND3
001C57 3F          5405                   CCF
001C58 10 F3       5406   RND3:           DJNZ	RND2
001C5A CB 11       5407   RND4:           RL	C		;SAVE CARRY
001C5C CD E8 31    5408                   CALL	STORE5		;STORE NEW NUMBER
001C5F AF          5409                   XOR	A
001C60 4F          5410                   LD	C,A
001C61 C9          5411                   RET
001C62 CD 42 18    5412   RND5:           CALL	ITEMI
001C65 DD 21 F6 54 5413                   LD	IX,RANDOM
001C69 CB 7C       5414                   BIT	7,H		;NEGATIVE?
001C6B 37          5415                   SCF
001C6C 20 EC       5416                   JR	NZ,RND4		;SEED
001C6E CD 3B 1F    5417                   CALL	TEST
001C71 F5          5418                   PUSH	AF
001C72 41          5419                   LD	B,C
001C73 EB          5420                   EX	DE,HL
001C74 D9          5421                   EXX
001C75 EB          5422                   EX	DE,HL
001C76 CD 11 19    5423                   CALL	LOAD5
001C79 C4 49 1C    5424                   CALL	NZ,RND1		;NEXT IF NON-ZERO
001C7C D9          5425                   EXX			;SCRAMBLE (CARE!)
001C7D 0E 7F       5426                   LD	C,7FH
001C7F CB 7C       5427   RND6:           BIT	7,H		;FLOAT
001C81 20 08       5428                   JR	NZ,RND7
001C83 D9          5429                   EXX
001C84 29          5430                   ADD	HL,HL
001C85 D9          5431                   EXX
001C86 ED 6A       5432                   ADC	HL,HL
001C88 0D          5433                   DEC	C
001C89 20 F4       5434                   JR	NZ,RND6
001C8B CB BC       5435   RND7:           RES	7,H		;POSITIVE 0-0.999999
001C8D F1          5436                   POP	AF
001C8E C8          5437                   RET	Z		;ZERO ARGUMENT
001C8F D9          5438                   EXX
001C90 7B          5439                   LD	A,E
001C91 3D          5440                   DEC	A
001C92 B2          5441                   OR	D
001C93 D9          5442                   EXX
001C94 B3          5443                   OR	E
001C95 B2          5444                   OR	D
001C96 C8          5445                   RET	Z		;ARGUMENT=1
001C97 06 00       5446                   LD	B,0		;INTEGER MARKER
001C99 3E 0A       5447                   LD	A,10
001C9B CD F7 44    5448                   CALL	FPP		;MULTIPLY
001C9E DA 26 3F    5449                   JP	C,ERROR_
001CA1 CD F9 1B    5450                   CALL	SFIX
001CA4 C3 38 18    5451                   JP	ADD1ev
001CA7             5452   ;
001CA7             5453   ;SUMLEN(array())
001CA7             5454   ;
001CA7 FD 23       5455   SUMLEN:         INC	IY		;Skip LEN
001CA9 CD B9 19    5456                   CALL	GETARB
001CAC CB 78       5457                   BIT	7,B
001CAE CA 50 18    5458                   JP	Z,MISMATev	;Type mismatch
001CB1 CD 86 19    5459                   CALL	ARRLEN
001CB4 E5          5460                   PUSH	HL
001CB5 DD E1       5461                   POP	IX		;IX addresses array
001CB7 AF          5462                   XOR	A
001CB8 67          5463                   LD	H,A
001CB9 6F          5464                   LD	L,A
001CBA 47          5465                   LD	B,A
001CBB DD 4E 00    5466   SUMLN1:         LD	C,(IX)
001CBE 09          5467                   ADD	HL,BC
001CBF 0E 04       5468                   LD	C,4
001CC1 DD 09       5469                   ADD	IX,BC
001CC3 1B          5470                   DEC	DE		;Count elements
001CC4 7A          5471                   LD	A,D
001CC5 B3          5472                   OR	E
001CC6 20 F3       5473                   JR	NZ,SUMLN1
001CC8 C3 32 1B    5474                   JP	COUNT1
001CCB             5475   ;
001CCB             5476   ;SUM(array())
001CCB             5477   ;
001CCB CD ED 44    5478   SUM:            CALL	NXT
001CCE FE A9       5479                   CP	TLEN
001CD0 28 D5       5480                   JR	Z,SUMLEN
001CD2 CD B9 19    5481                   CALL	GETARB
001CD5 CB 78       5482                   BIT	7,B
001CD7 20 27       5483                   JR	NZ,SUMSTR
001CD9 C5          5484                   PUSH	BC
001CDA CD 86 19    5485                   CALL	ARRLEN
001CDD E5          5486                   PUSH	HL
001CDE DD E1       5487                   POP	IX		;IX addresses array
001CE0 CD DA 1F    5488                   CALL	ZERO
001CE3 F1          5489                   POP	AF		;A = element size
001CE4 D5          5490   SUMUP:          PUSH	DE
001CE5 F5          5491                   PUSH	AF
001CE6 CD C9 19    5492                   CALL	DLOADN
001CE9 3E 0B       5493                   LD	A,11
001CEB CD F7 44    5494                   CALL	FPP
001CEE DA 26 3F    5495                   JP	C,ERROR_
001CF1 F1          5496                   POP	AF
001CF2 16 00       5497                   LD	D,0
001CF4 5F          5498                   LD	E,A
001CF5 DD 19       5499                   ADD	IX,DE		;Bump to next element
001CF7 D1          5500                   POP	DE
001CF8 1B          5501                   DEC	DE		;Count elements
001CF9 47          5502                   LD	B,A
001CFA 7A          5503                   LD	A,D
001CFB B3          5504                   OR	E
001CFC 78          5505                   LD	A,B
001CFD 20 E5       5506                   JR	NZ,SUMUP
001CFF C9          5507                   RET
001D00             5508   ;
001D00             5509   ;SUM(string array)
001D00             5510   ;
001D00 CD 86 19    5511   SUMSTR:         CALL	ARRLEN
001D03 E5          5512                   PUSH	HL
001D04 DD E1       5513                   POP	IX		;IX addresses array
001D06 EB          5514                   EX	DE,HL
001D07 11 00 52    5515                   LD	DE,ACCS
001D0A 06 00       5516                   LD	B,0
001D0C E5          5517   SUMST1:         PUSH	HL
001D0D DD 4E 00    5518                   LD	C,(IX)
001D10 79          5519                   LD	A,C
001D11 B7          5520                   OR	A
001D12 28 0E       5521                   JR	Z,SUMST2
001D14 83          5522                   ADD	A,E
001D15 3E 13       5523                   LD	A,19
001D17 DA 26 3F    5524                   JP	C,ERROR_		;"String too long"
001D1A DD 6E 02    5525                   LD	L,(IX+2)
001D1D DD 66 03    5526                   LD	H,(IX+3)
001D20 ED B0       5527                   LDIR
001D22 E1          5528   SUMST2:         POP	HL
001D23 0E 04       5529                   LD	C,4
001D25 DD 09       5530                   ADD	IX,BC
001D27 2B          5531                   DEC	HL		;Count elements
001D28 7C          5532                   LD	A,H
001D29 B5          5533                   OR	L
001D2A 20 E0       5534                   JR	NZ,SUMST1
001D2C F6 80       5535                   OR	80H
001D2E C9          5536                   RET
001D2F             5537   ;
001D2F             5538   ;MOD(array())
001D2F             5539   ;
001D2F CD B9 19    5540   MODFUN:         CALL	GETARB
001D32 CB 78       5541                   BIT	7,B
001D34 C2 50 18    5542                   JP	NZ,MISMATev
001D37 C5          5543                   PUSH	BC
001D38 CD 86 19    5544                   CALL	ARRLEN
001D3B E5          5545                   PUSH	HL
001D3C DD E1       5546                   POP	IX		;IX addresses array
001D3E CD DA 1F    5547                   CALL	ZERO
001D41 F1          5548                   POP	AF		;A = element size
001D42 D5          5549   MODUP:          PUSH	DE
001D43 F5          5550                   PUSH	AF
001D44 C5          5551                   PUSH	BC
001D45 E5          5552                   PUSH	HL
001D46 D9          5553                   EXX
001D47 E5          5554                   PUSH	HL
001D48 D9          5555                   EXX
001D49 CD 07 19    5556                   CALL	LOADN
001D4C AF          5557                   XOR	A
001D4D 47          5558                   LD	B,A
001D4E 57          5559                   LD	D,A
001D4F 5F          5560                   LD	E,A
001D50 D9          5561                   EXX
001D51 57          5562                   LD	D,A
001D52 1E 02       5563                   LD	E,2
001D54 D9          5564                   EXX
001D55 3E 0E       5565                   LD	A,14
001D57 DD E5       5566                   PUSH	IX
001D59 CD F7 44    5567                   CALL	FPP		;Square
001D5C DD E1       5568                   POP	IX
001D5E DA 26 3F    5569                   JP	C,ERROR_
001D61 D9          5570                   EXX
001D62 EB          5571                   EX	DE,HL
001D63 E1          5572                   POP	HL
001D64 D9          5573                   EXX
001D65 EB          5574                   EX	DE,HL
001D66 E1          5575                   POP	HL
001D67 79          5576                   LD	A,C
001D68 C1          5577                   POP	BC
001D69 47          5578                   LD	B,A
001D6A 3E 0B       5579                   LD	A,11
001D6C CD F7 44    5580                   CALL	FPP		;Accumulate
001D6F DA 26 3F    5581                   JP	C,ERROR_
001D72 F1          5582                   POP	AF
001D73 16 00       5583                   LD	D,0
001D75 5F          5584                   LD	E,A
001D76 DD 19       5585                   ADD	IX,DE		;Bump to next element
001D78 D1          5586                   POP	DE
001D79 1B          5587                   DEC	DE		;Count elements
001D7A 47          5588                   LD	B,A
001D7B 7A          5589                   LD	A,D
001D7C B3          5590                   OR	E
001D7D 78          5591                   LD	A,B
001D7E 20 C2       5592                   JR	NZ,MODUP
001D80 3E 1E       5593                   LD	A,30
001D82 CD F7 44    5594                   CALL	FPP		;Square root
001D85 AF          5595                   XOR	A
001D86 C9          5596                   RET
001D87             5597   ;
001D87             5598   ;INSTR - String search.
001D87             5599   ;Result is integer numeric.
001D87             5600   ;
001D87 CD 1E 18    5601   INSTR:          CALL	EXPRS		;STRING TO SEARCH
001D8A CD 84 20    5602                   CALL	COMMA
001D8D CD FB 1F    5603                   CALL	PUSHS		;SAVE STRING ON STACK
001D90 CD 1E 18    5604                   CALL	EXPRS		;SUB-STRING
001D93 C1          5605                   POP	BC
001D94 21 00 00    5606                   LD	HL,0
001D97 39          5607                   ADD	HL,SP		;HL ADDRESSES MAIN
001D98 C5          5608                   PUSH	BC		;C = MAIN STRING LENGTH
001D99 43          5609                   LD	B,E		;B = SUB-STRING LENGTH
001D9A CD ED 44    5610                   CALL	NXT
001D9D FE 2C       5611                   CP	','
001D9F 3E 00       5612                   LD	A,0
001DA1 20 17       5613                   JR	NZ,INSTR1
001DA3 FD 23       5614                   INC	IY		;SKIP COMMA
001DA5 C5          5615                   PUSH	BC		;SAVE LENGTHS
001DA6 E5          5616                   PUSH	HL		;SAVE MAIN ADDRESS
001DA7 CD FB 1F    5617                   CALL	PUSHS
001DAA CD 15 18    5618                   CALL	EXPRI
001DAD C1          5619                   POP	BC
001DAE CD 19 20    5620                   CALL	POPS
001DB1 E1          5621                   POP	HL		;RESTORE MAIN ADDRESS
001DB2 C1          5622                   POP	BC		;RESTORE LENGTHS
001DB3 D9          5623                   EXX
001DB4 7D          5624                   LD	A,L
001DB5 D9          5625                   EXX
001DB6 B7          5626                   OR	A
001DB7 28 01       5627                   JR	Z,INSTR1
001DB9 3D          5628                   DEC	A
001DBA 11 00 52    5629   INSTR1:         LD	DE,ACCS		;DE ADDRESSES SUB
001DBD CD D4 1D    5630                   CALL	SEARCH
001DC0 D1          5631                   POP	DE
001DC1 28 03       5632                   JR	Z,INSTR2	;N.B. CARRY CLEARED
001DC3 ED 62       5633                   SBC	HL,HL
001DC5 39          5634                   ADD	HL,SP
001DC6 ED 72       5635   INSTR2:         SBC	HL,SP
001DC8 EB          5636                   EX	DE,HL
001DC9 26 00       5637                   LD	H,0
001DCB 39          5638                   ADD	HL,SP
001DCC F9          5639                   LD	SP,HL
001DCD EB          5640                   EX	DE,HL
001DCE CD 90 20    5641                   CALL	BRAKET
001DD1 C3 32 1B    5642                   JP	COUNT1
001DD4             5643   ;
001DD4             5644   ;SEARCH - Search string for sub-string
001DD4             5645   ;   Inputs: Main string at HL length C
001DD4             5646   ;           Sub-string at DE length B
001DD4             5647   ;           Starting offset A
001DD4             5648   ;  Outputs: NZ - not found
001DD4             5649   ;           Z - found at location HL-1
001DD4             5650   ;           Carry always cleared
001DD4             5651   ;
001DD4 C5          5652   SEARCH:         PUSH	BC
001DD5 06 00       5653                   LD	B,0
001DD7 4F          5654                   LD	C,A
001DD8 09          5655                   ADD	HL,BC		;NEW START ADDRESS
001DD9 C1          5656                   POP	BC
001DDA 91          5657                   SUB	C
001DDB 30 28       5658                   JR	NC,SRCH4
001DDD ED 44       5659                   NEG
001DDF 4F          5660                   LD	C,A		;REMAINING LENGTH
001DE0 1A          5661   SRCH1ev:          LD	A,(DE)
001DE1 C5          5662                   PUSH	BC
001DE2 06 00       5663                   LD	B,0
001DE4 ED B1       5664                   CPIR			;FIND FIRST CHARACTER
001DE6 79          5665                   LD	A,C
001DE7 C1          5666                   POP	BC
001DE8 20 1B       5667                   JR	NZ,SRCH4
001DEA 4F          5668                   LD	C,A
001DEB 05          5669                   DEC	B		;Bug fix
001DEC B8          5670                   CP	B		;Bug fix
001DED 04          5671                   INC	B		;Bug fix
001DEE 38 15       5672                   JR	C,SRCH4		;Bug fix
001DF0 C5          5673                   PUSH	BC
001DF1 D5          5674                   PUSH	DE
001DF2 E5          5675                   PUSH	HL
001DF3 05          5676                   DEC	B
001DF4 28 08       5677                   JR	Z,SRCH3		;FOUND !
001DF6 13          5678   SRCH2ev:          INC	DE
001DF7 1A          5679                   LD	A,(DE)
001DF8 BE          5680                   CP	(HL)
001DF9 20 03       5681                   JR	NZ,SRCH3
001DFB 23          5682                   INC	HL
001DFC 10 F8       5683                   DJNZ	SRCH2ev
001DFE E1          5684   SRCH3:          POP	HL
001DFF D1          5685                   POP	DE
001E00 C1          5686                   POP	BC
001E01 20 DD       5687                   JR	NZ,SRCH1ev
001E03 AF          5688                   XOR	A		;Z, NC
001E04 C9          5689                   RET			;FOUND
001E05             5690   ;
001E05 F6 FF       5691   SRCH4:          OR	0FFH		;NZ, NC
001E07 C9          5692                   RET			;NOT FOUND
001E08             5693   ;
001E08             5694   ;CHR$ - Return character with given ASCII value.
001E08             5695   ;Result is string.
001E08             5696   ;
001E08 CD 42 18    5697   CHRS:           CALL	ITEMI
001E0B D9          5698                   EXX
001E0C 7D          5699                   LD	A,L
001E0D 18 0A       5700                   JR	GET1
001E0F             5701   ;
001E0F             5702   ;GET$ - Return key pressed as string, or read from file
001E0F             5703   ;Result is string.
001E0F             5704   ;
001E0F CD ED 44    5705   GETS:           CALL	NXT
001E12 FE 23       5706                   CP	'#'
001E14 28 06       5707                   JR	Z,GET2
001E16 CD C0 05    5708                   CALL	OSRDCH
001E19 37          5709   GET1:           SCF
001E1A 18 5B       5710                   JR	INKEY1
001E1C             5711   ;
001E1C CD BD 36    5712   GET2:           CALL	CHNL		;File channel
001E1F CD ED 44    5713                   CALL	NXT
001E22 FE 0F       5714                   CP	TBY
001E24 28 04       5715                   JR	Z,GET3
001E26 FE B8       5716                   CP	TTO
001E28 20 0C       5717                   JR	NZ,GET4
001E2A FD 23       5718   GET3:           INC	IY
001E2C F5          5719                   PUSH	AF
001E2D D5          5720                   PUSH	DE
001E2E CD 42 18    5721                   CALL	ITEMI		;Get BY or TO qualifier
001E31 D9          5722                   EXX
001E32 44          5723                   LD	B,H
001E33 4D          5724                   LD	C,L
001E34 D1          5725                   POP	DE
001E35 F1          5726                   POP	AF
001E36 21 00 52    5727   GET4:           LD	HL,ACCS
001E39 FE B8       5728                   CP	TTO
001E3B 28 08       5729                   JR	Z,GET5
001E3D 51          5730                   LD	D,C		;Maximum count
001E3E 01 00 01    5731                   LD	BC,100H		;Default
001E41 FE 0F       5732                   CP	TBY
001E43 28 04       5733                   JR	Z,GET6
001E45 16 00       5734   GET5:           LD	D,0
001E47 CB C8       5735                   SET	1,B		;Flag no count
001E49 C5          5736   GET6:           PUSH	BC
001E4A CD 3D 06    5737                   CALL	OSBGET
001E4D C1          5738                   POP	BC
001E4E 38 1C       5739                   JR	C,GET9		;EOF
001E50 CB 48       5740                   BIT	1,B
001E52 28 13       5741                   JR	Z,GET8
001E54 B9          5742                   CP	C
001E55 28 15       5743                   JR	Z,GET9		;NUL (or supplied term)
001E57 CB 78       5744                   BIT	7,B
001E59 20 08       5745                   JR	NZ,GET7
001E5B CB 40       5746                   BIT	0,B
001E5D 28 08       5747                   JR	Z,GET8
001E5F FE 0A       5748                   CP	LF
001E61 28 09       5749                   JR	Z,GET9		;LF
001E63 FE 0D       5750   GET7:           CP	CR
001E65 28 05       5751                   JR	Z,GET9		;CR
001E67 77          5752   GET8:           LD	(HL),A
001E68 2C          5753                   INC	L
001E69 15          5754                   DEC	D
001E6A 20 DD       5755                   JR	NZ,GET6
001E6C EB          5756   GET9:           EX	DE,HL
001E6D 3E 80       5757                   LD	A,80H
001E6F C9          5758                   RET
001E70             5759   ;
001E70             5760   ;INKEY$ - Wait up to n centiseconds for keypress.
001E70             5761   ; Return key pressed as string or null
001E70             5762   ; string if time elapsed.
001E70             5763   ;Result is string.
001E70             5764   ;
001E70 CD 42 18    5765   INKEYS:         CALL	ITEMI
001E73 D9          5766                   EXX
001E74 CD 73 0D    5767                   CALL	OSKEY
001E77 11 00 52    5768   INKEY1:         LD	DE,ACCS
001E7A 12          5769                   LD	(DE),A
001E7B 3E 80       5770                   LD	A,80H
001E7D D0          5771                   RET	NC
001E7E 1C          5772                   INC	E
001E7F C9          5773                   RET
001E80             5774   ;
001E80             5775   ;MID$ - Return sub-string.
001E80             5776   ;Result is string.
001E80             5777   ;
001E80 CD 1E 18    5778   MIDS:           CALL	EXPRS
001E83 CD 84 20    5779                   CALL	COMMA
001E86 CD FB 1F    5780                   CALL	PUSHS		;SAVE STRING ON STACK
001E89 CD 15 18    5781                   CALL	EXPRI
001E8C C1          5782                   POP	BC
001E8D CD 19 20    5783                   CALL	POPS
001E90 D9          5784                   EXX
001E91 7D          5785                   LD	A,L
001E92 D9          5786                   EXX
001E93 B7          5787                   OR	A
001E94 28 0D       5788                   JR	Z,MIDS1
001E96 3D          5789                   DEC	A
001E97 6F          5790                   LD	L,A
001E98 93          5791                   SUB	E
001E99 1E 00       5792                   LD	E,0
001E9B 30 06       5793                   JR	NC,MIDS1
001E9D ED 44       5794                   NEG
001E9F 4F          5795                   LD	C,A
001EA0 CD FF 1E    5796                   CALL	RIGHT1
001EA3 CD ED 44    5797   MIDS1:          CALL	NXT
001EA6 FE 2C       5798                   CP	','
001EA8 28 1A       5799                   JR	Z,LEFT1
001EAA CD 90 20    5800                   CALL	BRAKET
001EAD 3E 80       5801                   LD	A,80H
001EAF C9          5802                   RET
001EB0             5803   ;
001EB0             5804   ;LEFT$ - Return left part of string.
001EB0             5805   ;Carry cleared if entire string returned.
001EB0             5806   ;Result is string.
001EB0             5807   ;
001EB0 CD 1E 18    5808   LEFTS:          CALL	EXPRS
001EB3 CD ED 44    5809                   CALL	NXT
001EB6 FE 2C       5810                   CP	','
001EB8 28 0A       5811                   JR	Z,LEFT1
001EBA CD 90 20    5812                   CALL	BRAKET
001EBD 7B          5813                   LD	A,E
001EBE B7          5814                   OR	A
001EBF 28 1A       5815                   JR	Z,LEFT3
001EC1 1D          5816                   DEC	E
001EC2 18 17       5817                   JR	LEFT3
001EC4             5818   ;
001EC4 FD 23       5819   LEFT1:          INC	IY
001EC6 CD FB 1F    5820                   CALL	PUSHS		;SAVE STRING ON STACK
001EC9 CD 15 18    5821                   CALL	EXPRI
001ECC C1          5822                   POP	BC
001ECD CD 19 20    5823                   CALL	POPS
001ED0 CD 90 20    5824                   CALL	BRAKET
001ED3 D9          5825                   EXX
001ED4 7D          5826                   LD	A,L
001ED5 D9          5827                   EXX
001ED6 BB          5828                   CP	E
001ED7 30 02       5829                   JR	NC,LEFT3
001ED9 6B          5830                   LD	L,E		;FOR RIGHT$
001EDA 5F          5831   LEFT2:          LD	E,A
001EDB 3E 80       5832   LEFT3:          LD	A,80H		;STRING MARKER
001EDD C9          5833                   RET
001EDE             5834   ;
001EDE             5835   ;RIGHT$ - Return right part of string.
001EDE             5836   ;Result is string.
001EDE             5837   ;
001EDE CD 1E 18    5838   RIGHTS:         CALL	EXPRS
001EE1 CD ED 44    5839                   CALL	NXT
001EE4 FE 2C       5840                   CP	','
001EE6 28 0C       5841                   JR	Z,RIGHT0
001EE8 CD 90 20    5842                   CALL	BRAKET
001EEB 7B          5843                   LD	A,E
001EEC B7          5844                   OR	A
001EED 28 EC       5845                   JR	Z,LEFT3
001EEF 3D          5846                   DEC	A
001EF0 0E 01       5847                   LD	C,1
001EF2 18 0A       5848                   JR	RIGHT2
001EF4             5849   ;
001EF4 CD C4 1E    5850   RIGHT0:         CALL	LEFT1
001EF7 D0          5851                   RET	NC
001EF8 1C          5852                   INC	E
001EF9 1D          5853                   DEC	E
001EFA C8          5854                   RET	Z
001EFB 4B          5855                   LD	C,E
001EFC 7D          5856                   LD	A,L
001EFD 93          5857                   SUB	E
001EFE 6F          5858   RIGHT2:         LD	L,A
001EFF 06 00       5859   RIGHT1:         LD	B,0
001F01 62          5860                   LD	H,D
001F02 58          5861                   LD	E,B
001F03 ED B0       5862                   LDIR			;MOVE
001F05 3E 80       5863                   LD	A,80H
001F07 C9          5864                   RET
001F08             5865   ;
001F08             5866   ;STRING$ - Return n concatenations of a string.
001F08             5867   ;Result is string.
001F08             5868   ;
001F08 CD 15 18    5869   STRING_:        CALL	EXPRI
001F0B CD 84 20    5870                   CALL	COMMA
001F0E D9          5871                   EXX
001F0F 7D          5872                   LD	A,L
001F10 D9          5873                   EXX
001F11 F5          5874                   PUSH	AF
001F12 CD 1E 18    5875                   CALL	EXPRS
001F15 CD 90 20    5876                   CALL	BRAKET
001F18 F1          5877                   POP	AF
001F19 B7          5878                   OR	A
001F1A 28 BE       5879                   JR	Z,LEFT2		;N=0
001F1C 3D          5880                   DEC	A
001F1D 4F          5881                   LD	C,A
001F1E 3E 80       5882                   LD	A,80H		;STRING MARKER
001F20 C8          5883                   RET	Z
001F21 1C          5884                   INC	E
001F22 1D          5885                   DEC	E
001F23 C8          5886                   RET	Z		;NULL STRING
001F24 43          5887                   LD	B,E
001F25 62          5888                   LD	H,D
001F26 2E 00       5889                   LD	L,0
001F28 C5          5890   STRIN1:         PUSH	BC
001F29 7E          5891   STRIN2:         LD	A,(HL)
001F2A 23          5892                   INC	HL
001F2B 12          5893                   LD	(DE),A
001F2C 1C          5894                   INC	E
001F2D 3E 13       5895                   LD	A,19
001F2F CA 26 3F    5896                   JP	Z,ERROR_		;"String too long"
001F32 10 F5       5897                   DJNZ	STRIN2
001F34 C1          5898                   POP	BC
001F35 0D          5899                   DEC	C
001F36 20 F0       5900                   JR	NZ,STRIN1
001F38 3E 80       5901                   LD	A,80H
001F3A C9          5902                   RET
001F3B             5903   ;
001F3B             5904   ;SUBROUTINES
001F3B             5905   ;
001F3B             5906   ;TEST - Test HLH'L' for zero
001F3B             5907   ;  Outputs: Z-flag set & A=0 if zero
001F3B             5908   ; Destroys: A,F
001F3B             5909   ;
001F3B 7C          5910   TEST:           LD	A,H
001F3C B5          5911                   OR	L
001F3D D9          5912                   EXX
001F3E B4          5913                   OR	H
001F3F B5          5914                   OR	L
001F40 D9          5915                   EXX
001F41 C9          5916                   RET
001F42             5917   ;
001F42             5918   ;DECODE - Decode line number in pseudo-binary.
001F42             5919   ;   Inputs: IY = Text pointer.
001F42             5920   ;  Outputs: HL=0, H'L'=line number, C=0.
001F42             5921   ; Destroys: A,C,H,L,H',L',IY,F
001F42             5922   ;
001F42 D9          5923   DECODE:         EXX
001F43 FD 7E 00    5924                   LD	A,(IY)
001F46 FD 23       5925                   INC	IY
001F48 17          5926                   RLA
001F49 17          5927                   RLA
001F4A 67          5928                   LD	H,A
001F4B E6 C0       5929                   AND	0C0H
001F4D FD AE 00    5930                   XOR	(IY)
001F50 FD 23       5931                   INC	IY
001F52 6F          5932                   LD	L,A
001F53 7C          5933                   LD	A,H
001F54 17          5934                   RLA
001F55 17          5935                   RLA
001F56 E6 C0       5936                   AND	0C0H
001F58 FD AE 00    5937                   XOR	(IY)
001F5B FD 23       5938                   INC	IY
001F5D 67          5939                   LD	H,A
001F5E D9          5940                   EXX
001F5F AF          5941                   XOR	A
001F60 4F          5942                   LD	C,A
001F61 67          5943                   LD	H,A
001F62 6F          5944                   LD	L,A
001F63 C9          5945                   RET
001F64             5946   ;
001F64             5947   ;HEXSTR - convert numeric value to HEX string.
001F64             5948   ;   Inputs: HLH'L'C = integer or floating-point number
001F64             5949   ;  Outputs: String in string accumulator.
001F64             5950   ;           E = string length. D = ACCS/256
001F64             5951   ;
001F64 FD 23       5952   HEXSTS:         INC	IY		;SKIP TILDE
001F66 CD 5C 18    5953                   CALL	ITEMN
001F69 CD 6F 1F    5954                   CALL	HEXSTR
001F6C 3E 80       5955                   LD	A,80H
001F6E C9          5956                   RET
001F6F             5957   ;
001F6F CD F9 1B    5958   HEXSTR:         CALL	SFIX
001F72 01 08 00    5959                   LD	BC,8
001F75 11 00 52    5960                   LD	DE,ACCS
001F78 C5          5961   HEXST1:         PUSH	BC
001F79 06 04       5962                   LD	B,4
001F7B AF          5963                   XOR	A
001F7C D9          5964   HEXST2:         EXX
001F7D 29          5965                   ADD	HL,HL
001F7E D9          5966                   EXX
001F7F ED 6A       5967                   ADC	HL,HL
001F81 17          5968                   RLA
001F82 10 F8       5969                   DJNZ	HEXST2
001F84 C1          5970                   POP	BC
001F85 0D          5971                   DEC	C
001F86 F8          5972                   RET	M
001F87 28 06       5973                   JR	Z,HEXST3
001F89 B7          5974                   OR	A
001F8A 20 03       5975                   JR	NZ,HEXST3
001F8C B8          5976                   CP	B
001F8D 28 E9       5977                   JR	Z,HEXST1
001F8F C6 90       5978   HEXST3:         ADD	A,90H
001F91 27          5979                   DAA
001F92 CE 40       5980                   ADC	A,40H
001F94 27          5981                   DAA
001F95 12          5982                   LD	(DE),A
001F96 13          5983                   INC	DE
001F97 47          5984                   LD	B,A
001F98 18 DE       5985                   JR	HEXST1
001F9A             5986   ;
001F9A             5987   ;Function STR - convert numeric value to ASCII string.
001F9A             5988   ;   Inputs: HLH'L'C = integer or floating-point number.
001F9A             5989   ;  Outputs: String in string accumulator.
001F9A             5990   ;           E = length, D = ACCS/256
001F9A             5991   ;           A = 80H (type=string)
001F9A             5992   ;
001F9A             5993   ;First normalise for decimal output:
001F9A             5994   ;
001F9A CD ED 44    5995   STRS:           CALL	NXT
001F9D FE 7E       5996                   CP	'~'
001F9F 28 C3       5997                   JR	Z,HEXSTS
001FA1 CD 5C 18    5998                   CALL	ITEMN
001FA4 DD 21 00 54 5999                   LD	IX,STAVAR
001FA8 DD 7E 03    6000                   LD	A,(IX+3)
001FAB B7          6001                   OR	A
001FAC DD 21 D4 1F 6002                   LD	IX,G9-1		;G9 FORMAT
001FB0 28 04       6003                   JR	Z,STR0
001FB2 DD 21 00 54 6004   STR:            LD	IX,STAVAR
001FB6 11 00 52    6005   STR0:           LD	DE,ACCS
001FB9 3E 25       6006                   LD	A,37
001FBB CD F7 44    6007                   CALL	FPP
001FBE DA 26 3F    6008                   JP	C,ERROR_
001FC1 DD CB 02 46 6009                   BIT	0,(IX+2)
001FC5 3E 80       6010   STR1:           LD	A,80H		;STRING MARKER
001FC7 C8          6011                   RET	Z
001FC8 79          6012                   LD	A,C
001FC9 C6 04       6013                   ADD	A,4
001FCB BB          6014   STR2:           CP	E
001FCC 28 F7       6015                   JR	Z,STR1
001FCE EB          6016                   EX	DE,HL
001FCF 36 20       6017                   LD	(HL),' '	;TRAILING SPACE
001FD1 23          6018                   INC	HL
001FD2 EB          6019                   EX	DE,HL
001FD3 18 F6       6020                   JR	STR2
001FD5             6021   ;
001FD5 09 00       6022   G9:             DW	9
001FD7             6023   ;
001FD7             6024   ;STRING COMPARE
001FD7             6025   ;Compare string (DE) length B with string (HL) length C.
001FD7             6026   ;Result preset to false.
001FD7             6027   ;
001FD7 CD E4 1F    6028   SCP:            CALL	SCP0
001FDA 3E 00       6029   ZERO:           LD	A,0
001FDC D9          6030                   EXX
001FDD 67          6031                   LD	H,A
001FDE 6F          6032                   LD	L,A
001FDF D9          6033                   EXX
001FE0 67          6034                   LD	H,A
001FE1 6F          6035                   LD	L,A
001FE2 4F          6036                   LD	C,A
001FE3 C9          6037                   RET
001FE4             6038   ;
001FE4 04          6039   SCP0:           INC	B
001FE5 0C          6040                   INC	C
001FE6 05          6041   SCP1:           DEC	B
001FE7 28 0A       6042                   JR	Z,SCP2
001FE9 0D          6043                   DEC	C
001FEA 28 0C       6044                   JR	Z,SCP3
001FEC 1A          6045                   LD	A,(DE)
001FED BE          6046                   CP	(HL)
001FEE C0          6047                   RET	NZ
001FEF 13          6048                   INC	DE
001FF0 23          6049                   INC	HL
001FF1 18 F3       6050                   JR	SCP1
001FF3 B7          6051   SCP2:           OR	A
001FF4 0D          6052                   DEC	C
001FF5 C8          6053                   RET	Z
001FF6 37          6054                   SCF
001FF7 C9          6055                   RET
001FF8 B7          6056   SCP3:           OR	A
001FF9 0C          6057                   INC	C
001FFA C9          6058                   RET
001FFB             6059   ;
001FFB             6060   ;PUSH$ - SAVE STRING ON STACK.
001FFB             6061   ;   Inputs: String in string accumulator.
001FFB             6062   ;           E = string length.
001FFB             6063   ;           A - saved on stack.
001FFB             6064   ; Destroys: B,C,D,E,H,L,IX,SP,F
001FFB             6065   ;
001FFB 21 00 52    6066   PUSHS:          LD	HL,ACCS
001FFE CD 68 32    6067                   CALL	CHECK
002001 DD E1       6068                   POP	IX		;RETURN ADDRESS
002003 B7          6069                   OR	A		;CLEAR CARRY
002004 54          6070                   LD	D,H
002005 4B          6071                   LD	C,E
002006 ED 52       6072                   SBC	HL,DE
002008 39          6073                   ADD	HL,SP
002009 F9          6074                   LD	SP,HL
00200A 47          6075                   LD	B,A
00200B C5          6076                   PUSH	BC
00200C 28 09       6077                   JR	Z,PUSHS1	;ZERO LENGTH
00200E EB          6078                   EX	DE,HL
00200F 06 00       6079                   LD	B,0
002011 68          6080                   LD	L,B		;L=0
002012 ED B0       6081                   LDIR			;COPY TO STACK
002014 CD 68 32    6082                   CALL	CHECK
002017 DD E9       6083   PUSHS1:         JP	(IX)		;"RETURN"
002019             6084   ;
002019             6085   ;POP$ - RESTORE STRING FROM STACK.
002019             6086   ;   Inputs: C = string length.
002019             6087   ;  Outputs: String in string accumulator.
002019             6088   ;           E = string length.
002019             6089   ; Destroys: B,C,D,E,H,L,IX,SP,F
002019             6090   ;
002019 DD E1       6091   POPS:           POP	IX		;RETURN ADDRESS
00201B 21 00 00    6092                   LD	HL,0
00201E 44          6093                   LD	B,H		;B=0
00201F 39          6094                   ADD	HL,SP
002020 11 00 52    6095                   LD	DE,ACCS
002023 0C          6096                   INC	C
002024 0D          6097                   DEC	C
002025 28 02       6098                   JR	Z,POPS1		;ZERO LENGTH
002027 ED B0       6099                   LDIR			;COPY FROM STACK
002029 F9          6100   POPS1:          LD	SP,HL
00202A DD E9       6101                   JP	(IX)		;"RETURN"
00202C             6102   ;
00202C FD 7E 00    6103   BINDIG:         LD	A,(IY)
00202F FE 30       6104                   CP	'0'
002031 D8          6105                   RET	C
002032 FE 32       6106                   CP	'1'+1
002034 3F          6107                   CCF
002035 D8          6108                   RET	C
002036 D6 30       6109                   SUB	'0'
002038 C9          6110                   RET
002039             6111   ;
002039 FD 7E 00    6112   HEXDIG:         LD	A,(IY)
00203C FE 30       6113                   CP	'0'
00203E D8          6114                   RET	C
00203F FE 3A       6115                   CP	'9'+1
002041 3F          6116                   CCF
002042 D0          6117                   RET	NC
002043 FE 41       6118                   CP	'A'
002045 D8          6119                   RET	C
002046 D6 37       6120                   SUB	'A'-10
002048 FE 10       6121                   CP	16
00204A 3F          6122                   CCF
00204B C9          6123                   RET
00204C             6124   ;
00204C FE 3E       6125   RELOPQ:         CP	'>'
00204E D0          6126                   RET	NC
00204F FE 3D       6127                   CP	'='
002051 D0          6128                   RET	NC
002052 FE 3C       6129                   CP	'<'
002054 C9          6130                   RET
002055             6131   ;
002055 FD 23       6132   SAVEev:           INC	IY
002057 E6 0F       6133                   AND	0FH
002059 08          6134   SAVE1:          EX	AF,AF'
00205A FA 50 18    6135                   JP	M,MISMATev
00205D 08          6136                   EX	AF,AF'
00205E E3          6137                   EX	(SP),HL
00205F D9          6138                   EXX
002060 E5          6139                   PUSH	HL
002061 D9          6140                   EXX
002062 F5          6141                   PUSH	AF
002063 C5          6142                   PUSH	BC
002064 E9          6143                   JP	(HL)
002065             6144   ;
002065 08          6145   DOIT:           EX	AF,AF'
002066 FA 50 18    6146                   JP	M,MISMATev
002069 D9          6147                   EXX
00206A C1          6148                   POP	BC		;RETURN ADDRESS
00206B D9          6149                   EXX
00206C 79          6150                   LD	A,C
00206D C1          6151                   POP	BC
00206E 47          6152                   LD	B,A
00206F F1          6153                   POP	AF		;OPERATOR
002070 D9          6154                   EXX
002071 EB          6155                   EX	DE,HL
002072 E1          6156                   POP	HL
002073 D9          6157                   EXX
002074 EB          6158                   EX	DE,HL
002075 E1          6159                   POP	HL
002076 D9          6160                   EXX
002077 C5          6161                   PUSH	BC
002078 D9          6162                   EXX
002079 CD F7 44    6163                   CALL	FPP
00207C 38 1C       6164                   JR	C,ERROR1ev
00207E AF          6165                   XOR	A
00207F 08          6166                   EX	AF,AF'		;TYPE
002080 FD 7E 00    6167                   LD	A,(IY)
002083 C9          6168                   RET
002084             6169   ;
002084 CD ED 44    6170   COMMA:          CALL	NXT
002087 FD 23       6171                   INC	IY
002089 FE 2C       6172                   CP	','
00208B C8          6173                   RET	Z
00208C 3E 05       6174                   LD	A,5
00208E 18 0A       6175                   JR	ERROR1ev		;"Missing ,"
002090             6176   ;
002090 CD ED 44    6177   BRAKET:         CALL	NXT
002093 FD 23       6178                   INC	IY
002095 FE 29       6179                   CP	')'
002097 C8          6180                   RET	Z
002098 3E 1B       6181                   LD	A,27
00209A C3 26 3F    6182   ERROR1ev:         JP	ERROR_		;"Missing )"
00209D             6183   ;
00209D E5          6184   DISPT2:         PUSH	HL
00209E 21 D8 16    6185                   LD	HL,SOPTBL
0020A1 18 06       6186                   JR	DISPT0
0020A3             6187   ;
0020A3 E5          6188   DISPATev:         PUSH	HL
0020A4 D6 8D       6189                   SUB	FUNTOK
0020A6 21 64 16    6190                   LD	HL,FUNTBL
0020A9 C5          6191   DISPT0:         PUSH	BC
0020AA 87          6192                   ADD	A,A
0020AB 4F          6193                   LD	C,A
0020AC 06 00       6194                   LD	B,0
0020AE 09          6195                   ADD	HL,BC
0020AF 7E          6196                   LD	A,(HL)
0020B0 23          6197                   INC	HL
0020B1 66          6198                   LD	H,(HL)
0020B2 6F          6199                   LD	L,A
0020B3 C1          6200                   POP	BC
0020B4 E3          6201                   EX	(SP),HL
0020B5 C9          6202                   RET			;OFF TO ROUTINE
0020B6             6203   ;
0020B6 7A          6204   STOREA:         LD	A,D
0020B7 D5          6205                   PUSH	DE
0020B8 E5          6206                   PUSH	HL
0020B9 DD E3       6207                   EX	(SP),IX
0020BB B7          6208                   OR	A
0020BC FA CD 20    6209                   JP	M,STORA1
0020BF CD 07 19    6210                   CALL	LOADN
0020C2 DD E3       6211                   EX	(SP),IX
0020C4 CD B0 31    6212                   CALL	MODIFY
0020C7 E1          6213                   POP	HL
0020C8 D1          6214                   POP	DE
0020C9 4A          6215                   LD	C,D
0020CA 06 00       6216                   LD	B,0
0020CC C9          6217                   RET
0020CD             6218   ;
0020CD D5          6219   STORA1:         PUSH	DE
0020CE CD F0 19    6220                   CALL	LOADS
0020D1 E1          6221                   POP	HL
0020D2 DD E3       6222                   EX	(SP),IX
0020D4 CD FA 31    6223                   CALL	MODIFS
0020D7 E1          6224                   POP	HL
0020D8 D1          6225                   POP	DE
0020D9 01 04 00    6226                   LD	BC,4
0020DC C9          6227                   RET
0020DD             6228   ;
0020DD             6229   ; Assign to whole array:
0020DD             6230   ; array1() = array expression
0020DD             6231   ; array1() = n1,n2,n3,n4...
0020DD             6232   ; array1() = n (n copied into all elements)
0020DD             6233   ;
0020DD             6234   ; Inputs: D = type (65, 68, 69, 193)
0020DD             6235   ;         E = opcode ('=' for store, '+','-' etc. for modify)
0020DD             6236   ;         HL = IX = VARPTR
0020DD             6237   ;         IY = text pointer
0020DD             6238   ;
0020DD CB B2       6239   LETARR:         RES	6,D		;Lose array marker
0020DF D5          6240                   PUSH	DE		;Save type & opcode
0020E0 CD AF 19    6241                   CALL	GETAR1		;Get and check indirect link
0020E3 CD 86 19    6242                   CALL	ARRLEN		;DE = elements, HL addresses first
0020E6 C1          6243                   POP	BC
0020E7 78          6244                   LD	A,B		;A = type
0020E8 D5          6245                   PUSH	DE
0020E9 C5          6246                   PUSH	BC
0020EA E5          6247                   PUSH	HL
0020EB CD 8F 36    6248                   CALL	X14OR5		;DE = size in bytes
0020EE 42          6249                   LD	B,D
0020EF 4B          6250                   LD	C,E
0020F0 DD E1       6251                   POP	IX
0020F2 D1          6252                   POP	DE
0020F3             6253   ;
0020F3             6254   ; (SP) = number of elements
0020F3             6255   ; BC = size in bytes
0020F3             6256   ; DE = type & opcode
0020F3             6257   ; IX = address of first element
0020F3             6258   ;
0020F3             6259   ; allocate space on stack and zero it:
0020F3             6260   ;
0020F3 AF          6261                   XOR	A		;Clear carry and zero error code
0020F4 ED 62       6262                   SBC	HL,HL
0020F6 39          6263                   ADD	HL,SP		;HL = SP
0020F7 ED 42       6264                   SBC	HL,BC
0020F9 38 9F       6265                   JR	C,ERROR1ev	;'No room'
0020FB C5          6266                   PUSH	BC
0020FC ED 4B E0 54 6267                   LD	BC,(FREE)
002100 04          6268                   INC	B		;Safety margin
002101 ED 42       6269                   SBC	HL,BC
002103 09          6270                   ADD	HL,BC
002104 C1          6271                   POP	BC
002105 38 93       6272                   JR	C,ERROR1ev	;'No room'
002107 F9          6273                   LD	SP,HL
002108 36 00       6274   LETA0:          LD	(HL),0
00210A 23          6275                   INC	HL
00210B 0B          6276                   DEC	BC
00210C 78          6277                   LD	A,B
00210D B1          6278                   OR	C
00210E 20 F8       6279                   JR	NZ,LETA0	;Clear allocated stack
002110 4E          6280                   LD	C,(HL)
002111 23          6281                   INC	HL
002112 46          6282                   LD	B,(HL)
002113 67          6283                   LD	H,A
002114 6F          6284                   LD	L,A
002115 39          6285                   ADD	HL,SP
002116             6286   ;
002116             6287   ;	CALL	NXT
002116             6288   ;	CP	TEVAL		;;EVAL not currently supported
002116             6289   ;
002116 CD 1E 21    6290                   CALL	EXPRA
002119 F9          6291                   LD	SP,HL		;Update stack pointer
00211A C1          6292                   POP	BC		;Level stack
00211B C3 7B 24    6293                   JP	XEQ
00211E             6294   ;
00211E             6295   ; EXPRA - Evaluate array expression, strictly left-to-right;
00211E             6296   ; Note: String array arithmetic (concatenation) is not supported
00211E             6297   ; because it would require a way of recovering freed string space.
00211E             6298   ;
00211E             6299   ;   Inputs: BC = number of elements
00211E             6300   ;           DE = type & opcode
00211E             6301   ;           HL = address of temporary stack space
00211E             6302   ;           IX = address of first element of array
00211E             6303   ;  Outputs: HL = value to set stack pointer to
00211E             6304   ;
00211E 3E 3D       6305   EXPRA:          LD	A,'='
002120 FD 2B       6306                   DEC	IY
002122 FD 23       6307   EXPRA1:         INC	IY
002124 D5          6308                   PUSH	DE
002125 C5          6309                   PUSH	BC
002126 E5          6310                   PUSH	HL
002127 DD E5       6311                   PUSH	IX
002129 5F          6312                   LD	E,A		;Operator
00212A CD 98 21    6313                   CALL	ITEMA
00212D DD E1       6314                   POP	IX
00212F E1          6315                   POP	HL
002130 C1          6316                   POP	BC
002131 D1          6317                   POP	DE
002132 CD ED 44    6318                   CALL	NXT
002135 FE 2C       6319                   CP	','		;List?
002137 28 13       6320                   JR	Z,EXPRA3
002139 CD 18 35    6321                   CALL	TERMQ
00213C 20 E4       6322                   JR	NZ,EXPRA1
00213E             6323   ;
00213E             6324   ; Update destination array from stack:
00213E             6325   ;
00213E C5          6326   EXPRA2:         PUSH	BC
00213F CD B6 20    6327                   CALL	STOREA		;(IX) <- (HL)
002142 09          6328                   ADD	HL,BC
002143 DD 09       6329                   ADD	IX,BC
002145 C1          6330                   POP	BC
002146 0B          6331                   DEC	BC
002147 78          6332                   LD	A,B
002148 B1          6333                   OR	C
002149 20 F3       6334                   JR	NZ,EXPRA2
00214B C9          6335                   RET
00214C             6336   ;
00214C             6337   ; Update destination array from list (n.b. not transferred via stack):
00214C             6338   ;
00214C C5          6339   EXPRA3:         PUSH	BC
00214D CD B6 20    6340                   CALL	STOREA		;(IX) <- (HL)
002150 FD 23       6341   EXPRA4:         INC	IY		;Bump past comma
002152 09          6342                   ADD	HL,BC
002153 DD 09       6343                   ADD	IX,BC
002155 C1          6344                   POP	BC
002156 0B          6345                   DEC	BC
002157 78          6346                   LD	A,B
002158 B1          6347                   OR	C
002159 C8          6348                   RET	Z
00215A C5          6349                   PUSH	BC
00215B D5          6350                   PUSH	DE
00215C E5          6351                   PUSH	HL
00215D DD E5       6352                   PUSH	IX
00215F CB 7A       6353                   BIT	7,D
002161 20 0E       6354                   JR	NZ,EXPRA5
002163 D5          6355                   PUSH	DE
002164 CD 0E 18    6356                   CALL	EXPRN
002167 D1          6357                   POP	DE
002168 DD E1       6358                   POP	IX
00216A DD E5       6359                   PUSH	IX
00216C CD B0 31    6360                   CALL	MODIFY
00216F 18 0C       6361                   JR	EXPRA6
002171             6362   ;
002171 D5          6363   EXPRA5:         PUSH	DE
002172 CD 1E 18    6364                   CALL	EXPRS
002175 E1          6365                   POP	HL
002176 DD E1       6366                   POP	IX
002178 DD E5       6367                   PUSH	IX
00217A CD FA 31    6368                   CALL	MODIFS
00217D DD E1       6369   EXPRA6:         POP	IX
00217F E1          6370                   POP	HL
002180 D1          6371                   POP	DE
002181 01 04 00    6372                   LD	BC,4
002184 CB 7A       6373                   BIT	7,D
002186 20 01       6374                   JR	NZ,EXPRA7
002188 4A          6375                   LD	C,D
002189 CD ED 44    6376   EXPRA7:         CALL	NXT
00218C FE 2C       6377                   CP	','
00218E 28 C0       6378                   JR	Z,EXPRA4
002190 D1          6379                   POP	DE
002191 09          6380   EXPRA8:         ADD	HL,BC		;Skip remaining elements
002192 1B          6381                   DEC	DE
002193 7A          6382                   LD	A,D
002194 B3          6383                   OR	E
002195 20 FA       6384                   JR	NZ,EXPRA8
002197 C9          6385                   RET
002198             6386   ;
002198             6387   ; ITEMA: evaluate and operate on array item
002198             6388   ;   Inputs: D = type
002198             6389   ;           E = operator ('=' for first item)
002198             6390   ;           BC = number of elements
002198             6391   ;           HL = pointer to destination on stack
002198             6392   ;           IY = text pointer
002198             6393   ;  Outputs: IY updated
002198             6394   ; Destroys: Everything except SP
002198             6395   ;
002198 CD ED 44    6396   ITEMA:          CALL	NXT
00219B E5          6397                   PUSH	HL		;Pointer to destination
00219C C5          6398                   PUSH	BC		;Number of elements
00219D FD E5       6399                   PUSH	IY		;In case normal expression
00219F D5          6400                   PUSH	DE		;Ditto
0021A0 FE 2D       6401                   CP	'-'
0021A2 20 0C       6402                   JR	NZ,ITEMA1	;Not unary minus
0021A4 7B          6403                   LD	A,E
0021A5 FE 3D       6404                   CP	'='
0021A7 20 07       6405                   JR	NZ,ITEMA1	;Not unary minus
0021A9 FD 23       6406                   INC	IY		;Bump past '-'
0021AB CD ED 44    6407                   CALL	NXT
0021AE 1E 2D       6408                   LD	E,'-'		;Unary minus
0021B0 D5          6409   ITEMA1:         PUSH	DE		;Type and operator
0021B1 CD C5 41    6410                   CALL	GETVAR
0021B4 D1          6411                   POP	DE		;Type & operator
0021B5 20 56       6412                   JR	NZ,ITEMA4	;Non-array expression
0021B7 CB 77       6413                   BIT	6,A
0021B9 28 52       6414                   JR	Z,ITEMA4	;Not a whole array
0021BB C1          6415                   POP	BC		;Junk saved original op
0021BC C1          6416                   POP	BC		;Junk saved text pointer
0021BD CB B7       6417                   RES	6,A
0021BF BA          6418                   CP	D
0021C0 C2 50 18    6419                   JP	NZ,MISMATev	;'Type mismatch'
0021C3 D5          6420                   PUSH	DE		;Save type & operator again
0021C4 CD AF 19    6421                   CALL	GETAR1
0021C7 CD 86 19    6422                   CALL	ARRLEN
0021CA 42          6423                   LD	B,D		;BC = number of elements
0021CB 4B          6424                   LD	C,E
0021CC D1          6425                   POP	DE		;Restore type & operator
0021CD E3          6426                   EX	(SP),HL
0021CE CD ED 44    6427                   CALL	NXT
0021D1 DD E1       6428                   POP	IX		;Pointer to source
0021D3 FE 2E       6429                   CP	'.'
0021D5 CA 65 22    6430                   JP	Z,ARRDOT	;Dot product
0021D8 B7          6431                   OR	A
0021D9 ED 42       6432                   SBC	HL,BC		;Same number of elements?
0021DB C2 50 18    6433                   JP	NZ,MISMATev	;'Type mismatch'
0021DE E1          6434                   POP	HL		;Pointer to destination
0021DF CB 7A       6435                   BIT	7,D
0021E1 20 1D       6436                   JR	NZ,ITEMA3
0021E3             6437   ;
0021E3             6438   ; Process numeric array item:
0021E3             6439   ;
0021E3 C5          6440   ITEMA2:         PUSH	BC
0021E4 E5          6441                   PUSH	HL
0021E5 7A          6442                   LD	A,D
0021E6 CD 07 19    6443                   CALL	LOADN
0021E9 DD E3       6444                   EX	(SP),IX
0021EB D5          6445                   PUSH	DE
0021EC CD B0 31    6446                   CALL	MODIFY
0021EF D1          6447                   POP	DE
0021F0 DD E3       6448                   EX	(SP),IX
0021F2 E1          6449                   POP	HL
0021F3 4A          6450                   LD	C,D
0021F4 06 00       6451                   LD	B,0
0021F6 DD 09       6452                   ADD	IX,BC
0021F8 09          6453                   ADD	HL,BC
0021F9 C1          6454                   POP	BC
0021FA 0B          6455                   DEC	BC
0021FB 78          6456                   LD	A,B
0021FC B1          6457                   OR	C
0021FD 20 E4       6458                   JR	NZ,ITEMA2
0021FF C9          6459                   RET
002200             6460   ;
002200             6461   ; Process string array item (just copy descriptors):
002200             6462   ;
002200 EB          6463   ITEMA3:         EX	DE,HL		;DE = destination
002201 60          6464                   LD	H,B
002202 69          6465                   LD	L,C
002203 29          6466                   ADD	HL,HL
002204 29          6467                   ADD	HL,HL
002205 44          6468                   LD	B,H
002206 4D          6469                   LD	C,L
002207 DD E5       6470                   PUSH	IX
002209 E1          6471                   POP	HL		;HL = source
00220A ED B0       6472                   LDIR
00220C C9          6473                   RET
00220D             6474   ;
00220D             6475   ; Process numeric non-array item:
00220D             6476   ;
00220D D1          6477   ITEMA4:         POP	DE		;Restore original operator
00220E FD E1       6478                   POP	IY		;Restore original text pointer
002210 CB 7A       6479                   BIT	7,D
002212 20 28       6480                   JR	NZ,ITEMA5
002214 D5          6481                   PUSH	DE
002215 CD ED 17    6482                   CALL	EXPR45		;; should be EXP345
002218 79          6483                   LD	A,C		;Exponent
002219 D1          6484                   POP	DE		;Type / operator
00221A C1          6485                   POP	BC		;Count
00221B DD E1       6486                   POP	IX
00221D E5          6487   ITEMA7:         PUSH	HL
00221E C5          6488                   PUSH	BC
00221F D5          6489                   PUSH	DE
002220 D9          6490                   EXX
002221 E5          6491                   PUSH	HL
002222 D9          6492                   EXX
002223 F5          6493                   PUSH	AF
002224 4F          6494                   LD	C,A
002225 CD B0 31    6495                   CALL	MODIFY
002228 F1          6496                   POP	AF
002229 D9          6497                   EXX
00222A E1          6498                   POP	HL
00222B D9          6499                   EXX
00222C D1          6500                   POP	DE
00222D 4A          6501                   LD	C,D
00222E 06 00       6502                   LD	B,0
002230 DD 09       6503                   ADD	IX,BC
002232 C1          6504                   POP	BC
002233 0B          6505                   DEC	BC
002234 ED 62       6506                   SBC	HL,HL
002236 ED 42       6507                   SBC	HL,BC
002238 E1          6508                   POP	HL
002239 20 E2       6509                   JR	NZ,ITEMA7	;Copy into every element!
00223B C9          6510                   RET
00223C             6511   ;
00223C             6512   ; Process string non-array item:
00223C             6513   ;
00223C CD 1E 18    6514   ITEMA5:         CALL	EXPRS
00223F 7B          6515                   LD	A,E
002240 B7          6516                   OR	A
002241 28 0B       6517                   JR	Z,ITEMA0
002243 21 00 52    6518                   LD	HL,ACCS
002246 11 00 53    6519                   LD	DE,BUFFER
002249 4F          6520                   LD	C,A
00224A 06 00       6521                   LD	B,0
00224C ED B0       6522                   LDIR
00224E C1          6523   ITEMA0:         POP	BC
00224F DD E1       6524                   POP	IX
002251 D9          6525                   EXX
002252 6F          6526                   LD	L,A
002253 D9          6527                   EXX
002254 11 04 00    6528                   LD	DE,4
002257 21 00 53    6529                   LD	HL,BUFFER
00225A CD EB 31    6530   ITEMA6:         CALL	STORE4
00225D DD 19       6531                   ADD	IX,DE
00225F 0B          6532                   DEC	BC
002260 78          6533                   LD	A,B
002261 B1          6534                   OR	C
002262 20 F6       6535                   JR	NZ,ITEMA6	;Copy into every element!
002264 C9          6536                   RET
002265             6537   ;
002265             6538   ; Array dot-product:
002265             6539   ;
002265 FD 23       6540   ARRDOT:         INC	IY		;Bump past dot
002267 7A          6541                   LD	A,D		;Type
002268 B7          6542                   OR	A
002269 FA 50 18    6543                   JP	M,MISMATev	;'Type mismatch'
00226C EB          6544                   EX	DE,HL
00226D E1          6545                   POP	HL
00226E             6546   ;
00226E             6547   ; A = type
00226E             6548   ; DE = no. of elements in destination array (outer loop counter)
00226E             6549   ; IX = pointer to first source array data
00226E             6550   ; HL = pointer to destination data
00226E             6551   ; IY = text pointer
00226E             6552   ;
00226E D5          6553                   PUSH	DE
00226F E5          6554                   PUSH	HL
002270 DD E5       6555                   PUSH	IX
002272 F5          6556                   PUSH	AF
002273 CD 9F 19    6557                   CALL	GETARR
002276 CD 86 19    6558                   CALL	ARRLEN
002279 F1          6559                   POP	AF
00227A EB          6560                   EX	DE,HL
00227B DD 6E 00    6561                   LD	L,(IX)
00227E DD 66 01    6562                   LD	H,(IX+1)	;Indirect pointer
002281 6E          6563                   LD	L,(HL)		;No. of dimensions
002282 2D          6564                   DEC	L
002283 EB          6565                   EX	DE,HL
002284 DD E1       6566                   POP	IX
002286 C1          6567                   POP	BC
002287 D1          6568                   POP	DE
002288             6569   ;
002288 FD E5       6570                   PUSH	IY		;Save text pointer
00228A C5          6571                   PUSH	BC		;Save destination pointer
00228B E5          6572                   PUSH	HL
00228C FD E1       6573                   POP	IY
00228E             6574   ;
00228E             6575   ; Get row counts:
00228E             6576   ;
00228E 21 01 00    6577                   LD	HL,1
002291 28 06       6578                   JR	Z,ARR1D
002293 FD 66 FF    6579                   LD	H,(IY-1)
002296 FD 6E FE    6580                   LD	L,(IY-2)
002299 D5          6581   ARR1D:          PUSH	DE
00229A EB          6582                   EX	DE,HL
00229B CD 8F 36    6583                   CALL	X14OR5
00229E EB          6584                   EX	DE,HL
00229F D1          6585                   POP	DE
0022A0 DD 46 FF    6586                   LD	B,(IX-1)
0022A3 DD 4E FE    6587                   LD	C,(IX-2)
0022A6             6588   ;
0022A6             6589   ; A = type, Z-flag set if first array is one-dimensional
0022A6             6590   ; BC = no. of rows of first source array (inner loop counter)
0022A6             6591   ; DE = no. of elements in destination array (outer loop counter)
0022A6             6592   ; HL = no. of rows of second source array * size of each element
0022A6             6593   ; IX = pointer to first source array
0022A6             6594   ; IY = pointer to second source array
0022A6             6595   ; (SP) = pointer to destination data
0022A6             6596   ;
0022A6             6597   ; Dot-product outer loop:
0022A6             6598   ;
0022A6 C5          6599   OUTER:          PUSH	BC		;1
0022A7 D5          6600                   PUSH	DE		;2
0022A8 E5          6601                   PUSH	HL		;3
0022A9 DD E5       6602                   PUSH	IX		;4
0022AB FD E5       6603                   PUSH	IY		;5
0022AD 50          6604                   LD	D,B
0022AE 59          6605                   LD	E,C
0022AF F5          6606                   PUSH	AF
0022B0 CD DA 1F    6607                   CALL	ZERO		;Zero accumulator
0022B3 F1          6608                   POP	AF
0022B4 D5          6609   INNER:          PUSH	DE		;6
0022B5 C5          6610                   PUSH	BC		;Save accumulator
0022B6 E5          6611                   PUSH	HL
0022B7 D9          6612                   EXX
0022B8 E5          6613                   PUSH	HL
0022B9 D9          6614                   EXX
0022BA             6615   ;
0022BA CD 07 19    6616                   CALL	LOADN		;Load from (IX)
0022BD DD E5       6617                   PUSH	IX
0022BF FD E3       6618                   EX	(SP),IY
0022C1 DD E1       6619                   POP	IX
0022C3             6620   ;
0022C3 CD C9 19    6621                   CALL	DLOADN		;Load from (IY)
0022C6 DD E5       6622                   PUSH	IX
0022C8 FD E3       6623                   EX	(SP),IY
0022CA DD E1       6624                   POP	IX
0022CC             6625   ;
0022CC F5          6626                   PUSH	AF
0022CD 3E 0A       6627                   LD	A,10
0022CF CD F7 44    6628                   CALL	FPP		;Multiply
0022D2 DA 26 3F    6629                   JP	C,ERROR_
0022D5 F1          6630                   POP	AF
0022D6             6631   ;
0022D6 D9          6632                   EXX			;Restore accumulator
0022D7 EB          6633                   EX	DE,HL
0022D8 E1          6634                   POP	HL
0022D9 D9          6635                   EXX
0022DA EB          6636                   EX	DE,HL
0022DB E1          6637                   POP	HL
0022DC 08          6638                   EX	AF,AF'
0022DD 79          6639                   LD	A,C
0022DE C1          6640                   POP	BC
0022DF 47          6641                   LD	B,A
0022E0 08          6642                   EX	AF,AF'
0022E1             6643   ;
0022E1 F5          6644                   PUSH	AF
0022E2 3E 0B       6645                   LD	A,11
0022E4 CD F7 44    6646                   CALL	FPP		;Accumulate
0022E7 DA 26 3F    6647                   JP	C,ERROR_
0022EA F1          6648                   POP	AF
0022EB             6649   ;
0022EB             6650   ; Bump pointers:
0022EB             6651   ;
0022EB D1          6652                   POP	DE		;5
0022EC             6653   ;
0022EC D9          6654                   EXX
0022ED 4F          6655                   LD	C,A
0022EE 06 00       6656                   LD	B,0
0022F0 DD 09       6657                   ADD	IX,BC
0022F2 D1          6658                   POP	DE
0022F3 C1          6659                   POP	BC
0022F4 E3          6660                   EX	(SP),HL
0022F5 EB          6661                   EX	DE,HL
0022F6 FD 19       6662                   ADD	IY,DE
0022F8 EB          6663                   EX	DE,HL
0022F9 E3          6664                   EX	(SP),HL
0022FA C5          6665                   PUSH	BC
0022FB D5          6666                   PUSH	DE
0022FC D9          6667                   EXX
0022FD             6668   ;
0022FD             6669   ; Count inner loops:
0022FD             6670   ;
0022FD 1B          6671                   DEC	DE		;Inner loop counter
0022FE 1C          6672                   INC	E
0022FF 1D          6673                   DEC	E
002300 20 B2       6674                   JR	NZ,INNER
002302 14          6675                   INC	D
002303 15          6676                   DEC	D
002304 20 AE       6677                   JR	NZ,INNER
002306             6678   ;
002306 FD E1       6679                   POP	IY		;4
002308 DD E1       6680                   POP	IX		;3
00230A             6681   ;
00230A             6682   ; Swap pointers:
00230A             6683   ;
00230A D9          6684                   EXX
00230B 08          6685                   EX	AF,AF'
00230C F1          6686                   POP	AF
00230D C1          6687                   POP	BC
00230E D1          6688                   POP	DE
00230F DD E3       6689                   EX	(SP),IX
002311 D5          6690                   PUSH	DE
002312 C5          6691                   PUSH	BC
002313 F5          6692                   PUSH	AF
002314 08          6693                   EX	AF,AF'
002315 D9          6694                   EXX
002316             6695   ;
002316             6696   ; Save to destination array and bump pointer:
002316             6697   ;
002316 F5          6698                   PUSH	AF
002317 D5          6699                   PUSH	DE
002318 CD D2 31    6700                   CALL	STOREN
00231B D1          6701                   POP	DE
00231C F1          6702                   POP	AF
00231D 4F          6703                   LD	C,A
00231E 06 00       6704                   LD	B,0
002320 DD 09       6705                   ADD	IX,BC
002322             6706   ;
002322             6707   ; Swap pointers:
002322             6708   ;
002322 D9          6709                   EXX
002323 08          6710                   EX	AF,AF'
002324 F1          6711                   POP	AF
002325 C1          6712                   POP	BC
002326 D1          6713                   POP	DE
002327 DD E3       6714                   EX	(SP),IX
002329 D5          6715                   PUSH	DE
00232A C5          6716                   PUSH	BC
00232B F5          6717                   PUSH	AF
00232C 08          6718                   EX	AF,AF'
00232D D9          6719                   EXX
00232E             6720   ;
00232E E1          6721                   POP	HL		;2
00232F D1          6722                   POP	DE		;1 Outer loop counter
002330 C1          6723                   POP	BC		;0
002331 1B          6724                   DEC	DE		;Count outer loops
002332             6725   ;
002332             6726   ; Adjust IX & IY
002332             6727   ;
002332 C5          6728                   PUSH	BC
002333 D5          6729                   PUSH	DE
002334 E5          6730                   PUSH	HL
002335 4F          6731                   LD	C,A
002336 06 00       6732                   LD	B,0
002338 FD 09       6733                   ADD	IY,BC
00233A F5          6734                   PUSH	AF
00233B E5          6735                   PUSH	HL
00233C CD 8F 36    6736                   CALL	X14OR5
00233F C1          6737                   POP	BC
002340 CD 72 23    6738                   CALL	MOD16
002343 F1          6739                   POP	AF
002344 B7          6740                   OR	A
002345 01 00 00    6741                   LD	BC,0
002348 ED 42       6742                   SBC	HL,BC
00234A E1          6743                   POP	HL
00234B D1          6744                   POP	DE
00234C C1          6745                   POP	BC
00234D 20 15       6746                   JR	NZ,MODNZ
00234F D5          6747                   PUSH	DE
002350 E5          6748                   PUSH	HL
002351 EB          6749                   EX	DE,HL
002352 FD E5       6750                   PUSH	IY
002354 E1          6751                   POP	HL
002355 B7          6752                   OR	A
002356 ED 52       6753                   SBC	HL,DE
002358 E5          6754                   PUSH	HL
002359 FD E1       6755                   POP	IY
00235B 50          6756                   LD	D,B
00235C 59          6757                   LD	E,C
00235D CD 8F 36    6758                   CALL	X14OR5
002360 DD 19       6759                   ADD	IX,DE
002362 E1          6760                   POP	HL
002363 D1          6761                   POP	DE
002364             6762   MODNZ:
002364             6763   ;
002364             6764   ; Count outer loops:
002364             6765   ;
002364 1C          6766                   INC	E
002365 1D          6767                   DEC	E
002366 C2 A6 22    6768                   JP	NZ,OUTER
002369 14          6769                   INC	D
00236A 15          6770                   DEC	D
00236B C2 A6 22    6771                   JP	NZ,OUTER
00236E             6772   ;
00236E             6773   ; Exit:
00236E             6774   ;
00236E E1          6775                   POP	HL
00236F FD E1       6776                   POP	IY
002371 C9          6777                   RET
002372             6778   ;
002372             6779   ; HL = DE MOD BC
002372             6780   ;
002372 AF          6781   MOD16:          XOR	A
002373 67          6782                   LD	H,A
002374 6F          6783                   LD	L,A
002375 3E 11       6784                   LD	A,17
002377 ED 42       6785   MOD160:         SBC	HL,BC
002379 30 01       6786                   JR	NC,MOD161
00237B 09          6787                   ADD	HL,BC
00237C 3F          6788   MOD161:         CCF
00237D CB 13       6789                   RL	E
00237F CB 12       6790                   RL	D
002381 3D          6791                   DEC	A
002382 C8          6792                   RET	Z
002383 ED 6A       6793                   ADC	HL,HL
002385 18 F0       6794                   JR	MOD160
002387             6795   ;
002387             6796   ;                END
002387             6797   ; --- End eval.asm ---
002387             6798   
002387             6799   ; --- Begin exec.asm ---
002387             6800   ;
002387             6801   ;Automatically created from original source on 2024-12-15 15:29:12
002387             6802   ;
002387             6803                   .ASSUME ADL = 0
002387             6804   ;	.ORG 0x0000
002387             6805   ;                SEGMENT CODE
002387             6806   ;
002387             6807   ;BBC BASIC INTERPRETER - Z80 VERSION
002387             6808   ;STATEMENT EXECUTION MODULE - "EXEC"
002387             6809   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
002387             6810   ;
002387             6811   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
002387             6812   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
002387             6813   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
002387             6814   ;
002387             6815   ;VERSION 2.1, 22-01-1984
002387             6816   ;VERSION 3.1, 11-06-1987
002387             6817   ;VERSION 5.0, 12-07-2024
002387             6818   ;
002387             6819   ;                XDEF	XEQ
002387             6820   ;                XDEF	RUN0
002387             6821   ;                XDEF	CHAIN0
002387             6822   ;                XDEF	CHECK
002387             6823   ;                XDEF	MUL16
002387             6824   ;                XDEF	X14OR5
002387             6825   ;                XDEF	TERMQ
002387             6826   ;                XDEF	STOREN
002387             6827   ;                XDEF	STORE4
002387             6828   ;                XDEF	STORE5
002387             6829   ;                XDEF	STACCS
002387             6830   ;                XDEF	SPACES
002387             6831   ;                XDEF	FN
002387             6832   ;                XDEF	USR
002387             6833   ;                XDEF	ESCAPE
002387             6834   ;                XDEF	SYNTAX
002387             6835   ;                XDEF	CHANEL
002387             6836   ;                XDEF	CHNL
002387             6837   ;                XDEF	VAR_
002387             6838   ;                XDEF	TABIT
002387             6839   ;                XDEF	MODIFY
002387             6840   ;                XDEF	MODIFS
002387             6841   ;
002387             6842   ;                XREF	ASSEM
002387             6843   ;                XREF	ERROR_
002387             6844   ;                XREF	REPORT
002387             6845   ;                XREF	WARM
002387             6846   ;                XREF	CLOOP
002387             6847   ;                XREF	SAYLN
002387             6848   ;                XREF	LOAD0
002387             6849   ;                XREF	CRLF
002387             6850   ;                XREF	PBCDL
002387             6851   ;                XREF	TELL
002387             6852   ;                XREF	FINDL
002387             6853   ;                XREF	SETLIN
002387             6854   ;                XREF	CLEAR
002387             6855   ;                XREF	GETVAR
002387             6856   ;                XREF	PUTVAR
002387             6857   ;                XREF	GETDEF
002387             6858   ;                XREF	LOCATE
002387             6859   ;                XREF	CREATE
002387             6860   ;                XREF	OUTCHR
002387             6861   ;                XREF	EXTERR
002387             6862   ;                XREF	BYE
002387             6863   ;                XREF	NXT
002387             6864   ;                XREF	NLIST
002387             6865   ;                XREF	CSRON
002387             6866   ;                XREF	CSROFF
002387             6867   ;
002387             6868   ;                XREF	OSWRCH
002387             6869   ;                XREF	OSLINE
002387             6870   ;                XREF	OSSHUT
002387             6871   ;                XREF	OSBPUT
002387             6872   ;                XREF	OSBGET
002387             6873   ;                XREF	CLRSCN
002387             6874   ;                XREF	PUTCSR
002387             6875   ;                XREF	PUTIME
002387             6876   ;                XREF	PUTIMS
002387             6877   ;                XREF	PUTPTR
002387             6878   ;                XREF	OSCALL
002387             6879   ;                XREF	OSCLI
002387             6880   ;                XREF	TRAP
002387             6881   ;
002387             6882   ;                XREF	SOUND
002387             6883   ;                XREF	CLG
002387             6884   ;                XREF	DRAW
002387             6885   ;                XREF	ENVEL
002387             6886   ;                XREF	GCOL
002387             6887   ;                XREF	MODE
002387             6888   ;                XREF	MOVE
002387             6889   ;                XREF	PLOT
002387             6890   ;                XREF	COLOUR
002387             6891   ;                XREF	CIRCLE
002387             6892   ;                XREF	ELLIPS
002387             6893   ;                XREF	FILL
002387             6894   ;                XREF	MOUSE
002387             6895   ;                XREF	ORIGIN
002387             6896   ;                XREF	RECTAN
002387             6897   ;                XREF	LINE
002387             6898   ;                XREF	WAIT
002387             6899   ;                XREF	TINT
002387             6900   ;                XREF	SYS
002387             6901   ;
002387             6902   ;                XREF	STR
002387             6903   ;                XREF	HEXSTR
002387             6904   ;                XREF	EXPR
002387             6905   ;                XREF	EXPRN
002387             6906   ;                XREF	EXPRI
002387             6907   ;                XREF	EXPRS
002387             6908   ;                XREF	ITEMI
002387             6909   ;                XREF	CONS
002387             6910   ;                XREF	LOADS
002387             6911   ;                XREF	VAL0
002387             6912   ;                XREF	SFIX
002387             6913   ;                XREF	TEST
002387             6914   ;                XREF	LOAD4
002387             6915   ;                XREF	LOADN
002387             6916   ;                XREF	DLOAD5
002387             6917   ;                XREF	FPP
002387             6918   ;                XREF	COMMA
002387             6919   ;                XREF	BRAKET
002387             6920   ;                XREF	PUSHS
002387             6921   ;                XREF	POPS
002387             6922   ;                XREF	ZERO
002387             6923   ;                XREF	SCP
002387             6924   ;                XREF	LETARR
002387             6925   ;
002387             6926   ;                XREF	ACCS
002387             6927   ;                XREF	PAGE_
002387             6928   ;                XREF	LOMEM
002387             6929   ;                XREF	HIMEM
002387             6930   ;                XREF	FREE
002387             6931   ;                XREF	BUFFER
002387             6932   ;                XREF	ERRTRP
002387             6933   ;                XREF	ONERSP
002387             6934   ;                XREF	CURLIN
002387             6935   ;                XREF	COUNT
002387             6936   ;                XREF	WIDTH
002387             6937   ;                XREF	STAVAR
002387             6938   ;                XREF	DATPTR
002387             6939   ;                XREF	RANDOM
002387             6940   ;                XREF	TRACEN
002387             6941   ;                XREF	LISTON
002387             6942   ;                XREF	PC
002387             6943   ;                XREF	OC
002387             6944   ;
002387             6945   ; LF             EQU	0AH	; in equs.inc
002387             6946   ; CR             EQU	0DH	; in equs.inc
002387             6947   ; IN main.asm
002387             6948   ; TAND:           EQU	80H
002387             6949   ; TOR:            EQU	84H
002387             6950   ; TERROR:         EQU	85H
002387             6951   ; TLINE:          EQU	86H
002387             6952   TOFF:           EQU	87H
002387             6953   TSTEP:          EQU	88H
002387             6954   TSPC:           EQU	89H
002387             6955   TTAB:           EQU	8AH
002387             6956   ; TELSE:          EQU	8BH
002387             6957   ; TTHEN:          EQU	8CH
002387             6958   ; TLINO:          EQU	8DH
002387             6959   ; TTO:            EQU	0B8H
002387             6960   ; TBY:           EQU	0C0H
002387             6961   ; TWHILE:         EQU	0C7H
002387             6962   ; TWHEN:          EQU	0C9H
002387             6963   ; TOF:            EQU	0CAH
002387             6964   ; TENDCASE:       EQU	0CBH
002387             6965   ; TOTHERWISE:     EQU	0CCH
002387             6966   ; TENDIF:         EQU	0CDH
002387             6967   ; TENDWHILE:      EQU	0CEH
002387             6968   ; TCALL:          EQU	0D6H
002387             6969   ; TDATA:          EQU	0DCH
002387             6970   ; TDEF:           EQU	0DDH
002387             6971   ; TFOR:           EQU	0E3H
002387             6972   ; TGOSUB:         EQU	0E4H
002387             6973   ; TGOTO:          EQU	0E5H
002387             6974   ; TLOCAL:         EQU	0EAH
002387             6975   ; TNEXT:          EQU	0EDH
002387             6976   ; TON:            EQU	0EEH
002387             6977   ; TPROC:          EQU	0F2H
002387             6978   ; TREM:           EQU	0F4H
002387             6979   ; TREPEAT:        EQU	0F5H
002387             6980   TRETURN:        EQU	0F8H
002387             6981   TSTOP:          EQU	0FAH
002387             6982   ; TUNTIL:         EQU	0FDH
002387             6983   ; TEXIT:          EQU	10H
002387             6984   ; END in main.asm
002387             6985   ;
002387 59 30       6986   CMDTAB:         DW	LEFTSL
002389 6D 30       6987                   DW	MIDSL
00238B 63 30       6988                   DW	RITESL
00238D C2 25       6989                   DW	SYNTAX	;STR$
00238F C2 25       6990                   DW	SYNTAX	;STRING$
002391 C2 25       6991                   DW	SYNTAX	;EOF
002393 C2 25       6992                   DW	SYNTAX	;SUM
002395 08 2E       6993                   DW	WHILE
002397 39 2D       6994                   DW	CASE
002399 C2 25       6995                   DW	SYNTAX	;WHEN
00239B C2 25       6996                   DW	SYNTAX	;OF
00239D 7B 24       6997                   DW	XEQ	;ENDCASE
00239F C2 25       6998                   DW	SYNTAX	;OTHERWISE
0023A1 7B 24       6999                   DW	XEQ	;ENDIF
0023A3 25 2E       7000                   DW	ENDWHI	;ENDWHILE
0023A5 E3 2E       7001                   DW	PTR
0023A7 F7 2E       7002                   DW	PAGEV
0023A9 05 2F       7003                   DW	TIMEV
0023AB 24 2F       7004                   DW	LOMEMV
0023AD 36 2F       7005                   DW	HIMEMV
0023AF 13 0E       7006                   DW	SOUND
0023B1 B5 2F       7007                   DW	BPUT
0023B3 EE 2F       7008                   DW	CALL
0023B5 2E 24       7009                   DW	CHAIN
0023B7 78 2E       7010                   DW	CLR
0023B9 AD 2F       7011                   DW	CLOSE
0023BB 57 0E       7012                   DW	CLG
0023BD 57 2E       7013                   DW	CLS
0023BF 13 25       7014                   DW	REM		;DATA
0023C1 13 25       7015                   DW	REM		;DEF
0023C3 20 26       7016                   DW	DIM
0023C5 5E 0F       7017                   DW	DRAW
0023C7 B5 24       7018                   DW	END
0023C9 5F 2B       7019                   DW	ENDPRO
0023CB E5 0D       7020                   DW	ENVEL
0023CD F6 28       7021                   DW	FORex
0023CF AD 28       7022                   DW	GOSUB
0023D1 96 28       7023                   DW	GOTO
0023D3 AF 0E       7024                   DW	GCOL
0023D5 AB 2C       7025                   DW	IF_
0023D7 C4 2B       7026                   DW	INPUT
0023D9 83 25       7027                   DW	LET
0023DB F5 2A       7028                   DW	LOCAL
0023DD 47 0E       7029                   DW	MODE
0023DF 5A 0F       7030                   DW	MOVE
0023E1 43 29       7031                   DW	NEXT
0023E3 1C 28       7032                   DW	ON
0023E5 7E 2F       7033                   DW	VDU
0023E7 66 0F       7034                   DW	PLOT
0023E9 28 27       7035                   DW	PRINT
0023EB C9 29       7036                   DW	PROC
0023ED 62 2C       7037                   DW	READ
0023EF 13 25       7038                   DW	REM
0023F1 C7 28       7039                   DW	REPEAT
0023F3 73 2E       7040                   DW	REPOR
0023F5 9E 2E       7041                   DW	RESTOR
0023F7 B8 28       7042                   DW	RETURN
0023F9 29 24       7043                   DW	RUN
0023FB 60 2E       7044                   DW	STOP
0023FD 6F 0E       7045                   DW	COLOUR
0023FF 65 2F       7046                   DW	TRACE
002401 CF 28       7047                   DW	UNTIL
002403 5B 2F       7048                   DW	WIDTHV
002405 EA 24       7049                   DW	CLI		;OSCLI
002407 13 25       7050                   DW	REM		;NUL
002409 FD 0E       7051                   DW	CIRCLE
00240B 29 0F       7052                   DW	ELLIPS
00240D 62 0F       7053                   DW	FILL
00240F 1C 10       7054                   DW	MOUSE
002411 5E 0E       7055                   DW	ORIGIN
002413 0E 0A       7056                   DW	BYE		;QUIT
002415 9B 0F       7057                   DW	RECTAN
002417 40 25       7058                   DW	SWAPex
002419 F3 10       7059                   DW	SYS
00241B F3 10       7060                   DW	TINT
00241D 5B 10       7061                   DW	WAIT
00241F C2 25       7062                   DW	SYNTAX		;INSTALL
002421 13 25       7063                   DW	REM		;CR
002423 7F 31       7064                   DW	PUT		;Token changed
002425 C2 25       7065                   DW	SYNTAX		;BY
002427 05 31       7066                   DW	EXITex
002429             7067   ;
002429             7068   CMDTAB_END:     EQU	$
002429             7069   ; TLAST:          EQU	TCMD-128+(CMDTAB_END-CMDTAB)/2
002429             7070   TLAST:          EQU	CMDTAB_END-CMDTAB/2+TCMD-128
002429             7071   ;
002429 CD 18 35    7072   RUN:            CALL	TERMQ
00242C 28 0D       7073                   JR	Z,RUN0
00242E CD 1E 18    7074   CHAIN:          CALL	EXPRS
002431 3E 0D       7075                   LD	A,CR
002433 12          7076                   LD	(DE),A
002434 ED 7B E2 54 7077   CHAIN0:         LD	SP,(HIMEM)
002438 CD E2 3F    7078                   CALL	LOAD0
00243B ED 7B E2 54 7079   RUN0:           LD	SP,(HIMEM)	;PREPARE FOR RUN
00243F DD 21 F6 54 7080                   LD	IX,RANDOM
002443 ED 5F       7081   RAND:           LD	A,R		;RANDOMISE (CARE!)
002445 28 FC       7082                   JR	Z,RAND
002447 07          7083                   RLCA
002448 07          7084                   RLCA
002449 DD 77 03    7085                   LD	(IX+3),A
00244C 9F          7086                   SBC	A,A
00244D DD 77 04    7087                   LD	(IX+4),A
002450 CD 25 40    7088                   CALL	CLEAR
002453 21 00 00    7089                   LD	HL,0
002456 22 EA 54    7090                   LD	(ERRTRP),HL
002459 2A DC 54    7091                   LD	HL,(PAGE_)
00245C CD DB 35    7092                   CALL	DSRCH		;LOOK FOR "DATA"
00245F 22 F0 54    7093                   LD	(DATPTR),HL	;SET DATA POINTER
002462 FD 2A DC 54 7094                   LD	IY,(PAGE_)
002466 CD BD 24    7095   XEQ0:           CALL	NEWLIN
002469 FD 7E 00    7096                   LD	A,(IY)
00246C FE 8B       7097                   CP	TELSE
00246E CA 12 2D    7098                   JP	Z,MELSE		;ELSE
002471 FE C9       7099                   CP	TWHEN
002473 CA 25 2D    7100                   JP	Z,WHEN		;WHEN
002476 FE CC       7101                   CP	TOTHERWISE
002478 CA 25 2D    7102                   JP	Z,WHEN
00247B FD 22 F4 54 7103   XEQ:            LD	(CURLIN),IY	;ERROR POINTER
00247F CD 15 06    7104                   CALL	TRAP		;CHECK KEYBOARD
002482 CD ED 44    7105   XEQ1:           CALL	NXT
002485 FD 23       7106                   INC	IY
002487 FE 3A       7107                   CP	':'		;SEPARATOR
002489 28 F7       7108                   JR	Z,XEQ1
00248B FE 0D       7109                   CP	CR
00248D 28 D7       7110                   JR	Z,XEQ0		;NEW PROGRAM LINE
00248F FE 98       7111                   CP	TLAST
002491 EA 75 25    7112                   JP	PE,LET0		;IMPLIED LET
002494 D6 C7       7113                   SUB	TCMD
002496 FA F8 24    7114                   JP	M,EXTRAS
002499 87          7115                   ADD	A,A
00249A 4F          7116                   LD	C,A
00249B 06 00       7117                   LD	B,0
00249D 21 87 23    7118                   LD	HL,CMDTAB
0024A0 09          7119                   ADD	HL,BC
0024A1 7E          7120                   LD	A,(HL)		;TABLE ENTRY
0024A2 23          7121                   INC	HL
0024A3 66          7122                   LD	H,(HL)
0024A4 6F          7123                   LD	L,A
0024A5 CD ED 44    7124                   CALL	NXT
0024A8 E9          7125                   JP	(HL)		;EXECUTE STATEMENT
0024A9             7126   ;
0024A9             7127   ;END
0024A9             7128   ;
0024A9 FD E5       7129   ENDIM:          PUSH	IY
0024AB E1          7130                   POP	HL
0024AC ED 4B DC 54 7131                   LD	BC,(PAGE_)
0024B0 ED 42       7132                   SBC	HL,BC		;IMMEDIATE MODE ?
0024B2 DA 92 37    7133                   JP	C,CLOOP
0024B5 1E 00       7134   END:            LD	E,0
0024B7 CD 35 06    7135                   CALL	OSSHUT		;CLOSE ALL FILES
0024BA C3 91 37    7136                   JP	WARM		;"Ready"
0024BD             7137   ;
0024BD FD 7E 00    7138   NEWLIN:         LD	A,(IY+0)	;A=LINE LENGTH
0024C0 01 03 00    7139                   LD	BC,3
0024C3 FD 09       7140                   ADD	IY,BC
0024C5 B7          7141                   OR	A
0024C6 28 E1       7142                   JR	Z,ENDIM		;LENGTH=0, EXITex
0024C8 2A E6 54    7143                   LD	HL,(TRACEN)
0024CB 7C          7144                   LD	A,H
0024CC B5          7145                   OR	L
0024CD C8          7146                   RET	Z
0024CE FD 56 FF    7147                   LD	D,(IY-1)	;DE = LINE NUMBER
0024D1 FD 5E FE    7148                   LD	E,(IY-2)
0024D4 ED 52       7149                   SBC	HL,DE
0024D6 D8          7150                   RET	C
0024D7 EB          7151                   EX	DE,HL
0024D8 3E 5B       7152                   LD	A,'['		;TRACE
0024DA CD E4 40    7153                   CALL	OUTCHR
0024DD CD 74 41    7154                   CALL	PBCDL
0024E0 3E 5D       7155                   LD	A,']'
0024E2 CD E4 40    7156                   CALL	OUTCHR
0024E5 3E 20       7157                   LD	A,' '
0024E7 C3 E4 40    7158                   JP	OUTCHR
0024EA             7159   ;
0024EA             7160   ;ROUTINES FOR EACH STATEMENT:
0024EA             7161   ;
0024EA             7162   ;OSCLI
0024EA             7163   ;
0024EA CD 1E 18    7164   CLI:            CALL	EXPRS
0024ED 3E 0D       7165                   LD	A,CR
0024EF 12          7166                   LD	(DE),A
0024F0 21 00 52    7167                   LD	HL,ACCS
0024F3 CD 95 09    7168                   CALL	OSCLI
0024F6 18 83       7169                   JR	XEQ
0024F8             7170   ;
0024F8 FE C4       7171   EXTRAS:         CP	TELSE-TCMD
0024FA 28 17       7172                   JR	Z,REM		;ELSE
0024FC FE BE       7173                   CP	TERROR-TCMD
0024FE 28 21       7174                   JR	Z,THROW		;ERROR
002500 FE BF       7175                   CP	TLINE-TCMD
002502 CA E7 0E    7176                   JP	Z,LINE		;LINE
002505 FE C0       7177                   CP	TOFF-TCMD
002507 CA D0 0E    7178                   JP	Z,CSROFF	;OFF
00250A C3 C2 25    7179                   JP	SYNTAX
00250D             7180   ;
00250D             7181   ;REM, *
00250D             7182   ;
00250D FD E5       7183   EXT:            PUSH	IY
00250F E1          7184                   POP	HL
002510 CD 95 09    7185                   CALL	OSCLI
002513 FD E5       7186   REM:            PUSH	IY
002515 E1          7187                   POP	HL
002516 3E 0D       7188                   LD	A,CR
002518 47          7189                   LD	B,A
002519 ED B1       7190                   CPIR			;FIND LINE END
00251B E5          7191                   PUSH	HL
00251C FD E1       7192                   POP	IY
00251E C3 66 24    7193                   JP	XEQ0
002521             7194   ;
002521             7195   ;ERROR num,string$
002521             7196   ;
002521 CD 15 18    7197   THROW:          CALL	EXPRI
002524 D9          7198                   EXX
002525 E5          7199                   PUSH	HL
002526 D9          7200                   EXX
002527 CD 84 20    7201                   CALL	COMMA
00252A CD 1E 18    7202                   CALL	EXPRS
00252D E1          7203                   POP	HL
00252E AF          7204                   XOR	A
00252F 12          7205                   LD	(DE),A
002530 7D          7206                   LD	A,L
002531 21 00 52    7207                   LD	HL,ACCS
002534 11 00 53    7208                   LD	DE,BUFFER
002537 D5          7209                   PUSH	DE
002538 01 00 01    7210                   LD	BC,256
00253B ED B0       7211                   LDIR
00253D C3 37 3F    7212                   JP	EXTERR
002540             7213   ;
002540             7214   ; SWAP
002540             7215   ;
002540 CD C5 41    7216   SWAPex:           CALL	GETVAR
002543 20 0B       7217                   JR	NZ,SWAPNZ
002545 F5          7218                   PUSH	AF
002546 E5          7219                   PUSH	HL
002547 CD 84 20    7220                   CALL	COMMA
00254A CD ED 44    7221                   CALL	NXT
00254D CD C5 41    7222                   CALL	GETVAR
002550 20 6D       7223   SWAPNZ:         JR	NZ,NOSUCH
002552 D1          7224                   POP	DE
002553 C1          7225                   POP	BC
002554 B8          7226                   CP	B
002555 20 74       7227                   JR	NZ,MISMAT
002557 E6 0F       7228                   AND	00001111B
002559 28 70       7229                   JR	Z,MISMAT
00255B 78          7230                   LD	A,B
00255C E6 C0       7231                   AND	11000000B
00255E 28 0A       7232                   JR	Z,SWAP1ex
002560 06 02       7233                   LD	B,2
002562 F2 6A 25    7234                   JP	P,SWAP1ex
002565 EA 6A 25    7235                   JP	PE,SWAP1ex
002568 06 04       7236                   LD	B,4
00256A 4E          7237   SWAP1ex:          LD	C,(HL)
00256B 1A          7238                   LD	A,(DE)
00256C 77          7239                   LD	(HL),A
00256D 79          7240                   LD	A,C
00256E 12          7241                   LD	(DE),A
00256F 13          7242                   INC	DE
002570 23          7243                   INC	HL
002571 10 F7       7244                   DJNZ	SWAP1ex
002573 18 28       7245                   JR	XEQGO4
002575             7246   ;
002575             7247   ;[LET] var = expr
002575             7248   ;
002575 FE 2A       7249   LET0:           CP	'*'
002577 28 94       7250                   JR	Z,EXT
002579 FE 3D       7251                   CP	'='
00257B 28 71       7252                   JR	Z,FNEND
00257D FE 5B       7253                   CP	'['
00257F 28 52       7254                   JR	Z,ASM
002581 FD 2B       7255                   DEC	IY
002583 CD 91 31    7256   LET:            CALL	ASSIGN
002586 CA 7B 24    7257                   JP	Z,XEQ
002589 38 37       7258                   JR	C,SYNTAX	;"Syntax error"
00258B F2 DD 20    7259                   JP	P,LETARR	;Numeric array
00258E EA DD 20    7260                   JP	PE,LETARR	;String array
002591 7A          7261                   LD	A,D		;Type
002592 D5          7262                   PUSH	DE
002593 E5          7263                   PUSH	HL
002594 CD 1E 18    7264                   CALL	EXPRS
002597 DD E1       7265                   POP	IX
002599 E1          7266                   POP	HL
00259A CD FA 31    7267                   CALL	MODIFS
00259D C3 7B 24    7268   XEQGO4:         JP	XEQ
0025A0             7269   ;
0025A0             7270   ; GETSTR - Get string variable
0025A0             7271   ;   Inputs: IY = text pointer
0025A0             7272   ;  Outputs: B = type
0025A0             7273   ;           Z-flag set if comma
0025A0             7274   ;
0025A0 CD C5 41    7275   GETSTR:         CALL	GETVAR
0025A3 20 1A       7276                   JR	NZ,NOSUCH
0025A5 47          7277                   LD	B,A
0025A6 E6 C0       7278                   AND	11000000B
0025A8 F2 CB 25    7279                   JP	P,MISMAT
0025AB EA C8 25    7280                   JP	PE,BADUSE
0025AE CB 40       7281                   BIT	0,B
0025B0 28 19       7282                   JR	Z,MISMAT
0025B2 CD ED 44    7283                   CALL	NXT
0025B5 FE 2C       7284                   CP	','
0025B7 C9          7285                   RET
0025B8             7286   ;
0025B8 CD C5 41    7287   VAR_:           CALL	GETVAR
0025BB C8          7288                   RET	Z
0025BC D2 AF 41    7289                   JP	NC,PUTVAR
0025BF 3E 1A       7290   NOSUCH:         LD	A,26		;'No such variable'
0025C1 21          7291                   DB	21H
0025C2 3E 10       7292   SYNTAX:         LD	A,16		;"Syntax error"
0025C4 21          7293                   DB	21H
0025C5 3E 11       7294   ESCAPE:         LD	A,17		;"Escape"
0025C7 21          7295                   DB	21H
0025C8 3E 0E       7296   BADUSE:         LD	A,14		;'Bad use of array'
0025CA 21          7297                   DB	21H
0025CB 3E 06       7298   MISMAT:         LD	A,6		;'Type mismatch'
0025CD C3 26 3F    7299   ERROR0ex:         JP	ERROR_
0025D0             7300   ;
0025D0 CD BD 24    7301   ASM0:           CALL	NEWLIN
0025D3 FD 22 F4 54 7302   ASM:            LD	(CURLIN),IY
0025D7 CD 15 06    7303                   CALL	TRAP
0025DA CD FD 10    7304                   CALL	ASSEM
0025DD 38 E3       7305                   JR	C,SYNTAX
0025DF FE 0D       7306                   CP	CR
0025E1 28 ED       7307                   JR	Z,ASM0
0025E3 21 FE 54    7308                   LD	HL,LISTON
0025E6 7E          7309                   LD	A,(HL)
0025E7 E6 0F       7310                   AND	0FH
0025E9 F6 30       7311                   OR	30H
0025EB 77          7312                   LD	(HL),A
0025EC 18 AF       7313                   JR	XEQGO4
0025EE             7314   ;
0025EE             7315   ;=
0025EE             7316   ;
0025EE CD E4 16    7317   FNEND:          CALL	EXPR		;FUNCTION RESULT
0025F1 08          7318                   EX	AF,AF'
0025F2 87          7319                   ADD	A,A
0025F3 7B          7320                   LD	A,E
0025F4 38 01       7321                   JR	C,FNEND1
0025F6 79          7322                   LD	A,C
0025F7 08          7323   FNEND1:         EX	AF,AF'
0025F8 E5          7324                   PUSH	HL
0025F9 D9          7325                   EXX
0025FA C1          7326                   POP	BC
0025FB EB          7327                   EX	DE,HL		;SAVE RESULT IN A'B'C'D'E'
0025FC D9          7328                   EXX
0025FD C1          7329   FNEND2:         POP	BC
0025FE 21 C9 29    7330                   LD	HL,FNCHK
002601 AF          7331                   XOR	A
002602 ED 42       7332                   SBC	HL,BC
002604 28 0A       7333                   JR	Z,FNEND3
002606 C5          7334                   PUSH	BC
002607 CD 13 34    7335                   CALL	RESLOC
00260A 20 F1       7336                   JR	NZ,FNEND2
00260C 3E 07       7337                   LD	A,7
00260E 18 BD       7338                   JR	ERROR0ex		;"No FN"
002610             7339   ;
002610 FD E1       7340   FNEND3:         POP	IY
002612 FD 22 F4 54 7341                   LD	(CURLIN),IY	;IN CASE OF ERROR
002616 D9          7342                   EXX
002617 EB          7343                   EX	DE,HL
002618 C5          7344                   PUSH	BC
002619 D9          7345                   EXX
00261A E1          7346                   POP	HL
00261B 08          7347                   EX	AF,AF'
00261C 5F          7348                   LD	E,A
00261D 4F          7349                   LD	C,A
00261E 1F          7350                   RRA
00261F C9          7351                   RET
002620             7352   ;
002620             7353   ;DIM var(dim1[,dim2[,...]])[,var(...]
002620             7354   ;DIM var expr[,var expr...]
002620             7355   ;
002620 FD E5       7356   DIM:            PUSH	IY
002622 FE 21       7357                   CP	'!'
002624 CA F1 26    7358                   JP	Z,DIM4
002627 CD 92 42    7359                   CALL	LOCATE		;VARIABLE
00262A DA DB 26    7360                   JP	C,BADDIM
00262D C4 1E 43    7361                   CALL	NZ,CREATE
002630 FD 7E 00    7362                   LD	A,(IY)
002633 FE 28       7363                   CP	'('
002635 C2 F1 26    7364                   JP	NZ,DIM4
002638 E5          7365                   PUSH	HL
002639 DD E1       7366                   POP	IX
00263B 7E          7367                   LD	A,(HL)
00263C E6 FE       7368                   AND	0FEH
00263E 23          7369                   INC	HL
00263F B6          7370                   OR	(HL)
002640 C2 F1 26    7371                   JP	NZ,DIM4
002643 C1          7372                   POP	BC		;LEVEL STACK
002644 7A          7373                   LD	A,D
002645 2A E0 54    7374                   LD	HL,(FREE)
002648 E5          7375                   PUSH	HL
002649 DD E3       7376                   EX	(SP),IX
00264B E5          7377                   PUSH	HL
00264C F5          7378                   PUSH	AF		;SAVE TYPE
00264D 11 01 00    7379                   LD	DE,1
002650 42          7380                   LD	B,D		;DIMENSION COUNTER
002651 FD 23       7381   DIM1:           INC	IY
002653 C5          7382                   PUSH	BC
002654 D5          7383                   PUSH	DE
002655 DD E5       7384                   PUSH	IX
002657 CD 15 18    7385                   CALL	EXPRI		;DIMENSION SIZE
00265A CB 7C       7386                   BIT	7,H
00265C 20 7D       7387                   JR	NZ,BADDIM
00265E D9          7388                   EXX
00265F 23          7389                   INC	HL
002660 DD E1       7390                   POP	IX
002662 DD 23       7391                   INC	IX
002664 DD 75 00    7392                   LD	(IX),L		;SAVE SIZE
002667 DD 23       7393                   INC	IX
002669 DD 74 00    7394                   LD	(IX),H
00266C C1          7395                   POP	BC
00266D CD 9F 36    7396                   CALL	MUL16		;HL=HL*BC
002670 38 6C       7397                   JR	C,NOROOM	;TOO LARGE
002672 EB          7398                   EX	DE,HL		;DE=PRODUCT
002673 C1          7399                   POP	BC
002674 04          7400                   INC	B		;DIMENSION COUNTER
002675 FD 7E 00    7401                   LD	A,(IY)
002678 FE 2C       7402                   CP	','		;ANOTHER
00267A 28 D5       7403                   JR	Z,DIM1
00267C DD 23       7404                   INC	IX
00267E CD 90 20    7405                   CALL	BRAKET		;CLOSING BRACKET
002681 F1          7406                   POP	AF		;RESTORE TYPE
002682 CD 8F 36    7407                   CALL	X14OR5		;DE=DE*n
002685 38 57       7408                   JR	C,NOROOM
002687 E1          7409                   POP	HL
002688 70          7410                   LD	(HL),B		;NO. OF DIMENSIONS
002689 DD E3       7411                   EX	(SP),IX
00268B E1          7412                   POP	HL
00268C E6 80       7413                   AND	80H
00268E DD B6 00    7414                   OR	(IX)		;FLAGS
002691             7415   ;
002691             7416   ;  A = flags: bit 7 = string, bit 0 = LOCAL
002691             7417   ; DE = amount to allocate
002691             7418   ; HL = where to allocate (if not LOCAL)
002691             7419   ; (HL - FREE is size of 'descriptor')
002691             7420   ; IX = where to store pointer
002691             7421   ;
002691 E5          7422   DIM3:           PUSH	HL
002692 24          7423                   INC	H		;Safety margin
002693 19          7424                   ADD	HL,DE
002694 38 48       7425                   JR	C,NOROOM
002696 ED 72       7426                   SBC	HL,SP
002698 30 44       7427                   JR	NC,NOROOM
00269A E1          7428                   POP	HL
00269B E5          7429                   PUSH	HL
00269C ED 4B E0 54 7430                   LD	BC,(FREE)
0026A0 B7          7431                   OR	A
0026A1 ED 42       7432                   SBC	HL,BC
0026A3 44          7433                   LD	B,H
0026A4 4D          7434                   LD	C,L
0026A5 E1          7435                   POP	HL
0026A6 ED 42       7436                   SBC	HL,BC
0026A8 CB 47       7437                   BIT	0,A
0026AA 28 12       7438                   JR	Z,ARRCHK	;NOT LOCAL
0026AC 21 00 00    7439                   LD	HL,0
0026AF ED 52       7440                   SBC	HL,DE
0026B1 B7          7441                   OR	A
0026B2 ED 42       7442                   SBC	HL,BC
0026B4 39          7443                   ADD	HL,SP
0026B5 28 07       7444                   JR	Z,ARRCHK	;RESERVE NOTHING
0026B7 F9          7445                   LD	SP,HL
0026B8 D5          7446                   PUSH	DE
0026B9 C5          7447                   PUSH	BC
0026BA F5          7448                   PUSH	AF
0026BB CD BE 26    7449                   CALL	ARRCHK
0026BE DD 75 00    7450   ARRCHK:         LD	(IX+0),L	;SAVE POINTER
0026C1 DD 74 01    7451                   LD	(IX+1),H
0026C4 78          7452                   LD	A,B
0026C5 B1          7453                   OR	C
0026C6 28 09       7454                   JR	Z,DIM2
0026C8 D5          7455                   PUSH	DE
0026C9 EB          7456                   EX	DE,HL
0026CA 2A E0 54    7457                   LD	HL,(FREE)
0026CD ED B0       7458                   LDIR			;COPY DESCRIPTOR
0026CF EB          7459                   EX	DE,HL
0026D0 D1          7460                   POP	DE
0026D1 7A          7461   DIM2:           LD	A,D
0026D2 B3          7462                   OR	E
0026D3 28 0E       7463                   JR	Z,DIM5
0026D5 36 00       7464                   LD	(HL),0		;INITIALISE ARRAY
0026D7 23          7465                   INC	HL
0026D8 1B          7466                   DEC	DE
0026D9 18 F6       7467                   JR	DIM2
0026DB             7468   ;
0026DB 3E 0A       7469   BADDIM:         LD	A,10		;"Bad DIM"
0026DD 21          7470                   DB	21H
0026DE 3E 0B       7471   NOROOM:         LD	A,11		;"DIM space"
0026E0 C3 26 3F    7472   ERROR1ex:         JP	ERROR_
0026E3             7473   ;
0026E3 ED 72       7474   DIM5:           SBC	HL,SP
0026E5 30 04       7475                   JR	NC,DIM7		;LOCAL
0026E7 39          7476                   ADD	HL,SP
0026E8 22 E0 54    7477                   LD	(FREE),HL
0026EB CD E2 44    7478   DIM7:           CALL	NLIST		;ANOTHER VARIABLE?
0026EE C3 20 26    7479                   JP	DIM
0026F1             7480   ;
0026F1 FD E1       7481   DIM4:           POP	IY
0026F3 CD B8 25    7482                   CALL	VAR_
0026F6 B7          7483                   OR	A
0026F7 28 E2       7484                   JR	Z,BADDIM
0026F9 FA DB 26    7485                   JP	M,BADDIM
0026FC CB 77       7486                   BIT	6,A
0026FE 20 DB       7487                   JR	NZ,BADDIM
002700 47          7488                   LD	B,A		;TYPE
002701 CD ED 44    7489                   CALL	NXT
002704 FE EA       7490                   CP	TLOCAL
002706 3E 00       7491                   LD	A,0		;PRESET TO NOT LOCAL
002708 20 03       7492                   JR	NZ,DIM8
00270A FD 23       7493                   INC	IY
00270C 3C          7494                   INC	A		;FLAG LOCAL
00270D F5          7495   DIM8:           PUSH	AF
00270E 78          7496                   LD	A,B		;TYPE
00270F D9          7497                   EXX
002710 21 00 00    7498                   LD	HL,0
002713 4C          7499                   LD	C,H
002714 CD D2 31    7500                   CALL	STOREN		;RESERVED AREA
002717 DD E5       7501                   PUSH	IX
002719 CD 15 18    7502                   CALL	EXPRI
00271C DD E1       7503                   POP	IX
00271E D9          7504                   EXX
00271F 23          7505                   INC	HL
002720 EB          7506                   EX	DE,HL
002721 2A E0 54    7507                   LD	HL,(FREE)
002724 F1          7508                   POP	AF		;LOCAL FLAG
002725 C3 91 26    7509                   JP	DIM3
002728             7510   ;
002728             7511   ;PRINT list...
002728             7512   ;PRINT #channel,list...
002728             7513   ;
002728 FE 23       7514   PRINT:          CP	'#'
00272A 20 64       7515                   JR	NZ,PRINT0
00272C CD BD 36    7516                   CALL	CHNL		;CHANNEL NO. = E
00272F CD E2 44    7517   PRNTN1:         CALL	NLIST
002732 D5          7518                   PUSH	DE
002733 CD E4 16    7519                   CALL	EXPR		;ITEM TO PRINT
002736 08          7520                   EX	AF,AF'
002737 FA 57 27    7521                   JP	M,PRNTN2	;STRING
00273A D1          7522                   POP	DE
00273B C5          7523                   PUSH	BC
00273C D9          7524                   EXX
00273D 7D          7525                   LD	A,L
00273E D9          7526                   EXX
00273F CD 45 06    7527                   CALL	OSBPUT
002742 D9          7528                   EXX
002743 7C          7529                   LD	A,H
002744 D9          7530                   EXX
002745 CD 45 06    7531                   CALL	OSBPUT
002748 7D          7532                   LD	A,L
002749 CD 45 06    7533                   CALL	OSBPUT
00274C 7C          7534                   LD	A,H
00274D CD 45 06    7535                   CALL	OSBPUT
002750 C1          7536                   POP	BC
002751 79          7537                   LD	A,C
002752 CD 45 06    7538                   CALL	OSBPUT
002755 18 D8       7539                   JR	PRNTN1
002757 4B          7540   PRNTN2:         LD	C,E
002758 D1          7541                   POP	DE
002759 21 00 52    7542                   LD	HL,ACCS
00275C 0C          7543                   INC	C
00275D 0D          7544   PRNTN3:         DEC	C
00275E 28 09       7545                   JR	Z,PRNTN4
002760 7E          7546                   LD	A,(HL)
002761 23          7547                   INC	HL
002762 C5          7548                   PUSH	BC
002763 CD 45 06    7549                   CALL	OSBPUT
002766 C1          7550                   POP	BC
002767 18 F4       7551                   JR	PRNTN3
002769 3E 0D       7552   PRNTN4:         LD	A,CR
00276B CD 45 06    7553                   CALL	OSBPUT
00276E 18 BF       7554                   JR	PRNTN1
002770             7555   ;
002770 06 02       7556   PRINT6:         LD	B,2
002772 18 22       7557                   JR	PRINTC
002774 01 00 01    7558   PRINT8:         LD	BC,100H
002777 18 1D       7559                   JR	PRINTC
002779 21 00 54    7560   PRINT9:         LD	HL,STAVAR
00277C AF          7561                   XOR	A
00277D BE          7562                   CP	(HL)
00277E 28 10       7563                   JR	Z,PRINT0
002780 3A FB 54    7564                   LD	A,(COUNT)
002783 B7          7565                   OR	A
002784 28 0A       7566                   JR	Z,PRINT0
002786 96          7567   PRINTA:         SUB	(HL)
002787 28 07       7568                   JR	Z,PRINT0
002789 30 FB       7569                   JR	NC,PRINTA
00278B ED 44       7570                   NEG
00278D CD 85 35    7571                   CALL	SPACES
002790 3A 00 54    7572   PRINT0:         LD	A,(STAVAR)
002793 4F          7573                   LD	C,A		;PRINTS
002794 06 00       7574                   LD	B,0		;PRINTF
002796 CD 18 35    7575   PRINTC:         CALL	TERMQ
002799 28 38       7576                   JR	Z,PRINT4
00279B CB 80       7577                   RES	0,B
00279D FD 23       7578                   INC	IY
00279F FE 7E       7579                   CP	'~'
0027A1 28 CD       7580                   JR	Z,PRINT6
0027A3 FE 3B       7581                   CP	';'
0027A5 28 CD       7582                   JR	Z,PRINT8
0027A7 FE 2C       7583                   CP	','
0027A9 28 CE       7584                   JR	Z,PRINT9
0027AB CD 3E 35    7585                   CALL	FORMAT		;SPC, TAB, '
0027AE 28 E6       7586                   JR	Z,PRINTC
0027B0 FD 2B       7587                   DEC	IY
0027B2 C5          7588                   PUSH	BC
0027B3 CD E4 16    7589                   CALL	EXPR		;VARIABLE TYPE
0027B6 08          7590                   EX	AF,AF'
0027B7 FA CD 27    7591                   JP	M,PRINT3	;STRING
0027BA D1          7592                   POP	DE
0027BB D5          7593                   PUSH	DE
0027BC CB 4A       7594                   BIT	1,D
0027BE F5          7595                   PUSH	AF
0027BF CC B2 1F    7596                   CALL	Z,STR		;DECIMAL
0027C2 F1          7597                   POP	AF
0027C3 C4 6F 1F    7598                   CALL	NZ,HEXSTR	;HEX
0027C6 C1          7599                   POP	BC
0027C7 C5          7600                   PUSH	BC
0027C8 79          7601                   LD	A,C
0027C9 93          7602                   SUB	E
0027CA D4 85 35    7603                   CALL	NC,SPACES		;RIGHT JUSTIFY
0027CD C1          7604   PRINT3:         POP	BC
0027CE CD 93 35    7605                   CALL	PTEXT		;PRINT
0027D1 18 C3       7606                   JR	PRINTC
0027D3 CB 40       7607   PRINT4:         BIT	0,B
0027D5 CC DD 40    7608                   CALL	Z,CRLF
0027D8 18 3F       7609                   JR	XEQGO3
0027DA             7610   ;
0027DA FD 23       7611   ONERR:          INC	IY		;SKIP "ERROR"
0027DC CD ED 44    7612                   CALL	NXT
0027DF 21 00 00    7613                   LD	HL,0		;FLAG NOT LOCAL
0027E2 FE EA       7614                   CP	TLOCAL
0027E4 20 1D       7615                   JR	NZ,ONERR1
0027E6 FD 23       7616                   INC	IY		;SKIP "LOCAL"
0027E8 2A EA 54    7617                   LD	HL,(ERRTRP)
0027EB E5          7618                   PUSH	HL
0027EC 2A EC 54    7619                   LD	HL,(ONERSP)
0027EF E5          7620                   PUSH	HL
0027F0 21 00 04    7621                   LD	HL,400H		;TYPE = 4, 'EXPONENT' = 0
0027F3 E5          7622                   PUSH	HL
0027F4 21 EA 54    7623                   LD	HL,ERRTRP
0027F7 E5          7624                   PUSH	HL
0027F8 21 0C 35    7625                   LD	HL,LOCCHK
0027FB E5          7626                   PUSH	HL
0027FC 21 00 00    7627                   LD	HL,0
0027FF 39          7628                   ADD	HL,SP
002800 CD ED 44    7629                   CALL	NXT
002803 22 EC 54    7630   ONERR1:         LD	(ONERSP),HL
002806 FD 22 EA 54 7631                   LD	(ERRTRP),IY
00280A FE 87       7632                   CP	TOFF
00280C C2 13 25    7633                   JP	NZ,REM
00280F FD 23       7634                   INC	IY		;SKIP "OFF"
002811 ED 62       7635                   SBC	HL,HL
002813 22 EC 54    7636                   LD	(ONERSP),HL
002816 22 EA 54    7637                   LD	(ERRTRP),HL
002819 C3 7B 24    7638   XEQGO3:         JP	XEQ
00281C             7639   ;
00281C             7640   ;ON expr GOTO line[,line...] [ELSE statement]
00281C             7641   ;ON expr GOTO line[,line...] [ELSE line]
00281C             7642   ;ON expr GOSUB line[,line...] [ELSE statement]
00281C             7643   ;ON expr GOSUB line[,line...] [ELSE line]
00281C             7644   ;ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
00281C             7645   ;ON ERROR [LOCAL] statement [:statement...]
00281C             7646   ;ON ERROR [LOCAL] OFF
00281C             7647   ;
00281C CD 18 35    7648   ON:             CALL	TERMQ
00281F CA CC 0E    7649                   JP	Z,CSRON
002822 FE 85       7650                   CP	TERROR
002824 28 B4       7651                   JR	Z,ONERR		;"ON ERROR"
002826 CD 15 18    7652                   CALL	EXPRI
002829 FD 7E 00    7653                   LD	A,(IY)
00282C FD 23       7654                   INC	IY
00282E 1E 2C       7655                   LD	E,','		;SEPARATOR
002830 FE E5       7656                   CP	TGOTO
002832 28 0B       7657                   JR	Z,ON1
002834 FE E4       7658                   CP	TGOSUB
002836 28 07       7659                   JR	Z,ON1
002838 1E F2       7660                   LD	E,TPROC
00283A BB          7661                   CP	E
00283B 3E 27       7662                   LD	A,39
00283D 20 4F       7663                   JR	NZ,ERROR2ex	;"ON syntax"
00283F 57          7664   ON1:            LD	D,A
002840 D9          7665                   EXX
002841 E5          7666                   PUSH	HL
002842 D9          7667                   EXX
002843 C1          7668                   POP	BC		;ON INDEX
002844 78          7669                   LD	A,B
002845 B4          7670                   OR	H
002846 B5          7671                   OR	L
002847 20 32       7672                   JR	NZ,ON4		;OUT OF RANGE
002849 B1          7673                   OR	C
00284A 28 2F       7674                   JR	Z,ON4
00284C 0D          7675                   DEC	C
00284D 28 11       7676                   JR	Z,ON3		;INDEX=1
00284F CD 18 35    7677   ON2:            CALL	TERMQ
002852 28 27       7678                   JR	Z,ON4		;OUT OF RANGE
002854 FD 23       7679                   INC	IY		;SKIP DELIMITER
002856 FE 22       7680                   CP	'"'
002858 28 1A       7681                   JR	Z,ON5
00285A BB          7682                   CP	E
00285B 20 F2       7683                   JR	NZ,ON2
00285D 0D          7684                   DEC	C
00285E 20 EF       7685                   JR	NZ,ON2
002860 7B          7686   ON3:            LD	A,E
002861 FE F2       7687                   CP	TPROC
002863 28 2C       7688                   JR	Z,ONPROC
002865 D5          7689                   PUSH	DE
002866 CD 42 18    7690                   CALL	ITEMI		;LINE NUMBER
002869 D1          7691                   POP	DE
00286A 7A          7692                   LD	A,D
00286B FE E5       7693                   CP	TGOTO
00286D 28 30       7694                   JR	Z,GOTO2
00286F CD 24 35    7695                   CALL	SPAN		;SKIP REST OF LIST
002872 18 3C       7696                   JR	GOSUB1
002874             7697   ;
002874 CD 7B 36    7698   ON5:            CALL	QUOTE
002877 FD 23       7699                   INC	IY
002879 18 D4       7700                   JR	ON2
00287B             7701   ;
00287B FD 7E 00    7702   ON4:            LD	A,(IY)
00287E FD 23       7703                   INC	IY
002880 FE 8B       7704                   CP	TELSE
002882 CA C4 2C    7705                   JP	Z,IF1		;ELSE CLAUSE
002885 FE 0D       7706                   CP	CR
002887 20 F2       7707                   JR	NZ,ON4
002889 3E 28       7708                   LD	A,40		;'ON range'
00288B 21          7709                   DB	21H
00288C 3E 22       7710   FORVAR:         LD	A,34		;'FOR variable'
00288E C3 26 3F    7711   ERROR2ex:         JP	ERROR_
002891             7712   ;
002891 3E EE       7713   ONPROC:         LD	A,TON
002893 C3 C9 29    7714                   JP	PROC
002896             7715   ;
002896             7716   ;GOTO line
002896             7717   ;
002896 CD 42 18    7718   GOTO:           CALL	ITEMI		;LINE NUMBER
002899 CD 18 35    7719   GOTO1:          CALL	TERMQ
00289C C2 C2 25    7720                   JP	NZ,SYNTAX
00289F D9          7721   GOTO2:          EXX
0028A0 CD 25 41    7722                   CALL	FINDL
0028A3 E5          7723                   PUSH	HL
0028A4 FD E1       7724                   POP	IY
0028A6 CA 66 24    7725                   JP	Z,XEQ0
0028A9 3E 29       7726                   LD	A,41
0028AB 18 E1       7727                   JR	ERROR2ex		;"No such line"
0028AD             7728   ;
0028AD             7729   ;GOSUB line
0028AD             7730   ;
0028AD CD 42 18    7731   GOSUB:          CALL	ITEMI		;LINE NUMBER
0028B0 FD E5       7732   GOSUB1:         PUSH	IY		;TEXT POINTER
0028B2 CD 68 32    7733                   CALL	CHECK		;CHECK ROOM
0028B5 CD 99 28    7734                   CALL	GOTO1		;SAVE MARKER
0028B8             7735   GOSCHK:         EQU	$
0028B8             7736   ;
0028B8             7737   ;RETURN
0028B8             7738   ;
0028B8 D1          7739   RETURN:         POP	DE		;MARKER
0028B9 21 B8 28    7740                   LD	HL,GOSCHK
0028BC B7          7741                   OR	A
0028BD ED 52       7742                   SBC	HL,DE
0028BF FD E1       7743                   POP	IY
0028C1 28 30       7744                   JR	Z,XEQGO2ex
0028C3 3E 26       7745                   LD	A,38
0028C5 18 C7       7746                   JR	ERROR2ex		;"No GOSUB"
0028C7             7747   ;
0028C7             7748   ;REPEAT
0028C7             7749   ;
0028C7 FD E5       7750   REPEAT:         PUSH	IY
0028C9 CD 68 32    7751                   CALL	CHECK
0028CC CD 7B 24    7752                   CALL	XEQ
0028CF             7753   REPCHK:         EQU	$
0028CF             7754   ;
0028CF             7755   ;UNTIL expr
0028CF             7756   ;
0028CF C1          7757   UNTIL:          POP	BC
0028D0 C5          7758                   PUSH	BC
0028D1 21 CF 28    7759                   LD	HL,REPCHK
0028D4 B7          7760                   OR	A
0028D5 ED 42       7761                   SBC	HL,BC
0028D7 28 0B       7762                   JR	Z,UNTIL1
0028D9 3E 03       7763                   LD	A,3
0028DB CD 13 34    7764                   CALL	RESLOC
0028DE 20 EF       7765                   JR	NZ,UNTIL
0028E0 3E 2B       7766                   LD	A,43
0028E2 18 AA       7767                   JR	ERROR2ex		;"Not in a REPEAT loop"
0028E4             7768   ;
0028E4 CD 15 18    7769   UNTIL1:         CALL	EXPRI
0028E7 CD 3B 1F    7770                   CALL	TEST
0028EA C1          7771                   POP	BC
0028EB D1          7772                   POP	DE
0028EC 20 05       7773                   JR	NZ,XEQGO2ex		;TRUE
0028EE D5          7774                   PUSH	DE
0028EF C5          7775                   PUSH	BC
0028F0 D5          7776                   PUSH	DE
0028F1 FD E1       7777                   POP	IY
0028F3 C3 7B 24    7778   XEQGO2ex:         JP	XEQ
0028F6             7779   ;
0028F6             7780   ;FOR var = expr TO expr [STEP expr]
0028F6             7781   ;
0028F6 CD 91 31    7782   FORex:            CALL	ASSIGN
0028F9 20 91       7783                   JR	NZ,FORVAR	;"FOR variable"
0028FB F5          7784                   PUSH	AF		;SAVE TYPE
0028FC FD 7E 00    7785                   LD	A,(IY)
0028FF FE B8       7786                   CP	TTO
002901 3E 24       7787                   LD	A,36
002903 20 89       7788                   JR	NZ,ERROR2ex	;"No TO"
002905 FD 23       7789                   INC	IY
002907 DD E5       7790                   PUSH	IX
002909 CD 0E 18    7791                   CALL	EXPRN		;LIMIT
00290C DD E1       7792                   POP	IX
00290E F1          7793                   POP	AF
00290F 47          7794                   LD	B,A		;TYPE
002910 C5          7795                   PUSH	BC		;SAVE ON STACK
002911 E5          7796                   PUSH	HL
002912 21 00 00    7797                   LD	HL,0
002915 4C          7798                   LD	C,H
002916 D9          7799                   EXX
002917 E5          7800                   PUSH	HL
002918 21 01 00    7801                   LD	HL,1		;PRESET STEP
00291B D9          7802                   EXX
00291C FD 7E 00    7803                   LD	A,(IY)
00291F FE 88       7804                   CP	TSTEP
002921 20 09       7805                   JR	NZ,FOR1
002923 FD 23       7806                   INC	IY
002925 DD E5       7807                   PUSH	IX
002927 CD 0E 18    7808                   CALL	EXPRN		;STEP
00292A DD E1       7809                   POP	IX
00292C 06 08       7810   FOR1:           LD	B,8		;FPP '>'
00292E CB 7C       7811                   BIT	7,H
002930 20 02       7812                   JR	NZ,FOR2		;STEP SIGN
002932 06 0C       7813                   LD	B,12		;FPP '<'
002934 C5          7814   FOR2:           PUSH	BC
002935 E5          7815                   PUSH	HL
002936 D9          7816                   EXX
002937 E5          7817                   PUSH	HL
002938 D9          7818                   EXX
002939 FD E5       7819                   PUSH	IY		;SAVE TEXT POINTER
00293B DD E5       7820                   PUSH	IX		;LOOP VARIABLE
00293D CD 68 32    7821                   CALL	CHECK
002940 CD 7B 24    7822                   CALL	XEQ
002943             7823   FORCHK:         EQU	$
002943             7824   ;
002943             7825   ;NEXT [var[,var...]]
002943             7826   ;
002943 C1          7827   NEXT:           POP	BC		;MARKER
002944 21 43 29    7828                   LD	HL,FORCHK
002947 B7          7829                   OR	A
002948 ED 42       7830                   SBC	HL,BC
00294A 28 0C       7831                   JR	Z,NEXT2
00294C C5          7832                   PUSH	BC
00294D 3E 03       7833                   LD	A,3
00294F CD 13 34    7834                   CALL	RESLOC
002952 20 EF       7835                   JR	NZ,NEXT
002954 3E 20       7836                   LD	A,32
002956 18 6A       7837                   JR	ERROR3ex		;"Not in a FOR loop"
002958             7838   ;
002958 CD 18 35    7839   NEXT2:          CALL	TERMQ
00295B E1          7840                   POP	HL
00295C E5          7841                   PUSH	HL
00295D C5          7842                   PUSH	BC
00295E E5          7843                   PUSH	HL
00295F C4 C5 41    7844                   CALL	NZ,GETVAR	;VARIABLE
002962 D1          7845                   POP	DE
002963 EB          7846                   EX	DE,HL
002964 B7          7847                   OR	A
002965 ED 52       7848   NEXT0:          SBC	HL,DE
002967 20 47       7849                   JR	NZ,NEXT1
002969 D5          7850                   PUSH	DE
00296A DD 21 08 00 7851                   LD	IX,6+2
00296E DD 39       7852                   ADD	IX,SP
002970 CD D3 19    7853                   CALL	DLOAD5		;STEP
002973 DD 7E 0B    7854                   LD	A,(IX+11)	;TYPE
002976 DD E1       7855                   POP	IX
002978 CD 07 19    7856                   CALL	LOADN		;LOOP VARIABLE
00297B F5          7857                   PUSH	AF
00297C 3E 0B       7858                   LD	A,'+' & 0FH
00297E CD F7 44    7859                   CALL	FPP		;ADD STEP
002981 38 3F       7860                   JR	C,ERROR3ex
002983 F1          7861                   POP	AF		;RESTORE TYPE
002984 CD D2 31    7862                   CALL	STOREN		;UPDATE VARIABLE
002987 DD 21 0C 00 7863                   LD	IX,12
00298B DD 39       7864                   ADD	IX,SP
00298D CD D3 19    7865                   CALL	DLOAD5		;LIMIT
002990 DD 7E FF    7866                   LD	A,(IX-1)
002993 CD F7 44    7867                   CALL	FPP		;TEST AGAINST LIMIT
002996 38 2A       7868                   JR	C,ERROR3ex
002998 24          7869                   INC	H
002999 20 0A       7870                   JR	NZ,LOOP		;KEEP LOOPING
00299B 21 12 00    7871                   LD	HL,18
00299E 39          7872                   ADD	HL,SP
00299F F9          7873                   LD	SP,HL
0029A0 CD E2 44    7874                   CALL	NLIST
0029A3 18 9E       7875                   JR	NEXT
0029A5             7876   ;
0029A5 C1          7877   LOOP:           POP	BC
0029A6 D1          7878                   POP	DE
0029A7 FD E1       7879                   POP	IY
0029A9 FD E5       7880                   PUSH	IY
0029AB D5          7881                   PUSH	DE
0029AC C5          7882                   PUSH	BC
0029AD C3 7B 24    7883                   JP	XEQ
0029B0             7884   ;
0029B0 21 12 00    7885   NEXT1:          LD	HL,18
0029B3 39          7886                   ADD	HL,SP
0029B4 F9          7887                   LD	SP,HL		;"POP" THE STACK
0029B5 C1          7888                   POP	BC
0029B6 21 43 29    7889                   LD	HL,FORCHK
0029B9 ED 42       7890                   SBC	HL,BC
0029BB E1          7891                   POP	HL		;VARIABLE POINTER
0029BC E5          7892                   PUSH	HL
0029BD C5          7893                   PUSH	BC
0029BE 28 A5       7894                   JR	Z,NEXT0
0029C0 3E 21       7895                   LD	A,33
0029C2 C3 26 3F    7896   ERROR3ex:         JP	ERROR_		;"Can't match FOR"
0029C5             7897   ;
0029C5             7898   ;FNname
0029C5             7899   ;N.B. ENTERED WITH A <> TON
0029C5             7900   ;
0029C5 F5          7901   FN:             PUSH	AF		;MAKE SPACE ON STACK
0029C6 CD CD 29    7902                   CALL	PROC1
0029C9             7903   FNCHK:          EQU	$
0029C9             7904   ;
0029C9             7905   ;PROCname
0029C9             7906   ;N.B. ENTERED WITH A = ON PROC FLAG
0029C9             7907   ;
0029C9 F5          7908   PROC:           PUSH	AF		;MAKE SPACE ON STACK
0029CA CD CD 29    7909                   CALL	PROC1
0029CD             7910   PROCHK:         EQU	$
0029CD CD 68 32    7911   PROC1:          CALL	CHECK
0029D0 FD 2B       7912                   DEC	IY
0029D2 FD E5       7913                   PUSH	IY
0029D4 CD 78 42    7914                   CALL	GETDEF
0029D7 C1          7915                   POP	BC
0029D8 28 39       7916                   JR	Z,PROC4
0029DA 3E 1E       7917                   LD	A,30
0029DC 38 E4       7918                   JR	C,ERROR3ex	;"Bad call"
0029DE C5          7919                   PUSH	BC
0029DF 2A DC 54    7920                   LD	HL,(PAGE_)
0029E2 3E DD       7921   PROC2:          LD	A,TDEF
0029E4 CD DD 35    7922                   CALL	SEARCHex		;LOOK FOR "DEF"
0029E7 38 21       7923                   JR	C,PROC3
0029E9 E5          7924                   PUSH	HL
0029EA FD E1       7925                   POP	IY
0029EC FD 23       7926                   INC	IY		;SKIP DEF
0029EE CD ED 44    7927                   CALL	NXT
0029F1 CD 78 42    7928                   CALL	GETDEF
0029F4 FD E5       7929                   PUSH	IY
0029F6 D1          7930                   POP	DE
0029F7 38 09       7931                   JR	C,PROC6
0029F9 C4 1E 43    7932                   CALL	NZ,CREATE
0029FC FD E5       7933                   PUSH	IY
0029FE D1          7934                   POP	DE
0029FF 73          7935                   LD	(HL),E
002A00 23          7936                   INC	HL
002A01 72          7937                   LD	(HL),D		;SAVE ADDRESS
002A02 EB          7938   PROC6:          EX	DE,HL
002A03 3E 0D       7939                   LD	A,CR
002A05 47          7940                   LD	B,A
002A06 ED B1       7941                   CPIR			;SKIP TO END OF LINE
002A08 18 D8       7942                   JR	PROC2
002A0A FD E1       7943   PROC3:          POP	IY		;RESTORE TEXT POINTER
002A0C CD 78 42    7944                   CALL	GETDEF
002A0F 3E 1D       7945                   LD	A,29
002A11 20 AF       7946                   JR	NZ,ERROR3ex	;"No such FN/PROC"
002A13 5E          7947   PROC4:          LD	E,(HL)
002A14 23          7948                   INC	HL
002A15 56          7949                   LD	D,(HL)		;GET ADDRESS
002A16 21 02 00    7950                   LD	HL,2
002A19 39          7951                   ADD	HL,SP
002A1A CD ED 44    7952                   CALL	NXT		;ALLOW SPACE BEFORE (
002A1D D5          7953                   PUSH	DE		;EXCHANGE DE,IY
002A1E FD E3       7954                   EX	(SP),IY
002A20 D1          7955                   POP	DE
002A21 FE 28       7956                   CP	'('		;ARGUMENTS?
002A23 C2 C7 2A    7957                   JP	NZ,PROC5
002A26 CD ED 44    7958                   CALL	NXT		;ALLOW SPACE BEFORE (
002A29 FE 28       7959                   CP	'('
002A2B C2 C2 25    7960                   JP	NZ,SYNTAX	;"Syntax error"
002A2E FD E5       7961                   PUSH	IY
002A30 C1          7962                   POP	BC		;SAVE IY IN BC
002A31 D9          7963                   EXX
002A32 08          7964                   EX	AF,AF'
002A33 AF          7965                   XOR	A		;INITIALISE RETURN COUNT
002A34 08          7966                   EX	AF,AF'
002A35 CD A0 34    7967                   CALL	SAVLOC		;SAVE DUMMY VARIABLES
002A38 08          7968                   EX	AF,AF'
002A39 B7          7969                   OR	A
002A3A 28 16       7970                   JR	Z,RETCHK	;NO RETURNS
002A3C E5          7971                   PUSH	HL
002A3D ED 44       7972                   NEG
002A3F 6F          7973                   LD	L,A
002A40 ED 44       7974                   NEG
002A42 26 FF       7975                   LD	H,-1		;HL = -RETURNS
002A44 29          7976                   ADD	HL,HL
002A45 29          7977                   ADD	HL,HL
002A46 29          7978                   ADD	HL,HL		;-RETURNS * 8
002A47 E3          7979                   EX	(SP),HL
002A48 DD E1       7980                   POP	IX
002A4A DD 39       7981                   ADD	IX,SP
002A4C DD F9       7982                   LD	SP,IX
002A4E F5          7983                   PUSH	AF		;PUSH RETURN COUNT
002A4F CD 52 2A    7984                   CALL	RETCHK		;PUSH MARKER
002A52 08          7985   RETCHK:         EX	AF,AF'
002A53 CD 90 20    7986                   CALL	BRAKET		;CLOSING BRACKET
002A56 D9          7987                   EXX
002A57 C5          7988                   PUSH	BC
002A58 FD E1       7989                   POP	IY		;RESTORE IY
002A5A E5          7990                   PUSH	HL
002A5B CD AF 32    7991                   CALL	ARGUE		;TRANSFER ARGUMENTS
002A5E E1          7992                   POP	HL
002A5F             7993   ;
002A5F             7994   ; If any of the dummy arguments is the same as a passed-by-reference
002A5F             7995   ; variable, then it must not be restored on exit (it would overwrite
002A5F             7996   ; the wanted returned values), therefore search the saved values on
002A5F             7997   ; the stack and if a match is found set bit 4 of the type.  On exit
002A5F             7998   ; from the FN/PROC this will prevent the dummies from being restored.
002A5F             7999   ;
002A5F E3          8000                   EX	(SP),HL
002A60 B7          8001                   OR	A
002A61 01 52 2A    8002                   LD	BC,RETCHK
002A64 ED 42       8003                   SBC	HL,BC
002A66 09          8004                   ADD	HL,BC
002A67 E3          8005                   EX	(SP),HL
002A68 20 5D       8006                   JR	NZ,PROC5	;No RETURNs
002A6A             8007   ;
002A6A D5          8008                   PUSH	DE
002A6B E5          8009                   PUSH	HL
002A6C 21 07 00    8010                   LD	HL,7		;Skip two PUSHes and RETCHK
002A6F 39          8011                   ADD	HL,SP
002A70 7E          8012                   LD	A,(HL)		;RETURN count
002A71 23          8013                   INC	HL
002A72 E5          8014                   PUSH	HL
002A73 DD E1       8015                   POP	IX		;Address RETURNs table
002A75 5F          8016   PROC0:          LD	E,A
002A76 16 00       8017                   LD	D,0
002A78 EB          8018                   EX	DE,HL
002A79 29          8019                   ADD	HL,HL
002A7A 29          8020                   ADD	HL,HL
002A7B 29          8021                   ADD	HL,HL
002A7C 19          8022                   ADD	HL,DE		;HL addresses SAVLOC stack
002A7D 23          8023                   INC	HL
002A7E 23          8024                   INC	HL		;Bump past LOCCHK
002A7F 5E          8025   PROC7:          LD	E,(HL)
002A80 23          8026                   INC	HL
002A81 56          8027                   LD	D,(HL)		;DE = SAVLOC VARPTR
002A82 23          8028                   INC	HL
002A83 4E          8029                   LD	C,(HL)		;Length (if string)
002A84 23          8030                   INC	HL
002A85 46          8031                   LD	B,(HL)		;Variable type
002A86             8032   ;
002A86             8033   ; Scan RETURNs table for VARPTR match
002A86             8034   ;
002A86 C5          8035                   PUSH	BC		;Save type
002A87 E5          8036                   PUSH	HL
002A88 DD E5       8037                   PUSH	IX
002A8A 47          8038                   LD	B,A		;B = RETURN count
002A8B DD 6E 04    8039   PROC8:          LD	L,(IX+4)
002A8E DD 66 05    8040                   LD	H,(IX+5)	;HL = RETURNed VARPTR
002A91 B7          8041                   OR	A
002A92 ED 52       8042                   SBC	HL,DE
002A94 28 09       8043                   JR	Z,PROC9
002A96 EB          8044                   EX	DE,HL
002A97 11 08 00    8045                   LD	DE,8
002A9A DD 19       8046                   ADD	IX,DE
002A9C EB          8047                   EX	DE,HL
002A9D 10 EC       8048                   DJNZ	PROC8
002A9F DD E1       8049   PROC9:          POP	IX
002AA1 E1          8050                   POP	HL
002AA2 C1          8051                   POP	BC		;Restore type
002AA3             8052   ;
002AA3             8053   ; If match, set bit 4 of type:
002AA3             8054   ;
002AA3 20 02       8055                   JR	NZ,PROCA
002AA5 CB E6       8056                   SET	4,(HL)		;Flag don't restore
002AA7             8057   ;
002AA7             8058   ; Increment past stacked data:
002AA7             8059   ;
002AA7 11 03 00    8060   PROCA:          LD	DE,3
002AAA CB 70       8061                   BIT	6,B
002AAC 20 08       8062                   JR	NZ,PROCB	;Whole array
002AAE 1E 05       8063                   LD	E,5
002AB0 CB 78       8064                   BIT	7,B
002AB2 28 02       8065                   JR	Z,PROCB		;Numeric
002AB4 59          8066                   LD	E,C
002AB5 13          8067                   INC	DE
002AB6 19          8068   PROCB:          ADD	HL,DE
002AB7 4E          8069                   LD	C,(HL)
002AB8 23          8070                   INC	HL
002AB9 46          8071                   LD	B,(HL)
002ABA 23          8072                   INC	HL		; BC = marker ?
002ABB EB          8073                   EX	DE,HL
002ABC 21 0C 35    8074                   LD	HL,LOCCHK
002ABF B7          8075                   OR	A
002AC0 ED 42       8076                   SBC	HL,BC
002AC2 EB          8077                   EX	DE,HL
002AC3 28 BA       8078                   JR	Z,PROC7		;Another
002AC5 E1          8079                   POP	HL
002AC6 D1          8080                   POP	DE
002AC7             8081   ;
002AC7 73          8082   PROC5:          LD	(HL),E		;SAVE "RETURN ADDRESS"
002AC8 23          8083                   INC	HL
002AC9 7E          8084                   LD	A,(HL)
002ACA 72          8085                   LD	(HL),D
002ACB FE EE       8086                   CP	TON		;WAS IT "ON PROC" ?
002ACD 20 0C       8087                   JR	NZ,XEQGO
002ACF D5          8088                   PUSH	DE
002AD0 FD E3       8089                   EX	(SP),IY
002AD2 CD 24 35    8090                   CALL	SPAN		;SKIP REST OF ON LIST
002AD5 FD E3       8091                   EX	(SP),IY
002AD7 D1          8092                   POP	DE
002AD8 72          8093                   LD	(HL),D
002AD9 2B          8094                   DEC	HL
002ADA 73          8095                   LD	(HL),E
002ADB C3 7B 24    8096   XEQGO:          JP	XEQ
002ADE             8097   ;
002ADE FD 23       8098   LOCERR:         INC	IY
002AE0 18 F9       8099                   JR	XEQGO
002AE2             8100   ;
002AE2             8101   ;LOCAL DATA
002AE2             8102   ;
002AE2 FD 23       8103   LOCDAT:         INC	IY
002AE4 2A F0 54    8104                   LD	HL,(DATPTR)
002AE7 E5          8105                   PUSH	HL
002AE8 3E 40       8106                   LD	A,40H
002AEA F5          8107                   PUSH	AF
002AEB 21 F0 54    8108                   LD	HL,DATPTR
002AEE E5          8109                   PUSH	HL
002AEF 21 0C 35    8110                   LD	HL,LOCCHK
002AF2 E5          8111                   PUSH	HL
002AF3 18 E6       8112                   JR	XEQGO
002AF5             8113   ;
002AF5             8114   ;LOCAL var[,var...]
002AF5             8115   ;
002AF5 FE 85       8116   LOCAL:          CP	TERROR
002AF7 28 E5       8117                   JR	Z,LOCERR
002AF9 FE DC       8118                   CP	TDATA
002AFB 28 E5       8119                   JR	Z,LOCDAT
002AFD C1          8120                   POP	BC
002AFE C5          8121                   PUSH	BC
002AFF 21 C9 29    8122                   LD	HL,FNCHK
002B02 B7          8123                   OR	A
002B03 ED 42       8124                   SBC	HL,BC
002B05 28 23       8125                   JR	Z,LOCAL1
002B07 21 CD 29    8126                   LD	HL,PROCHK
002B0A B7          8127                   OR	A
002B0B ED 42       8128                   SBC	HL,BC
002B0D 28 1B       8129                   JR	Z,LOCAL1
002B0F 21 0C 35    8130                   LD	HL,LOCCHK
002B12 B7          8131                   OR	A
002B13 ED 42       8132                   SBC	HL,BC
002B15 28 13       8133                   JR	Z,LOCAL1
002B17 21 BE 26    8134                   LD	HL,ARRCHK
002B1A B7          8135                   OR	A
002B1B ED 42       8136                   SBC	HL,BC
002B1D 28 0B       8137                   JR	Z,LOCAL1
002B1F 21 52 2A    8138                   LD	HL,RETCHK
002B22 B7          8139                   OR	A
002B23 ED 42       8140                   SBC	HL,BC
002B25 3E 0C       8141                   LD	A,12
002B27 C2 26 3F    8142                   JP	NZ,ERROR_	;"Not LOCAL"
002B2A FD E5       8143   LOCAL1:         PUSH	IY
002B2C C1          8144                   POP	BC
002B2D D9          8145                   EXX
002B2E FD 2B       8146                   DEC	IY
002B30 CD A0 34    8147                   CALL	SAVLOC
002B33 D9          8148                   EXX
002B34 C5          8149                   PUSH	BC
002B35 FD E1       8150                   POP	IY
002B37 CD C5 41    8151   LOCAL2:         CALL	GETVAR
002B3A C2 C2 25    8152                   JP	NZ,SYNTAX
002B3D CB 77       8153                   BIT	6,A		;ARRAY?
002B3F 20 14       8154                   JR	NZ,LOCAL4
002B41 B7          8155                   OR	A		;TYPE
002B42 08          8156                   EX	AF,AF'
002B43 CD DA 1F    8157                   CALL	ZERO
002B46 08          8158                   EX	AF,AF'
002B47 F5          8159                   PUSH	AF
002B48 F4 D2 31    8160                   CALL	P,STOREN	;ZERO
002B4B F1          8161                   POP	AF
002B4C 59          8162                   LD	E,C
002B4D FC 23 32    8163                   CALL	M,STORES
002B50 CD E2 44    8164   LOCAL3:         CALL	NLIST
002B53 18 E2       8165                   JR	LOCAL2
002B55             8166   ;
002B55 DD 36 00 01 8167   LOCAL4:         LD	(IX+0),1	;FLAG LOCAL ARRAY
002B59 DD 36 01 00 8168                   LD	(IX+1),0
002B5D 18 F1       8169                   JR	LOCAL3
002B5F             8170   ;
002B5F             8171   ;ENDPROC
002B5F             8172   ;
002B5F C1          8173   ENDPRO:         POP	BC
002B60 21 CD 29    8174                   LD	HL,PROCHK	;PROC MARKER
002B63 AF          8175                   XOR	A
002B64 ED 42       8176                   SBC	HL,BC
002B66 28 0B       8177                   JR	Z,ENDPR1
002B68 C5          8178                   PUSH	BC		;PUT BACK
002B69 CD 13 34    8179                   CALL	RESLOC
002B6C 20 F1       8180                   JR	NZ,ENDPRO
002B6E 3E 0D       8181                   LD	A,13
002B70 C3 26 3F    8182                   JP	ERROR_		;"No PROC"
002B73             8183   ;
002B73 FD E1       8184   ENDPR1:         POP	IY
002B75 C3 7B 24    8185   XEQGO6:         JP	XEQ
002B78             8186   ;
002B78             8187   ;INPUT #channel,var,var...
002B78             8188   ;
002B78 CD BD 36    8189   INPUTN:         CALL	CHNL		;E = CHANNEL NUMBER
002B7B CD E2 44    8190   INPN1:          CALL	NLIST
002B7E D5          8191                   PUSH	DE
002B7F CD B8 25    8192                   CALL	VAR_
002B82 D1          8193                   POP	DE
002B83 F5          8194                   PUSH	AF		;SAVE TYPE
002B84 E5          8195                   PUSH	HL		;VARPTR
002B85 B7          8196                   OR	A
002B86 FA AB 2B    8197                   JP	M,INPN2		;STRING
002B89 CD 3D 06    8198                   CALL	OSBGET
002B8C D9          8199                   EXX
002B8D 6F          8200                   LD	L,A
002B8E D9          8201                   EXX
002B8F CD 3D 06    8202                   CALL	OSBGET
002B92 D9          8203                   EXX
002B93 67          8204                   LD	H,A
002B94 D9          8205                   EXX
002B95 CD 3D 06    8206                   CALL	OSBGET
002B98 6F          8207                   LD	L,A
002B99 CD 3D 06    8208                   CALL	OSBGET
002B9C 67          8209                   LD	H,A
002B9D CD 3D 06    8210                   CALL	OSBGET
002BA0 4F          8211                   LD	C,A
002BA1 DD E1       8212                   POP	IX
002BA3 F1          8213                   POP	AF		;RESTORE TYPE
002BA4 D5          8214                   PUSH	DE		;SAVE CHANNEL
002BA5 CD D2 31    8215                   CALL	STOREN
002BA8 D1          8216                   POP	DE
002BA9 18 D0       8217                   JR	INPN1
002BAB 21 00 52    8218   INPN2:          LD	HL,ACCS
002BAE CD 3D 06    8219   INPN3:          CALL	OSBGET
002BB1 FE 0D       8220                   CP	CR
002BB3 28 04       8221                   JR	Z,INPN4
002BB5 77          8222                   LD	(HL),A
002BB6 2C          8223                   INC	L
002BB7 20 F5       8224                   JR	NZ,INPN3
002BB9 DD E1       8225   INPN4:          POP	IX
002BBB F1          8226                   POP	AF
002BBC D5          8227                   PUSH	DE
002BBD EB          8228                   EX	DE,HL
002BBE CD 20 32    8229                   CALL	STACCS
002BC1 D1          8230                   POP	DE
002BC2 18 B7       8231                   JR	INPN1
002BC4             8232   ;
002BC4             8233   ;INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BC4             8234   ;INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BC4             8235   ;
002BC4 FE 23       8236   INPUT:          CP	'#'
002BC6 28 B0       8237                   JR	Z,INPUTN
002BC8 0E 00       8238                   LD	C,0		;FLAG PROMPT
002BCA FE 86       8239                   CP	TLINE
002BCC 20 04       8240                   JR	NZ,INPUT0
002BCE FD 23       8241                   INC	IY		;SKIP "LINE"
002BD0 0E 80       8242                   LD	C,80H
002BD2 21 00 53    8243   INPUT0:         LD	HL,BUFFER
002BD5 36 0D       8244                   LD	(HL),CR		;INITIALISE EMPTY
002BD7 CD 18 35    8245   INPUT1:         CALL	TERMQ
002BDA 28 99       8246                   JR	Z,XEQGO6	;DONE
002BDC FD 23       8247                   INC	IY
002BDE FE 2C       8248                   CP	','
002BE0 28 51       8249                   JR	Z,INPUT3	;SKIP COMMA
002BE2 FE 3B       8250                   CP	';'
002BE4 28 4D       8251                   JR	Z,INPUT3
002BE6 E5          8252                   PUSH	HL		;SAVE BUFFER POINTER
002BE7 FE 22       8253                   CP	'"'
002BE9 20 0A       8254                   JR	NZ,INPUT6
002BEB C5          8255                   PUSH	BC
002BEC CD 5C 19    8256                   CALL	CONS
002BEF C1          8257                   POP	BC
002BF0 CD 93 35    8258                   CALL	PTEXT		;PRINT PROMPT
002BF3 18 05       8259                   JR	INPUT9
002BF5 CD 3E 35    8260   INPUT6:         CALL	FORMAT		;SPC, TAB, '
002BF8 20 05       8261                   JR	NZ,INPUT2
002BFA E1          8262   INPUT9:         POP	HL
002BFB CB C1       8263                   SET	0,C		;FLAG NO PROMPT
002BFD 18 D3       8264                   JR	INPUT0
002BFF FD 2B       8265   INPUT2:         DEC	IY
002C01 C5          8266                   PUSH	BC
002C02 CD B8 25    8267                   CALL	VAR_
002C05 C1          8268                   POP	BC
002C06 E1          8269                   POP	HL
002C07 F5          8270                   PUSH	AF		;SAVE TYPE
002C08 7E          8271                   LD	A,(HL)
002C09 23          8272                   INC	HL
002C0A FE 0D       8273                   CP	CR		;BUFFER EMPTY?
002C0C CC 37 2C    8274                   CALL	Z,REFILL
002C0F CB 79       8275                   BIT	7,C
002C11 F5          8276                   PUSH	AF
002C12 C4 B1 35    8277                   CALL	NZ,LINES
002C15 F1          8278                   POP	AF
002C16 CC A0 35    8279                   CALL	Z,FETCHS
002C19 F1          8280                   POP	AF		;RESTORE TYPE
002C1A C5          8281                   PUSH	BC
002C1B E5          8282                   PUSH	HL
002C1C B7          8283                   OR	A
002C1D FA 2E 2C    8284                   JP	M,INPUT4	;STRING
002C20 F5          8285                   PUSH	AF
002C21 DD E5       8286                   PUSH	IX
002C23 CD 04 1C    8287                   CALL	VAL0
002C26 DD E1       8288                   POP	IX
002C28 F1          8289                   POP	AF
002C29 CD D2 31    8290                   CALL	STOREN
002C2C 18 03       8291                   JR	INPUT5
002C2E CD 20 32    8292   INPUT4:         CALL	STACCS
002C31 E1          8293   INPUT5:         POP	HL
002C32 C1          8294                   POP	BC
002C33 CB 81       8295   INPUT3:         RES	0,C
002C35 18 A0       8296                   JR	INPUT1
002C37             8297   ;
002C37 CB 41       8298   REFILL:         BIT	0,C
002C39 20 0A       8299                   JR	NZ,REFIL0	;NO PROMPT
002C3B 3E 3F       8300                   LD	A,'?'
002C3D CD E4 40    8301                   CALL	OUTCHR		;PROMPT
002C40 3E 20       8302                   LD	A,' '
002C42 CD E4 40    8303                   CALL	OUTCHR
002C45 21 00 53    8304   REFIL0:         LD	HL,BUFFER
002C48 C5          8305                   PUSH	BC
002C49 E5          8306                   PUSH	HL
002C4A DD E5       8307                   PUSH	IX
002C4C CD C9 05    8308                   CALL	OSLINE
002C4F DD E1       8309                   POP	IX
002C51 E1          8310                   POP	HL
002C52 C1          8311                   POP	BC
002C53 47          8312                   LD	B,A		;POS AT ENTRY
002C54 AF          8313                   XOR	A
002C55 32 FB 54    8314                   LD	(COUNT),A
002C58 B8          8315                   CP	B
002C59 C8          8316                   RET	Z
002C5A 7E          8317   REFIL1:         LD	A,(HL)
002C5B FE 0D       8318                   CP	CR
002C5D C8          8319                   RET	Z
002C5E 23          8320                   INC	HL
002C5F 10 F9       8321                   DJNZ	REFIL1
002C61 C9          8322                   RET
002C62             8323   ;
002C62             8324   ;READ var[,var...]
002C62             8325   ;
002C62 FE 23       8326   READ:           CP	'#'
002C64 CA 78 2B    8327                   JP	Z,INPUTN
002C67 2A F0 54    8328                   LD	HL,(DATPTR)
002C6A 7E          8329   READ0:          LD	A,(HL)
002C6B FE 3A       8330                   CP	':'
002C6D CC 5A 2C    8331                   CALL	Z,REFIL1
002C70 23          8332                   INC	HL		;SKIP COMMA | "DATA"
002C71 FE 0D       8333                   CP	CR		;END OF DATA STMT?
002C73 CC A2 2C    8334                   CALL	Z,GETDAT
002C76 E5          8335                   PUSH	HL
002C77 CD B8 25    8336                   CALL	VAR_
002C7A E1          8337                   POP	HL
002C7B B7          8338                   OR	A
002C7C FA 92 2C    8339                   JP	M,READ1		;STRING
002C7F E5          8340                   PUSH	HL
002C80 FD E3       8341                   EX	(SP),IY
002C82 F5          8342                   PUSH	AF		;SAVE TYPE
002C83 DD E5       8343                   PUSH	IX
002C85 CD 0E 18    8344                   CALL	EXPRN
002C88 DD E1       8345                   POP	IX
002C8A F1          8346                   POP	AF
002C8B CD D2 31    8347                   CALL	STOREN
002C8E FD E3       8348                   EX	(SP),IY
002C90 18 07       8349                   JR	READ2
002C92 CD A0 35    8350   READ1:          CALL	FETCHS
002C95 E5          8351                   PUSH	HL
002C96 CD 20 32    8352                   CALL	STACCS
002C99 E1          8353   READ2:          POP	HL
002C9A 22 F0 54    8354                   LD	(DATPTR),HL
002C9D CD E2 44    8355                   CALL	NLIST
002CA0 18 C8       8356                   JR	READ0
002CA2             8357   ;
002CA2 CD DB 35    8358   GETDAT:         CALL	DSRCH
002CA5 23          8359                   INC	HL
002CA6 D0          8360                   RET	NC
002CA7 3E 2A       8361                   LD	A,42
002CA9 18 64       8362                   JR	ERROR4ex		;"Out of DATA"
002CAB             8363   ;
002CAB             8364   ;IF expr statement
002CAB             8365   ;IF expr THEN statement [ELSE statement]
002CAB             8366   ;IF expr THEN line [ELSE line]
002CAB             8367   ;IF expr THEN
002CAB             8368   ;
002CAB CD 15 18    8369   IF_:            CALL	EXPRI
002CAE CD 3B 1F    8370                   CALL	TEST
002CB1 28 2A       8371                   JR	Z,IFNOT		;FALSE
002CB3 FD 7E 00    8372                   LD	A,(IY)
002CB6 FE 8C       8373                   CP	TTHEN
002CB8 C2 7B 24    8374                   JP	NZ,XEQ
002CBB FD 23       8375   IF0:            INC	IY		;SKIP "THEN"
002CBD FD 7E 00    8376                   LD	A,(IY)
002CC0 FE 3B       8377                   CP	';'
002CC2 28 F7       8378                   JR	Z,IF0
002CC4 CD ED 44    8379   IF1:            CALL	NXT
002CC7 FE 8D       8380                   CP	TLINO
002CC9 C2 7B 24    8381                   JP	NZ,XEQ		;STATEMENT FOLLOWS
002CCC C3 96 28    8382                   JP	GOTO		;LINE NO. FOLLOWS
002CCF             8383   ;
002CCF FD 7E 00    8384   IFELSE:         LD	A,(IY)
002CD2 FD 23       8385                   INC	IY
002CD4 FE 3B       8386                   CP	';'
002CD6 20 0A       8387                   JR	NZ,IFNEXT
002CD8 18 1E       8388                   JR	IFTHEN
002CDA             8389   ;
002CDA CD 7B 36    8390   IF2:            CALL	QUOTE		;SKIP STRING
002CDD FD 7E 00    8391   IFNOT:          LD	A,(IY)
002CE0 FD 23       8392                   INC	IY
002CE2 FE 22       8393   IFNEXT:         CP	'"'
002CE4 28 F4       8394                   JR	Z,IF2		;QUOTED STRING
002CE6 FE F4       8395                   CP	TREM
002CE8 CA 13 25    8396                   JP	Z,REM		;REM
002CEB FE 0D       8397                   CP	CR
002CED CA 66 24    8398                   JP	Z,XEQ0		;END OF LINE
002CF0 FE 8B       8399                   CP	TELSE
002CF2 28 D0       8400                   JR	Z,IF1		;ELSE CLAUSE
002CF4 FE 8C       8401                   CP	TTHEN
002CF6 20 E5       8402                   JR	NZ,IFNOT	;TRY FOR END AGAIN
002CF8 FD 7E 00    8403   IFTHEN:         LD	A,(IY)
002CFB FE 0D       8404                   CP	CR
002CFD 20 D0       8405                   JR	NZ,IFELSE
002CFF 01 8B 00    8406                   LD	BC,TELSE
002D02 11 8C CD    8407                   LD	DE,TENDIF*256+TTHEN
002D05 FD 23       8408                   INC	IY
002D07 CD F3 35    8409                   CALL	NSCAN
002D0A CA 82 24    8410                   JP	Z,XEQ1
002D0D 3E 31       8411   NENDIF:         LD	A,49
002D0F C3 26 3F    8412   ERROR4ex:         JP	ERROR_		;"Missing ENDIF"
002D12             8413   ;
002D12             8414   ; ELSE (multi-line)
002D12             8415   ;
002D12 01 FD FF    8416   MELSE:          LD	BC,-3
002D15 FD 09       8417                   ADD	IY,BC
002D17 01 CD 00    8418                   LD	BC,TENDIF
002D1A 11 8C CD    8419                   LD	DE,TENDIF*256+TTHEN
002D1D CD F3 35    8420                   CALL	NSCAN
002D20 20 EB       8421                   JR	NZ,NENDIF
002D22 C3 7B 24    8422   XEQGO7:         JP	XEQ
002D25             8423   ;
002D25             8424   ; WHEN and OTHERWISE:
002D25             8425   ;
002D25 01 FD FF    8426   WHEN:           LD	BC,-3
002D28 FD 09       8427                   ADD	IY,BC
002D2A 01 CB 00    8428                   LD	BC,TENDCASE
002D2D 11 CA CB    8429                   LD	DE,TENDCASE*256+TOF
002D30 CD F3 35    8430                   CALL	NSCAN
002D33 28 ED       8431                   JR	Z,XEQGO7
002D35 3E 2F       8432                   LD	A,47
002D37 18 D6       8433                   JR	ERROR4ex		;"Missing ENDCASE"
002D39             8434   ;
002D39             8435   ; CASE
002D39             8436   ;
002D39 CD E4 16    8437   CASE:           CALL	EXPR		;String or numeric
002D3C 08          8438                   EX	AF,AF'
002D3D 06 00       8439                   LD	B,0		;Flag numeric
002D3F F2 48 2D    8440                   JP	P,CASE6		;numeric
002D42 CD FB 1F    8441                   CALL	PUSHS		;put string on stack
002D45 C1          8442                   POP	BC		;C = length
002D46 06 01       8443                   LD	B,1		;Flag string
002D48 FD 7E 00    8444   CASE6:          LD	A,(IY)
002D4B FD 23       8445                   INC	IY
002D4D FE CA       8446                   CP	TOF
002D4F 3E 25       8447                   LD	A,37
002D51 20 BC       8448                   JR	NZ,ERROR4ex	;"Missing OF"
002D53 FD 7E 00    8449                   LD	A,(IY)
002D56 FD 23       8450                   INC	IY		;Address line-length byte
002D58 FE 0D       8451                   CP	CR
002D5A 3E 30       8452                   LD	A,48
002D5C 20 B1       8453                   JR	NZ,ERROR4ex	;"OF not last"
002D5E AF          8454   CASE1:          XOR	A		;Level
002D5F D9          8455   CASE0:          EXX
002D60 E5          8456                   PUSH	HL		;Push to stack
002D61 D9          8457                   EXX
002D62 E5          8458                   PUSH	HL
002D63 C5          8459                   PUSH	BC
002D64 6F          8460                   LD	L,A		;Level
002D65 01 C9 CC    8461                   LD	BC,TOTHERWISE*256+TWHEN
002D68 11 CA CB    8462                   LD	DE,TENDCASE*256+TOF
002D6B CD F5 35    8463                   CALL	NSCAN1
002D6E C1          8464                   POP	BC		;Restore from stack
002D6F E1          8465                   POP	HL
002D70 D9          8466                   EXX
002D71 E1          8467                   POP	HL
002D72 D9          8468                   EXX
002D73 3E 2F       8469                   LD	A,47
002D75 C2 26 3F    8470                   JP	NZ,ERROR_	;Missing ENDCASE
002D78 FD 7E FF    8471                   LD	A,(IY-1)
002D7B FE CB       8472                   CP	TENDCASE
002D7D 28 56       8473                   JR	Z,CASE9
002D7F FE CC       8474                   CP	TOTHERWISE
002D81 28 52       8475                   JR	Z,CASE9
002D83 CB 40       8476   CASE4:          BIT	0,B		;Numeric or string?
002D85 20 69       8477                   JR	NZ,CASE3
002D87 C5          8478                   PUSH	BC		;Type/exponent/length
002D88 E5          8479                   PUSH	HL		;MS 32 bits
002D89 D9          8480                   EXX
002D8A E5          8481                   PUSH	HL		;LS 32 bits
002D8B D9          8482                   EXX
002D8C CD 0E 18    8483                   CALL	EXPRN
002D8F DD 21 00 00 8484                   LD	IX,0
002D93 DD 39       8485                   ADD	IX,SP		;Address stack
002D95 D9          8486                   EXX
002D96 DD 5E 00    8487                   LD	E,(IX+0)	;Get LS 32-bits
002D99 DD 56 01    8488                   LD	D,(IX+1)
002D9C D9          8489                   EXX
002D9D DD 5E 02    8490                   LD	E,(IX+2)
002DA0 DD 56 03    8491                   LD	D,(IX+3)	;Get MS 32-bits
002DA3 DD 46 04    8492                   LD	B,(IX+4)	;Get exponent
002DA6 3E 09       8493                   LD	A,9
002DA8 CD F7 44    8494                   CALL	FPP		;In case integer vs float
002DAB 7D          8495                   LD	A,L
002DAC B7          8496                   OR	A		;NZ if equal
002DAD D9          8497                   EXX
002DAE E1          8498                   POP	HL
002DAF D9          8499                   EXX
002DB0 E1          8500                   POP	HL
002DB1 C1          8501                   POP	BC
002DB2 20 2C       8502                   JR	NZ,CASE5	;Match found
002DB4 FD 7E 00    8503   CASE2:          LD	A,(IY)
002DB7 FD 23       8504                   INC	IY
002DB9 FE 2C       8505                   CP	','
002DBB 28 C6       8506                   JR	Z,CASE4		;Not found, try another
002DBD D9          8507                   EXX
002DBE FD E5       8508                   PUSH	IY
002DC0 E3          8509                   EX	(SP),HL
002DC1 3E 0D       8510                   LD	A,CR
002DC3 47          8511                   LD	B,A
002DC4 ED B1       8512                   CPIR			;Find CR
002DC6 E3          8513                   EX	(SP),HL
002DC7 FD E1       8514                   POP	IY
002DC9 D9          8515                   EXX
002DCA FD 7E FE    8516                   LD	A,(IY-2)	;Last token in previous line
002DCD FE CA       8517                   CP	TOF		;CASE statement in WHEN line
002DCF 20 8D       8518                   JR	NZ,CASE1
002DD1 3E 01       8519                   LD	A,1
002DD3 18 8A       8520                   JR	CASE0
002DD5             8521   ;
002DD5             8522   ;Finished, level stack if string:
002DD5             8523   ;
002DD5 CB 40       8524   CASE9:          BIT	0,B
002DD7 28 49       8525                   JR	Z,XEQGO5
002DD9 26 00       8526                   LD	H,0
002DDB 69          8527                   LD	L,C
002DDC 39          8528                   ADD	HL,SP
002DDD F9          8529                   LD	SP,HL
002DDE 18 42       8530                   JR	XEQGO5
002DE0             8531   ;
002DE0             8532   ;Matched, so skip any more expressions:
002DE0             8533   ;
002DE0 CD ED 44    8534   CASE5:          CALL	NXT
002DE3 FE 2C       8535                   CP	','
002DE5 20 EE       8536                   JR	NZ,CASE9	;End of list
002DE7 FD 23       8537                   INC	IY
002DE9 C5          8538                   PUSH	BC		;Save type and string length
002DEA CD E4 16    8539                   CALL	EXPR		;Evaluate but discard
002DED C1          8540                   POP	BC
002DEE 18 F0       8541                   JR	CASE5
002DF0             8542   ;
002DF0             8543   ;String compare:
002DF0             8544   ;
002DF0 C5          8545   CASE3:          PUSH	BC
002DF1 CD 1E 18    8546                   CALL	EXPRS
002DF4 C1          8547                   POP	BC
002DF5 21 00 00    8548                   LD	HL,0
002DF8 39          8549                   ADD	HL,SP
002DF9 43          8550                   LD	B,E
002DFA 11 00 52    8551                   LD	DE,ACCS
002DFD C5          8552                   PUSH	BC
002DFE CD D7 1F    8553                   CALL	SCP		;String compare
002E01 C1          8554                   POP	BC
002E02 06 01       8555                   LD	B,1
002E04 20 AE       8556                   JR	NZ,CASE2
002E06 18 D8       8557                   JR	CASE5
002E08             8558   ;
002E08             8559   ; WHILE
002E08             8560   ;
002E08 FD E5       8561   WHILE:          PUSH	IY		;Save current position
002E0A CD 68 32    8562                   CALL	CHECK
002E0D CD 10 2E    8563                   CALL	WHICHK		;Push marker
002E10 CD 15 18    8564   WHICHK:         CALL	EXPRI
002E13 CD 3B 1F    8565                   CALL	TEST
002E16 20 0A       8566                   JR	NZ,XEQGO5
002E18 C1          8567                   POP	BC		;Pop marker
002E19 C1          8568                   POP	BC		;Level stack
002E1A 01 00 95    8569                   LD	BC,TWHILE+TENDWHILE*256
002E1D 16 01       8570                   LD	D,1
002E1F CD 32 36    8571                   CALL	WSRCH
002E22 C3 7B 24    8572   XEQGO5:         JP	XEQ
002E25             8573   ;
002E25             8574   ; ENDWHILE
002E25             8575   ;
002E25 C1          8576   ENDWHI:         POP	BC		;Marker
002E26 D1          8577                   POP	DE		;Saved text pointer
002E27 D5          8578                   PUSH	DE
002E28 C5          8579                   PUSH	BC
002E29 B7          8580                   OR	A
002E2A 21 10 2E    8581                   LD	HL,WHICHK
002E2D ED 42       8582                   SBC	HL,BC
002E2F 28 0B       8583                   JR	Z,ENDWH1
002E31 3E 03       8584                   LD	A,3
002E33 CD 13 34    8585                   CALL	RESLOC
002E36 20 ED       8586                   JR	NZ,ENDWHI
002E38 3E 2E       8587                   LD	A,46
002E3A 18 4F       8588                   JR	ERROR5		;"Not in a WHILE loop"
002E3C             8589   ;
002E3C FD E5       8590   ENDWH1:         PUSH	IY
002E3E FD 21 00 00 8591                   LD	IY,0
002E42 FD 19       8592                   ADD	IY,DE
002E44 CD 15 18    8593                   CALL	EXPRI
002E47 CD 3B 1F    8594                   CALL	TEST
002E4A D1          8595                   POP	DE		;Text pointer
002E4B 20 D5       8596                   JR	NZ,XEQGO5
002E4D C1          8597                   POP	BC		;Junk marker
002E4E C1          8598                   POP	BC		;Junk pointer
002E4F FD 21 00 00 8599                   LD	IY,0
002E53 FD 19       8600                   ADD	IY,DE
002E55 18 CB       8601                   JR	XEQGO5
002E57             8602   ;
002E57             8603   ;CLS
002E57             8604   ;
002E57 CD 6E 0D    8605   CLS:            CALL	CLRSCN
002E5A AF          8606                   XOR	A
002E5B 32 FB 54    8607                   LD	(COUNT),A
002E5E 18 C2       8608                   JR	XEQGO5
002E60             8609   ;
002E60             8610   ;STOP
002E60             8611   ;
002E60 CD DC 44    8612   STOP:           CALL	TELL
002E63 0D          8613                   DB	CR
002E64 0A          8614                   DB	LF
002E65 FA          8615                   DB	TSTOP
002E66 00          8616                   DB	0
002E67 CD 3D 41    8617                   CALL	SETLIN		;FIND CURRENT LINE
002E6A CD 64 41    8618                   CALL	SAYLN
002E6D CD DD 40    8619                   CALL	CRLF
002E70 C3 92 37    8620                   JP	CLOOP
002E73             8621   ;
002E73             8622   ;REPORT
002E73             8623   ;
002E73 CD C7 44    8624   REPOR:          CALL	REPORT
002E76 18 AA       8625                   JR	XEQGO5
002E78             8626   ;
002E78             8627   ;CLEAR
002E78             8628   ;
002E78 CD 25 40    8629   CLR:            CALL	CLEAR
002E7B 2A DC 54    8630                   LD	HL,(PAGE_)
002E7E 18 3B       8631                   JR	RESTR1
002E80             8632   ;
002E80             8633   ;RESTORE ERROR
002E80             8634   ;
002E80 FD 23       8635   RESERR:         INC	IY
002E82 3E 02       8636                   LD	A,2
002E84 CD 13 34    8637                   CALL	RESLOC
002E87 20 99       8638                   JR	NZ,XEQGO5
002E89 3E 35       8639                   LD	A,53		;ON ERROR not LOCAL
002E8B C3 26 3F    8640   ERROR5:         JP	ERROR_
002E8E             8641   ;
002E8E             8642   ;RESTORE DATA
002E8E             8643   ;
002E8E FD 23       8644   RESDAT:         INC	IY
002E90 3E 01       8645                   LD	A,1
002E92 CD 13 34    8646                   CALL	RESLOC
002E95 20 8B       8647                   JR	NZ,XEQGO5
002E97 3E 36       8648                   LD	A,54		;'DATA not LOCAL'
002E99 21          8649                   DB	21H
002E9A 3E 29       8650   NOLINE:         LD	A,41		;'No such line'
002E9C 18 ED       8651                   JR	ERROR5
002E9E             8652   ;
002E9E             8653   ;RESTORE [line]
002E9E             8654   ;
002E9E FE 85       8655   RESTOR:         CP	TERROR
002EA0 28 DE       8656                   JR	Z,RESERR
002EA2 FE DC       8657                   CP	TDATA
002EA4 28 E8       8658                   JR	Z,RESDAT
002EA6 FE 2B       8659                   CP	'+'
002EA8 28 1A       8660                   JR	Z,RESREL
002EAA 2A DC 54    8661                   LD	HL,(PAGE_)
002EAD CD 18 35    8662                   CALL	TERMQ
002EB0 28 09       8663                   JR	Z,RESTR1
002EB2 CD 42 18    8664                   CALL	ITEMI
002EB5 D9          8665                   EXX
002EB6 CD 25 41    8666                   CALL	FINDL		;SEARCH FOR LINE
002EB9 20 DF       8667                   JR	NZ,NOLINE
002EBB CD DB 35    8668   RESTR1:         CALL	DSRCH
002EBE 22 F0 54    8669                   LD	(DATPTR),HL
002EC1 C3 7B 24    8670                   JP	XEQ
002EC4             8671   ;
002EC4 CD 15 18    8672   RESREL:         CALL	EXPRI
002EC7 D9          8673                   EXX
002EC8 EB          8674                   EX	DE,HL
002EC9 FD E5       8675                   PUSH	IY
002ECB E1          8676                   POP	HL
002ECC 3E 0D       8677                   LD	A,CR
002ECE 47          8678                   LD	B,A
002ECF ED B1       8679                   CPIR			;FIND LINE END
002ED1 1D          8680                   DEC	E
002ED2 28 E7       8681                   JR	Z,RESTR1
002ED4 FA BB 2E    8682                   JP	M,RESTR1
002ED7 AF          8683                   XOR	A
002ED8 47          8684                   LD	B,A
002ED9 4E          8685   RESTR2:         LD	C,(HL)
002EDA B9          8686                   CP	C
002EDB 28 BD       8687                   JR	Z,NOLINE
002EDD 09          8688                   ADD	HL,BC
002EDE 1D          8689                   DEC	E
002EDF 20 F8       8690                   JR	NZ,RESTR2
002EE1 18 D8       8691                   JR	RESTR1
002EE3             8692   ;
002EE3             8693   ;PTR#channel=expr
002EE3             8694   ;PAGE=expr
002EE3             8695   ;TIME=expr
002EE3             8696   ;LOMEM=expr
002EE3             8697   ;HIMEM=expr
002EE3             8698   ;
002EE3 CD B3 36    8699   PTR:            CALL	CHANEL
002EE6 CD 31 35    8700                   CALL	EQUALS
002EE9 7B          8701                   LD	A,E
002EEA F5          8702                   PUSH	AF
002EEB CD 15 18    8703                   CALL	EXPRI
002EEE E5          8704                   PUSH	HL
002EEF D9          8705                   EXX
002EF0 D1          8706                   POP	DE
002EF1 F1          8707                   POP	AF
002EF2 CD 77 06    8708                   CALL	PUTPTR
002EF5 18 61       8709                   JR	XEQGO1ex
002EF7             8710   ;
002EF7 CD 31 35    8711   PAGEV:          CALL	EQUALS
002EFA CD 15 18    8712                   CALL	EXPRI
002EFD D9          8713                   EXX
002EFE 2E 00       8714                   LD	L,0
002F00 22 DC 54    8715                   LD	(PAGE_),HL
002F03 18 53       8716                   JR	XEQGO1ex
002F05             8717   ;
002F05 FE 24       8718   TIMEV:          CP	'$'
002F07 28 0E       8719                   JR	Z,TIMEVS
002F09 CD 31 35    8720                   CALL	EQUALS
002F0C CD 15 18    8721                   CALL	EXPRI
002F0F E5          8722                   PUSH	HL
002F10 D9          8723                   EXX
002F11 D1          8724                   POP	DE
002F12 CD 39 0D    8725                   CALL	PUTIME
002F15 18 41       8726                   JR	XEQGO1ex
002F17             8727   ;
002F17 FD 23       8728   TIMEVS:         INC	IY		;SKIP '$'
002F19 CD 31 35    8729                   CALL	EQUALS
002F1C CD 1E 18    8730                   CALL	EXPRS
002F1F CD 56 0D    8731                   CALL	PUTIMS
002F22 18 34       8732                   JR	XEQGO1ex
002F24             8733   ;
002F24 CD 31 35    8734   LOMEMV:         CALL	EQUALS
002F27 CD 15 18    8735                   CALL	EXPRI
002F2A CD 25 40    8736                   CALL	CLEAR
002F2D D9          8737                   EXX
002F2E 22 DE 54    8738                   LD	(LOMEM),HL
002F31 22 E0 54    8739                   LD	(FREE),HL
002F34 18 22       8740                   JR	XEQGO1ex
002F36             8741   ;
002F36 CD 31 35    8742   HIMEMV:         CALL	EQUALS
002F39 CD 15 18    8743                   CALL	EXPRI
002F3C D9          8744                   EXX
002F3D ED 5B E0 54 8745                   LD	DE,(FREE)
002F41 14          8746                   INC	D
002F42 AF          8747                   XOR	A
002F43 ED 52       8748                   SBC	HL,DE
002F45 19          8749                   ADD	HL,DE
002F46 DA 26 3F    8750                   JP	C,ERROR_		;"No room"
002F49 ED 5B E2 54 8751                   LD	DE,(HIMEM)
002F4D 22 E2 54    8752                   LD	(HIMEM),HL
002F50 EB          8753                   EX	DE,HL
002F51 ED 72       8754                   SBC	HL,SP
002F53 C2 7B 24    8755                   JP	NZ,XEQ
002F56 EB          8756                   EX	DE,HL
002F57 F9          8757                   LD	SP,HL		;LOAD STACK POINTER
002F58 C3 7B 24    8758   XEQGO1ex:         JP	XEQ
002F5B             8759   ;
002F5B             8760   ;WIDTH expr
002F5B             8761   ;
002F5B CD 15 18    8762   WIDTHV:         CALL	EXPRI
002F5E D9          8763                   EXX
002F5F 7D          8764                   LD	A,L
002F60 32 FC 54    8765                   LD	(WIDTH),A
002F63 18 F3       8766                   JR	XEQGO1ex
002F65             8767   ;
002F65             8768   ;TRACE ON
002F65             8769   ;TRACE OFF
002F65             8770   ;TRACE line
002F65             8771   ;
002F65 FD 23       8772   TRACE:          INC	IY
002F67 21 00 00    8773                   LD	HL,0
002F6A FE EE       8774                   CP	TON
002F6C 28 0A       8775                   JR	Z,TRACE0
002F6E FE 87       8776                   CP	TOFF
002F70 28 07       8777                   JR	Z,TRACE1
002F72 FD 2B       8778                   DEC	IY
002F74 CD 15 18    8779                   CALL	EXPRI
002F77 D9          8780                   EXX
002F78 2B          8781   TRACE0:         DEC	HL
002F79 22 E6 54    8782   TRACE1:         LD	(TRACEN),HL
002F7C 18 DA       8783                   JR	XEQGO1ex
002F7E             8784   ;
002F7E             8785   ;VDU expr,expr;....[|]
002F7E             8786   ;
002F7E CD 15 18    8787   VDU:            CALL	EXPRI
002F81 D9          8788                   EXX
002F82 7D          8789                   LD	A,L
002F83 06 01       8790                   LD	B,1
002F85 CD 93 05    8791   VDU1:           CALL	OSWRCH
002F88 10 FB       8792                   DJNZ	VDU1
002F8A FD 7E 00    8793                   LD	A,(IY)
002F8D FE 7C       8794                   CP	'|'
002F8F 28 15       8795                   JR	Z,VDU4
002F91 FE 2C       8796                   CP	','
002F93 28 08       8797                   JR	Z,VDU2
002F95 FE 3B       8798                   CP	';'
002F97 20 06       8799                   JR	NZ,VDU3
002F99 7C          8800                   LD	A,H
002F9A CD 93 05    8801                   CALL	OSWRCH
002F9D FD 23       8802   VDU2:           INC	IY
002F9F CD 18 35    8803   VDU3:           CALL	TERMQ
002FA2 20 DA       8804                   JR	NZ,VDU
002FA4 18 B2       8805                   JR	XEQGO1ex
002FA6             8806   ;
002FA6 FD 23       8807   VDU4:           INC	IY
002FA8 AF          8808                   XOR	A
002FA9 06 09       8809                   LD	B,9
002FAB 18 D8       8810                   JR	VDU1
002FAD             8811   ;
002FAD             8812   ;CLOSE channel number
002FAD             8813   ;
002FAD CD B3 36    8814   CLOSE:          CALL	CHANEL
002FB0 CD 35 06    8815                   CALL	OSSHUT
002FB3 18 A3       8816                   JR	XEQGO1ex
002FB5             8817   ;
002FB5             8818   ;BPUT #channel,byte
002FB5             8819   ;BPUT #channel,string[;]
002FB5             8820   ;
002FB5 CD B3 36    8821   BPUT:           CALL	CHANEL		;CHANNEL NUMBER
002FB8 D5          8822                   PUSH	DE
002FB9 CD 84 20    8823                   CALL	COMMA
002FBC CD E4 16    8824                   CALL	EXPR
002FBF 08          8825                   EX	AF,AF'
002FC0 FA CE 2F    8826                   JP	M,BPUTS
002FC3 CD F9 1B    8827                   CALL	SFIX
002FC6 D9          8828                   EXX
002FC7 7D          8829                   LD	A,L
002FC8 D1          8830                   POP	DE
002FC9 CD 45 06    8831                   CALL	OSBPUT
002FCC 18 8A       8832   BPUTX:          JR	XEQGO1ex
002FCE             8833   ;
002FCE 7B          8834   BPUTS:          LD	A,E
002FCF D1          8835                   POP	DE
002FD0 57          8836                   LD	D,A
002FD1 21 00 52    8837                   LD	HL,ACCS
002FD4 7E          8838   BPUTS1:         LD	A,(HL)
002FD5 23          8839                   INC	HL
002FD6 CD 45 06    8840                   CALL	OSBPUT
002FD9 15          8841                   DEC	D
002FDA 20 F8       8842                   JR	NZ,BPUTS1
002FDC CD ED 44    8843                   CALL	NXT
002FDF FE 3B       8844                   CP	';'
002FE1 FD 23       8845                   INC	IY
002FE3 28 E7       8846                   JR	Z,BPUTX
002FE5 3E 0A       8847                   LD	A,LF
002FE7 CD 45 06    8848                   CALL	OSBPUT
002FEA FD 2B       8849                   DEC	IY
002FEC 18 DE       8850                   JR	BPUTX
002FEE             8851   ;
002FEE             8852   ;CALL address[,var[,var...]]
002FEE             8853   ;
002FEE CD 15 18    8854   CALL:           CALL	EXPRI		;ADDRESS
002FF1 D9          8855                   EXX
002FF2 E5          8856                   PUSH	HL		;SAVE IT
002FF3 06 00       8857                   LD	B,0		;PARAMETER COUNTER
002FF5 11 00 53    8858                   LD	DE,BUFFER	;VECTOR
002FF8 CD ED 44    8859   CALL1:          CALL	NXT
002FFB FE 2C       8860                   CP	','
002FFD 20 17       8861                   JR	NZ,CALL2
002FFF FD 23       8862                   INC	IY
003001 04          8863                   INC	B
003002 CD ED 44    8864                   CALL	NXT
003005 C5          8865                   PUSH	BC
003006 D5          8866                   PUSH	DE
003007 CD B8 25    8867                   CALL	VAR_
00300A D1          8868                   POP	DE
00300B C1          8869                   POP	BC
00300C 13          8870                   INC	DE
00300D 12          8871                   LD	(DE),A		;PARAMETER TYPE
00300E 13          8872                   INC	DE
00300F EB          8873                   EX	DE,HL
003010 73          8874                   LD	(HL),E		;PARAMETER ADDRESS
003011 23          8875                   INC	HL
003012 72          8876                   LD	(HL),D
003013 EB          8877                   EX	DE,HL
003014 18 E2       8878                   JR	CALL1
003016 78          8879   CALL2:          LD	A,B
003017 32 00 53    8880                   LD	(BUFFER),A	;PARAMETER COUNT
00301A E1          8881                   POP	HL		;RESTORE ADDRESS
00301B CD 25 30    8882                   CALL	USR1
00301E C3 7B 24    8883                   JP	XEQ
003021             8884   ;
003021             8885   ;USR(address)
003021             8886   ;
003021 CD 42 18    8887   USR:            CALL	ITEMI
003024 D9          8888                   EXX
003025 E5          8889   USR1:           PUSH	HL		;ADDRESS ON STACK
003026 FD E3       8890                   EX	(SP),IY
003028 24          8891                   INC	H		;PAGE &FF?
003029 21 54 30    8892                   LD	HL,USR2		;RETURN ADDRESS
00302C E5          8893                   PUSH	HL
00302D DD 21 00 54 8894                   LD	IX,STAVAR
003031 CC 8A 10    8895                   CALL	Z,OSCALL	;INTERCEPT PAGE &FF
003034 DD 4E 18    8896                   LD	C,(IX+24)
003037 C5          8897                   PUSH	BC
003038 F1          8898                   POP	AF		;LOAD FLAGS
003039 DD 7E 04    8899                   LD	A,(IX+4)	;LOAD Z80 REGISTERS
00303C DD 46 08    8900                   LD	B,(IX+8)
00303F DD 4E 0C    8901                   LD	C,(IX+12)
003042 DD 56 10    8902                   LD	D,(IX+16)
003045 DD 5E 14    8903                   LD	E,(IX+20)
003048 DD 66 20    8904                   LD	H,(IX+32)
00304B DD 6E 30    8905                   LD	L,(IX+48)
00304E DD 21 00 53 8906                   LD	IX,BUFFER
003052 FD E9       8907                   JP	(IY)		;OFF TO USER ROUTINE
003054 FD E1       8908   USR2:           POP	IY
003056 AF          8909                   XOR	A
003057 4F          8910                   LD	C,A
003058 C9          8911                   RET
003059             8912   ;
003059             8913   ; LEFT$(A$[,N]) = string
003059             8914   ; MID$(A$,N[,M]) = string
003059             8915   ; RIGHT$(A$[,N]) = string
003059             8916   ;
003059 CD A0 25    8917   LEFTSL:         CALL    GETSTR
00305C 21 00 FF    8918                   LD	HL,0FF00H	;Default all but last
00305F 20 48       8919                   JR	NZ,MIDSL1
003061 18 26       8920                   JR	MIDSL0
003063             8921   ;
003063 CD A0 25    8922   RITESL:         CALL	GETSTR
003066 21 FF FF    8923                   LD	HL,0FFFFH	;Default last char only
003069 20 3E       8924                   JR	NZ,MIDSL1
00306B 18 1C       8925                   JR	MIDSL0
00306D             8926   ;
00306D CD A0 25    8927   MIDSL:          CALL	GETSTR
003070 3E 05       8928                   LD	A,5
003072 C2 26 3F    8929                   JP	NZ,ERROR_	;'Missing comma'
003075 FD 23       8930                   INC	IY
003077 DD E5       8931                   PUSH	IX
003079 CD 15 18    8932                   CALL	EXPRI
00307C DD E1       8933                   POP	IX
00307E D9          8934                   EXX
00307F CD ED 44    8935                   CALL	NXT
003082 2D          8936                   DEC	L
003083 26 FE       8937                   LD	H,254		;Default rest of string
003085 FE 2C       8938                   CP	','
003087 20 20       8939                   JR	NZ,MIDSL1
003089 FD 23       8940   MIDSL0:         INC	IY
00308B E5          8941                   PUSH	HL
00308C DD E5       8942                   PUSH	IX
00308E CD 15 18    8943                   CALL	EXPRI
003091 DD E1       8944                   POP	IX
003093 D9          8945                   EXX
003094 7D          8946                   LD	A,L
003095 E1          8947                   POP	HL
003096 B7          8948                   OR	A
003097 28 0D       8949                   JR	Z,MIDSL2	;Zero length
003099 3D          8950                   DEC	A
00309A 85          8951                   ADD	A,L
00309B 67          8952                   LD	H,A
00309C 30 0B       8953                   JR	NC,MIDSL1
00309E 7D          8954                   LD	A,L
00309F 3C          8955                   INC	A
0030A0 28 07       8956                   JR	Z,MIDSL1
0030A2 26 FE       8957                   LD	H,254
0030A4 18 03       8958                   JR	MIDSL1
0030A6             8959   ;
0030A6 21 01 00    8960   MIDSL2:         LD	HL,1
0030A9 CD 90 20    8961   MIDSL1:         CALL	BRAKET
0030AC CD 31 35    8962                   CALL	EQUALS
0030AF E5          8963                   PUSH	HL
0030B0 DD E5       8964                   PUSH	IX
0030B2 CD 1E 18    8965                   CALL	EXPRS
0030B5 DD E1       8966                   POP	IX
0030B7 E1          8967                   POP	HL
0030B8 4B          8968                   LD	C,E
0030B9 DD 46 00    8969                   LD	B,(IX+0)
0030BC DD 5E 02    8970                   LD	E,(IX+2)
0030BF DD 56 03    8971                   LD	D,(IX+3)
0030C2             8972   ;
0030C2             8973   ; Source string at ACCS, length C
0030C2             8974   ; Destination string at DE, length B
0030C2             8975   ; L = first character to modify 0-254
0030C2             8976   ; H =  last character to modify 0-254
0030C2             8977   ; IF L=255 THEN modify rightmost H + 2 chars
0030C2             8978   ; ELSE IF H=255 modify all but last character
0030C2             8979   ; ELSE IF L > H do nothing
0030C2             8980   ; IX = destination VARPTR
0030C2             8981   ;
0030C2 7D          8982                   LD	A,L
0030C3 3C          8983                   INC	A
0030C4 20 0F       8984                   JR	NZ,SUBSL1
0030C6 24          8985                   INC	H
0030C7 24          8986                   INC	H
0030C8 79          8987                   LD	A,C
0030C9 BC          8988                   CP	H
0030CA 30 01       8989                   JR	NC,SUBSL0
0030CC 67          8990                   LD	H,A
0030CD 78          8991   SUBSL0:         LD	A,B
0030CE 94          8992                   SUB	H
0030CF 30 01       8993                   JR	NC,SUBSL6
0030D1 AF          8994                   XOR	A
0030D2 6F          8995   SUBSL6:         LD	L,A
0030D3 18 12       8996                   JR	SUBSL5
0030D5             8997   ;
0030D5 7C          8998   SUBSL1:         LD	A,H
0030D6 3C          8999                   INC	A
0030D7 20 06       9000                   JR	NZ,SUBSL2
0030D9 78          9001                   LD	A,B
0030DA D6 02       9002                   SUB	2
0030DC 38 24       9003                   JR	C,SUBSL9
0030DE 67          9004                   LD	H,A
0030DF 7D          9005   SUBSL2:         LD	A,L
0030E0 B8          9006                   CP	B
0030E1 30 1F       9007                   JR	NC,SUBSL9
0030E3 7C          9008                   LD	A,H
0030E4 B8          9009                   CP	B
0030E5 38 03       9010                   JR	C,SUBSL3
0030E7 78          9011   SUBSL5:         LD	A,B
0030E8 3D          9012                   DEC	A
0030E9 67          9013                   LD	H,A
0030EA 7C          9014   SUBSL3:         LD	A,H
0030EB 95          9015                   SUB	L
0030EC 38 14       9016                   JR	C,SUBSL9
0030EE 3C          9017                   INC	A
0030EF B9          9018                   CP	C
0030F0 38 01       9019                   JR	C,SUBSL4
0030F2 79          9020                   LD	A,C
0030F3 06 00       9021   SUBSL4:         LD	B,0
0030F5 60          9022                   LD	H,B
0030F6 4F          9023                   LD	C,A
0030F7 B7          9024                   OR	A
0030F8 28 08       9025                   JR	Z,SUBSL9
0030FA EB          9026                   EX	DE,HL
0030FB 19          9027                   ADD	HL,DE
0030FC EB          9028                   EX	DE,HL
0030FD 21 00 52    9029                   LD	HL,ACCS
003100 ED B0       9030                   LDIR
003102 C3 7B 24    9031   SUBSL9:         JP	XEQ
003105             9032   ;
003105             9033   ; EXITex FOR [var]
003105             9034   ; EXITex REPEAT
003105             9035   ; EXITex WHILE
003105             9036   ;
003105 FD 23       9037   EXITex:           INC	IY		;Skip FOR/REPEAT/WHILE
003107 FE E3       9038                   CP	TFOR
003109 20 0C       9039                   JR	NZ,EXIT0
00310B DD 21 00 00 9040                   LD	IX,0		;For EXITex FOR <var>
00310F CD 18 35    9041                   CALL	TERMQ
003112 C4 C5 41    9042                   CALL	NZ,GETVAR
003115 3E E3       9043                   LD	A,TFOR
003117 16 01       9044   EXIT0:          LD	D,1		;Level for WSRCH
003119 5F          9045                   LD	E,A
00311A 7B          9046   EXIT1:          LD	A,E
00311B C1          9047                   POP	BC		;Marker
00311C 21 43 29    9048                   LD	HL,FORCHK
00311F B7          9049                   OR	A
003120 ED 42       9050                   SBC	HL,BC
003122 28 25       9051                   JR	Z,EXIT4
003124 21 CF 28    9052                   LD	HL,REPCHK
003127 B7          9053                   OR	A
003128 ED 42       9054                   SBC	HL,BC
00312A 28 38       9055                   JR	Z,EXIT6
00312C 21 10 2E    9056                   LD	HL,WHICHK
00312F B7          9057                   OR	A
003130 ED 42       9058                   SBC	HL,BC
003132 28 3A       9059                   JR	Z,EXIT7
003134 C5          9060                   PUSH	BC		;Put back marker
003135 DD E5       9061                   PUSH	IX
003137 C1          9062                   POP	BC
003138 D9          9063                   EXX
003139 3E 03       9064                   LD	A,3
00313B CD 13 34    9065                   CALL	RESLOC
00313E D9          9066                   EXX
00313F C5          9067                   PUSH	BC
003140 DD E1       9068                   POP	IX
003142 20 D6       9069                   JR	NZ,EXIT1
003144 3E 2C       9070                   LD	A,44
003146 C3 26 3F    9071                   JP	ERROR_		;'Bad EXITex'
003149             9072   ;
003149 C1          9073   EXIT4:          POP	BC		;VARPTR
00314A 21 0E 00    9074                   LD	HL,14		;Skip text pointer, limit & step
00314D 39          9075                   ADD	HL,SP
00314E F9          9076                   LD	SP,HL		;Pop FOR record
00314F FE E3       9077                   CP	TFOR
003151 20 C7       9078                   JR	NZ,EXIT1
003153 DD E5       9079                   PUSH	IX
003155 E1          9080                   POP	HL
003156 7C          9081                   LD	A,H
003157 B5          9082                   OR	L
003158 28 02       9083                   JR	Z,EXIT5
00315A ED 42       9084                   SBC	HL,BC
00315C 01 00 D0    9085   EXIT5:          LD	BC,TFOR+TNEXT*256
00315F 28 15       9086                   JR	Z,EXIT8
003161 14          9087                   INC	D		;Count nested FOR loops
003162 18 B6       9088                   JR	EXIT1
003164             9089   ;
003164 C1          9090   EXIT6:          POP	BC		;Text pointer
003165 FE F5       9091                   CP	TREPEAT
003167 20 B1       9092                   JR	NZ,EXIT1
003169 01 00 F2    9093                   LD	BC,TREPEAT+TUNTIL*256
00316C 18 08       9094                   JR	EXIT8
00316E             9095   ;
00316E C1          9096   EXIT7:          POP	BC		;Text pointer
00316F FE C7       9097                   CP	TWHILE
003171 20 A7       9098                   JR	NZ,EXIT1
003173 01 00 95    9099                   LD	BC,TWHILE+TENDWHILE*256
003176 CD 32 36    9100   EXIT8:          CALL	WSRCH
003179 CD 24 35    9101                   CALL	SPAN		;Skip UNTIL expression
00317C C3 7B 24    9102                   JP	XEQ
00317F             9103   ;
00317F             9104   ;PUT port,data
00317F             9105   ;
00317F CD 15 18    9106   PUT:            CALL	EXPRI		;PORT ADDRESS
003182 D9          9107                   EXX
003183 E5          9108                   PUSH	HL
003184 CD 84 20    9109                   CALL	COMMA
003187 CD 15 18    9110                   CALL	EXPRI		;DATA
00318A D9          9111                   EXX
00318B C1          9112                   POP	BC
00318C ED 69       9113                   OUT	(C),L		;OUTPUT TO PORT BC
00318E C3 7B 24    9114                   JP	XEQ
003191             9115   ;
003191             9116   ;SUBROUTINES:
003191             9117   ;
003191             9118   ;ASSIGN - Assign a numeric value to a variable.
003191             9119   ;Outputs: NC,  Z     - OK, numeric scalar
003191             9120   ;         NC, NZ, PE - OK, string array  (D = type, E = operator)
003191             9121   ; else if NC, NZ, P  - OK, numeric array (D = type, E = operator)
003191             9122   ; else if NC, NZ     - OK, string scalar
003191             9123   ;          C, NZ     - illegal / invalid
003191             9124   ;
003191 CD C5 41    9125   ASSIGN:         CALL	GETVAR		;VARIABLE
003194 D8          9126                   RET	C		;ILLEGAL VARIABLE
003195 C4 AF 41    9127                   CALL	NZ,PUTVAR
003198 57          9128                   LD	D,A		;Type
003199 CD ED 44    9129                   CALL	NXT
00319C FD 23       9130                   INC	IY
00319E 5F          9131                   LD	E,A		;Operator (or =)
00319F FE 3D       9132                   CP	'='
0031A1 C4 31 35    9133                   CALL	NZ,EQUALS
0031A4 7A          9134                   LD	A,D
0031A5 E6 C0       9135                   AND	11000000B
0031A7 C0          9136                   RET	NZ		;String or array
0031A8 D5          9137                   PUSH	DE
0031A9 E5          9138                   PUSH	HL
0031AA CD 0E 18    9139                   CALL	EXPRN
0031AD DD E1       9140                   POP	IX
0031AF D1          9141                   POP	DE
0031B0             9142   ;
0031B0             9143   ; Falls through to...
0031B0             9144   ;
0031B0             9145   ; MODIFY - Update numeric variable according to operator:
0031B0             9146   ;   Inputs: D = type
0031B0             9147   ;           E = operator
0031B0             9148   ;           HLH'L'C = value
0031B0             9149   ;           IX = destination VARPTR
0031B0             9150   ; Destroys: Everything except IX,IY,SP
0031B0             9151   ;
0031B0 7B          9152   MODIFY:         LD	A,E
0031B1 FE 3D       9153                   CP	'='
0031B3 28 1C       9154                   JR	Z,STORE0	;Simple assignment
0031B5 D5          9155                   PUSH	DE
0031B6 D9          9156                   EXX
0031B7 EB          9157                   EX	DE,HL
0031B8 D9          9158                   EXX
0031B9 EB          9159                   EX	DE,HL
0031BA 41          9160                   LD	B,C
0031BB E3          9161                   EX	(SP),HL
0031BC 7C          9162                   LD	A,H
0031BD E3          9163                   EX	(SP),HL
0031BE CD 07 19    9164                   CALL	LOADN
0031C1 E3          9165                   EX	(SP),HL
0031C2 7D          9166                   LD	A,L
0031C3 E3          9167                   EX	(SP),HL
0031C4 E6 0F       9168                   AND	15
0031C6 DD E5       9169                   PUSH	IX
0031C8 CD F7 44    9170                   CALL	FPP
0031CB DD E1       9171                   POP	IX
0031CD D1          9172                   POP	DE
0031CE DA 26 3F    9173                   JP	C,ERROR_
0031D1 7A          9174   STORE0:         LD	A,D		;Type
0031D2 FE 05       9175   STOREN:         CP	5
0031D4 28 12       9176                   JR	Z,STORE5
0031D6 F5          9177                   PUSH	AF
0031D7 0C          9178                   INC	C		;SPEED - & PRESERVE F'
0031D8 0D          9179                   DEC	C		; WHEN CALLED BY FNEND0
0031D9 C4 F9 1B    9180                   CALL	NZ,SFIX		;CONVERT TO INTEGER
0031DC F1          9181                   POP	AF
0031DD FE 04       9182                   CP	4
0031DF 28 0A       9183                   JR	Z,STORE4
0031E1 BF          9184                   CP	A		;SET ZERO
0031E2 D9          9185   STORE1:         EXX
0031E3 DD 75 00    9186                   LD	(IX+0),L
0031E6 D9          9187                   EXX
0031E7 C9          9188                   RET
0031E8             9189   ;
0031E8 DD 71 04    9190   STORE5:         LD	(IX+4),C
0031EB D9          9191   STORE4:         EXX
0031EC DD 75 00    9192                   LD	(IX+0),L
0031EF DD 74 01    9193                   LD	(IX+1),H
0031F2 D9          9194                   EXX
0031F3 DD 75 02    9195                   LD	(IX+2),L
0031F6 DD 74 03    9196                   LD	(IX+3),H
0031F9 C9          9197                   RET
0031FA             9198   ;
0031FA             9199   ; MODIFS - Update string variable according to operator:
0031FA             9200   ;   Inputs: H = type
0031FA             9201   ;           L = operator (= or +)
0031FA             9202   ;           E = string length (string in accumulator)
0031FA             9203   ;           IX = destination VARPTR
0031FA             9204   ; Destroys: Everything except SP, IY
0031FA             9205   ;
0031FA 7D          9206   MODIFS:         LD	A,L		;Operator
0031FB FE 2B       9207                   CP	'+'
0031FD 7C          9208                   LD	A,H		;Type
0031FE 20 20       9209                   JR	NZ,STACCS
003200 FD E5       9210                   PUSH	IY
003202 DD E5       9211                   PUSH	IX
003204 FD E1       9212                   POP	IY
003206 CD FB 1F    9213                   CALL	PUSHS
003209 FD E5       9214                   PUSH	IY
00320B DD E1       9215                   POP	IX
00320D CD F0 19    9216                   CALL	LOADS
003210 C1          9217                   POP	BC
003211 78          9218                   LD	A,B		;Type
003212 0C          9219                   INC	C
003213 0D          9220                   DEC	C
003214 28 08       9221                   JR	Z,MODFS1	;Zero length
003216 21 00 00    9222                   LD	HL,0
003219 44          9223                   LD	B,H
00321A 39          9224                   ADD	HL,SP
00321B ED B0       9225                   LDIR
00321D F9          9226                   LD	SP,HL
00321E FD E1       9227   MODFS1:         POP	IY
003220             9228   ;
003220             9229   ; Falls through to:
003220             9230   ;
003220 21 00 52    9231   STACCS:         LD	HL,ACCS
003223 1F          9232   STORES:         RRA
003224 30 4F       9233                   JR	NC,STORS3	;FIXED STRING
003226 E5          9234                   PUSH	HL
003227 CD 14 19    9235                   CALL	LOAD4
00322A 7B          9236                   LD	A,E		;LENGTH OF STRING
00322B D9          9237                   EXX
00322C 6F          9238                   LD	L,A
00322D 7C          9239                   LD	A,H		;LENGTH ALLOCATED
00322E D9          9240                   EXX
00322F BB          9241                   CP	E
003230 30 24       9242                   JR	NC,STORS1	;ENOUGH ROOM
003232 D9          9243                   EXX
003233 65          9244                   LD	H,L
003234 D9          9245                   EXX
003235 E5          9246                   PUSH	HL
003236 06 00       9247                   LD	B,0
003238 4F          9248                   LD	C,A
003239 09          9249                   ADD	HL,BC
00323A ED 4B E0 54 9250                   LD	BC,(FREE)
00323E ED 42       9251                   SBC	HL,BC		;IS STRING LAST?
003240 E1          9252                   POP	HL
003241 28 12       9253                   JR	Z,STORS0
003243 60          9254                   LD	H,B
003244 69          9255                   LD	L,C		;DESTINATION
003245             9256   ;
003245 B7          9257                   OR	A		;V5 optimisation
003246 28 0D       9258                   JR	Z,STORS0
003248 7B          9259                   LD	A,E
003249 5F          9260   STORS2:         LD	E,A
00324A 1D          9261                   DEC	E
00324B A3          9262                   AND	E
00324C 20 FB       9263                   JR	NZ,STORS2
00324E 37          9264                   SCF
00324F CB 13       9265                   RL	E
003251 7B          9266                   LD	A,E
003252 D9          9267                   EXX
003253 67          9268                   LD	H,A
003254 D9          9269                   EXX
003255             9270   ;
003255 37          9271   STORS0:         SCF
003256 CD EB 31    9272   STORS1:         CALL	STORE4		;PRESERVES CARRY!
003259 06 00       9273                   LD	B,0
00325B 4B          9274                   LD	C,E
00325C EB          9275                   EX	DE,HL
00325D E1          9276                   POP	HL
00325E 0D          9277                   DEC	C
00325F 0C          9278                   INC	C
003260 C8          9279                   RET	Z		;NULL STRING
003261 ED B0       9280                   LDIR
003263 D0          9281                   RET	NC		;STRING REPLACED
003264 ED 53 E0 54 9282                   LD	(FREE),DE
003268 E5          9283   CHECK:          PUSH	HL
003269 2A E0 54    9284                   LD	HL,(FREE)
00326C 24          9285                   INC	H
00326D ED 72       9286                   SBC	HL,SP
00326F E1          9287                   POP	HL
003270 D8          9288                   RET	C
003271 AF          9289                   XOR	A
003272 C3 26 3F    9290                   JP	ERROR_		;"No room"
003275             9291   ;
003275 4B          9292   STORS3:         LD	C,E
003276 DD E5       9293                   PUSH	IX
003278 D1          9294                   POP	DE
003279 AF          9295                   XOR	A
00327A 47          9296                   LD	B,A
00327B B9          9297                   CP	C
00327C 28 02       9298                   JR	Z,STORS5
00327E ED B0       9299                   LDIR
003280 3E 0D       9300   STORS5:         LD	A,CR
003282 12          9301                   LD	(DE),A
003283 C9          9302                   RET
003284             9303   ;
003284             9304   ; SAVRET - SAVE 'RETURNed' PARAMETER INFO
003284             9305   ;
003284 DD 75 00    9306   SAVRET:         LD	(IX+0),L		;Formal VARPTR
003287 DD 74 01    9307                   LD	(IX+1),H
00328A DD 77 02    9308                   LD	(IX+2),A
00328D FD E3       9309                   EX	(SP),IY
00328F F5          9310                   PUSH	AF
003290 FD E5       9311                   PUSH	IY
003292 DD E5       9312                   PUSH	IX
003294 CD ED 44    9313                   CALL	NXT
003297 CD B8 25    9314                   CALL	VAR_
00329A DD E1       9315                   POP	IX
00329C DD 75 04    9316                   LD	(IX+4),L		;Actual VARPTR
00329F DD 74 05    9317                   LD	(IX+5),H
0032A2 DD 77 06    9318                   LD	(IX+6),A
0032A5 FD E1       9319                   POP	IY
0032A7 F1          9320                   POP	AF
0032A8 01 08 00    9321                   LD	BC,8
0032AB DD 09       9322                   ADD	IX,BC
0032AD 18 2D       9323                   JR	ARGUE0
0032AF             9324   ;
0032AF             9325   ;ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
0032AF             9326   ; CALLING STATEMENT TO THE DUMMY VARIABLES VIA
0032AF             9327   ; THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
0032AF             9328   ; PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
0032AF             9329   ;   Inputs: DE addresses parameter list
0032AF             9330   ;           IY addresses dummy variable list
0032AF             9331   ;           IX addresses RETURNed parameter data block
0032AF             9332   ;  Outputs: DE,IY updated
0032AF             9333   ; Destroys: Everything
0032AF             9334   ;
0032AF 3E FF       9335   ARGUE:          LD	A,-1
0032B1 F5          9336                   PUSH	AF		;PUT MARKER ON STACK
0032B2 FD 23       9337   ARGUE1:         INC	IY		;BUMP PAST ( | ,
0032B4 13          9338                   INC	DE
0032B5 D5          9339                   PUSH	DE
0032B6 06 00       9340                   LD	B,0
0032B8 CD ED 44    9341                   CALL	NXT
0032BB FE F8       9342                   CP	TRETURN
0032BD 20 06       9343                   JR	NZ,ARGUE9
0032BF FD 23       9344                   INC	IY		;SKIP 'RETURN'
0032C1 CD ED 44    9345                   CALL	NXT
0032C4 04          9346                   INC	B		;FLAG 'RETURN'
0032C5 C5          9347   ARGUE9:         PUSH	BC
0032C6 DD E5       9348                   PUSH	IX
0032C8 CD C5 41    9349                   CALL	GETVAR		;FORMAL PARAMETER
0032CB 38 49       9350                   JR	C,ARGERR
0032CD C4 AF 41    9351                   CALL	NZ,PUTVAR
0032D0 DD E1       9352                   POP	IX
0032D2 C1          9353                   POP	BC
0032D3 D1          9354                   POP	DE
0032D4 E5          9355                   PUSH	HL		;VARPTR
0032D5 F5          9356                   PUSH	AF
0032D6 D5          9357                   PUSH	DE
0032D7 05          9358                   DEC	B
0032D8 28 AA       9359                   JR	Z,SAVRET
0032DA FD E3       9360                   EX	(SP),IY
0032DC CB 77       9361   ARGUE0:         BIT	6,A		;ARRAY?
0032DE 20 3B       9362                   JR	NZ,ARGUE3
0032E0 B7          9363                   OR	A		;TYPE
0032E1 FA F7 32    9364                   JP	M,ARGUE2	;STRING
0032E4 DD E5       9365                   PUSH	IX
0032E6 CD 0E 18    9366                   CALL	EXPRN		;ACTUAL PARAMETER
0032E9 DD E1       9367                   POP	IX
0032EB FD E3       9368                   EX	(SP),IY
0032ED D1          9369                   POP	DE
0032EE F1          9370                   POP	AF
0032EF D9          9371                   EXX
0032F0 E5          9372                   PUSH	HL
0032F1 D9          9373                   EXX
0032F2 E5          9374                   PUSH	HL
0032F3 47          9375                   LD	B,A
0032F4 C5          9376                   PUSH	BC
0032F5 18 13       9377                   JR	ARGUE4
0032F7             9378   ;
0032F7 DD E5       9379   ARGUE2:         PUSH	IX
0032F9 CD 1E 18    9380                   CALL	EXPRS
0032FC D9          9381                   EXX
0032FD C1          9382                   POP	BC
0032FE FD E3       9383                   EX	(SP),IY
003300 D1          9384                   POP	DE
003301 D9          9385                   EXX
003302 F1          9386                   POP	AF
003303 CD FB 1F    9387                   CALL	PUSHS
003306 D9          9388                   EXX
003307 C5          9389                   PUSH	BC
003308 DD E1       9390                   POP	IX
00330A CD ED 44    9391   ARGUE4:         CALL	NXT
00330D FE 2C       9392                   CP	','
00330F 20 27       9393                   JR	NZ,ARGUE5
003311 1A          9394                   LD	A,(DE)
003312 FE 2C       9395                   CP	','
003314 28 9C       9396                   JR	Z,ARGUE1	;ANOTHER
003316 3E 1F       9397   ARGERR:         LD	A,31
003318 C3 26 3F    9398                   JP	ERROR_		;"Bad arguments"
00331B             9399   ;
00331B DD E5       9400   ARGUE3:         PUSH	IX
00331D CD ED 44    9401                   CALL	NXT
003320 CD C5 41    9402                   CALL	GETVAR
003323 38 F1       9403                   JR	C,ARGERR
003325 DD 4E 00    9404                   LD	C,(IX+0)
003328 DD 46 01    9405                   LD	B,(IX+1)
00332B DD E1       9406                   POP	IX
00332D CD ED 44    9407                   CALL	NXT
003330 FD E3       9408                   EX	(SP),IY
003332 D1          9409                   POP	DE
003333 F1          9410                   POP	AF
003334 C5          9411                   PUSH	BC		;STACK ARRAY POINTER
003335 F5          9412                   PUSH	AF		;STACK TYPE
003336 18 D2       9413                   JR	ARGUE4
003338             9414   ;
003338 CD 90 20    9415   ARGUE5:         CALL	BRAKET
00333B 1A          9416                   LD	A,(DE)
00333C FE 29       9417                   CP	')'
00333E 20 D6       9418                   JR	NZ,ARGERR
003340 13          9419                   INC	DE
003341 D9          9420   UNSTAK:         EXX
003342 C1          9421   ARGUE6:         POP	BC
003343 78          9422                   LD	A,B
003344 3C          9423                   INC	A
003345 D9          9424                   EXX
003346 C8          9425                   RET	Z		;MARKER POPPED
003347 D9          9426                   EXX
003348 3D          9427                   DEC	A
003349 CB 77       9428                   BIT	6,A		;ARRAY
00334B 20 19       9429                   JR	NZ,ARGUE8
00334D B7          9430                   OR	A
00334E FA 5C 33    9431                   JP	M,ARGUE7	;STRING
003351 E1          9432                   POP	HL
003352 D9          9433                   EXX
003353 E1          9434                   POP	HL
003354 D9          9435                   EXX
003355 DD E1       9436                   POP	IX
003357 CD D2 31    9437                   CALL	STOREN		;WRITE TO DUMMY
00335A 18 E6       9438                   JR	ARGUE6
00335C             9439   ;
00335C CD 19 20    9440   ARGUE7:         CALL	POPS
00335F DD E1       9441                   POP	IX
003361 CD 20 32    9442                   CALL	STACCS
003364 18 DC       9443                   JR	ARGUE6
003366             9444   ;
003366 C1          9445   ARGUE8:         POP	BC		;ARRAY POINTER
003367 DD E1       9446                   POP	IX
003369 DD 71 00    9447                   LD	(IX+0),C
00336C DD 70 01    9448                   LD	(IX+1),B
00336F 18 D1       9449                   JR	ARGUE6
003371             9450   ;
003371             9451   ;Restore RETURNed parameters, via the stack to ensure that
003371             9452   ; PROCFRED(A,B)    DEF PROCFRED(RETURN B,RETURN A)  works.
003371             9453   ;
003371 3E FF       9454   RETXFR:         LD	A,-1
003373 F5          9455                   PUSH	AF		;PUT MARKER ON STACK
003374 D9          9456   RETXF1:         EXX
003375 DD 6E 04    9457                   LD	L,(IX+4)	;Actual parameter (destination)
003378 DD 66 05    9458                   LD	H,(IX+5)
00337B E5          9459                   PUSH	HL		;STACK VARPTR
00337C DD 6E 00    9460                   LD	L,(IX+0)	;Formal parameter (source)
00337F DD 66 01    9461                   LD	H,(IX+1)
003382 DD 7E 02    9462                   LD	A,(IX+2)
003385 CB 77       9463                   BIT	6,A		;ARRAY?
003387 20 19       9464                   JR	NZ,RETXF3
003389 B7          9465                   OR	A		;TYPE
00338A FA A8 33    9466                   JP	M,RETXF2	;STRING
00338D E5          9467                   PUSH	HL
00338E DD E3       9468                   EX	(SP),IX
003390 CD 07 19    9469                   CALL	LOADN
003393 DD E1       9470                   POP	IX
003395 D9          9471                   EXX			;STACK VALUE
003396 E5          9472                   PUSH	HL
003397 D9          9473                   EXX
003398 E5          9474                   PUSH	HL
003399 DD 46 06    9475   RETXF6:         LD	B,(IX+6)
00339C C5          9476                   PUSH	BC		;TYPE & EXPONENT
00339D CD 68 32    9477   RETXF5:         CALL	CHECK		;CHECK ROOM
0033A0 18 1E       9478                   JR	RETXF4
0033A2             9479   ;
0033A2 5E          9480   RETXF3:         LD	E,(HL)
0033A3 23          9481                   INC	HL
0033A4 56          9482                   LD	D,(HL)
0033A5 D5          9483                   PUSH	DE		;STACK ARRAY POINTER
0033A6 18 F1       9484                   JR	RETXF6
0033A8             9485   ;
0033A8 E5          9486   RETXF2:         PUSH	HL
0033A9 DD E3       9487                   EX	(SP),IX
0033AB CD F0 19    9488                   CALL	LOADS
0033AE DD E1       9489                   POP	IX
0033B0 DD 7E 06    9490                   LD	A,(IX+6)
0033B3 D9          9491                   EXX
0033B4 DD E5       9492                   PUSH	IX
0033B6 E1          9493                   POP	HL
0033B7 D9          9494                   EXX
0033B8 CD FB 1F    9495                   CALL	PUSHS
0033BB D9          9496                   EXX
0033BC E5          9497                   PUSH	HL
0033BD DD E1       9498                   POP	IX
0033BF D9          9499                   EXX
0033C0 11 08 00    9500   RETXF4:         LD	DE,8
0033C3 DD 19       9501                   ADD	IX,DE
0033C5 D9          9502                   EXX
0033C6 10 AC       9503                   DJNZ	RETXF1
0033C8 C3 41 33    9504                   JP	UNSTAK
0033CB             9505   ;
0033CB             9506   ;Restore 'RETURNed' parameters,
0033CB             9507   ;
0033CB C1          9508   RESRET:         POP	BC		;B = 'RETURN' COUNT
0033CC 26 00       9509                   LD	H,0
0033CE 68          9510                   LD	L,B
0033CF 29          9511                   ADD	HL,HL
0033D0 29          9512                   ADD	HL,HL
0033D1 29          9513                   ADD	HL,HL		;RETURN COUNT * 8
0033D2 39          9514                   ADD	HL,SP
0033D3 DD 21 00 00 9515                   LD	IX,0
0033D7 DD 39       9516                   ADD	IX,SP		;ADDRESS PARAMETER LIST
0033D9 F5          9517                   PUSH	AF
0033DA D5          9518                   PUSH	DE
0033DB E5          9519                   PUSH	HL
0033DC D9          9520                   EXX
0033DD C5          9521                   PUSH	BC
0033DE D5          9522                   PUSH	DE
0033DF D9          9523                   EXX
0033E0 78          9524                   LD	A,B
0033E1 21 00 52    9525                   LD	HL,ACCS
0033E4 11 00 53    9526                   LD	DE,BUFFER
0033E7 01 FF 00    9527                   LD	BC,255
0033EA ED B0       9528                   LDIR
0033EC 47          9529                   LD	B,A
0033ED CD 71 33    9530                   CALL	RETXFR		;TRANSFER VIA STACK
0033F0 21 00 53    9531                   LD	HL,BUFFER
0033F3 11 00 52    9532                   LD	DE,ACCS
0033F6 01 FF 00    9533                   LD	BC,255
0033F9 ED B0       9534                   LDIR
0033FB D9          9535                   EXX
0033FC D1          9536                   POP	DE
0033FD C1          9537                   POP	BC
0033FE D9          9538                   EXX
0033FF E1          9539                   POP	HL
003400 D1          9540                   POP	DE
003401 F1          9541                   POP	AF
003402 18 0A       9542                   JR	RESAR1
003404             9543   ;
003404             9544   ; Restore LOCAL array or memory block:
003404             9545   ;
003404 C1          9546   RESARR:         POP	BC
003405 CB 78       9547                   BIT	7,B		;String array?
003407 E1          9548                   POP	HL
003408 C1          9549                   POP	BC
003409 09          9550                   ADD	HL,BC
00340A 39          9551                   ADD	HL,SP
00340B C4 C5 36    9552                   CALL	NZ,FREESA	;Free string array
00340E F9          9553   RESAR1:         LD	SP,HL
00340F DD 23       9554                   INC	IX		;Flag something restored
003411 18 05       9555                   JR	RESLO1
003413             9556   ;
003413             9557   ; RESLOC - Restore local variables/arrays or DATA/ERROR status from stack
003413             9558   ;   Inputs: A = 0 if everything OK, bit0 set if DATPTR, bit1 set if ERRTRP
003413             9559   ;  Outputs: Z if nothing was restored, NZ if something was restored
003413             9560   ; Destroys: A,B,C,D,E,H,L,H',L',IX,SP,flags
003413             9561   ;
003413 D1          9562   RESLOC:         POP	DE		;Return address
003414 DD 21 00 00 9563                   LD	IX,0		;To flag nothing was restored
003418 C1          9564   RESLO1:         POP	BC		;Marker ?
003419 21 0C 35    9565                   LD	HL,LOCCHK
00341C B7          9566                   OR	A
00341D ED 42       9567                   SBC	HL,BC
00341F 28 1A       9568                   JR	Z,RESLO2	;Something to restore
003421 B7          9569                   OR	A
003422 20 0F       9570                   JR	NZ,RESLO8
003424 21 52 2A    9571                   LD	HL,RETCHK
003427 ED 42       9572                   SBC	HL,BC
003429 28 A0       9573                   JR	Z,RESRET
00342B 21 BE 26    9574                   LD	HL,ARRCHK
00342E B7          9575                   OR	A
00342F ED 42       9576                   SBC	HL,BC
003431 28 D1       9577                   JR	Z,RESARR
003433 DD E5       9578   RESLO8:         PUSH	IX
003435 E1          9579                   POP	HL
003436 7C          9580                   LD	A,H
003437 B5          9581                   OR	L
003438 C5          9582   RESLO0:         PUSH	BC		;Put back marker
003439 EB          9583                   EX	DE,HL
00343A E9          9584                   JP	(HL)		;Return
00343B             9585   ;
00343B DD E1       9586   RESLO2:         POP	IX		;Variable pointer
00343D B7          9587                   OR	A
00343E 28 20       9588                   JR	Z,RESLO3	;Everything allowed
003440 DD E5       9589                   PUSH	IX
003442 C1          9590                   POP	BC
003443 CB 47       9591                   BIT	0,A
003445 28 07       9592                   JR	Z,RESLO6	;Bit 0 set, so
003447 21 F0 54    9593                   LD	HL,DATPTR	;test for DATPTR
00344A ED 42       9594                   SBC	HL,BC
00344C 28 12       9595                   JR	Z,RESLO3
00344E B7          9596   RESLO6:         OR	A
00344F CB 4F       9597                   BIT	1,A
003451 28 07       9598                   JR	Z,RESLO7	;Bit 1 set, so
003453 21 EA 54    9599                   LD	HL,ERRTRP	;test for ERRPTR
003456 ED 42       9600                   SBC	HL,BC
003458 28 06       9601                   JR	Z,RESLO3
00345A C5          9602   RESLO7:         PUSH	BC		;Put back pointer
00345B 01 0C 35    9603                   LD	BC,LOCCHK
00345E 18 D8       9604                   JR	RESLO0
003460             9605   ;
003460 C1          9606   RESLO3:         POP	BC		;Type / exponent
003461 CB 70       9607                   BIT	6,B
003463 20 14       9608                   JR	NZ,RESLO4	;Array?
003465 CB 78       9609                   BIT	7,B
003467 20 23       9610                   JR	NZ,RESLO5	;String?
003469 E1          9611                   POP	HL
00346A D9          9612                   EXX
00346B E1          9613                   POP	HL
00346C D9          9614                   EXX
00346D CB 60       9615                   BIT	4,B
00346F 20 A7       9616                   JR	NZ,RESLO1
003471 F5          9617                   PUSH	AF
003472 78          9618                   LD	A,B
003473 CD D2 31    9619                   CALL	STOREN		;Numeric
003476 F1          9620                   POP	AF
003477 18 9F       9621                   JR	RESLO1
003479             9622   ;
003479 E1          9623   RESLO4:         POP	HL
00347A CB 60       9624                   BIT	4,B
00347C 20 9A       9625                   JR	NZ,RESLO1
00347E DD 75 00    9626                   LD	(IX+0),L	;Array
003481 DD 74 01    9627                   LD	(IX+1),H
003484 18 92       9628                   JR	RESLO1
003486             9629   ;
003486 06 00       9630   RESLO9:         LD	B,0
003488 09          9631                   ADD	HL,BC
003489 F9          9632                   LD	SP,HL
00348A 18 8C       9633   RESLGO:         JR	RESLO1
00348C             9634   ;
00348C 21 00 00    9635   RESLO5:         LD	HL,0
00348F 39          9636                   ADD	HL,SP
003490 CB 60       9637                   BIT	4,B
003492 20 F2       9638                   JR	NZ,RESLO9
003494 F5          9639                   PUSH	AF
003495 D5          9640                   PUSH	DE
003496 59          9641                   LD	E,C
003497 78          9642                   LD	A,B
003498 CD 23 32    9643                   CALL	STORES		;String
00349B D1          9644                   POP	DE
00349C F1          9645                   POP	AF
00349D F9          9646                   LD	SP,HL
00349E 18 EA       9647                   JR	RESLGO
0034A0             9648   ;
0034A0             9649   ;SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
0034A0             9650   ;  OF A FUNCTION OR PROCEDURE.
0034A0             9651   ;THERE IS A LOT OF STACK MANIPULATION - CARE!!
0034A0             9652   ;   Inputs: IY is parameters pointer
0034A0             9653   ;  Outputs: IY updated
0034A0             9654   ;           A' incremented for each RETURN
0034A0             9655   ; Destroys: A',A,B,C,D,E,H,L,IX,IY,F,SP
0034A0             9656   ;
0034A0 D1          9657   SAVLOC:         POP	DE		;RETURN ADDRESS
0034A1 FD 23       9658   SAVLO1:         INC	IY		;BUMP PAST ( | ,
0034A3 CD ED 44    9659                   CALL	NXT
0034A6 FE F8       9660                   CP	TRETURN
0034A8 20 08       9661                   JR	NZ,SAVLO6
0034AA 08          9662                   EX	AF,AF'
0034AB 3C          9663                   INC	A		;RETURN counter
0034AC 08          9664                   EX	AF,AF'
0034AD FD 23       9665                   INC	IY		;Bump past RETURN
0034AF CD ED 44    9666                   CALL	NXT
0034B2 D5          9667   SAVLO6:         PUSH	DE
0034B3 D9          9668                   EXX
0034B4 C5          9669                   PUSH	BC
0034B5 D5          9670                   PUSH	DE
0034B6 E5          9671                   PUSH	HL
0034B7 D9          9672                   EXX
0034B8 CD B8 25    9673                   CALL	VAR_		;DUMMY VARIABLE
0034BB D9          9674                   EXX
0034BC E1          9675                   POP	HL
0034BD D1          9676                   POP	DE
0034BE C1          9677                   POP	BC
0034BF D9          9678                   EXX
0034C0 D1          9679                   POP	DE
0034C1 CB 77       9680                   BIT	6,A		;ARRAY?
0034C3 20 12       9681                   JR	NZ,SAVLO3
0034C5 B7          9682                   OR	A		;TYPE
0034C6 FA E1 34    9683                   JP	M,SAVLO2	;STRING
0034C9 D9          9684                   EXX
0034CA E5          9685                   PUSH	HL		;SAVE H'L'
0034CB D9          9686                   EXX
0034CC 47          9687                   LD	B,A		;TYPE
0034CD CD 07 19    9688                   CALL	LOADN
0034D0 D9          9689                   EXX
0034D1 E3          9690                   EX	(SP),HL
0034D2 D9          9691                   EXX
0034D3 E5          9692                   PUSH	HL
0034D4 C5          9693                   PUSH	BC
0034D5 18 30       9694                   JR	SAVLO4
0034D7             9695   ;
0034D7 DD 4E 00    9696   SAVLO3:         LD	C,(IX+0)	;ARRAY POINTER
0034DA DD 46 01    9697                   LD	B,(IX+1)
0034DD C5          9698                   PUSH	BC		;SAVE TO STACK
0034DE F5          9699                   PUSH	AF		;SAVE TYPE
0034DF 18 26       9700                   JR	SAVLO4
0034E1             9701   ;
0034E1 F5          9702   SAVLO2:         PUSH	AF		;STRING TYPE
0034E2 D5          9703                   PUSH	DE
0034E3 D9          9704                   EXX
0034E4 E5          9705                   PUSH	HL
0034E5 D9          9706                   EXX
0034E6 CD F0 19    9707                   CALL	LOADS
0034E9 D9          9708                   EXX
0034EA E1          9709                   POP	HL
0034EB D9          9710                   EXX
0034EC 4B          9711                   LD	C,E
0034ED D1          9712                   POP	DE
0034EE CD 68 32    9713                   CALL	CHECK
0034F1 F1          9714                   POP	AF		;LEVEL STACK
0034F2 21 00 00    9715                   LD	HL,0
0034F5 45          9716                   LD	B,L
0034F6 ED 42       9717                   SBC	HL,BC
0034F8 39          9718                   ADD	HL,SP
0034F9 F9          9719                   LD	SP,HL
0034FA 47          9720                   LD	B,A		;TYPE
0034FB C5          9721                   PUSH	BC
0034FC 28 09       9722                   JR	Z,SAVLO4
0034FE D5          9723                   PUSH	DE
0034FF 11 00 52    9724                   LD	DE,ACCS
003502 EB          9725                   EX	DE,HL
003503 45          9726                   LD	B,L
003504 ED B0       9727                   LDIR			;SAVE STRING ON STACK
003506 D1          9728                   POP	DE
003507 DD E5       9729   SAVLO4:         PUSH	IX		;VARPTR
003509 CD 0C 35    9730                   CALL	SAVLO5
00350C             9731   LOCCHK:         EQU	$
00350C CD 68 32    9732   SAVLO5:         CALL	CHECK
00350F CD ED 44    9733                   CALL	NXT
003512 FE 2C       9734                   CP	','		;MORE?
003514 28 8B       9735                   JR	Z,SAVLO1
003516 EB          9736                   EX	DE,HL
003517 E9          9737                   JP	(HL)		;"RETURN"
003518             9738   ;
003518 CD ED 44    9739   TERMQ:          CALL	NXT
00351B FE 8B       9740                   CP	TELSE
00351D D0          9741                   RET	NC
00351E FE 3A       9742                   CP	':'		;ASSEMBLER SEPARATOR
003520 D0          9743                   RET	NC
003521 FE 0D       9744                   CP	CR
003523 C9          9745                   RET
003524             9746   ;
003524 CD 18 35    9747   SPAN:           CALL	TERMQ
003527 C8          9748                   RET	Z
003528 FD 23       9749                   INC	IY
00352A FE 22       9750                   CP	'"'
00352C CC 7B 36    9751                   CALL	Z,QUOTE
00352F 18 F3       9752                   JR	SPAN
003531             9753   ;
003531 CD ED 44    9754   EQUALS:         CALL	NXT
003534 FD 23       9755                   INC	IY
003536 FE 3D       9756                   CP	'='
003538 C8          9757                   RET	Z
003539 3E 04       9758                   LD	A,4
00353B C3 26 3F    9759                   JP	ERROR_		;"Mistake"
00353E             9760   ;
00353E FE 8A       9761   FORMAT:         CP	TTAB
003540 28 0C       9762                   JR	Z,DOTAB
003542 FE 89       9763                   CP	TSPC
003544 28 38       9764                   JR	Z,DOSPC
003546             9765                   ; CP	'''
003546 FE 27       9766                   CP	39	; apostrophe
003548 C0          9767                   RET	NZ
003549 CD DD 40    9768                   CALL	CRLF
00354C AF          9769                   XOR	A
00354D C9          9770                   RET
00354E             9771   ;
00354E C5          9772   DOTAB:          PUSH	BC
00354F CD 15 18    9773                   CALL	EXPRI
003552 D9          9774                   EXX
003553 C1          9775                   POP	BC
003554 FD 7E 00    9776                   LD	A,(IY)
003557 FE 2C       9777                   CP	','
003559 28 11       9778                   JR	Z,DOTAB1
00355B CD 90 20    9779                   CALL	BRAKET
00355E 7D          9780                   LD	A,L
00355F 21 FB 54    9781   TABIT:          LD	HL,COUNT
003562 BE          9782                   CP	(HL)
003563 C8          9783                   RET	Z
003564 F5          9784                   PUSH	AF
003565 DC DD 40    9785                   CALL	C,CRLF
003568 F1          9786                   POP	AF
003569 96          9787                   SUB	(HL)
00356A 18 19       9788                   JR	SPACES
00356C FD 23       9789   DOTAB1:         INC	IY
00356E C5          9790                   PUSH	BC
00356F E5          9791                   PUSH	HL
003570 CD 15 18    9792                   CALL	EXPRI
003573 D9          9793                   EXX
003574 D1          9794                   POP	DE
003575 C1          9795                   POP	BC
003576 CD 90 20    9796                   CALL	BRAKET
003579 CD 7E 0D    9797                   CALL	PUTCSR
00357C AF          9798                   XOR	A
00357D C9          9799                   RET
00357E             9800   ;
00357E C5          9801   DOSPC:          PUSH	BC
00357F CD 42 18    9802                   CALL	ITEMI
003582 D9          9803                   EXX
003583 7D          9804                   LD	A,L
003584 C1          9805                   POP	BC
003585 B7          9806   SPACES:         OR	A
003586 C8          9807                   RET	Z
003587 C5          9808                   PUSH	BC
003588 47          9809                   LD	B,A
003589 3E 20       9810   FILL1:          LD	A,' '
00358B CD E4 40    9811                   CALL	OUTCHR
00358E 10 F9       9812                   DJNZ	FILL1
003590 C1          9813                   POP	BC
003591 AF          9814                   XOR	A
003592 C9          9815                   RET
003593             9816   ;
003593 21 00 52    9817   PTEXT:          LD	HL,ACCS
003596 1C          9818                   INC	E
003597 1D          9819   PTEXT1:         DEC	E
003598 C8          9820                   RET	Z
003599 7E          9821                   LD	A,(HL)
00359A 23          9822                   INC	HL
00359B CD E4 40    9823                   CALL	OUTCHR
00359E 18 F7       9824                   JR	PTEXT1
0035A0             9825   ;
0035A0 F5          9826   FETCHS:         PUSH	AF
0035A1 C5          9827                   PUSH	BC
0035A2 E5          9828                   PUSH	HL
0035A3 FD E3       9829                   EX	(SP),IY
0035A5 CD BD 35    9830                   CALL	XTRACT
0035A8 CD ED 44    9831                   CALL	NXT
0035AB FD E3       9832                   EX	(SP),IY
0035AD E1          9833                   POP	HL
0035AE C1          9834                   POP	BC
0035AF F1          9835                   POP	AF
0035B0 C9          9836                   RET
0035B1             9837   ;
0035B1 11 00 52    9838   LINES:          LD	DE,ACCS
0035B4 7E          9839   LINE1S:         LD	A,(HL)
0035B5 12          9840                   LD	(DE),A
0035B6 FE 0D       9841                   CP	CR
0035B8 C8          9842                   RET	Z
0035B9 23          9843                   INC	HL
0035BA 1C          9844                   INC	E
0035BB 18 F7       9845                   JR	LINE1S
0035BD             9846   ;
0035BD CD ED 44    9847   XTRACT:         CALL	NXT
0035C0 FE 22       9848                   CP	'"'
0035C2 FD 23       9849                   INC	IY
0035C4 CA 5C 19    9850                   JP	Z,CONS
0035C7 FD 2B       9851                   DEC	IY
0035C9 11 00 52    9852                   LD	DE,ACCS
0035CC FD 7E 00    9853   XTRAC1:         LD	A,(IY)
0035CF 12          9854                   LD	(DE),A
0035D0 FE 2C       9855                   CP	','
0035D2 C8          9856                   RET	Z
0035D3 FE 0D       9857                   CP	CR
0035D5 C8          9858                   RET	Z
0035D6 FD 23       9859                   INC	IY
0035D8 1C          9860                   INC	E
0035D9 18 F1       9861                   JR	XTRAC1
0035DB             9862   ;
0035DB 3E DC       9863   DSRCH:          LD	A,TDATA
0035DD 06 00       9864   SEARCHex:         LD	B,0
0035DF 4E          9865   SRCH1:          LD	C,(HL)
0035E0 0C          9866                   INC	C
0035E1 0D          9867                   DEC	C
0035E2 28 0C       9868                   JR	Z,SRCH2		;FAIL
0035E4 23          9869                   INC	HL
0035E5 23          9870                   INC	HL
0035E6 23          9871                   INC	HL
0035E7 BE          9872                   CP	(HL)
0035E8 C8          9873                   RET	Z
0035E9 0D          9874                   DEC	C
0035EA 0D          9875                   DEC	C
0035EB 0D          9876                   DEC	C
0035EC 09          9877                   ADD	HL,BC
0035ED C3 DF 35    9878                   JP	SRCH1
0035F0 2B          9879   SRCH2:          DEC	HL		;POINT TO CR
0035F1 37          9880                   SCF
0035F2 C9          9881                   RET
0035F3             9882   ;
0035F3             9883   ; NSCAN - scan for token at start of line, with nesting of inner structures
0035F3             9884   ; Alternative entry at NSCAN1 with L = level (used by CASE)
0035F3             9885   ;
0035F3             9886   ;   Inputs: B = token to find (1, start of line)
0035F3             9887   ;           C = token to find (2, start of line)
0035F3             9888   ;           E = token to nest (end of line)
0035F3             9889   ;           D = token to unnest (start of line)
0035F3             9890   ;           IY = start search area (line length byte)
0035F3             9891   ;  Outputs: NZ if not found
0035F3             9892   ;           Z if found, IY points to byte after token
0035F3             9893   ; Destroys: A,B,C,L,IY,F
0035F3             9894   ;
0035F3 2E 00       9895   NSCAN:          LD	L,0		;nest level
0035F5 FD 7E 00    9896   NSCAN1:         LD	A,(IY)		;get line length
0035F8 B7          9897                   OR	A		;test zero = end of prog
0035F9 28 34       9898                   JR	Z,NSCAN6
0035FB FD 7E 03    9899                   LD	A,(IY+3)	;initial token
0035FE B8          9900                   CP	B		;test value reqd
0035FF 28 1D       9901                   JR	Z,NSCAN3	;found (1)
003601 B9          9902                   CP	C
003602 28 1A       9903                   JR	Z,NSCAN3	;found (2)
003604 BA          9904   NSCAN7:         CP	D		;unnest?
003605 28 22       9905                   JR	Z,NSCAN5
003607 C5          9906   NSCAN2:         PUSH	BC
003608 06 00       9907                   LD	B,0
00360A FD 4E 00    9908                   LD	C,(IY)
00360D FD 09       9909                   ADD	IY,BC		;go to next line
00360F FD 7E FE    9910                   LD	A,(IY-2)
003612 BB          9911                   CP	E		;nest?
003613 79          9912                   LD	A,C
003614 C1          9913                   POP	BC
003615 20 DE       9914                   JR	NZ,NSCAN1	;continue
003617 FE 05       9915                   CP	5		;empty line ?
003619 38 DA       9916                   JR	C,NSCAN1	;continue
00361B 2C          9917                   INC	L		;increment nest level
00361C 18 D7       9918                   JR	NSCAN1		;continue
00361E             9919   ;
00361E 2C          9920   NSCAN3:         INC	L
00361F 2D          9921                   DEC	L
003620 20 E2       9922                   JR	NZ,NSCAN7
003622 01 04 00    9923   NSCAN4:         LD	BC,4
003625 FD 09       9924                   ADD	IY,BC
003627 AF          9925                   XOR	A		;Z
003628 C9          9926                   RET
003629             9927   ;
003629 2D          9928   NSCAN5:         DEC	L		;decrement nest level
00362A F2 07 36    9929                   JP	P,NSCAN2
00362D 18 F3       9930                   JR	NSCAN4
00362F             9931   ;
00362F F6 01       9932   NSCAN6:         OR	1		;NZ
003631 C9          9933                   RET
003632             9934   ;
003632             9935   ; WSRCH - search for token, with nesting of inner structures
003632             9936   ;
003632             9937   ;   Inputs: B = token to find or unnest (anywhere)
003632             9938   ;           C = token to nest (anywhere), ignore after EXITex
003632             9939   ;           D = ordinal (1 = find first token, 2 = second)
003632             9940   ;           IY = address to start looking
003632             9941   ;  Outputs: IY points to byte after that found
003632             9942   ;           if not found abort to END
003632             9943   ; Destroys: A,D,IY,F
003632             9944   ;
003632 FD 7E 00    9945   WSRCH:          LD	A,(IY)
003635 FD 23       9946                   INC	IY
003637 FE 22       9947                   CP	'"'
003639 CC 7B 36    9948                   CALL	Z,QUOTE
00363C FE F4       9949                   CP	TREM
00363E 28 22       9950                   JR	Z,WSRCHM
003640 FE 10       9951                   CP	TEXIT
003642 28 30       9952                   JR	Z,WSRCHE
003644 B8          9953                   CP	B
003645 28 29       9954                   JR	Z,WSRCHX
003647 B9          9955                   CP	C
003648 28 23       9956                   JR	Z,WSRCHP
00364A FE 0D       9957                   CP	CR
00364C 20 E4       9958                   JR	NZ,WSRCH
00364E FD 7E 00    9959   WSRCH1:         LD	A,(IY)			;Line length
003651 FD 23       9960                   INC	IY
003653 B7          9961                   OR	A
003654 CA B5 24    9962                   JP	Z,END
003657 FD 23       9963                   INC	IY
003659 FD 23       9964                   INC	IY			;Skip line number
00365B FD 7E 00    9965                   LD	A,(IY)
00365E FE DC       9966                   CP	TDATA
003660 20 D0       9967                   JR	NZ,WSRCH
003662 FD 7E 00    9968   WSRCHM:         LD	A,(IY)
003665 FD 23       9969                   INC	IY
003667 FE 0D       9970                   CP	CR
003669 20 F7       9971                   JR	NZ,WSRCHM		;Skip to end of line
00366B 18 E1       9972                   JR	WSRCH1
00366D             9973   ;
00366D 14          9974   WSRCHP:         INC	D
00366E 18 C2       9975                   JR	WSRCH
003670             9976   ;
003670 15          9977   WSRCHX:         DEC	D
003671 20 BF       9978                   JR	NZ,WSRCH
003673 C9          9979                   RET
003674             9980   ;
003674 CD ED 44    9981   WSRCHE:         CALL	NXT
003677 FD 23       9982                   INC	IY
003679 18 B7       9983                   JR	WSRCH
00367B             9984   ;
00367B             9985   ; QUOTE - skip quoted string
00367B             9986   ;
00367B FD 7E 00    9987   QUOTE:          LD	A,(IY)
00367E FD 23       9988                   INC	IY
003680 FE 0D       9989                   CP	CR
003682 CA 8A 36    9990                   JP	Z,MISQUO
003685 FE 22       9991                   CP	'"'
003687 20 F2       9992                   JR	NZ,QUOTE
003689 C9          9993                   RET
00368A             9994   ;
00368A 3E 09       9995   MISQUO:         LD	A,9
00368C C3 26 3F    9996                   JP	ERROR_		;"Missing quote"
00368F             9997   ;
00368F             9998   ; X14OR5 - multiply by 1, 4 or 5
00368F             9999   ;   Inputs: DE = number to be multiplied
00368F             10000   ;           A = 1, 4 or 5 (else multiply by 4)
00368F             10001   ;  Outputs: DE = DE * A
00368F             10002   ;           Carry set if overflow
00368F             10003   ; Destroys: D,E,H,L,F
00368F             10004   ;
00368F 62          10005   X14OR5:         LD	H,D
003690 6B          10006                   LD	L,E
003691 FE 01       10007                   CP	1
003693 C8          10008                   RET	Z
003694 FE 05       10009                   CP	5
003696 29          10010                   ADD	HL,HL
003697 D8          10011                   RET	C
003698 29          10012                   ADD	HL,HL
003699 D8          10013                   RET	C
00369A EB          10014                   EX	DE,HL
00369B C0          10015                   RET	NZ
00369C 19          10016                   ADD	HL,DE
00369D EB          10017                   EX	DE,HL
00369E C9          10018                   RET
00369F             10019   ;
00369F             10020   ; MUL16 - 16-bit multiply
00369F             10021   ;   Inputs: HL = number to be multiplied
00369F             10022   ;           BC = multiplier
00369F             10023   ;  Outputs: HL = HL * BC
00369F             10024   ;           Carry set if overflow
00369F             10025   ; Destroys: A,D,E,H,L,F
00369F             10026   ;
00369F EB          10027   MUL16:          EX	DE,HL
0036A0 21 00 00    10028                   LD	HL,0
0036A3 3E 10       10029                   LD	A,16
0036A5 29          10030   MUL161:         ADD	HL,HL
0036A6 D8          10031                   RET	C		;OVERFLOW
0036A7 CB 23       10032                   SLA	E
0036A9 CB 12       10033                   RL	D
0036AB 30 02       10034                   JR	NC,MUL162
0036AD 09          10035                   ADD	HL,BC
0036AE D8          10036                   RET	C
0036AF 3D          10037   MUL162:         DEC	A
0036B0 20 F3       10038                   JR	NZ,MUL161
0036B2 C9          10039                   RET
0036B3             10040   ;
0036B3 CD ED 44    10041   CHANEL:         CALL	NXT
0036B6 FE 23       10042                   CP	'#'
0036B8 3E 2D       10043                   LD	A,45
0036BA C2 26 3F    10044                   JP	NZ,ERROR_	;"Missing #"
0036BD FD 23       10045   CHNL:           INC	IY		;SKIP '#'
0036BF CD 42 18    10046                   CALL	ITEMI
0036C2 D9          10047                   EXX
0036C3 EB          10048                   EX	DE,HL
0036C4 C9          10049                   RET
0036C5             10050   ;
0036C5             10051   ; FREESA - Free members of a string array if adjacent to the top of heap
0036C5             10052   ;   Inputs: BC = length of array (= 4 * number of elements)
0036C5             10053   ;           HL addresses array first byte *above* array
0036C5             10054   ;  Outputs: NZ if any array element freed, Z if none
0036C5             10055   ; Destroys: nothing
0036C5             10056   ;
0036C5 F5          10057   FREESA:         PUSH	AF
0036C6 C5          10058   FREES0:         PUSH	BC
0036C7 D5          10059                   PUSH	DE
0036C8 E5          10060                   PUSH	HL
0036C9 AF          10061                   XOR	A
0036CA 50          10062                   LD	D,B
0036CB 59          10063                   LD	E,C
0036CC 47          10064                   LD	B,A
0036CD D5          10065   FREES1:         PUSH	DE
0036CE 2B          10066                   DEC	HL
0036CF 56          10067                   LD	D,(HL)
0036D0 2B          10068                   DEC	HL
0036D1 5E          10069                   LD	E,(HL)
0036D2 2B          10070                   DEC	HL
0036D3 4E          10071                   LD	C,(HL)
0036D4 2B          10072                   DEC	HL
0036D5 E5          10073                   PUSH	HL
0036D6 2A E0 54    10074                   LD	HL,(FREE)
0036D9 EB          10075                   EX	DE,HL
0036DA 09          10076                   ADD	HL,BC
0036DB ED 52       10077                   SBC	HL,DE
0036DD 20 07       10078                   JR	NZ,FREES2
0036DF 19          10079                   ADD	HL,DE
0036E0 ED 42       10080                   SBC	HL,BC
0036E2 22 E0 54    10081                   LD	(FREE),HL
0036E5 B4          10082                   OR	H
0036E6 D1          10083   FREES2:         POP	DE
0036E7 E1          10084                   POP	HL
0036E8 0E 04       10085                   LD	C,4
0036EA B7          10086                   OR	A
0036EB ED 42       10087                   SBC	HL,BC
0036ED EB          10088                   EX	DE,HL
0036EE 20 DD       10089                   JR	NZ,FREES1
0036F0 B7          10090                   OR	A
0036F1 E1          10091                   POP	HL
0036F2 D1          10092                   POP	DE
0036F3 C1          10093                   POP	BC
0036F4 B7          10094                   OR	A
0036F5 20 CF       10095                   JR	NZ,FREES0
0036F7 F1          10096                   POP	AF
0036F8 C9          10097                   RET
0036F9             10098   ;
0036F9             10099   ;                END
0036F9             10100   ; --- End exec.asm ---
0036F9             10101   
0036F9             10102   ; --- Begin main.asm ---
0036F9             10103   ;
0036F9             10104   ;Automatically created from original source on 2024-12-15 15:29:12
0036F9             10105   ;
0036F9             10106                   .ASSUME ADL = 0
0036F9             10107   ;	.ORG 0x0000
0036F9             10108   ;                SEGMENT CODE
0036F9             10109   ;
0036F9             10110   ;                XDEF	NEWIT
0036F9             10111   ;                XDEF	BAD
0036F9             10112   ;                XDEF	CLEAN
0036F9             10113   ;                XDEF	LINNUM
0036F9             10114   ;                XDEF	ERROR_
0036F9             10115   ;                XDEF	GETTOP
0036F9             10116   ;                XDEF	DEL
0036F9             10117   ;                XDEF	LISTIT
0036F9             10118   ;
0036F9             10119   ;BBC BASIC INTERPRETER - Z80 VERSION
0036F9             10120   ;COMMANDS AND COMMON MODULE - "MAIN"
0036F9             10121   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0036F9             10122   ;
0036F9             10123   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0036F9             10124   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0036F9             10125   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0036F9             10126   ;
0036F9             10127   ;VERSION 2.3, 07-05-1984
0036F9             10128   ;VERSION 3.0, 01-03-1987
0036F9             10129   ;VERSION 5.0, 31-05-2024
0036F9             10130   ;VERSION 5.1, 10-08-2024
0036F9             10131   ;
0036F9             10132   ;                XREF	XEQ
0036F9             10133   ;                XREF	RUN0
0036F9             10134   ;                XREF	CHAIN0
0036F9             10135   ;                XREF	TERMQ
0036F9             10136   ;                XREF	MUL16
0036F9             10137   ;                XREF	X14OR5
0036F9             10138   ;                XREF	SPACES
0036F9             10139   ;                XREF	ESCAPE
0036F9             10140   ;                XREF	CHECK
0036F9             10141   ;                XREF	SEARCH
0036F9             10142   ;
0036F9             10143   ;                XREF	OSWRCH
0036F9             10144   ;                XREF	OSLINE
0036F9             10145   ;                XREF	OSINIT
0036F9             10146   ;                XREF	OSLOAD
0036F9             10147   ;                XREF	OSSAVE
0036F9             10148   ;                XREF	OSBGET
0036F9             10149   ;                XREF	OSBPUT
0036F9             10150   ;                XREF	OSSHUT
0036F9             10151   ;                XREF	OSSTAT
0036F9             10152   ;                XREF	PROMPT
0036F9             10153   ;                XREF	LTRAP
0036F9             10154   ;                XREF	OSCLI
0036F9             10155   ;                XREF	RESET
0036F9             10156   ;
0036F9             10157   ;                XREF	COMMA
0036F9             10158   ;                XREF	BRAKET
0036F9             10159   ;                XREF	ZERO
0036F9             10160   ;                XREF	ITEMI
0036F9             10161   ;                XREF	EXPRI
0036F9             10162   ;                XREF	EXPRS
0036F9             10163   ;                XREF	DECODE
0036F9             10164   ;                XREF	LOADN
0036F9             10165   ;                XREF	SFIX
0036F9             10166   ;
0036F9             10167   ;                XDEF	NXT
0036F9             10168   ;                XDEF	NLIST
0036F9             10169   ;                XDEF	START
0036F9             10170   ;                XDEF	OUTCHR
0036F9             10171   ;                XDEF	OUT
0036F9             10172   ;                XDEF	ERROR_
0036F9             10173   ;                XDEF	EXTERR
0036F9             10174   ;                XDEF	REPORT
0036F9             10175   ;                XDEF	CLOOP
0036F9             10176   ;                XDEF	WARM
0036F9             10177   ;                XDEF	CLEAR
0036F9             10178   ;                XDEF	CRLF
0036F9             10179   ;                XDEF	SAYLN
0036F9             10180   ;                XDEF	LOAD0
0036F9             10181   ;                XDEF	TELL
0036F9             10182   ;                XDEF	FINDL
0036F9             10183   ;                XDEF	GETTOP
0036F9             10184   ;                XDEF	SETLIN
0036F9             10185   ;                XDEF	GETVAR
0036F9             10186   ;                XDEF	PUTVAR
0036F9             10187   ;                XDEF	GETDEF
0036F9             10188   ;                XDEF	LOCATE
0036F9             10189   ;                XDEF	CREATE
0036F9             10190   ;                XDEF	PBCDL
0036F9             10191   ;                XDEF	LEXAN2
0036F9             10192   ;                XDEF	RANGE
0036F9             10193   ;                XDEF	VERMSG
0036F9             10194   ;                XDEF	KEYWDS
0036F9             10195   ;                XDEF	KEYWDL
0036F9             10196   ;
0036F9             10197   ;                XREF	PAGE_
0036F9             10198   ;                XREF	ACCS
0036F9             10199   ;                XREF	BUFFER
0036F9             10200   ;                XREF	LOMEM
0036F9             10201   ;                XREF	HIMEM
0036F9             10202   ;                XREF	COUNT
0036F9             10203   ;                XREF	WIDTH
0036F9             10204   ;                XREF	FREE
0036F9             10205   ;                XREF	STAVAR
0036F9             10206   ;                XREF	DYNVAR
0036F9             10207   ;                XREF	ERRTXT
0036F9             10208   ;                XREF	ERR
0036F9             10209   ;                XREF	ERL
0036F9             10210   ;                XREF	CURLIN
0036F9             10211   ;                XREF	ERRTRP
0036F9             10212   ;                XREF	ONERSP
0036F9             10213   ;                XREF	FNPTR
0036F9             10214   ;                XREF	PROPTR
0036F9             10215   ;                XREF	AUTONO
0036F9             10216   ;                XREF	INCREM
0036F9             10217   ;                XREF	LISTON
0036F9             10218   ;                XREF	TRACEN
0036F9             10219   ;
0036F9             10220   ; CR             EQU	0DH
0036F9             10221   ; LF             EQU	0AH
0036F9             10222   ; ESC            EQU	1BH
0036F9             10223   ;
0036F9             10224   TERROR:         EQU	85H
0036F9             10225   TLINE:          EQU	86H
0036F9             10226   TELSE:          EQU	8BH
0036F9             10227   TTHEN:          EQU	8CH
0036F9             10228   TLINO:          EQU	8DH
0036F9             10229   TFN:            EQU	0A4H
0036F9             10230   TTO:            EQU	0B8H
0036F9             10231   TWHILE:         EQU	0C7H
0036F9             10232   TCASE:          EQU	0C8H
0036F9             10233   TWHEN:          EQU	0C9H
0036F9             10234   TOF:            EQU	0CAH
0036F9             10235   TENDCASE:       EQU	0CBH
0036F9             10236   TOTHERWISE:     EQU	0CCH
0036F9             10237   TENDIF:         EQU	0CDH
0036F9             10238   TENDWHILE:      EQU	0CEH
0036F9             10239   TDATA:          EQU	0DCH
0036F9             10240   TDIM:           EQU	0DEH
0036F9             10241   TFOR:           EQU	0E3H
0036F9             10242   TGOSUB:         EQU	0E4H
0036F9             10243   TGOTO:          EQU	0E5H
0036F9             10244   TIF:            EQU	0E7H
0036F9             10245   TLOCAL:         EQU	0EAH
0036F9             10246   TNEXT:          EQU	0EDH
0036F9             10247   TON:            EQU	0EEH
0036F9             10248   TPROC:          EQU	0F2H
0036F9             10249   TREM:           EQU	0F4H
0036F9             10250   TREPEAT:        EQU	0F5H
0036F9             10251   TRESTORE:       EQU	0F7H
0036F9             10252   TTRACE:         EQU	0FCH
0036F9             10253   TUNTIL:         EQU	0FDH
0036F9             10254   TEXIT:          EQU	10H
0036F9             10255   ;
0036F9             10256   TOKLO:          EQU	8FH
0036F9             10257   TOKHI:          EQU	93H
0036F9             10258   OFFSET:         EQU	0CFH-TOKLO
0036F9             10259   ;
0036F9 C3 23 37    10260   START:          JP	COLD
0036FC C3 91 37    10261                   JP	WARM
0036FF C3 C5 25    10262                   JP	ESCAPE
003702 C3 37 3F    10263                   JP	EXTERR
003705 C3 DC 44    10264                   JP	TELL
003708 C3 CA 44    10265                   JP	TEXT_
00370B C3 42 18    10266                   JP	ITEMI
00370E C3 15 18    10267                   JP	EXPRI
003711 C3 1E 18    10268                   JP	EXPRS
003714 C3 95 09    10269                   JP	OSCLI
003717 C3 3D 06    10270                   JP	OSBGET
00371A C3 45 06    10271                   JP	OSBPUT
00371D C3 4E 06    10272                   JP	OSSTAT
003720 C3 35 06    10273                   JP	OSSHUT
003723 21 00 54    10274   COLD:           LD	HL,STAVAR	;COLD START
003726 F9          10275                   LD	SP,HL
003727 36 0A       10276                   LD	(HL),10
003729 2C          10277                   INC	L
00372A 36 09       10278                   LD	(HL),9
00372C 2C          10279                   INC	L
00372D AF          10280                   XOR	A
00372E 77          10281   PURGE:          LD	(HL),A		;CLEAR SCRATCHPAD
00372F 2C          10282                   INC	L
003730 20 FC       10283                   JR	NZ,PURGE
003732 3E 37       10284                   LD	A,37H		;V3.0
003734 32 FE 54    10285                   LD	(LISTON),A
003737 21 70 37    10286                   LD	HL,NOTICE
00373A 22 EE 54    10287                   LD	(ERRTXT),HL
00373D CD 82 05    10288                   CALL	OSINIT
003740 ED 53 E2 54 10289                   LD	(HIMEM),DE
003744 22 DC 54    10290                   LD	(PAGE_),HL
003747 CD 20 40    10291                   CALL	NEWIT
00374A C2 34 24    10292                   JP	NZ,CHAIN0	;AUTO-RUN
00374D CD DC 44    10293                   CALL	TELL
003750 42 42 43 20 10294   VERMSG:         DB	"BBC BASIC (Z80) Version 5.00  "
       42 41 53 49 
       43 20 28 5A 
       38 30 29 20 
       56 65 72 73 
       69 6F 6E 20 
       35 2E 30 30 
       20 20       
00376E 0D          10295                   DB	CR
00376F 0A          10296                   DB	LF
003770 28 43 29 20 10297   NOTICE:         DB	"(C) Copyright R.T.Russell 2024"
       43 6F 70 79 
       72 69 67 68 
       74 20 52 2E 
       54 2E 52 75 
       73 73 65 6C 
       6C 20 32 30 
       32 34       
00378E 0D          10298                   DB	CR
00378F 0A          10299                   DB	LF
003790 00          10300                   DB	0
003791 F6          10301   WARM:           DB	0F6H
003792 37          10302   CLOOP:          SCF
003793 ED 7B E2 54 10303                   LD	SP,(HIMEM)
003797 CD 91 05    10304                   CALL	PROMPT		;PROMPT USER
00379A 21 FE 54    10305                   LD	HL,LISTON
00379D 7E          10306                   LD	A,(HL)
00379E E6 0F       10307                   AND	0FH		;LISTO
0037A0 F6 30       10308                   OR	30H		;OPT 3
0037A2 77          10309                   LD	(HL),A
0037A3 ED 62       10310                   SBC	HL,HL		;HL <- 0 (V3.0)
0037A5 22 EA 54    10311                   LD	(ERRTRP),HL
0037A8 22 EC 54    10312                   LD	(ONERSP),HL
0037AB 22 F4 54    10313                   LD	(CURLIN),HL	;For CMOS EDIT->LIST
0037AE 2A E8 54    10314                   LD	HL,(AUTONO)
0037B1 E5          10315                   PUSH	HL
0037B2 7C          10316                   LD	A,H
0037B3 B5          10317                   OR	L
0037B4 28 17       10318                   JR	Z,NOAUTO
0037B6 E5          10319                   PUSH	HL
0037B7 CD 78 41    10320                   CALL	PBCD		;AUTO NUMBER
0037BA E1          10321                   POP	HL
0037BB ED 4B FF 54 10322                   LD	BC,(INCREM)
0037BF 06 00       10323                   LD	B,0
0037C1 09          10324                   ADD	HL,BC
0037C2 DA 91 43    10325                   JP	C,TOOBIGmn
0037C5 22 E8 54    10326                   LD	(AUTONO),HL
0037C8 3E 20       10327                   LD	A,' '
0037CA CD E4 40    10328                   CALL	OUTCHR
0037CD 21 00 52    10329   NOAUTO:         LD	HL,ACCS
0037D0 CD C9 05    10330                   CALL	OSLINE		;GET CONSOLE INPUT
0037D3 AF          10331                   XOR	A
0037D4 32 FB 54    10332                   LD	(COUNT),A
0037D7 FD 21 00 52 10333                   LD	IY,ACCS
0037DB 21 C3 3B    10334                   LD	HL,COMNDS
0037DE CD 88 3F    10335                   CALL	LEX0
0037E1 E1          10336                   POP	HL
0037E2 20 19       10337                   JR	NZ,NOTCMD
0037E4 87          10338                   ADD	A,A
0037E5 4F          10339                   LD	C,A
0037E6 7C          10340                   LD	A,H
0037E7 B5          10341                   OR	L
0037E8 20 0F       10342                   JR	NZ,INAUTO
0037EA 47          10343                   LD	B,A
0037EB 21 F3 3B    10344                   LD	HL,CMDTABmn
0037EE 09          10345                   ADD	HL,BC
0037EF 7E          10346                   LD	A,(HL)		;TABLE ENTRY
0037F0 23          10347                   INC	HL
0037F1 66          10348                   LD	H,(HL)
0037F2 6F          10349                   LD	L,A
0037F3 FD 23       10350                   INC	IY
0037F5 CD ED 44    10351                   CALL	NXT
0037F8 E9          10352                   JP	(HL)		;EXECUTE COMMAND
0037F9             10353   ;
0037F9 FD 21 00 52 10354   INAUTO:         LD	IY,ACCS
0037FD 7C          10355   NOTCMD:         LD	A,H
0037FE B5          10356                   OR	L
0037FF CC 6C 43    10357                   CALL	Z,LINNUM
003802 CD ED 44    10358                   CALL	NXT
003805 11 00 53    10359                   LD	DE,BUFFER
003808 0E 01       10360                   LD	C,1		;LEFT MODE
00380A E5          10361                   PUSH	HL
00380B CD FA 43    10362                   CALL	LEXAN2		;LEXICAL ANALYSIS
00380E E1          10363                   POP	HL
00380F 12          10364                   LD	(DE),A		;TERMINATOR
003810 AF          10365                   XOR	A
003811 47          10366                   LD	B,A
003812 4B          10367                   LD	C,E		;BC=LINE LENGTH
003813 13          10368                   INC	DE
003814 12          10369                   LD	(DE),A		;ZERO NEXT
003815 7C          10370                   LD	A,H
003816 B5          10371                   OR	L
003817 FD 21 00 53 10372                   LD	IY,BUFFER	;FOR XEQ
00381B CA 7B 24    10373                   JP	Z,XEQ		;DIRECT MODE
00381E C5          10374                   PUSH	BC
00381F CD 25 41    10375                   CALL	FINDL
003822 CC CB 3F    10376                   CALL	Z,DEL
003825 C1          10377                   POP	BC
003826 79          10378                   LD	A,C
003827 B7          10379                   OR	A
003828 28 39       10380                   JR	Z,CLOOP2	;DELETE LINE ONLY
00382A C6 04       10381                   ADD	A,4
00382C 4F          10382                   LD	C,A		;LENGTH INCLUSIVE
00382D D5          10383                   PUSH	DE		;LINE NUMBER
00382E C5          10384                   PUSH	BC		;SAVE LINE LENGTH
00382F EB          10385                   EX	DE,HL
003830 C5          10386                   PUSH	BC
003831 CD 07 40    10387                   CALL	GETTOP
003834 C1          10388                   POP	BC
003835 E5          10389                   PUSH	HL
003836 09          10390                   ADD	HL,BC
003837 E5          10391                   PUSH	HL
003838 24          10392                   INC	H
003839 AF          10393                   XOR	A
00383A ED 72       10394                   SBC	HL,SP
00383C E1          10395                   POP	HL
00383D D2 26 3F    10396                   JP	NC,ERROR_	;"No room"
003840 E3          10397                   EX	(SP),HL
003841 E5          10398                   PUSH	HL
003842 23          10399                   INC	HL
003843 B7          10400                   OR	A
003844 ED 52       10401                   SBC	HL,DE
003846 44          10402                   LD	B,H		;BC=AMOUNT TO MOVE
003847 4D          10403                   LD	C,L
003848 E1          10404                   POP	HL
003849 D1          10405                   POP	DE
00384A 28 02       10406                   JR	Z,ATEND
00384C ED B8       10407                   LDDR			;MAKE SPACE
00384E C1          10408   ATEND:          POP	BC		;LINE LENGTH
00384F D1          10409                   POP	DE		;LINE NUMBER
003850 23          10410                   INC	HL
003851 71          10411                   LD	(HL),C		;STORE LENGTH
003852 23          10412                   INC	HL
003853 73          10413                   LD	(HL),E		;STORE LINE NUMBER
003854 23          10414                   INC	HL
003855 72          10415                   LD	(HL),D
003856 23          10416                   INC	HL
003857 11 00 53    10417                   LD	DE,BUFFER
00385A EB          10418                   EX	DE,HL
00385B 0D          10419                   DEC	C
00385C 0D          10420                   DEC	C
00385D 0D          10421                   DEC	C
00385E ED B0       10422                   LDIR			;ADD LINE
003860 CD FC 3F    10423                   CALL	CLEAN
003863 C3 92 37    10424   CLOOP2:         JP	CLOOP
003866             10425   ;
003866             10426   ;LIST OF TOKENS AND KEYWORDS.
003866             10427   ;IF A KEYWORD IS FOLLOWED BY NUL THEN IT WILL
003866             10428   ; ONLY MATCH WITH THE WORD FOLLOWED IMMEDIATELY
003866             10429   ; BY A DELIMITER.
003866             10430   ;
003866 80          10431   KEYWDS:         DB	80H
003867 41 4E 44    10432                   DB	"AND"
00386A 94          10433                   DB	94H
00386B 41 42 53    10434                   DB	"ABS"
00386E 95          10435                   DB	95H
00386F 41 43 53    10436                   DB	"ACS"
003872 96          10437                   DB	96H
003873 41 44 56 41 10438                   DB	"ADVAL"
       4C          
003878 97          10439                   DB	97H
003879 41 53 43    10440                   DB	"ASC"
00387C 98          10441                   DB	98H
00387D 41 53 4E    10442                   DB	"ASN"
003880 99          10443                   DB	99H
003881 41 54 4E    10444                   DB	"ATN"
003884 9A          10445                   DB	9AH
003885 42 47 45 54 10446                   DB	"BGET "
       20          
00388A D5          10447                   DB	0D5H
00388B 42 50 55 54 10448                   DB	"BPUT "
       20          
003890 0F          10449                   DB	0FH
003891 42 59 20    10450                   DB	"BY "		; v5
003894 FB          10451                   DB	0FBH
003895 43 4F 4C 4F 10452                   DB	"COLOUR"
       55 52       
00389B FB          10453                   DB	0FBH
00389C 43 4F 4C 4F 10454                   DB	"COLOR"
       52          
0038A1 D6          10455                   DB	0D6H
0038A2 43 41 4C 4C 10456                   DB	"CALL"
0038A6 C8          10457                   DB	0C8H
0038A7 43 41 53 45 10458                   DB	"CASE"		; v5
0038AB D7          10459                   DB	0D7H
0038AC 43 48 41 49 10460                   DB	"CHAIN"
       4E          
0038B1 BD          10461                   DB	0BDH
0038B2 43 48 52 24 10462                   DB	"CHR$"
0038B6 D8          10463                   DB	0D8H
0038B7 43 4C 45 41 10464                   DB	"CLEAR "
       52 20       
0038BD D9          10465                   DB	0D9H
0038BE 43 4C 4F 53 10466                   DB	"CLOSE "
       45 20       
0038C4 DA          10467                   DB	0DAH
0038C5 43 4C 47 20 10468                   DB	"CLG "
0038C9 DB          10469                   DB	0DBH
0038CA 43 4C 53 20 10470                   DB	"CLS "
0038CE 9B          10471                   DB	9BH
0038CF 43 4F 53    10472                   DB	"COS"
0038D2 9C          10473                   DB	9CH
0038D3 43 4F 55 4E 10474                   DB	"COUNT "
       54 20       
0038D9 01          10475                   DB	01H
0038DA 43 49 52 43 10476                   DB	"CIRCLE"	; v5
       4C 45       
0038E0 DC          10477                   DB	0DCH
0038E1 44 41 54 41 10478                   DB	"DATA"
0038E5 9D          10479                   DB	9DH
0038E6 44 45 47    10480                   DB	"DEG"
0038E9 DD          10481                   DB	0DDH
0038EA 44 45 46    10482                   DB	"DEF"
0038ED 81          10483                   DB	81H
0038EE 44 49 56    10484                   DB	"DIV"
0038F1 DE          10485                   DB	0DEH
0038F2 44 49 4D    10486                   DB	"DIM"
0038F5 DF          10487                   DB	0DFH
0038F6 44 52 41 57 10488                   DB	"DRAW"
0038FA E1          10489                   DB	0E1H
0038FB 45 4E 44 50 10490                   DB	"ENDPROC "
       52 4F 43 20 
003903 CE          10491                   DB	0CEH
003904 45 4E 44 57 10492                   DB	"ENDWHILE "	; v5
       48 49 4C 45 
       20          
00390D CB          10493                   DB	0CBH
00390E 45 4E 44 43 10494                   DB	"ENDCASE "	; v5
       41 53 45 20 
003916 CD          10495                   DB	0CDH
003917 45 4E 44 49 10496                   DB	"ENDIF "	; v5
       46 20       
00391D E0          10497                   DB	0E0H
00391E 45 4E 44 20 10498                   DB	"END "
003922 E2          10499                   DB	0E2H
003923 45 4E 56 45 10500                   DB	"ENVELOPE"
       4C 4F 50 45 
00392B 8B          10501                   DB	8BH
00392C 45 4C 53 45 10502                   DB	"ELSE"
003930 A0          10503                   DB	0A0H
003931 45 56 41 4C 10504                   DB	"EVAL"
003935 9E          10505                   DB	9EH
003936 45 52 4C 20 10506                   DB	"ERL "
00393A 85          10507                   DB	85H
00393B 45 52 52 4F 10508                   DB	"ERROR"
       52          
003940 C5          10509                   DB	0C5H
003941 45 4F 46 20 10510                   DB	"EOF "
003945 82          10511                   DB	82H
003946 45 4F 52    10512                   DB	"EOR"
003949 9F          10513                   DB	9FH
00394A 45 52 52 20 10514                   DB	"ERR "
00394E 10          10515                   DB	10H
00394F 45 58 49 54 10516                   DB	"EXIT "		; v5
       20          
003954 A1          10517                   DB	0A1H
003955 45 58 50    10518                   DB	"EXP"
003958 A2          10519                   DB	0A2H
003959 45 58 54 20 10520                   DB	"EXT "
00395D 02          10521                   DB	02H
00395E 45 4C 4C 49 10522                   DB	"ELLIPSE"	; v5
       50 53 45    
003965 E3          10523                   DB	0E3H
003966 46 4F 52    10524                   DB	"FOR"
003969 A3          10525                   DB	0A3H
00396A 46 41 4C 53 10526                   DB	"FALSE "
       45 20       
003970 03          10527                   DB	03H
003971 46 49 4C 4C 10528                   DB	"FILL"		; v5
003975 A4          10529                   DB	0A4H
003976 46 4E       10530                   DB	"FN"
003978 E5          10531                   DB	0E5H
003979 47 4F 54 4F 10532                   DB	"GOTO"
00397D BE          10533                   DB	0BEH
00397E 47 45 54 24 10534                   DB	"GET$"
003982 A5          10535                   DB	0A5H
003983 47 45 54    10536                   DB	"GET"
003986 E4          10537                   DB	0E4H
003987 47 4F 53 55 10538                   DB	"GOSUB"
       42          
00398C E6          10539                   DB	0E6H
00398D 47 43 4F 4C 10540                   DB	"GCOL"
003991 93          10541                   DB	93H
003992 48 49 4D 45 10542                   DB	"HIMEM "
       4D 20       
003998 E8          10543                   DB	0E8H
003999 49 4E 50 55 10544                   DB	"INPUT"
       54          
00399E E7          10545                   DB	0E7H
00399F 49 46       10546                   DB	"IF"
0039A1 BF          10547                   DB	0BFH
0039A2 49 4E 4B 45 10548                   DB	"INKEY$"
       59 24       
0039A8 A6          10549                   DB	0A6H
0039A9 49 4E 4B 45 10550                   DB	"INKEY"
       59          
0039AE A8          10551                   DB	0A8H
0039AF 49 4E 54    10552                   DB	"INT"
0039B2 A7          10553                   DB	0A7H
0039B3 49 4E 53 54 10554                   DB	"INSTR("
       52 28       
0039B9 0C          10555                   DB	0CH
0039BA 49 4E 53 54 10556                   DB	"INSTALL"	; v5
       41 4C 4C    
0039C1 86          10557                   DB	86H
0039C2 4C 49 4E 45 10558                   DB	"LINE"
0039C6 92          10559                   DB	92H
0039C7 4C 4F 4D 45 10560                   DB	"LOMEM "
       4D 20       
0039CD EA          10561                   DB	0EAH
0039CE 4C 4F 43 41 10562                   DB	"LOCAL"
       4C          
0039D3 C0          10563                   DB	0C0H
0039D4 4C 45 46 54 10564                   DB	"LEFT$("
       24 28       
0039DA A9          10565                   DB	0A9H
0039DB 4C 45 4E    10566                   DB	"LEN"
0039DE E9          10567                   DB	0E9H
0039DF 4C 45 54    10568                   DB	"LET"
0039E2 AB          10569                   DB	0ABH
0039E3 4C 4F 47    10570                   DB	"LOG"
0039E6 AA          10571                   DB	0AAH
0039E7 4C 4E       10572                   DB	"LN"
0039E9 C1          10573                   DB	0C1H
0039EA 4D 49 44 24 10574                   DB	"MID$("
       28          
0039EF EB          10575                   DB	0EBH
0039F0 4D 4F 44 45 10576                   DB	"MODE"
0039F4 83          10577                   DB	83H
0039F5 4D 4F 44    10578                   DB	"MOD"
0039F8 EC          10579                   DB	0ECH
0039F9 4D 4F 56 45 10580                   DB	"MOVE"
0039FD 04          10581                   DB	04H
0039FE 4D 4F 55 53 10582                   DB	"MOUSE"		; v5
       45          
003A03 ED          10583                   DB	0EDH
003A04 4E 45 58 54 10584                   DB	"NEXT"
003A08 AC          10585                   DB	0ACH
003A09 4E 4F 54    10586                   DB	"NOT"
003A0C EE          10587                   DB	0EEH
003A0D 4F 4E       10588                   DB	"ON"
003A0F 87          10589                   DB	87H
003A10 4F 46 46 20 10590                   DB	"OFF "
003A14 CA          10591                   DB	0CAH
003A15 4F 46 20    10592                   DB	"OF "		; v5
003A18 05          10593                   DB	05H
003A19 4F 52 49 47 10594                   DB	"ORIGIN"	; v5
       49 4E       
003A1F 84          10595                   DB	84H
003A20 4F 52       10596                   DB	"OR"
003A22 8E          10597                   DB	8EH
003A23 4F 50 45 4E 10598                   DB	"OPENIN"
       49 4E       
003A29 AE          10599                   DB	0AEH
003A2A 4F 50 45 4E 10600                   DB	"OPENOUT"
       4F 55 54    
003A31 AD          10601                   DB	0ADH
003A32 4F 50 45 4E 10602                   DB	"OPENUP"
       55 50       
003A38 FF          10603                   DB	0FFH
003A39 4F 53 43 4C 10604                   DB	"OSCLI"
       49          
003A3E CC          10605                   DB	0CCH
003A3F 4F 54 48 45 10606                   DB	"OTHERWISE"	; v5
       52 57 49 53 
       45          
003A48 F1          10607                   DB	0F1H
003A49 50 52 49 4E 10608                   DB	"PRINT"
       54          
003A4E 90          10609                   DB	90H
003A4F 50 41 47 45 10610                   DB	"PAGE "
       20          
003A54 8F          10611                   DB	8FH
003A55 50 54 52 20 10612                   DB	"PTR "
003A59 AF          10613                   DB	0AFH
003A5A 50 49 20    10614                   DB	"PI "
003A5D F0          10615                   DB	0F0H
003A5E 50 4C 4F 54 10616                   DB	"PLOT"
003A62 B0          10617                   DB	0B0H
003A63 50 4F 49 4E 10618                   DB	"POINT("
       54 28       
003A69 F2          10619                   DB	0F2H
003A6A 50 52 4F 43 10620                   DB	"PROC"
003A6E B1          10621                   DB	0B1H
003A6F 50 4F 53 20 10622                   DB	"POS "
003A73 0E          10623                   DB	0EH
003A74 50 55 54    10624                   DB	"PUT"		; Token changed
003A77 06          10625                   DB	06H
003A78 51 55 49 54 10626                   DB	"QUIT "		; v5
       20          
003A7D F8          10627                   DB	0F8H
003A7E 52 45 54 55 10628                   DB	"RETURN "
       52 4E 20    
003A85 F5          10629                   DB	0F5H
003A86 52 45 50 45 10630                   DB	"REPEAT"
       41 54       
003A8C F6          10631                   DB	0F6H
003A8D 52 45 50 4F 10632                   DB	"REPORT "
       52 54 20    
003A94 F3          10633                   DB	0F3H
003A95 52 45 41 44 10634                   DB	"READ"
003A99 F4          10635                   DB	0F4H
003A9A 52 45 4D    10636                   DB	"REM"
003A9D F9          10637                   DB	0F9H
003A9E 52 55 4E 20 10638                   DB	"RUN "
003AA2 B2          10639                   DB	0B2H
003AA3 52 41 44    10640                   DB	"RAD"
003AA6 F7          10641                   DB	0F7H
003AA7 52 45 53 54 10642                   DB	"RESTORE"
       4F 52 45    
003AAE C2          10643                   DB	0C2H
003AAF 52 49 47 48 10644                   DB	"RIGHT$("
       54 24 28    
003AB6 B3          10645                   DB	0B3H
003AB7 52 4E 44 20 10646                   DB	"RND "
003ABB 07          10647                   DB	07H
003ABC 52 45 43 54 10648                   DB	"RECTANGLE"	; v5
       41 4E 47 4C 
       45          
003AC5 88          10649                   DB	88H
003AC6 53 54 45 50 10650                   DB	"STEP"
003ACA B4          10651                   DB	0B4H
003ACB 53 47 4E    10652                   DB	"SGN"
003ACE B5          10653                   DB	0B5H
003ACF 53 49 4E    10654                   DB	"SIN"
003AD2 B6          10655                   DB	0B6H
003AD3 53 51 52    10656                   DB	"SQR"
003AD6 89          10657                   DB	89H
003AD7 53 50 43    10658                   DB	"SPC"
003ADA C3          10659                   DB	0C3H
003ADB 53 54 52 24 10660                   DB	"STR$"
003ADF C4          10661                   DB	0C4H
003AE0 53 54 52 49 10662                   DB	"STRING$("
       4E 47 24 28 
003AE8 D4          10663                   DB	0D4H
003AE9 53 4F 55 4E 10664                   DB	"SOUND"
       44          
003AEE FA          10665                   DB	0FAH
003AEF 53 54 4F 50 10666                   DB	"STOP "
       20          
003AF4 C6          10667                   DB	0C6H
003AF5 53 55 4D    10668                   DB	"SUM"		; v5
003AF8 08          10669                   DB	08H
003AF9 53 57 41 50 10670                   DB	"SWAP"		; v5
003AFD 09          10671                   DB	09H
003AFE 53 59 53    10672                   DB	"SYS"		; v5
003B01 B7          10673                   DB	0B7H
003B02 54 41 4E    10674                   DB	"TAN"
003B05 8A          10675                   DB	8AH
003B06 54 41 42 28 10676                   DB	"TAB("
003B0A 8C          10677                   DB	8CH
003B0B 54 48 45 4E 10678                   DB	"THEN"
003B0F 91          10679                   DB	91H
003B10 54 49 4D 45 10680                   DB	"TIME "
       20          
003B15 0A          10681                   DB	0AH
003B16 54 49 4E 54 10682                   DB	"TINT"
003B1A B8          10683                   DB	0B8H
003B1B 54 4F       10684                   DB	"TO"
003B1D FC          10685                   DB	0FCH
003B1E 54 52 41 43 10686                   DB	"TRACE"
       45          
003B23 B9          10687                   DB	0B9H
003B24 54 52 55 45 10688                   DB	"TRUE "
       20          
003B29 FD          10689                   DB	0FDH
003B2A 55 4E 54 49 10690                   DB	"UNTIL"
       4C          
003B2F BA          10691                   DB	0BAH
003B30 55 53 52    10692                   DB	"USR"
003B33 EF          10693                   DB	0EFH
003B34 56 44 55    10694                   DB	"VDU"
003B37 BB          10695                   DB	0BBH
003B38 56 41 4C    10696                   DB	"VAL"
003B3B BC          10697                   DB	0BCH
003B3C 56 50 4F 53 10698                   DB	"VPOS "
       20          
003B41 C7          10699                   DB	0C7H
003B42 57 48 49 4C 10700                   DB	"WHILE"		; v5
       45          
003B47 C9          10701                   DB	0C9H
003B48 57 48 45 4E 10702                   DB	"WHEN"		; v5
003B4C 0B          10703                   DB	0BH
003B4D 57 41 49 54 10704                   DB	"WAIT "		; v5
       20          
003B52 FE          10705                   DB	0FEH
003B53 57 49 44 54 10706                   DB	"WIDTH"
       48          
003B58             10707   ;'LEFT' TOKENS:
003B58 CF          10708                   DB	0CFH
003B59 50 54 52    10709                   DB	"PTR"
003B5C D1          10710                   DB	0D1H
003B5D 54 49 4D 45 10711                   DB	"TIME"
003B61 D3          10712                   DB	0D3H
003B62 48 49 4D 45 10713                   DB	"HIMEM"
       4D          
003B67 D2          10714                   DB	0D2H
003B68 4C 4F 4D 45 10715                   DB	"LOMEM"
       4D          
003B6D D0          10716                   DB	0D0H
003B6E 50 41 47 45 10717                   DB	"PAGE"
003B72             10718   ;
003B72 11          10719                   DB	11H
003B73 4D 69 73 73 10720                   DB	"Missing "
       69 6E 67 20 
003B7B 12          10721                   DB	12H
003B7C 4E 6F 20 73 10722                   DB	"No such "
       75 63 68 20 
003B84 13          10723                   DB	13H
003B85 42 61 64 20 10724                   DB	"Bad "
003B89 14          10725                   DB	14H
003B8A 20 72 61 6E 10726                   DB	" range"
       67 65       
003B90 15          10727                   DB	15H
003B91 76 61 72 69 10728                   DB	"variable"
       61 62 6C 65 
003B99 16          10729                   DB	16H
003B9A 4F 75 74 20 10730                   DB	"Out of"
       6F 66       
003BA0 17          10731                   DB	17H
003BA1 4E 6F 20    10732                   DB	"No "
003BA4 18          10733                   DB	18H
003BA5 20 73 70 61 10734                   DB	" space"
       63 65       
003BAB 19          10735                   DB	19H
003BAC 4E 6F 74 20 10736                   DB	"Not in a "
       69 6E 20 61 
       20          
003BB5 1A          10737                   DB	1AH
003BB6 20 6C 6F 6F 10738                   DB	" loop"
       70          
003BBB 1B          10739                   DB	1BH
003BBC 20 6E 6F 74 10740                   DB	" not "
       20          
003BC1             10741   KEYWDL:         EQU	$-KEYWDS
003BC1 FF FF       10742                   DW	-1
003BC3             10743   ;
003BC3             10744   ;LIST OF IMMEDIATE MODE COMMANDS:
003BC3             10745   ;
003BC3 80          10746   COMNDS:         DB	80H
003BC4 41 55 54 4F 10747                   DB	"AUTO"
003BC8 81          10748                   DB	81H
003BC9 44 45 4C 45 10749                   DB	"DELETE"
       54 45       
003BCF 82          10750                   DB	82H
003BD0 4C 49 53 54 10751                   DB	"LIST"
003BD4 83          10752                   DB	83H
003BD5 4C 4F 41 44 10753                   DB	"LOAD"
003BD9 84          10754                   DB	84H
003BDA 4E 45 57 20 10755                   DB	"NEW "
003BDE 85          10756                   DB	85H
003BDF 4F 4C 44 20 10757                   DB	"OLD "
003BE3 86          10758                   DB	86H
003BE4 52 45 4E 55 10759                   DB	"RENUMBER"
       4D 42 45 52 
003BEC 87          10760                   DB	87H
003BED 53 41 56 45 10761                   DB	"SAVE"
003BF1 FF FF       10762                   DW	-1
003BF3             10763   ;
003BF3             10764   ;IMMEDIATE MODE COMMANDS:
003BF3             10765   ;
003BF3 C5 3E       10766   CMDTABmn:         DW	AUTO
003BF5 68 3D       10767                   DW	DELETE
003BF7 90 3D       10768                   DW	LIST
003BF9 E4 3E       10769                   DW	LOAD
003BFB DF 3E       10770                   DW	NEW
003BFD F2 3E       10771                   DW	OLD
003BFF 15 3E       10772                   DW	RENUM
003C01 0B 3F       10773                   DW	SAVE
003C03             10774   ;
003C03             10775   ;ERROR MESSAGES:
003C03             10776   ;
003C03 17          10777   ERRWDS:         DB	17H
003C04 72 6F 6F 6D 10778                   DB	"room"
003C08 00          10779                   DB	0
003C09 16          10780                   DB	16H
003C0A 14          10781                   DB	14H
003C0B 00 00       10782                   DW	0
003C0D 4D 75 6C 74 10783                   DB	"Multiple label"
       69 70 6C 65 
       20 6C 61 62 
       65 6C       
003C1B 00          10784                   DB	0
003C1C 4D 69 73 74 10785                   DB	"Mistake"
       61 6B 65    
003C23 00          10786                   DB	0
003C24 11          10787                   DB	11H
003C25 2C          10788                   DB	','
003C26 00          10789                   DB	0
003C27 54 79 70 65 10790                   DB	"Type mismatch"
       20 6D 69 73 
       6D 61 74 63 
       68          
003C34 00          10791                   DB	0
003C35 19          10792                   DB	19H
003C36 A4          10793                   DB	TFN
003C37 00 00       10794                   DW	0
003C39 11          10795                   DB	11H
003C3A 22          10796                   DB	'"'
003C3B 00          10797                   DB	0
003C3C 13          10798                   DB	13H
003C3D DE          10799                   DB	TDIM
003C3E 00          10800                   DB	0
003C3F DE          10801                   DB	TDIM
003C40 18          10802                   DB	18H
003C41 00          10803                   DB	0
003C42 19          10804                   DB	19H
003C43 A4          10805                   DB	TFN
003C44 20 6F 72 20 10806                   DB	" or "
003C48 F2          10807                   DB	TPROC
003C49 00          10808                   DB	0
003C4A 19          10809                   DB	19H
003C4B F2          10810                   DB	TPROC
003C4C 00          10811                   DB	0
003C4D 13          10812                   DB	13H
003C4E 75 73 65 20 10813                   DB	"use of array"
       6F 66 20 61 
       72 72 61 79 
003C5A 00          10814                   DB	0
003C5B 13          10815                   DB	13H
003C5C 73 75 62 73 10816                   DB	"subscript"
       63 72 69 70 
       74          
003C65 00          10817                   DB	0
003C66 53 79 6E 74 10818                   DB	"Syntax error"
       61 78 20 65 
       72 72 6F 72 
003C72 00          10819                   DB	0
003C73 45 73 63 61 10820                   DB	"Escape"
       70 65       
003C79 00          10821                   DB	0
003C7A 44 69 76 69 10822                   DB	"Division by zero"
       73 69 6F 6E 
       20 62 79 20 
       7A 65 72 6F 
003C8A 00          10823                   DB	0
003C8B 53 74 72 69 10824                   DB	"String too long"
       6E 67 20 74 
       6F 6F 20 6C 
       6F 6E 67    
003C9A 00          10825                   DB	0
003C9B 4E 75 6D 62 10826                   DB	"Number too big"
       65 72 20 74 
       6F 6F 20 62 
       69 67       
003CA9 00          10827                   DB	0
003CAA 2D 76 65 20 10828                   DB	"-ve root"
       72 6F 6F 74 
003CB2 00          10829                   DB	0
003CB3 4C 6F 67    10830                   DB	"Log"
003CB6 14          10831                   DB	14H
003CB7 00          10832                   DB	0
003CB8 41 63 63 75 10833                   DB	"Accuracy lost"
       72 61 63 79 
       20 6C 6F 73 
       74          
003CC5 00          10834                   DB	0
003CC6 45 78 70 6F 10835                   DB	"Exponent"
       6E 65 6E 74 
003CCE 14          10836                   DB	14H
003CCF 00 00       10837                   DW	0
003CD1 12          10838                   DB	12H
003CD2 15          10839                   DB	15H
003CD3 00          10840                   DB	0
003CD4 11          10841                   DB	11H
003CD5 29          10842                   DB	')'
003CD6 00          10843                   DB	0
003CD7 13          10844                   DB	13H
003CD8 68 65 78 20 10845                   DB	"hex or binary"
       6F 72 20 62 
       69 6E 61 72 
       79          
003CE5 00          10846                   DB	0
003CE6 12          10847                   DB	12H
003CE7 A4          10848                   DB	TFN
003CE8 2F          10849                   DB	'/'
003CE9 F2          10850                   DB	TPROC
003CEA 00          10851                   DB	0
003CEB 13          10852                   DB	13H
003CEC 63 61 6C 6C 10853                   DB	"call"
003CF0 00          10854                   DB	0
003CF1 13          10855                   DB	13H
003CF2 61 72 67 75 10856                   DB	"arguments"
       6D 65 6E 74 
       73          
003CFB 00          10857                   DB	0
003CFC 19          10858                   DB	19H
003CFD E3          10859                   DB	TFOR
003CFE 1A          10860                   DB	1AH
003CFF 00          10861                   DB	0
003D00 43 61 6E 27 10862                   DB	"Can't match "
       74 20 6D 61 
       74 63 68 20 
003D0C E3          10863                   DB	TFOR
003D0D 00          10864                   DB	0
003D0E 13          10865                   DB	13H
003D0F E3          10866                   DB	TFOR
003D10 20          10867                   DB	' '
003D11 15          10868                   DB	15H
003D12 00 00       10869                   DW	0
003D14 11          10870                   DB	11H
003D15 B8          10871                   DB	TTO
003D16 00 00       10872                   DW	0
003D18 17          10873                   DB	17H
003D19 E4          10874                   DB	TGOSUB
003D1A 00          10875                   DB	0
003D1B EE          10876                   DB	TON
003D1C 20 73 79 6E 10877                   DB	" syntax"
       74 61 78    
003D23 00          10878                   DB	0
003D24 EE          10879                   DB	TON
003D25 14          10880                   DB	14H
003D26 00          10881                   DB	0
003D27 12          10882                   DB	12H
003D28 6C 69 6E 65 10883                   DB	"line"
003D2C 00          10884                   DB	0
003D2D 16          10885                   DB	16H
003D2E 20          10886                   DB	' '
003D2F DC          10887                   DB	TDATA
003D30 00          10888                   DB	0
003D31 19          10889                   DB	19H
003D32 F5          10890                   DB	TREPEAT
003D33 1A          10891                   DB	1AH
003D34 00          10892                   DB	0
003D35 13          10893                   DB	13H
003D36 10          10894                   DB	TEXIT
003D37 00          10895                   DB	0
003D38 11          10896                   DB	11H
003D39 23          10897                   DB	'#'
003D3A 00          10898                   DB	0
003D3B 19          10899                   DB	19H		;46 Not in a WHILE loop
003D3C C7          10900                   DB	TWHILE
003D3D 1A          10901                   DB	1AH
003D3E 00          10902                   DB	0
003D3F 11          10903                   DB	11H		;47 Missing ENDCASE
003D40 CB          10904                   DB	TENDCASE
003D41 00          10905                   DB	0
003D42 CA          10906                   DB	TOF		;48 OF not last
003D43 1B          10907                   DB	1BH
003D44 6C 61 73 74 10908                   DB	"last"
003D48 00          10909                   DB	0
003D49 11          10910                   DB	11H		;49 Missing ENDIF
003D4A CD          10911                   DB	TENDIF
003D4B 00          10912                   DB	0
003D4C 00 00       10913                   DW	0
003D4E 00          10914                   DB	0
003D4F EE          10915                   DB	TON		;53 ON ERROR not LOCAL
003D50 20          10916                   DB	' '
003D51 85          10917                   DB	TERROR
003D52 1B          10918                   DB	1BH
003D53 EA          10919                   DB	TLOCAL
003D54 00          10920                   DB	0
003D55 DC          10921                   DB	TDATA		;54 DATA not LOCAL
003D56 1B          10922                   DB	1BH
003D57 EA          10923                   DB	TLOCAL
003D58 00          10924                   DB	0
003D59             10925   ;
003D59             10926   ;Indent tokens (first four needn't be at start of line):
003D59             10927   ;
003D59 E3          10928   TOKADD:         DB	TFOR
003D5A F5          10929                   DB	TREPEAT
003D5B C7          10930                   DB	TWHILE
003D5C C8          10931                   DB	TCASE
003D5D 8B          10932                   DB	TELSE
003D5E C9          10933                   DB	TWHEN
003D5F CC          10934                   DB	TOTHERWISE
003D60             10935   LENADD:         EQU	$-TOKADD
003D60             10936   ;
003D60             10937   ;Outdent tokens (first three needn't be at start of line):
003D60             10938   ;
003D60 ED          10939   TOKSUB:         DB	TNEXT
003D61 FD          10940                   DB	TUNTIL
003D62 CE          10941                   DB	TENDWHILE
003D63 CB          10942                   DB	TENDCASE
003D64 CD          10943                   DB	TENDIF
003D65 8B          10944                   DB	TELSE
003D66 C9          10945                   DB	TWHEN
003D67 CC          10946                   DB	TOTHERWISE
003D68             10947   LENSUB:         EQU	$-TOKSUB
003D68             10948   ;
003D68             10949   ;COMMANDS:
003D68             10950   ;
003D68             10951   ;DELETE line,line
003D68             10952   ;
003D68 CD B9 43    10953   DELETE:         CALL	DLPAIR
003D6B 7E          10954   DELET1:         LD	A,(HL)
003D6C B7          10955                   OR	A
003D6D 28 79       10956                   JR	Z,WARMNC
003D6F 23          10957                   INC	HL
003D70 5E          10958                   LD	E,(HL)
003D71 23          10959                   INC	HL
003D72 56          10960                   LD	D,(HL)
003D73 2B          10961                   DEC	HL
003D74 2B          10962                   DEC	HL
003D75 EB          10963                   EX	DE,HL
003D76 37          10964                   SCF
003D77 ED 42       10965                   SBC	HL,BC
003D79 EB          10966                   EX	DE,HL
003D7A 30 6C       10967                   JR	NC,WARMNC
003D7C C5          10968                   PUSH	BC
003D7D CD CB 3F    10969                   CALL	DEL
003D80 C1          10970                   POP	BC
003D81 18 E8       10971                   JR	DELET1
003D83             10972   ;
003D83             10973   ;LISTO expr
003D83             10974   ;
003D83 FD 23       10975   LISTO:          INC	IY		;SKIP "O"
003D85 CD 15 18    10976                   CALL	EXPRI
003D88 D9          10977                   EXX
003D89 7D          10978                   LD	A,L
003D8A 32 FE 54    10979                   LD	(LISTON),A
003D8D C3 92 37    10980                   JP	CLOOP
003D90             10981   ;
003D90             10982   ;LIST
003D90             10983   ;LIST line
003D90             10984   ;LIST line,line [IF string]
003D90             10985   ;LIST ,line
003D90             10986   ;LIST line,
003D90             10987   ;
003D90 FE 4F       10988   LIST:           CP	'O'
003D92 28 EF       10989                   JR	Z,LISTO
003D94 0E 01       10990                   LD	C,1
003D96 11 00 53    10991                   LD	DE,BUFFER
003D99 CD FA 43    10992                   CALL	LEXAN2
003D9C 12          10993                   LD	(DE),A
003D9D FD 21 00 53 10994                   LD	IY,BUFFER
003DA1 CD B9 43    10995                   CALL	DLPAIR
003DA4 CD ED 44    10996                   CALL	NXT
003DA7 FE E7       10997                   CP	TIF		;IF CLAUSE ?
003DA9 3E 00       10998                   LD	A,0		;INIT IF-CLAUSE LENGTH
003DAB 20 15       10999                   JR	NZ,LISTB
003DAD FD 23       11000                   INC	IY		;SKIP IF
003DAF CD ED 44    11001                   CALL	NXT		;SKIP SPACES (IF ANY)
003DB2 EB          11002                   EX	DE,HL
003DB3 FD E5       11003                   PUSH	IY
003DB5 E1          11004                   POP	HL		;HL ADDRESSES IF CLAUSE
003DB6 3E 0D       11005                   LD	A,CR
003DB8 C5          11006                   PUSH	BC
003DB9 01 00 01    11007                   LD	BC,256
003DBC ED B1       11008                   CPIR			;LOCATE CR
003DBE 79          11009                   LD	A,C
003DBF 2F          11010                   CPL			;A = SUBSTRING LENGTH
003DC0 C1          11011                   POP	BC
003DC1 EB          11012                   EX	DE,HL
003DC2 5F          11013   LISTB:          LD	E,A		;IF-CLAUSE LENGTH
003DC3 78          11014                   LD	A,B
003DC4 B1          11015                   OR	C
003DC5 20 01       11016                   JR	NZ,LISTA
003DC7 0B          11017                   DEC	BC
003DC8 D9          11018   LISTA:          EXX
003DC9 DD 21 FE 54 11019                   LD	IX,LISTON
003DCD 1E 00       11020                   LD	E,0		;INDENTATION COUNT
003DCF D9          11021                   EXX
003DD0 3E 14       11022                   LD	A,20
003DD2             11023   ;
003DD2 C5          11024   LISTC:          PUSH	BC		;SAVE HIGH LINE NUMBER
003DD3 D5          11025                   PUSH	DE		;SAVE IF-CLAUSE LENGTH
003DD4 E5          11026                   PUSH	HL		;SAVE PROGRAM POINTER
003DD5 08          11027                   EX	AF,AF'
003DD6 7E          11028                   LD	A,(HL)
003DD7 B7          11029                   OR	A
003DD8 28 0E       11030                   JR	Z,WARMNC
003DDA             11031   ;
003DDA             11032   ;CHECK IF PAST TERMINATING LINE NUMBER:
003DDA             11033   ;
003DDA 7B          11034                   LD	A,E		;A = IF-CLAUSE LENGTH
003DDB 23          11035                   INC	HL
003DDC 5E          11036                   LD	E,(HL)
003DDD 23          11037                   INC	HL
003DDE 56          11038                   LD	D,(HL)		;DE = LINE NUMBER
003DDF 2B          11039                   DEC	HL
003DE0 2B          11040                   DEC	HL
003DE1 D5          11041                   PUSH	DE		;SAVE LINE NUMBER
003DE2 EB          11042                   EX	DE,HL
003DE3 37          11043                   SCF
003DE4 ED 42       11044                   SBC	HL,BC
003DE6 EB          11045                   EX	DE,HL
003DE7 D1          11046                   POP	DE		;RESTORE LINE NUMBER
003DE8 D2 91 37    11047   WARMNC:         JP	NC,WARM
003DEB 4E          11048                   LD	C,(HL)		;C = LINE LENGTH + 4
003DEC 47          11049                   LD	B,A		;B = IF-CLAUSE LENGTH
003DED             11050   ;
003DED             11051   ;CHECK FOR IF CLAUSE:
003DED             11052   ;
003DED 23          11053                   INC	HL
003DEE 23          11054                   INC	HL
003DEF 23          11055                   INC	HL		;HL ADDRESSES LINE TEXT
003DF0 0D          11056                   DEC	C
003DF1 0D          11057                   DEC	C
003DF2 0D          11058                   DEC	C
003DF3 0D          11059                   DEC	C		;C = LINE LENGTH
003DF4 D5          11060                   PUSH	DE		;SAVE LINE NUMBER
003DF5 E5          11061                   PUSH	HL		;SAVE LINE ADDRESS
003DF6 AF          11062                   XOR	A		;A <- 0
003DF7 B8          11063                   CP	B		;WAS THERE AN IF-CLAUSE
003DF8 FD E5       11064                   PUSH	IY
003DFA D1          11065                   POP	DE		;DE ADDRESSES IF-CLAUSE
003DFB C4 D4 1D    11066                   CALL	NZ,SEARCH	;SEARCH FOR IF CLAUSE
003DFE E1          11067                   POP	HL		;RESTORE LINE ADDRESS
003DFF D1          11068                   POP	DE		;RESTORE LINE NUMBER
003E00 FD E5       11069                   PUSH	IY
003E02 CC 3F 40    11070                   CALL	Z,LISTIT	;LIST IF MATCH
003E05 FD E1       11071                   POP	IY
003E07             11072   ;
003E07 08          11073                   EX	AF,AF'
003E08 3D          11074                   DEC	A
003E09 CD 18 06    11075                   CALL	LTRAP
003E0C E1          11076                   POP	HL		;RESTORE POINTER
003E0D 5E          11077                   LD	E,(HL)
003E0E 16 00       11078                   LD	D,0
003E10 19          11079                   ADD	HL,DE		;ADDRESS NEXT LINE
003E11 D1          11080                   POP	DE		;RESTORE IF-CLAUSE LEN
003E12 C1          11081                   POP	BC		;RESTORE HI LINE NUMBER
003E13 18 BD       11082                   JR	LISTC
003E15             11083   ;
003E15             11084   ;RENUMBER
003E15             11085   ;RENUMBER start
003E15             11086   ;RENUMBER start,increment
003E15             11087   ;RENUMBER ,increment
003E15             11088   ;
003E15 CD 25 40    11089   RENUM:          CALL	CLEAR		;USES DYNAMIC AREA
003E18 CD 96 43    11090                   CALL	PAIR		;LOAD HL,BC
003E1B D9          11091                   EXX
003E1C 2A DC 54    11092                   LD	HL,(PAGE_)
003E1F ED 5B DE 54 11093                   LD	DE,(LOMEM)
003E23 7E          11094   RENUM1:         LD	A,(HL)		;BUILD TABLE
003E24 B7          11095                   OR	A
003E25 28 28       11096                   JR	Z,RENUM2
003E27 23          11097                   INC	HL
003E28 4E          11098                   LD	C,(HL)		;OLD LINE NUMBER
003E29 23          11099                   INC	HL
003E2A 46          11100                   LD	B,(HL)
003E2B EB          11101                   EX	DE,HL
003E2C 71          11102                   LD	(HL),C
003E2D 23          11103                   INC	HL
003E2E 70          11104                   LD	(HL),B
003E2F 23          11105                   INC	HL
003E30 D9          11106                   EXX
003E31 E5          11107                   PUSH	HL
003E32 09          11108                   ADD	HL,BC		;ADD INCREMENT
003E33 DA 91 43    11109                   JP	C,TOOBIGmn	;"Too big"
003E36 D9          11110                   EXX
003E37 C1          11111                   POP	BC
003E38 71          11112                   LD	(HL),C
003E39 23          11113                   INC	HL
003E3A 70          11114                   LD	(HL),B
003E3B 23          11115                   INC	HL
003E3C EB          11116                   EX	DE,HL
003E3D 2B          11117                   DEC	HL
003E3E 2B          11118                   DEC	HL
003E3F AF          11119                   XOR	A
003E40 47          11120                   LD	B,A
003E41 4E          11121                   LD	C,(HL)
003E42 09          11122                   ADD	HL,BC		;NEXT LINE
003E43 EB          11123                   EX	DE,HL
003E44 E5          11124                   PUSH	HL
003E45 24          11125                   INC	H
003E46 ED 72       11126                   SBC	HL,SP
003E48 E1          11127                   POP	HL
003E49 EB          11128                   EX	DE,HL
003E4A 38 D7       11129                   JR	C,RENUM1	;CONTINUE
003E4C C3 26 3F    11130                   JP	ERROR_		;'No room' (A = 0)
003E4F             11131   ;
003E4F EB          11132   RENUM2:         EX	DE,HL
003E50 36 FF       11133                   LD	(HL),-1
003E52 23          11134                   INC	HL
003E53 36 FF       11135                   LD	(HL),-1
003E55 ED 5B DE 54 11136                   LD	DE,(LOMEM)
003E59 D9          11137                   EXX
003E5A 2A DC 54    11138                   LD	HL,(PAGE_)
003E5D 4E          11139   RENUM3:         LD	C,(HL)
003E5E 79          11140                   LD	A,C
003E5F B7          11141                   OR	A
003E60 28 86       11142                   JR	Z,WARMNC
003E62 D9          11143                   EXX
003E63 EB          11144                   EX	DE,HL
003E64 23          11145                   INC	HL
003E65 23          11146                   INC	HL
003E66 5E          11147                   LD	E,(HL)
003E67 23          11148                   INC	HL
003E68 56          11149                   LD	D,(HL)
003E69 23          11150                   INC	HL
003E6A D5          11151                   PUSH	DE
003E6B EB          11152                   EX	DE,HL
003E6C D9          11153                   EXX
003E6D D1          11154                   POP	DE
003E6E 23          11155                   INC	HL
003E6F 73          11156                   LD	(HL),E		;NEW LINE NUMBER
003E70 23          11157                   INC	HL
003E71 72          11158                   LD	(HL),D
003E72 23          11159                   INC	HL
003E73 0D          11160                   DEC	C
003E74 0D          11161                   DEC	C
003E75 0D          11162                   DEC	C
003E76 06 00       11163                   LD	B,0
003E78 3E 8D       11164   RENUM7:         LD	A,TLINO
003E7A ED B1       11165                   CPIR			;SEARCH FOR LINE NUMBER
003E7C 20 DF       11166                   JR	NZ,RENUM3
003E7E C5          11167                   PUSH	BC
003E7F E5          11168                   PUSH	HL
003E80 E5          11169                   PUSH	HL
003E81 FD E1       11170                   POP	IY
003E83 D9          11171                   EXX
003E84 E5          11172                   PUSH	HL
003E85 CD 42 1F    11173                   CALL	DECODE		;DECODE LINE NUMBER
003E88 E1          11174                   POP	HL
003E89 D9          11175                   EXX
003E8A 44          11176                   LD	B,H
003E8B 4D          11177                   LD	C,L
003E8C 2A DE 54    11178                   LD	HL,(LOMEM)
003E8F 5E          11179   RENUM4:         LD	E,(HL)		;CROSS-REFERENCE TABLE
003E90 23          11180                   INC	HL
003E91 56          11181                   LD	D,(HL)
003E92 23          11182                   INC	HL
003E93 EB          11183                   EX	DE,HL
003E94 B7          11184                   OR	A		;CLEAR CARRY
003E95 ED 42       11185                   SBC	HL,BC
003E97 EB          11186                   EX	DE,HL
003E98 5E          11187                   LD	E,(HL)		;NEW NUMBER
003E99 23          11188                   INC	HL
003E9A 56          11189                   LD	D,(HL)
003E9B 23          11190                   INC	HL
003E9C 38 F1       11191                   JR	C,RENUM4
003E9E EB          11192                   EX	DE,HL
003E9F 28 1A       11193                   JR	Z,RENUM5	;FOUND
003EA1 CD DC 44    11194                   CALL	TELL
003EA4 46 61 69 6C 11195                   DB	"Failed at "
       65 64 20 61 
       74 20       
003EAE 00          11196                   DB	0
003EAF D9          11197                   EXX
003EB0 E5          11198                   PUSH	HL
003EB1 D9          11199                   EXX
003EB2 E1          11200                   POP	HL
003EB3 CD 74 41    11201                   CALL	PBCDL
003EB6 CD DD 40    11202                   CALL	CRLF
003EB9 18 06       11203                   JR	RENUM6
003EBB D1          11204   RENUM5:         POP	DE
003EBC D5          11205                   PUSH	DE
003EBD 1B          11206                   DEC	DE
003EBE CD A1 44    11207                   CALL	ENCODE		;RE-WRITE NUMBER
003EC1 E1          11208   RENUM6:         POP	HL
003EC2 C1          11209                   POP	BC
003EC3 18 B3       11210                   JR	RENUM7
003EC5             11211   ;
003EC5             11212   ;AUTO
003EC5             11213   ;AUTO start,increment
003EC5             11214   ;AUTO start
003EC5             11215   ;AUTO ,increment
003EC5             11216   ;
003EC5 CD 96 43    11217   AUTO:           CALL	PAIR
003EC8 22 E8 54    11218                   LD	(AUTONO),HL
003ECB 79          11219                   LD	A,C
003ECC 32 FF 54    11220                   LD	(INCREM),A
003ECF 18 37       11221                   JR	CLOOP0
003ED1             11222   ;
003ED1             11223   ;BAD
003ED1             11224   ;NEW
003ED1             11225   ;
003ED1 CD DC 44    11226   BAD:            CALL	TELL		;"Bad program'
003ED4 13          11227                   DB	13H
003ED5 70 72 6F 67 11228                   DB	"program"
       72 61 6D    
003EDC 0D          11229                   DB	CR
003EDD 0A          11230                   DB	LF
003EDE 00          11231                   DB	0
003EDF CD 20 40    11232   NEW:            CALL	NEWIT
003EE2 18 24       11233                   JR	CLOOP0
003EE4             11234   ;
003EE4             11235   ;LOAD filename
003EE4             11236   ;
003EE4 CD 1E 18    11237   LOAD:           CALL	EXPRS		;GET FILENAME
003EE7 3E 0D       11238                   LD	A,CR
003EE9 12          11239                   LD	(DE),A
003EEA CD E2 3F    11240                   CALL	LOAD0
003EED CD 25 40    11241                   CALL	CLEAR
003EF0 18 31       11242                   JR	WARM0
003EF2             11243   ;
003EF2             11244   ;OLD
003EF2             11245   ;
003EF2 2A DC 54    11246   OLD:            LD	HL,(PAGE_)
003EF5 E5          11247                   PUSH	HL
003EF6 23          11248                   INC	HL
003EF7 23          11249                   INC	HL
003EF8 23          11250                   INC	HL
003EF9 01 FC 00    11251                   LD	BC,252
003EFC 3E 0D       11252                   LD	A,CR
003EFE ED B1       11253                   CPIR
003F00 20 CF       11254                   JR	NZ,BAD
003F02 7D          11255                   LD	A,L
003F03 E1          11256                   POP	HL
003F04 77          11257                   LD	(HL),A
003F05 CD FC 3F    11258                   CALL	CLEAN
003F08 C3 92 37    11259   CLOOP0:         JP	CLOOP
003F0B             11260   ;
003F0B             11261   ;SAVE filename
003F0B             11262   ;
003F0B CD 1E 18    11263   SAVE:           CALL	EXPRS		;FILENAME
003F0E 3E 0D       11264                   LD	A,CR
003F10 12          11265                   LD	(DE),A
003F11 ED 5B DC 54 11266                   LD	DE,(PAGE_)
003F15 CD 07 40    11267                   CALL	GETTOP
003F18 B7          11268                   OR	A
003F19 ED 52       11269                   SBC	HL,DE
003F1B 44          11270                   LD	B,H		;LENGTH OF PROGRAM
003F1C 4D          11271                   LD	C,L
003F1D 21 00 52    11272                   LD	HL,ACCS
003F20 CD A4 07    11273                   CALL	OSSAVE
003F23 C3 91 37    11274   WARM0:          JP	WARM
003F26             11275   ;
003F26             11276   ;ERROR
003F26             11277   ;N.B. CARE NEEDED BECAUSE SP MAY NOT BE VALID (E.G. ABOVE HIMEM)
003F26             11278   ;
003F26 21 03 3C    11279   ERROR_:         LD	HL,ERRWDS
003F29 4F          11280                   LD	C,A
003F2A B7          11281                   OR	A
003F2B 28 0C       11282                   JR	Z,ERROR1
003F2D 47          11283                   LD	B,A		;ERROR NUMBER
003F2E AF          11284                   XOR	A
003F2F BE          11285   ERROR0:         CP	(HL)
003F30 23          11286                   INC	HL
003F31 20 FC       11287                   JR	NZ,ERROR0
003F33 10 FA       11288                   DJNZ	ERROR0
003F35 18 02       11289                   JR	ERROR1		;MUST NOT PUSH HL HERE
003F37             11290   ;
003F37 E1          11291   EXTERR:         POP	HL
003F38 4F          11292                   LD	C,A
003F39 22 EE 54    11293   ERROR1:         LD	(ERRTXT),HL
003F3C 2A EC 54    11294                   LD	HL,(ONERSP)
003F3F 7C          11295                   LD	A,H
003F40 B5          11296                   OR	L
003F41 ED 7B E2 54 11297                   LD	SP,(HIMEM)	;MUST SET SP BEFORE 'CALL'
003F45 28 01       11298                   JR	Z,ERROR4
003F47 F9          11299                   LD	SP,HL
003F48 79          11300   ERROR4:         LD	A,C		;ERROR NUMBER
003F49 CD 3D 41    11301                   CALL	SETLIN		;SP IS SET NOW
003F4C 32 FD 54    11302                   LD	(ERR),A
003F4F 22 F2 54    11303                   LD	(ERL),HL
003F52 B7          11304                   OR	A
003F53 28 0B       11305                   JR	Z,ERROR2	;'FATAL' ERROR
003F55 2A EA 54    11306                   LD	HL,(ERRTRP)
003F58 7C          11307                   LD	A,H
003F59 B5          11308                   OR	L
003F5A E5          11309                   PUSH	HL
003F5B FD E1       11310                   POP	IY
003F5D C2 7B 24    11311                   JP	NZ,XEQ		;ERROR TRAPPED
003F60 ED 7B E2 54 11312   ERROR2:         LD	SP,(HIMEM)
003F64 ED 62       11313                   SBC	HL,HL
003F66 22 E8 54    11314                   LD	(AUTONO),HL
003F69 22 E6 54    11315                   LD	(TRACEN),HL	;CANCEL TRACE
003F6C CD 25 06    11316                   CALL	RESET		;RESET OPSYS
003F6F CD DD 40    11317                   CALL	CRLF
003F72 CD C7 44    11318                   CALL	REPORT		;MESSAGE
003F75 2A F2 54    11319                   LD	HL,(ERL)
003F78 CD 64 41    11320                   CALL	SAYLN
003F7B 1E 00       11321                   LD	E,0
003F7D DC 35 06    11322                   CALL	C,OSSHUT	;CLOSE ALL FILES
003F80 CD DD 40    11323                   CALL	CRLF
003F83 18 83       11324                   JR	CLOOP0
003F85             11325   ;
003F85             11326   ;SUBROUTINES:
003F85             11327   ;
003F85             11328   ;
003F85             11329   ;LEX - SEARCH FOR KEYWORDS
003F85             11330   ;   Inputs: HL = start of keyword table
003F85             11331   ;           IY = start of match text
003F85             11332   ;  Outputs: If found, Z-flag set, A=token.
003F85             11333   ;           If not found, Z-flag reset, A=(IY).
003F85             11334   ;           IY updated (if NZ, IY unchanged).
003F85             11335   ; Destroys: A,B,H,L,IY,F
003F85             11336   ;
003F85 21 66 38    11337   LEX:            LD	HL,KEYWDS
003F88 FD 7E 00    11338   LEX0:           LD	A,(IY)
003F8B 46          11339                   LD	B,(HL)
003F8C 23          11340                   INC	HL
003F8D BE          11341                   CP	(HL)
003F8E 28 0A       11342                   JR	Z,LEX2
003F90 D8          11343                   RET	C		;FAIL EXIT
003F91 23          11344   LEX1:           INC	HL
003F92 7E          11345                   LD	A,(HL)
003F93 FE A0       11346                   CP	160
003F95 EA 91 3F    11347                   JP	PE,LEX1
003F98 18 EE       11348                   JR	LEX0
003F9A             11349   ;
003F9A FD E5       11350   LEX2:           PUSH	IY		;SAVE POINTER
003F9C 23          11351   LEX3:           INC	HL
003F9D 7E          11352                   LD	A,(HL)
003F9E FE A0       11353                   CP	160
003FA0 E2 C7 3F    11354                   JP	PO,LEX6		;FOUND
003FA3 FD 23       11355                   INC	IY
003FA5 FD 7E 00    11356                   LD	A,(IY)
003FA8 BE          11357                   CP	(HL)
003FA9 20 05       11358                   JR	NZ,LEX7
003FAB FE A1       11359                   CP	161
003FAD EA 9C 3F    11360                   JP	PE,LEX3
003FB0 FD 7E 00    11361   LEX7:           LD	A,(IY)
003FB3 FE 2E       11362                   CP	'.'
003FB5 28 10       11363                   JR	Z,LEX6		;FOUND (ABBREV.)
003FB7 CD DE 43    11364                   CALL	RANGE1
003FBA 38 04       11365                   JR	C,LEX5
003FBC FD E1       11366   LEX4:           POP	IY		;RESTORE POINTER
003FBE 18 D1       11367                   JR	LEX1
003FC0             11368   ;
003FC0 7E          11369   LEX5:           LD	A,(HL)
003FC1 FE 20       11370                   CP	' '
003FC3 20 F7       11371                   JR	NZ,LEX4
003FC5 FD 2B       11372                   DEC	IY
003FC7 F1          11373   LEX6:           POP	AF
003FC8 AF          11374                   XOR	A
003FC9 78          11375                   LD	A,B
003FCA C9          11376                   RET
003FCB             11377   ;
003FCB             11378   ;DEL - DELETE A PROGRAM LINE.
003FCB             11379   ;   Inputs: HL addresses program line.
003FCB             11380   ; Destroys: B,C,F
003FCB             11381   ;
003FCB D5          11382   DEL:            PUSH	DE
003FCC E5          11383                   PUSH	HL
003FCD E5          11384                   PUSH	HL
003FCE 06 00       11385                   LD	B,0
003FD0 4E          11386                   LD	C,(HL)
003FD1 09          11387                   ADD	HL,BC
003FD2 E5          11388                   PUSH	HL
003FD3 EB          11389                   EX	DE,HL
003FD4 CD 07 40    11390                   CALL	GETTOP
003FD7 ED 52       11391                   SBC	HL,DE
003FD9 44          11392                   LD	B,H
003FDA 4D          11393                   LD	C,L
003FDB E1          11394                   POP	HL
003FDC D1          11395                   POP	DE
003FDD ED B0       11396                   LDIR			;DELETE LINE
003FDF E1          11397                   POP	HL
003FE0 D1          11398                   POP	DE
003FE1 C9          11399                   RET
003FE2             11400   ;
003FE2             11401   ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
003FE2             11402   ;   Inputs: Filename in ACCS (term CR)
003FE2             11403   ; Destroys: A,B,C,D,E,H,L,F
003FE2             11404   ;
003FE2             11405   ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
003FE2             11406   ; AND WRITE FF FF.
003FE2             11407   ; Destroys: A,B,C,H,L,F
003FE2             11408   ;
003FE2 ED 5B DC 54 11409   LOAD0:          LD	DE,(PAGE_)
003FE6 21 00 FF    11410                   LD	HL,-256
003FE9 39          11411                   ADD	HL,SP
003FEA ED 52       11412                   SBC	HL,DE		;FIND AVAILABLE SPACE
003FEC 44          11413                   LD	B,H
003FED 4D          11414                   LD	C,L
003FEE 21 00 52    11415                   LD	HL,ACCS
003FF1 CD AE 06    11416                   CALL	OSLOAD		;LOAD
003FF4 D4 20 40    11417                   CALL	NC,NEWIT
003FF7 3E 00       11418                   LD	A,0
003FF9 D2 26 3F    11419                   JP	NC,ERROR_	;"No room"
003FFC CD 07 40    11420   CLEAN:          CALL	GETTOP
003FFF 2B          11421                   DEC	HL
004000 36 FF       11422                   LD	(HL),-1		;WRITE &FFFF
004002 2B          11423                   DEC	HL
004003 36 FF       11424                   LD	(HL),-1
004005 18 1E       11425                   JR	CLEAR
004007             11426   ;
004007 2A DC 54    11427   GETTOP:         LD	HL,(PAGE_)
00400A 06 00       11428                   LD	B,0
00400C 3E 0D       11429                   LD	A,CR
00400E 4E          11430   GETOP1:         LD	C,(HL)
00400F 0C          11431                   INC	C
004010 0D          11432                   DEC	C
004011 28 09       11433                   JR	Z,GETOP2
004013 09          11434                   ADD	HL,BC
004014 2B          11435                   DEC	HL
004015 BE          11436                   CP	(HL)
004016 23          11437                   INC	HL
004017 28 F5       11438                   JR	Z,GETOP1
004019 C3 D1 3E    11439                   JP	BAD
00401C 23          11440   GETOP2:         INC	HL		;N.B. CALLED FROM NEWIT
00401D 23          11441                   INC	HL
00401E 23          11442                   INC	HL
00401F C9          11443                   RET
004020             11444   ;
004020             11445   ;NEWIT - NEW PROGRAM THEN CLEAR
004020             11446   ;   Destroys: H,L
004020             11447   ;
004020             11448   ;CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
004020             11449   ; FUNCTION AND PROCEDURE POINTERS.
004020             11450   ;   Destroys: Nothing
004020             11451   ;
004020 2A DC 54    11452   NEWIT:          LD	HL,(PAGE_)
004023 36 00       11453                   LD	(HL),0
004025 E5          11454   CLEAR:          PUSH	HL
004026 C5          11455                   PUSH	BC
004027 F5          11456                   PUSH	AF
004028 CD 07 40    11457                   CALL	GETTOP
00402B 22 DE 54    11458                   LD	(LOMEM),HL
00402E 22 E0 54    11459                   LD	(FREE),HL
004031 21 6C 54    11460                   LD	HL,DYNVAR
004034             11461                   ; LD	B,2*(54+2)
004034 06 70       11462                   LD	B,54+2*2
004036 36 00       11463   CLEAR1:         LD	(HL),0
004038 23          11464                   INC	HL
004039 10 FB       11465                   DJNZ	CLEAR1
00403B F1          11466                   POP	AF
00403C C1          11467                   POP	BC
00403D E1          11468                   POP	HL
00403E C9          11469                   RET
00403F             11470   ;
00403F             11471   ;LISTIT - LIST A PROGRAM LINE.
00403F             11472   ;    Inputs: HL addresses line
00403F             11473   ;            DE = line number (binary)
00403F             11474   ;	     E' = indentation count
00403F             11475   ;            IX addresses LISTON
00403F             11476   ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
00403F             11477   ;
00403F E5          11478   LISTIT:         PUSH	HL
004040 EB          11479                   EX	DE,HL
004041 C5          11480                   PUSH	BC
004042 CD 78 41    11481                   CALL	PBCD
004045 C1          11482                   POP	BC
004046 E1          11483                   POP	HL
004047 7E          11484                   LD	A,(HL)
004048 D9          11485                   EXX
004049 21 60 3D    11486                   LD	HL,TOKSUB
00404C 01 08 00    11487                   LD	BC,LENSUB
00404F ED B1       11488                   CPIR
004051 CC D7 40    11489                   CALL	Z,INDSUB
004054 FE CB       11490                   CP	TENDCASE
004056 CC D7 40    11491                   CALL	Z,INDSUB
004059 3E 20       11492                   LD	A,' '
00405B DD CB 00 46 11493                   BIT	0,(IX)
00405F C4 E4 40    11494                   CALL	NZ,OUTCHR
004062 7B          11495                   LD	A,E
004063 87          11496                   ADD	A,A
004064 DD CB 00 4E 11497                   BIT	1,(IX)
004068 C4 85 35    11498                   CALL	NZ,SPACES
00406B D9          11499                   EXX
00406C 7E          11500                   LD	A,(HL)
00406D 1E 00       11501                   LD	E,0
00406F D9          11502                   EXX
004070 01 07 00    11503                   LD	BC,LENADD
004073 21 59 3D    11504   LIST5:          LD	HL,TOKADD
004076 ED B1       11505                   CPIR
004078 CC DB 40    11506                   CALL	Z,INDADD
00407B FE C8       11507                   CP	TCASE
00407D CC DB 40    11508                   CALL	Z,INDADD
004080 D9          11509                   EXX
004081 7E          11510   LIST8:          LD	A,(HL)
004082 23          11511                   INC	HL
004083 FE 0D       11512                   CP	CR
004085 28 25       11513                   JR	Z,LIST9
004087 57          11514                   LD	D,A
004088 FE 10       11515                   CP	TEXIT
00408A 20 02       11516                   JR	NZ,LIST6
00408C CB FB       11517                   SET	7,E
00408E FE 22       11518   LIST6:          CP	'"'
004090 20 01       11519                   JR	NZ,LIST7
004092 1C          11520                   INC	E
004093 CD CB 40    11521   LIST7:          CALL	LOUT
004096 7B          11522                   LD	A,E
004097 E6 81       11523                   AND	81H
004099 20 E6       11524                   JR	NZ,LIST8
00409B 7E          11525                   LD	A,(HL)
00409C D9          11526                   EXX
00409D 21 60 3D    11527                   LD	HL,TOKSUB
0040A0 01 03 00    11528                   LD	BC,3
0040A3 ED B1       11529                   CPIR
0040A5 CC D7 40    11530                   CALL	Z,INDSUB
0040A8 0E 04       11531                   LD	C,4
0040AA 18 C7       11532                   JR	LIST5
0040AC             11533   ;
0040AC 7A          11534   LIST9:          LD	A,D
0040AD FE 8C       11535                   CP	TTHEN
0040AF D9          11536                   EXX
0040B0 CC DB 40    11537                   CALL	Z,INDADD
0040B3 D9          11538                   EXX
0040B4 18 27       11539                   JR	CRLF
0040B6             11540   ;
0040B6 E5          11541   PRLINO:         PUSH	HL
0040B7 FD E1       11542                   POP	IY
0040B9 C5          11543                   PUSH	BC
0040BA CD 42 1F    11544                   CALL	DECODE
0040BD C1          11545                   POP	BC
0040BE D9          11546                   EXX
0040BF C5          11547                   PUSH	BC
0040C0 D5          11548                   PUSH	DE
0040C1 CD 74 41    11549                   CALL	PBCDL
0040C4 D1          11550                   POP	DE
0040C5 C1          11551                   POP	BC
0040C6 D9          11552                   EXX
0040C7 FD E5       11553                   PUSH	IY
0040C9 E1          11554                   POP	HL
0040CA C9          11555                   RET
0040CB             11556   ;
0040CB CB 43       11557   LOUT:           BIT	0,E
0040CD 20 15       11558                   JR	NZ,OUTCHR
0040CF FE 8D       11559                   CP	TLINO
0040D1 28 E3       11560                   JR	Z,PRLINO
0040D3 CD FD 40    11561                   CALL	OUT
0040D6 C9          11562                   RET
0040D7             11563   ;
0040D7 1D          11564   INDSUB:         DEC	E
0040D8 F2 DC 40    11565                   JP	P,INDRET
0040DB 1C          11566   INDADD:         INC	E
0040DC C9          11567   INDRET:         RET
0040DD             11568   ;
0040DD             11569   ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
0040DD             11570   ;  Destroys: A,F
0040DD             11571   ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
0040DD             11572   ;    Inputs: A = character
0040DD             11573   ;  Destroys: A,F
0040DD             11574   ;
0040DD 3E 0D       11575   CRLF:           LD	A,CR
0040DF CD E4 40    11576                   CALL	OUTCHR
0040E2 3E 0A       11577                   LD	A,LF
0040E4 CD 93 05    11578   OUTCHR:         CALL	OSWRCH
0040E7 D6 0D       11579                   SUB	CR
0040E9 28 05       11580                   JR	Z,CARRET
0040EB D8          11581                   RET	C		;NON-PRINTING
0040EC 3A FB 54    11582                   LD	A,(COUNT)
0040EF 3C          11583                   INC	A
0040F0 32 FB 54    11584   CARRET:         LD	(COUNT),A
0040F3 C8          11585                   RET	Z
0040F4 E5          11586                   PUSH	HL
0040F5 2A FC 54    11587                   LD	HL,(WIDTH)
0040F8 BD          11588                   CP	L
0040F9 E1          11589                   POP	HL
0040FA C0          11590                   RET	NZ
0040FB 18 E0       11591                   JR	CRLF
0040FD             11592   ;
0040FD             11593   ;OUT - SEND CHARACTER OR KEYWORD
0040FD             11594   ;   Inputs: A = character (>=10, <128)
0040FD             11595   ;           A = Token (<10, >=128)
0040FD             11596   ;  Destroys: A,F
0040FD             11597   ;
0040FD FE A0       11598   OUT:            CP	160
0040FF EA E4 40    11599                   JP	PE,OUTCHR
004102 C5          11600                   PUSH	BC
004103 E5          11601                   PUSH	HL
004104 21 66 38    11602                   LD	HL,KEYWDS
004107 01 5B 03    11603                   LD	BC,KEYWDL
00410A ED B1       11604                   CPIR
00410C C4 E4 40    11605                   CALL	NZ,OUTCHR
00410F 06 A0       11606                   LD	B,160
004111 FE 91       11607                   CP	145
004113 EA 17 41    11608                   JP	PE,TOKEN1
004116 04          11609                   INC	B
004117 7E          11610   TOKEN1:         LD	A,(HL)
004118 23          11611                   INC	HL
004119 B8          11612                   CP	B
00411A F5          11613                   PUSH	AF
00411B EC E4 40    11614                   CALL	PE,OUTCHR
00411E F1          11615                   POP	AF
00411F EA 17 41    11616                   JP	PE,TOKEN1
004122 E1          11617                   POP	HL
004123 C1          11618                   POP	BC
004124 C9          11619                   RET
004125             11620   ;
004125             11621   ;FINDL - FIND PROGRAM LINE.
004125             11622   ;   Inputs: HL = line number (binary)
004125             11623   ;  Outputs: HL addresses line (if found)
004125             11624   ;           DE = line number
004125             11625   ;           Z-flag set if found.
004125             11626   ; Destroys: A,B,C,D,E,H,L,F
004125             11627   ;
004125 EB          11628   FINDL:          EX	DE,HL
004126 2A DC 54    11629                   LD	HL,(PAGE_)
004129 AF          11630                   XOR	A		;A=0
00412A BE          11631                   CP	(HL)
00412B 3C          11632                   INC	A
00412C D0          11633                   RET	NC
00412D AF          11634                   XOR	A		;CLEAR CARRY
00412E 47          11635                   LD	B,A
00412F 4E          11636   FINDL1:         LD	C,(HL)
004130 E5          11637                   PUSH	HL
004131 23          11638                   INC	HL
004132 7E          11639                   LD	A,(HL)
004133 23          11640                   INC	HL
004134 66          11641                   LD	H,(HL)
004135 6F          11642                   LD	L,A
004136 ED 52       11643                   SBC	HL,DE
004138 E1          11644                   POP	HL
004139 D0          11645                   RET	NC		;FOUND | PAST
00413A 09          11646                   ADD	HL,BC
00413B 18 F2       11647                   JR	FINDL1
00413D             11648   ;
00413D             11649   ;SETLIN - Search program for line containing address.
00413D             11650   ;   Inputs: Address in (CURLIN)
00413D             11651   ;  Outputs: Line number in HL
00413D             11652   ; Destroys: B,C,D,E,H,L,F
00413D             11653   ;
00413D 06 00       11654   SETLIN:         LD	B,0
00413F ED 5B F4 54 11655                   LD	DE,(CURLIN)
004143 2A DC 54    11656                   LD	HL,(PAGE_)
004146 B7          11657                   OR	A
004147 ED 52       11658                   SBC	HL,DE
004149 19          11659                   ADD	HL,DE
00414A 30 13       11660                   JR	NC,SET3
00414C 4E          11661   SET1:           LD	C,(HL)
00414D 0C          11662                   INC	C
00414E 0D          11663                   DEC	C
00414F 28 0E       11664                   JR	Z,SET3
004151 09          11665                   ADD	HL,BC
004152 ED 52       11666                   SBC	HL,DE
004154 19          11667                   ADD	HL,DE
004155 38 F5       11668                   JR	C,SET1
004157 ED 42       11669                   SBC	HL,BC
004159 23          11670                   INC	HL
00415A 5E          11671                   LD	E,(HL)		;LINE NUMBER
00415B 23          11672                   INC	HL
00415C 56          11673                   LD	D,(HL)
00415D EB          11674                   EX	DE,HL
00415E C9          11675   SET2:           RET
00415F             11676   ;
00415F 21 00 00    11677   SET3:           LD	HL,0
004162 18 FA       11678                   JR	SET2
004164             11679   ;
004164             11680   ;SAYLN - PRINT " at line nnnn" MESSAGE.
004164             11681   ;   Inputs: HL = line number
004164             11682   ;  Outputs: Carry=0 if line number is zero.
004164             11683   ;           Carry=1 if line number is non-zero.
004164             11684   ; Destroys: A,B,C,D,E,H,L,F
004164             11685   ;
004164 7C          11686   SAYLN:          LD	A,H
004165 B5          11687                   OR	L
004166 C8          11688                   RET	Z
004167 CD DC 44    11689                   CALL	TELL
00416A 20 61 74 20 11690                   DB	" at line "
       6C 69 6E 65 
       20          
004173 00          11691                   DB	0
004174 0E 00       11692   PBCDL:          LD	C,0
004176 18 02       11693                   JR	PBCD0
004178             11694   ;
004178             11695   ;PBCD - PRINT NUMBER AS DECIMAL INTEGER.
004178             11696   ;   Inputs: HL = number (binary).
004178             11697   ;  Outputs: Carry = 1
004178             11698   ; Destroys: A,B,C,D,E,H,L,F
004178             11699   ;
004178 0E 20       11700   PBCD:           LD	C,' '
00417A 06 05       11701   PBCD0:          LD	B,5
00417C 11 10 27    11702                   LD	DE,10000
00417F AF          11703   PBCD1:          XOR	A
004180 ED 52       11704   PBCD2:          SBC	HL,DE
004182 3C          11705                   INC	A
004183 30 FB       11706                   JR	NC,PBCD2
004185 19          11707                   ADD	HL,DE
004186 3D          11708                   DEC	A
004187 28 04       11709                   JR	Z,PBCD3
004189 CB E1       11710                   SET	4,C
00418B CB E9       11711                   SET	5,C
00418D B1          11712   PBCD3:          OR	C
00418E C4 E4 40    11713                   CALL	NZ,OUTCHR
004191 78          11714                   LD	A,B
004192 FE 05       11715                   CP	5
004194 28 06       11716                   JR	Z,PBCD4
004196 29          11717                   ADD	HL,HL
004197 54          11718                   LD	D,H
004198 5D          11719                   LD	E,L
004199 29          11720                   ADD	HL,HL
00419A 29          11721                   ADD	HL,HL
00419B 19          11722                   ADD	HL,DE
00419C 11 E8 03    11723   PBCD4:          LD	DE,1000
00419F 10 DE       11724                   DJNZ	PBCD1
0041A1 37          11725                   SCF
0041A2 C9          11726                   RET
0041A3             11727   ;
0041A3             11728   ;HANDLE WHOLE ARRAY:
0041A3             11729   ;
0041A3 FD 23       11730   GETV1:          INC	IY
0041A5 FD 23       11731                   INC	IY		;SKIP ()
0041A7 E5          11732                   PUSH	HL		;SET EXIT CONDITIONS
0041A8 DD E1       11733                   POP	IX
0041AA 7A          11734                   LD	A,D
0041AB F6 40       11735                   OR	64		;FLAG ARRAY
0041AD BF          11736                   CP	A
0041AE C9          11737                   RET
0041AF             11738   ;
0041AF             11739   ;PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
0041AF             11740   ;   Inputs: HL, IY as returned from GETVAR (NZ).
0041AF             11741   ;  Outputs: As GETVAR.
0041AF             11742   ; Destroys: everything
0041AF             11743   ;
0041AF CD 1E 43    11744   PUTVAR:         CALL	CREATE
0041B2 FD 7E 00    11745                   LD	A,(IY)
0041B5 FE 28       11746                   CP	'('
0041B7 20 7D       11747                   JR	NZ,GETVZ	;SET EXIT CONDITIONS
0041B9 FD 7E 01    11748                   LD	A,(IY+1)
0041BC FE 29       11749                   CP	')'		;WHOLE ARRAY?
0041BE 28 E3       11750                   JR	Z,GETV1
0041C0 3E 0E       11751   ARRAY:          LD	A,14		;'Bad use of array'
0041C2 C3 26 3F    11752   ERROR3:         JP	ERROR_
0041C5             11753   ;
0041C5             11754   ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
0041C5             11755   ;   Inputs: IY addresses first character.
0041C5             11756   ;  Outputs: Carry set and NZ if illegal character.
0041C5             11757   ;           Z-flag set if variable found, then:
0041C5             11758   ;            A = variable type (0,4,5,128 or 129)
0041C5             11759   ;                (68,69 or 193 for whole array)
0041C5             11760   ;            HL = IX = variable pointer.
0041C5             11761   ;            IY updated
0041C5             11762   ;           If Z-flag & carry reset, then:
0041C5             11763   ;            HL, IY set for subsequent PUTVAR call.
0041C5             11764   ; Destroys: everything
0041C5             11765   ;
0041C5 FD 7E 00    11766   GETVAR:         LD	A,(IY)
0041C8 FE 21       11767                   CP	'!'
0041CA 28 76       11768                   JR	Z,GETV5
0041CC FE 3F       11769                   CP	'?'
0041CE 28 76       11770                   JR	Z,GETV6
0041D0 FE 7C       11771                   CP	'|'
0041D2 28 75       11772                   JR	Z,GETVF
0041D4 FE 24       11773                   CP	'$'
0041D6 28 75       11774                   JR	Z,GETV4
0041D8 CD 92 42    11775                   CALL	LOCATE
0041DB C0          11776                   RET	NZ
0041DC FD 7E 00    11777                   LD	A,(IY)
0041DF FE 28       11778                   CP	'('		;ARRAY?
0041E1 20 4B       11779                   JR	NZ,GETVX	;EXIT
0041E3 FD 7E 01    11780                   LD	A,(IY+1)
0041E6 FE 29       11781                   CP	')'		;WHOLE ARRAY?
0041E8 28 B9       11782                   JR	Z,GETV1
0041EA D5          11783                   PUSH	DE		;SAVE TYPE
0041EB 7E          11784                   LD	A,(HL)
0041EC 23          11785                   INC	HL
0041ED 66          11786                   LD	H,(HL)
0041EE 6F          11787                   LD	L,A		;INDIRECT LINK
0041EF E6 FE       11788                   AND	0FEH
0041F1 B4          11789                   OR	H
0041F2 28 CC       11790                   JR	Z,ARRAY
0041F4 7E          11791                   LD	A,(HL)		;NO. OF DIMENSIONS
0041F5 B7          11792                   OR	A
0041F6 28 C8       11793                   JR	Z,ARRAY
0041F8 23          11794                   INC	HL
0041F9 11 00 00    11795                   LD	DE,0		;ACCUMULATOR
0041FC F5          11796                   PUSH	AF
0041FD FD 23       11797                   INC	IY		;SKIP (
0041FF E5          11798   GETV3:          PUSH	HL
004200 D5          11799                   PUSH	DE
004201 CD 15 18    11800                   CALL	EXPRI		;SUBSCRIPT
004204 D9          11801                   EXX
004205 D1          11802                   POP	DE
004206 E3          11803                   EX	(SP),HL
004207 4E          11804                   LD	C,(HL)
004208 23          11805                   INC	HL
004209 46          11806                   LD	B,(HL)
00420A 23          11807                   INC	HL
00420B E3          11808                   EX	(SP),HL
00420C EB          11809                   EX	DE,HL
00420D D5          11810                   PUSH	DE
00420E CD 9F 36    11811                   CALL	MUL16		;HL=HL*BC
004211 D1          11812                   POP	DE
004212 19          11813                   ADD	HL,DE
004213 EB          11814                   EX	DE,HL
004214 B7          11815                   OR	A
004215 ED 42       11816                   SBC	HL,BC
004217 3E 0F       11817                   LD	A,15
004219 30 A7       11818                   JR	NC,ERROR3	;"Subscript"
00421B E1          11819                   POP	HL
00421C F1          11820                   POP	AF
00421D 3D          11821                   DEC	A		;DIMENSION COUNTER
00421E 20 1C       11822                   JR	NZ,GETV2
004220 CD 90 20    11823                   CALL	BRAKET		;CLOSING BRACKET
004223 F1          11824                   POP	AF		;RESTORE TYPE
004224 E5          11825                   PUSH	HL
004225 CD 8F 36    11826                   CALL	X14OR5		;DE=DE*n
004228 E1          11827                   POP	HL
004229 19          11828                   ADD	HL,DE
00422A 57          11829                   LD	D,A		;TYPE
00422B FD 7E 00    11830                   LD	A,(IY)
00422E FE 3F       11831   GETVX:          CP	'?'
004230 28 26       11832                   JR	Z,GETV9
004232 FE 21       11833                   CP	'!'
004234 28 1E       11834                   JR	Z,GETV8
004236 E5          11835   GETVZ:          PUSH	HL		;SET EXIT CONDITIONS
004237 DD E1       11836                   POP	IX
004239 7A          11837                   LD	A,D
00423A BF          11838                   CP	A
00423B C9          11839                   RET
00423C             11840   ;
00423C F5          11841   GETV2:          PUSH	AF
00423D CD 84 20    11842                   CALL	COMMA
004240 18 BD       11843                   JR	GETV3
004242             11844   ;
004242             11845   ;PROCESS UNARY & BINARY INDIRECTION:
004242             11846   ;
004242 3E 04       11847   GETV5:          LD	A,4		;UNARY 32-BIT INDIRN.
004244 18 09       11848                   JR	GETV7
004246 AF          11849   GETV6:          XOR	A		;UNARY 8-BIT INDIRECTION
004247 18 06       11850                   JR	GETV7
004249 3E 05       11851   GETVF:          LD	A,5		;VARIANT INDIRECTION
00424B 18 02       11852                   JR	GETV7
00424D 3E 80       11853   GETV4:          LD	A,128		;STATIC STRING
00424F ED 62       11854   GETV7:          SBC	HL,HL
004251 F5          11855                   PUSH	AF
004252 18 15       11856                   JR	GETV0
004254             11857   ;
004254 06 04       11858   GETV8:          LD	B,4		;32-BIT BINARY INDIRN.
004256 18 02       11859                   JR	GETVA
004258 06 00       11860   GETV9:          LD	B,0		;8-BIT BINARY INDIRN.
00425A E5          11861   GETVA:          PUSH	HL
00425B DD E1       11862                   POP	IX
00425D 7A          11863                   LD	A,D		;TYPE
00425E FE 81       11864                   CP	129
004260 C8          11865                   RET	Z		;STRING!
004261 C5          11866                   PUSH	BC
004262 CD 07 19    11867                   CALL	LOADN		;LEFT OPERAND
004265 CD F9 1B    11868                   CALL	SFIX
004268 D9          11869                   EXX
004269 E5          11870   GETV0:          PUSH	HL
00426A FD 23       11871                   INC	IY
00426C CD 42 18    11872                   CALL	ITEMI
00426F D9          11873                   EXX
004270 D1          11874                   POP	DE
004271 F1          11875                   POP	AF
004272 19          11876                   ADD	HL,DE
004273 E5          11877                   PUSH	HL
004274 DD E1       11878                   POP	IX
004276 BF          11879                   CP	A
004277 C9          11880                   RET
004278             11881   ;
004278             11882   ;GETDEF - Find entry for FN or PROC in dynamic area.
004278             11883   ;   Inputs: IY addresses byte following "DEF" token.
004278             11884   ;  Outputs: Z flag set if found
004278             11885   ;           Carry set if neither FN or PROC first.
004278             11886   ;           If Z: HL points to entry
004278             11887   ;                 IY addresses delimiter
004278             11888   ; Destroys: A,D,E,H,L,IY,F
004278             11889   ;
004278 FD 7E 01    11890   GETDEF:         LD	A,(IY+1)
00427B CD DE 43    11891                   CALL	RANGE1
00427E D8          11892                   RET	C
00427F FD 7E 00    11893                   LD	A,(IY)
004282 21 D8 54    11894                   LD	HL,FNPTR
004285 FE A4       11895                   CP	TFN
004287 28 43       11896                   JR	Z,LOC2
004289 21 DA 54    11897                   LD	HL,PROPTR
00428C FE F2       11898                   CP	TPROC
00428E 28 3C       11899                   JR	Z,LOC2
004290 37          11900                   SCF
004291 C9          11901                   RET
004292             11902   ;
004292             11903   ;LOCATE - Try to locate variable name in static or
004292             11904   ;dynamic variables.  If illegal first character return
004292             11905   ;carry, non-zero.  If found, return no-carry, zero.
004292             11906   ;If not found, return no-carry, non-zero.
004292             11907   ;   Inputs: IY addresses first character of name.
004292             11908   ;           A=(IY)
004292             11909   ;  Outputs: Z-flag set if found, then:
004292             11910   ;            IY addresses terminator
004292             11911   ;            HL addresses location of variable
004292             11912   ;            D=type of variable:  4 = integer
004292             11913   ;                                 5 = floating point
004292             11914   ;                               129 = string
004292             11915   ; Destroys: A,D,E,H,L,IY,F
004292             11916   ;
004292 D6 40       11917   LOCATE:         SUB	'@'
004294 D8          11918                   RET	C
004295 26 00       11919                   LD	H,0
004297 FE 1B       11920                   CP	'Z'-'@'+1
004299 30 1D       11921                   JR	NC,LOC0		;NOT STATIC
00429B 87          11922                   ADD	A,A
00429C 6F          11923                   LD	L,A
00429D FD 7E 01    11924                   LD	A,(IY+1)	;2nd CHARACTER
0042A0 FE 25       11925                   CP	'%'
0042A2 20 20       11926                   JR	NZ,LOC1		;NOT STATIC
0042A4 FD 7E 02    11927                   LD	A,(IY+2)
0042A7 FE 28       11928                   CP	'('
0042A9 28 19       11929                   JR	Z,LOC1		;NOT STATIC
0042AB 29          11930                   ADD	HL,HL
0042AC 11 00 54    11931                   LD	DE,STAVAR	;STATIC VARIABLES
0042AF 19          11932                   ADD	HL,DE
0042B0 FD 23       11933                   INC	IY
0042B2 FD 23       11934                   INC	IY
0042B4 16 04       11935                   LD	D,4		;INTEGER TYPE
0042B6 AF          11936                   XOR	A
0042B7 C9          11937                   RET
0042B8             11938   ;
0042B8 FE 1F       11939   LOC0:           CP	'_'-'@'
0042BA D8          11940                   RET	C
0042BB FE 3B       11941                   CP	'z'-'@'+1
0042BD 3F          11942                   CCF
0042BE 3D          11943                   DEC	A		;SET NZ
0042BF D8          11944                   RET	C
0042C0 D6 03       11945                   SUB	3
0042C2 87          11946                   ADD	A,A
0042C3 6F          11947                   LD	L,A
0042C4 11 6C 54    11948   LOC1:           LD	DE,DYNVAR	;DYNAMIC VARIABLES
0042C7 2D          11949                   DEC	L
0042C8 2D          11950                   DEC	L
0042C9 37          11951                   SCF
0042CA F8          11952                   RET	M
0042CB 19          11953                   ADD	HL,DE
0042CC 5E          11954   LOC2:           LD	E,(HL)
0042CD 23          11955                   INC	HL
0042CE 56          11956                   LD	D,(HL)
0042CF 7A          11957                   LD	A,D
0042D0 B3          11958                   OR	E
0042D1 28 49       11959                   JR	Z,LOC6		;UNDEFINED VARIABLE
0042D3 62          11960                   LD	H,D
0042D4 6B          11961                   LD	L,E
0042D5 23          11962                   INC	HL		;SKIP LINK
0042D6 23          11963                   INC	HL
0042D7 FD E5       11964                   PUSH	IY
0042D9 7E          11965   LOC3:           LD	A,(HL)		;COMPARE
0042DA 23          11966                   INC	HL
0042DB FD 23       11967                   INC	IY
0042DD FD BE 00    11968                   CP	(IY)
0042E0 28 F7       11969                   JR	Z,LOC3
0042E2 B7          11970                   OR	A		;0=TERMINATOR
0042E3 28 05       11971                   JR	Z,LOC5		;FOUND (MAYBE)
0042E5 FD E1       11972   LOC4:           POP	IY
0042E7 EB          11973                   EX	DE,HL
0042E8 18 E2       11974                   JR	LOC2		;TRY NEXT ENTRY
0042EA             11975   ;
0042EA FD 2B       11976   LOC5:           DEC	IY
0042EC FD 7E 00    11977                   LD	A,(IY)
0042EF FE 28       11978                   CP	'('
0042F1 28 13       11979                   JR	Z,LOCX		;FOUND
0042F3 FD 23       11980                   INC	IY
0042F5 CD D1 43    11981                   CALL	RANGE
0042F8 38 0C       11982                   JR	C,LOCX		;FOUND
0042FA FE 28       11983                   CP	'('
0042FC 28 E7       11984                   JR	Z,LOC4		;KEEP LOOKING
0042FE FD 7E FF    11985                   LD	A,(IY-1)
004301 CD DE 43    11986                   CALL	RANGE1
004304 30 DF       11987                   JR	NC,LOC4		;KEEP LOOKING
004306 D1          11988   LOCX:           POP	DE
004307 FD 7E FF    11989   TYPE:           LD	A,(IY-1)
00430A FE 24       11990                   CP	'$'
00430C 16 81       11991                   LD	D,129
00430E C8          11992                   RET	Z		;STRING
00430F FE 26       11993                   CP	'&'
004311 16 01       11994                   LD	D,1
004313 C8          11995                   RET	Z		;BYTE
004314 FE 25       11996                   CP	'%'
004316 16 04       11997                   LD	D,4
004318 C8          11998                   RET	Z		;INTEGER
004319 14          11999                   INC	D
00431A BF          12000                   CP	A
00431B C9          12001                   RET
00431C             12002   ;
00431C 3C          12003   LOC6:           INC	A		;SET NZ
00431D C9          12004                   RET
00431E             12005   ;
00431E             12006   ;CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
00431E             12007   ;   Inputs: HL, IY as returned from LOCATE (NZ).
00431E             12008   ;  Outputs: As LOCATE, GETDEF.
00431E             12009   ; Destroys: As LOCATE, GETDEF.
00431E             12010   ;
00431E AF          12011   CREATE:         XOR	A
00431F ED 5B E0 54 12012                   LD	DE,(FREE)
004323 72          12013                   LD	(HL),D
004324 2B          12014                   DEC	HL
004325 73          12015                   LD	(HL),E
004326 EB          12016                   EX	DE,HL
004327 77          12017                   LD	(HL),A
004328 23          12018                   INC	HL
004329 77          12019                   LD	(HL),A
00432A 23          12020                   INC	HL
00432B FD 23       12021   LOC7:           INC	IY
00432D CD D1 43    12022                   CALL	RANGE		;END OF VARIABLE?
004330 38 14       12023                   JR	C,LOC8
004332 77          12024                   LD	(HL),A
004333 23          12025                   INC	HL
004334 CD DE 43    12026                   CALL	RANGE1
004337 30 F2       12027                   JR	NC,LOC7
004339 FE 28       12028                   CP	'('
00433B 28 09       12029                   JR	Z,LOC8
00433D FD 7E 01    12030                   LD	A,(IY+1)
004340 FE 28       12031                   CP	'('
004342 28 E7       12032                   JR	Z,LOC7
004344 FD 23       12033                   INC	IY
004346 36 00       12034   LOC8:           LD	(HL),0		;TERMINATOR
004348 23          12035                   INC	HL
004349 E5          12036                   PUSH	HL
00434A CD 07 43    12037                   CALL	TYPE
00434D FD 7E 00    12038                   LD	A,(IY)
004350 FE 28       12039                   CP	'('
004352 3E 02       12040                   LD	A,2		;SIZE OF INDIRECT LINK
004354 28 07       12041                   JR	Z,LOC9
004356 7A          12042                   LD	A,D
004357 B7          12043                   OR	A		;STRING?
004358 F2 5D 43    12044                   JP	P,LOC9
00435B 3E 04       12045                   LD	A,4
00435D 36 00       12046   LOC9:           LD	(HL),0		;INITIALISE TO ZERO
00435F 23          12047                   INC	HL
004360 3D          12048                   DEC	A
004361 20 FA       12049                   JR	NZ,LOC9
004363 22 E0 54    12050                   LD	(FREE),HL
004366 CD 68 32    12051                   CALL	CHECK
004369 E1          12052                   POP	HL
00436A AF          12053                   XOR	A
00436B C9          12054                   RET
00436C             12055   ;
00436C             12056   ;LINNUM - GET LINE NUMBER FROM TEXT STRING
00436C             12057   ;   Inputs: IY = Text Pointer
00436C             12058   ;  Outputs: HL = Line number (zero if none)
00436C             12059   ;           IY updated
00436C             12060   ; Destroys: A,D,E,H,L,IY,F
00436C             12061   ;
00436C CD ED 44    12062   LINNUM:         CALL	NXT
00436F 21 00 00    12063                   LD	HL,0
004372 FD 7E 00    12064   LINNM1:         LD	A,(IY)
004375 D6 30       12065                   SUB	'0'
004377 D8          12066                   RET	C
004378 FE 0A       12067                   CP	10
00437A D0          12068                   RET	NC
00437B FD 23       12069                   INC	IY
00437D 54          12070                   LD	D,H
00437E 5D          12071                   LD	E,L
00437F 29          12072                   ADD	HL,HL		;*2
004380 38 0F       12073                   JR	C,TOOBIGmn
004382 29          12074                   ADD	HL,HL		;*4
004383 38 0C       12075                   JR	C,TOOBIGmn
004385 19          12076                   ADD	HL,DE		;*5
004386 38 09       12077                   JR	C,TOOBIGmn
004388 29          12078                   ADD	HL,HL		;*10
004389 38 06       12079                   JR	C,TOOBIGmn
00438B 5F          12080                   LD	E,A
00438C 16 00       12081                   LD	D,0
00438E 19          12082                   ADD	HL,DE		;ADD IN DIGIT
00438F 30 E1       12083                   JR	NC,LINNM1
004391 3E 14       12084   TOOBIGmn:         LD	A,20
004393 C3 26 3F    12085                   JP	ERROR_		;"Too big"
004396             12086   ;
004396             12087   ;PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
004396             12088   ;   Inputs: IY = text pointer
004396             12089   ;  Outputs: HL = first number (10 by default)
004396             12090   ;           BC = second number (10 by default)
004396             12091   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
004396             12092   ;
004396 CD 6C 43    12093   PAIR:           CALL	LINNUM		;FIRST
004399 7C          12094                   LD	A,H
00439A B5          12095                   OR	L
00439B 20 02       12096                   JR	NZ,PAIR1
00439D 2E 0A       12097                   LD	L,10
00439F CD 18 35    12098   PAIR1:          CALL	TERMQ
0043A2 FD 23       12099                   INC	IY
0043A4 E5          12100                   PUSH	HL
0043A5 21 0A 00    12101                   LD	HL,10
0043A8 C4 6C 43    12102                   CALL	NZ,LINNUM	;SECOND
0043AB E3          12103                   EX	(SP),HL
0043AC C1          12104                   POP	BC
0043AD 78          12105                   LD	A,B
0043AE B1          12106                   OR	C
0043AF C0          12107                   RET	NZ
0043B0 CD 37 3F    12108                   CALL	EXTERR
0043B3 53 69 6C 6C 12109                   DB	"Silly"
       79          
0043B8 00          12110                   DB	0
0043B9             12111   ;
0043B9             12112   ;DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
0043B9             12113   ;   Inputs: IY = text pointer
0043B9             12114   ;  Outputs: HL = points to program text
0043B9             12115   ;           BC = second number (0 by default)
0043B9             12116   ; Destroys: A,B,C,D,E,H,L,IY,F
0043B9             12117   ;
0043B9 CD 6C 43    12118   DLPAIR:         CALL	LINNUM
0043BC E5          12119                   PUSH	HL
0043BD CD 18 35    12120                   CALL	TERMQ
0043C0 28 09       12121                   JR	Z,DLP1
0043C2 FE E7       12122                   CP	TIF
0043C4 28 05       12123                   JR	Z,DLP1
0043C6 FD 23       12124                   INC	IY
0043C8 CD 6C 43    12125                   CALL	LINNUM
0043CB E3          12126   DLP1:           EX	(SP),HL
0043CC CD 25 41    12127                   CALL	FINDL
0043CF C1          12128                   POP	BC
0043D0 C9          12129                   RET
0043D1             12130   ;
0043D1             12131   ;TEST FOR VALID CHARACTER IN VARIABLE NAME:
0043D1             12132   ;   Inputs: IY addresses character
0043D1             12133   ;  Outputs: Carry set if out-of-range.
0043D1             12134   ; Destroys: A,F
0043D1             12135   ;
0043D1 FD 7E 00    12136   RANGE:          LD	A,(IY)
0043D4 FE 24       12137                   CP	'$'
0043D6 D8          12138                   RET	C
0043D7 FE 27       12139                   CP	'&'+1
0043D9 3F          12140                   CCF
0043DA D0          12141                   RET	NC
0043DB FE 28       12142                   CP	'('
0043DD C8          12143                   RET	Z
0043DE FE 30       12144   RANGE1:         CP	'0'
0043E0 D8          12145                   RET	C
0043E1 FE 3A       12146                   CP	'9'+1
0043E3 3F          12147                   CCF
0043E4 D0          12148                   RET	NC
0043E5 FE 40       12149                   CP	'@'		;V2.4
0043E7 C8          12150                   RET	Z
0043E8 FE 41       12151   RANGE2:         CP	'A'
0043EA D8          12152                   RET	C
0043EB FE 5B       12153                   CP	'Z'+1
0043ED 3F          12154                   CCF
0043EE D0          12155                   RET	NC
0043EF FE 5F       12156                   CP	'_'
0043F1 D8          12157                   RET	C
0043F2 FE 7B       12158                   CP	'z'+1
0043F4 3F          12159                   CCF
0043F5 C9          12160                   RET
0043F6             12161   ;
0043F6             12162   ;LEXAN - LEXICAL ANALYSIS.
0043F6             12163   ;  Bit 0,C: 1=left, 0=right
0043F6             12164   ;  Bit 3,C: 1=in HEX
0043F6             12165   ;  Bit 4,C: 1=accept line number
0043F6             12166   ;  Bit 5,C: 1=in variable, FN, PROC
0043F6             12167   ;  Bit 6,C: 1=in REM, DATA, *
0043F6             12168   ;  Bit 7,C: 1=in quotes
0043F6             12169   ;   Inputs: IY addresses source string
0043F6             12170   ;           DE addresses destination string
0043F6             12171   ;           (must be page boundary)
0043F6             12172   ;           C  sets initial mode
0043F6             12173   ;  Outputs: DE, IY updated
0043F6             12174   ;           A holds carriage return
0043F6             12175   ;
0043F6 12          12176   LEXAN1:         LD	(DE),A		;TRANSFER TO BUFFER
0043F7 13          12177                   INC	DE		;INCREMENT POINTERS
0043F8 FD 23       12178                   INC	IY
0043FA 7B          12179   LEXAN2:         LD	A,E		;MAIN ENTRY
0043FB FE FC       12180                   CP	252		;TEST LENGTH
0043FD 3E 13       12181                   LD	A,19
0043FF D2 26 3F    12182                   JP	NC,ERROR_	;'String too long'
004402 FD 7E 00    12183                   LD	A,(IY)
004405 FE 0D       12184                   CP	CR
004407 C8          12185                   RET	Z		;END OF LINE
004408 CD DE 43    12186                   CALL	RANGE1
00440B 30 04       12187                   JR	NC,LEXAN3
00440D CB A9       12188                   RES	5,C		;NOT IN VARIABLE
00440F CB 99       12189                   RES	3,C		;NOT IN HEX
004411 FE 20       12190   LEXAN3:         CP	' '
004413 28 E1       12191                   JR	Z,LEXAN1	;PASS SPACES
004415 FE 2C       12192                   CP	','
004417 28 DD       12193                   JR	Z,LEXAN1	;PASS COMMAS
004419 FE 47       12194                   CP	'G'
00441B 38 02       12195                   JR	C,LEXAN4
00441D CB 99       12196                   RES	3,C		;NOT IN HEX
00441F FE 22       12197   LEXAN4:         CP	'"'
004421 20 05       12198                   JR	NZ,LEXAN5
004423 CB 11       12199                   RL	C
004425 3F          12200                   CCF			;TOGGLE C7
004426 CB 19       12201                   RR	C
004428 CB 61       12202   LEXAN5:         BIT	4,C
00442A 28 10       12203                   JR	Z,LEXAN6
00442C CB A1       12204                   RES	4,C
00442E C5          12205                   PUSH	BC
00442F D5          12206                   PUSH	DE
004430 CD 6C 43    12207                   CALL	LINNUM		;GET LINE NUMBER
004433 D1          12208                   POP	DE
004434 C1          12209                   POP	BC
004435 7C          12210                   LD	A,H
004436 B5          12211                   OR	L
004437 C4 A1 44    12212                   CALL	NZ,ENCODE	;ENCODE LINE NUMBER
00443A 18 BE       12213                   JR	LEXAN2		;CONTINUE
00443C             12214   ;
00443C 0D          12215   LEXAN6:         DEC	C
00443D 28 09       12216                   JR	Z,LEXAN7	;C=1 (LEFT)
00443F 0C          12217                   INC	C
004440 20 B4       12218                   JR	NZ,LEXAN1
004442 B7          12219                   OR	A
004443 F4 85 3F    12220                   CALL	P,LEX		;TOKENISE IF POSS.
004446 18 12       12221                   JR	LEXAN8
004448             12222   ;
004448 FE 2A       12223   LEXAN7:         CP	'*'
00444A 28 16       12224                   JR	Z,LEXAN9
00444C B7          12225                   OR	A
00444D F4 85 3F    12226                   CALL	P,LEX		;TOKENISE IF POSS.
004450 FE 8F       12227                   CP	TOKLO
004452 38 06       12228                   JR	C,LEXAN8
004454 FE 94       12229                   CP	TOKHI+1
004456 30 02       12230                   JR	NC,LEXAN8
004458 C6 40       12231                   ADD	A,OFFSET	;LEFT VERSION
00445A FE F4       12232   LEXAN8:         CP	TREM
00445C 28 04       12233                   JR	Z,LEXAN9
00445E FE DC       12234                   CP	TDATA
004460 20 02       12235                   JR	NZ,LEXANA
004462 CB F1       12236   LEXAN9:         SET	6,C		;QUIT TOKENISING
004464 FE A4       12237   LEXANA:         CP	TFN
004466 28 09       12238                   JR	Z,LEXANB
004468 FE F2       12239                   CP	TPROC
00446A 28 05       12240                   JR	Z,LEXANB
00446C CD E8 43    12241                   CALL	RANGE2
00446F 38 02       12242                   JR	C,LEXANC
004471 CB E9       12243   LEXANB:         SET	5,C		;IN VARIABLE/FN/PROC
004473 FE 26       12244   LEXANC:         CP	'&'
004475 20 02       12245                   JR	NZ,LEXAND
004477 CB D9       12246                   SET	3,C		;IN HEX
004479 21 98 44    12247   LEXAND:         LD	HL,LIST1
00447C C5          12248                   PUSH	BC
00447D 01 06 00    12249                   LD	BC,LIST1L
004480 ED B1       12250                   CPIR
004482 C1          12251                   POP	BC
004483 20 02       12252                   JR	NZ,LEXANE
004485 CB E1       12253                   SET	4,C		;ACCEPT LINE NUMBER
004487 21 9C 44    12254   LEXANE:         LD	HL,LIST2
00448A C5          12255                   PUSH	BC
00448B 01 05 00    12256                   LD	BC,LIST2L
00448E ED B1       12257                   CPIR
004490 C1          12258                   POP	BC
004491 20 02       12259                   JR	NZ,LEXANF
004493 CB C1       12260                   SET	0,C		;ENTER LEFT MODE
004495 C3 F6 43    12261   LEXANF:         JP	LEXAN1
004498             12262   ;
004498 E5          12263   LIST1:          DB	TGOTO
004499 E4          12264                   DB	TGOSUB
00449A F7          12265                   DB	TRESTORE
00449B FC          12266                   DB	TTRACE
00449C 8C          12267   LIST2:          DB	TTHEN
00449D 8B          12268                   DB	TELSE
00449E             12269   LIST1L:         EQU	$-LIST1
00449E F5          12270                   DB	TREPEAT
00449F 85          12271                   DB	TERROR
0044A0 3A          12272                   DB	':'
0044A1             12273   LIST2L:         EQU	$-LIST2
0044A1             12274   ;
0044A1             12275   ;ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
0044A1             12276   ;   Inputs: HL=line number, DE=string pointer
0044A1             12277   ;  Outputs: DE updated, BIT 4,C set.
0044A1             12278   ; Destroys: A,B,C,D,E,H,L,F
0044A1             12279   ;
0044A1 CB E1       12280   ENCODE:         SET	4,C
0044A3 EB          12281                   EX	DE,HL
0044A4 36 8D       12282                   LD	(HL),TLINO
0044A6 23          12283                   INC	HL
0044A7 7A          12284                   LD	A,D
0044A8 E6 C0       12285                   AND	0C0H
0044AA 0F          12286                   RRCA
0044AB 0F          12287                   RRCA
0044AC 47          12288                   LD	B,A
0044AD 7B          12289                   LD	A,E
0044AE E6 C0       12290                   AND	0C0H
0044B0 B0          12291                   OR	B
0044B1 0F          12292                   RRCA
0044B2 0F          12293                   RRCA
0044B3 EE 54       12294                   XOR	01010100B
0044B5 77          12295                   LD	(HL),A
0044B6 23          12296                   INC	HL
0044B7 7B          12297                   LD	A,E
0044B8 E6 3F       12298                   AND	3FH
0044BA F6 40       12299                   OR	'@'
0044BC 77          12300                   LD	(HL),A
0044BD 23          12301                   INC	HL
0044BE 7A          12302                   LD	A,D
0044BF E6 3F       12303                   AND	3FH
0044C1 F6 40       12304                   OR	'@'
0044C3 77          12305                   LD	(HL),A
0044C4 23          12306                   INC	HL
0044C5 EB          12307                   EX	DE,HL
0044C6 C9          12308                   RET
0044C7             12309   ;
0044C7             12310   ;TEXT - OUTPUT MESSAGE.
0044C7             12311   ;   Inputs: HL addresses text (terminated by nul)
0044C7             12312   ;  Outputs: HL addresses character following nul.
0044C7             12313   ; Destroys: A,H,L,F
0044C7             12314   ;
0044C7 2A EE 54    12315   REPORT:         LD	HL,(ERRTXT)
0044CA 7E          12316   TEXT_:          LD	A,(HL)
0044CB 23          12317                   INC	HL
0044CC B7          12318                   OR	A
0044CD C8          12319                   RET	Z
0044CE FE 0A       12320                   CP	LF
0044D0 28 05       12321                   JR	Z,TEXTLF	;Token for TINT
0044D2 CD FD 40    12322                   CALL	OUT
0044D5 18 F3       12323                   JR	TEXT_
0044D7             12324   ;
0044D7 CD E4 40    12325   TEXTLF:         CALL	OUTCHR
0044DA 18 EE       12326                   JR	TEXT_
0044DC             12327   ;
0044DC             12328   ;TELL - OUTPUT MESSAGE.
0044DC             12329   ;   Inputs: Text follows subroutine call (term=nul)
0044DC             12330   ; Destroys: A,F
0044DC             12331   ;
0044DC E3          12332   TELL:           EX	(SP),HL		;GET RETURN ADDRESS
0044DD CD CA 44    12333                   CALL	TEXT_
0044E0 E3          12334                   EX	(SP),HL
0044E1 C9          12335                   RET
0044E2             12336   ;
0044E2             12337   ; NLIST - Check for end of list
0044E2             12338   ;
0044E2 CD ED 44    12339   NLIST:          CALL	NXT
0044E5 FE 2C       12340                   CP	','		;ANOTHER VARIABLE?
0044E7 28 0A       12341                   JR	Z,NXT1
0044E9 C1          12342                   POP	BC		;DITCH RETURN ADDRESS
0044EA C3 7B 24    12343                   JP	XEQ
0044ED             12344   ;
0044ED FD 7E 00    12345   NXT:            LD	A,(IY)
0044F0 FE 20       12346                   CP	' '
0044F2 C0          12347                   RET	NZ
0044F3 FD 23       12348   NXT1:           INC	IY
0044F5 18 F6       12349                   JR	NXT
0044F7             12350   ;
0044F7             12351   ;                END	START
0044F7             12352   ; --- End main.asm ---
0044F7             12353   
0044F7             12354   ; --- Begin math.asm ---
0044F7             12355   ;
0044F7             12356   ;Automatically created from original source on 2024-12-15 15:29:12
0044F7             12357   ;
0044F7             12358                   .ASSUME ADL = 0
0044F7             12359   ;	.ORG 0x0000
0044F7             12360   ;                SEGMENT CODE
0044F7             12361   ;
0044F7             12362   ;Z80 FLOATING POINT PACKAGE
0044F7             12363   ;(C) COPYRIGHT  R.T.RUSSELL  1986-2024
0044F7             12364   ;VERSION 0.0, 26-10-1986
0044F7             12365   ;VERSION 0.1, 14-12-1988 (BUG FIX)
0044F7             12366   ;VERSION 5.0, 16-06-2024 (SHIFTS ADDED)
0044F7             12367   ;
0044F7             12368   ;BINARY FLOATING POINT REPRESENTATION:
0044F7             12369   ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
0044F7             12370   ;    8 BIT EXCESS-128 SIGNED EXPONENT
0044F7             12371   ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
0044F7             12372   ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
0044F7             12373   ;
0044F7             12374   ;BINARY INTEGER REPRESENTATION:
0044F7             12375   ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
0044F7             12376   ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
0044F7             12377   ;
0044F7             12378   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
0044F7             12379   ;                            EXPONENT - C
0044F7             12380   ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
0044F7             12381   ;                               EXPONENT - B
0044F7             12382   ;
0044F7             12383   ;Error codes:
0044F7             12384   ;
0044F7             12385   BADOP:          EQU	1		;Bad operation code
0044F7             12386   DIVBY0:         EQU	18		;Division by zero
0044F7             12387   TOOBIG:         EQU	20		;Too big
0044F7             12388   NGROOT:         EQU	21		;Negative root
0044F7             12389   LOGRNG:         EQU	22		;Log range
0044F7             12390   ACLOST:         EQU	23		;Accuracy lost
0044F7             12391   EXPRNG:         EQU	24		;Exp range
0044F7             12392   ;
0044F7             12393   ;                XDEF	FPP
0044F7             12394   ;                XREF	STORE5
0044F7             12395   ;                XREF	DLOAD5
0044F7             12396   ;
0044F7             12397   ;Call entry and despatch code:
0044F7             12398   ;
0044F7 FD E5       12399   FPP:            PUSH	IY		;Save IY
0044F9 FD 21 00 00 12400                   LD	IY,0
0044FD FD 39       12401                   ADD	IY,SP		;Save SP in IY
0044FF CD 0E 45    12402                   CALL	OP		;Perform operation
004502 BF          12403                   CP	A		;Good return (Z, NC)
004503 FD E1       12404   EXITmat:           POP	IY		;Restore IY
004505 C9          12405                   RET			;Return to caller
004506             12406   ;
004506             12407   ;Error exit:
004506             12408   ;
004506 3E 01       12409   BADmat:            LD	A,BADOP		;"Bad operation code"
004508 FD F9       12410   ERROR_mat:         LD	SP,IY		;Restore SP from IY
00450A B7          12411                   OR	A		;Set NZ
00450B 37          12412                   SCF			;Set C
00450C 18 F5       12413                   JR	EXITmat
00450E             12414   ;
00450E             12415   ;Perform operation or function:
00450E             12416   ;
00450E             12417   ; OP:             CP	(RTABLE-DTABLE)/2
00450E FE 2E       12418   OP:             CP	RTABLE-DTABLE/2
004510 30 F4       12419                   JR	NC,BADmat
004512             12420                   ; CP	(FTABLE-DTABLE)/2
004512 FE 10       12421                   CP	FTABLE-DTABLE/2
004514 30 07       12422                   JR	NC,DISPAT
004516 08          12423                   EX	AF,AF'
004517 78          12424                   LD	A,B
004518 B1          12425                   OR	C		;Both integer?
004519 C4 87 4E    12426                   CALL	NZ,FLOATA	;No, so float both
00451C 08          12427                   EX	AF,AF'
00451D E5          12428   DISPAT:         PUSH	HL
00451E 21 2E 45    12429                   LD	HL,DTABLE
004521 C5          12430                   PUSH	BC
004522 87          12431                   ADD	A,A		;A = op-code * 2
004523 4F          12432                   LD	C,A
004524 06 00       12433                   LD	B,0		;BC = op-code * 2
004526 09          12434                   ADD	HL,BC
004527 7E          12435                   LD	A,(HL)		;Get low byte
004528 23          12436                   INC	HL
004529 66          12437                   LD	H,(HL)		;Get high byte
00452A 6F          12438                   LD	L,A
00452B C1          12439                   POP	BC
00452C E3          12440                   EX	(SP),HL
00452D C9          12441                   RET			;Off to routine
00452E             12442   ;
00452E             12443   ;Despatch table:
00452E             12444   ;
00452E AD 45       12445   DTABLE:         DW	IAND		;0  & (INTEGER)
004530 FA 45       12446                   DW	IBDIV		;1  DIV
004532 BF 45       12447                   DW	IEOR		;2  EOR
004534 E3 45       12448                   DW	IMOD		;3  MOD
004536 D1 45       12449                   DW	IOR		;4  |
004538 F8 47       12450                   DW	ILE		;5  <=
00453A 05 48       12451                   DW	INE		;6  <>
00453C ED 47       12452                   DW	IGE		;7  >=
00453E D6 47       12453                   DW	ILT		;8  <
004540 10 48       12454                   DW	IEQ		;9  =
004542 C4 46       12455                   DW	IMUL		;10 *
004544 1D 46       12456                   DW	IADD		;11 +
004546 E1 47       12457                   DW	IGT		;12 >
004548 07 46       12458                   DW	ISUB		;13 -
00454A 3F 47       12459                   DW	IPOW		;14 ^
00454C 7C 46       12460                   DW	IDIV		;15 /
00454E             12461   ;
00454E 60 48       12462   FTABLE:         DW	ABS		;16 ABS
004550 BC 4B       12463                   DW	ACS		;17 ACS
004552 18 4B       12464                   DW	ASN		;18 ASN
004554 3D 4B       12465                   DW	ATN		;19 ATN
004556 56 49       12466                   DW	COS		;20 COS
004558 8A 48       12467                   DW	DEG		;21 DEG
00455A FB 49       12468                   DW	EXP		;22 EXP
00455C D0 48       12469                   DW	INT_		;23 INT_
00455E 86 4A       12470                   DW	LN		;24 LN
004560 06 4B       12471                   DW	LOG		;25 LOG
004562 6B 48       12472                   DW	CPL_		;26 NOT
004564 92 48       12473                   DW	RAD		;27 RAD
004566 A8 48       12474                   DW	SGN		;28 SGN
004568 61 49       12475                   DW	SIN		;29 SIN
00456A E6 48       12476                   DW	SQR		;30 SQR
00456C 39 49       12477                   DW	TAN		;31 TAN
00456E             12478   ;
00456E 03 4F       12479                   DW	ZEROmat		;32 ZERO
004570 DA 49       12480                   DW	FONE		;33 FONE
004572 14 48       12481                   DW	TRUE		;34 TRUE
004574 7E 48       12482                   DW	PI		;35 PI
004576             12483   ;
004576 B8 48       12484                   DW	VAL		;36 VAL
004578 C4 4B       12485                   DW	STRmat		;37 STR$
00457A             12486   ;
00457A D9 4D       12487                   DW	SFIXmat		;38 FIX
00457C 94 4E       12488                   DW	SFLOAT		;39 FLOAT
00457E             12489   ;
00457E D9 4E       12490                   DW	FTEST		;40 TEST
004580 EA 4E       12491                   DW	FCOMP		;41 COMPARE
004582             12492   ;
004582 1F 48       12493                   DW	ISHL		;42 <<
004584 1F 48       12494                   DW	ISHX		;43 <<<
004586 2C 48       12495                   DW	ISAR		;44 >>
004588 3E 48       12496                   DW	ISHR		;45 >>>
00458A             12497   ;
00458A AA 45       12498   RTABLE:         DW	FAND		;& (FLOATING-POINT)
00458C F7 45       12499                   DW	FBDIV		;DIV
00458E BC 45       12500                   DW	FEOR		;EOR
004590 E0 45       12501                   DW	FMOD		;MOD
004592 CE 45       12502                   DW	FOR		;|
004594 F3 47       12503                   DW	FLE		;<=
004596 00 48       12504                   DW	FNE		;<>
004598 E8 47       12505                   DW	FGE		;>=
00459A D1 47       12506                   DW	FLT		;<
00459C 0B 48       12507                   DW	FEQ		;=
00459E EF 46       12508                   DW	FMUL		;*
0045A0 27 46       12509                   DW	FADD		;+
0045A2 DC 47       12510                   DW	FGT		;>
0045A4 11 46       12511                   DW	FSUB		;-
0045A6 A7 47       12512                   DW	FPOW		;^
0045A8 7F 46       12513                   DW	FDIV		;/
0045AA             12514   ;
0045AA             12515   ;ARITHMETIC AND LOGICAL OPERATORS:
0045AA             12516   ;All take two arguments, in HLH'L'C & DED'E'B.
0045AA             12517   ;Output in HLH'L'C
0045AA             12518   ;All registers except IX, IY destroyed.
0045AA             12519   ; (N.B. FPOW destroys IX).
0045AA             12520   ;
0045AA             12521   ;FAND - Floating-point AND.
0045AA             12522   ;IAND - Integer AND.
0045AA             12523   ;
0045AA CD D0 4D    12524   FAND:           CALL	FIX2
0045AD 7C          12525   IAND:           LD	A,H
0045AE A2          12526                   AND	D
0045AF 67          12527                   LD	H,A
0045B0 7D          12528                   LD	A,L
0045B1 A3          12529                   AND	E
0045B2 6F          12530                   LD	L,A
0045B3 D9          12531                   EXX
0045B4 7C          12532                   LD	A,H
0045B5 A2          12533                   AND	D
0045B6 67          12534                   LD	H,A
0045B7 7D          12535                   LD	A,L
0045B8 A3          12536                   AND	E
0045B9 6F          12537                   LD	L,A
0045BA D9          12538                   EXX
0045BB C9          12539                   RET
0045BC             12540   ;
0045BC             12541   ;FEOR - Floating-point exclusive-OR.
0045BC             12542   ;IEOR - Integer exclusive-OR.
0045BC             12543   ;
0045BC CD D0 4D    12544   FEOR:           CALL	FIX2
0045BF 7C          12545   IEOR:           LD	A,H
0045C0 AA          12546                   XOR	D
0045C1 67          12547                   LD	H,A
0045C2 7D          12548                   LD	A,L
0045C3 AB          12549                   XOR	E
0045C4 6F          12550                   LD	L,A
0045C5 D9          12551                   EXX
0045C6 7C          12552                   LD	A,H
0045C7 AA          12553                   XOR	D
0045C8 67          12554                   LD	H,A
0045C9 7D          12555                   LD	A,L
0045CA AB          12556                   XOR	E
0045CB 6F          12557                   LD	L,A
0045CC D9          12558                   EXX
0045CD C9          12559                   RET
0045CE             12560   ;
0045CE             12561   ;FOR - Floating-point OR.
0045CE             12562   ;IOR - Integer OR.
0045CE             12563   ;
0045CE CD D0 4D    12564   FOR:            CALL	FIX2
0045D1 7C          12565   IOR:            LD	A,H
0045D2 B2          12566                   OR	D
0045D3 67          12567                   LD	H,A
0045D4 7D          12568                   LD	A,L
0045D5 B3          12569                   OR	E
0045D6 6F          12570                   LD	L,A
0045D7 D9          12571                   EXX
0045D8 7C          12572                   LD	A,H
0045D9 B2          12573                   OR	D
0045DA 67          12574                   LD	H,A
0045DB 7D          12575                   LD	A,L
0045DC B3          12576                   OR	E
0045DD 6F          12577                   LD	L,A
0045DE D9          12578                   EXX
0045DF C9          12579                   RET
0045E0             12580   ;
0045E0             12581   ;FMOD - Floating-point remainder.
0045E0             12582   ;IMOD - Integer remainder.
0045E0             12583   ;
0045E0 CD D0 4D    12584   FMOD:           CALL	FIX2
0045E3 7C          12585   IMOD:           LD	A,H
0045E4 AA          12586                   XOR	D		;DIV RESULT SIGN
0045E5 CB 7C       12587                   BIT	7,H
0045E7 CD D7 50    12588                   CALL	ABS2		;MAKE BOTH POSITIVE
0045EA 3E DF       12589                   LD	A,-33
0045EC CD 13 50    12590                   CALL	DIVA		;DIVIDE
0045EF D9          12591                   EXX
0045F0 0E 00       12592                   LD	C,0		;INTEGER MARKER
0045F2 08          12593                   EX	AF,AF'
0045F3 C8          12594                   RET	Z
0045F4 C3 E8 4D    12595                   JP	NEGATE
0045F7             12596   ;
0045F7             12597   ;BDIV - Integer division.
0045F7             12598   ;
0045F7 CD D0 4D    12599   FBDIV:          CALL	FIX2
0045FA CD E3 45    12600   IBDIV:          CALL	IMOD
0045FD B7          12601                   OR	A
0045FE CD BE 4E    12602                   CALL	SWAP
004601 0E 00       12603                   LD	C,0
004603 F0          12604                   RET	P
004604 C3 E8 4D    12605                   JP	NEGATE
004607             12606   ;
004607             12607   ;ISUB - Integer subtraction.
004607             12608   ;FSUB - Floating point subtraction with rounding.
004607             12609   ;
004607 CD 46 4F    12610   ISUB:           CALL	SUB
00460A E0          12611                   RET	PO
00460B CD 40 4F    12612                   CALL	ADD
00460E CD 8B 4E    12613                   CALL	FLOAT2
004611 7A          12614   FSUB:           LD	A,D
004612 EE 80       12615                   XOR	80H		;CHANGE SIGN THEN ADD
004614 57          12616                   LD	D,A
004615 18 10       12617                   JR	FADD
004617             12618   ;
004617             12619   ;Reverse subtract.
004617             12620   ;
004617 7C          12621   RSUB:           LD	A,H
004618 EE 80       12622                   XOR	80H
00461A 67          12623                   LD	H,A
00461B 18 0A       12624                   JR	FADD
00461D             12625   ;
00461D             12626   ;IADD - Integer addition.
00461D             12627   ;FADD - Floating point addition with rounding.
00461D             12628   ;
00461D CD 40 4F    12629   IADD:           CALL	ADD
004620 E0          12630                   RET	PO
004621 CD 46 4F    12631                   CALL	SUB
004624 CD 8B 4E    12632                   CALL	FLOAT2
004627 05          12633   FADD:           DEC	B
004628 04          12634                   INC	B
004629 C8          12635                   RET	Z		;ARG 2 ZERO
00462A 0D          12636                   DEC	C
00462B 0C          12637                   INC	C
00462C CA BE 4E    12638                   JP	Z,SWAP		;ARG 1 ZERO
00462F D9          12639                   EXX
004630 01 00 00    12640                   LD	BC,0		;INITIALISE
004633 D9          12641                   EXX
004634 7C          12642                   LD	A,H
004635 AA          12643                   XOR	D		;XOR SIGNS
004636 F5          12644                   PUSH	AF
004637 78          12645                   LD	A,B
004638 B9          12646                   CP	C		;COMPARE EXPONENTS
004639 DC BE 4E    12647                   CALL	C,SWAP		;MAKE DED'E'B LARGEST
00463C 78          12648                   LD	A,B
00463D CB FC       12649                   SET	7,H		;IMPLIED 1
00463F C4 C0 4D    12650                   CALL	NZ,FIX		;ALIGN
004642 F1          12651                   POP	AF
004643 7A          12652                   LD	A,D		;SIGN OF LARGER
004644 CB FA       12653                   SET	7,D		;IMPLIED 1
004646 FA 53 46    12654                   JP	M,FADD3		;SIGNS DIFFERENT
004649 CD 40 4F    12655                   CALL	ADD		;HLH'L'=HLH'L'+DED'E'
00464C DC C6 4E    12656                   CALL	C,DIV2		;NORMALISE
00464F CB FC       12657                   SET	7,H
004651 18 0A       12658                   JR	FADD4
004653             12659   ;
004653 CD 46 4F    12660   FADD3:          CALL	SUB		;HLH'L'=HLH'L'-DED'E'
004656 DC FC 4D    12661                   CALL	C,NEG		;NEGATE HLH'L'B'C'
004659 CD 68 4E    12662                   CALL	FLO48
00465C 2F          12663                   CPL			;CHANGE RESULT SIGN
00465D D9          12664   FADD4:          EXX
00465E EB          12665                   EX	DE,HL
00465F 21 00 80    12666                   LD	HL,8000H
004662 B7          12667                   OR	A		;CLEAR CARRY
004663 ED 42       12668                   SBC	HL,BC
004665 EB          12669                   EX	DE,HL
004666 D9          12670                   EXX
004667 CC B8 4E    12671                   CALL	Z,ODD		;ROUND UNBIASSED
00466A DC AA 4E    12672                   CALL	C,ADD1		;ROUND UP
00466D DC D2 4E    12673                   CALL	C,INCC
004670 CB BC       12674                   RES	7,H
004672 0D          12675                   DEC	C
004673 0C          12676                   INC	C
004674 CA 03 4F    12677                   JP	Z,ZEROmat
004677 B7          12678                   OR	A		;RESULT SIGNQ
004678 F0          12679                   RET	P		;POSITIVE
004679 CB FC       12680                   SET	7,H		;NEGATIVE
00467B C9          12681                   RET
00467C             12682   ;
00467C             12683   ;IDIV - Integer division.
00467C             12684   ;FDIV - Floating point division with rounding.
00467C             12685   ;
00467C CD 8B 4E    12686   IDIV:           CALL	FLOAT2
00467F 05          12687   FDIV:           DEC	B		;TEST FOR ZERO
004680 04          12688                   INC	B
004681 3E 12       12689                   LD	A,DIVBY0
004683 CA 08 45    12690                   JP	Z,ERROR_mat		;"Division by zero"
004686 0D          12691                   DEC	C		;TEST FOR ZERO
004687 0C          12692                   INC	C
004688 C8          12693                   RET	Z
004689 7C          12694                   LD	A,H
00468A AA          12695                   XOR	D		;CALC. RESULT SIGN
00468B 08          12696                   EX	AF,AF'		;SAVE SIGN
00468C CB FA       12697                   SET	7,D		;REPLACE IMPLIED 1's
00468E CB FC       12698                   SET	7,H
004690 C5          12699                   PUSH	BC		;SAVE EXPONENTS
004691 42          12700                   LD	B,D		;LOAD REGISTERS
004692 4B          12701                   LD	C,E
004693 11 00 00    12702                   LD	DE,0
004696 D9          12703                   EXX
004697 42          12704                   LD	B,D
004698 4B          12705                   LD	C,E
004699 11 00 00    12706                   LD	DE,0
00469C 3E E0       12707                   LD	A,-32		;LOOP COUNTER
00469E CD 13 50    12708                   CALL	DIVA		;DIVIDE
0046A1 D9          12709                   EXX
0046A2 CB 7A       12710                   BIT	7,D
0046A4 D9          12711                   EXX
0046A5 CC 2E 50    12712                   CALL	Z,DIVB		;NORMALISE & INC A
0046A8 EB          12713                   EX	DE,HL
0046A9 D9          12714                   EXX
0046AA CB 38       12715                   SRL	B		;DIVISOR/2
0046AC CB 19       12716                   RR	C
0046AE B7          12717                   OR	A		;CLEAR CARRY
0046AF ED 42       12718                   SBC	HL,BC		;REMAINDER-DIVISOR/2
0046B1 3F          12719                   CCF
0046B2 EB          12720                   EX	DE,HL		;RESULT IN HLH'L'
0046B3 CC B8 4E    12721                   CALL	Z,ODD		;ROUND UNBIASSED
0046B6 DC AA 4E    12722                   CALL	C,ADD1		;ROUND UP
0046B9 C1          12723                   POP	BC		;RESTORE EXPONENTS
0046BA DC D2 4E    12724                   CALL	C,INCC
0046BD 1F          12725                   RRA			;LSB OF A TO CARRY
0046BE 79          12726                   LD	A,C		;COMPUTE NEW EXPONENT
0046BF 98          12727                   SBC	A,B
0046C0 3F          12728                   CCF
0046C1 C3 28 47    12729                   JP	CHKOVF
0046C4             12730   ;
0046C4             12731   ;IMUL - Integer multiplication.
0046C4             12732   ;
0046C4 7C          12733   IMUL:           LD	A,H
0046C5 AA          12734                   XOR	D
0046C6 CD D7 50    12735                   CALL	ABS2		;MAKE BOTH POSITIVE
0046C9 3E DF       12736                   LD	A,-33
0046CB CD 41 50    12737                   CALL	MULA		;MULTIPLY
0046CE D9          12738                   EXX
0046CF 0E BF       12739                   LD	C,191		;PRESET EXPONENT
0046D1 CD E3 4E    12740                   CALL	TESTmat		;TEST RANGE
0046D4 20 0D       12741                   JR	NZ,IMUL1	;TOO BIG
0046D6 CB 7A       12742                   BIT	7,D
0046D8 20 09       12743                   JR	NZ,IMUL1
0046DA CD BE 4E    12744                   CALL	SWAP
0046DD 4A          12745                   LD	C,D		;INTEGER MARKER
0046DE 08          12746                   EX	AF,AF'
0046DF F0          12747                   RET	P
0046E0 C3 E8 4D    12748                   JP	NEGATE
0046E3             12749   ;
0046E3 0D          12750   IMUL1:          DEC	C
0046E4 CD AA 50    12751                   CALL	SLA8
0046E7 F2 E3 46    12752                   JP	P,IMUL1		;NORMALISE
0046EA 08          12753                   EX	AF,AF'
0046EB F8          12754                   RET	M
0046EC CB BC       12755                   RES	7,H		;POSITIVE
0046EE C9          12756                   RET
0046EF             12757   ;
0046EF             12758   ;FMUL - Floating point multiplication with rounding.
0046EF             12759   ;
0046EF 05          12760   FMUL:           DEC	B		;TEST FOR ZERO
0046F0 04          12761                   INC	B
0046F1 CA 03 4F    12762                   JP	Z,ZEROmat
0046F4 0D          12763                   DEC	C		;TEST FOR ZERO
0046F5 0C          12764                   INC	C
0046F6 C8          12765                   RET	Z
0046F7 7C          12766                   LD	A,H
0046F8 AA          12767                   XOR	D		;CALC. RESULT SIGN
0046F9 08          12768                   EX	AF,AF'
0046FA CB FA       12769                   SET	7,D		;REPLACE IMPLIED 1's
0046FC CB FC       12770                   SET	7,H
0046FE C5          12771                   PUSH	BC		;SAVE EXPONENTS
0046FF 44          12772                   LD	B,H		;LOAD REGISTERS
004700 4D          12773                   LD	C,L
004701 21 00 00    12774                   LD	HL,0
004704 D9          12775                   EXX
004705 44          12776                   LD	B,H
004706 4D          12777                   LD	C,L
004707 21 00 00    12778                   LD	HL,0
00470A 3E E0       12779                   LD	A,-32		;LOOP COUNTER
00470C CD 41 50    12780                   CALL	MULA		;MULTIPLY
00470F DC 55 50    12781                   CALL	C,MULB		;NORMALISE & INC A
004712 D9          12782                   EXX
004713 E5          12783                   PUSH	HL
004714 21 00 80    12784                   LD	HL,8000H
004717 B7          12785                   OR	A		;CLEAR CARRY
004718 ED 52       12786                   SBC	HL,DE
00471A E1          12787                   POP	HL
00471B CC B8 4E    12788                   CALL	Z,ODD		;ROUND UNBIASSED
00471E DC AA 4E    12789                   CALL	C,ADD1		;ROUND UP
004721 C1          12790                   POP	BC		;RESTORE EXPONENTS
004722 DC D2 4E    12791                   CALL	C,INCC
004725 1F          12792                   RRA			;LSB OF A TO CARRY
004726 79          12793                   LD	A,C		;COMPUTE NEW EXPONENT
004727 88          12794                   ADC	A,B
004728 38 05       12795   CHKOVF:         JR	C,CHKO1
00472A F2 03 4F    12796                   JP	P,ZEROmat		;UNDERFLOW
00472D 18 03       12797                   JR	CHKO2
00472F FA D4 4E    12798   CHKO1:          JP	M,OFLOW		;OVERFLOW
004732 C6 80       12799   CHKO2:          ADD	A,80H
004734 4F          12800                   LD	C,A
004735 CA 03 4F    12801                   JP	Z,ZEROmat
004738 08          12802                   EX	AF,AF'		;RESTORE SIGN BIT
004739 CB BC       12803                   RES	7,H
00473B F0          12804                   RET	P
00473C CB FC       12805                   SET	7,H
00473E C9          12806                   RET
00473F             12807   ;
00473F             12808   ;IPOW - Integer involution.
00473F             12809   ;
00473F CD BE 4E    12810   IPOW:           CALL	SWAP
004742 CB 7C       12811                   BIT	7,H
004744 F5          12812                   PUSH	AF		;SAVE SIGN
004745 C4 E8 4D    12813                   CALL	NZ,NEGATE
004748 48          12814   IPOW0:          LD	C,B
004749 06 20       12815                   LD	B,32		;LOOP COUNTER
00474B CD 5D 4F    12816   IPOW1:          CALL	X2
00474E 38 08       12817                   JR	C,IPOW2
004750 10 F9       12818                   DJNZ	IPOW1
004752 F1          12819                   POP	AF
004753 D9          12820                   EXX
004754 2C          12821                   INC	L		;RESULT=1
004755 D9          12822                   EXX
004756 4C          12823                   LD	C,H
004757 C9          12824                   RET
004758             12825   ;
004758 F1          12826   IPOW2:          POP	AF
004759 C5          12827                   PUSH	BC
00475A EB          12828                   EX	DE,HL
00475B E5          12829                   PUSH	HL
00475C D9          12830                   EXX
00475D EB          12831                   EX	DE,HL
00475E E5          12832                   PUSH	HL
00475F D9          12833                   EXX
004760 DD 21 00 00 12834                   LD	IX,0
004764 DD 39       12835                   ADD	IX,SP
004766 28 34       12836                   JR	Z,IPOW4
004768 C5          12837                   PUSH	BC
004769 D9          12838                   EXX
00476A D5          12839                   PUSH	DE
00476B D9          12840                   EXX
00476C D5          12841                   PUSH	DE
00476D CD 94 4E    12842                   CALL	SFLOAT
004770 CD 72 4A    12843                   CALL	RECIP
004773 CD E8 31    12844                   CALL	STORE5
004776 18 1D       12845                   JR	IPOW5
004778             12846   ;
004778 C5          12847   IPOW3:          PUSH	BC
004779 D9          12848                   EXX
00477A CB 23       12849                   SLA	E
00477C CB 12       12850                   RL	D
00477E D5          12851                   PUSH	DE
00477F D9          12852                   EXX
004780 CB 13       12853                   RL	E
004782 CB 12       12854                   RL	D
004784 D5          12855                   PUSH	DE
004785 3E 0A       12856                   LD	A,'*' & 0FH
004787 F5          12857                   PUSH	AF
004788 CD 6F 4F    12858                   CALL	COPY
00478B CD 0E 45    12859                   CALL	OP		;SQUARE
00478E F1          12860                   POP	AF
00478F CD D3 19    12861                   CALL	DLOAD5
004792 DC 0E 45    12862                   CALL	C,OP		;MULTIPLY BY X
004795 D1          12863   IPOW5:          POP	DE
004796 D9          12864                   EXX
004797 D1          12865                   POP	DE
004798 D9          12866                   EXX
004799 79          12867                   LD	A,C
00479A C1          12868                   POP	BC
00479B 4F          12869                   LD	C,A
00479C 10 DA       12870   IPOW4:          DJNZ	IPOW3
00479E F1          12871                   POP	AF
00479F F1          12872                   POP	AF
0047A0 F1          12873                   POP	AF
0047A1 C9          12874                   RET
0047A2             12875   ;
0047A2 F1          12876   FPOW0:          POP	AF
0047A3 F1          12877                   POP	AF
0047A4 F1          12878                   POP	AF
0047A5 18 A1       12879                   JR	IPOW0
0047A7             12880   ;
0047A7             12881   ;FPOW - Floating-point involution.
0047A7             12882   ;
0047A7 CB 7A       12883   FPOW:           BIT	7,D
0047A9 F5          12884                   PUSH	AF
0047AA CD BE 4E    12885                   CALL	SWAP
0047AD CD 7D 4F    12886                   CALL	PUSH5
0047B0 0D          12887                   DEC	C
0047B1 0C          12888                   INC	C
0047B2 28 EE       12889                   JR	Z,FPOW0
0047B4 3E 9E       12890                   LD	A,158
0047B6 B9          12891                   CP	C
0047B7 38 08       12892                   JR	C,FPOW1
0047B9 3C          12893                   INC	A
0047BA CD C0 4D    12894                   CALL	FIX
0047BD 08          12895                   EX	AF,AF'
0047BE F2 A2 47    12896                   JP	P,FPOW0
0047C1 CD BE 4E    12897   FPOW1:          CALL	SWAP
0047C4 CD 89 4A    12898                   CALL	LN0
0047C7 CD 86 4F    12899                   CALL	POP5
0047CA F1          12900                   POP	AF
0047CB CD EF 46    12901                   CALL	FMUL
0047CE C3 FE 49    12902                   JP	EXP0
0047D1             12903   ;
0047D1             12904   ;Integer and floating-point compare.
0047D1             12905   ;Result is TRUE (-1) or FALSE (0).
0047D1             12906   ;
0047D1 CD 0D 4F    12907   FLT:            CALL	FCP
0047D4 18 03       12908                   JR	ILT1
0047D6 CD 00 4F    12909   ILT:            CALL	ICP
0047D9 D0          12910   ILT1:           RET	NC
0047DA 18 38       12911                   JR	TRUE
0047DC             12912   ;
0047DC CD 0D 4F    12913   FGT:            CALL	FCP
0047DF 18 03       12914                   JR	IGT1
0047E1 CD 00 4F    12915   IGT:            CALL	ICP
0047E4 C8          12916   IGT1:           RET	Z
0047E5 D8          12917                   RET	C
0047E6 18 2C       12918                   JR	TRUE
0047E8             12919   ;
0047E8 CD 0D 4F    12920   FGE:            CALL	FCP
0047EB 18 03       12921                   JR	IGE1
0047ED CD 00 4F    12922   IGE:            CALL	ICP
0047F0 D8          12923   IGE1:           RET	C
0047F1 18 21       12924                   JR	TRUE
0047F3             12925   ;
0047F3 CD 0D 4F    12926   FLE:            CALL	FCP
0047F6 18 03       12927                   JR	ILE1
0047F8 CD 00 4F    12928   ILE:            CALL	ICP
0047FB 28 17       12929   ILE1:           JR	Z,TRUE
0047FD D0          12930                   RET	NC
0047FE 18 14       12931                   JR	TRUE
004800             12932   ;
004800 CD 0D 4F    12933   FNE:            CALL	FCP
004803 18 03       12934                   JR	INE1
004805 CD 00 4F    12935   INE:            CALL	ICP
004808 C8          12936   INE1:           RET	Z
004809 18 09       12937                   JR	TRUE
00480B             12938   ;
00480B CD 0D 4F    12939   FEQ:            CALL	FCP
00480E 18 03       12940                   JR	IEQ1
004810 CD 00 4F    12941   IEQ:            CALL	ICP
004813 C0          12942   IEQ1:           RET	NZ
004814 21 FF FF    12943   TRUE:           LD	HL,-1
004817 D9          12944                   EXX
004818 21 FF FF    12945                   LD	HL,-1
00481B D9          12946                   EXX
00481C AF          12947                   XOR	A
00481D 4F          12948                   LD	C,A
00481E C9          12949                   RET
00481F             12950   ;
00481F             12951   ;Integer shifts:
00481F             12952   ;
00481F             12953   ISHX:
00481F CD 50 48    12954   ISHL:           CALL	SHIFTS
004822 28 07       12955                   JR	Z,SHRET
004824 D9          12956   ISHL1:          EXX
004825 29          12957                   ADD	HL,HL
004826 D9          12958                   EXX
004827 ED 6A       12959                   ADC	HL,HL
004829 10 F9       12960                   DJNZ	ISHL1
00482B C9          12961   SHRET:          RET
00482C             12962   ;
00482C CD 50 48    12963   ISAR:           CALL	SHIFTS
00482F 28 FA       12964                   JR	Z,SHRET
004831 CB 2C       12965   ISAR1:          SRA	H
004833 CB 1D       12966                   RR	L
004835 D9          12967                   EXX
004836 CB 1C       12968                   RR	H
004838 CB 1D       12969                   RR	L
00483A D9          12970                   EXX
00483B 10 F4       12971                   DJNZ	ISAR1
00483D C9          12972                   RET
00483E             12973   ;
00483E CD 50 48    12974   ISHR:           CALL	SHIFTS
004841 28 E8       12975                   JR	Z,SHRET
004843 CB 3C       12976   ISHR1:          SRL	H
004845 CB 1D       12977                   RR	L
004847 D9          12978                   EXX
004848 CB 1C       12979                   RR	H
00484A CB 1D       12980                   RR	L
00484C D9          12981                   EXX
00484D 10 F4       12982                   DJNZ	ISHR1
00484F C9          12983                   RET
004850             12984   ;
004850 CD D0 4D    12985   SHIFTS:         CALL	FIX2
004853 7A          12986                   LD	A,D
004854 B3          12987                   OR	E
004855 D9          12988                   EXX
004856 B2          12989                   OR	D
004857 7B          12990                   LD	A,E
004858 D9          12991                   EXX
004859 06 20       12992                   LD	B,32
00485B 20 02       12993                   JR	NZ,SHMAX
00485D 47          12994                   LD	B,A
00485E B7          12995                   OR	A
00485F C9          12996   SHMAX:          RET
004860             12997   ;
004860             12998   ;FUNCTIONS:
004860             12999   ;
004860             13000   ;Result returned in HLH'L'C (floating point)
004860             13001   ;Result returned in HLH'L' (C=0) (integer)
004860             13002   ;All registers except IY destroyed.
004860             13003   ;
004860             13004   ;ABS - Absolute value
004860             13005   ;Result is numeric, variable type.
004860             13006   ;
004860 CB 7C       13007   ABS:            BIT	7,H
004862 C8          13008                   RET	Z		;POSITIVE/ZERO
004863 0D          13009                   DEC	C
004864 0C          13010                   INC	C
004865 CA E8 4D    13011                   JP	Z,NEGATE	;INTEGER
004868 CB BC       13012                   RES	7,H
00486A C9          13013                   RET
00486B             13014   ;
00486B             13015   ;NOT - Complement integer.
00486B             13016   ;Result is integer numeric.
00486B             13017   ;
00486B CD D9 4D    13018   CPL_:           CALL	SFIXmat
00486E 7C          13019                   LD	A,H
00486F 2F          13020                   CPL
004870 67          13021                   LD	H,A
004871 7D          13022                   LD	A,L
004872 2F          13023                   CPL
004873 6F          13024                   LD	L,A
004874 D9          13025                   EXX
004875 7C          13026                   LD	A,H
004876 2F          13027                   CPL
004877 67          13028                   LD	H,A
004878 7D          13029                   LD	A,L
004879 2F          13030                   CPL
00487A 6F          13031                   LD	L,A
00487B D9          13032                   EXX
00487C AF          13033                   XOR	A		;NUMERIC MARKER
00487D C9          13034                   RET
00487E             13035   ;
00487E             13036   ;PI - Return PI (3.141592654)
00487E             13037   ;Result is floating-point numeric.
00487E             13038   ;
00487E 21 0F 49    13039   PI:             LD	HL,490FH
004881 D9          13040                   EXX
004882 21 A2 DA    13041                   LD	HL,0DAA2H
004885 D9          13042                   EXX
004886 0E 81       13043                   LD	C,81H
004888 AF          13044                   XOR	A		;NUMERIC MARKER
004889 C9          13045                   RET
00488A             13046   ;
00488A             13047   ;DEG - Convert radians to degrees
00488A             13048   ;Result is floating-point numeric.
00488A             13049   ;
00488A CD 9A 48    13050   DEG:            CALL	FPI180
00488D CD EF 46    13051                   CALL	FMUL
004890 AF          13052                   XOR	A
004891 C9          13053                   RET
004892             13054   ;
004892             13055   ;RAD - Convert degrees to radians
004892             13056   ;Result is floating-point numeric.
004892             13057   ;
004892 CD 9A 48    13058   RAD:            CALL	FPI180
004895 CD 7F 46    13059                   CALL	FDIV
004898 AF          13060                   XOR	A
004899 C9          13061                   RET
00489A             13062   ;
00489A             13063   ;180/PI
00489A             13064   ;
00489A CD 94 4E    13065   FPI180:         CALL	SFLOAT
00489D 11 2E 65    13066                   LD	DE,652EH
0048A0 D9          13067                   EXX
0048A1 11 D3 E0    13068                   LD	DE,0E0D3H
0048A4 D9          13069                   EXX
0048A5 06 85       13070                   LD	B,85H
0048A7 C9          13071                   RET
0048A8             13072   ;
0048A8             13073   ;SGN - Return -1, 0 or +1
0048A8             13074   ;Result is integer numeric.
0048A8             13075   ;
0048A8 CD E3 4E    13076   SGN:            CALL	TESTmat
0048AB B1          13077                   OR	C
0048AC C8          13078                   RET	Z		;ZERO
0048AD CB 7C       13079                   BIT	7,H
0048AF C2 14 48    13080                   JP	NZ,TRUE		;-1
0048B2 CD 03 4F    13081                   CALL	ZEROmat
0048B5 C3 AA 4E    13082                   JP	ADD1		;1
0048B8             13083   ;
0048B8             13084   ;VAL - Return numeric value of string.
0048B8             13085   ;Input: ASCII string at IX
0048B8             13086   ;Result is variable type numeric.
0048B8             13087   ;
0048B8 CD C5 50    13088   VAL:            CALL	SIGNQ
0048BB F5          13089                   PUSH	AF
0048BC CD 16 4D    13090                   CALL	CON
0048BF F1          13091                   POP	AF
0048C0 FE 2D       13092                   CP	'-'
0048C2 3E 00       13093                   LD	A,0		;NUMERIC MARKER
0048C4 C0          13094                   RET	NZ
0048C5 0D          13095                   DEC	C
0048C6 0C          13096                   INC	C
0048C7 CA E8 4D    13097                   JP	Z,NEGATE	;ZERO/INTEGER
0048CA 7C          13098                   LD	A,H
0048CB EE 80       13099                   XOR	80H		;CHANGE SIGN (FP)
0048CD 67          13100                   LD	H,A
0048CE AF          13101                   XOR	A
0048CF C9          13102                   RET
0048D0             13103   ;
0048D0             13104   ;INT - Floor function
0048D0             13105   ;Result is integer numeric.
0048D0             13106   ;
0048D0 0D          13107   INT_:           DEC	C
0048D1 0C          13108                   INC	C
0048D2 C8          13109                   RET	Z		;ZERO/INTEGER
0048D3 3E 9F       13110                   LD	A,159
0048D5 44          13111                   LD	B,H		;B7=SIGN BIT
0048D6 CD C0 4D    13112                   CALL	FIX
0048D9 08          13113                   EX	AF,AF'
0048DA A0          13114                   AND	B
0048DB FC AA 4E    13115                   CALL	M,ADD1		;NEGATIVE NON-INTEGER
0048DE 78          13116                   LD	A,B
0048DF B7          13117                   OR	A
0048E0 FC E8 4D    13118                   CALL	M,NEGATE
0048E3 AF          13119                   XOR	A
0048E4 4F          13120                   LD	C,A
0048E5 C9          13121                   RET
0048E6             13122   ;
0048E6             13123   ;SQR - square root
0048E6             13124   ;Result is floating-point numeric.
0048E6             13125   ;
0048E6 CD 94 4E    13126   SQR:            CALL	SFLOAT
0048E9 CB 7C       13127   SQR0:           BIT	7,H
0048EB 3E 15       13128                   LD	A,NGROOT
0048ED C2 08 45    13129                   JP	NZ,ERROR_mat	;"-ve root"
0048F0 0D          13130                   DEC	C
0048F1 0C          13131                   INC	C
0048F2 C8          13132                   RET	Z		;ZERO
0048F3 CB FC       13133                   SET	7,H		;IMPLIED 1
0048F5 CB 41       13134                   BIT	0,C
0048F7 CC C6 4E    13135                   CALL	Z,DIV2		;MAKE EXPONENT ODD
0048FA 79          13136                   LD	A,C
0048FB D6 80       13137                   SUB	80H
0048FD CB 2F       13138                   SRA	A		;HALVE EXPONENT
0048FF C6 80       13139                   ADD	A,80H
004901 4F          13140                   LD	C,A
004902 C5          13141                   PUSH	BC		;SAVE EXPONENT
004903 EB          13142                   EX	DE,HL
004904 21 00 00    13143                   LD	HL,0
004907 44          13144                   LD	B,H
004908 4D          13145                   LD	C,L
004909 D9          13146                   EXX
00490A EB          13147                   EX	DE,HL
00490B 21 00 00    13148                   LD	HL,0
00490E 44          13149                   LD	B,H
00490F 4D          13150                   LD	C,L
004910 3E E1       13151                   LD	A,-31
004912 CD 74 50    13152                   CALL	SQRA		;ROOT
004915 D9          13153                   EXX
004916 CB 78       13154                   BIT	7,B
004918 D9          13155                   EXX
004919 CC 74 50    13156                   CALL	Z,SQRA		;NORMALISE & INC A
00491C CD 93 50    13157                   CALL	SQRB
00491F B7          13158                   OR	A		;CLEAR CARRY
004920 CD 2E 50    13159                   CALL	DIVB
004923 CB 1B       13160                   RR	E		;LSB TO CARRY
004925 60          13161                   LD	H,B
004926 69          13162                   LD	L,C
004927 D9          13163                   EXX
004928 60          13164                   LD	H,B
004929 69          13165                   LD	L,C
00492A DC AA 4E    13166                   CALL	C,ADD1		;ROUND UP
00492D C1          13167                   POP	BC		;RESTORE EXPONENT
00492E DC D2 4E    13168                   CALL	C,INCC
004931 1F          13169                   RRA
004932 9F          13170                   SBC	A,A
004933 81          13171                   ADD	A,C
004934 4F          13172                   LD	C,A
004935 CB BC       13173                   RES	7,H		;POSITIVE
004937 AF          13174                   XOR	A
004938 C9          13175                   RET
004939             13176   ;
004939             13177   ;TAN - Tangent function
004939             13178   ;Result is floating-point numeric.
004939             13179   ;
004939 CD 94 4E    13180   TAN:            CALL	SFLOAT
00493C CD 7D 4F    13181                   CALL	PUSH5
00493F CD 59 49    13182                   CALL	COS0
004942 CD 86 4F    13183                   CALL	POP5
004945 CD 7D 4F    13184                   CALL	PUSH5
004948 CD BE 4E    13185                   CALL	SWAP
00494B CD 64 49    13186                   CALL	SIN0
00494E CD 86 4F    13187                   CALL	POP5
004951 CD 7F 46    13188                   CALL	FDIV
004954 AF          13189                   XOR	A		;NUMERIC MARKER
004955 C9          13190                   RET
004956             13191   ;
004956             13192   ;COS - Cosine function
004956             13193   ;Result is floating-point numeric.
004956             13194   ;
004956 CD 94 4E    13195   COS:            CALL	SFLOAT
004959 CD 09 4E    13196   COS0:           CALL	SCALE
00495C 1C          13197                   INC	E
00495D 1C          13198                   INC	E
00495E 7B          13199                   LD	A,E
00495F 18 0E       13200                   JR	SIN1
004961             13201   ;
004961             13202   ;SIN - Sine function
004961             13203   ;Result is floating-point numeric.
004961             13204   ;
004961 CD 94 4E    13205   SIN:            CALL	SFLOAT
004964 E5          13206   SIN0:           PUSH	HL		;H7=SIGN
004965 CD 09 4E    13207                   CALL	SCALE
004968 F1          13208                   POP	AF
004969 07          13209                   RLCA
00496A 07          13210                   RLCA
00496B 07          13211                   RLCA
00496C E6 04       13212                   AND	4
00496E AB          13213                   XOR	E
00496F F5          13214   SIN1:           PUSH	AF		;OCTANT
004970 CB BC       13215                   RES	7,H
004972 1F          13216                   RRA
004973 CD F0 49    13217                   CALL	PIBY4
004976 DC 17 46    13218                   CALL	C,RSUB		;X=(PI/4)-X
004979 F1          13219                   POP	AF
00497A F5          13220                   PUSH	AF
00497B E6 03       13221                   AND	3
00497D E2 AE 49    13222                   JP	PO,SIN2		;USE COSINE APPROX.
004980 CD 7D 4F    13223                   CALL	PUSH5		;SAVE X
004983 CD 77 4F    13224                   CALL	SQUARE		;PUSH X*X
004986 CD B0 4F    13225                   CALL	POLY
004989 B7 A8       13226                   DW	0A8B7H		;a(8)
00498B 11 36       13227                   DW	3611H
00498D 6D          13228                   DB	6DH
00498E 26 DE       13229                   DW	0DE26H		;a(6)
004990 05 D0       13230                   DW	0D005H
004992 73          13231                   DB	73H
004993 C0 80       13232                   DW	80C0H		;a(4)
004995 88 08       13233                   DW	888H
004997 79          13234                   DB	79H
004998 9D AA       13235                   DW	0AA9DH		;a(2)
00499A AA AA       13236                   DW	0AAAAH
00499C 7D          13237                   DB	7DH
00499D 00 00       13238                   DW	0		;a(0)
00499F 00 00       13239                   DW	0
0049A1 80          13240                   DB	80H
0049A2 CD 86 4F    13241                   CALL	POP5
0049A5 CD 86 4F    13242                   CALL	POP5
0049A8 CD EF 46    13243                   CALL	FMUL
0049AB C3 D0 49    13244                   JP	SIN3
0049AE             13245   ;
0049AE CD 77 4F    13246   SIN2:           CALL	SQUARE		;PUSH X*X
0049B1 CD B0 4F    13247                   CALL	POLY
0049B4 71 D5       13248                   DW	0D571H		;b(8)
0049B6 78 4C       13249                   DW	4C78H
0049B8 70          13250                   DB	70H
0049B9 AF 94       13251                   DW	94AFH		;b(6)
0049BB 03 B6       13252                   DW	0B603H
0049BD 76          13253                   DB	76H
0049BE C8 9C       13254                   DW	9CC8H		;b(4)
0049C0 AA 2A       13255                   DW	2AAAH
0049C2 7B          13256                   DB	7BH
0049C3 DD FF       13257                   DW	0FFDDH		;b(2)
0049C5 FF FF       13258                   DW	0FFFFH
0049C7 7E          13259                   DB	7EH
0049C8 00 00       13260                   DW	0		;b(0)
0049CA 00 00       13261                   DW	0
0049CC 80          13262                   DB	80H
0049CD CD 86 4F    13263                   CALL	POP5
0049D0 F1          13264   SIN3:           POP	AF
0049D1 E6 04       13265                   AND	4
0049D3 C8          13266                   RET	Z
0049D4 0D          13267                   DEC	C
0049D5 0C          13268                   INC	C
0049D6 C8          13269                   RET	Z		;ZERO
0049D7 CB FC       13270                   SET	7,H		;MAKE NEGATIVE
0049D9 C9          13271                   RET
0049DA             13272   ;
0049DA             13273   ;Floating-point one:
0049DA             13274   ;
0049DA 21 00 00    13275   FONE:           LD	HL,0
0049DD D9          13276                   EXX
0049DE 21 00 00    13277                   LD	HL,0
0049E1 D9          13278                   EXX
0049E2 0E 80       13279                   LD	C,80H
0049E4 C9          13280                   RET
0049E5             13281   ;
0049E5 11 00 00    13282   DONE:           LD	DE,0
0049E8 D9          13283                   EXX
0049E9 11 00 00    13284                   LD	DE,0
0049EC D9          13285                   EXX
0049ED 06 80       13286                   LD	B,80H
0049EF C9          13287                   RET
0049F0             13288   ;
0049F0 11 0F 49    13289   PIBY4:          LD	DE,490FH
0049F3 D9          13290                   EXX
0049F4 11 A2 DA    13291                   LD	DE,0DAA2H
0049F7 D9          13292                   EXX
0049F8 06 7F       13293                   LD	B,7FH
0049FA C9          13294                   RET
0049FB             13295   ;
0049FB             13296   ;EXP - Exponential function
0049FB             13297   ;Result is floating-point numeric.
0049FB             13298   ;
0049FB CD 94 4E    13299   EXP:            CALL	SFLOAT
0049FE CD 7B 4A    13300   EXP0:           CALL	LN2		;LN(2)
004A01 D9          13301                   EXX
004A02 1D          13302                   DEC	E
004A03 01 CF D1    13303                   LD	BC,0D1CFH	;0.6931471805599453
004A06 D9          13304                   EXX
004A07 E5          13305                   PUSH	HL		;H7=SIGN
004A08 CD 19 4E    13306                   CALL	MOD48		;"MODULUS"
004A0B F1          13307                   POP	AF
004A0C CB 7B       13308                   BIT	7,E
004A0E 28 09       13309                   JR	Z,EXP1
004A10 17          13310                   RLA
004A11 DA 03 4F    13311                   JP	C,ZEROmat
004A14 3E 18       13312                   LD	A,EXPRNG
004A16 C3 08 45    13313                   JP	ERROR_mat		;"Exp range"
004A19             13314   ;
004A19 E6 80       13315   EXP1:           AND	80H
004A1B B3          13316                   OR	E
004A1C F5          13317                   PUSH	AF		;INTEGER PART
004A1D CB BC       13318                   RES	7,H
004A1F CD 7D 4F    13319                   CALL	PUSH5		;PUSH X*LN(2)
004A22 CD B0 4F    13320                   CALL	POLY
004A25 72 40       13321                   DW	4072H		;a(7)
004A27 2E 94       13322                   DW	942EH
004A29 73          13323                   DB	73H
004A2A 65 6F       13324                   DW	6F65H		;a(6)
004A2C 4F 2E       13325                   DW	2E4FH
004A2E 76          13326                   DB	76H
004A2F 37 6D       13327                   DW	6D37H		;a(5)
004A31 02 88       13328                   DW	8802H
004A33 79          13329                   DB	79H
004A34 12 E5       13330                   DW	0E512H		;a(4)
004A36 A0 2A       13331                   DW	2AA0H
004A38 7B          13332                   DB	7BH
004A39 14 4F       13333                   DW	4F14H		;a(3)
004A3B AA AA       13334                   DW	0AAAAH
004A3D 7D          13335                   DB	7DH
004A3E 56 FD       13336                   DW	0FD56H		;a(2)
004A40 FF 7F       13337                   DW	7FFFH
004A42 7E          13338                   DB	7EH
004A43 FE FF       13339                   DW	0FFFEH		;a(1)
004A45 FF FF       13340                   DW	0FFFFH
004A47 7F          13341                   DB	7FH
004A48 00 00       13342                   DW	0		;a(0)
004A4A 00 00       13343                   DW	0
004A4C 80          13344                   DB	80H
004A4D CD 86 4F    13345                   CALL	POP5
004A50 F1          13346                   POP	AF
004A51 F5          13347                   PUSH	AF
004A52 F4 72 4A    13348                   CALL	P,RECIP		;X=1/X
004A55 F1          13349                   POP	AF
004A56 F2 5D 4A    13350                   JP	P,EXP4
004A59 E6 7F       13351                   AND	7FH
004A5B ED 44       13352                   NEG
004A5D C6 80       13353   EXP4:           ADD	A,80H
004A5F 81          13354                   ADD	A,C
004A60 38 05       13355                   JR	C,EXP2
004A62 F2 03 4F    13356                   JP	P,ZEROmat		;UNDERFLOW
004A65 18 03       13357                   JR	EXP3
004A67 FA D4 4E    13358   EXP2:           JP	M,OFLOW		;OVERFLOW
004A6A C6 80       13359   EXP3:           ADD	A,80H
004A6C CA 03 4F    13360                   JP	Z,ZEROmat
004A6F 4F          13361                   LD	C,A
004A70 AF          13362                   XOR	A		;NUMERIC MARKER
004A71 C9          13363                   RET
004A72             13364   ;
004A72 CD E5 49    13365   RECIP:          CALL	DONE
004A75 CD BE 4E    13366   RDIV:           CALL	SWAP
004A78 C3 7F 46    13367                   JP	FDIV		;RECIPROCAL
004A7B             13368   ;
004A7B 11 72 31    13369   LN2:            LD	DE,3172H	;LN(2)
004A7E D9          13370                   EXX
004A7F 11 F8 17    13371                   LD	DE,17F8H
004A82 D9          13372                   EXX
004A83 06 7F       13373                   LD	B,7FH
004A85 C9          13374                   RET
004A86             13375   ;
004A86             13376   ;LN - Natural log.
004A86             13377   ;Result is floating-point numeric.
004A86             13378   ;
004A86 CD 94 4E    13379   LN:             CALL	SFLOAT
004A89 3E 16       13380   LN0:            LD	A,LOGRNG
004A8B CB 7C       13381                   BIT	7,H
004A8D C2 08 45    13382                   JP	NZ,ERROR_mat	;"Log range"
004A90 0C          13383                   INC	C
004A91 0D          13384                   DEC	C
004A92 CA 08 45    13385                   JP	Z,ERROR_mat
004A95 11 04 35    13386                   LD	DE,3504H	;SQR(2)
004A98 D9          13387                   EXX
004A99 11 33 F3    13388                   LD	DE,0F333H	;1.41421356237
004A9C D9          13389                   EXX
004A9D CD 15 4F    13390                   CALL	ICP0		;MANTISSA>SQR(2)?
004AA0 79          13391                   LD	A,C		;EXPONENT
004AA1 0E 80       13392                   LD	C,80H		;1 <= X < 2
004AA3 38 02       13393                   JR	C,LN4
004AA5 0D          13394                   DEC	C
004AA6 3C          13395                   INC	A
004AA7 F5          13396   LN4:            PUSH	AF		;SAVE EXPONENT
004AA8 CD 92 4F    13397                   CALL	RATIO		;X=(X-1)/(X+1)
004AAB CD 7D 4F    13398                   CALL	PUSH5
004AAE CD 77 4F    13399                   CALL	SQUARE		;PUSH X*X
004AB1 CD B0 4F    13400                   CALL	POLY
004AB4 48 CC       13401                   DW	0CC48H		;a(9)
004AB6 FB 74       13402                   DW	74FBH
004AB8 7D          13403                   DB	7DH
004AB9 AF AE       13404                   DW	0AEAFH		;a(7)
004ABB FF 11       13405                   DW	11FFH
004ABD 7E          13406                   DB	7EH
004ABE 8C D9       13407                   DW	0D98CH		;a(5)
004AC0 CD 4C       13408                   DW	4CCDH
004AC2 7E          13409                   DB	7EH
004AC3 E3 A9       13410                   DW	0A9E3H		;a(3)
004AC5 AA 2A       13411                   DW	2AAAH
004AC7 7F          13412                   DB	7FH
004AC8 00 00       13413                   DW	0		;a(1)
004ACA 00 00       13414                   DW	0
004ACC 81          13415                   DB	81H
004ACD CD 86 4F    13416                   CALL	POP5
004AD0 CD 86 4F    13417                   CALL	POP5
004AD3 CD EF 46    13418                   CALL	FMUL
004AD6 F1          13419                   POP	AF		;EXPONENT
004AD7 CD 7D 4F    13420                   CALL	PUSH5
004ADA 08          13421                   EX	AF,AF'
004ADB CD 03 4F    13422                   CALL	ZEROmat
004ADE 08          13423                   EX	AF,AF'
004ADF D6 80       13424                   SUB	80H
004AE1 28 1B       13425                   JR	Z,LN3
004AE3 30 02       13426                   JR	NC,LN1
004AE5 2F          13427                   CPL
004AE6 3C          13428                   INC	A
004AE7 67          13429   LN1:            LD	H,A
004AE8 0E 87       13430                   LD	C,87H
004AEA F5          13431                   PUSH	AF
004AEB CD 7A 4E    13432                   CALL	FLOAT
004AEE CB BC       13433                   RES	7,H
004AF0 CD 7B 4A    13434                   CALL	LN2
004AF3 CD EF 46    13435                   CALL	FMUL
004AF6 F1          13436                   POP	AF
004AF7 30 05       13437                   JR	NC,LN3
004AF9 FA FE 4A    13438                   JP	M,LN3
004AFC CB FC       13439                   SET	7,H
004AFE CD 86 4F    13440   LN3:            CALL	POP5
004B01 CD 27 46    13441                   CALL	FADD
004B04 AF          13442                   XOR	A
004B05 C9          13443                   RET
004B06             13444   ;
004B06             13445   ;LOG - base-10 logarithm.
004B06             13446   ;Result is floating-point numeric.
004B06             13447   ;
004B06 CD 86 4A    13448   LOG:            CALL	LN
004B09 11 5B 5E    13449                   LD	DE,5E5BH	;LOG(e)
004B0C D9          13450                   EXX
004B0D 11 A9 D8    13451                   LD	DE,0D8A9H
004B10 D9          13452                   EXX
004B11 06 7E       13453                   LD	B,7EH
004B13 CD EF 46    13454                   CALL	FMUL
004B16 AF          13455                   XOR	A
004B17 C9          13456                   RET
004B18             13457   ;
004B18             13458   ;ASN - Arc-sine
004B18             13459   ;Result is floating-point numeric.
004B18             13460   ;
004B18 CD 94 4E    13461   ASN:            CALL	SFLOAT
004B1B CD 7D 4F    13462                   CALL	PUSH5
004B1E CD 6F 4F    13463                   CALL	COPY
004B21 CD EF 46    13464                   CALL	FMUL
004B24 CD E5 49    13465                   CALL	DONE
004B27 CD 17 46    13466                   CALL	RSUB
004B2A CD E9 48    13467                   CALL	SQR0
004B2D CD 86 4F    13468                   CALL	POP5
004B30 0C          13469                   INC	C
004B31 0D          13470                   DEC	C
004B32 3E 02       13471                   LD	A,2
004B34 D5          13472                   PUSH	DE
004B35 28 70       13473                   JR	Z,ACS1
004B37 D1          13474                   POP	DE
004B38 CD 75 4A    13475                   CALL	RDIV
004B3B 18 03       13476                   JR	ATN0
004B3D             13477   ;
004B3D             13478   ;ATN - arc-tangent
004B3D             13479   ;Result is floating-point numeric.
004B3D             13480   ;
004B3D CD 94 4E    13481   ATN:            CALL	SFLOAT
004B40 E5          13482   ATN0:           PUSH	HL		;SAVE SIGN
004B41 CB BC       13483                   RES	7,H
004B43 11 13 54    13484                   LD	DE,5413H	;TAN(PI/8)=SQR(2)-1
004B46 D9          13485                   EXX
004B47 11 D0 CC    13486                   LD	DE,0CCD0H
004B4A D9          13487                   EXX
004B4B 06 7E       13488                   LD	B,7EH
004B4D CD 12 4F    13489                   CALL	FCP0		;COMPARE
004B50 06 00       13490                   LD	B,0
004B52 38 1C       13491                   JR	C,ATN2
004B54 11 82 1A    13492                   LD	DE,1A82H	;TAN(3*PI/8)=SQR(2)+1
004B57 D9          13493                   EXX
004B58 11 9A 79    13494                   LD	DE,799AH
004B5B D9          13495                   EXX
004B5C 06 81       13496                   LD	B,81H
004B5E CD 12 4F    13497                   CALL	FCP0		;COMPARE
004B61 38 08       13498                   JR	C,ATN1
004B63 CD 72 4A    13499                   CALL	RECIP		;X=1/X
004B66 06 02       13500                   LD	B,2
004B68 C3 70 4B    13501                   JP	ATN2
004B6B CD 92 4F    13502   ATN1:           CALL	RATIO		;X=(X-1)/(X+1)
004B6E 06 01       13503                   LD	B,1
004B70 C5          13504   ATN2:           PUSH	BC		;SAVE FLAG
004B71 CD 7D 4F    13505                   CALL	PUSH5
004B74 CD 77 4F    13506                   CALL	SQUARE		;PUSH X*X
004B77 CD B0 4F    13507                   CALL	POLY
004B7A 35 F3       13508                   DW	0F335H		;a(13)
004B7C D8 37       13509                   DW	37D8H
004B7E 7B          13510                   DB	7BH
004B7F 91 6B       13511                   DW	6B91H		;a(11)
004B81 B9 AA       13512                   DW	0AAB9H
004B83 7C          13513                   DB	7CH
004B84 DE 41       13514                   DW	41DEH		;a(9)
004B86 97 61       13515                   DW	6197H
004B88 7C          13516                   DB	7CH
004B89 7B 9D       13517                   DW	9D7BH		;a(7)
004B8B 37 92       13518                   DW	9237H
004B8D 7D          13519                   DB	7DH
004B8E 5A 2A       13520                   DW	2A5AH		;a(5)
004B90 CC 4C       13521                   DW	4CCCH
004B92 7D          13522                   DB	7DH
004B93 5C A9       13523                   DW	0A95CH		;a(3)
004B95 AA AA       13524                   DW	0AAAAH
004B97 7E          13525                   DB	7EH
004B98 00 00       13526                   DW	0		;a(1)
004B9A 00 00       13527                   DW	0
004B9C 80          13528                   DB	80H
004B9D CD 86 4F    13529                   CALL	POP5
004BA0 CD 86 4F    13530                   CALL	POP5
004BA3 CD EF 46    13531                   CALL	FMUL
004BA6 F1          13532                   POP	AF
004BA7 CD F0 49    13533   ACS1:           CALL	PIBY4		;PI/4
004BAA 1F          13534                   RRA
004BAB F5          13535                   PUSH	AF
004BAC DC 27 46    13536                   CALL	C,FADD
004BAF F1          13537                   POP	AF
004BB0 04          13538                   INC	B
004BB1 1F          13539                   RRA
004BB2 DC 17 46    13540                   CALL	C,RSUB
004BB5 F1          13541                   POP	AF
004BB6 B7          13542                   OR	A
004BB7 F0          13543                   RET	P
004BB8 CB FC       13544                   SET	7,H		;MAKE NEGATIVE
004BBA AF          13545                   XOR	A
004BBB C9          13546                   RET
004BBC             13547   ;
004BBC             13548   ;ACS - Arc cosine=PI/2-ASN.
004BBC             13549   ;Result is floating point numeric.
004BBC             13550   ;
004BBC CD 18 4B    13551   ACS:            CALL	ASN
004BBF 3E 02       13552                   LD	A,2
004BC1 F5          13553                   PUSH	AF
004BC2 18 E3       13554                   JR	ACS1
004BC4             13555   ;
004BC4             13556   ;Function STR - convert numeric value to ASCII string.
004BC4             13557   ;   Inputs: HLH'L'C = integer or floating-point number
004BC4             13558   ;           DE = address at which to store string
004BC4             13559   ;           IX = address of @% format control
004BC4             13560   ;  Outputs: String stored, with NUL terminator
004BC4             13561   ;
004BC4             13562   ;First normalise for decimal output:
004BC4             13563   ;
004BC4 CD 94 4E    13564   STRmat:            CALL	SFLOAT
004BC7 06 00       13565                   LD	B,0		;DEFAULT PT. POSITION
004BC9 CB 7C       13566                   BIT	7,H		;NEGATIVE?
004BCB 28 06       13567                   JR	Z,STR10
004BCD CB BC       13568                   RES	7,H
004BCF 3E 2D       13569                   LD	A,'-'
004BD1 12          13570                   LD	(DE),A		;STORE SIGN
004BD2 13          13571                   INC	DE
004BD3 AF          13572   STR10:          XOR	A		;CLEAR A
004BD4 B9          13573                   CP	C
004BD5 28 47       13574                   JR	Z,STR2mat		;ZERO
004BD7 D5          13575                   PUSH	DE		;SAVE TEXT POINTER
004BD8 78          13576                   LD	A,B
004BD9 F5          13577   STR11:          PUSH	AF		;SAVE DECIMAL COUNTER
004BDA 79          13578                   LD	A,C		;BINARY EXPONENT
004BDB FE A1       13579                   CP	161
004BDD 30 1A       13580                   JR	NC,STR14
004BDF FE 9B       13581                   CP	155
004BE1 30 25       13582                   JR	NC,STR15
004BE3 2F          13583                   CPL
004BE4 FE E1       13584                   CP	225
004BE6 38 02       13585                   JR	C,STR13
004BE8 3E F8       13586                   LD	A,-8
004BEA C6 1C       13587   STR13:          ADD	A,28
004BEC CD D7 4F    13588                   CALL	POWR10
004BEF F5          13589                   PUSH	AF
004BF0 CD EF 46    13590                   CALL	FMUL
004BF3 F1          13591                   POP	AF
004BF4 47          13592                   LD	B,A
004BF5 F1          13593                   POP	AF
004BF6 90          13594                   SUB	B
004BF7 18 E0       13595                   JR	STR11
004BF9 D6 20       13596   STR14:          SUB	32
004BFB CD D7 4F    13597                   CALL	POWR10
004BFE F5          13598                   PUSH	AF
004BFF CD 7F 46    13599                   CALL	FDIV
004C02 F1          13600                   POP	AF
004C03 47          13601                   LD	B,A
004C04 F1          13602                   POP	AF
004C05 80          13603                   ADD	A,B
004C06 18 D1       13604                   JR	STR11
004C08 3E 09       13605   STR15:          LD	A,9
004C0A CD D7 4F    13606                   CALL	POWR10		;10^9
004C0D CD 12 4F    13607                   CALL	FCP0
004C10 79          13608                   LD	A,C
004C11 C1          13609                   POP	BC
004C12 4F          13610                   LD	C,A
004C13 CB FC       13611                   SET	7,H		;IMPLIED 1
004C15 DC 34 4F    13612                   CALL	C,X10B		;X10, DEC B
004C18 D1          13613                   POP	DE		;RESTORE TEXT POINTER
004C19 CB B9       13614                   RES	7,C
004C1B 3E 00       13615                   LD	A,0
004C1D 17          13616                   RLA			;PUT CARRY IN LSB
004C1E             13617   ;
004C1E             13618   ;At this point decimal normalisation has been done,
004C1E             13619   ;now convert to decimal digits:
004C1E             13620   ;      AHLH'L' = number in normalised integer form
004C1E             13621   ;            B = decimal place adjustment
004C1E             13622   ;            C = binary place adjustment (29-33)
004C1E             13623   ;
004C1E 0C          13624   STR2mat:           INC	C
004C1F 08          13625                   EX	AF,AF'		;SAVE A
004C20 78          13626                   LD	A,B
004C21 DD CB 02 4E 13627                   BIT	1,(IX+2)
004C25 20 08       13628                   JR	NZ,STR20
004C27 AF          13629                   XOR	A
004C28 DD BE 01    13630                   CP	(IX+1)
004C2B 28 0A       13631                   JR	Z,STR21
004C2D 3E F6       13632                   LD	A,-10
004C2F DD 86 01    13633   STR20:          ADD	A,(IX+1)	;SIG. FIG. COUNT
004C32 B7          13634                   OR	A		;CLEAR CARRY
004C33 FA 37 4C    13635                   JP	M,STR21
004C36 AF          13636                   XOR	A
004C37 F5          13637   STR21:          PUSH	AF
004C38 08          13638                   EX	AF,AF'		;RESTORE A
004C39 CD 5D 4F    13639   STR22:          CALL	X2		;RL AHLH'L'
004C3C 8F          13640                   ADC	A,A
004C3D FE 0A       13641                   CP	10
004C3F 38 05       13642                   JR	C,STR23
004C41 D6 0A       13643                   SUB	10
004C43 D9          13644                   EXX
004C44 2C          13645                   INC	L		;SET RESULT BIT
004C45 D9          13646                   EXX
004C46 0D          13647   STR23:          DEC	C
004C47 20 F0       13648                   JR	NZ,STR22	;32 TIMES
004C49 4F          13649                   LD	C,A		;REMAINDER
004C4A 7C          13650                   LD	A,H
004C4B E6 3F       13651                   AND	3FH		;CLEAR OUT JUNK
004C4D 67          13652                   LD	H,A
004C4E F1          13653                   POP	AF
004C4F F2 5C 4C    13654                   JP	P,STR24
004C52 3C          13655                   INC	A
004C53 20 1C       13656                   JR	NZ,STR26
004C55 3E 04       13657                   LD	A,4
004C57 B9          13658                   CP	C		;ROUND UP?
004C58 3E 00       13659                   LD	A,0
004C5A 18 15       13660                   JR	STR26
004C5C F5          13661   STR24:          PUSH	AF
004C5D 79          13662                   LD	A,C
004C5E CE 30       13663                   ADC	A,'0'		;ADD CARRY
004C60 FE 30       13664                   CP	'0'
004C62 28 05       13665                   JR	Z,STR25		;SUPPRESS ZERO
004C64 FE 3A       13666                   CP	'9'+1
004C66 3F          13667                   CCF
004C67 30 08       13668                   JR	NC,STR26
004C69 E3          13669   STR25:          EX	(SP),HL
004C6A CB 75       13670                   BIT	6,L		;ZERO FLAG
004C6C E3          13671                   EX	(SP),HL
004C6D 20 05       13672                   JR	NZ,STR27
004C6F 3E 30       13673                   LD	A,'0'
004C71 3C          13674   STR26:          INC	A		;SET +VE
004C72 3D          13675                   DEC	A
004C73 F5          13676                   PUSH	AF		;PUT ON STACK + CARRY
004C74 04          13677   STR27:          INC	B
004C75 CD E3 4E    13678                   CALL	TESTmat		;IS HLH'L' ZERO?
004C78 0E 20       13679                   LD	C,32
004C7A 3E 00       13680                   LD	A,0
004C7C 20 BB       13681                   JR	NZ,STR22
004C7E F1          13682                   POP	AF
004C7F F5          13683                   PUSH	AF
004C80 3E 00       13684                   LD	A,0
004C82 38 B5       13685                   JR	C,STR22
004C84             13686   ;
004C84             13687   ;At this point, the decimal character string is stored
004C84             13688   ; on the stack. Trailing zeroes are suppressed and may
004C84             13689   ; need to be replaced.
004C84             13690   ;B register holds decimal point position.
004C84             13691   ;Now format number and store as ASCII string:
004C84             13692   ;
004C84 EB          13693   STR3:           EX	DE,HL		;STRING POINTER
004C85 0E FF       13694                   LD	C,-1		;FLAG "E"
004C87 16 01       13695                   LD	D,1
004C89 DD 5E 01    13696                   LD	E,(IX+1)	;f2
004C8C DD CB 02 46 13697                   BIT	0,(IX+2)
004C90 20 32       13698                   JR	NZ,STR34	;E MODE
004C92 DD CB 02 4E 13699                   BIT	1,(IX+2)
004C96 28 11       13700                   JR	Z,STR31
004C98 78          13701                   LD	A,B		;F MODE
004C99 B7          13702                   OR	A
004C9A 28 04       13703                   JR	Z,STR30
004C9C FA A0 4C    13704                   JP	M,STR30
004C9F 50          13705                   LD	D,B
004CA0 7A          13706   STR30:          LD	A,D
004CA1 DD 86 01    13707                   ADD	A,(IX+1)
004CA4 5F          13708                   LD	E,A
004CA5 FE 0B       13709                   CP	11
004CA7 38 17       13710                   JR	C,STR32
004CA9 78          13711   STR31:          LD	A,B		;G MODE
004CAA 11 01 01    13712                   LD	DE,101H
004CAD B7          13713                   OR	A
004CAE FA C4 4C    13714                   JP	M,STR34
004CB1 28 0D       13715                   JR	Z,STR32
004CB3 DD 7E 01    13716                   LD	A,(IX+1)
004CB6 B7          13717                   OR	A
004CB7 20 02       13718                   JR	NZ,STR3A
004CB9 3E 0A       13719                   LD	A,10
004CBB B8          13720   STR3A:          CP	B
004CBC 38 06       13721                   JR	C,STR34
004CBE 50          13722                   LD	D,B
004CBF 58          13723                   LD	E,B
004CC0 78          13724   STR32:          LD	A,B
004CC1 C6 81       13725                   ADD	A,129
004CC3 4F          13726                   LD	C,A
004CC4 CB FA       13727   STR34:          SET	7,D
004CC6 1D          13728                   DEC	E
004CC7 7A          13729   STR35:          LD	A,D
004CC8 B9          13730                   CP	C
004CC9 30 0C       13731                   JR	NC,STR33
004CCB F1          13732   STR36:          POP	AF
004CCC 28 03       13733                   JR	Z,STR37
004CCE F2 D9 4C    13734                   JP	P,STR38
004CD1 F5          13735   STR37:          PUSH	AF
004CD2 1C          13736                   INC	E
004CD3 1D          13737                   DEC	E
004CD4 FA E8 4C    13738                   JP	M,STR4
004CD7 3E 30       13739   STR33:          LD	A,'0'
004CD9 15          13740   STR38:          DEC	D
004CDA E2 E0 4C    13741                   JP	PO,STR39
004CDD 36 2E       13742                   LD	(HL),'.'
004CDF 23          13743                   INC	HL
004CE0 77          13744   STR39:          LD	(HL),A
004CE1 23          13745                   INC	HL
004CE2 1D          13746                   DEC	E
004CE3 F2 C7 4C    13747                   JP	P,STR35
004CE6 18 E3       13748                   JR	STR36
004CE8             13749   ;
004CE8 F1          13750   STR4:           POP	AF
004CE9 0C          13751   STR40:          INC	C
004CEA 4D          13752                   LD	C,L
004CEB 20 27       13753                   JR	NZ,STR44
004CED 36 45       13754                   LD	(HL),'E'	;EXPONENT
004CEF 23          13755                   INC	HL
004CF0 78          13756                   LD	A,B
004CF1 3D          13757                   DEC	A
004CF2 F2 FA 4C    13758                   JP	P,STR41
004CF5 36 2D       13759                   LD	(HL),'-'
004CF7 23          13760                   INC	HL
004CF8 ED 44       13761                   NEG
004CFA 36 30       13762   STR41:          LD	(HL),'0'
004CFC 28 15       13763                   JR	Z,STR47
004CFE FE 0A       13764                   CP	10
004D00 47          13765                   LD	B,A
004D01 3E 3A       13766                   LD	A,':'
004D03 38 03       13767                   JR	C,STR42
004D05 23          13768                   INC	HL
004D06 36 30       13769                   LD	(HL),'0'
004D08 34          13770   STR42:          INC	(HL)
004D09 BE          13771                   CP	(HL)
004D0A 20 05       13772                   JR	NZ,STR43
004D0C 36 30       13773                   LD	(HL),'0'
004D0E 2B          13774                   DEC	HL
004D0F 34          13775                   INC	(HL)
004D10 23          13776                   INC	HL
004D11 10 F5       13777   STR43:          DJNZ	STR42
004D13 23          13778   STR47:          INC	HL
004D14 EB          13779   STR44:          EX	DE,HL
004D15 C9          13780                   RET
004D16             13781   ;
004D16             13782   ;Support subroutines:
004D16             13783   ;
004D16             13784   ;CON - Get unsigned numeric constant from ASCII string.
004D16             13785   ;   Inputs: ASCII string at (IX).
004D16             13786   ;  Outputs: Variable-type result in HLH'L'C
004D16             13787   ;           IX updated (points to delimiter)
004D16             13788   ;           A7 = 0 (numeric marker)
004D16             13789   ;
004D16 CD 03 4F    13790   CON:            CALL	ZEROmat		;INITIALISE TO ZERO
004D19 0E 00       13791                   LD	C,0		;TRUNCATION COUNTER
004D1B CD 9B 4D    13792                   CALL	NUMBERmat		;GET INTEGER PART
004D1E FE 2E       13793                   CP	'.'
004D20 06 00       13794                   LD	B,0		;DECL. PLACE COUNTER
004D22 CC 99 4D    13795                   CALL	Z,NUMBIX	;GET FRACTION PART
004D25 FE 45       13796                   CP	'E'
004D27 3E 00       13797                   LD	A,0		;INITIALISE EXPONENT
004D29 CC 6A 4D    13798                   CALL	Z,GETEXP	;GET EXPONENT
004D2C CB 7C       13799                   BIT	7,H
004D2E 20 08       13800                   JR	NZ,CON0		;INTEGER OVERFLOW
004D30 B7          13801                   OR	A
004D31 20 05       13802                   JR	NZ,CON0		;EXPONENT NON-ZERO
004D33 B8          13803                   CP	B
004D34 20 02       13804                   JR	NZ,CON0		;DECIMAL POINT
004D36 B9          13805                   CP	C
004D37 C8          13806                   RET	Z		;INTEGER
004D38 90          13807   CON0:           SUB	B
004D39 81          13808                   ADD	A,C
004D3A 0E 9F       13809                   LD	C,159
004D3C CD 7A 4E    13810                   CALL	FLOAT
004D3F CB BC       13811                   RES	7,H		;DITCH IMPLIED 1
004D41 B7          13812                   OR	A
004D42 C8          13813                   RET	Z		;DONE
004D43 FA 4E 4D    13814                   JP	M,CON2		;NEGATIVE EXPONENT
004D46 CD D7 4F    13815                   CALL	POWR10
004D49 CD EF 46    13816                   CALL	FMUL		;SCALE
004D4C AF          13817                   XOR	A
004D4D C9          13818                   RET
004D4E FE DA       13819   CON2:           CP	-38
004D50 38 0A       13820                   JR	C,CON3		;CAN'T SCALE IN ONE GO
004D52 ED 44       13821                   NEG
004D54 CD D7 4F    13822                   CALL	POWR10
004D57 CD 7F 46    13823                   CALL	FDIV		;SCALE
004D5A AF          13824                   XOR	A
004D5B C9          13825                   RET
004D5C F5          13826   CON3:           PUSH	AF
004D5D 3E 26       13827                   LD	A,38
004D5F CD D7 4F    13828                   CALL	POWR10
004D62 CD 7F 46    13829                   CALL	FDIV
004D65 F1          13830                   POP	AF
004D66 C6 26       13831                   ADD	A,38
004D68 18 E4       13832                   JR	CON2
004D6A             13833   ;
004D6A             13834   ;GETEXP - Get decimal exponent from string
004D6A             13835   ;     Inputs: ASCII string at (IX)
004D6A             13836   ;             (IX points at 'E')
004D6A             13837   ;             A = initial value
004D6A             13838   ;    Outputs: A = new exponent
004D6A             13839   ;             IX updated.
004D6A             13840   ;   Destroys: A,A',IX,F,F'
004D6A             13841   ;
004D6A C5          13842   GETEXP:         PUSH	BC		;SAVE REGISTERS
004D6B 47          13843                   LD	B,A		;INITIAL VALUE
004D6C 0E 02       13844                   LD	C,2		;2 DIGITS MAX
004D6E DD 23       13845                   INC	IX		;BUMP PAST 'E'
004D70 CD C5 50    13846                   CALL	SIGNQ
004D73 08          13847                   EX	AF,AF'		;SAVE EXPONENT SIGN
004D74 CD BB 50    13848   GETEX1:         CALL	DIGITQ
004D77 38 17       13849                   JR	C,GETEX2
004D79 78          13850                   LD	A,B		;B=B*10
004D7A 87          13851                   ADD	A,A
004D7B 87          13852                   ADD	A,A
004D7C 80          13853                   ADD	A,B
004D7D 87          13854                   ADD	A,A
004D7E 47          13855                   LD	B,A
004D7F DD 7E 00    13856                   LD	A,(IX)		;GET BACK DIGIT
004D82 DD 23       13857                   INC	IX
004D84 E6 0F       13858                   AND	0FH		;MASK UNWANTED BITS
004D86 80          13859                   ADD	A,B		;ADD IN DIGIT
004D87 47          13860                   LD	B,A
004D88 0D          13861                   DEC	C
004D89 F2 74 4D    13862                   JP	P,GETEX1
004D8C 06 64       13863                   LD	B,100		;FORCE OVERFLOW
004D8E 18 E4       13864                   JR	GETEX1
004D90 08          13865   GETEX2:         EX	AF,AF'		;RESTORE SIGN
004D91 FE 2D       13866                   CP	'-'
004D93 78          13867                   LD	A,B
004D94 C1          13868                   POP	BC		;RESTORE
004D95 C0          13869                   RET	NZ
004D96 ED 44       13870                   NEG			;NEGATE EXPONENT
004D98 C9          13871                   RET
004D99             13872   ;
004D99             13873   ;NUMBER: Get unsigned integer from string.
004D99             13874   ;    Inputs: string at (IX)
004D99             13875   ;            C = truncated digit count
004D99             13876   ;                (initially zero)
004D99             13877   ;            B = total digit count
004D99             13878   ;            HLH'L' = initial value
004D99             13879   ;   Outputs: HLH'L' = number (binary integer)
004D99             13880   ;            A = delimiter.
004D99             13881   ;            B, C & IX updated
004D99             13882   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004D99             13883   ;
004D99 DD 23       13884   NUMBIX:         INC	IX
004D9B CD BB 50    13885   NUMBERmat:         CALL	DIGITQ
004D9E D8          13886                   RET	C
004D9F 04          13887                   INC	B		;INCREMENT DIGIT COUNT
004DA0 DD 23       13888                   INC	IX
004DA2 CD 4E 4F    13889                   CALL	X10		;*10 & COPY OLD VALUE
004DA5 38 13       13890                   JR	C,NUMB1		;OVERFLOW
004DA7 0D          13891                   DEC	C		;SEE IF TRUNCATED
004DA8 0C          13892                   INC	C
004DA9 20 0F       13893                   JR	NZ,NUMB1	;IMPORTANT!
004DAB E6 0F       13894                   AND	0FH
004DAD D9          13895                   EXX
004DAE 06 00       13896                   LD	B,0
004DB0 4F          13897                   LD	C,A
004DB1 09          13898                   ADD	HL,BC		;ADD IN DIGIT
004DB2 D9          13899                   EXX
004DB3 30 E6       13900                   JR	NC,NUMBERmat
004DB5 23          13901                   INC	HL		;CARRY
004DB6 7C          13902                   LD	A,H
004DB7 B5          13903                   OR	L
004DB8 20 E1       13904                   JR	NZ,NUMBERmat
004DBA 0C          13905   NUMB1:          INC	C		;TRUNCATION COUNTER
004DBB CD C1 4E    13906                   CALL	SWAP1		;RESTORE PREVIOUS VALUE
004DBE 18 DB       13907                   JR	NUMBERmat
004DC0             13908   ;
004DC0             13909   ;FIX - Fix number to specified exponent value.
004DC0             13910   ;    Inputs: HLH'L'C = +ve non-zero number (floated)
004DC0             13911   ;            A = desired exponent (A>C)
004DC0             13912   ;   Outputs: HLH'L'C = fixed number (unsigned)
004DC0             13913   ;            fraction shifted into B'C'
004DC0             13914   ;            A'F' positive if integer input
004DC0             13915   ;  Destroys: C,H,L,A',B',C',H',L',F,F'
004DC0             13916   ;
004DC0 08          13917   FIX:            EX	AF,AF'
004DC1 AF          13918                   XOR	A
004DC2 08          13919                   EX	AF,AF'
004DC3 CB FC       13920                   SET	7,H		;IMPLIED 1
004DC5 CD C6 4E    13921   FIX1:           CALL	DIV2
004DC8 B9          13922                   CP	C
004DC9 C8          13923                   RET	Z
004DCA D2 C5 4D    13924                   JP	NC,FIX1
004DCD C3 D4 4E    13925                   JP	OFLOW
004DD0             13926   ;
004DD0             13927   ;SFIXmat - Convert to integer if necessary.
004DD0             13928   ;    Input: Variable-type number in HLH'L'C
004DD0             13929   ;   Output: Integer in HLH'L', C=0
004DD0             13930   ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
004DD0             13931   ;
004DD0             13932   ;NEGATE - Negate HLH'L'
004DD0             13933   ;    Destroys: H,L,H',L',F
004DD0             13934   ;
004DD0 CD BE 4E    13935   FIX2:           CALL	SWAP
004DD3 CD D9 4D    13936                   CALL	SFIXmat
004DD6 CD BE 4E    13937                   CALL	SWAP
004DD9 0D          13938   SFIXmat:           DEC	C
004DDA 0C          13939                   INC	C
004DDB C8          13940                   RET	Z		;INTEGER/ZERO
004DDC CB 7C       13941                   BIT	7,H		;SIGN
004DDE F5          13942                   PUSH	AF
004DDF 3E 9F       13943                   LD	A,159
004DE1 CD C0 4D    13944                   CALL	FIX
004DE4 F1          13945                   POP	AF
004DE5 0E 00       13946                   LD	C,0
004DE7 C8          13947                   RET	Z
004DE8 B7          13948   NEGATE:         OR	A		;CLEAR CARRY
004DE9 D9          13949                   EXX
004DEA D5          13950   NEG0:           PUSH	DE
004DEB EB          13951                   EX	DE,HL
004DEC 21 00 00    13952                   LD	HL,0
004DEF ED 52       13953                   SBC	HL,DE
004DF1 D1          13954                   POP	DE
004DF2 D9          13955                   EXX
004DF3 D5          13956                   PUSH	DE
004DF4 EB          13957                   EX	DE,HL
004DF5 21 00 00    13958                   LD	HL,0
004DF8 ED 52       13959                   SBC	HL,DE
004DFA D1          13960                   POP	DE
004DFB C9          13961                   RET
004DFC             13962   ;
004DFC             13963   ;NEG - Negate HLH'L'B'C'
004DFC             13964   ;    Also complements A (used in FADD)
004DFC             13965   ;    Destroys: A,H,L,B',C',H',L',F
004DFC             13966   ;
004DFC D9          13967   NEG:            EXX
004DFD 2F          13968                   CPL
004DFE E5          13969                   PUSH	HL
004DFF B7          13970                   OR	A		;CLEAR CARRY
004E00 ED 62       13971                   SBC	HL,HL
004E02 ED 42       13972                   SBC	HL,BC
004E04 44          13973                   LD	B,H
004E05 4D          13974                   LD	C,L
004E06 E1          13975                   POP	HL
004E07 18 E1       13976                   JR	NEG0
004E09             13977   ;
004E09             13978   ;SCALE - Trig scaling.
004E09             13979   ;MOD48 - 48-bit floating-point "modulus" (remainder).
004E09             13980   ;   Inputs: HLH'L'C unsigned floating-point dividend
004E09             13981   ;           DED'E'B'C'B unsigned 48-bit FP divisor
004E09             13982   ;  Outputs: HLH'L'C floating point remainder (H7=1)
004E09             13983   ;           E = quotient (bit 7 is sticky)
004E09             13984   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004E09             13985   ;FLO48 - Float unsigned number (48 bits)
004E09             13986   ;    Input/output in HLH'L'B'C'C
004E09             13987   ;   Destroys: C,H,L,B',C',H',L',F
004E09             13988   ;
004E09 3E 96       13989   SCALE:          LD	A,150
004E0B B9          13990                   CP	C
004E0C 3E 17       13991                   LD	A,ACLOST
004E0E DA 08 45    13992                   JP	C,ERROR_mat		;"Accuracy lost"
004E11 CD F0 49    13993                   CALL	PIBY4
004E14 D9          13994                   EXX
004E15 01 69 21    13995                   LD	BC,2169H	;3.141592653589793238
004E18 D9          13996                   EXX
004E19 CB FA       13997   MOD48:          SET	7,D		;IMPLIED 1
004E1B CB FC       13998                   SET	7,H
004E1D 79          13999                   LD	A,C
004E1E 0E 00       14000                   LD	C,0		;INIT QUOTIENT
004E20 DD 21 00 00 14001                   LD	IX,0
004E24 DD E5       14002                   PUSH	IX		;PUT ZERO ON STACK
004E26 B8          14003                   CP	B
004E27 38 3A       14004                   JR	C,MOD485	;DIVIDEND<DIVISOR
004E29 D9          14005   MOD481:         EXX			;CARRY=0 HERE
004E2A E3          14006                   EX	(SP),HL
004E2B ED 42       14007                   SBC	HL,BC
004E2D E3          14008                   EX	(SP),HL
004E2E ED 52       14009                   SBC	HL,DE
004E30 D9          14010                   EXX
004E31 ED 52       14011                   SBC	HL,DE
004E33 30 09       14012                   JR	NC,MOD482	;DIVIDEND>=DIVISOR
004E35 D9          14013                   EXX
004E36 E3          14014                   EX	(SP),HL
004E37 09          14015                   ADD	HL,BC
004E38 E3          14016                   EX	(SP),HL
004E39 ED 5A       14017                   ADC	HL,DE
004E3B D9          14018                   EXX
004E3C ED 5A       14019                   ADC	HL,DE
004E3E 3F          14020   MOD482:         CCF
004E3F CB 11       14021                   RL	C		;QUOTIENT
004E41 30 02       14022                   JR	NC,MOD483
004E43 CB F9       14023                   SET	7,C		;STICKY BIT
004E45 3D          14024   MOD483:         DEC	A
004E46 B8          14025                   CP	B
004E47 38 19       14026                   JR	C,MOD484	;DIVIDEND<DIVISOR
004E49 E3          14027                   EX	(SP),HL
004E4A 29          14028                   ADD	HL,HL		;DIVIDEND * 2
004E4B E3          14029                   EX	(SP),HL
004E4C D9          14030                   EXX
004E4D ED 6A       14031                   ADC	HL,HL
004E4F D9          14032                   EXX
004E50 ED 6A       14033                   ADC	HL,HL
004E52 30 D5       14034                   JR	NC,MOD481	;AGAIN
004E54 B7          14035                   OR	A
004E55 D9          14036                   EXX
004E56 E3          14037                   EX	(SP),HL
004E57 ED 42       14038                   SBC	HL,BC		;OVERFLOW, SO SUBTRACT
004E59 E3          14039                   EX	(SP),HL
004E5A ED 52       14040                   SBC	HL,DE
004E5C D9          14041                   EXX
004E5D ED 52       14042                   SBC	HL,DE
004E5F B7          14043                   OR	A
004E60 18 DC       14044                   JR	MOD482
004E62             14045   ;
004E62 3C          14046   MOD484:         INC	A
004E63 59          14047   MOD485:         LD	E,C		;QUOTIENT
004E64 4F          14048                   LD	C,A		;REMAINDER EXPONENT
004E65 D9          14049                   EXX
004E66 C1          14050                   POP	BC
004E67 D9          14051                   EXX
004E68 CB 7C       14052   FLO48:          BIT	7,H
004E6A C0          14053                   RET	NZ
004E6B D9          14054                   EXX
004E6C CB 21       14055                   SLA	C
004E6E CB 10       14056                   RL	B
004E70 ED 6A       14057                   ADC	HL,HL
004E72 D9          14058                   EXX
004E73 ED 6A       14059                   ADC	HL,HL
004E75 0D          14060                   DEC	C
004E76 C2 68 4E    14061                   JP	NZ,FLO48
004E79 C9          14062                   RET
004E7A             14063   ;
004E7A             14064   ;Float unsigned number
004E7A             14065   ;    Input/output in HLH'L'C
004E7A             14066   ;   Destroys: C,H,L,H',L',F
004E7A             14067   ;
004E7A CB 7C       14068   FLOAT:          BIT	7,H
004E7C C0          14069                   RET	NZ
004E7D D9          14070                   EXX			;SAME AS "X2"
004E7E 29          14071                   ADD	HL,HL		;TIME-CRITICAL
004E7F D9          14072                   EXX			;REGION
004E80 ED 6A       14073                   ADC	HL,HL		;(BENCHMARKS)
004E82 0D          14074                   DEC	C
004E83 C2 7A 4E    14075                   JP	NZ,FLOAT
004E86 C9          14076                   RET
004E87             14077   ;
004E87             14078   ;SFLOAT - Convert to floating-point if necessary.
004E87             14079   ;    Input: Variable-type number in HLH'L'C
004E87             14080   ;    Output: Floating-point in HLH'L'C
004E87             14081   ;    Destroys: A,C,H,L,H',L',F
004E87             14082   ;
004E87 08          14083   FLOATA:         EX	AF,AF'
004E88             14084                   ; ADD	A,(RTABLE-DTABLE)/2
004E88 C6 2E       14085                   ADD	A,RTABLE-DTABLE/2
004E8A 08          14086                   EX	AF,AF'
004E8B CD BE 4E    14087   FLOAT2:         CALL	SWAP
004E8E CD 94 4E    14088                   CALL	SFLOAT
004E91 CD BE 4E    14089                   CALL	SWAP
004E94 0D          14090   SFLOAT:         DEC	C
004E95 0C          14091                   INC	C
004E96 C0          14092                   RET	NZ		;ALREADY FLOATING-POINT
004E97 CD E3 4E    14093                   CALL	TESTmat
004E9A C8          14094                   RET	Z		;ZERO
004E9B 7C          14095                   LD	A,H
004E9C B7          14096                   OR	A
004E9D FC E8 4D    14097                   CALL	M,NEGATE
004EA0 0E 9F       14098                   LD	C,159
004EA2 CD 7A 4E    14099                   CALL	FLOAT
004EA5 B7          14100                   OR	A
004EA6 F8          14101                   RET	M		;NEGATIVE
004EA7 CB BC       14102                   RES	7,H
004EA9 C9          14103                   RET
004EAA             14104   ;
004EAA             14105   ;ROUND UP
004EAA             14106   ;Return with carry set if 32-bit overflow
004EAA             14107   ;   Destroys: H,L,B',C',H',L',F
004EAA             14108   ;
004EAA D9          14109   ADD1:           EXX
004EAB 01 01 00    14110                   LD	BC,1
004EAE 09          14111                   ADD	HL,BC
004EAF D9          14112                   EXX
004EB0 D0          14113                   RET	NC
004EB1 C5          14114                   PUSH	BC
004EB2 01 01 00    14115                   LD	BC,1
004EB5 09          14116                   ADD	HL,BC
004EB6 C1          14117                   POP	BC
004EB7 C9          14118                   RET
004EB8             14119   ;
004EB8             14120   ;ODD - Add one if even, leave alone if odd.
004EB8             14121   ; (Used to perform unbiassed rounding, i.e.
004EB8             14122   ;  number is rounded up half the time)
004EB8             14123   ;    Destroys: L',F (carry cleared)
004EB8             14124   ;
004EB8 B7          14125   ODD:            OR	A		;CLEAR CARRY
004EB9 D9          14126                   EXX
004EBA CB C5       14127                   SET	0,L		;MAKE ODD
004EBC D9          14128                   EXX
004EBD C9          14129                   RET
004EBE             14130   ;
004EBE             14131   ;SWAP - Swap arguments.
004EBE             14132   ;    Exchanges DE,HL D'E',H'L' and B,C
004EBE             14133   ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
004EBE             14134   ;SWAP1 - Swap DEHL with D'E'H'L'
004EBE             14135   ;    Destroys: D,E,H,L,D',E',H',L'
004EBE             14136   ;
004EBE 79          14137   SWAP:           LD	A,C
004EBF 48          14138                   LD	C,B
004EC0 47          14139                   LD	B,A
004EC1 EB          14140   SWAP1:          EX	DE,HL
004EC2 D9          14141                   EXX
004EC3 EB          14142                   EX	DE,HL
004EC4 D9          14143                   EXX
004EC5 C9          14144                   RET
004EC6             14145   ;
004EC6             14146   ;DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
004EC6             14147   ;INCC - destroys C,F
004EC6             14148   ;OFLOW
004EC6             14149   ;
004EC6 CD 64 4F    14150   DIV2:           CALL	D2
004EC9 D9          14151                   EXX
004ECA CB 18       14152                   RR	B
004ECC CB 19       14153                   RR	C
004ECE 08          14154                   EX	AF,AF'
004ECF B0          14155                   OR	B
004ED0 08          14156                   EX	AF,AF'
004ED1 D9          14157                   EXX
004ED2 0C          14158   INCC:           INC	C
004ED3 C0          14159                   RET	NZ
004ED4 3E 14       14160   OFLOW:          LD	A,TOOBIG
004ED6 C3 08 45    14161                   JP	ERROR_mat		;"Too big"
004ED9             14162   ;
004ED9             14163   ;FTEST - Test for zero & sign
004ED9             14164   ;    Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
004ED9             14165   ;
004ED9 CD E3 4E    14166   FTEST:          CALL	TESTmat
004EDC C8          14167                   RET	Z
004EDD 7C          14168                   LD	A,H
004EDE E6 80       14169                   AND	10000000B
004EE0 F6 40       14170                   OR	01000000B
004EE2 C9          14171                   RET
004EE3             14172   ;
004EE3             14173   ;TEST - Test HLH'L' for zero.
004EE3             14174   ;    Output: Z-flag set & A=0 if HLH'L'=0
004EE3             14175   ;    Destroys: A,F
004EE3             14176   ;
004EE3 7C          14177   TESTmat:           LD	A,H
004EE4 B5          14178                   OR	L
004EE5 D9          14179                   EXX
004EE6 B4          14180                   OR	H
004EE7 B5          14181                   OR	L
004EE8 D9          14182                   EXX
004EE9 C9          14183                   RET
004EEA             14184   ;
004EEA             14185   ;FCOMP - Compare two numbers
004EEA             14186   ;    Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
004EEA             14187   ;
004EEA 78          14188   FCOMP:          LD	A,B
004EEB B1          14189                   OR	C		;Both integer?
004EEC 20 0A       14190                   JR	NZ,FCOMP1
004EEE CD 00 4F    14191                   CALL	ICP
004EF1 3E 00       14192   FCOMP0:         LD	A,0
004EF3 C8          14193                   RET	Z		;Equal
004EF4 3E 80       14194                   LD	A,80H
004EF6 1F          14195                   RRA
004EF7 C9          14196                   RET
004EF8             14197   ;
004EF8 CD 8B 4E    14198   FCOMP1:         CALL	FLOAT2		;Float both
004EFB CD 0D 4F    14199                   CALL	FCP
004EFE 18 F1       14200                   JR	FCOMP0
004F00             14201   ;
004F00             14202   ;Integer and floating point compare.
004F00             14203   ;Sets carry & zero flags according to HLH'L'C-DED'E'B
004F00             14204   ;Result pre-set to FALSE
004F00             14205   ;ICP1, FCP1 destroy A,F
004F00             14206   ;
004F00             14207   ;ZERO - Return zero.
004F00             14208   ; Destroys: A,C,H,L,H',L'
004F00             14209   ;
004F00 CD 2C 4F    14210   ICP:            CALL	ICP1
004F03 3E 00       14211   ZEROmat:           LD	A,0
004F05 D9          14212                   EXX
004F06 67          14213                   LD	H,A
004F07 6F          14214                   LD	L,A
004F08 D9          14215                   EXX
004F09 67          14216                   LD	H,A
004F0A 6F          14217                   LD	L,A
004F0B 4F          14218                   LD	C,A
004F0C C9          14219                   RET
004F0D             14220   ;
004F0D CD 1F 4F    14221   FCP:            CALL	FCP1
004F10 18 F1       14222                   JR	ZEROmat		;PRESET FALSE
004F12             14223   ;
004F12 79          14224   FCP0:           LD	A,C
004F13 B8          14225                   CP	B		;COMPARE EXPONENTS
004F14 C0          14226                   RET	NZ
004F15 ED 52       14227   ICP0:           SBC	HL,DE		;COMP MANTISSA MSB
004F17 19          14228                   ADD	HL,DE
004F18 C0          14229                   RET	NZ
004F19 D9          14230                   EXX
004F1A ED 52       14231                   SBC	HL,DE		;COMP MANTISSA LSB
004F1C 19          14232                   ADD	HL,DE
004F1D D9          14233                   EXX
004F1E C9          14234                   RET
004F1F             14235   ;
004F1F 7C          14236   FCP1:           LD	A,H
004F20 AA          14237                   XOR	D
004F21 7C          14238                   LD	A,H
004F22 17          14239                   RLA
004F23 F8          14240                   RET	M
004F24 30 EC       14241                   JR	NC,FCP0
004F26 CD 12 4F    14242                   CALL	FCP0
004F29 C8          14243                   RET	Z		;** V0.1 BUG FIX
004F2A 3F          14244                   CCF
004F2B C9          14245                   RET
004F2C             14246   ;
004F2C 7C          14247   ICP1:           LD	A,H
004F2D AA          14248                   XOR	D
004F2E F2 15 4F    14249                   JP	P,ICP0
004F31 7C          14250                   LD	A,H
004F32 17          14251                   RLA
004F33 C9          14252                   RET
004F34             14253   ;
004F34             14254   ;ADD - Integer add.
004F34             14255   ;Carry, sign & zero flags valid on exit
004F34             14256   ;    Destroys: H,L,H',L',F
004F34             14257   ;
004F34 05          14258   X10B:           DEC	B
004F35 0C          14259                   INC	C
004F36 CD 70 4F    14260   X5:             CALL	COPY0
004F39 CD 63 4F    14261                   CALL	D2C
004F3C CD 63 4F    14262                   CALL	D2C
004F3F 08          14263                   EX	AF,AF'		;SAVE CARRY
004F40 D9          14264   ADD:            EXX
004F41 19          14265                   ADD	HL,DE
004F42 D9          14266                   EXX
004F43 ED 5A       14267                   ADC	HL,DE
004F45 C9          14268                   RET
004F46             14269   ;
004F46             14270   ;SUB - Integer subtract.
004F46             14271   ;Carry, sign & zero flags valid on exit
004F46             14272   ;    Destroys: H,L,H',L',F
004F46             14273   ;
004F46 D9          14274   SUB:            EXX
004F47 B7          14275                   OR	A
004F48 ED 52       14276                   SBC	HL,DE
004F4A D9          14277                   EXX
004F4B ED 52       14278                   SBC	HL,DE
004F4D C9          14279                   RET
004F4E             14280   ;
004F4E             14281   ;X10 - unsigned integer * 10
004F4E             14282   ;   Inputs: HLH'L' initial value
004F4E             14283   ;  Outputs: DED'E' = initial HLH'L'
004F4E             14284   ;           Carry bit set if overflow
004F4E             14285   ;           If carry not set HLH'L'=result
004F4E             14286   ; Destroys: D,E,H,L,D',E',H',L',F
004F4E             14287   ;X2 - Multiply HLH'L' by 2 as 32-bit integer.
004F4E             14288   ;    Carry set if MSB=1 before shift.
004F4E             14289   ;    Sign set if MSB=1 after shift.
004F4E             14290   ;    Destroys: H,L,H',L',F
004F4E             14291   ;
004F4E CD 70 4F    14292   X10:            CALL	COPY0		;DED'E'=HLH'L'
004F51 CD 5D 4F    14293                   CALL	X2
004F54 D8          14294                   RET	C		;TOO BIG
004F55 CD 5D 4F    14295                   CALL	X2
004F58 D8          14296                   RET	C
004F59 CD 40 4F    14297                   CALL	ADD
004F5C D8          14298                   RET	C
004F5D D9          14299   X2:             EXX
004F5E 29          14300                   ADD	HL,HL
004F5F D9          14301                   EXX
004F60 ED 6A       14302                   ADC	HL,HL
004F62 C9          14303                   RET
004F63             14304   ;
004F63             14305   ;D2 - Divide HLH'L' by 2 as 32-bit integer.
004F63             14306   ;    Carry set if LSB=1 before shift.
004F63             14307   ;    Destroys: H,L,H',L',F
004F63             14308   ;
004F63 0C          14309   D2C:            INC	C
004F64 CB 3C       14310   D2:             SRL	H
004F66 CB 1D       14311                   RR	L
004F68 D9          14312                   EXX
004F69 CB 1C       14313                   RR	H
004F6B CB 1D       14314                   RR	L
004F6D D9          14315                   EXX
004F6E C9          14316                   RET
004F6F             14317   ;
004F6F             14318   ;COPY - COPY HLH'L'C INTO DED'E'B
004F6F             14319   ;  Destroys: B,C,D,E,H,L,D',E',H',L'
004F6F             14320   ;
004F6F 41          14321   COPY:           LD	B,C
004F70 54          14322   COPY0:          LD	D,H
004F71 5D          14323                   LD	E,L
004F72 D9          14324                   EXX
004F73 54          14325                   LD	D,H
004F74 5D          14326                   LD	E,L
004F75 D9          14327                   EXX
004F76 C9          14328                   RET
004F77             14329   ;
004F77             14330   ;SQUARE - PUSH X*X
004F77             14331   ;PUSH5 - PUSH HLH'L'C ONTO STACK.
004F77             14332   ;  Destroys: SP,IX
004F77             14333   ;
004F77 CD 6F 4F    14334   SQUARE:         CALL	COPY
004F7A CD EF 46    14335                   CALL	FMUL
004F7D DD E1       14336   PUSH5:          POP	IX		;RETURN ADDRESS
004F7F C5          14337                   PUSH	BC
004F80 E5          14338                   PUSH	HL
004F81 D9          14339                   EXX
004F82 E5          14340                   PUSH	HL
004F83 D9          14341                   EXX
004F84 DD E9       14342                   JP	(IX)		;"RETURN"
004F86             14343   ;
004F86             14344   ;POP5 - POP DED'E'B OFF STACK.
004F86             14345   ;  Destroys: A,B,D,E,D',E',SP,IX
004F86             14346   ;
004F86 DD E1       14347   POP5:           POP	IX		;RETURN ADDRESS
004F88 D9          14348                   EXX
004F89 D1          14349                   POP	DE
004F8A D9          14350                   EXX
004F8B D1          14351                   POP	DE
004F8C 79          14352                   LD	A,C
004F8D C1          14353                   POP	BC
004F8E 41          14354                   LD	B,C
004F8F 4F          14355                   LD	C,A
004F90 DD E9       14356                   JP	(IX)		;"RETURN"
004F92             14357   ;
004F92             14358   ;RATIO - Calculate (X-1)/(X+1)
004F92             14359   ;    Inputs: X in HLH'L'C
004F92             14360   ;   Outputs: (X-1)/(X+1) in HLH'L'C
004F92             14361   ;  Destroys: Everything except IY,SP,I
004F92             14362   ;
004F92 CD 7D 4F    14363   RATIO:          CALL	PUSH5		;SAVE X
004F95 CD E5 49    14364                   CALL	DONE
004F98 CD 27 46    14365                   CALL	FADD
004F9B CD 86 4F    14366                   CALL	POP5		;RESTORE X
004F9E CD 7D 4F    14367                   CALL	PUSH5		;SAVE X+1
004FA1 CD BE 4E    14368                   CALL	SWAP
004FA4 CD E5 49    14369                   CALL	DONE
004FA7 CD 11 46    14370                   CALL	FSUB
004FAA CD 86 4F    14371                   CALL	POP5		;RESTORE X+1
004FAD C3 7F 46    14372                   JP	FDIV
004FB0             14373   ;
004FB0             14374   ;POLY - Evaluate a polynomial.
004FB0             14375   ;    Inputs: X in HLH'L'C and also stored at (SP+2)
004FB0             14376   ;            Polynomial coefficients follow call.
004FB0             14377   ;   Outputs: Result in HLH'L'C
004FB0             14378   ;  Destroys: Everything except IY,SP,I
004FB0             14379   ;Routine terminates on finding a coefficient >=1.
004FB0             14380   ;Note: The last coefficient is EXECUTED on return
004FB0             14381   ;      so must contain only innocuous bytes!
004FB0             14382   ;
004FB0 DD 21 02 00 14383   POLY:           LD	IX,2
004FB4 DD 39       14384                   ADD	IX,SP
004FB6 DD E3       14385                   EX	(SP),IX
004FB8 CD D3 19    14386                   CALL	DLOAD5		;FIRST COEFFICIENT
004FBB CD EF 46    14387   POLY1:          CALL	FMUL
004FBE 11 05 00    14388                   LD	DE,5
004FC1 DD 19       14389                   ADD	IX,DE
004FC3 CD D3 19    14390                   CALL	DLOAD5		;NEXT COEFFICIENT
004FC6 DD E3       14391                   EX	(SP),IX
004FC8 04          14392                   INC	B
004FC9 05          14393                   DEC	B		;TEST
004FCA FA 27 46    14394                   JP	M,FADD
004FCD CD 27 46    14395                   CALL	FADD
004FD0 CD D3 19    14396                   CALL	DLOAD5		;X
004FD3 DD E3       14397                   EX	(SP),IX
004FD5 18 E4       14398                   JR	POLY1
004FD7             14399   ;
004FD7             14400   ;POWR10 - Calculate power of ten.
004FD7             14401   ;    Inputs: A=power of 10 required (A<128)
004FD7             14402   ;            A=binary exponent to be exceeded (A>=128)
004FD7             14403   ;   Outputs: DED'E'B = result
004FD7             14404   ;            A = actual power of ten returned
004FD7             14405   ;  Destroys: A,B,D,E,A',D',E',F,F'
004FD7             14406   ;
004FD7 3C          14407   POWR10:         INC	A
004FD8 08          14408                   EX	AF,AF'
004FD9 E5          14409                   PUSH	HL
004FDA D9          14410                   EXX
004FDB E5          14411                   PUSH	HL
004FDC D9          14412                   EXX
004FDD CD E5 49    14413                   CALL	DONE
004FE0 CD BE 4E    14414                   CALL	SWAP
004FE3 AF          14415                   XOR	A
004FE4 08          14416   POWR11:         EX	AF,AF'
004FE5 3D          14417                   DEC	A
004FE6 28 20       14418                   JR	Z,POWR14	;EXITmat TYPE 1
004FE8 F2 EF 4F    14419                   JP	P,POWR13
004FEB B9          14420                   CP	C
004FEC 38 1A       14421                   JR	C,POWR14	;EXITmat TYPE 2
004FEE 3C          14422                   INC	A
004FEF 08          14423   POWR13:         EX	AF,AF'
004FF0 3C          14424                   INC	A
004FF1 CB FC       14425                   SET	7,H
004FF3 CD 36 4F    14426                   CALL	X5
004FF6 30 05       14427                   JR	NC,POWR12
004FF8 08          14428                   EX	AF,AF'
004FF9 CD 63 4F    14429                   CALL	D2C
004FFC 08          14430                   EX	AF,AF'
004FFD 08          14431   POWR12:         EX	AF,AF'
004FFE DC AA 4E    14432                   CALL	C,ADD1		;ROUND UP
005001 0C          14433                   INC	C
005002 FA E4 4F    14434                   JP	M,POWR11
005005 C3 D4 4E    14435                   JP	OFLOW
005008 CD BE 4E    14436   POWR14:         CALL	SWAP
00500B CB BA       14437                   RES	7,D
00500D D9          14438                   EXX
00500E E1          14439                   POP	HL
00500F D9          14440                   EXX
005010 E1          14441                   POP	HL
005011 08          14442                   EX	AF,AF'
005012 C9          14443                   RET
005013             14444   ;
005013             14445   ;DIVA, DIVB - DIVISION PRIMITIVE.
005013             14446   ;    Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
005013             14447   ;              Remainder in H'L'HL
005013             14448   ;    Inputs: A = loop counter (normally -32)
005013             14449   ;    Destroys: A,D,E,H,L,D',E',H',L',F
005013             14450   ;
005013 B7          14451   DIVA:           OR	A		;CLEAR CARRY
005014 ED 42       14452   DIV0:           SBC	HL,BC		;DIVIDEND-DIVISOR
005016 D9          14453                   EXX
005017 ED 42       14454                   SBC	HL,BC
005019 D9          14455                   EXX
00501A 30 05       14456                   JR	NC,DIV1
00501C 09          14457                   ADD	HL,BC		;DIVIDEND+DIVISOR
00501D D9          14458                   EXX
00501E ED 4A       14459                   ADC	HL,BC
005020 D9          14460                   EXX
005021 3F          14461   DIV1:           CCF
005022 CB 13       14462   DIVC:           RL	E		;SHIFT RESULT INTO DE
005024 CB 12       14463                   RL	D
005026 D9          14464                   EXX
005027 CB 13       14465                   RL	E
005029 CB 12       14466                   RL	D
00502B D9          14467                   EXX
00502C 3C          14468                   INC	A
00502D F0          14469                   RET	P
00502E ED 6A       14470   DIVB:           ADC	HL,HL		;DIVIDEND*2
005030 D9          14471                   EXX
005031 ED 6A       14472                   ADC	HL,HL
005033 D9          14473                   EXX
005034 30 DE       14474                   JR	NC,DIV0
005036 B7          14475                   OR	A
005037 ED 42       14476                   SBC	HL,BC		;DIVIDEND-DIVISOR
005039 D9          14477                   EXX
00503A ED 42       14478                   SBC	HL,BC
00503C D9          14479                   EXX
00503D 37          14480                   SCF
00503E C3 22 50    14481                   JP	DIVC
005041             14482   ;
005041             14483   ;MULA, MULB - MULTIPLICATION PRIMITIVE.
005041             14484   ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
005041             14485   ;    Inputs: A = loop counter (usually -32)
005041             14486   ;            H'L'HL = 0
005041             14487   ;    Destroys: D,E,H,L,D',E',H',L',A,F
005041             14488   ;
005041 B7          14489   MULA:           OR	A		;CLEAR CARRY
005042 D9          14490   MUL0:           EXX
005043 CB 1A       14491                   RR	D		;MULTIPLIER/2
005045 CB 1B       14492                   RR	E
005047 D9          14493                   EXX
005048 CB 1A       14494                   RR	D
00504A CB 1B       14495                   RR	E
00504C 30 05       14496                   JR	NC,MUL1
00504E 09          14497                   ADD	HL,BC		;ADD IN MULTIPLICAND
00504F D9          14498                   EXX
005050 ED 4A       14499                   ADC	HL,BC
005052 D9          14500                   EXX
005053 3C          14501   MUL1:           INC	A
005054 F0          14502                   RET	P
005055 D9          14503   MULB:           EXX
005056 CB 1C       14504                   RR	H		;PRODUCT/2
005058 CB 1D       14505                   RR	L
00505A D9          14506                   EXX
00505B CB 1C       14507                   RR	H
00505D CB 1D       14508                   RR	L
00505F C3 42 50    14509                   JP	MUL0
005062             14510   ;
005062             14511   ;SQRA, SQRB - SQUARE ROOT PRIMITIVES
005062             14512   ;    Function: B'C'BC = SQR (D'E'DE)
005062             14513   ;    Inputs: A = loop counter (normally -31)
005062             14514   ;            B'C'BCH'L'HL initialised to 0
005062             14515   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
005062             14516   ;
005062 ED 42       14517   SQR1:           SBC	HL,BC
005064 D9          14518                   EXX
005065 ED 42       14519                   SBC	HL,BC
005067 D9          14520                   EXX
005068 0C          14521                   INC	C
005069 30 07       14522                   JR	NC,SQR2
00506B 0D          14523                   DEC	C
00506C 09          14524                   ADD	HL,BC
00506D D9          14525                   EXX
00506E ED 4A       14526                   ADC	HL,BC
005070 D9          14527                   EXX
005071 0D          14528                   DEC	C
005072 3C          14529   SQR2:           INC	A
005073 F0          14530                   RET	P
005074 CB 21       14531   SQRA:           SLA	C
005076 CB 10       14532                   RL	B
005078 0C          14533                   INC	C
005079 D9          14534                   EXX
00507A CB 11       14535                   RL	C
00507C CB 10       14536                   RL	B
00507E CD AA 50    14537                   CALL	SLA8
005081 CD AA 50    14538                   CALL	SLA8
005084 D9          14539                   EXX
005085 D2 62 50    14540                   JP	NC,SQR1
005088 B7          14541   SQR3:           OR	A
005089 ED 42       14542                   SBC	HL,BC
00508B D9          14543                   EXX
00508C ED 42       14544                   SBC	HL,BC
00508E D9          14545                   EXX
00508F 0C          14546                   INC	C
005090 C3 72 50    14547                   JP	SQR2
005093             14548   ;
005093 29          14549   SQRB:           ADD	HL,HL
005094 D9          14550                   EXX
005095 ED 6A       14551                   ADC	HL,HL
005097 D9          14552                   EXX
005098 38 EE       14553                   JR	C,SQR3
00509A 3C          14554                   INC	A
00509B 0C          14555                   INC	C
00509C ED 42       14556                   SBC	HL,BC
00509E D9          14557                   EXX
00509F ED 42       14558                   SBC	HL,BC
0050A1 D9          14559                   EXX
0050A2 D0          14560                   RET	NC
0050A3 09          14561                   ADD	HL,BC
0050A4 D9          14562                   EXX
0050A5 ED 4A       14563                   ADC	HL,BC
0050A7 D9          14564                   EXX
0050A8 0D          14565                   DEC	C
0050A9 C9          14566                   RET
0050AA             14567   ;
0050AA D9          14568   SLA8:           EXX
0050AB CB 23       14569                   SLA	E
0050AD CB 12       14570                   RL	D
0050AF D9          14571                   EXX
0050B0 CB 13       14572                   RL	E
0050B2 CB 12       14573                   RL	D
0050B4 D9          14574                   EXX
0050B5 ED 6A       14575                   ADC	HL,HL
0050B7 D9          14576                   EXX
0050B8 ED 6A       14577                   ADC	HL,HL
0050BA C9          14578                   RET
0050BB             14579   ;
0050BB DD 7E 00    14580   DIGITQ:         LD	A,(IX)
0050BE FE 3A       14581                   CP	'9'+1
0050C0 3F          14582                   CCF
0050C1 D8          14583                   RET	C
0050C2 FE 30       14584                   CP	'0'
0050C4 C9          14585                   RET
0050C5             14586   ;
0050C5 DD 7E 00    14587   SIGNQ:          LD	A,(IX)
0050C8 DD 23       14588                   INC	IX
0050CA FE 20       14589                   CP	' '
0050CC 28 F7       14590                   JR	Z,SIGNQ
0050CE FE 2B       14591                   CP	'+'
0050D0 C8          14592                   RET	Z
0050D1 FE 2D       14593                   CP	'-'
0050D3 C8          14594                   RET	Z
0050D4 DD 2B       14595                   DEC	IX
0050D6 C9          14596                   RET
0050D7             14597   ;
0050D7 08          14598   ABS2:           EX	AF,AF'
0050D8 CB 7C       14599                   BIT	7,H
0050DA C4 E8 4D    14600                   CALL	NZ,NEGATE	;MAKE ARGUMENTS +VE
0050DD CD BE 4E    14601                   CALL	SWAP
0050E0 CB 7C       14602                   BIT	7,H
0050E2 C4 E8 4D    14603                   CALL	NZ,NEGATE
0050E5 44          14604                   LD	B,H
0050E6 4D          14605                   LD	C,L
0050E7 21 00 00    14606                   LD	HL,0
0050EA D9          14607                   EXX
0050EB 44          14608                   LD	B,H
0050EC 4D          14609                   LD	C,L
0050ED 21 00 00    14610                   LD	HL,0
0050F0 C9          14611                   RET
0050F1             14612   ;
0050F1             14613   ;                END
0050F1             14614   ; --- End math.asm ---
0050F1             14615   
0050F1             14616   ; --- Begin data.asm ---
0050F1             14617   ;
0050F1             14618   ;Automatically created from original source on 2024-12-15 15:29:12
0050F1             14619   ;
0050F1             14620                   .ASSUME ADL = 0
0050F1             14621   ;	.ORG 0x0000
0050F1             14622   ;                DEFINE LORAM, SPACE = ROM
0050F1             14623   ;                SEGMENT LORAM
0050F1             14624   ;
0050F1             14625   ;                XDEF	FLAGS
0050F1             14626   ;                XDEF	OSWRCHPT
0050F1             14627   ;                XDEF	OSWRCHCH
0050F1             14628   ;                XDEF	OSWRCHFH
0050F1             14629   ;                XDEF	KEYDOWN
0050F1             14630   ;                XDEF	KEYASCII
0050F1             14631   ;                XDEF	KEYCOUNT
0050F1             14632   ;                XDEF	SCRAP
0050F1             14633   ;                XDEF	BUFFER
0050F1             14634   ;                XDEF	LISTON
0050F1             14635   ;                XDEF	PAGE_
0050F1             14636   ;
0050F1             14637   FLAGS:          DS	1
0050F2             14638   OSWRCHPT:       DS	2
0050F4             14639   OSWRCHCH:       DS	1
0050F5             14640   OSWRCHFH:       DS	1
0050F6             14641   KEYDOWN:        DS	1
0050F7             14642   KEYASCII:       DS	1
0050F8             14643   KEYCOUNT:       DS	1
0050F9             14644   SCRAP:          DS	31
005118             14645   ;
005118             14646   end_binary: ;  for 05_assemble.py to know where to truncate the binary file
005118             14647   
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 
005118 FF FF FF FF 14648                   ALIGN 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
005200             14649   ;
005200             14650   ;RAM MODULE FOR BBC BASIC INTERPRETER
005200             14651   ;FOR USE WITH VERSION 5.0 OF BBC BASIC
005200             14652   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
005200             14653   ;
005200             14654   ;                XDEF	ACCS
005200             14655   ;                XDEF	BUFFER
005200             14656   ;                XDEF	ONERSP
005200             14657   ;                XDEF	LIBASE
005200             14658   ;                XDEF	PAGE_
005200             14659   ;                XDEF	LOMEM
005200             14660   ;                XDEF	FREE
005200             14661   ;                XDEF	HIMEM
005200             14662   ;                XDEF	RANDOM
005200             14663   ;                XDEF	COUNT
005200             14664   ;                XDEF	WIDTH
005200             14665   ;                XDEF	ERL
005200             14666   ;                XDEF	ERR
005200             14667   ;                XDEF	ERRTRP
005200             14668   ;                XDEF	ERRTXT
005200             14669   ;                XDEF	TRACEN
005200             14670   ;                XDEF	AUTONO
005200             14671   ;                XDEF	INCREM
005200             14672   ;                XDEF	LISTON
005200             14673   ;                XDEF	DATPTR
005200             14674   ;                XDEF	FNPTR
005200             14675   ;                XDEF	PROPTR
005200             14676   ;                XDEF	STAVAR
005200             14677   ;                XDEF	OC
005200             14678   ;                XDEF	PC
005200             14679   ;                XDEF	DYNVAR
005200             14680   ;                XDEF	CURLIN
005200             14681   ;                XDEF	USER
005200             14682   ;
005200             14683   ;n.b. ACCS, BUFFER & STAVAR must be on page boundaries.
005200             14684   ;
005200             14685   ACCS:           DS	256		;STRING ACCUMULATOR
005300             14686   BUFFER:         DS	256		;STRING INPUT BUFFER
005400             14687   
005400             14688   STAVAR:         DS	27*4		;STATIC VARIABLES
00546C             14689   ; OC:             EQU	STAVAR+15*4	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             14690   ; PC:             EQU	STAVAR+16*4	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             14691   OC:             EQU	15*4+STAVAR	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             14692   PC:             EQU	16*4+STAVAR	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             14693   DYNVAR:         DS	54*2		;DYN. VARIABLE POINTERS
0054D8             14694   FNPTR:          DS	2		;DYN. FUNCTION POINTER
0054DA             14695   PROPTR:         DS	2		;DYN. PROCEDURE POINTER
0054DC             14696   ;
0054DC             14697   PAGE_:          DS	2		;START OF USER PROGRAM
0054DE             14698   LOMEM:          DS	2		;START OF DYN. STORAGE
0054E0             14699   FREE:           DS	2		;FIRST FREE-SPACE BYTE
0054E2             14700   HIMEM:          DS	2		;FIRST BYTE ABOVE STACK
0054E4             14701   LIBASE:         DS	2		;START OF FIRST LIBRARY
0054E6             14702   ;
0054E6             14703   TRACEN:         DS	2		;TRACE FLAG & NUMBER
0054E8             14704   AUTONO:         DS	2		;AUTO FLAG & NUMBER
0054EA             14705   ERRTRP:         DS	2		;ON ERROR STMT POINTER \
0054EC             14706   ONERSP:         DS	2		;ON ERROR LOCAL STKPTR /
0054EE             14707   ERRTXT:         DS	2		;ERROR MESSAGE POINTER
0054F0             14708   DATPTR:         DS	2		;DATA POINTER
0054F2             14709   ERL:            DS	2		;LINE NO OF LAST ERROR
0054F4             14710   CURLIN:         DS	2		;POINTER TO CURRENT LINE
0054F6             14711   RANDOM:         DS	5		;RANDOM NUMBER
0054FB             14712   COUNT:          DS	1		;PRINT POSITION
0054FC             14713   WIDTH:          DS	1		;PRINT WIDTH
0054FD             14714   ERR:            DS	1		;ERROR NUMBER
0054FE             14715   LISTON:         DS	1		;LISTO & OPT FLAG
0054FF             14716   INCREM:         DS	1		;AUTO INCREMENT
005500             14717   VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; originally in equs.inc
005500             14718   ;
005500             14719   USER:           ; END
005500             14720   ; --- End data.asm ---
005500             14721   
