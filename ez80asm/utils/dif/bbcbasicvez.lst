PC     Output      Line
040000             0001   ; --- Begin mos_api.inc ---
040000             0002   ;
040000             0003   ; Title:	AGON MOS - API for user projects
040000             0004   ; Author:	Dean Belfield
040000             0005   ; Created:	03/08/2022
040000             0006   ; Last Updated:	11/11/2023
040000             0007   ;
040000             0008   ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
040000             0009   ;
040000             0010   ; Modinfo:
040000             0011   ; 05/08/2022:	Added mos_feof
040000             0012   ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0013   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0014   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0015   ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0016   ; 13/10/2022:	Added mos_oscli
040000             0017   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0018   ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0019   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0020   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0021   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0022   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0023   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0024   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0025   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0026   ; 19/05/2023:	Added sysvar_scrMode
040000             0027   ; 05/06/2023:	Added sysvar_rtcEnable
040000             0028   ; 03/08/2023:	Added mos_setkbvector
040000             0029   ; 10/08/2023:	Added mos_getkbmap
040000             0030   ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0031   ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
040000             0032   ;
040000             0033   ; VDP control (VDU 23, 0, n)
040000             0034   ;
040000             0035   vdp_gp:			EQU 	80h
040000             0036   vdp_keycode:		EQU 	81h
040000             0037   vdp_cursor:		EQU	82h
040000             0038   vdp_scrchar:		EQU	83h
040000             0039   vdp_scrpixel:		EQU	84h
040000             0040   vdp_audio:		EQU	85h
040000             0041   vdp_mode:		EQU	86h
040000             0042   vdp_rtc:		EQU	87h
040000             0043   vdp_keystate:		EQU	88h
040000             0044   vdp_logicalcoords:	EQU	C0h
040000             0045   vdp_terminalmode:	EQU	FFh
040000             0046   
040000             0047   ; MOS high level functions
040000             0048   ;
040000             0049   mos_getkey:		EQU	00h
040000             0050   mos_load:		EQU	01h
040000             0051   mos_save:		EQU	02h
040000             0052   mos_cd:			EQU	03h
040000             0053   mos_dir:		EQU	04h
040000             0054   mos_del:		EQU	05h
040000             0055   mos_ren:		EQU	06h
040000             0056   mos_mkdir:		EQU	07h
040000             0057   mos_sysvars:		EQU	08h
040000             0058   mos_editline:		EQU	09h
040000             0059   mos_fopen:		EQU	0Ah
040000             0060   mos_fclose:		EQU	0Bh
040000             0061   mos_fgetc:		EQU	0Ch
040000             0062   mos_fputc:		EQU	0Dh
040000             0063   mos_feof:		EQU	0Eh
040000             0064   mos_getError:		EQU	0Fh
040000             0065   mos_oscli:		EQU	10h
040000             0066   mos_copy:		EQU	11h
040000             0067   mos_getrtc:		EQU	12h
040000             0068   mos_setrtc:		EQU	13h
040000             0069   mos_setintvector:	EQU	14h
040000             0070   mos_uopen:		EQU	15h
040000             0071   mos_uclose:		EQU	16h
040000             0072   mos_ugetc:		EQU	17h
040000             0073   mos_uputc:		EQU 	18h
040000             0074   mos_getfil:		EQU	19h
040000             0075   mos_fread:		EQU	1Ah
040000             0076   mos_fwrite:		EQU	1Bh
040000             0077   mos_flseek:		EQU	1Ch
040000             0078   mos_setkbvector:	EQU	1Dh
040000             0079   mos_getkbmap:		EQU	1Eh
040000             0080   mos_i2c_open:		EQU	1Fh
040000             0081   mos_i2c_close:		EQU	20h
040000             0082   mos_i2c_write:		EQU	21h
040000             0083   mos_i2c_read:		EQU	22h
040000             0084   
040000             0085   
040000             0086   ; FatFS file access functions
040000             0087   ;
040000             0088   ffs_fopen:		EQU	80h
040000             0089   ffs_fclose:		EQU	81h
040000             0090   ffs_fread:		EQU	82h
040000             0091   ffs_fwrite:		EQU	83h
040000             0092   ffs_flseek:		EQU	84h
040000             0093   ffs_ftruncate:		EQU	85h
040000             0094   ffs_fsync:		EQU	86h
040000             0095   ffs_fforward:		EQU	87h
040000             0096   ffs_fexpand:		EQU	88h
040000             0097   ffs_fgets:		EQU	89h
040000             0098   ffs_fputc:		EQU	8Ah
040000             0099   ffs_fputs:		EQU	8Bh
040000             0100   ffs_fprintf:		EQU	8Ch
040000             0101   ffs_ftell:		EQU	8Dh
040000             0102   ffs_feof:		EQU	8Eh
040000             0103   ffs_fsize:		EQU	8Fh
040000             0104   ffs_ferror:		EQU	90h
040000             0105   
040000             0106   ; FatFS directory access functions
040000             0107   ;
040000             0108   ffs_dopen:		EQU	91h
040000             0109   ffs_dclose:		EQU	92h
040000             0110   ffs_dread:		EQU	93h
040000             0111   ffs_dfindfirst:		EQU	94h
040000             0112   ffs_dfindnext:		EQU	95h
040000             0113   
040000             0114   ; FatFS file and directory management functions
040000             0115   ;
040000             0116   ffs_stat:		EQU	96h
040000             0117   ffs_unlink:		EQU	97h
040000             0118   ffs_rename:		EQU	98h
040000             0119   ffs_chmod:		EQU	99h
040000             0120   ffs_utime:		EQU	9Ah
040000             0121   ffs_mkdir:		EQU	9Bh
040000             0122   ffs_chdir:		EQU	9Ch
040000             0123   ffs_chdrive:		EQU	9Dh
040000             0124   ffs_getcwd:		EQU	9Eh
040000             0125   
040000             0126   ; FatFS volume management and system configuration functions
040000             0127   ;
040000             0128   ffs_mount:		EQU	9Fh
040000             0129   ffs_mkfs:		EQU	A0h
040000             0130   ffs_fdisk:		EQU	A1h
040000             0131   ffs_getfree:		EQU	A2h
040000             0132   ffs_getlabel:		EQU	A3h
040000             0133   ffs_setlabel:		EQU	A4h
040000             0134   ffs_setcp:		EQU	A5h
040000             0135   
040000             0136   ; File access modes
040000             0137   ;
040000             0138   fa_read:		EQU	01h
040000             0139   fa_write:		EQU	02h
040000             0140   fa_open_existing:	EQU	00h
040000             0141   fa_create_new:		EQU	04h
040000             0142   fa_create_always:	EQU	08h
040000             0143   fa_open_always:		EQU	10h
040000             0144   fa_open_append:		EQU	30h
040000             0145   
040000             0146   ; System variable indexes for api_sysvars
040000             0147   ; Index into _sysvars in globals.asm
040000             0148   ;
040000             0149   sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0150   sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0151   sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0152   sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0153   sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0154   sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0155   sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0156   sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0157   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0158   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0159   sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0160   sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0161   sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0162   sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0163   sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0164   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0165   sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0166   sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0167   sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0168   sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0169   sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0170   sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0171   sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0172   sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0173   sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0174   sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0175   sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0176   sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0177   sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0178   sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0179   sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0180   sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0181   ;
040000             0182   ; Flags for the VPD protocol
040000             0183   ;
040000             0184   vdp_pflag_cursor:	EQU	00000001b
040000             0185   vdp_pflag_scrchar:	EQU	00000010b
040000             0186   vdp_pflag_point:	EQU	00000100b
040000             0187   vdp_pflag_audio:	EQU	00001000b
040000             0188   vdp_pflag_mode:		EQU	00010000b
040000             0189   vdp_pflag_rtc:		EQU	00100000b
040000             0190   vdp_pflag_mouse:	EQU	01000000b
040000             0191   ; vdp_pflag_buffered:	EQU	10000000b
040000             0192   
040000             0193   
040000             0194   ; FatFS structures
040000             0195   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0196   ;
040000             0197   ; Object ID and allocation information (FFOBJID)
040000             0198   FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0199   FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0200   FFOBJID.attr:     EQU 5    ; Object attribute
040000             0201   FFOBJID.stat:     EQU 6    ; Object chain status
040000             0202   FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0203   FFOBJID.objsize:  EQU 11   ; Object size
040000             0204   FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0205   ;
040000             0206   ; File object structure (FIL)
040000             0207   ;
040000             0208   FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0209   FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0210   FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0211   FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0212   FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0213   FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0214   FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0215   FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0216   FIL.obj.objsize:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0217   ;
040000             0218   ; Directory object structure (DIR)
040000             0219   ;
040000             0220   DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0221   DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0222   DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0223   DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0224   DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0225   DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226   DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0227   DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0228   ;
040000             0229   ; File information structure (FILINFO)
040000             0230   ;
040000             0231   FILINFO.fsize:    EQU 0    ; File size
040000             0232   FILINFO.fdate:    EQU 4    ; Modified date
040000             0233   FILINFO.ftime:    EQU 6    ; Modified time
040000             0234   FILINFO.fattrib:  EQU 8    ; File attribute
040000             0235   FILINFO.altname:  EQU 9    ; Alternative file name
040000             0236   FILINFO.fname:    EQU 22   ; Primary file name
040000             0237   FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0238   ;
040000             0239   ; Macro for calling the API
040000             0240   ; Parameters:
040000             0241   ; - function: One of the function numbers listed above
040000             0242   ;
040000             0243   			MACRO MOSCALL	function
040000             0244   			LD	A, function
040000             0245   			RST.LIS	08h
040000             0246   			ENDMACRO 	; --- End mos_api.inc ---
040000             0247   
040000             0248   ; --- Begin equs.inc ---
040000             0249   ; ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0250   ; STAVAR: EQU 0
040000             0251   ; ACCS: EQU 0
040000             0252   ; ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0253   
040000             0254   ;
040000             0255   ; Title:	BBC Basic for AGON - Equs
040000             0256   ; Author:	Dean Belfield
040000             0257   ; Created:	04/12/2024
040000             0258   ; Last Updated:	05/12/2024
040000             0259   ;
040000             0260   ; Modinfo:
040000             0261   ; 05/12/2024:	Removed Stack_Top
040000             0262   
040000             0263   ;			XREF		STAVAR
040000             0264   ;			XREF		ACCS
040000             0265   
040000             0266   RAM_Top:		EQU		0FF00h
040000             0267   
040000             0268   ; For GPIO
040000             0269   ; PA not available on eZ80L92
040000             0270   ;
040000             0271   PA_DR:			EQU		96h
040000             0272   PA_DDR:			EQU		97h
040000             0273   PA_ALT1:		EQU		98h
040000             0274   PA_ALT2:		EQU		99h
040000             0275   PB_DR:          	EQU		9Ah
040000             0276   PB_DDR:        	 	EQU		9Bh
040000             0277   PB_ALT1:        	EQU		9Ch
040000             0278   PB_ALT2:        	EQU		9Dh
040000             0279   PC_DR:          	EQU		9Eh
040000             0280   PC_DDR:         	EQU		9Fh
040000             0281   PC_ALT1:        	EQU		A0h
040000             0282   PC_ALT2:        	EQU		A1h
040000             0283   PD_DR:          	EQU		A2h
040000             0284   PD_DDR:			EQU		A3h
040000             0285   PD_ALT1:		EQU		A4h
040000             0286   PD_ALT2:		EQU		A5h
040000             0287   
040000             0288   GPIOMODE_OUT:		EQU		0	; Output
040000             0289   GPIOMODE_IN:		EQU		1	; Input
040000             0290   GPIOMODE_DIO:		EQU		2	; Open Drain IO
040000             0291   GPIOMODE_SIO:		EQU		3	; Open Source IO
040000             0292   GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040000             0293   GPIOMODE_ALTF:		EQU		5;	; Alt Function
040000             0294   GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040000             0295   GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040000             0296   GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040000             0297   GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040000             0298   
040000             0299   ; Originally in ram.asm
040000             0300   ;
040000             0301   ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%) ; back to data.asm
040000             0302   ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%) ; back to data.asm
040000             0303   ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; moved to data.asm
040000             0304   
040000             0305   ; Originally in main.asm
040000             0306   ;
040000             0307   CR:			EQU     0DH
040000             0308   LF:			EQU     0AH
040000             0309   ESC:			EQU     1BH
040000             0310   ; --- End equs.inc ---
040000             0311   
040000             0312   ; --- Begin macros.inc ---
040000             0313   ;
040000             0314   ; Title:	BBC Basic Interpreter - Z80 version
040000             0315   ;		Useful macros
040000             0316   ; Author:	Dean Belfield
040000             0317   ; Created:	04/12/2024
040000             0318   ; Last Updated:	04/12/2024
040000             0319   ;
040000             0320   ; Modinfo:
040000             0321   
040000             0322           MACRO EXREG rp1, rp2
040000             0323           PUSH    rp1
040000             0324           POP     rp2
040000             0325           ENDMACRO
040000             0326   
040000             0327           MACRO ADD8U_DE ; reg
040000             0328           ADD     A, E
040000             0329           LD      E, A
040000             0330           ADC     A, D
040000             0331           SUB     E
040000             0332           LD      D, A
040000             0333           ENDMACRO
040000             0334   
040000             0335           MACRO ADD8U_HL ; reg
040000             0336           ADD     A, L
040000             0337           LD      L, A
040000             0338           ADC     A, H
040000             0339           SUB     L
040000             0340           LD      H, A
040000             0341           ENDMACRO
040000             0342   
040000             0343           MACRO VDU VAL
040000             0344           LD      A, VAL
040000             0345           CALL    OSWRCH
040000             0346           ENDMACRO
040000             0347   
040000             0348           MACRO SET_GPIO REG, VAL
040000             0349           IN0     A, (REG)
040000             0350           OR      VAL
040000             0351           OUT0    (REG), A
040000             0352           ENDMACRO
040000             0353   
040000             0354           MACRO RES_GPIO REG, VAL
040000             0355           PUSH    BC
040000             0356           LD      A, VAL
040000             0357           CPL
040000             0358           LD      C, A
040000             0359           IN0     A, (REG)
040000             0360           AND     C
040000             0361           OUT0    (REG), A
040000             0362           POP     BC
040000             0363           ENDMACRO
040000             0364   ; --- End macros.inc ---
040000             0365   
040000             0366   ; --- Begin agon_init.asm ---
040000             0367   ;
040000             0368   ; Title:	BBC Basic for AGON - Initialisation Code
040000             0369   ;		Initialisation Code
040000             0370   ; Author:	Dean Belfield
040000             0371   ; Created:	04/12/2024
040000             0372   ; Last Updated:	14/12/2024
040000             0373   ;
040000             0374   ; Modinfo:
040000             0375   ; 14/12/2024:	Fix for *BYE command
040000             0376   
040000             0377   ;			SEGMENT __VECTORS
040000             0378   
040000             0379   ;			XREF	START
040000             0380   ;			XREF	ACCS
040000             0381   ;			XREF	TELL
040000             0382   
040000             0383   			.ASSUME	ADL = 0
040000             0384   			.ORG 0x0000
000000             0385   
000000             0386   			; INCLUDE	"equs.inc"
000000             0387   
000000             0388   argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
000000             0389   
000000             0390   ;
000000             0391   ; Start in mixed mode. Assumes MBASE is set to correct segment
000000             0392   ;
000000 C3 52 00    0393   			JP	_start				; Jump to start
000003             0394   			DS	5
000008             0395   
       FF FF FF FF 
       FF 
000008 49 CF       0396   RST_08:			RST.LIS	08h				; API call
00000A C9          0397   			RET
00000B             0398   			DS 	5
000010             0399   
       FF FF FF FF 
       FF 
000010 49 D7       0400   RST_10:			RST.LIS 10h				; Output
000012 C9          0401   			RET
000013             0402   			DS	5
000018             0403   
       FF FF FF FF 
       FF 
000018 49 DF       0404   RST_18:			RST.LIS	18h				; Block Output
00001A C9          0405   			RET
00001B             0406   			DS	5
000020             0407   
000020             0408   RST_20:			DS	8
000028             0409   RST_28:			DS	8
000030             0410   RST_30:			DS	8
000038             0411   
000038             0412   ;
000038             0413   ; The NMI interrupt vector (not currently used by AGON)
000038             0414   ;
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 
000038 FB          0415   RST_38:			EI
000039 ED 4D       0416   			RETI
00003B             0417   ;
00003B             0418   ; The header stuff is from byte 64 onwards
00003B             0419   ;
00003B FF FF FF FF 0420   			ALIGN	64
       FF          
000040             0421   
000040 4D 4F 53    0422   			DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
000043 00          0423   			DB	00h				; MOS header version 0
000044 00          0424   			DB	00h				; Flag for run mode (0: Z80, 1: ADL)
000045             0425   
000045 42 42 43 42 0426   _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
       41 53 49 43 
       2E 42 49 4E 
       00          
000052             0427   
000052             0428   ;
000052             0429   ; And the code follows on immediately after the header
000052             0430   ;
000052 5B FD E5    0431   _start:			PUSH.LIL	IY			; Preserve IY
000055             0432   
000055 FD 21 00 00 0433   			LD		IY, 0			; Preserve SPS
000059 FD 39       0434   			ADD		IY, SP
00005B 5B FD E5    0435   			PUSH.LIL	IY
00005E             0436   
00005E E3          0437   			EX		(SP), HL		; Get the SPS part of the return address
00005F 5B E5       0438   			PUSH.LIL	HL
000061 E3          0439   			EX		(SP), HL		; And restore it for BASIC
000062             0440   
000062 5B F5       0441   			PUSH.LIL	AF			; Preserve the rest of the registers
000064 5B C5       0442   			PUSH.LIL	BC
000066 5B D5       0443   			PUSH.LIL	DE
000068 5B DD E5    0444   			PUSH.LIL	IX
00006B             0445   
00006B ED 6E       0446   			LD		A, MB			; Segment base
00006D DD 21 65 01 0447   			LD		IX, argv_ptrs		; The argv array pointer address
000071 CD 51 01    0448   			CALL		_set_aix24		; Convert to a 24-bit address
000074 5B DD E5    0449   			PUSH.LIL	IX
000077 CD E1 00    0450   			CALL		_parse_params		; Parse the parameters
00007A 5B DD E1    0451   			POP.LIL		IX			; IX: argv
00007D 06 00       0452   			LD		B, 0			;  C: argc
00007F CD 9A 00    0453   			CALL		_main			; Start user code
000082             0454   
000082 5B DD E1    0455   			POP.LIL		IX			; Restore the registers
000085 5B D1       0456   			POP.LIL		DE
000087 5B C1       0457   			POP.LIL		BC
000089 5B F1       0458   			POP.LIL		AF
00008B             0459   
00008B EB          0460   			EX		DE, HL 			; DE: Return code from BASIC
00008C 5B E1       0461   			POP.LIL		HL 			; The SPS part of the return address
00008E 5B FD E1    0462   			POP.LIL		IY			; Get the preserved SPS
000091 FD F9       0463   			LD		SP, IY			; Restore SPS
000093 E3          0464   			EX		(SP), HL		; Store the SPS part of the return address on the stack
000094 EB          0465   			EX		DE, HL 			; HL: Return code from BASIC
000095             0466   
000095 5B FD E1    0467   			POP.LIL		IY			; Restore IY
000098 49 C9       0468   			RET.L					; Return to MOS
00009A             0469   
00009A             0470   ; The main routine
00009A             0471   ; IXU: argv - pointer to array of parameters
00009A             0472   ;   C: argc - number of parameters
00009A             0473   ; Returns:
00009A             0474   ;  HL: Error code, or 0 if OK
00009A             0475   ;
00009A 21 00 52    0476   _main:			LD	HL, ACCS		; Clear the ACCS
00009D 36 00       0477   			LD	(HL), 0
00009F 79          0478   			LD	A, C
0000A0 FE 02       0479   			CP	2
0000A2 28 24       0480   			JR	Z, _autoload		; 2 parameters = autoload
0000A4 38 35       0481   			JR	C, _startbasic		; 1 parameter = normal start
0000A6             0482   ;			CALL	STAR_VERSION		; Output the AGON version
0000A6 CD FA 44    0483   			CALL	TELL
0000A9 55 73 61 67 0484   			DB	"Usage:\n\r"
       65 3A 0A 0D 
0000B1 52 55 4E 20 0485   			DB	"RUN . <filename>\n\r", 0
       2E 20 3C 66 
       69 6C 65 6E 
       61 6D 65 3E 
       0A 0D 00    
0000C4 21 00 00    0486   			LD	HL, 0			; The error code
0000C7 C9          0487   			RET
0000C8             0488   ;
0000C8 5B DD 27 03 0489   _autoload:		LD.LIL	HL, (IX+3)		; HLU: Address of filename
0000CC 11 00 52    0490   			LD	DE, ACCS		;  DE: Destination address
0000CF 5B 7E       0491   @@:			LD.LIL	A, (HL)			; Fetch the filename byte
0000D1 12          0492   			LD	(DE), A			;
0000D2 5B 23       0493   			INC.LIL	HL			; Increase the source pointer
0000D4 1C          0494   			INC	E			; We only need to increase E as ACCS is on a page boundary
0000D5 20 F8       0495   			JR	NZ, @B			; Loop until we hit a 0 byte
0000D7 1D          0496   			DEC	E
0000D8 3E 0D       0497   			LD	A, CR
0000DA 12          0498   			LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
0000DB             0499   ;
0000DB E1          0500   _startbasic:		POP	 HL			; Pop the return address to init off SPS
0000DC 5B E5       0501   			PUSH.LIL HL 			; Stack it on SPL (*BYE will use this as the return address)
0000DE C3 17 37    0502   			JP	 START			; And start BASIC
0000E1             0503   
0000E1             0504   ; Parse the parameter string into a C array
0000E1             0505   ; Parameters
0000E1             0506   ; -   A: Segment base
0000E1             0507   ; - HLU: Address of parameter string
0000E1             0508   ; - IXU: Address for array pointer storage
0000E1             0509   ; Returns:
0000E1             0510   ; -   C: Number of parameters parsed
0000E1             0511   ;
0000E1 01 45 00    0512   _parse_params:		LD		BC, _exec_name		; Get the address of the app name in this segment
0000E4 CD 3F 01    0513   			CALL		_set_abc24		; Convert it to a 24-bit address based upon segment base
0000E7 5B DD 0F 00 0514   			LD.LIL		(IX+0), BC		; ARGV[0] = the executable name
0000EB 5B DD 23    0515   			INC.LIL		IX
0000EE 5B DD 23    0516   			INC.LIL		IX
0000F1 5B DD 23    0517   			INC.LIL		IX
0000F4 CD 36 01    0518   			CALL		_skip_spaces		; Skip HL past any leading spaces
0000F7             0519   ;
0000F7 01 01 00    0520   			LD		BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0000FA 06 0F       0521   			LD		B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0000FC             0522   ;
0000FC C5          0523   _parse_params_1:	PUSH		BC			; Stack ARGC
0000FD 5B E5       0524   			PUSH.LIL	HL			; Stack start address of token
0000FF CD 25 01    0525   			CALL		_get_token		; Get the next token
000102 79          0526   			LD		A, C			; A: Length of the token in characters
000103 5B D1       0527   			POP.LIL		DE			; Start address of token (was in HL)
000105 C1          0528   			POP		BC			; ARGC
000106 B7          0529   			OR		A			; Check for A=0 (no token found) OR at end of string
000107 C8          0530   			RET		Z
000108             0531   ;
000108 5B DD 1F 00 0532   			LD.LIL		(IX+0), DE		; Store the pointer to the token
00010C 5B E5       0533   			PUSH.LIL	HL			; DE=HL
00010E 5B D1       0534   			POP.LIL		DE
000110 CD 36 01    0535   			CALL		_skip_spaces		; And skip HL past any spaces onto the next character
000113 AF          0536   			XOR		A
000114 5B 12       0537   			LD.LIL		(DE), A			; Zero-terminate the token
000116 5B DD 23    0538   			INC.LIL		IX
000119 5B DD 23    0539   			INC.LIL		IX
00011C 5B DD 23    0540   			INC.LIL		IX			; Advance to next pointer position
00011F 0C          0541   			INC		C			; Increment ARGC
000120 79          0542   			LD		A, C			; Check for C >= A
000121 B8          0543   			CP		B
000122 38 D8       0544   			JR		C, _parse_params_1	; And loop
000124 C9          0545   			RET
000125             0546   
000125             0547   ; Get the next token
000125             0548   ; Parameters:
000125             0549   ; - HL: Address of parameter string
000125             0550   ; Returns:
000125             0551   ; - HL: Address of first character after token
000125             0552   ; -  C: Length of token (in characters)
000125             0553   ;
000125 0E 00       0554   _get_token:		LD		C, 0			; Initialise length
000127 5B 7E       0555   @@:			LD.LIL		A, (HL)			; Get the character from the parameter string
000129 B7          0556   			OR		A			; Exit if 0 (end of parameter string in MOS)
00012A C8          0557   			RET 		Z
00012B FE 0D       0558   			CP		13			; Exit if CR (end of parameter string in BBC BASIC)
00012D C8          0559   			RET		Z
00012E FE 20       0560   			CP		' '			; Exit if space (end of token)
000130 C8          0561   			RET		Z
000131 5B 23       0562   			INC.LIL		HL			; Advance to next character
000133 0C          0563   			INC 		C			; Increment length
000134 18 F1       0564   			JR		@B
000136             0565   
000136             0566   ; Skip spaces in the parameter string
000136             0567   ; Parameters:
000136             0568   ; - HL: Address of parameter string
000136             0569   ; Returns:
000136             0570   ; - HL: Address of next none-space character
000136             0571   ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
000136             0572   ;
000136 5B 7E       0573   _skip_spaces:		LD.LIL		A, (HL)			; Get the character from the parameter string
000138 FE 20       0574   			CP		' '			; Exit if not space
00013A C0          0575   			RET		NZ
00013B 5B 23       0576   			INC.LIL		HL			; Advance to next character
00013D 18 F7       0577   			JR		_skip_spaces		; Increment length
00013F             0578   
00013F             0579   ; Set the MSB of BC (U) to A
00013F             0580   ; Parameters:
00013F             0581   ; - BC: 16-bit address
00013F             0582   ; -  A: Value to stick in U of BC
00013F             0583   ; Returns:
00013F             0584   ; - BCU
00013F             0585   ;
00013F 5B E5       0586   _set_abc24:		PUSH.LIL	HL			; Preserve HL
000141 5B C5       0587   			PUSH.LIL	BC			; Stick BC onto SPL
000143 5B 21 02 00 0588   			LD.LIL		HL, 2			; HL: SP+2
       00          
000148 5B 39       0589   			ADD.LIL		HL, SP
00014A 5B 77       0590   			LD.LIL		(HL), A			; Store A in it
00014C 5B C1       0591   			POP.LIL		BC			; Fetch ammended BC
00014E 5B E1       0592   			POP.LIL		HL			; Restore HL
000150 C9          0593   			RET
000151             0594   
000151             0595   ; Set the MSB of BC (U) to A
000151             0596   ; Parameters:
000151             0597   ; - IX: 16-bit address
000151             0598   ; -  A: Value to stick in U of BC
000151             0599   ; Returns:
000151             0600   ; - IXU
000151             0601   ;
000151 5B DD E5    0602   _set_aix24:		PUSH.LIL	IX			; Stick IX onto SPL
000154 5B DD 21 02 0603   			LD.LIL		IX, 2			; IX: SP+2
       00 00       
00015A 5B DD 39    0604   			ADD.LIL		IX, SP
00015D 5B DD 77 00 0605   			LD.LIL		(IX), A			; Store A in it
000161 5B DD E1    0606   			POP.LIL		IX			; Fetch ammended IX
000164 C9          0607   			RET
000165             0608   
000165             0609   ; Storage for the argv array pointers
000165             0610   ;
000165 00 00 00 00 0611   argv_ptrs:		BLKP	argv_ptrs_max, 0		; Storage for the argv array pointers
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
000195             0612   ; --- End agon_init.asm ---
000195             0613   
000195             0614   ; --- Begin agon_graphics.asm ---
000195             0615   ;
000195             0616   ; Title:	BBC Basic for AGON - Graphics stuff
000195             0617   ; Author:	Dean Belfield
000195             0618   ; Created:	04/12/2024
000195             0619   ; Last Updated:	11/12/2024
000195             0620   ;
000195             0621   ; Modinfo:
000195             0622   ; 11/12/2024:	Modified POINT_ to work with OSWORD
000195             0623   
000195             0624   			.ASSUME	ADL = 0
000195             0625   ;	.ORG 0x0000
000195             0626   
000195             0627   			; INCLUDE	"equs.inc"
000195             0628   			; INCLUDE "macros.inc"
000195             0629   			; INCLUDE "mos_api.inc"	; In MOS/src
000195             0630   
000195             0631   ;			SEGMENT CODE
000195             0632   
000195             0633   ;			XDEF	MODE_
000195             0634   ;			XDEF	COLOUR_
000195             0635   ;			XDEF	POINT_
000195             0636   ;			XDEF	GETSCHR
000195             0637   ;			XDEF	GETSCHR_1
000195             0638   
000195             0639   ;			XREF	ACCS
000195             0640   ;			XREF	OSWRCH
000195             0641   ;			XREF	ASC_TO_NUMBER
000195             0642   ;			XREF	EXTERR
000195             0643   ;			XREF	EXPRI
000195             0644   ;			XREF	COMMA
000195             0645   ;			XREF	XEQ
000195             0646   ;			XREF	NXT
000195             0647   ;			XREF	BRAKET
000195             0648   ;			XREF	CRTONULL
000195             0649   ;			XREF	NULLTOCR
000195             0650   ;			XREF	CRLF
000195             0651   ;			XREF	EXPR_W2
000195             0652   ;			XREF	INKEY1
000195             0653   
000195             0654   ; MODE n: Set video mode
000195             0655   ;
000195 DD E5       0656   MODE_:			PUSH	IX			; Get the system vars in IX
000197             0657   			MOSCALL	mos_sysvars		; Reset the semaphore
000197 3E 08       0001M1 			LD	A, function
000199 49 CF       0002M1 			RST.LIS	08h
00019B 5B DD CB 04 0658   			RES.LIL	4, (IX+sysvar_vpd_pflags)
       A6          
0001A0 CD 33 18    0659   			CALL    EXPRI
0001A3 D9          0660   			EXX
0001A4             0661   			VDU	16H			; Mode change
0001A4 3E 16       0001M1         LD      A, VAL
0001A6 CD B1 05    0002M1         CALL    OSWRCH
0001A9             0662   			VDU	L
0001A9 7D          0001M1         LD      A, VAL
0001AA CD B1 05    0002M1         CALL    OSWRCH
0001AD             0663   			MOSCALL	mos_sysvars
0001AD 3E 08       0001M1 			LD	A, function
0001AF 49 CF       0002M1 			RST.LIS	08h
0001B1 5B DD CB 04 0664   @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
       66          
0001B6 28 F9       0665   			JR	Z, @B			; Wait for the result
0001B8 DD E1       0666   			POP	IX
0001BA C3 99 24    0667   			JP	XEQ
0001BD             0668   
0001BD             0669   ; GET(x,y): Get the ASCII code of a character on screen
0001BD             0670   ;
0001BD FD 23       0671   GETSCHR:		INC	IY
0001BF CD 33 18    0672   			CALL    EXPRI      		; Get X coordinate
0001C2 D9          0673   			EXX
0001C3 E5          0674   			PUSH	HL			; Stack X
0001C4 CD A2 20    0675   			CALL	COMMA
0001C7 CD 33 18    0676   			CALL	EXPRI			; Get Y coordinate
0001CA D9          0677   			EXX
0001CB CD AE 20    0678   			CALL	BRAKET			; Closing bracket
0001CE D1          0679   			POP	DE			; Pop X back into DE
0001CF CD DB 01    0680   			CALL	GETSCHR_1
0001D2             0681   ;			JP	INKEY1
0001D2 11 00 52    0682   	        	LD	DE,ACCS
0001D5 12          0683   	                LD	(DE),A
0001D6 3E 80       0684   	                LD	A,80H
0001D8 D0          0685           	        RET	NC
0001D9 1C          0686   	                INC	E
0001DA C9          0687                   	RET
0001DB             0688   ;
0001DB             0689   ; Fetch a character from the screen
0001DB             0690   ; - DE: X coordinate
0001DB             0691   ; - HL: Y coordinate
0001DB             0692   ; Returns
0001DB             0693   ; - A: The character or FFh if no match
0001DB             0694   ; - F: C if match, otherwise NC
0001DB             0695   ;
0001DB DD E5       0696   GETSCHR_1:		PUSH	IX			; Get the system vars in IX
0001DD             0697   			MOSCALL	mos_sysvars		; Reset the semaphore
0001DD 3E 08       0001M1 			LD	A, function
0001DF 49 CF       0002M1 			RST.LIS	08h
0001E1 5B DD CB 04 0698   			RES.LIL	1, (IX+sysvar_vpd_pflags)
       8E          
0001E6             0699   			VDU	23
0001E6 3E 17       0001M1         LD      A, VAL
0001E8 CD B1 05    0002M1         CALL    OSWRCH
0001EB             0700   			VDU	0
0001EB 3E 00       0001M1         LD      A, VAL
0001ED CD B1 05    0002M1         CALL    OSWRCH
0001F0             0701   			VDU	vdp_scrchar
0001F0 3E 83       0001M1         LD      A, VAL
0001F2 CD B1 05    0002M1         CALL    OSWRCH
0001F5             0702   			VDU	E
0001F5 7B          0001M1         LD      A, VAL
0001F6 CD B1 05    0002M1         CALL    OSWRCH
0001F9             0703   			VDU	D
0001F9 7A          0001M1         LD      A, VAL
0001FA CD B1 05    0002M1         CALL    OSWRCH
0001FD             0704   			VDU	L
0001FD 7D          0001M1         LD      A, VAL
0001FE CD B1 05    0002M1         CALL    OSWRCH
000201             0705   			VDU	H
000201 7C          0001M1         LD      A, VAL
000202 CD B1 05    0002M1         CALL    OSWRCH
000205 5B DD CB 04 0706   @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
       4E          
00020A 28 F9       0707   			JR	Z, @B			; Wait for the result
00020C 5B DD 7E 09 0708   			LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
000210 B7          0709   			OR	A			; Check for 00h
000211 37          0710   			SCF				; C = character map
000212 20 01       0711   			JR	NZ, @F			; We have a character, so skip next bit
000214 AF          0712   			XOR	A			; Clear carry
000215 DD E1       0713   @@:			POP	IX
000217 C9          0714   			RET
000218             0715   
000218             0716   ; POINT(x,y): Get the pixel colour of a point on screen
000218             0717   ; Parameters:
000218             0718   ; - DE: X-coordinate
000218             0719   ; - HL: Y-coordinate
000218             0720   ; Returns:
000218             0721   ; -  A: Pixel colour
000218             0722   ;
000218 DD E5       0723   POINT_:			PUSH	IX			; Get the system vars in IX
00021A             0724   			MOSCALL	mos_sysvars		; Reset the semaphore
00021A 3E 08       0001M1 			LD	A, function
00021C 49 CF       0002M1 			RST.LIS	08h
00021E 5B DD CB 04 0725   			RES.LIL	2, (IX+sysvar_vpd_pflags)
       96          
000223             0726   			VDU	23
000223 3E 17       0001M1         LD      A, VAL
000225 CD B1 05    0002M1         CALL    OSWRCH
000228             0727   			VDU	0
000228 3E 00       0001M1         LD      A, VAL
00022A CD B1 05    0002M1         CALL    OSWRCH
00022D             0728   			VDU	vdp_scrpixel
00022D 3E 84       0001M1         LD      A, VAL
00022F CD B1 05    0002M1         CALL    OSWRCH
000232             0729   			VDU	E
000232 7B          0001M1         LD      A, VAL
000233 CD B1 05    0002M1         CALL    OSWRCH
000236             0730   			VDU	D
000236 7A          0001M1         LD      A, VAL
000237 CD B1 05    0002M1         CALL    OSWRCH
00023A             0731   			VDU	L
00023A 7D          0001M1         LD      A, VAL
00023B CD B1 05    0002M1         CALL    OSWRCH
00023E             0732   			VDU	H
00023E 7C          0001M1         LD      A, VAL
00023F CD B1 05    0002M1         CALL    OSWRCH
000242 5B DD CB 04 0733   @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
       56          
000247 28 F9       0734   			JR	Z, @B			; Wait for the result
000249             0735   ;
000249             0736   ; Return the data as a 1 byte index
000249             0737   ;
000249 5B DD 7E 16 0738   			LD.LIL	A, (IX+sysvar_scrpixelIndex)
00024D DD E1       0739   			POP	IX
00024F C9          0740   			RET
000250             0741   
000250             0742   ; COLOUR colour
000250             0743   ; COLOUR L,P
000250             0744   ; COLOUR L,R,G,B
000250             0745   ;
000250 CD 33 18    0746   COLOUR_:		CALL	EXPRI			; The colour / mode
000253 D9          0747   			EXX
000254 7D          0748   			LD	A, L
000255 32 00 52    0749   			LD	(VDU_BUFFER+0), A	; Store first parameter
000258 CD 0B 45    0750   			CALL	NXT			; Are there any more parameters?
00025B FE 2C       0751   			CP	','
00025D 28 0E       0752   			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
00025F             0753   ;
00025F             0754   			VDU	11h			; Just set the colour
00025F 3E 11       0001M1         LD      A, VAL
000261 CD B1 05    0002M1         CALL    OSWRCH
000264             0755   			VDU	(VDU_BUFFER+0)
000264 3A 00 52    0001M1         LD      A, VAL
000267 CD B1 05    0002M1         CALL    OSWRCH
00026A C3 99 24    0756   			JP	XEQ
00026D             0757   ;
00026D CD A2 20    0758   COLOUR_1:		CALL	COMMA
000270 CD 33 18    0759   			CALL	EXPRI			; Parse R (OR P)
000273 D9          0760   			EXX
000274 7D          0761   			LD	A, L
000275 32 01 52    0762   			LD	(VDU_BUFFER+1), A
000278 CD 0B 45    0763   			CALL	NXT			; Are there any more parameters?
00027B FE 2C       0764   			CP	','
00027D 28 23       0765   			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
00027F             0766   ;
00027F             0767   			VDU	13h			; VDU:COLOUR
00027F 3E 13       0001M1         LD      A, VAL
000281 CD B1 05    0002M1         CALL    OSWRCH
000284             0768   			VDU	(VDU_BUFFER+0)		; Logical Colour
000284 3A 00 52    0001M1         LD      A, VAL
000287 CD B1 05    0002M1         CALL    OSWRCH
00028A             0769   			VDU	(VDU_BUFFER+1)		; Palette Colour
00028A 3A 01 52    0001M1         LD      A, VAL
00028D CD B1 05    0002M1         CALL    OSWRCH
000290             0770   			VDU	0			; RGB set to 0
000290 3E 00       0001M1         LD      A, VAL
000292 CD B1 05    0002M1         CALL    OSWRCH
000295             0771   			VDU	0
000295 3E 00       0001M1         LD      A, VAL
000297 CD B1 05    0002M1         CALL    OSWRCH
00029A             0772   			VDU	0
00029A 3E 00       0001M1         LD      A, VAL
00029C CD B1 05    0002M1         CALL    OSWRCH
00029F C3 99 24    0773   			JP	XEQ
0002A2             0774   ;
0002A2 CD A2 20    0775   COLOUR_2:		CALL	COMMA
0002A5 CD 33 18    0776   			CALL	EXPRI			; Parse G
0002A8 D9          0777   			EXX
0002A9 7D          0778   			LD	A, L
0002AA 32 02 52    0779   			LD	(VDU_BUFFER+2), A
0002AD CD A2 20    0780   			CALL	COMMA
0002B0 CD 33 18    0781   			CALL	EXPRI			; Parse B
0002B3 D9          0782   			EXX
0002B4 7D          0783   			LD	A, L
0002B5 32 03 52    0784   			LD	(VDU_BUFFER+3), A
0002B8             0785   			VDU	13h			; VDU:COLOUR
0002B8 3E 13       0001M1         LD      A, VAL
0002BA CD B1 05    0002M1         CALL    OSWRCH
0002BD             0786   			VDU	(VDU_BUFFER+0)		; Logical Colour
0002BD 3A 00 52    0001M1         LD      A, VAL
0002C0 CD B1 05    0002M1         CALL    OSWRCH
0002C3             0787   			VDU	FFh			; Physical Colour (-1 for RGB mode)
0002C3 3E FF       0001M1         LD      A, VAL
0002C5 CD B1 05    0002M1         CALL    OSWRCH
0002C8             0788   			VDU	(VDU_BUFFER+1)		; R
0002C8 3A 01 52    0001M1         LD      A, VAL
0002CB CD B1 05    0002M1         CALL    OSWRCH
0002CE             0789   			VDU	(VDU_BUFFER+2)		; G
0002CE 3A 02 52    0001M1         LD      A, VAL
0002D1 CD B1 05    0002M1         CALL    OSWRCH
0002D4             0790   			VDU	(VDU_BUFFER+3)		; B
0002D4 3A 03 52    0001M1         LD      A, VAL
0002D7 CD B1 05    0002M1         CALL    OSWRCH
0002DA C3 99 24    0791   			JP	XEQ
0002DD             0792   ; --- End agon_graphics.asm ---
0002DD             0793   
0002DD             0794   ; --- Begin agon_gpio.asm ---
0002DD             0795   ;
0002DD             0796   ; Title:	BBC Basic for AGON - GPIO functions
0002DD             0797   ; Author:	Dean Belfield
0002DD             0798   ; Created:	04/12/2024
0002DD             0799   ; Last Updated:	04/12/2024
0002DD             0800   ;
0002DD             0801   ; Modinfo:
0002DD             0802   
0002DD             0803   			; INCLUDE	"macros.inc"
0002DD             0804   			; INCLUDE	"equs.inc"
0002DD             0805   
0002DD             0806   			.ASSUME	ADL = 0
0002DD             0807   ;	.ORG 0x0000
0002DD             0808   
0002DD             0809   ;			SEGMENT CODE
0002DD             0810   
0002DD             0811   ;			XDEF	GPIOB_SETMODE
0002DD             0812   
0002DD             0813   ;			XREF	SWITCH_A
0002DD             0814   
0002DD             0815   ;  A: Mode
0002DD             0816   ;  B: Pins
0002DD             0817   ;
0002DD CD 36 05    0818   GPIOB_SETMODE:		CALL	SWITCH_A
0002E0 F4 02       0819   			DW	GPIOB_M0	; Output
0002E2 19 03       0820   			DW	GPIOB_M1	; Input
0002E4 39 03       0821   			DW	GPIOB_M2	; Open Drain IO
0002E6 59 03       0822   			DW	GPIOB_M3	; Open Source IO
0002E8 74 03       0823   			DW	GPIOB_M4	; Interrupt, Dual Edge
0002EA A0 03       0824   			DW	GPIOB_M5	; Alt Function
0002EC BB 03       0825   			DW	GPIOB_M6	; Interrupt, Active Low
0002EE E2 03       0826   			DW	GPIOB_M7	; Interrupt, Active High
0002F0 04 04       0827   			DW	GPIOB_M8	; Interrupt, Falling Edge
0002F2 26 04       0828   			DW	GPIOB_M9	; Interrupt, Rising Edge
0002F4             0829   
0002F4             0830   ; Output
0002F4             0831   ;
0002F4             0832   GPIOB_M0:		RES_GPIO PB_DDR,  B
0002F4 C5          0001M1         PUSH    BC
0002F5 78          0002M1         LD      A, VAL
0002F6 2F          0003M1         CPL
0002F7 4F          0004M1         LD      C, A
0002F8 ED 38 9B    0005M1         IN0     A, (REG)
0002FB A1          0006M1         AND     C
0002FC ED 39 9B    0007M1         OUT0    (REG), A
0002FF C1          0008M1         POP     BC
000300             0833   			RES_GPIO PB_ALT1, B
000300 C5          0001M1         PUSH    BC
000301 78          0002M1         LD      A, VAL
000302 2F          0003M1         CPL
000303 4F          0004M1         LD      C, A
000304 ED 38 9C    0005M1         IN0     A, (REG)
000307 A1          0006M1         AND     C
000308 ED 39 9C    0007M1         OUT0    (REG), A
00030B C1          0008M1         POP     BC
00030C             0834   			RES_GPIO PB_ALT2, B
00030C C5          0001M1         PUSH    BC
00030D 78          0002M1         LD      A, VAL
00030E 2F          0003M1         CPL
00030F 4F          0004M1         LD      C, A
000310 ED 38 9D    0005M1         IN0     A, (REG)
000313 A1          0006M1         AND     C
000314 ED 39 9D    0007M1         OUT0    (REG), A
000317 C1          0008M1         POP     BC
000318 C9          0835   			RET
000319             0836   
000319             0837   ; Input
000319             0838   ;
000319             0839   GPIOB_M1:		SET_GPIO PB_DDR,  B
000319 ED 38 9B    0001M1         IN0     A, (REG)
00031C B0          0002M1         OR      VAL
00031D ED 39 9B    0003M1         OUT0    (REG), A
000320             0840   			RES_GPIO PB_ALT1, B
000320 C5          0001M1         PUSH    BC
000321 78          0002M1         LD      A, VAL
000322 2F          0003M1         CPL
000323 4F          0004M1         LD      C, A
000324 ED 38 9C    0005M1         IN0     A, (REG)
000327 A1          0006M1         AND     C
000328 ED 39 9C    0007M1         OUT0    (REG), A
00032B C1          0008M1         POP     BC
00032C             0841   			RES_GPIO PB_ALT2, B
00032C C5          0001M1         PUSH    BC
00032D 78          0002M1         LD      A, VAL
00032E 2F          0003M1         CPL
00032F 4F          0004M1         LD      C, A
000330 ED 38 9D    0005M1         IN0     A, (REG)
000333 A1          0006M1         AND     C
000334 ED 39 9D    0007M1         OUT0    (REG), A
000337 C1          0008M1         POP     BC
000338 C9          0842   			RET
000339             0843   
000339             0844   ; Open Drain IO
000339             0845   ;
000339             0846   GPIOB_M2:		RES_GPIO PB_DDR,  B
000339 C5          0001M1         PUSH    BC
00033A 78          0002M1         LD      A, VAL
00033B 2F          0003M1         CPL
00033C 4F          0004M1         LD      C, A
00033D ED 38 9B    0005M1         IN0     A, (REG)
000340 A1          0006M1         AND     C
000341 ED 39 9B    0007M1         OUT0    (REG), A
000344 C1          0008M1         POP     BC
000345             0847   			SET_GPIO PB_ALT1, B
000345 ED 38 9C    0001M1         IN0     A, (REG)
000348 B0          0002M1         OR      VAL
000349 ED 39 9C    0003M1         OUT0    (REG), A
00034C             0848   			RES_GPIO PB_ALT2, B
00034C C5          0001M1         PUSH    BC
00034D 78          0002M1         LD      A, VAL
00034E 2F          0003M1         CPL
00034F 4F          0004M1         LD      C, A
000350 ED 38 9D    0005M1         IN0     A, (REG)
000353 A1          0006M1         AND     C
000354 ED 39 9D    0007M1         OUT0    (REG), A
000357 C1          0008M1         POP     BC
000358 C9          0849   			RET
000359             0850   
000359             0851   ; Open Source IO
000359             0852   ;
000359             0853   GPIOB_M3:		SET_GPIO PB_DDR,  B
000359 ED 38 9B    0001M1         IN0     A, (REG)
00035C B0          0002M1         OR      VAL
00035D ED 39 9B    0003M1         OUT0    (REG), A
000360             0854   			SET_GPIO PB_ALT1, B
000360 ED 38 9C    0001M1         IN0     A, (REG)
000363 B0          0002M1         OR      VAL
000364 ED 39 9C    0003M1         OUT0    (REG), A
000367             0855   			RES_GPIO PB_ALT2, B
000367 C5          0001M1         PUSH    BC
000368 78          0002M1         LD      A, VAL
000369 2F          0003M1         CPL
00036A 4F          0004M1         LD      C, A
00036B ED 38 9D    0005M1         IN0     A, (REG)
00036E A1          0006M1         AND     C
00036F ED 39 9D    0007M1         OUT0    (REG), A
000372 C1          0008M1         POP     BC
000373 C9          0856   			RET
000374             0857   
000374             0858   ; Interrupt, Dual Edge
000374             0859   ;
000374             0860   GPIOB_M4:		SET_GPIO PB_DR,   B
000374 ED 38 9A    0001M1         IN0     A, (REG)
000377 B0          0002M1         OR      VAL
000378 ED 39 9A    0003M1         OUT0    (REG), A
00037B             0861   			RES_GPIO PB_DDR,  B
00037B C5          0001M1         PUSH    BC
00037C 78          0002M1         LD      A, VAL
00037D 2F          0003M1         CPL
00037E 4F          0004M1         LD      C, A
00037F ED 38 9B    0005M1         IN0     A, (REG)
000382 A1          0006M1         AND     C
000383 ED 39 9B    0007M1         OUT0    (REG), A
000386 C1          0008M1         POP     BC
000387             0862   			RES_GPIO PB_ALT1, B
000387 C5          0001M1         PUSH    BC
000388 78          0002M1         LD      A, VAL
000389 2F          0003M1         CPL
00038A 4F          0004M1         LD      C, A
00038B ED 38 9C    0005M1         IN0     A, (REG)
00038E A1          0006M1         AND     C
00038F ED 39 9C    0007M1         OUT0    (REG), A
000392 C1          0008M1         POP     BC
000393             0863   			RES_GPIO PB_ALT2, B
000393 C5          0001M1         PUSH    BC
000394 78          0002M1         LD      A, VAL
000395 2F          0003M1         CPL
000396 4F          0004M1         LD      C, A
000397 ED 38 9D    0005M1         IN0     A, (REG)
00039A A1          0006M1         AND     C
00039B ED 39 9D    0007M1         OUT0    (REG), A
00039E C1          0008M1         POP     BC
00039F C9          0864   			RET
0003A0             0865   
0003A0             0866   ; Alt Function
0003A0             0867   ;
0003A0             0868   GPIOB_M5:		SET_GPIO PB_DDR,  B
0003A0 ED 38 9B    0001M1         IN0     A, (REG)
0003A3 B0          0002M1         OR      VAL
0003A4 ED 39 9B    0003M1         OUT0    (REG), A
0003A7             0869   			RES_GPIO PB_ALT1, B
0003A7 C5          0001M1         PUSH    BC
0003A8 78          0002M1         LD      A, VAL
0003A9 2F          0003M1         CPL
0003AA 4F          0004M1         LD      C, A
0003AB ED 38 9C    0005M1         IN0     A, (REG)
0003AE A1          0006M1         AND     C
0003AF ED 39 9C    0007M1         OUT0    (REG), A
0003B2 C1          0008M1         POP     BC
0003B3             0870   			SET_GPIO PB_ALT2, B
0003B3 ED 38 9D    0001M1         IN0     A, (REG)
0003B6 B0          0002M1         OR      VAL
0003B7 ED 39 9D    0003M1         OUT0    (REG), A
0003BA C9          0871   			RET
0003BB             0872   
0003BB             0873   ; Interrupt, Active Low
0003BB             0874   ;
0003BB             0875   GPIOB_M6:		RES_GPIO PB_DR,   B
0003BB C5          0001M1         PUSH    BC
0003BC 78          0002M1         LD      A, VAL
0003BD 2F          0003M1         CPL
0003BE 4F          0004M1         LD      C, A
0003BF ED 38 9A    0005M1         IN0     A, (REG)
0003C2 A1          0006M1         AND     C
0003C3 ED 39 9A    0007M1         OUT0    (REG), A
0003C6 C1          0008M1         POP     BC
0003C7             0876   			RES_GPIO PB_DDR,  B
0003C7 C5          0001M1         PUSH    BC
0003C8 78          0002M1         LD      A, VAL
0003C9 2F          0003M1         CPL
0003CA 4F          0004M1         LD      C, A
0003CB ED 38 9B    0005M1         IN0     A, (REG)
0003CE A1          0006M1         AND     C
0003CF ED 39 9B    0007M1         OUT0    (REG), A
0003D2 C1          0008M1         POP     BC
0003D3             0877   			SET_GPIO PB_ALT1, B
0003D3 ED 38 9C    0001M1         IN0     A, (REG)
0003D6 B0          0002M1         OR      VAL
0003D7 ED 39 9C    0003M1         OUT0    (REG), A
0003DA             0878   			SET_GPIO PB_ALT2, B
0003DA ED 38 9D    0001M1         IN0     A, (REG)
0003DD B0          0002M1         OR      VAL
0003DE ED 39 9D    0003M1         OUT0    (REG), A
0003E1 C9          0879   			RET
0003E2             0880   
0003E2             0881   
0003E2             0882   ; Interrupt, Active High
0003E2             0883   ;
0003E2             0884   GPIOB_M7:		SET_GPIO PB_DR,   B
0003E2 ED 38 9A    0001M1         IN0     A, (REG)
0003E5 B0          0002M1         OR      VAL
0003E6 ED 39 9A    0003M1         OUT0    (REG), A
0003E9             0885   			RES_GPIO PB_DDR,  B
0003E9 C5          0001M1         PUSH    BC
0003EA 78          0002M1         LD      A, VAL
0003EB 2F          0003M1         CPL
0003EC 4F          0004M1         LD      C, A
0003ED ED 38 9B    0005M1         IN0     A, (REG)
0003F0 A1          0006M1         AND     C
0003F1 ED 39 9B    0007M1         OUT0    (REG), A
0003F4 C1          0008M1         POP     BC
0003F5             0886   			SET_GPIO PB_ALT1, B
0003F5 ED 38 9C    0001M1         IN0     A, (REG)
0003F8 B0          0002M1         OR      VAL
0003F9 ED 39 9C    0003M1         OUT0    (REG), A
0003FC             0887   			SET_GPIO PB_ALT2, B
0003FC ED 38 9D    0001M1         IN0     A, (REG)
0003FF B0          0002M1         OR      VAL
000400 ED 39 9D    0003M1         OUT0    (REG), A
000403 C9          0888   			RET
000404             0889   
000404             0890   
000404             0891   ; Interrupt, Falling Edge
000404             0892   ;
000404             0893   GPIOB_M8:		RES_GPIO PB_DR,   B
000404 C5          0001M1         PUSH    BC
000405 78          0002M1         LD      A, VAL
000406 2F          0003M1         CPL
000407 4F          0004M1         LD      C, A
000408 ED 38 9A    0005M1         IN0     A, (REG)
00040B A1          0006M1         AND     C
00040C ED 39 9A    0007M1         OUT0    (REG), A
00040F C1          0008M1         POP     BC
000410             0894   			SET_GPIO PB_DDR,  B
000410 ED 38 9B    0001M1         IN0     A, (REG)
000413 B0          0002M1         OR      VAL
000414 ED 39 9B    0003M1         OUT0    (REG), A
000417             0895   			SET_GPIO PB_ALT1, B
000417 ED 38 9C    0001M1         IN0     A, (REG)
00041A B0          0002M1         OR      VAL
00041B ED 39 9C    0003M1         OUT0    (REG), A
00041E             0896   			SET_GPIO PB_ALT2, B
00041E ED 38 9D    0001M1         IN0     A, (REG)
000421 B0          0002M1         OR      VAL
000422 ED 39 9D    0003M1         OUT0    (REG), A
000425 C9          0897   			RET
000426             0898   
000426             0899   ; Interrupt, Rising Edge
000426             0900   ;
000426             0901   GPIOB_M9:		SET_GPIO PB_DR,   B
000426 ED 38 9A    0001M1         IN0     A, (REG)
000429 B0          0002M1         OR      VAL
00042A ED 39 9A    0003M1         OUT0    (REG), A
00042D             0902   			SET_GPIO PB_DDR,  B
00042D ED 38 9B    0001M1         IN0     A, (REG)
000430 B0          0002M1         OR      VAL
000431 ED 39 9B    0003M1         OUT0    (REG), A
000434             0903   			SET_GPIO PB_ALT1, B
000434 ED 38 9C    0001M1         IN0     A, (REG)
000437 B0          0002M1         OR      VAL
000438 ED 39 9C    0003M1         OUT0    (REG), A
00043B             0904   			SET_GPIO PB_ALT2, B
00043B ED 38 9D    0001M1         IN0     A, (REG)
00043E B0          0002M1         OR      VAL
00043F ED 39 9D    0003M1         OUT0    (REG), A
000442 C9          0905   			RET
000443             0906   ; --- End agon_gpio.asm ---
000443             0907   
000443             0908   ; --- Begin agon_interrupt.asm ---
000443             0909   ;
000443             0910   ; Title:	BBC Basic for AGON - Interrupts
000443             0911   ; Author:	Dean Belfield
000443             0912   ; Created:	04/12/2024
000443             0913   ; Last Updated:	04/12/2024
000443             0914   ;
000443             0915   ; Modinfo:
000443             0916   
000443             0917   			.ASSUME	ADL = 0
000443             0918   ;	.ORG 0x0000
000443             0919   
000443             0920   			; INCLUDE	"macros.inc"
000443             0921   			; INCLUDE	"equs.inc"
000443             0922   			; INCLUDE "mos_api.inc"	; In MOS/src
000443             0923   
000443             0924   ;			SEGMENT CODE
000443             0925   
000443             0926   ;			XDEF	VBLANK_INIT
000443             0927   ;			XDEF	VBLANK_STOP
000443             0928   ;			XDEF	VBLANK_HANDLER
000443             0929   
000443             0930   ;			XREF	ESCSET
000443             0931   ;			XREF	KEYDOWN		; In ram.asm
000443             0932   ;			XREF	KEYASCII 	; In ram.asm
000443             0933   ;			XREF	KEYCOUNT	; In ram.asm
000443             0934   
000443             0935   ; Hook into the MOS VBLANK interrupt
000443             0936   ;
000443 F3          0937   VBLANK_INIT:		DI
000444             0938   
000444 ED 6E       0939   			LD		A, MB 				; Get a 24-bit pointer to
000446 21 C1 04    0940   			LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
000449 CD 83 04    0941   			CALL		SET_AHL16 			; address is a 16-bit pointer in BBC BASIC's segment
00044C             0942   
00044C 1E 32       0943   			LD		E, 32h				; Set up the VBlank Interrupt Vector
00044E             0944   			MOSCALL		mos_setintvector
00044E 3E 14       0001M1 			LD	A, function
000450 49 CF       0002M1 			RST.LIS	08h
000452             0945   
000452 5B E5       0946   			PUSH.LIL	HL				; HLU: Pointer to the MOS interrupt vector
000454 5B D1       0947   			POP.LIL		DE 				; DEU: Pointer to the MOS interrupt vector
000456             0948   
000456 21 D9 04    0949   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000459 ED 6E       0950   			LD		A, MB	 			; Get the segment BBC BASIC is running in
00045B 32 CA 04    0951   			LD		(VBLANK_HANDLER_MB + 1), A 	; Store in the interrupt handler
00045E CD 83 04    0952   			CALL		SET_AHL16 			; Convert pointer to an absolute 24-bit address
000461 5B ED 1F    0953   			LD.LIL		(HL), DE			; Self-modify the code
000464 FB          0954   			EI
000465 C9          0955   			RET
000466             0956   
000466             0957   ; Unhook the custom VBLANK interrupt
000466             0958   ;
000466 F3          0959   VBLANK_STOP:		DI
000467 21 D9 04    0960   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
00046A 3A CA 04    0961   			LD		A, (VBLANK_HANDLER_MB + 1)	; The stored MB of the segment BBC BASIC is running in
00046D F5          0962   			PUSH		AF 				; Stack the MB for later
00046E CD 83 04    0963   			CALL		SET_AHL16			; Convert pointer to an absolute 24-bit address
000471 5B ED 17    0964   			LD.LIL		DE, (HL)			; DEU: Address of MOS interrupt vector
000474 5B D5       0965   			PUSH.LIL	DE				; Transfer to HL
000476 5B E1       0966   			POP.LIL		HL
000478 1E 32       0967   			LD		E, 32h
00047A             0968   			MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
00047A 3E 14       0001M1 			LD	A, function
00047C 49 CF       0002M1 			RST.LIS	08h
00047E F1          0969   			POP		AF 				; Restore MB to this segment
00047F ED 6D       0970   			LD		MB, A
000481 FB          0971   			EI
000482 C9          0972   			RET
000483             0973   
000483             0974   ; Set the MSB of HL (U) to A
000483             0975   ;
000483 5B E5       0976   SET_AHL16:		PUSH.LIL	HL
000485 5B 21 02 00 0977   			LD.LIL		HL, 2
       00          
00048A 5B 39       0978   			ADD.LIL		HL, SP
00048C 5B 77       0979   			LD.LIL		(HL), A
00048E 5B E1       0980   			POP.LIL		HL
000490 C9          0981   			RET
000491             0982   
000491             0983   ; A safe LIS call to ESCSET
000491             0984   ;
000491             0985   DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
000491 3E 08       0001M1 			LD	A, function
000493 49 CF       0002M1 			RST.LIS	08h
000495 21 16 51    0986   			LD		HL, KEYCOUNT 			; Check whether the keycount has changed
000498 5B DD 7E 19 0987   			LD.LIL		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
00049C BE          0988   			CP 		(HL)				; with our local copy
00049D 20 09       0989   			JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
00049F             0990   ;
00049F AF          0991   DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
0004A0 32 15 51    0992   			LD		(KEYASCII), A
0004A3 32 14 51    0993   			LD		(KEYDOWN), A
0004A6 5B C9       0994   			RET.LIL 					; And return
0004A8             0995   ;
0004A8 77          0996   DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
0004A9 5B DD 7E 18 0997   			LD.LIL		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
0004AD B7          0998   			OR		A
0004AE 28 EF       0999   			JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
0004B0             1000   ;
0004B0 32 14 51    1001   			LD		(KEYDOWN), A 			; Store the keydown value
0004B3 5B DD 7E 05 1002   			LD.LIL		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
0004B7 32 15 51    1003   			LD		(KEYASCII), A 			; Store locally
0004BA FE 1B       1004   			CP		1Bh				; Is it escape?
0004BC CC 16 06    1005   			CALL		Z, ESCSET			; Yes, so set the escape flags
0004BF 49 C9       1006   			RET.LIS						; Return to the interrupt handler
0004C1             1007   
0004C1             1008   ;
0004C1             1009   ; Interrupts in mixed mode always run in ADL mode
0004C1             1010   ;
0004C1             1011   			.ASSUME	ADL = 1
0004C1             1012   
0004C1 F3          1013   VBLANK_HANDLER:		DI
0004C2 F5          1014   			PUSH		AF
0004C3 E5          1015   			PUSH		HL
0004C4 DD E5       1016   			PUSH		IX
0004C6 ED 6E       1017   			LD		A, MB
0004C8 F5          1018   			PUSH		AF
0004C9 3E 00       1019   VBLANK_HANDLER_MB:	LD		A, 0				; This is self-modified by VBLANK_INIT
0004CB ED 6D       1020   			LD		MB, A
0004CD 49 CD 91 04 1021   			CALL.LIS	DO_KEYBOARD
0004D1 F1          1022   			POP		AF
0004D2 ED 6D       1023   			LD		MB, A
0004D4 DD E1       1024   			POP		IX
0004D6 E1          1025   			POP		HL
0004D7 F1          1026   			POP		AF
0004D8             1027   ;
0004D8             1028   ; Finally jump to the MOS interrupt
0004D8             1029   ;
0004D8 C3 00 00 00 1030   VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
0004DC             1031   ; --- End agon_interrupt.asm ---
0004DC             1032   
0004DC             1033   ; --- Begin agon_misc.asm ---
0004DC             1034   ;
0004DC             1035   ; Title:	BBC Basic for AGON - Miscellaneous helper functions
0004DC             1036   ; Author:	Dean Belfield
0004DC             1037   ; Created:	04/12/2024
0004DC             1038   ; Last Updated:	04/12/2024
0004DC             1039   ;
0004DC             1040   ; Modinfo:
0004DC             1041   
0004DC             1042   			; INCLUDE	"equs.inc"
0004DC             1043   			; INCLUDE	"macros.inc"
0004DC             1044   
0004DC             1045   			.ASSUME	ADL = 0
0004DC             1046   ;	.ORG 0x0000
0004DC             1047   
0004DC             1048   ;			SEGMENT CODE
0004DC             1049   
0004DC             1050   ;			XDEF	ASC_TO_NUMBER
0004DC             1051   ;			XDEF	SWITCH_A
0004DC             1052   ;			XDEF	NULLTOCR
0004DC             1053   ;			XDEF	CRTONULL
0004DC             1054   ;			XDEF	CSTR_FNAME
0004DC             1055   ;			XDEF	CSTR_LINE
0004DC             1056   ;			XDEF	CSTR_FINDCH
0004DC             1057   ;			XDEF	CSTR_ENDSWITH
0004DC             1058   ;			XDEF	CSTR_CAT
0004DC             1059   
0004DC             1060   ;			XREF	OSWRCH
0004DC             1061   ;			XREF	KEYWDS
0004DC             1062   ;			XREF	KEYWDL
0004DC             1063   
0004DC             1064   ; Read a number and convert to binary
0004DC             1065   ; If prefixed with &, will read as hex, otherwise decimal
0004DC             1066   ;   Inputs: HL: Pointer in string buffer
0004DC             1067   ;  Outputs: HL: Updated text pointer
0004DC             1068   ;           DE: Value
0004DC             1069   ;            A: Terminator (spaces skipped)
0004DC             1070   ; Destroys: A,D,E,H,L,F
0004DC             1071   ;
0004DC C5          1072   ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
0004DD 11 00 00    1073   			LD	DE, 0			; Initialise DE
0004E0 CD 20 05    1074   			CALL	SKIPSPmisc			; Skip whitespace
0004E3 7E          1075   			LD	A, (HL)			; Read first character
0004E4 FE 26       1076   			CP	'&'			; Is it prefixed with '&' (HEX number)?
0004E6 20 1E       1077   			JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0004E8 23          1078   			INC	HL			; Otherwise fall through to ASC_TO_HEX
0004E9             1079   ;
0004E9 7E          1080   ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
0004EA CD 2E 05    1081   			CALL    UPPRCmisc			; Convert to uppercase
0004ED D6 30       1082   			SUB	'0'			; Normalise to 0
0004EF 38 2E       1083   			JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0004F1 FE 0A       1084   			CP 	10			; Check if >= 10
0004F3 38 06       1085   			JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
0004F5 D6 07       1086   			SUB 	7			; Adjust ASCII A-F to nibble
0004F7 FE 10       1087   			CP 	16			; Check for > F
0004F9 30 24       1088   			JR 	NC, ASC_TO_NUMBER4	; Return if out of range
0004FB EB          1089   ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
0004FC 29          1090   			ADD	HL, HL
0004FD 29          1091   			ADD	HL, HL
0004FE 29          1092   			ADD	HL, HL
0004FF 29          1093   			ADD	HL, HL
000500 EB          1094   			EX	DE, HL
000501 B3          1095   			OR      E			; OR the new digit in to the least significant nibble
000502 5F          1096   			LD      E, A
000503 23          1097   			INC     HL			; Onto the next character
000504 18 E3       1098   			JR      ASC_TO_NUMBER1		; And loop
000506             1099   ;
000506 7E          1100   ASC_TO_NUMBER3:		LD	A, (HL)
000507 D6 30       1101   			SUB	'0'			; Normalise to 0
000509 38 14       1102   			JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
00050B FE 0A       1103   			CP	10			; Check if >= 10
00050D 30 10       1104   			JR	NC, ASC_TO_NUMBER4	; Return if >= 10
00050F EB          1105   			EX 	DE, HL 			; Stick DE in HL
000510 44          1106   			LD	B, H 			; And copy HL into BC
000511 4D          1107   			LD	C, L
000512 29          1108   			ADD	HL, HL 			; x 2
000513 29          1109   			ADD	HL, HL 			; x 4
000514 09          1110   			ADD	HL, BC 			; x 5
000515 29          1111   			ADD	HL, HL 			; x 10
000516 EB          1112   			EX	DE, HL
000517             1113   			ADD8U_DE 			; Add A to DE (macro)
000517 83          0001M1         ADD     A, E
000518 5F          0002M1         LD      E, A
000519 8A          0003M1         ADC     A, D
00051A 93          0004M1         SUB     E
00051B 57          0005M1         LD      D, A
00051C 23          1114   			INC	HL
00051D 18 E7       1115   			JR	ASC_TO_NUMBER3
00051F C1          1116   ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSP here
000520             1117   
000520             1118   ; Skip a space
000520             1119   ; HL: Pointer in string buffer
000520             1120   ;
000520 7E          1121   SKIPSPmisc:			LD      A, (HL)
000521 FE 20       1122   			CP      ' '
000523 C0          1123   			RET     NZ
000524 23          1124   			INC     HL
000525 18 F9       1125   			JR      SKIPSPmisc
000527             1126   
000527             1127   ; Skip a string
000527             1128   ; HL: Pointer in string buffer
000527             1129   ;
000527 7E          1130   SKIPNOTSP:		LD	A, (HL)
000528 FE 20       1131   			CP	' '
00052A C8          1132   			RET	Z
00052B 23          1133   			INC	HL
00052C 18 F9       1134   			JR	SKIPNOTSP
00052E             1135   
00052E             1136   ; Convert a character to upper case
00052E             1137   ;  A: Character to convert
00052E             1138   ;
00052E E6 7F       1139   UPPRCmisc:  		AND     7FH
000530 FE 60       1140   			CP      '`'
000532 D8          1141   			RET     C
000533 E6 5F       1142   			AND     5FH			; Convert to upper case
000535 C9          1143   			RET
000536             1144   
000536             1145   ; Switch on A - lookup table immediately after call
000536             1146   ;  A: Index into lookup table
000536             1147   ;
000536 E3          1148   SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
000537 87          1149   			ADD	A, A			; Multiply A by two
000538             1150   			ADD8U_HL 			; Add to HL (macro)
000538 85          0001M1         ADD     A, L
000539 6F          0002M1         LD      L, A
00053A 8C          0003M1         ADC     A, H
00053B 95          0004M1         SUB     L
00053C 67          0005M1         LD      H, A
00053D 7E          1151   			LD	A, (HL)			; follow the call. Fetch an address from the
00053E 23          1152   			INC	HL 			; table.
00053F 66          1153   			LD	H, (HL)
000540 6F          1154   			LD	L, A
000541 E3          1155   			EX	(SP), HL		; Swap this new address back, restores HL
000542 C9          1156   			RET				; Return program control to this new address
000543             1157   
000543             1158   ; Convert the buffer to a null terminated string and back
000543             1159   ; HL: Buffer address
000543             1160   ;
000543 C5          1161   NULLTOCR:		PUSH 	BC
000544 06 00       1162   			LD	B, 0
000546 0E 0D       1163   			LD	C, CR
000548 18 05       1164   			JR	CRTONULL0
00054A             1165   ;
00054A C5          1166   CRTONULL:		PUSH	BC
00054B 06 0D       1167   			LD	B, CR
00054D 0E 00       1168   			LD	C, 0
00054F             1169   ;
00054F E5          1170   CRTONULL0:		PUSH	HL
000550 7E          1171   CRTONULL1:		LD	A, (HL)
000551 B8          1172   			CP 	B
000552 28 03       1173   			JR	Z, CRTONULL2
000554 23          1174   			INC	HL
000555 18 F9       1175   			JR	CRTONULL1
000557 71          1176   CRTONULL2:		LD	(HL), C
000558 E1          1177   			POP 	HL
000559 C1          1178   			POP	BC
00055A C9          1179   			RET
00055B             1180   
00055B             1181   ; Copy a filename to DE and zero terminate it
00055B             1182   ; HL: Source
00055B             1183   ; DE: Destination (ACCS)
00055B             1184   ;
00055B 7E          1185   CSTR_FNAME:		LD	A, (HL)			; Get source
00055C FE 20       1186   			CP	32			; Is it space
00055E 28 09       1187   			JR	Z, @F
000560 FE 0D       1188   			CP	CR			; Or is it CR
000562 28 05       1189   			JR	Z, @F
000564 12          1190   			LD	(DE), A			; No, so store
000565 23          1191   			INC	HL			; Increment
000566 13          1192   			INC	DE
000567 18 F2       1193   			JR	CSTR_FNAME		; And loop
000569 AF          1194   @@:			XOR	A			; Zero terminate the target string
00056A 12          1195   			LD	(DE), A
00056B 13          1196   			INC	DE			; And point to next free address
00056C C9          1197   			RET
00056D             1198   
00056D             1199   ; Copy a CR terminated line to DE and zero terminate it
00056D             1200   ; HL: Source
00056D             1201   ; DE: Destination (ACCS)
00056D             1202   ;
00056D 7E          1203   CSTR_LINE:		LD	A, (HL)			; Get source
00056E FE 0D       1204   			CP	CR			; Is it CR
000570 28 05       1205   			JR	Z, @F
000572 12          1206   			LD	(DE), A			; No, so store
000573 23          1207   			INC	HL			; Increment
000574 13          1208   			INC	DE
000575 18 F6       1209   			JR	CSTR_LINE		; And loop
000577 AF          1210   @@:			XOR	A			; Zero terminate the target string
000578 12          1211   			LD	(DE), A
000579 13          1212   			INC	DE			; And point to next free address
00057A C9          1213   			RET
00057B             1214   
00057B             1215   ; Find the first occurrence of a character (case sensitive)
00057B             1216   ; HL: Source
00057B             1217   ;  C: Character to find
00057B             1218   ; Returns:
00057B             1219   ; HL: Pointer to character, or end of string marker
00057B             1220   ;
00057B 7E          1221   CSTR_FINDCH:		LD	A, (HL)			; Get source
00057C B9          1222   			CP	C			; Is it our character?
00057D C8          1223   			RET	Z			; Yes, so exit
00057E B7          1224   			OR	A			; Is it the end of string?
00057F C8          1225   			RET	Z			; Yes, so exit
000580 23          1226   			INC	HL
000581 18 F8       1227   			JR	CSTR_FINDCH
000583             1228   
000583             1229   ; Check whether a string ends with another string (case insensitive)
000583             1230   ; HL: Source
000583             1231   ; DE: The substring we want to test with
000583             1232   ; Returns:
000583             1233   ;  F: Z if HL ends with DE, otherwise NZ
000583             1234   ;
000583 7E          1235   CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
000584 CD 2E 05    1236   			CALL	UPPRCmisc			; Convert to upper case
000587 4F          1237   			LD	C, A
000588 1A          1238   			LD	A, (DE)			; Get the substring byte
000589 B9          1239   			CP	C
00058A C0          1240   			RET	NZ			; Return NZ if at any point the strings don't match
00058B B1          1241   			OR	C			; Check whether both bytes are zero
00058C C8          1242   			RET	Z			; If so, return, as we have reached the end of both strings
00058D 23          1243   			INC	HL
00058E 13          1244   			INC	DE
00058F 18 F2       1245   			JR	CSTR_ENDSWITH		; And loop
000591             1246   
000591             1247   ; Concatenate a string onto the end of another string
000591             1248   ; HL: Source
000591             1249   ; DE: Second string
000591             1250   ;
000591 7E          1251   CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
000592 B7          1252   			OR	A
000593 28 03       1253   			JR	Z, CSTR_CAT_1
000595 23          1254   			INC	HL
000596 18 F9       1255   			JR	CSTR_CAT
000598             1256   ;
000598 1A          1257   CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
000599 77          1258   			LD	(HL), A
00059A B7          1259   			OR	A			; Check for end of string
00059B C8          1260   			RET	Z			; And return
00059C 23          1261   			INC	HL
00059D 13          1262   			INC	DE
00059E 18 F8       1263   			JR	CSTR_CAT_1		; Loop until finished
0005A0             1264   ; --- End agon_misc.asm ---
0005A0             1265   
0005A0             1266   ; --- Begin agon_os.asm ---
0005A0             1267   ;
0005A0             1268   ; Title:	BBC Basic for AGON - MOS stuff
0005A0             1269   ; Author:	Dean Belfield
0005A0             1270   ; Created:	04/12/2024
0005A0             1271   ; Last Updated:	12/12/2024
0005A0             1272   ;
0005A0             1273   ; Modinfo:
0005A0             1274   ; 08/12/2024:	Added OSCLI and file I/O
0005A0             1275   ; 11/12/2024:	Added ESC key handling
0005A0             1276   ; 		Added OSWORD
0005A0             1277   ; 12/12/2024:	Added OSRDCH, OSBYTE_81 and fixed *EDIT
0005A0             1278   
0005A0             1279   			.ASSUME	ADL = 0
0005A0             1280   ;			.ORG 0x0000
0005A0             1281   
0005A0             1282   			; INCLUDE	"equs.inc"
0005A0             1283   			; INCLUDE "macros.inc"
0005A0             1284   			; INCLUDE "mos_api.inc"	; In MOS/src
0005A0             1285   
0005A0             1286   ;			SEGMENT CODE
0005A0             1287   
0005A0             1288   ;			XDEF	OSWORD
0005A0             1289   ;			XDEF	OSBYTE
0005A0             1290   ;			XDEF	OSINIT
0005A0             1291   ;			XDEF	OSOPEN
0005A0             1292   ;			XDEF	OSSHUT
0005A0             1293   ;			XDEF	OSLOAD
0005A0             1294   ;			XDEF	OSSAVE
0005A0             1295   ;			XDEF	OSLINE
0005A0             1296   ;			XDEF	OSSTAT
0005A0             1297   ;			XDEF	OSWRCH
0005A0             1298   ;			XDEF	OSRDCH
0005A0             1299   ;			XDEF	OSBGET
0005A0             1300   ;			XDEF	OSBPUT
0005A0             1301   ;			XDEF	OSCLI
0005A0             1302   ;			XDEF	PROMPT
0005A0             1303   ;			XDEF	GETPTR
0005A0             1304   ;			XDEF	PUTPTR
0005A0             1305   ;			XDEF	GETEXT
0005A0             1306   ;			XDEF	TRAP
0005A0             1307   ;			XDEF	LTRAP
0005A0             1308   ;			XDEF	BYE
0005A0             1309   ;			XDEF	RESET
0005A0             1310   ;			XDEF	ESCSET
0005A0             1311   
0005A0             1312   ;			XREF	EXTERR
0005A0             1313   ;			XREF	VBLANK_INIT
0005A0             1314   ;			XREF	VBLANK_STOP
0005A0             1315   ;			XREF	USER
0005A0             1316   ;			XREF	COUNT
0005A0             1317   ;			XREF	COUNT0
0005A0             1318   ;			XREF	COUNT1
0005A0             1319   ;			XREF	GETCSR
0005A0             1320   ;			XREF	GETSCHR_1
0005A0             1321   ;			XREF	NULLTOCR
0005A0             1322   ;			XREF	CRLF
0005A0             1323   ;			XREF	FLAGS
0005A0             1324   ;			XREF	OSWRCHPT
0005A0             1325   ;			XREF	OSWRCHCH
0005A0             1326   ;			XREF	OSWRCHFH
0005A0             1327   ;			XREF	KEYASCII
0005A0             1328   ;			XREF	KEYDOWN
0005A0             1329   ;			XREF	LISTON
0005A0             1330   ;			XREF	PAGE_
0005A0             1331   ;			XREF	CSTR_FNAME
0005A0             1332   ;			XREF	CSTR_FINDCH
0005A0             1333   ;			XREF	CSTR_CAT
0005A0             1334   ;			XREF	CSTR_ENDSWITH
0005A0             1335   ;			XREF	CSTR_LINE
0005A0             1336   ;			XREF	NEWIT
0005A0             1337   ;			XREF	BAD
0005A0             1338   ;			XREF	CLEAN
0005A0             1339   ;			XREF	LINNUM
0005A0             1340   ;			XREF	BUFFER
0005A0             1341   ;			XREF	NXT
0005A0             1342   ;			XREF	ERROR_
0005A0             1343   ;			XREF	XEQ
0005A0             1344   ;			XREF	LEXAN2
0005A0             1345   ;			XREF	GETTOP
0005A0             1346   ;			XREF	FINDL
0005A0             1347   ;			XREF	DEL
0005A0             1348   ;			XREF	LISTIT
0005A0             1349   ;			XREF	ESCAPE
0005A0             1350   ;			XREF	ASC_TO_NUMBER
0005A0             1351   ;			XREF	CLOOP
0005A0             1352   ;			XREF	SCRAP
0005A0             1353   ;			XREF	POINT_
0005A0             1354   ;			XREF	SOUND_
0005A0             1355   
0005A0             1356   ;OSINIT - Initialise RAM mapping etc.
0005A0             1357   ;If BASIC is entered by BBCBASIC FILENAME then file
0005A0             1358   ;FILENAME.BBC is automatically CHAINed.
0005A0             1359   ;   Outputs: DE = initial value of HIMEM (top of RAM)
0005A0             1360   ;            HL = initial value of PAGE (user program)
0005A0             1361   ;            Z-flag reset indicates AUTO-RUN.
0005A0             1362   ;  Destroys: A,D,E,H,L,F
0005A0             1363   ;
0005A0 CD 43 04    1364   OSINIT:			CALL	VBLANK_INIT
0005A3 AF          1365   			XOR	A
0005A4 32 0F 51    1366   			LD	(FLAGS), A		; Clear flags and set F = Z
0005A7 21 00 55    1367   			LD 	HL, USER
0005AA 11 00 FF    1368   			LD	DE, RAM_Top
0005AD 5F          1369   			LD	E, A			; Page boundary
0005AE C9          1370   			RET
0005AF             1371   
0005AF             1372   ; PROMPT: output the input prompt
0005AF             1373   ;
0005AF 3E 3E       1374   PROMPT: 		LD	A,'>'			; Falls through to OSWRCH
0005B1             1375   
0005B1             1376   ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
0005B1             1377   ; Parameters:
0005B1             1378   ; - A: Character to write
0005B1             1379   ;
0005B1 E5          1380   OSWRCH:			PUSH	HL
0005B2 21 FE 54    1381   			LD	HL, LISTON		; Fetch the LISTON variable
0005B5 CB 5E       1382   			BIT	3, (HL)			; Check whether we are in *EDIT mode
0005B7 20 0A       1383   			JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
0005B9             1384   ;
0005B9 2A 12 51    1385   			LD	HL, (OSWRCHCH)		; L: Channel #
0005BC 2D          1386   			DEC	L			; If it is 1
0005BD 28 17       1387   			JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0005BF             1388   ;
0005BF E1          1389   			POP	HL			; Otherwise
0005C0 49 D7       1390   			RST.LIS	10h			; Output the character to MOS
0005C2 C9          1391   			RET
0005C3             1392   ;
0005C3 2A 10 51    1393   OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0005C6 FE 0A       1394   			CP	0AH			; Just ignore this
0005C8 28 0A       1395   			JR	Z, OSWRCH_BUFFER2
0005CA FE 0D       1396   			CP	0DH			; Is it the end of line?
0005CC 20 01       1397   			JR	NZ, OSWRCH_BUFFER1	; No, so carry on
0005CE AF          1398   			XOR	A			; Turn it into a NUL character
0005CF 77          1399   OSWRCH_BUFFER1:		LD	(HL), A			; Echo the character into the buffer
0005D0 23          1400   			INC	HL			; Increment pointer
0005D1 22 10 51    1401   			LD	(OSWRCHPT), HL		; Write pointer back
0005D4 E1          1402   OSWRCH_BUFFER2:		POP	HL
0005D5 C9          1403   			RET
0005D6             1404   ;
0005D6 D5          1405   OSWRCH_FILE:		PUSH	DE
0005D7 5C          1406   			LD	E, H			; Filehandle to E
0005D8 CD 63 06    1407   			CALL	OSBPUT			; Write the byte out
0005DB D1          1408   			POP	DE
0005DC E1          1409   			POP	HL
0005DD C9          1410   			RET
0005DE             1411   
0005DE             1412   ; OSRDCH
0005DE             1413   ;
0005DE             1414   OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0005DE 3E 00       0001M1 			LD	A, function
0005E0 49 CF       0002M1 			RST.LIS	08h
0005E2 FE 1B       1415   			CP	1Bh
0005E4 28 55       1416   			JR	Z, LTRAP1
0005E6 C9          1417   			RET
0005E7             1418   
0005E7             1419   ; OSLINE: Invoke the line editor
0005E7             1420   ;
0005E7 1E 01       1421   OSLINE:			LD 	E, 1			; Default is to clear the buffer
0005E9             1422   
0005E9             1423   ; Entry point to line editor that does not clear the buffer
0005E9             1424   ; Parameters:
0005E9             1425   ; - HL: addresses destination buffer (on page boundary)
0005E9             1426   ; Returns:
0005E9             1427   ; -  A: 0
0005E9             1428   ; NB: Buffer filled, terminated by CR
0005E9             1429   ;
0005E9 FD E5       1430   OSLINE1:		PUSH	IY
0005EB E5          1431   			PUSH	HL			; Buffer address
0005EC 01 00 01    1432   			LD	BC, 256			; Buffer length
0005EF             1433   			MOSCALL	mos_editline		; Call the MOS line editor
0005EF 3E 09       0001M1 			LD	A, function
0005F1 49 CF       0002M1 			RST.LIS	08h
0005F3 E1          1434   			POP	HL			; Pop the address
0005F4 FD E1       1435   			POP	IY
0005F6 F5          1436   			PUSH	AF			; Stack the return value (key pressed)
0005F7 CD 43 05    1437   			CALL	NULLTOCR		; Turn the 0 character to a CR
0005FA CD FB 40    1438   			CALL	CRLF			; Display CRLF
0005FD F1          1439   			POP	AF
0005FE FE 1B       1440   			CP	1Bh 			; Check if ESC terminated the input
000600 CA 3B 06    1441   			JP	Z, LTRAP1 		; Yes, so do the ESC thing
000603 3A 0F 51    1442   			LD	A, (FLAGS)		; Otherwise
000606 CB BF       1443   			RES	7, A 			; Clear the escape flag
000608 32 0F 51    1444   			LD	(FLAGS), A
00060B CD 8B 0A    1445   			CALL	WAIT_VBLANK 		; Wait a frame
00060E AF          1446    			XOR	A			; Return A = 0
00060F 32 14 51    1447   			LD	(KEYDOWN), A
000612 32 15 51    1448   			LD	(KEYASCII), A
000615 C9          1449   			RET
000616             1450   
000616             1451   ;
000616             1452   ; ESCSET
000616             1453   ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
000616             1454   ;
000616 E5          1455   ESCSET: 		PUSH    HL
000617 21 0F 51    1456           		LD      HL,FLAGS		; Pointer to FLAGS
00061A CB 76       1457           		BIT     6,(HL)			; If bit 6 is set, then
00061C 20 02       1458           		JR      NZ,ESCDIS		; escape is disabled, so skip
00061E CB FE       1459           		SET     7,(HL)			; Set bit 7, the escape flag
000620 E1          1460   ESCDIS: 		POP     HL
000621 C9          1461           		RET
000622             1462   
000622             1463   ;
000622             1464   ; ESCTEST
000622             1465   ; Test for ESC key
000622             1466   ;
000622 CD 2B 06    1467   ESCTEST:		CALL	READKEY			; Read the keyboard
000625 C0          1468   			RET	NZ			; Skip if no key is pressed
000626 FE 1B       1469   			CP	1BH			; If ESC pressed then
000628 28 EC       1470   			JR	Z,ESCSET		; jump to the escape set routine
00062A C9          1471   			RET
00062B             1472   
00062B             1473   ; Read the keyboard
00062B             1474   ; Returns:
00062B             1475   ; - A: ASCII of the pressed key
00062B             1476   ; - F: Z if the key is pressed, otherwise NZ
00062B             1477   ;
00062B 3A 14 51    1478   READKEY:		LD	A, (KEYDOWN)		; Get key down
00062E 3D          1479   			DEC	A 			; Set Z flag if keydown is 1
00062F 3A 15 51    1480   			LD	A, (KEYASCII)		; Get key ASCII value
000632 C9          1481   			RET
000633             1482   ;
000633             1483   ; TRAP
000633             1484   ; This is called whenever BASIC needs to check for ESC
000633             1485   ;
000633 CD 22 06    1486   TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
000636             1487   ;
000636 3A 0F 51    1488   LTRAP:			LD	A,(FLAGS)		; Get FLAGS
000639 B7          1489   			OR	A			; This checks for bit 7; if it is not set then the result will
00063A F0          1490   			RET	P			; be positive (bit 7 is the sign bit in Z80), so return
00063B 21 0F 51    1491   LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
00063E CB BE       1492   			RES	7,(HL)			; Clear the escape pressed flag and
000640 C3 E3 25    1493   			JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
000643             1494   
000643             1495   ; RESET
000643             1496   ;
000643 C9          1497   RESET:			RET				; Yes this is fine
000644             1498   
000644             1499   ; OSOPEN
000644             1500   ; HL: Pointer to path
000644             1501   ;  F: C Z
000644             1502   ;     x x OPENIN
000644             1503   ; 	  OPENOUT
000644             1504   ;     x	  OPENUP
000644             1505   ; Returns:
000644             1506   ;  A: Filehandle, 0 if cannot open
000644             1507   ;
000644 0E 01       1508   OSOPEN:			LD	C, fa_read
000646 28 06       1509   			JR	Z, @F
000648 0E 32       1510   			LD	C, fa_write | fa_open_append
00064A 38 02       1511   			JR	C, @F
00064C 0E 0A       1512   			LD	C, fa_write | fa_create_always
00064E             1513   @@:			MOSCALL	mos_fopen
00064E 3E 0A       0001M1 			LD	A, function
000650 49 CF       0002M1 			RST.LIS	08h
000652 C9          1514   			RET
000653             1515   
000653             1516   ;OSSHUT - Close disk file(s).
000653             1517   ; E = file channel
000653             1518   ;  If E=0 all files are closed (except SPOOL)
000653             1519   ; Destroys: A,B,C,D,E,H,L,F
000653             1520   ;
000653 C5          1521   OSSHUT:			PUSH	BC
000654 4B          1522   			LD	C, E
000655             1523   			MOSCALL	mos_fclose
000655 3E 0B       0001M1 			LD	A, function
000657 49 CF       0002M1 			RST.LIS	08h
000659 C1          1524   			POP	BC
00065A C9          1525   			RET
00065B             1526   
00065B             1527   ; OSBGET - Read a byte from a random disk file.
00065B             1528   ;  E = file channel
00065B             1529   ; Returns
00065B             1530   ;  A = byte read
00065B             1531   ;  Carry set if LAST BYTE of file
00065B             1532   ; Destroys: A,B,C,F
00065B             1533   ;
00065B C5          1534   OSBGET:			PUSH	BC
00065C 4B          1535   			LD	C, E
00065D             1536   			MOSCALL	mos_fgetc
00065D 3E 0C       0001M1 			LD	A, function
00065F 49 CF       0002M1 			RST.LIS	08h
000661 C1          1537   			POP	BC
000662 C9          1538   			RET
000663             1539   
000663             1540   ; OSBPUT - Write a byte to a random disk file.
000663             1541   ;  E = file channel
000663             1542   ;  A = byte to write
000663             1543   ; Destroys: A,B,C,F
000663             1544   ;
000663 C5          1545   OSBPUT:			PUSH	BC
000664 4B          1546   			LD	C, E
000665 47          1547   			LD	B, A
000666             1548   			MOSCALL	mos_fputc
000666 3E 0D       0001M1 			LD	A, function
000668 49 CF       0002M1 			RST.LIS	08h
00066A C1          1549   			POP	BC
00066B C9          1550   			RET
00066C             1551   
00066C             1552   ; OSSTAT - Read file status
00066C             1553   ;  E = file channel
00066C             1554   ; Returns
00066C             1555   ;  F: Z flag set - EOF
00066C             1556   ;  A: If Z then A = 0
00066C             1557   ; Destroys: A,D,E,H,L,F
00066C             1558   ;
00066C C5          1559   OSSTAT:			PUSH	BC
00066D 4B          1560   			LD	C, E
00066E             1561   			MOSCALL	mos_feof
00066E 3E 0E       0001M1 			LD	A, function
000670 49 CF       0002M1 			RST.LIS	08h
000672 C1          1562   			POP	BC
000673 FE 01       1563   			CP	1
000675 C9          1564   			RET
000676             1565   
000676             1566   ; GETPTR - Return file pointer.
000676             1567   ;    E = file channel
000676             1568   ; Returns:
000676             1569   ; DEHL = pointer (0-&7FFFFF)
000676             1570   ; Destroys: A,B,C,D,E,H,L,F
000676             1571   ;
000676 FD E5       1572   GETPTR:			PUSH		IY
000678 4B          1573   			LD		C, E
000679             1574   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
000679 3E 19       0001M1 			LD	A, function
00067B 49 CF       0002M1 			RST.LIS	08h
00067D 5B E5       1575   			PUSH.LIL	HL
00067F 5B FD E1    1576   			POP.LIL		IY		; IYU: Pointer to FIL structure
000682 5B FD 6E 11 1577   			LD.LIL		L, (IY + FIL.fptr + 0)
000686 5B FD 66 12 1578   			LD.LIL		H, (IY + FIL.fptr + 1)
00068A 5B FD 5E 13 1579   			LD.LIL		E, (IY + FIL.fptr + 2)
00068E 5B FD 56 14 1580   			LD.LIL		D, (IY + FIL.fptr + 3)
000692 FD E1       1581   			POP		IY
000694 C9          1582   			RET
000695             1583   
000695             1584   ; PUTPTR - Update file pointer.
000695             1585   ;    A = file channel
000695             1586   ; DEHL = new pointer (0-&7FFFFF)
000695             1587   ; Destroys: A,B,C,D,E,H,L,F
000695             1588   ;
000695 FD E5       1589   PUTPTR:			PUSH		IY
000697 4F          1590   			LD		C, A  		; C: Filehandle
000698 5B E5       1591   			PUSH.LIL	HL
00069A 5B 21 02 00 1592   			LD.LIL		HL, 2
       00          
00069F 5B 39       1593   			ADD.LIL		HL, SP
0006A1 5B 73       1594   			LD.LIL		(HL), E 	; 3rd byte of DWORD set to E
0006A3 5B E1       1595   			POP.LIL		HL
0006A5 5A          1596   			LD		E, D  		; 4th byte passed as E
0006A6             1597   			MOSCALL		mos_flseek
0006A6 3E 1C       0001M1 			LD	A, function
0006A8 49 CF       0002M1 			RST.LIS	08h
0006AA FD E1       1598   			POP		IY
0006AC C9          1599   			RET
0006AD             1600   
0006AD             1601   ; GETEXT - Find file size.
0006AD             1602   ;    E = file channel
0006AD             1603   ; Returns:
0006AD             1604   ; DEHL = file size (0-&800000)
0006AD             1605   ; Destroys: A,B,C,D,E,H,L,F
0006AD             1606   ;
0006AD FD E5       1607   GETEXT:			PUSH		IY
0006AF 4B          1608   			LD		C, E
0006B0             1609   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
0006B0 3E 19       0001M1 			LD	A, function
0006B2 49 CF       0002M1 			RST.LIS	08h
0006B4 5B E5       1610   			PUSH.LIL	HL
0006B6 5B FD E1    1611   			POP.LIL		IY		; IYU: Pointer to FIL structure
0006B9 5B FD 6E 24 1612   			LD.LIL		L, (IY + FIL.obj.objsize + 0)
0006BD 5B FD 66 25 1613   			LD.LIL		H, (IY + FIL.obj.objsize + 1)
0006C1 5B FD 5E 26 1614   			LD.LIL		E, (IY + FIL.obj.objsize + 2)
0006C5 5B FD 56 27 1615   			LD.LIL		D, (IY + FIL.obj.objsize + 3)
0006C9 FD E1       1616   			POP		IY
0006CB C9          1617   			RET
0006CC             1618   
0006CC             1619   ;OSLOAD - Load an area of memory from a file.
0006CC             1620   ;   Inputs: HL addresses filename (CR terminated)
0006CC             1621   ;           DE = address at which to load
0006CC             1622   ;           BC = maximum allowed size (bytes)
0006CC             1623   ;  Outputs: Carry reset indicates no room for file.
0006CC             1624   ; Destroys: A,B,C,D,E,H,L,F
0006CC             1625   ;
0006CC C5          1626   OSLOAD:			PUSH	BC			; Stack the size
0006CD D5          1627   			PUSH	DE			; Stack the load address
0006CE 11 00 52    1628   			LD	DE, ACCS		; Buffer address for filename
0006D1 CD 5B 05    1629   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0006D4 21 00 52    1630   			LD	HL, ACCS		; HL: Filename
0006D7 CD 15 08    1631   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0006DA CD 26 08    1632   			CALL	EXT_HANDLER		; Get the default handler
0006DD D1          1633   			POP	DE			; Restore the load address
0006DE C1          1634   			POP	BC			; Restore the size
0006DF B7          1635   			OR	A
0006E0 CA A7 07    1636   			JP 	Z, OSLOAD_BBC
0006E3             1637   ;
0006E3             1638   ; Load the file in as a text file
0006E3             1639   ;
0006E3 AF          1640   OSLOAD_TXT:		XOR	A			; Set file attributes to read
0006E4 CD 44 06    1641   			CALL	OSOPEN			; Open the file
0006E7 5F          1642   			LD 	E, A 			; The filehandle
0006E8 B7          1643   			OR	A
0006E9 3E 04       1644   			LD	A, 4			; File not found error
0006EB CA AF 07    1645   			JP	Z, OSERROR		; Jump to error handler
0006EE CD 3E 40    1646   			CALL	NEWIT			; Call NEW to clear the program space
0006F1             1647   ;
0006F1 21 00 52    1648   OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0006F4             1649   ;
0006F4             1650   ; First skip any whitespace (indents) at the beginning of the input
0006F4             1651   ;
0006F4 CD 5B 06    1652   @@:			CALL	OSBGET			; Read the byte into A
0006F7 38 1C       1653   			JR	C, OSLOAD_TXT3		; Is it EOF?
0006F9 FE 0A       1654   			CP	LF 			; Is it LF?
0006FB 28 18       1655   			JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0006FD FE 21       1656   			CP	21h			; Is it less than or equal to ASCII space?
0006FF 38 F3       1657   			JR	C, @B 			; Yes, so keep looping
000701 77          1658   			LD	(HL), A 		; Store the first character
000702 2C          1659   			INC	L
000703             1660   ;
000703             1661   ; Now read the rest of the line in
000703             1662   ;
000703 CD 5B 06    1663   OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
000706 38 26       1664   			JR	C, OSLOAD_TXT4		; Is it EOF?
000708 FE 20       1665   			CP	20h			; Skip if not an ASCII character
00070A 38 05       1666   			JR	C, @F
00070C 77          1667   			LD	(HL), A 		; Store in the input buffer
00070D 2C          1668   			INC	L			; Increment the buffer pointer
00070E CA EF 3E    1669   			JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
000711 FE 0A       1670   @@:			CP	LF			; Check for LF
000713 20 EE       1671   			JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
000715             1672   ;
000715             1673   ; Finally, handle EOL/EOF
000715             1674   ;
000715 36 0D       1675   OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
000717 7D          1676   			LD	A, L			; Check for minimum line length
000718 FE 02       1677   			CP	2			; If it is 2 characters or less (including CR)
00071A 38 08       1678   			JR	C, @F			; Then don't bother entering it
00071C D5          1679   			PUSH	DE			; Preserve the filehandle
00071D CD 39 07    1680   			CALL	OSEDIT			; Enter the line in memory
000720 DC 1A 40    1681   			CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
000723 D1          1682   			POP	DE
000724 CD 6C 06    1683   @@:			CALL	OSSTAT			; End of file?
000727 20 C8       1684   			JR	NZ, OSLOAD_TXT1		; No, so loop
000729 CD 53 06    1685   			CALL	OSSHUT			; Close the file
00072C 37          1686   			SCF				; Flag to BASIC that we're good
00072D C9          1687   			RET
00072E             1688   ;
00072E             1689   ; Special case for BASIC programs with no blank line at the end
00072E             1690   ;
00072E FE 20       1691   OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
000730 38 05       1692   			JR	C, @F
000732 77          1693   			LD	(HL), A			; Store the character
000733 2C          1694   			INC	L
000734 CA EF 3E    1695   			JP	Z, BAD
000737 18 DC       1696   @@:			JR	OSLOAD_TXT3
000739             1697   ;
000739             1698   ; This bit enters the line into memory
000739             1699   ; Also called from OSLOAD_TXT
000739             1700   ; Returns:
000739             1701   ; F: C if a new line has been entered (CLEAN will need to be called)
000739             1702   ;
000739 AF          1703   OSEDIT:			XOR	A			; Entry point after *EDIT
00073A 32 FB 54    1704   			LD      (COUNT),A
00073D FD 21 00 52 1705   			LD      IY,ACCS
000741 CD 8A 43    1706   			CALL    LINNUM			; HL: The line number from the input buffer
000744 CD 0B 45    1707   			CALL    NXT			; Skip spaces
000747 7C          1708   			LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
000748 B5          1709   			OR      L
000749 28 00       1710   			JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
00074B             1711   ;
00074B             1712   ; This bit does the lexical analysis and tokenisation
00074B             1713   ;
00074B 11 00 53    1714   LNZERO:			LD	DE,BUFFER
00074E 0E 01       1715                   	LD	C,1			; LEFT MODE
000750 E5          1716                   	PUSH	HL
000751 CD 18 44    1717                   	CALL	LEXAN2			; LEXICAL ANALYSIS
000754 E1          1718                   	POP	HL
000755 12          1719                   	LD	(DE),A			; TERMINATOR
000756 AF          1720                   	XOR	A
000757 47          1721                   	LD	B,A
000758 4B          1722                   	LD	C,E			; BC=LINE LENGTH
000759 13          1723                   	INC	DE
00075A 12          1724                   	LD	(DE),A			; ZERO NEXT
00075B 7C          1725                   	LD	A,H
00075C B5          1726                   	OR	L
00075D FD 21 00 53 1727                   	LD	IY,BUFFER		; FOR XEQ
000761 CA 99 24    1728                   	JP	Z,XEQ			; DIRECT MODE
000764 C5          1729                   	PUSH	BC
000765 CD 43 41    1730                   	CALL	FINDL
000768 CC E9 3F    1731                   	CALL	Z,DEL
00076B C1          1732                   	POP	BC
00076C 79          1733                   	LD	A,C
00076D B7          1734                   	OR	A
00076E C8          1735                   	RET	Z
00076F C6 04       1736                   	ADD	A,4
000771 4F          1737                   	LD	C,A			; LENGTH INCLUSIVE
000772 D5          1738                   	PUSH	DE			; LINE NUMBER
000773 C5          1739                   	PUSH	BC			; SAVE LINE LENGTH
000774 EB          1740                   	EX	DE,HL
000775 C5          1741                   	PUSH	BC
000776 CD 25 40    1742                   	CALL	GETTOP
000779 C1          1743                   	POP	BC
00077A E5          1744                   	PUSH	HL
00077B 09          1745                   	ADD	HL,BC
00077C E5          1746                   	PUSH	HL
00077D 24          1747                   	INC	H
00077E AF          1748                   	XOR	A
00077F ED 72       1749                   	SBC	HL,SP
000781 E1          1750                   	POP	HL
000782 D2 44 3F    1751                   	JP	NC,ERROR_		; "No room"
000785 E3          1752                   	EX	(SP),HL
000786 E5          1753                   	PUSH	HL
000787 23          1754                   	INC	HL
000788 B7          1755                   	OR	A
000789 ED 52       1756                   	SBC	HL,DE
00078B 44          1757                   	LD	B,H			; BC=AMOUNT TO MOVE
00078C 4D          1758                   	LD	C,L
00078D E1          1759                   	POP	HL
00078E D1          1760                   	POP	DE
00078F 28 02       1761                   	JR	Z,ATENDos
000791 ED B8       1762                   	LDDR				; MAKE SPACE
000793 C1          1763   ATENDos:          	POP	BC			; LINE LENGTH
000794 D1          1764                   	POP	DE			; LINE NUMBER
000795 23          1765                   	INC	HL
000796 71          1766                   	LD	(HL),C			; STORE LENGTH
000797 23          1767                   	INC	HL
000798 73          1768                   	LD	(HL),E			; STORE LINE NUMBER
000799 23          1769                   	INC	HL
00079A 72          1770                   	LD	(HL),D
00079B 23          1771                   	INC	HL
00079C 11 00 53    1772                   	LD	DE,BUFFER
00079F EB          1773                   	EX	DE,HL
0007A0 0D          1774                   	DEC	C
0007A1 0D          1775                   	DEC	C
0007A2 0D          1776                   	DEC	C
0007A3 ED B0       1777                   	LDIR				; ADD LINE
0007A5 37          1778   			SCF
0007A6 C9          1779   			RET
0007A7             1780   ;
0007A7             1781   ; Load the file in as a tokenised binary blob
0007A7             1782   ;
0007A7             1783   OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
0007A7 3E 01       0001M1 			LD	A, function
0007A9 49 CF       0002M1 			RST.LIS	08h
0007AB D0          1784   			RET	NC			; If load returns with carry reset - NO ROOM
0007AC B7          1785   			OR	A			; If there is no error (A=0)
0007AD 37          1786   			SCF				; Need to set carry indicating there was room
0007AE C8          1787   			RET	Z			; Return
0007AF             1788   ;
0007AF F5          1789   OSERROR:		PUSH	AF			; Handle the MOS error
0007B0 21 00 52    1790   			LD	HL, ACCS		; Address of the buffer
0007B3 01 00 01    1791   			LD	BC, 256			; Length of the buffer
0007B6 5F          1792   			LD	E, A			; The error code
0007B7             1793   			MOSCALL	mos_getError		; Copy the error message into the buffer
0007B7 3E 0F       0001M1 			LD	A, function
0007B9 49 CF       0002M1 			RST.LIS	08h
0007BB F1          1794   			POP	AF
0007BC E5          1795   			PUSH	HL			; Stack the address of the error (now in ACCS)
0007BD C6 7F       1796   			ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0007BF C3 55 3F    1797   			JP	EXTERR			; Trigger an external error
0007C2             1798   
0007C2             1799   ;OSSAVE - Save an area of memory to a file.
0007C2             1800   ;   Inputs: HL addresses filename (term CR)
0007C2             1801   ;           DE = start address of data to save
0007C2             1802   ;           BC = length of data to save (bytes)
0007C2             1803   ; Destroys: A,B,C,D,E,H,L,F
0007C2             1804   ;
0007C2 C5          1805   OSSAVE:			PUSH	BC			; Stack the size
0007C3 D5          1806   			PUSH	DE			; Stack the save address
0007C4 11 00 52    1807   			LD	DE, ACCS		; Buffer address for filename
0007C7 CD 5B 05    1808   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0007CA 21 00 52    1809   			LD	HL, ACCS		; HL: Filename
0007CD CD 15 08    1810   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0007D0 CD 26 08    1811   			CALL	EXT_HANDLER		; Get the default handler
0007D3 D1          1812   			POP	DE			; Restore the save address
0007D4 C1          1813   			POP	BC			; Restore the size
0007D5 B7          1814   			OR	A			; Is the extension .BBC
0007D6 28 35       1815   			JR	Z, OSSAVE_BBC		; Yes, so use that
0007D8             1816   ;
0007D8             1817   ; Save the file out as a text file
0007D8             1818   ;
0007D8 3A 12 51    1819   OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0007DB F5          1820   			PUSH	AF
0007DC AF          1821   			XOR	A
0007DD 3C          1822   			INC	A			; Make sure C is clear, A is 1, for OPENOUT
0007DE 32 12 51    1823   			LD	(OSWRCHCH), A
0007E1 CD 44 06    1824   			CALL	OSOPEN			; Open the file
0007E4 32 13 51    1825   			LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0007E7 DD 21 FE 54 1826   			LD	IX, LISTON		; Required for LISTIT
0007EB 2A DC 54    1827   			LD	HL, (PAGE_)		; Get start of program area
0007EE D9          1828   			EXX
0007EF 01 00 00    1829   			LD	BC, 0			; Set the initial indent counters
0007F2 D9          1830   			EXX
0007F3 7E          1831   OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0007F4 B7          1832   			OR	A
0007F5 28 0A       1833   			JR	Z, OSSAVE_TXT2
0007F7 23          1834   			INC	HL			; Skip the length byte
0007F8 5E          1835   			LD	E, (HL)			; Get the line number
0007F9 23          1836   			INC	HL
0007FA 56          1837   			LD	D, (HL)
0007FB 23          1838   			INC	HL
0007FC CD 5D 40    1839   			CALL	LISTIT			; List the line
0007FF 18 F2       1840   			JR	OSSAVE_TXT1
000801 3A 13 51    1841   OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
000804 5F          1842   			LD	E, A
000805 CD 53 06    1843   			CALL	OSSHUT			; Close it
000808 F1          1844   			POP	AF			; Restore the channel
000809 32 12 51    1845   			LD	(OSWRCHCH), A
00080C C9          1846   			RET
00080D             1847   ;
00080D             1848   ; Save the file out as a tokenised binary blob
00080D             1849   ;
00080D             1850   OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
00080D 3E 02       0001M1 			LD	A, function
00080F 49 CF       0002M1 			RST.LIS	08h
000811 B7          1851   			OR	A			; If there is no error (A=0)
000812 C8          1852   			RET	Z			; Just return
000813 18 9A       1853   			JR	OSERROR			; Trip an error
000815             1854   
000815             1855   ; Check if an extension is specified in the filename
000815             1856   ; Add a default if not specified
000815             1857   ; HL: Filename (CSTR format)
000815             1858   ;
000815 E5          1859   EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
000816 0E 2E       1860   			LD	C, '.'			; Search for dot (marks start of extension)
000818 CD 7B 05    1861   			CALL	CSTR_FINDCH
00081B B7          1862   			OR	A			; Check for end of string marker
00081C 20 06       1863   			JR	NZ, @F			; No, so skip as we have an extension at this point
00081E 11 52 08    1864   			LD	DE, EXT_LOOKUP		; Get the first (default extension)
000821 CD 91 05    1865   			CALL	CSTR_CAT		; Concat it to string pointed to by HL
000824 E1          1866   @@:			POP	HL			; Restore the filename pointer
000825 C9          1867   			RET
000826             1868   
000826             1869   ; Check if an extension is valid and, if so, provide a pointer to a handler
000826             1870   ; HL: Filename (CSTR format)
000826             1871   ; Returns:
000826             1872   ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
000826             1873   ;
000826 E5          1874   EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
000827 0E 2E       1875   			LD	C, '.'			; Find the '.'
000829 CD 7B 05    1876   			CALL	CSTR_FINDCH
00082C 11 52 08    1877   			LD	DE, EXT_LOOKUP		; The lookup table
00082F             1878   ;
00082F E5          1879   EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
000830 CD 83 05    1880   			CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
000833 E1          1881   			POP	HL			; Restore the pointer to the extension
000834 28 18       1882   			JR	Z, EXT_HANDLER_2	; We have a match!
000836             1883   ;
000836 1A          1884   @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
000837 13          1885   			INC	DE
000838 B7          1886   			OR	A
000839 20 FB       1887   			JR	NZ, @B
00083B 13          1888   			INC	DE			; Skip the file extension # byte
00083C             1889   ;
00083C 1A          1890   			LD	A, (DE)			; Are we at the end of the table?
00083D B7          1891   			OR	A
00083E 20 EF       1892   			JR	NZ, EXT_HANDLER_1	; No, so loop
000840             1893   ;
000840 3E CC       1894   			LD      A,204			; Throw a "Bad name" error
000842 CD 55 3F    1895           		CALL    EXTERR
000845 42 61 64 20 1896           		DB    	"Bad name", 0
       6E 61 6D 65 
       00          
00084E             1897   ;
00084E 13          1898   EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
00084F 1A          1899   			LD	A, (DE)
000850 E1          1900   			POP	HL			; Restore the filename pointer
000851 C9          1901   			RET
000852             1902   
000852             1903   ; Extension lookup table
000852             1904   ; CSTR, TYPE
000852             1905   ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
000852             1906   ; 	- 1: Human readable plain text
000852             1907   ;
000852 2E 42 42 43 1908   EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
       00 00       
000858 2E 54 58 54 1909   			DB	".TXT", 0, 1
       00 01       
00085E 2E 41 53 43 1910   			DB	".ASC", 0, 1
       00 01       
000864 2E 42 41 53 1911   			DB	".BAS", 0, 1
       00 01       
00086A 00          1912   			DB	0			; End of table
00086B             1913   
00086B             1914   ; OSWORD
00086B             1915   ;
00086B FE 07       1916   OSWORD:			CP	07H			; SOUND
00086D             1917   			; JR	Z, OSWORD_07
00086D CA 9E 0A    1918   			JP	Z, OSWORD_07 ; JR WAS TOO LARGE
000870 FE 08       1919   			CP	08H			; ENVELOPE
000872 28 14       1920   			JR	Z, OSWORD_08
000874 FE 09       1921   			CP	09H			; POINT
000876 28 03       1922   			JR	Z, OSWORD_09
000878 C3 AD 08    1923   			JP	HUH			; Anything else trips an error
00087B             1924   
00087B             1925   ; moved to agon_sound.asm
00087B             1926   ; ; SOUND channel,volume,pitch,duration
00087B             1927   ; ; Parameters:
00087B             1928   ; ; - HL: Pointer to data
00087B             1929   ; ;   - 0,1: Channel
00087B             1930   ; ;   - 2,3: Volume 0 (off) to 15 (full volume)
00087B             1931   ; ;   - 4,5: Pitch 0 - 255
00087B             1932   ; ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
00087B             1933   ; ;
00087B             1934   ; OSWORD_07:		EQU	SOUND_
00087B             1935   ; end moved to agon_sound.asm
00087B             1936   
00087B             1937   ; OSWORD 0x09: POINT
00087B             1938   ; Parameters:
00087B             1939   ; - HL: Address of data
00087B             1940   ;   - 0,1: X coordinate
00087B             1941   ;   - 2,3: Y coordinate
00087B             1942   ;
00087B ED 5B 17 51 1943   OSWORD_09:		LD	DE,(SCRAP+0)
00087F 2A 19 51    1944   			LD	HL,(SCRAP+2)
000882 CD 18 02    1945   			CALL	POINT_
000885 32 1B 51    1946   			LD	(SCRAP+4),A
000888 C9          1947   OSWORD_08:		RET				; Envelope not currently implemented
000889             1948   
000889             1949   ;
000889             1950   ; OSBYTE
000889             1951   ; Parameters:
000889             1952   ; - A: FX #
000889             1953   ; - L: First parameter
000889             1954   ; - H: Second parameter
000889             1955   ;
000889 FE 0B       1956   OSBYTE:			CP	0BH			; Keyboard auto-repeat delay
00088B 28 31       1957   			JR	Z, OSBYTE_0B
00088D FE 0C       1958   			CP	0CH			; Keyboard auto-repeat rate
00088F 28 54       1959   			JR	Z, OSBYTE_0C
000891 FE 13       1960   			CP	13H			; Wait for vblank
000893 28 77       1961   			JR	Z, OSBYTE_13
000895 FE 76       1962   			CP	76H			; Set keyboard LED
000897 28 7B       1963   			JR	Z, OSBYTE_76
000899 FE 81       1964   			CP	81H			; Read the keyboard
00089B CA 3C 09    1965   			JP	Z, OSBYTE_81
00089E FE 86       1966   			CP	86H			; Get cursor coordinates
0008A0 CA 56 09    1967   			JP	Z, OSBYTE_86
0008A3 FE 87       1968   			CP	87H			; Fetch current mode and character under cursor
0008A5 CA 85 09    1969   			JP	Z, OSBYTE_87
0008A8 FE A0       1970   			CP	A0H			; Fetch system variable
0008AA CA 9B 09    1971   			JP	Z, OSBYTE_A0
0008AD             1972   ;
0008AD             1973   ; Anything else trips an error
0008AD             1974   ;
0008AD 3E FE       1975   HUH:    		LD      A,254			; Bad command error
0008AF CD 55 3F    1976           		CALL    EXTERR
0008B2 42 61 64 20 1977           		DB    	"Bad command"
       63 6F 6D 6D 
       61 6E 64    
0008BD 00          1978           		DEFB    0
0008BE             1979   
0008BE             1980   ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
0008BE             1981   ; Parameters:
0008BE             1982   ; - HL: Repeat delay
0008BE             1983   ;
0008BE             1984   OSBYTE_0B:		VDU	23
0008BE 3E 17       0001M1         LD      A, VAL
0008C0 CD B1 05    0002M1         CALL    OSWRCH
0008C3             1985   			VDU	0
0008C3 3E 00       0001M1         LD      A, VAL
0008C5 CD B1 05    0002M1         CALL    OSWRCH
0008C8             1986   			VDU	vdp_keystate
0008C8 3E 88       0001M1         LD      A, VAL
0008CA CD B1 05    0002M1         CALL    OSWRCH
0008CD             1987   			VDU	L
0008CD 7D          0001M1         LD      A, VAL
0008CE CD B1 05    0002M1         CALL    OSWRCH
0008D1             1988   			VDU	H
0008D1 7C          0001M1         LD      A, VAL
0008D2 CD B1 05    0002M1         CALL    OSWRCH
0008D5             1989   			VDU	0
0008D5 3E 00       0001M1         LD      A, VAL
0008D7 CD B1 05    0002M1         CALL    OSWRCH
0008DA             1990   			VDU 	0
0008DA 3E 00       0001M1         LD      A, VAL
0008DC CD B1 05    0002M1         CALL    OSWRCH
0008DF             1991   			VDU	255
0008DF 3E FF       0001M1         LD      A, VAL
0008E1 CD B1 05    0002M1         CALL    OSWRCH
0008E4 C9          1992   			RET
0008E5             1993   
0008E5             1994   ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
0008E5             1995   ; Parameters:
0008E5             1996   ; - HL: Repeat rate
0008E5             1997   ;
0008E5             1998   OSBYTE_0C:		VDU	23
0008E5 3E 17       0001M1         LD      A, VAL
0008E7 CD B1 05    0002M1         CALL    OSWRCH
0008EA             1999   			VDU	0
0008EA 3E 00       0001M1         LD      A, VAL
0008EC CD B1 05    0002M1         CALL    OSWRCH
0008EF             2000   			VDU	vdp_keystate
0008EF 3E 88       0001M1         LD      A, VAL
0008F1 CD B1 05    0002M1         CALL    OSWRCH
0008F4             2001   			VDU	0
0008F4 3E 00       0001M1         LD      A, VAL
0008F6 CD B1 05    0002M1         CALL    OSWRCH
0008F9             2002   			VDU 	0
0008F9 3E 00       0001M1         LD      A, VAL
0008FB CD B1 05    0002M1         CALL    OSWRCH
0008FE             2003   			VDU	L
0008FE 7D          0001M1         LD      A, VAL
0008FF CD B1 05    0002M1         CALL    OSWRCH
000902             2004   			VDU	H
000902 7C          0001M1         LD      A, VAL
000903 CD B1 05    0002M1         CALL    OSWRCH
000906             2005   			VDU	255
000906 3E FF       0001M1         LD      A, VAL
000908 CD B1 05    0002M1         CALL    OSWRCH
00090B C9          2006   			RET
00090C             2007   
00090C             2008   ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
00090C             2009   ;
00090C CD 8B 0A    2010   OSBYTE_13:		CALL	WAIT_VBLANK
00090F 2E 00       2011   			LD	L, 0			; Returns 0
000911 C3 4E 1B    2012   			JP	COUNT0
000914             2013   ;
000914             2014   ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
000914             2015   ; Parameters:
000914             2016   ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
000914             2017   ;
000914             2018   OSBYTE_76:		VDU	23
000914 3E 17       0001M1         LD      A, VAL
000916 CD B1 05    0002M1         CALL    OSWRCH
000919             2019   			VDU	0
000919 3E 00       0001M1         LD      A, VAL
00091B CD B1 05    0002M1         CALL    OSWRCH
00091E             2020   			VDU	vdp_keystate
00091E 3E 88       0001M1         LD      A, VAL
000920 CD B1 05    0002M1         CALL    OSWRCH
000923             2021   			VDU	0
000923 3E 00       0001M1         LD      A, VAL
000925 CD B1 05    0002M1         CALL    OSWRCH
000928             2022   			VDU 	0
000928 3E 00       0001M1         LD      A, VAL
00092A CD B1 05    0002M1         CALL    OSWRCH
00092D             2023   			VDU	0
00092D 3E 00       0001M1         LD      A, VAL
00092F CD B1 05    0002M1         CALL    OSWRCH
000932             2024   			VDU	0
000932 3E 00       0001M1         LD      A, VAL
000934 CD B1 05    0002M1         CALL    OSWRCH
000937             2025   			VDU	L
000937 7D          0001M1         LD      A, VAL
000938 CD B1 05    0002M1         CALL    OSWRCH
00093B C9          2026   			RET
00093C             2027   
00093C             2028   ; OSBYTE 0x81: Read the keyboard
00093C             2029   ; Parameters:
00093C             2030   ; - HL = Time to wait (centiseconds)
00093C             2031   ; Returns:
00093C             2032   ; - F: Carry reset indicates time-out
00093C             2033   ; - A: If carry set, A = character typed
00093C             2034   ; Destroys: A,D,E,H,L,F
00093C             2035   ;
00093C CD 2B 06    2036   OSBYTE_81:		CALL	READKEY			; Read the keyboard
00093F 28 09       2037   			JR	Z, @F 			; Skip if we have a key
000941 7C          2038   			LD	A, H 			; Check loop counter
000942 B5          2039   			OR 	L
000943 C8          2040   			RET 	Z 			; Return, we've not got a key at this point
000944 CD 8B 0A    2041   			CALL	WAIT_VBLANK 		; Wait a frame
000947 2B          2042   			DEC 	HL			; Decrement
000948 18 F2       2043   			JR	OSBYTE_81		; And loop
00094A             2044   ;
00094A 21 14 51    2045   @@:			LD	HL, KEYDOWN		; We have a key, so
00094D 36 00       2046   			LD	(HL), 0			; clear the keydown flag
00094F FE 1B       2047   			CP	1BH			; If we are not pressing ESC,
000951 37          2048   			SCF 				; then flag we've got a character
000952 C0          2049   			RET	NZ
000953 C3 16 06    2050   			JP	ESCSET			; Handle ESC
000956             2051   
000956             2052   ; OSBYTE 0x86: Fetch cursor coordinates
000956             2053   ; Returns:
000956             2054   ; - DE: X Coordinate (POS)
000956             2055   ; - HL: Y Coordinate (VPOS)
000956             2056   ;
000956 DD E5       2057   OSBYTE_86:		PUSH	IX			; Get the system vars in IX
000958             2058   			MOSCALL	mos_sysvars		; Reset the semaphore
000958 3E 08       0001M1 			LD	A, function
00095A 49 CF       0002M1 			RST.LIS	08h
00095C 5B DD CB 04 2059   			RES.LIL	0, (IX+sysvar_vpd_pflags)
       86          
000961             2060   			VDU	23
000961 3E 17       0001M1         LD      A, VAL
000963 CD B1 05    0002M1         CALL    OSWRCH
000966             2061   			VDU	0
000966 3E 00       0001M1         LD      A, VAL
000968 CD B1 05    0002M1         CALL    OSWRCH
00096B             2062   			VDU	vdp_cursor
00096B 3E 82       0001M1         LD      A, VAL
00096D CD B1 05    0002M1         CALL    OSWRCH
000970 5B DD CB 04 2063   @@:			BIT.LIL	0, (IX+sysvar_vpd_pflags)
       46          
000975 28 F9       2064   			JR	Z, @B			; Wait for the result
000977 16 00       2065   			LD 	D, 0
000979 62          2066   			LD	H, D
00097A 5B DD 5E 07 2067   			LD.LIL	E, (IX + sysvar_cursorX)
00097E 5B DD 6E 08 2068   			LD.LIL	L, (IX + sysvar_cursorY)
000982 DD E1       2069   			POP	IX
000984 C9          2070   			RET
000985             2071   
000985             2072   ; OSBYTE 0x87: Fetch current mode and character under cursor
000985             2073   ;
000985 DD E5       2074   OSBYTE_87:		PUSH	IX
000987 CD A9 0D    2075   			CALL	GETCSR			; Get the current screen position
00098A CD DB 01    2076   			CALL	GETSCHR_1		; Read character from screen
00098D 6F          2077   			LD	L, A
00098E             2078   			MOSCALL	mos_sysvars
00098E 3E 08       0001M1 			LD	A, function
000990 49 CF       0002M1 			RST.LIS	08h
000992 5B DD 66 27 2079   			LD.LIL	H, (IX+sysvar_scrMode)	; H: Screen mode
000996 DD E1       2080   			POP	IX
000998 C3 50 1B    2081   			JP	COUNT1
00099B             2082   
00099B             2083   ; OSBYTE 0xA0: Fetch system variable
00099B             2084   ; Parameters:
00099B             2085   ; - L: The system variable to fetch
00099B             2086   ;
00099B DD E5       2087   OSBYTE_A0:		PUSH	IX
00099D             2088   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
00099D 3E 08       0001M1 			LD	A, function
00099F 49 CF       0002M1 			RST.LIS	08h
0009A1 5B 01 00 00 2089   			LD.LIL	BC, 0
       00          
0009A6 4D          2090   			LD	C, L			; BCU = L
0009A7 5B DD 09    2091   			ADD.LIL	IX, BC			; Add to IX
0009AA 5B DD 6E 00 2092   			LD.LIL	L, (IX + 0)		; Fetch the return value
0009AE DD E1       2093   			POP	IX
0009B0 C3 4E 1B    2094   			JP 	COUNT0
0009B3             2095   
0009B3             2096   ; OSCLI
0009B3             2097   ;
0009B3             2098   ;
0009B3             2099   ;OSCLI - Process a MOS command
0009B3             2100   ;
0009B3 CD 0D 0A    2101   OSCLI: 			CALL    SKIPSP
0009B6 FE 0D       2102   			CP      CR
0009B8 C8          2103   			RET     Z
0009B9 FE 7C       2104   			CP      '|'
0009BB C8          2105   			RET     Z
0009BC EB          2106   			EX      DE,HL
0009BD 21 1C 0A    2107   			LD      HL,COMDS
0009C0 1A          2108   OSCLI0:			LD      A,(DE)
0009C1 CD 14 0A    2109   			CALL    UPPRC
0009C4 BE          2110   			CP      (HL)
0009C5 28 0B       2111   			JR      Z,OSCLI2
0009C7 38 2E       2112   			JR      C,OSCLI6
0009C9 CB 7E       2113   OSCLI1:			BIT     7,(HL)
0009CB 23          2114   			INC     HL
0009CC 28 FB       2115   			JR      Z,OSCLI1
0009CE 23          2116   			INC     HL
0009CF 23          2117   			INC     HL
0009D0 18 EE       2118   			JR      OSCLI0
0009D2             2119   ;
0009D2 D5          2120   OSCLI2:			PUSH    DE
0009D3 13          2121   OSCLI3:			INC     DE
0009D4 23          2122   			INC     HL
0009D5 1A          2123   			LD      A,(DE)
0009D6 CD 14 0A    2124   			CALL    UPPRC
0009D9 FE 2E       2125   			CP      '.'			; ABBREVIATED?
0009DB 28 0A       2126   			JR      Z,OSCLI4
0009DD AE          2127   			XOR     (HL)
0009DE 28 F3       2128   			JR      Z,OSCLI3
0009E0 FE 80       2129   			CP      80H
0009E2 28 03       2130   			JR      Z,OSCLI4
0009E4 D1          2131   			POP     DE
0009E5 18 E2       2132   			JR      OSCLI1
0009E7             2133   ;
0009E7 F1          2134   OSCLI4:			POP     AF
0009E8 13          2135   		        INC     DE
0009E9 CB 7E       2136   OSCLI5:			BIT     7,(HL)
0009EB 23          2137   			INC     HL
0009EC 28 FB       2138   			JR      Z,OSCLI5
0009EE 7E          2139   			LD      A,(HL)
0009EF 23          2140   			INC     HL
0009F0 66          2141   			LD      H,(HL)
0009F1 6F          2142   			LD      L,A
0009F2 E5          2143   			PUSH    HL
0009F3 EB          2144   			EX      DE,HL
0009F4 C3 0D 0A    2145   			JP      SKIPSP
0009F7             2146   ;
0009F7 EB          2147   OSCLI6:			EX	DE, HL			; HL: Buffer for command
0009F8 11 00 52    2148   			LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0009FB D5          2149   			PUSH	DE			; Store buffer address
0009FC CD 6D 05    2150   			CALL	CSTR_LINE		; Fetch the line
0009FF E1          2151   			POP	HL			; HL: Pointer to command string in ACCS
000A00 FD E5       2152   			PUSH	IY
000A02             2153   			MOSCALL	mos_oscli		; Returns OSCLI error in A
000A02 3E 10       0001M1 			LD	A, function
000A04 49 CF       0002M1 			RST.LIS	08h
000A06 FD E1       2154   			POP	IY
000A08 B7          2155   			OR	A			; 0 means MOS returned OK
000A09 C8          2156   			RET	Z			; So don't do anything
000A0A C3 AF 07    2157   			JP 	OSERROR			; Otherwise it's a MOS error
000A0D             2158   
000A0D 7E          2159   SKIPSP:			LD      A,(HL)
000A0E FE 20       2160           		CP      ' '
000A10 C0          2161           		RET     NZ
000A11 23          2162           		INC     HL
000A12 18 F9       2163           		JR      SKIPSP
000A14             2164   
000A14 E6 7F       2165   UPPRC:  		AND     7FH
000A16 FE 60       2166   			CP      '`'
000A18 D8          2167   			RET     C
000A19 E6 5F       2168   			AND     5FH			; CONVERT TO UPPER CASE
000A1B C9          2169   			RET
000A1C             2170   
000A1C             2171   ; Each command has bit 7 of the last character set, and is followed by the address of the handler
000A1C             2172   ; These must be in alphabetical order
000A1C             2173   ;
000A1C 42 59 45    2174   COMDS:  		DB	"BY","E"+80h		; BYE
000A1F 2C 0A       2175   			DW	BYE
000A21 45 44 49 54 2176   			DB	"EDI","T"+80h		; EDIT
000A25 37 0A       2177   			DW	STAR_EDIT
000A27 46 58       2178   			DB	"F","X"+80h		; FX
000A29 73 0A       2179   			DW	STAR_FX
000A2B             2180   ;			DB	'VERSIO','N'+80h	; VERSION
000A2B             2181   ;			DW	STAR_VERSION
000A2B FF          2182   			DB	FFh
000A2C             2183   
000A2C             2184   ; *BYE
000A2C             2185   ;
000A2C CD 66 04    2186   BYE:			CALL	VBLANK_STOP		; Restore MOS interrupts
000A2F 5B DD E1    2187   			POP.LIL	IX 			; The return address to init
000A32 21 00 00    2188   			LD	HL, 0			; The return code
000A35 DD E9       2189   			JP	(IX)
000A37             2190   
000A37             2191   ; *EDIT linenum
000A37             2192   ;
000A37 CD DC 04    2193   STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
000A3A EB          2194   			EX	DE, HL			; HL: Line number
000A3B CD 43 41    2195   			CALL	FINDL			; HL: Address in RAM of tokenised line
000A3E 3E 29       2196   			LD	A, 41			; F:NZ If the line is not found
000A40 C2 44 3F    2197   			JP	NZ, ERROR_		; Do error 41: No such line in that case
000A43             2198   ;
000A43             2199   ; Use LISTIT to output the line to the ACCS buffer
000A43             2200   ;
000A43 23          2201   			INC	HL			; Skip the length byte
000A44 5E          2202   			LD	E, (HL)			; Fetch the line number
000A45 23          2203   			INC	HL
000A46 56          2204   			LD	D, (HL)
000A47 23          2205   			INC	HL
000A48 DD 21 00 52 2206   			LD	IX, ACCS		; Pointer to where the copy is to be stored
000A4C DD 22 10 51 2207   			LD	(OSWRCHPT), IX
000A50 DD 21 FE 54 2208   			LD	IX, LISTON		; Pointer to LISTON variable in RAM
000A54 DD 7E 00    2209   			LD	A, (IX)			; Store that variable
000A57 F5          2210   			PUSH	AF
000A58 DD 36 00 09 2211   			LD	(IX), 09h		; Set to echo to buffer
000A5C CD 5D 40    2212   			CALL	LISTIT
000A5F F1          2213   			POP	AF
000A60 DD 77 00    2214   			LD	(IX), A			; Restore the original LISTON variable
000A63 21 00 52    2215   			LD	HL, ACCS		; HL: ACCS
000A66 5D          2216   			LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
000A67 CD E9 05    2217   			CALL	OSLINE1			; Invoke the editor
000A6A CD 39 07    2218   			CALL	OSEDIT
000A6D DC 1A 40    2219   			CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
000A70 C3 B0 37    2220   			JP      CLOOP			; Jump back to immediate mode
000A73             2221   
000A73             2222   ; OSCLI FX n
000A73             2223   ;
000A73 CD DC 04    2224   STAR_FX:		CALL	ASC_TO_NUMBER
000A76 4B          2225   			LD	C, E			; C: Save FX #
000A77 CD DC 04    2226   			CALL	ASC_TO_NUMBER
000A7A 7A          2227   			LD	A, D  			; Is first parameter > 255?
000A7B B7          2228   			OR 	A
000A7C 28 03       2229   			JR	Z, STAR_FX1		; Yes, so skip next bit
000A7E EB          2230   			EX	DE, HL 			; Parameter is 16-bit
000A7F 18 06       2231   			JR	STAR_FX2
000A81             2232   ;
000A81 43          2233   STAR_FX1:		LD	B, E 			; B: Save First parameter
000A82 CD DC 04    2234   			CALL	ASC_TO_NUMBER		; Fetch second parameter
000A85 68          2235   			LD	L, B 			; L: First parameter
000A86 63          2236   			LD	H, E 			; H: Second parameter
000A87             2237   ;
000A87 79          2238   STAR_FX2:		LD	A, C 			; A: FX #
000A88 C3 89 08    2239   			JP	OSBYTE
000A8B             2240   
000A8B             2241   ; Helper Functions
000A8B             2242   ;
000A8B DD E5       2243   WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
000A8D             2244   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
000A8D 3E 08       0001M1 			LD	A, function
000A8F 49 CF       0002M1 			RST.LIS	08h
000A91 5B DD 7E 00 2245   			LD.LIL	A, (IX + sysvar_time + 0)
000A95 5B DD BE 00 2246   @@:			CP.LIL 	A, (IX + sysvar_time + 0)
000A99 28 FA       2247   			JR	Z, @B
000A9B DD E1       2248   			POP	IX
000A9D C9          2249   			RET
000A9E             2250   			; --- End agon_os.asm ---
000A9E             2251   
000A9E             2252   ; --- Begin agon_sound.asm ---
000A9E             2253   ;
000A9E             2254   ; Title:	BBC Basic for AGON - Audio stuff
000A9E             2255   ; Author:	Dean Belfield
000A9E             2256   ; Created:	04/12/2024
000A9E             2257   ; Last Updated:	11/12/2024
000A9E             2258   ;
000A9E             2259   ; Modinfo:
000A9E             2260   ; 11/12/2024:	Modified SOUND_ to work with OSWORD
000A9E             2261   
000A9E             2262   			.ASSUME	ADL = 0
000A9E             2263   ;	.ORG 0x0000
000A9E             2264   
000A9E             2265   			; INCLUDE	"equs.inc"
000A9E             2266   			; INCLUDE "macros.inc"
000A9E             2267   			; INCLUDE "mos_api.inc"	; In MOS/src
000A9E             2268   
000A9E             2269   ;			SEGMENT CODE
000A9E             2270   
000A9E             2271   ;			XDEF	SOUND_
000A9E             2272   
000A9E             2273   ;			XREF	OSWRCH
000A9E             2274   ;			XREF	VDU_BUFFER
000A9E             2275   ;			XREF	LTRAP
000A9E             2276   
000A9E             2277   ; SOUND channel,volume,pitch,duration
000A9E             2278   ; Parameters:
000A9E             2279   ; - HL: Pointer to data
000A9E             2280   ;   - 0,1: Channel
000A9E             2281   ;   - 2,3: Volume 0 (off) to 15 (full volume)
000A9E             2282   ;   - 4,5: Pitch 0 - 255
000A9E             2283   ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000A9E             2284   ;
000A9E 7E          2285   SOUND_:			LD	A, (HL)			; Channel
000A9F 32 00 52    2286   			LD	(VDU_BUFFER+0), A
000AA2 AF          2287   			XOR	A			; Waveform
000AA3 32 01 52    2288   			LD	(VDU_BUFFER+1), A
000AA6 23          2289   			INC	HL
000AA7 23          2290   			INC	HL
000AA8             2291   ;
000AA8             2292   ; Calculate the volume
000AA8             2293   ;
000AA8 4E          2294   			LD	C, (HL)			; Volume
000AA9 06 06       2295   			LD	B, 6			; C already contains the volume
000AAB ED 4C       2296   			MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
000AAD 79          2297   			LD	A, C
000AAE 32 02 52    2298   			LD	(VDU_BUFFER+2), A
000AB1 23          2299   			INC	HL
000AB2 23          2300   			INC	HL
000AB3             2301   ;
000AB3             2302   ; And the frequency
000AB3             2303   ;
000AB3 E5          2304   			PUSH	HL
000AB4 6E          2305   			LD	L, (HL)
000AB5 26 00       2306   			LD	H, 0
000AB7 11 29 0B    2307   			LD	DE, SOUND_FREQ_LOOKUP
000ABA 29          2308   			ADD	HL, HL
000ABB 19          2309   			ADD	HL, DE
000ABC 7E          2310   			LD	A, (HL)
000ABD 32 03 52    2311   			LD	(VDU_BUFFER+3), A
000AC0 23          2312   			INC	HL
000AC1 7E          2313   			LD	A, (HL)
000AC2 32 04 52    2314   			LD	(VDU_BUFFER+4), A
000AC5 E1          2315   			POP	HL
000AC6 23          2316   			INC	HL
000AC7 23          2317   			INC	HL
000AC8             2318   ;
000AC8             2319   ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
000AC8             2320   ;
000AC8 4E          2321   			LD	C, (HL)
000AC9 06 32       2322   			LD	B, 50			; C contains the duration, so MLT by 50
000ACB ED 4C       2323   			MLT	BC
000ACD ED 43 05 52 2324   			LD	(VDU_BUFFER+5), BC
000AD1             2325   ;
000AD1 DD E5       2326   			PUSH	IX			; Get the system vars in IX
000AD3             2327   			MOSCALL	mos_sysvars		; Reset the semaphore
000AD3 3E 08       0001M1 			LD	A, function
000AD5 49 CF       0002M1 			RST.LIS	08h
000AD7 5B DD CB 04 2328   SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
       9E          
000ADC             2329   ;
000ADC             2330   			VDU	23			; Send the sound command
000ADC 3E 17       0001M1         LD      A, VAL
000ADE CD B1 05    0002M1         CALL    OSWRCH
000AE1             2331   			VDU	0
000AE1 3E 00       0001M1         LD      A, VAL
000AE3 CD B1 05    0002M1         CALL    OSWRCH
000AE6             2332   			VDU	vdp_audio
000AE6 3E 85       0001M1         LD      A, VAL
000AE8 CD B1 05    0002M1         CALL    OSWRCH
000AEB             2333   			VDU	(VDU_BUFFER+0)		; 0: Channel
000AEB 3A 00 52    0001M1         LD      A, VAL
000AEE CD B1 05    0002M1         CALL    OSWRCH
000AF1             2334   			VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
000AF1 3A 01 52    0001M1         LD      A, VAL
000AF4 CD B1 05    0002M1         CALL    OSWRCH
000AF7             2335   			VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
000AF7 3A 02 52    0001M1         LD      A, VAL
000AFA CD B1 05    0002M1         CALL    OSWRCH
000AFD             2336   			VDU	(VDU_BUFFER+3)		; 3: Frequency L
000AFD 3A 03 52    0001M1         LD      A, VAL
000B00 CD B1 05    0002M1         CALL    OSWRCH
000B03             2337   			VDU	(VDU_BUFFER+4)		; 4: Frequency H
000B03 3A 04 52    0001M1         LD      A, VAL
000B06 CD B1 05    0002M1         CALL    OSWRCH
000B09             2338   			VDU	(VDU_BUFFER+5)		; 5: Duration L
000B09 3A 05 52    0001M1         LD      A, VAL
000B0C CD B1 05    0002M1         CALL    OSWRCH
000B0F             2339   			VDU	(VDU_BUFFER+6)		; 6: Duration H
000B0F 3A 06 52    0001M1         LD      A, VAL
000B12 CD B1 05    0002M1         CALL    OSWRCH
000B15             2340   ;
000B15             2341   ; Wait for acknowledgement
000B15             2342   ;
000B15 5B DD CB 04 2343   @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
       5E          
000B1A 28 F9       2344   			JR	Z, @B			; Wait for the result
000B1C CD 36 06    2345   			CALL	LTRAP			; Check for ESC
000B1F 5B DD 7E 0E 2346   			LD.LIL	A, (IX+sysvar_audioSuccess)
000B23 A7          2347   			AND	A			; Check if VDP has queued the note
000B24 28 B1       2348   			JR	Z, SOUND0		; No, so loop back and send again
000B26             2349   ;
000B26 DD E1       2350   			POP	IX
000B28 C9          2351   			RET
000B29             2352   
000B29             2353   ; FROM agon_os.asm
000B29             2354   ; SOUND channel,volume,pitch,duration
000B29             2355   ; Parameters:
000B29             2356   ; - HL: Pointer to data
000B29             2357   ;   - 0,1: Channel
000B29             2358   ;   - 2,3: Volume 0 (off) to 15 (full volume)
000B29             2359   ;   - 4,5: Pitch 0 - 255
000B29             2360   ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000B29             2361   ;
000B29             2362   OSWORD_07:		EQU	SOUND_
000B29             2363   ; end from agon_os.asm
000B29             2364   
000B29             2365   ; Frequency Lookup Table
000B29             2366   ; Set up to replicate the BBC Micro audio frequencies
000B29             2367   ;
000B29             2368   ; Split over 5 complete octaves, with 53 being middle C
000B29             2369   ; * C4: 262hz
000B29             2370   ; + A4: 440hz
000B29             2371   ;
000B29             2372   ;	2	3	4	5	6	7	8
000B29             2373   ;
000B29             2374   ; B	1	49	97	145	193	241
000B29             2375   ; A#	0	45	93	141	189	237
000B29             2376   ; A		41	89+	137	185	233
000B29             2377   ; G#		37	85	133	181	229
000B29             2378   ; G		33	81	129	177	225
000B29             2379   ; F#		29	77	125	173	221
000B29             2380   ; F		25	73	121	169	217
000B29             2381   ; E		21	69	117	165	213
000B29             2382   ; D#		17	65	113	161	209
000B29             2383   ; D		13	61	109	157	205	253
000B29             2384   ; C#		9	57	105	153	201	249
000B29             2385   ; C		5	53*	101	149	197	245
000B29             2386   ;
000B29 75 00 76 00 2387   SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
       78 00 7A 00 
       7B 00 83 00 
       85 00 87 00 
000B39 89 00 8B 00 2388   			DW	 137,  139,  141,  143,  145,  147,  149,  151
       8D 00 8F 00 
       91 00 93 00 
       95 00 97 00 
000B49 99 00 9C 00 2389   			DW	 153,  156,  158,  160,  162,  165,  167,  170
       9E 00 A0 00 
       A2 00 A5 00 
       A7 00 AA 00 
000B59 AC 00 AF 00 2390   			DW	 172,  175,  177,  180,  182,  185,  188,  190
       B1 00 B4 00 
       B6 00 B9 00 
       BC 00 BE 00 
000B69 C1 00 C4 00 2391   			DW	 193,  196,  199,  202,  205,  208,  211,  214
       C7 00 CA 00 
       CD 00 D0 00 
       D3 00 D6 00 
000B79 D9 00 DC 00 2392   			DW	 217,  220,  223,  226,  230,  233,  236,  240
       DF 00 E2 00 
       E6 00 E9 00 
       EC 00 F0 00 
000B89 F3 00 F7 00 2393   			DW	 243,  247,  251,  254,  258,  262,  265,  269
       FB 00 FE 00 
       02 01 06 01 
       09 01 0D 01 
000B99 11 01 15 01 2394   			DW	 273,  277,  281,  285,  289,  294,  298,  302
       19 01 1D 01 
       21 01 26 01 
       2A 01 2E 01 
000BA9 33 01 37 01 2395   			DW	 307,  311,  316,  320,  325,  330,  334,  339
       3C 01 40 01 
       45 01 4A 01 
       4E 01 53 01 
000BB9 58 01 5D 01 2396   			DW	 344,  349,  354,  359,  365,  370,  375,  381
       62 01 67 01 
       6D 01 72 01 
       77 01 7D 01 
000BC9 82 01 88 01 2397   			DW	 386,  392,  398,  403,  409,  415,  421,  427
       8E 01 93 01 
       99 01 9F 01 
       A5 01 AB 01 
000BD9 B2 01 B8 01 2398   			DW	 434,  440,  446,  453,  459,  466,  473,  480
       BE 01 C5 01 
       CB 01 D2 01 
       D9 01 E0 01 
000BE9 E7 01 EE 01 2399   			DW	 487,  494,  501,  508,  516,  523,  531,  539
       F5 01 FC 01 
       04 02 0B 02 
       13 02 1B 02 
000BF9 22 02 2A 02 2400   			DW	 546,  554,  562,  571,  579,  587,  596,  605
       32 02 3B 02 
       43 02 4B 02 
       54 02 5D 02 
000C09 65 02 6E 02 2401   			DW	 613,  622,  631,  641,  650,  659,  669,  679
       77 02 81 02 
       8A 02 93 02 
       9D 02 A7 02 
000C19 B1 02 BB 02 2402   			DW	 689,  699,  709,  719,  729,  740,  751,  762
       C5 02 CF 02 
       D9 02 E4 02 
       EF 02 FA 02 
000C29 05 03 10 03 2403   			DW	 773,  784,  795,  807,  819,  831,  843,  855
       1B 03 27 03 
       33 03 3F 03 
       4B 03 57 03 
000C39 63 03 70 03 2404   			DW	 867,  880,  893,  906,  919,  932,  946,  960
       7D 03 8A 03 
       97 03 A4 03 
       B2 03 C0 03 
000C49 CE 03 DC 03 2405   			DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
       EA 03 F9 03 
       08 04 17 04 
       26 04 36 04 
000C59 45 04 55 04 2406   			DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
       65 04 76 04 
       86 04 97 04 
       A8 04 BA 04 
000C69 CB 04 DD 04 2407   			DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
       EF 04 02 05 
       14 05 27 05 
       3A 05 4E 05 
000C79 62 05 76 05 2408   			DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
       8A 05 9F 05 
       B3 05 C9 05 
       DE 05 F4 05 
000C89 0A 06 21 06 2409   			DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
       38 06 4F 06 
       66 06 7E 06 
       96 06 AF 06 
000C99 C8 06 E1 06 2410   			DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
       FA 06 14 07 
       2F 07 4A 07 
       65 07 80 07 
000CA9 9C 07 B8 07 2411   			DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
       D5 07 F2 07 
       10 08 2D 08 
       4B 08 6A 08 
000CB9 8A 08 A9 08 2412   			DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
       CA 08 EA 08 
       0C 09 2D 09 
       4F 09 72 09 
000CC9 95 09 B9 09 2413   			DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
       DD 09 02 0A 
       27 0A 4D 0A 
       73 0A 9A 0A 
000CD9 C2 0A EA 0A 2414   			DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
       12 0B 3C 0B 
       66 0B 90 0B 
       BB 0B E7 0B 
000CE9 13 0C 40 0C 2415   			DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
       6E 0C 9C 0C 
       CB 0C FA 0C 
       2B 0D 5C 0D 
000CF9 8E 0D C0 0D 2416   			DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
       F3 0D 27 0E 
       5C 0E 91 0E 
       C8 0E FF 0E 
000D09 36 0F 6F 0F 2417   			DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
       A9 0F E3 0F 
       1E 10 5A 10 
       97 10 D5 10 
000D19 13 11 53 11 2418   			DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
       93 11 D5 11 
       17 12 5B 12 
       9F 12 E4 12 
000D29             2419   ; --- End agon_sound.asm ---
000D29             2420   
000D29             2421   ; --- Begin acorn.asm ---
000D29             2422   ;
000D29             2423   ;Automatically created from original source on 2024-12-15 15:29:12
000D29             2424   ;
000D29             2425                   .ASSUME ADL = 0
000D29             2426   ;	.ORG 0x0000
000D29             2427   ;                SEGMENT CODE
000D29             2428   ;
000D29             2429   ;PATCH FOR BBC BASIC TO CP/M 2.2 & 3.0
000D29             2430   ;* ACORN COMPUTERS Z80 TUBE VERSION  *
000D29             2431   ;(C) COPYRIGHT R.T.RUSSELL, 02-01-1984
000D29             2432   ;VERSION 5.0, 12-07-2024
000D29             2433   ;
000D29             2434   ;                XREF	OSWRCH
000D29             2435   ;                XREF	OSWORD
000D29             2436   ;                XREF	OSBYTE
000D29             2437   ;
000D29             2438   ; ESC            EQU	1BH
000D29             2439   TBY:            EQU	0FH
000D29             2440   ; TTO:            EQU	0B8H in main.asm
000D29             2441   TFILL:          EQU	03H
000D29             2442   ;
000D29             2443   ;                XREF	ITEMI
000D29             2444   ;                XREF	EXPRI
000D29             2445   ;                XREF	COMMA
000D29             2446   ;                XREF	TERMQ
000D29             2447   ;                XREF	BRAKET
000D29             2448   ;                XREF	EXTERR
000D29             2449   ;                XREF	STOREN
000D29             2450   ;                XREF	TRAP
000D29             2451   ;                XREF	VAR_
000D29             2452   ;                XREF	NXT
000D29             2453   ;                XREF	XEQ
000D29             2454   ;
000D29             2455   ;                XREF	ACCS
000D29             2456   ;                XREF	COUNT
000D29             2457   ;                XREF	WIDTH
000D29             2458   ;                XREF	SCRAP
000D29             2459   ;
000D29             2460   ;                XDEF	OSCALL
000D29             2461   ;                XDEF	CLRSCN
000D29             2462   ;                XDEF	PUTCSR
000D29             2463   ;                XDEF	GETCSR
000D29             2464   ;                XDEF	PUTIME
000D29             2465   ;                XDEF	GETIME
000D29             2466   ;                XDEF	OSKEY
000D29             2467   ;
000D29             2468   ;                XDEF	CLG
000D29             2469   ;                XDEF	MOVE
000D29             2470   ;                XDEF	DRAW
000D29             2471   ;                XDEF	PLOT
000D29             2472   ;                XDEF	MODE
000D29             2473   ;                XDEF	COLOUR
000D29             2474   ;                XDEF	GCOL
000D29             2475   ;                XDEF	ADVAL
000D29             2476   ;                XDEF	SOUND
000D29             2477   ;                XDEF	ENVEL
000D29             2478   ;                XDEF	POINT
000D29             2479   ;
000D29             2480   ;                XDEF	CIRCLE
000D29             2481   ;                XDEF	ELLIPS
000D29             2482   ;                XDEF	FILL
000D29             2483   ;                XDEF	MOUSE
000D29             2484   ;                XDEF	ORIGIN
000D29             2485   ;                XDEF	RECTAN
000D29             2486   ;                XDEF	LINE
000D29             2487   ;                XDEF	TINT
000D29             2488   ;                XDEF	WAIT
000D29             2489   ;                XDEF	SYS
000D29             2490   ;                XDEF	CSRON
000D29             2491   ;                XDEF	CSROFF
000D29             2492   ;
000D29             2493   ;                XDEF	PUTIMS
000D29             2494   ;                XDEF	GETIMS
000D29             2495   ;                XDEF	TINTFN
000D29             2496   ;                XDEF	MODEFN
000D29             2497   ;                XDEF	WIDFN
000D29             2498   ;
000D29             2499   ;GETIME	- Read elapsed-time clock.
000D29             2500   ;  	  Outputs:  DEHL = elapsed time (centiseconds)
000D29             2501   ; 	  Destroys: A,D,E,H,L,F
000D29             2502   ;
000D29 3E 01       2503   GETIME:         LD	A,1
000D2B 21 17 51    2504                   LD	HL,SCRAP
000D2E CD 6B 08    2505                   CALL	OSWORD
000D31 21 17 51    2506                   LD	HL,SCRAP
000D34 5E          2507                   LD	E,(HL)
000D35 23          2508                   INC	HL
000D36 56          2509                   LD	D,(HL)
000D37 23          2510                   INC	HL
000D38 7E          2511                   LD	A,(HL)
000D39 23          2512                   INC	HL
000D3A 66          2513                   LD	H,(HL)
000D3B 6F          2514                   LD	L,A
000D3C EB          2515                   EX	DE,HL
000D3D C9          2516                   RET
000D3E             2517   ;
000D3E             2518   ;GETIMS	- Read real-time clock as string.
000D3E             2519   ;  	  Outputs:  TIME$ in string accumulator
000D3E             2520   ;                   E = string length (25)
000D3E             2521   ; 	  Destroys: A,B,C,D,E,H,L,F
000D3E             2522   ;
000D3E 3E 0E       2523   GETIMS:         LD	A,14
000D40 21 17 51    2524                   LD	HL,SCRAP
000D43 36 00       2525                   LD	(HL),0
000D45 CD 6B 08    2526                   CALL	OSWORD
000D48 21 17 51    2527                   LD	HL,SCRAP
000D4B 11 00 52    2528                   LD	DE,ACCS
000D4E 7E          2529                   LD	A,(HL)
000D4F BB          2530                   CP	E
000D50 C8          2531                   RET	Z
000D51 01 19 00    2532                   LD	BC,25
000D54 ED B0       2533                   LDIR
000D56 C9          2534                   RET
000D57             2535   ;
000D57             2536   ;
000D57             2537   ;PUTIME	- Load elapsed-time clock.
000D57             2538   ;   	  Inputs:   DEHL = time to load (centiseconds)
000D57             2539   ; 	  Destroys: A,D,E,H,L,F
000D57             2540   ;
000D57 DD E5       2541   PUTIME:         PUSH	IX
000D59 DD 21 17 51 2542                   LD	IX,SCRAP
000D5D DD 75 00    2543                   LD	(IX+0),L
000D60 DD 74 01    2544                   LD	(IX+1),H
000D63 DD 73 02    2545                   LD	(IX+2),E
000D66 DD 72 03    2546                   LD	(IX+3),D
000D69 3E 02       2547                   LD	A,2
000D6B 21 17 51    2548                   LD	HL,SCRAP
000D6E CD 6B 08    2549                   CALL	OSWORD
000D71 DD E1       2550                   POP	IX
000D73 C9          2551                   RET
000D74             2552   ;
000D74             2553   ;PUTIMS	- Wtite real-time clock as string.
000D74             2554   ;  	  Inputs:   string in string accumulator
000D74             2555   ;                   E = string length
000D74             2556   ; 	  Destroys: A,B,C,D,E,H,L,F
000D74             2557   ;
000D74 7B          2558   PUTIMS:         LD	A,E		;Length
000D75 FE 1A       2559                   CP	26
000D77 D0          2560                   RET	NC
000D78 06 00       2561                   LD	B,0
000D7A 4F          2562                   LD	C,A
000D7B 11 18 51    2563                   LD	DE,SCRAP+1
000D7E 21 00 52    2564                   LD	HL,ACCS
000D81 ED B0       2565                   LDIR
000D83 21 17 51    2566                   LD	HL,SCRAP
000D86 77          2567                   LD	(HL),A
000D87 3E 0F       2568                   LD	A,15
000D89 C3 6B 08    2569                   JP	OSWORD
000D8C             2570   ;
000D8C             2571   ;
000D8C             2572   ;CLRSCN	- Clear screen.
000D8C             2573   ; 	  Destroys: A,D,E,H,L,F
000D8C             2574   ;
000D8C 3E 0C       2575   CLRSCN:         LD	A,0CH
000D8E C3 B1 05    2576                   JP	OSWRCH
000D91             2577   ;
000D91             2578   ;
000D91             2579   ;OSKEY	- Sample keyboard with specified wait.
000D91             2580   ;   	  Inputs:   HL = Time to wait (centiseconds)
000D91             2581   ;  	  Outputs:  Carry reset indicates time-out.
000D91             2582   ;                   If carry set, A = character typed.
000D91             2583   ; 	  Destroys: A,D,E,H,L,F
000D91             2584   ;
000D91 3E 81       2585   OSKEY:          LD	A,129
000D93 CD 89 08    2586                   CALL	OSBYTE
000D96 7C          2587                   LD	A,H
000D97 B7          2588                   OR	A
000D98 C0          2589                   RET	NZ		;TIME-OUT, CARRY RESET
000D99 7D          2590                   LD	A,L
000D9A 37          2591                   SCF
000D9B C9          2592                   RET			;NORMAL, CARRY SET
000D9C             2593   ;
000D9C             2594   ;PUTCSR	- Move cursor to specified position.
000D9C             2595   ;   	  Inputs:   DE = horizontal position (LHS=0)
000D9C             2596   ;                   HL = vertical position (TOP=0)
000D9C             2597   ; 	  Destroys: A,D,E,H,L,F
000D9C             2598   ;
000D9C 3E 1F       2599   PUTCSR:         LD	A,1FH
000D9E CD B1 05    2600                   CALL	OSWRCH
000DA1 7B          2601                   LD	A,E
000DA2 CD B1 05    2602                   CALL	OSWRCH
000DA5 7D          2603                   LD	A,L
000DA6 C3 B1 05    2604                   JP	OSWRCH
000DA9             2605   ;
000DA9             2606   ;GETCSR	- Return cursor coordinates.
000DA9             2607   ;   	  Outputs:  DE = X coordinate (POS)
000DA9             2608   ;                   HL = Y coordinate (VPOS)
000DA9             2609   ;  	  Destroys: A,D,E,H,L,F
000DA9             2610   ;
000DA9 3E 86       2611   GETCSR:         LD	A,134
000DAB CD 89 08    2612                   CALL	OSBYTE
000DAE 5D          2613                   LD	E,L
000DAF 6C          2614                   LD	L,H
000DB0 16 00       2615                   LD	D,0
000DB2 62          2616                   LD	H,D
000DB3 C9          2617                   RET
000DB4             2618   ;
000DB4             2619   ;POINT - var=POINT(x,y)
000DB4             2620   ;
000DB4 CD 33 18    2621   POINT:          CALL	EXPRI
000DB7 D9          2622                   EXX
000DB8 E5          2623                   PUSH	HL
000DB9 CD F1 10    2624                   CALL	CEXPRI
000DBC D9          2625                   EXX
000DBD D1          2626                   POP	DE
000DBE CD AE 20    2627                   CALL	BRAKET
000DC1 DD 21 17 51 2628                   LD	IX,SCRAP
000DC5 DD 73 00    2629                   LD	(IX+0),E
000DC8 DD 72 01    2630                   LD	(IX+1),D
000DCB DD 75 02    2631                   LD	(IX+2),L
000DCE DD 74 03    2632                   LD	(IX+3),H
000DD1 21 17 51    2633                   LD	HL,SCRAP
000DD4 3E 09       2634                   LD	A,9
000DD6 CD 6B 08    2635                   CALL	OSWORD
000DD9 DD 7E 04    2636                   LD	A,(IX+4)
000DDC 6F          2637                   LD	L,A
000DDD C6 01       2638                   ADD	A,1
000DDF 9F          2639                   SBC	A,A
000DE0 67          2640                   LD	H,A
000DE1 D9          2641   RETEXX:         EXX
000DE2 67          2642                   LD	H,A
000DE3 6F          2643                   LD	L,A
000DE4 AF          2644                   XOR	A
000DE5 4F          2645                   LD	C,A
000DE6 C9          2646                   RET
000DE7             2647   ;
000DE7             2648   ;ADVAL - var=ADVAL(n)
000DE7             2649   ;
000DE7 CD 60 18    2650   ADVAL:          CALL	ITEMI
000DEA D9          2651                   EXX
000DEB 3E 80       2652                   LD	A,128
000DED CD 89 08    2653                   CALL	OSBYTE
000DF0 AF          2654                   XOR	A
000DF1 18 EE       2655                   JR	RETEXX
000DF3             2656   ;
000DF3             2657   ;MODEFN - var=MODE
000DF3             2658   ;
000DF3 3E 87       2659   MODEFN:         LD	A,135
000DF5 CD 89 08    2660                   CALL	OSBYTE
000DF8 6C          2661                   LD	L,H
000DF9 AF          2662   RETU8:          XOR	A
000DFA 67          2663                   LD	H,A
000DFB 18 E4       2664                   JR	RETEXX
000DFD             2665   ;
000DFD             2666   ;WIDFN - var=WIDTH
000DFD             2667   ;
000DFD 3A FC 54    2668   WIDFN:          LD	A,(WIDTH)
000E00 6F          2669                   LD	L,A
000E01 18 F6       2670                   JR	RETU8
000E03             2671   ;
000E03             2672   ;ENVEL - ENVELOPE var,var,var,var,var,var,var,
000E03             2673   ;                 var,var,var,var,var,var,var
000E03             2674   ;
000E03 06 00       2675   ENVEL:          LD	B,0
000E05 DD 21 17 51 2676                   LD	IX,SCRAP
000E09 C5          2677                   PUSH	BC
000E0A DD E5       2678                   PUSH	IX
000E0C CD 33 18    2679   ENVEL1:         CALL	EXPRI
000E0F D9          2680                   EXX
000E10 DD E1       2681                   POP	IX
000E12 C1          2682                   POP	BC
000E13 DD 75 00    2683                   LD	(IX),L
000E16 78          2684                   LD	A,B
000E17 FE 0D       2685                   CP	13
000E19 28 0B       2686                   JR	Z,ENVEL2
000E1B 04          2687                   INC	B
000E1C DD 23       2688                   INC	IX
000E1E C5          2689                   PUSH	BC
000E1F DD E5       2690                   PUSH	IX
000E21 CD A2 20    2691                   CALL	COMMA
000E24 18 E6       2692                   JR	ENVEL1
000E26 21 17 51    2693   ENVEL2:         LD	HL,SCRAP
000E29 3E 08       2694                   LD	A,8
000E2B CD 6B 08    2695                   CALL	OSWORD
000E2E C3 99 24    2696                   JP	XEQ
000E31             2697   ;
000E31             2698   ;SOUND - SOUND var,var,var,var
000E31             2699   ;
000E31 06 00       2700   SOUND:          LD	B,0
000E33 DD 21 17 51 2701                   LD	IX,SCRAP
000E37 C5          2702                   PUSH	BC
000E38 DD E5       2703                   PUSH	IX
000E3A CD 33 18    2704   SOUND1:         CALL	EXPRI
000E3D D9          2705                   EXX
000E3E DD E1       2706                   POP	IX
000E40 C1          2707                   POP	BC
000E41 DD 75 00    2708                   LD	(IX+0),L
000E44 DD 74 01    2709                   LD	(IX+1),H
000E47 DD 23       2710                   INC	IX
000E49 DD 23       2711                   INC	IX
000E4B 04          2712                   INC	B
000E4C 04          2713                   INC	B
000E4D 78          2714                   LD	A,B
000E4E FE 08       2715                   CP	8
000E50 28 08       2716                   JR	Z,SOUND2
000E52 C5          2717                   PUSH	BC
000E53 DD E5       2718                   PUSH	IX
000E55 CD A2 20    2719                   CALL	COMMA
000E58 18 E0       2720                   JR	SOUND1
000E5A 21 17 51    2721   SOUND2:         LD	HL,SCRAP
000E5D 3E 07       2722                   LD	A,7
000E5F CD 6B 08    2723                   CALL	OSWORD
000E62 C3 99 24    2724                   JP	XEQ
000E65             2725   ;
000E65             2726   ;MODE - MODE n
000E65             2727   ;
000E65 CD 33 18    2728   MODE:           CALL	EXPRI
000E68 AF          2729                   XOR	A
000E69 32 FB 54    2730                   LD	(COUNT),A
000E6C D9          2731                   EXX
000E6D 65          2732                   LD	H,L
000E6E 2E 16       2733                   LD	L,22
000E70 CD D8 10    2734                   CALL	WRCH2
000E73 18 72       2735                   JR	XEQGO1
000E75             2736   ;
000E75             2737   ;CLG
000E75             2738   ;
000E75 3E 10       2739   CLG:            LD	A,16
000E77 CD B1 05    2740                   CALL	OSWRCH
000E7A 18 6B       2741                   JR	XEQGO1
000E7C             2742   ;
000E7C             2743   ;ORIGIN x,y
000E7C             2744   ;
000E7C CD 33 18    2745   ORIGIN:         CALL    EXPRI
000E7F D9          2746                   EXX
000E80 E5          2747                   PUSH	HL
000E81 CD F1 10    2748                   CALL    CEXPRI
000E84 D9          2749                   EXX
000E85 D1          2750                   POP	DE
000E86 0E 1D       2751                   LD	C,29
000E88 CD CC 10    2752                   CALL	WRCH5
000E8B 18 5A       2753                   JR	XEQGO1
000E8D             2754   ;
000E8D             2755   ;COLOUR n
000E8D             2756   ;COLOUR n,p
000E8D             2757   ;COLOUR n,r,g,b
000E8D             2758   ;
000E8D CD 33 18    2759   COLOUR:         CALL	EXPRI		;n
000E90 D9          2760                   EXX
000E91 FD 7E 00    2761                   LD	A,(IY)
000E94 FE 2C       2762                   CP	','
000E96 28 08       2763                   JR      Z,PALCOL
000E98 65          2764                   LD	H,L
000E99 2E 11       2765                   LD	L,17
000E9B CD D8 10    2766                   CALL	WRCH2
000E9E 18 47       2767                   JR	XEQGO1
000EA0             2768   ;
000EA0 E5          2769   PALCOL:         PUSH	HL
000EA1 CD F1 10    2770                   CALL	CEXPRI		;p or r
000EA4 D9          2771                   EXX
000EA5 EB          2772                   EX	DE,HL
000EA6 21 00 00    2773                   LD	HL,0
000EA9 FD 7E 00    2774                   LD	A,(IY)
000EAC FE 2C       2775                   CP	','
000EAE 20 15       2776                   JR	NZ,PALET1
000EB0 D5          2777                   PUSH	DE
000EB1 CD F1 10    2778                   CALL	CEXPRI		;g
000EB4 D9          2779                   EXX
000EB5 E5          2780                   PUSH	HL
000EB6 CD F1 10    2781                   CALL	CEXPRI		;b
000EB9 D9          2782                   EXX
000EBA D1          2783                   POP	DE
000EBB C1          2784                   POP	BC
000EBC 7D          2785                   LD	A,L
000EBD E1          2786                   POP	HL
000EBE 51          2787                   LD	D,C		;r
000EBF 4D          2788                   LD	C,L		;n
000EC0 6B          2789                   LD	L,E		;g
000EC1 67          2790                   LD	H,A		;b
000EC2 1E 10       2791                   LD	E,16
000EC4 C5          2792                   PUSH	BC
000EC5 C1          2793   PALET1:         POP	BC
000EC6 06 13       2794                   LD	B,19
000EC8 CD C8 10    2795                   CALL	WRCH6
000ECB 18 1A       2796                   JR	XEQGO1
000ECD             2797   ;
000ECD             2798   ;GCOL [a,]b
000ECD             2799   ;
000ECD CD 33 18    2800   GCOL:           CALL	EXPRI
000ED0 D9          2801                   EXX
000ED1 1E 00       2802                   LD	E,0
000ED3 FD 7E 00    2803                   LD	A,(IY)
000ED6 FE 2C       2804                   CP	','
000ED8 20 06       2805                   JR	NZ,GCOL0
000EDA E5          2806                   PUSH	HL
000EDB CD F1 10    2807                   CALL	CEXPRI
000EDE D9          2808                   EXX
000EDF D1          2809                   POP	DE
000EE0 65          2810   GCOL0:          LD	H,L
000EE1 6B          2811                   LD	L,E
000EE2 16 12       2812                   LD	D,18
000EE4 CD D4 10    2813                   CALL	WRCH3		;DLH
000EE7 C3 99 24    2814   XEQGO1:         JP	XEQ
000EEA             2815   ;
000EEA             2816   ;CSRON  - Turn caret on
000EEA             2817   ;CSROFF - Turn caret off
000EEA             2818   ;
000EEA 0E 01       2819   CSRON:          LD	C,1
000EEC 18 02       2820                   JR	CSRGO
000EEE             2821   ;
000EEE 0E 00       2822   CSROFF:         LD	C,0
000EF0 3E 17       2823   CSRGO:          LD	A,23
000EF2 CD B1 05    2824                   CALL	OSWRCH
000EF5 3E 01       2825                   LD	A,1
000EF7 CD B1 05    2826                   CALL	OSWRCH
000EFA 79          2827                   LD	A,C
000EFB 06 08       2828                   LD	B,8
000EFD CD B1 05    2829   CSRGO1:         CALL	OSWRCH
000F00 AF          2830                   XOR	A
000F01 10 FA       2831                   DJNZ	CSRGO1
000F03 18 E2       2832                   JR	XEQGO1
000F05             2833   ;
000F05             2834   ;LINE x1,y1,x2,y2
000F05             2835   ;
000F05 CD 33 18    2836   LINE:           CALL	EXPRI
000F08 D9          2837                   EXX
000F09 E5          2838                   PUSH	HL
000F0A CD E0 10    2839                   CALL	EXPR3
000F0D E3          2840                   EX	(SP),HL		;HL <- x1, (SP) <- y2
000F0E C5          2841                   PUSH	BC
000F0F EB          2842                   EX	DE,HL
000F10 0E 04       2843                   LD	C,4
000F12 CD C6 10    2844                   CALL	VDU25
000F15 D1          2845                   POP	DE
000F16 E1          2846                   POP	HL
000F17 0E 05       2847                   LD	C,5
000F19 18 2A       2848                   JR	PLOT4A
000F1B             2849   ;
000F1B             2850   ;CIRCLE [FILL] x,y,r
000F1B             2851   ;
000F1B FE 03       2852   CIRCLE:         CP	TFILL
000F1D F5          2853                   PUSH	AF
000F1E 20 02       2854                   JR	NZ,CIRCL0
000F20 FD 23       2855                   INC	IY
000F22 CD 33 18    2856   CIRCL0:         CALL	EXPRI
000F25 D9          2857                   EXX
000F26 E5          2858                   PUSH	HL
000F27 CD F1 10    2859                   CALL	CEXPRI
000F2A D9          2860                   EXX
000F2B E5          2861                   PUSH	HL
000F2C CD F1 10    2862                   CALL	CEXPRI
000F2F D9          2863                   EXX
000F30 C1          2864                   POP	BC		;y
000F31 D1          2865                   POP	DE		;x
000F32 E5          2866                   PUSH	HL
000F33 69          2867                   LD	L,C
000F34 60          2868                   LD	H,B
000F35 0E 04       2869                   LD	C,4		; PLOT 4 = MOVE
000F37 CD C6 10    2870                   CALL	VDU25
000F3A D1          2871                   POP	DE		;r
000F3B 21 00 00    2872                   LD	HL,0
000F3E F1          2873                   POP	AF
000F3F 0E 91       2874                   LD	C,145		; PLOT 145 = outline circle
000F41 20 02       2875                   JR	NZ,PLOT4A
000F43 0E 99       2876                   LD	C,153		; PLOT 153 = filled circle
000F45 18 6C       2877   PLOT4A:         JR	PLOT4
000F47             2878   ;
000F47             2879   ;ELLIPSE [FILL] x,y,a,b
000F47             2880   ;
000F47 FE 03       2881   ELLIPS:         CP	TFILL
000F49 F5          2882                   PUSH	AF
000F4A 20 02       2883                   JR	NZ,ELLIP0
000F4C FD 23       2884                   INC	IY
000F4E CD 33 18    2885   ELLIP0:         CALL	EXPRI
000F51 D9          2886                   EXX
000F52 E5          2887                   PUSH	HL
000F53 CD E0 10    2888                   CALL	EXPR3
000F56 E3          2889                   EX	(SP),HL		;HL <- x, (SP) <- b
000F57 C5          2890                   PUSH	BC
000F58 EB          2891                   EX	DE,HL
000F59 0E 04       2892                   LD	C,4		; PLOT 4 = Move absolute
000F5B CD C6 10    2893                   CALL	VDU25
000F5E D1          2894                   POP	DE		;a
000F5F D5          2895                   PUSH	DE
000F60 21 00 00    2896                   LD	HL,0
000F63 4D          2897                   LD	C,L		; PLOT 0 - Move relative
000F64 CD C6 10    2898                   CALL	VDU25
000F67 D1          2899                   POP	DE		;a
000F68 AF          2900                   XOR	A
000F69 6F          2901                   LD	L,A
000F6A 67          2902                   LD	H,A
000F6B ED 52       2903                   SBC	HL,DE
000F6D EB          2904                   EX	DE,HL
000F6E E1          2905                   POP	HL		;b
000F6F F1          2906                   POP	AF
000F70 0E C1       2907                   LD	C,193		; PLOT 193 = outline ellipse
000F72 20 3F       2908                   JR	NZ,PLOT4
000F74 0E C9       2909                   LD	C,201		; PLOT 201 = filled ellipse
000F76 18 3B       2910                   JR	PLOT4
000F78             2911   ;
000F78             2912   ;MOVE [BY} x,y
000F78             2913   ;DRAW [BY] x,y
000F78             2914   ;PLOT [BY] [n,]x,y
000F78             2915   ;FILL [BY] x,y
000F78             2916   ;
000F78 0E 04       2917   MOVE:           LD	C,4
000F7A 18 23       2918                   JR	PLOT1
000F7C             2919   ;
000F7C 0E 05       2920   DRAW:           LD	C,5
000F7E 18 1F       2921                   JR	PLOT1
000F80             2922   ;
000F80 0E 85       2923   FILL:           LD	C,133
000F82 18 1B       2924                   JR	PLOT1
000F84             2925   ;
000F84 0E 45       2926   PLOT:           LD	C,69
000F86 FE 0F       2927                   CP	TBY
000F88 28 15       2928                   JR	Z,PLOT1
000F8A CD 33 18    2929                   CALL	EXPRI
000F8D D9          2930                   EXX
000F8E E5          2931                   PUSH	HL
000F8F CD F1 10    2932                   CALL	CEXPRI
000F92 D9          2933                   EXX
000F93 FD 7E 00    2934                   LD	A,(IY)
000F96 FE 2C       2935                   CP	','
000F98 28 12       2936                   JR	Z,PLOT3
000F9A D1          2937                   POP	DE
000F9B 0E 45       2938                   LD	C,69
000F9D 18 14       2939                   JR	PLOT4
000F9F             2940   ;
000F9F FE 0F       2941   PLOT1:          CP	TBY
000FA1 20 04       2942                   JR	NZ,PLOT2
000FA3 FD 23       2943                   INC	IY
000FA5 CB 91       2944                   RES	2,C		;Change absolute to relative
000FA7 C5          2945   PLOT2:          PUSH	BC
000FA8 CD 33 18    2946                   CALL	EXPRI
000FAB D9          2947                   EXX
000FAC E5          2948   PLOT3:          PUSH	HL
000FAD CD F1 10    2949                   CALL	CEXPRI
000FB0 D9          2950                   EXX
000FB1 D1          2951                   POP	DE
000FB2 C1          2952                   POP	BC
000FB3 CD C6 10    2953   PLOT4:          CALL	VDU25
000FB6 C3 99 24    2954                   JP	XEQ
000FB9             2955   ;
000FB9             2956   ;RECTANGLE [FILL] x,y,w[,h] [TO xnew,ynew]
000FB9             2957   ;
000FB9 FE 03       2958   RECTAN:         CP	TFILL
000FBB F5          2959                   PUSH	AF
000FBC 20 02       2960                   JR	NZ,RECT0
000FBE FD 23       2961                   INC	IY
000FC0 CD 33 18    2962   RECT0:          CALL	EXPRI
000FC3 D9          2963                   EXX
000FC4 E5          2964                   PUSH	HL
000FC5 CD F1 10    2965                   CALL	CEXPRI
000FC8 D9          2966                   EXX
000FC9 E5          2967                   PUSH	HL
000FCA CD F1 10    2968                   CALL	CEXPRI
000FCD D9          2969                   EXX
000FCE E5          2970                   PUSH	HL
000FCF FD 7E 00    2971                   LD	A,(IY)
000FD2 FE 2C       2972                   CP	','
000FD4 20 04       2973                   JR	NZ,RECT1
000FD6 CD F1 10    2974                   CALL	CEXPRI
000FD9 D9          2975                   EXX
000FDA C1          2976   RECT1:          POP	BC		;w
000FDB D1          2977                   POP	DE		;y
000FDC E3          2978                   EX	(SP),HL		;HL <- x, (SP) <- h
000FDD C5          2979                   PUSH	BC
000FDE EB          2980                   EX	DE,HL
000FDF 0E 04       2981                   LD	C,4
000FE1 CD C6 10    2982                   CALL	VDU25
000FE4 FD 7E 00    2983                   LD	A,(IY)
000FE7 FE B8       2984                   CP	TTO
000FE9 28 09       2985                   JR	Z,RECTTO
000FEB D1          2986                   POP	DE		;w
000FEC E1          2987                   POP	HL		;h
000FED F1          2988                   POP	AF
000FEE 20 22       2989                   JR	NZ,OUTLIN
000FF0 0E 61       2990                   LD	C,97
000FF2 18 BF       2991                   JR	PLOT4
000FF4             2992   ;
000FF4             2993   ;Block copy / move:
000FF4             2994   ;
000FF4 FD 23       2995   RECTTO:         INC	IY		; Bump over TO
000FF6 CD 33 18    2996                   CALL	EXPRI
000FF9 D9          2997                   EXX
000FFA E5          2998                   PUSH	HL
000FFB CD F1 10    2999                   CALL	CEXPRI
000FFE D9          3000                   EXX
000FFF C1          3001                   POP	BC		;newx
001000 D1          3002                   POP	DE		;w
001001 E3          3003                   EX	(SP),HL		;HL <- h, (SP) <- newy
001002 C5          3004                   PUSH	BC
001003 0E 00       3005                   LD	C,0
001005 CD C6 10    3006                   CALL	VDU25
001008 D1          3007                   POP	DE		;newx
001009 E1          3008                   POP	HL		;newy
00100A F1          3009                   POP	AF
00100B 0E BE       3010                   LD	C,190		; PLOT 190 - Block copy
00100D 20 01       3011                   JR	NZ,PLOT4B
00100F 0D          3012                   DEC	C		; PLOT 189 - Block move
001010 18 A1       3013   PLOT4B:         JR	PLOT4
001012             3014   ;
001012             3015   ;Outline rectangle:
001012             3016   ;
001012 0E 09       3017   OUTLIN:         LD	C,9		; PLOT 9 - draw relative
001014 E5          3018                   PUSH	HL
001015 21 00 00    3019                   LD	HL,0
001018 CD C6 10    3020                   CALL	VDU25		; side 1
00101B E1          3021                   POP	HL
00101C D5          3022                   PUSH	DE
00101D 11 00 00    3023                   LD	DE,0
001020 CD C6 10    3024                   CALL	VDU25		; side 2
001023 D1          3025                   POP	DE
001024 E5          3026                   PUSH	HL
001025 AF          3027                   XOR	A
001026 6F          3028                   LD	L,A
001027 67          3029                   LD	H,A
001028 ED 52       3030                   SBC	HL,DE
00102A EB          3031                   EX	DE,HL
00102B 6F          3032                   LD	L,A
00102C 67          3033                   LD	H,A
00102D CD C6 10    3034                   CALL 	VDU25		; side 3
001030 D1          3035                   POP	DE
001031 AF          3036                   XOR	A
001032 6F          3037                   LD	L,A
001033 67          3038                   LD	H,A
001034 ED 52       3039                   SBC	HL,DE
001036 5F          3040                   LD	E,A
001037 57          3041                   LD	D,A
001038 18 D6       3042                   JR	PLOT4B
00103A             3043   ;
00103A             3044   ;MOUSE x, y, b
00103A             3045   ;
00103A 3E 80       3046   MOUSE:          LD	A,128
00103C 21 09 00    3047                   LD	HL,9
00103F CD 89 08    3048                   CALL	OSBYTE
001042 E5          3049                   PUSH	HL
001043 3E 80       3050                   LD	A,128
001045 21 08 00    3051                   LD	HL,8
001048 CD 89 08    3052                   CALL	OSBYTE
00104B E5          3053                   PUSH	HL
00104C 3E 80       3054                   LD	A,128
00104E 21 07 00    3055                   LD	HL,7
001051 CD 89 08    3056                   CALL	OSBYTE
001054 E5          3057                   PUSH	HL
001055 CD D6 25    3058                   CALL	VAR_
001058 E1          3059                   POP	HL
001059 CD F7 10    3060                   CALL	STOREI
00105C CD A2 20    3061                   CALL	COMMA
00105F CD 0B 45    3062                   CALL	NXT
001062 CD D6 25    3063                   CALL	VAR_
001065 E1          3064                   POP	HL
001066 CD F7 10    3065                   CALL	STOREI
001069 CD A2 20    3066                   CALL	COMMA
00106C CD 0B 45    3067                   CALL	NXT
00106F CD D6 25    3068                   CALL	VAR_
001072 E1          3069                   POP	HL
001073 CD F7 10    3070                   CALL	STOREI
001076 C3 99 24    3071   XEQGO2:         JP	XEQ
001079             3072   ;
001079             3073   ;WAIT [n]
001079             3074   ;
001079 CD 36 35    3075   WAIT:           CALL	TERMQ
00107C 28 F8       3076                   JR	Z,XEQGO2
00107E CD 33 18    3077                   CALL	EXPRI
001081 D9          3078                   EXX
001082 44          3079                   LD	B,H
001083 4D          3080                   LD	C,L
001084 CD 29 0D    3081                   CALL	GETIME
001087 09          3082                   ADD	HL,BC
001088 01 00 00    3083                   LD	BC,0
00108B EB          3084                   EX	DE,HL
00108C ED 4A       3085                   ADC	HL,BC
00108E EB          3086                   EX	DE,HL
00108F CD 33 06    3087   WAIT1:          CALL	TRAP
001092 D5          3088                   PUSH	DE
001093 E5          3089                   PUSH	HL
001094 CD 29 0D    3090                   CALL	GETIME
001097 C1          3091                   POP	BC
001098 B7          3092                   OR	A
001099 ED 42       3093                   SBC	HL,BC
00109B 60          3094                   LD	H,B
00109C 69          3095                   LD	L,C
00109D EB          3096                   EX	DE,HL
00109E C1          3097                   POP	BC
00109F ED 42       3098                   SBC	HL,BC
0010A1 30 D3       3099                   JR	NC,XEQGO2
0010A3 EB          3100                   EX	DE,HL
0010A4 50          3101                   LD	D,B
0010A5 59          3102                   LD	E,C
0010A6 18 E7       3103                   JR	WAIT1
0010A8             3104   ;
0010A8             3105   ;OSCALL - Trap call to FFxx
0010A8             3106   ;
0010A8 E1          3107   OSCALL:         POP	HL		;DITCH RETURN ADDRESS
0010A9 21 BB 10    3108                   LD	HL,OSRET
0010AC E5          3109                   PUSH	HL		;NEW RETURN ADDRESS
0010AD DD 7E 04    3110                   LD	A,(IX+4)	;A%
0010B0 DD 5E 14    3111                   LD	E,(IX+20)	;E%
0010B3 DD 66 64    3112                   LD	H,(IX+100)	;Y%
0010B6 DD 6E 60    3113                   LD	L,(IX+96)	;X%
0010B9 FD E9       3114                   JP	(IY)
0010BB F5          3115   OSRET:          PUSH	AF
0010BC 7D          3116                   LD	A,L		;F  H  L  A
0010BD 6C          3117                   LD	L,H		;|  |  |  |
0010BE D9          3118                   EXX			;|  |  |  |
0010BF C1          3119                   POP	BC		;|  |  |  |
0010C0 67          3120                   LD	H,A		;|  |  |  |
0010C1 68          3121                   LD	L,B		;H  L  H' L'
0010C2 79          3122                   LD	A,C
0010C3 D9          3123                   EXX
0010C4 67          3124                   LD	H,A
0010C5 C9          3125                   RET
0010C6             3126   ;
0010C6 06 19       3127   VDU25:          LD	B,25
0010C8 78          3128   WRCH6:          LD	A,B
0010C9 CD B1 05    3129                   CALL	OSWRCH
0010CC 79          3130   WRCH5:          LD	A,C
0010CD CD B1 05    3131                   CALL	OSWRCH
0010D0 7B          3132   WRCH4:          LD	A,E
0010D1 CD B1 05    3133                   CALL	OSWRCH
0010D4 7A          3134   WRCH3:          LD	A,D
0010D5 CD B1 05    3135                   CALL	OSWRCH
0010D8 7D          3136   WRCH2:          LD	A,L
0010D9 CD B1 05    3137                   CALL	OSWRCH
0010DC 7C          3138                   LD	A,H
0010DD C3 B1 05    3139                   JP	OSWRCH
0010E0             3140   ;
0010E0 CD F1 10    3141   EXPR3:          CALL	CEXPRI
0010E3 D9          3142                   EXX
0010E4 E5          3143                   PUSH	HL
0010E5 CD F1 10    3144                   CALL	CEXPRI
0010E8 D9          3145                   EXX
0010E9 E5          3146                   PUSH	HL
0010EA CD F1 10    3147                   CALL	CEXPRI
0010ED D9          3148                   EXX
0010EE C1          3149                   POP	BC		;x2
0010EF D1          3150                   POP	DE		;y1
0010F0 C9          3151                   RET
0010F1             3152   ;
0010F1 CD A2 20    3153   CEXPRI:         CALL	COMMA
0010F4 C3 33 18    3154                   JP	EXPRI
0010F7             3155   ;
0010F7 CB 7F       3156   STOREI:         BIT	7,A
0010F9 20 0C       3157                   JR	NZ,EEK
0010FB CB 77       3158                   BIT	6,A
0010FD 20 08       3159                   JR	NZ,EEK
0010FF D9          3160                   EXX
001100 21 00 00    3161                   LD	HL,0
001103 4D          3162                   LD	C,L
001104 C3 F0 31    3163                   JP	STOREN
001107             3164   ;
001107 3E 32       3165   EEK:            LD	A,50
001109 CD 55 3F    3166                   CALL	EXTERR
00110C 13          3167                   DB	13H		;'Bad '
00110D 04          3168                   DB	04H		;'MOUSE'
00110E 20          3169                   DB	20H
00110F 15          3170                   DB	15H		;'variable'
001110 00          3171                   DB	0
001111             3172   ;
001111             3173   TINT:
001111             3174   TINTFN:
001111             3175   SYS:
001111 AF          3176                   XOR	A
001112 CD 55 3F    3177                   CALL	EXTERR
001115 53 6F 72 72 3178                   DB	"Sorry"
       79          
00111A 00          3179                   DB	0
00111B             3180   ;
00111B             3181   ;                END
00111B             3182   ; --- End acorn.asm ---
00111B             3183   
00111B             3184   ; --- Begin asmb.asm ---
00111B             3185   ;
00111B             3186   ;Automatically created from original source on 2024-12-15 15:29:12
00111B             3187   ;
00111B             3188                   .ASSUME ADL = 0
00111B             3189   ;	.ORG 0x0000
00111B             3190   ;                SEGMENT CODE
00111B             3191   ;
00111B             3192   ;BBC BASIC INTERPRETER - Z80 VERSION
00111B             3193   ;Z80 CPU ASSEMBLER MODULE - "ASMB"
00111B             3194   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
00111B             3195   ;
00111B             3196   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
00111B             3197   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
00111B             3198   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
00111B             3199   ;
00111B             3200   ;VERSION 5.0, 14-05-2024
00111B             3201   ;
00111B             3202   ;                XDEF	ASSEM
00111B             3203   ;
00111B             3204   ;                XREF	TABIT
00111B             3205   ;                XREF	CRLF
00111B             3206   ;                XREF	OUT
00111B             3207   ;                XREF	VAR_
00111B             3208   ;                XREF	ZERO
00111B             3209   ;                XREF	STOREN
00111B             3210   ;                XREF	ERROR_
00111B             3211   ;                XREF	EXPRI
00111B             3212   ;                XREF	EXPRS
00111B             3213   ;
00111B             3214   ;                XREF	LISTON
00111B             3215   ;                XREF	COUNT
00111B             3216   ;                XREF	ACCS
00111B             3217   ;                XREF	OC
00111B             3218   ;                XREF	PC
00111B             3219   ;
00111B             3220   ; CR             EQU	0DH	; in equs.inc
00111B             3221   TAND:           EQU	80H
00111B             3222   TOR:            EQU	84H
00111B             3223   ; TERROR:         EQU	85H	; in exec.asm
00111B             3224   TCALL:          EQU	0D6H
00111B             3225   TDEF:           EQU	0DDH
00111B             3226   ;
00111B             3227   ;ASSEMBLER:
00111B             3228   ;LANGUAGE-INDEPENDENT CONTROL SECTION:
00111B             3229   ; Outputs: A=delimiter, carry set if syntax error.
00111B             3230   ;
00111B CD A3 14    3231   ASSEM:          CALL	SKIP
00111E FD 23       3232                   INC	IY
001120 FE 3A       3233                   CP	':'
001122 28 F7       3234                   JR	Z,ASSEM
001124 FE 5D       3235                   CP	']'
001126 C8          3236                   RET	Z
001127 FE 0D       3237                   CP	CR
001129 C8          3238                   RET	Z
00112A FD 2B       3239                   DEC	IY
00112C DD 2A 40 54 3240                   LD	IX,(PC)		;PROGRAM COUNTER
001130 21 FE 54    3241                   LD	HL,LISTON
001133 CB 76       3242                   BIT	6,(HL)
001135 28 04       3243                   JR	Z,ASSEM0
001137 DD 2A 3C 54 3244                   LD	IX,(OC)		;ORIGIN of CODE
00113B DD E5       3245   ASSEM0:         PUSH	IX
00113D FD E5       3246                   PUSH	IY
00113F CD CF 11    3247                   CALL	ASMB
001142 C1          3248                   POP	BC
001143 D1          3249                   POP	DE
001144 D8          3250                   RET	C
001145 CD A3 14    3251                   CALL	SKIP
001148 37          3252                   SCF
001149 C0          3253                   RET	NZ
00114A FD 2B       3254                   DEC	IY
00114C FD 23       3255   ASSEM3:         INC	IY
00114E FD 7E 00    3256                   LD	A,(IY)
001151 CD C7 14    3257                   CALL	TERM0
001154 20 F6       3258                   JR	NZ,ASSEM3
001156 3A FE 54    3259                   LD	A,(LISTON)
001159 DD E5       3260                   PUSH	IX
00115B E1          3261                   POP	HL
00115C B7          3262                   OR	A
00115D ED 52       3263                   SBC	HL,DE
00115F EB          3264                   EX	DE,HL		;DE= NO. OF BYTES
001160 E5          3265                   PUSH	HL
001161 2A 40 54    3266                   LD	HL,(PC)
001164 E5          3267                   PUSH	HL
001165 19          3268                   ADD	HL,DE
001166 22 40 54    3269                   LD	(PC),HL		;UPDATE PC
001169 CB 77       3270                   BIT	6,A
00116B 28 07       3271                   JR	Z,ASSEM5
00116D 2A 3C 54    3272                   LD	HL,(OC)
001170 19          3273                   ADD	HL,DE
001171 22 3C 54    3274                   LD	(OC),HL		;UPDATE OC
001174 E1          3275   ASSEM5:         POP	HL		;OLD PC
001175 DD E1       3276                   POP	IX		;CODE HERE
001177 CB 67       3277                   BIT	4,A
001179 28 A0       3278                   JR	Z,ASSEM
00117B 7C          3279                   LD	A,H
00117C CD BB 11    3280                   CALL	HEX
00117F 7D          3281                   LD	A,L
001180 CD B4 11    3282                   CALL	HEXSP
001183 AF          3283                   XOR	A
001184 BB          3284                   CP	E
001185 28 15       3285                   JR	Z,ASSEM2
001187 3A FB 54    3286   ASSEM1:         LD	A,(COUNT)
00118A FE 11       3287                   CP	17
00118C 3E 05       3288                   LD	A,5
00118E D4 7D 35    3289                   CALL	NC,TABIT	;NEXT LINE
001191 DD 7E 00    3290                   LD	A,(IX)
001194 CD B4 11    3291                   CALL	HEXSP
001197 DD 23       3292                   INC	IX
001199 1D          3293                   DEC	E
00119A 20 EB       3294                   JR	NZ,ASSEM1
00119C 3E 12       3295   ASSEM2:         LD	A,18
00119E CD 7D 35    3296                   CALL	TABIT
0011A1 FD E5       3297                   PUSH	IY
0011A3 E1          3298                   POP	HL
0011A4 ED 42       3299                   SBC	HL,BC
0011A6 0A          3300   ASSEM4:         LD	A,(BC)
0011A7 CD 1B 41    3301                   CALL	OUT
0011AA 03          3302                   INC	BC
0011AB 2D          3303                   DEC	L
0011AC 20 F8       3304                   JR	NZ,ASSEM4
0011AE CD FB 40    3305                   CALL	CRLF
0011B1 C3 1B 11    3306                   JP	ASSEM
0011B4             3307   ;
0011B4 CD BB 11    3308   HEXSP:          CALL	HEX
0011B7 3E 20       3309                   LD	A,' '
0011B9 18 11       3310                   JR	OUTCH1
0011BB F5          3311   HEX:            PUSH	AF
0011BC 0F          3312                   RRCA
0011BD 0F          3313                   RRCA
0011BE 0F          3314                   RRCA
0011BF 0F          3315                   RRCA
0011C0 CD C4 11    3316                   CALL	HEXOUT
0011C3 F1          3317                   POP	AF
0011C4 E6 0F       3318   HEXOUT:         AND	0FH
0011C6 C6 90       3319                   ADD	A,90H
0011C8 27          3320                   DAA
0011C9 CE 40       3321                   ADC	A,40H
0011CB 27          3322                   DAA
0011CC C3 1B 41    3323   OUTCH1:         JP	OUT
0011CF             3324   ;
0011CF             3325   ;PROCESSOR-SPECIFIC TRANSLATION SECTION:
0011CF             3326   ;
0011CF             3327   ;REGISTER USAGE: B - TYPE OF MOST RECENT OPERAND
0011CF             3328   ;                C - OPCODE BEING BUILT
0011CF             3329   ;                D - (IX) OR (IY) FLAG
0011CF             3330   ;                E - OFFSET FROM IX OR IY
0011CF             3331   ;               HL - NUMERIC OPERAND VALUE
0011CF             3332   ;               IX - CODE DESTINATION
0011CF             3333   ;               IY - SOURCE TEXT POINTER
0011CF             3334   ;   Inputs: A = initial character
0011CF             3335   ;  Outputs: Carry set if syntax error.
0011CF             3336   ;
0011CF FE 2E       3337   ASMB:           CP	'.'
0011D1 20 28       3338                   JR	NZ,ASMB1
0011D3 FD 23       3339                   INC	IY
0011D5 DD E5       3340                   PUSH	IX
0011D7 CD D6 25    3341                   CALL	VAR_
0011DA F5          3342                   PUSH	AF
0011DB CD F8 1F    3343                   CALL	ZERO
0011DE D9          3344                   EXX
0011DF 2A 40 54    3345                   LD	HL,(PC)
0011E2 D9          3346                   EXX
0011E3 3A FE 54    3347                   LD	A,(LISTON)
0011E6 E6 20       3348                   AND	20H
0011E8 20 0B       3349                   JR	NZ,ASMB0
0011EA DD 7E 00    3350                   LD	A,(IX)
0011ED DD B6 01    3351                   OR	(IX+1)
0011F0 3E 03       3352                   LD	A,3
0011F2 C2 44 3F    3353                   JP	NZ,ERROR_	;Multiple label
0011F5 F1          3354   ASMB0:          POP	AF
0011F6 CD F0 31    3355                   CALL	STOREN
0011F9 DD E1       3356                   POP	IX
0011FB CD A3 14    3357   ASMB1:          CALL	SKIP
0011FE C8          3358                   RET	Z
0011FF FE D6       3359                   CP	TCALL
001201 0E C4       3360                   LD	C,0C4H
001203 FD 23       3361                   INC	IY
001205 CA F2 12    3362                   JP	Z,GRPC
001208 FD 2B       3363                   DEC	IY
00120A 21 CD 14    3364                   LD	HL,OPCODS
00120D CD 5A 14    3365                   CALL	FIND
001210 D8          3366                   RET	C
001211 48          3367                   LD	C,B	;ROOT OPCODE
001212 16 00       3368                   LD	D,0	;CLEAR IX/IY FLAG
001214             3369   ;
001214             3370   ;GROUP 0 - TRIVIAL CASES REQUIRING NO COMPUTATION
001214             3371   ;GROUP 1 - AS GROUP 0 BUT WITH "ED" PREFIX
001214             3372   ;
001214 D6 27       3373                   SUB	39
001216 30 07       3374                   JR	NC,GROUP2
001218 FE E8       3375                   CP	15-39
00121A D4 C0 13    3376                   CALL	NC,ED
00121D 18 68       3377                   JR	BYTE0
00121F             3378   ;
00121F             3379   ;GROUP 2 - BIT, RES, SET
00121F             3380   ;GROUP 3 - RLC, RRC, RL, RR, SLA, SRA, SRL
00121F             3381   ;
00121F D6 0A       3382   GROUP2:         SUB	10
001221 30 0F       3383                   JR	NC,GROUP4
001223 FE F9       3384                   CP	3-10
001225 DC 4A 14    3385                   CALL	C,BIT
001228 D8          3386                   RET	C
001229 CD 1F 14    3387                   CALL	REGLO
00122C D8          3388                   RET	C
00122D CD C4 13    3389                   CALL	CB
001230 18 55       3390                   JR	BYTE0
001232             3391   ;
001232             3392   ;GROUP 4 - PUSH, POP, EX (SP)
001232             3393   ;
001232 D6 03       3394   GROUP4:         SUB	3
001234 30 06       3395                   JR	NC,GROUP5
001236 CD 3E 14    3396   G4:             CALL	PAIRasm
001239 D8          3397                   RET	C
00123A 18 4B       3398                   JR	BYTE0
00123C             3399   ;
00123C             3400   ;GROUP 5 - SUB, AND, XOR, OR, CP
00123C             3401   ;GROUP 6 - ADD, ADC, SBC
00123C             3402   ;
00123C D6 0A       3403   GROUP5:         SUB	8+2
00123E 30 32       3404                   JR	NC,GROUP7
001240 FE FD       3405                   CP	5-8
001242 06 07       3406                   LD	B,7
001244 D4 D2 13    3407                   CALL	NC,OPND
001247 78          3408                   LD	A,B
001248 FE 07       3409                   CP	7
00124A 20 10       3410                   JR	NZ,G6HL
00124C CD 1F 14    3411   G6:             CALL	REGLO
00124F 79          3412                   LD	A,C
001250 30 28       3413                   JR	NC,BIND1
001252 EE 46       3414                   XOR	46H
001254 CD C6 13    3415                   CALL	BIND
001257 CD 02 14    3416   DB:             CALL	NUMBER
00125A 18 78       3417                   JR	VAL8
00125C             3418   ;
00125C E6 3F       3419   G6HL:           AND	3FH
00125E FE 0C       3420                   CP	12
001260 37          3421                   SCF
001261 C0          3422                   RET	NZ
001262 79          3423                   LD	A,C
001263 FE 80       3424                   CP	80H
001265 0E 09       3425                   LD	C,9
001267 28 CD       3426                   JR	Z,G4
001269 EE 1C       3427                   XOR	1CH
00126B 0F          3428                   RRCA
00126C 4F          3429                   LD	C,A
00126D CD C0 13    3430                   CALL	ED
001270 18 C4       3431                   JR	G4
001272             3432   ;
001272             3433   ;GROUP 7 - INC, DEC
001272             3434   ;
001272 D6 02       3435   GROUP7:         SUB	2
001274 30 14       3436                   JR	NC,GROUP8
001276 CD 25 14    3437                   CALL	REGHI
001279 79          3438                   LD	A,C
00127A D2 C6 13    3439   BIND1:          JP	NC,BIND
00127D EE 64       3440                   XOR	64H
00127F 07          3441                   RLCA
001280 07          3442                   RLCA
001281 07          3443                   RLCA
001282 4F          3444                   LD	C,A
001283 CD 42 14    3445                   CALL	PAIR1asm
001286 D8          3446                   RET	C
001287 79          3447   BYTE0:          LD	A,C
001288 18 7F       3448                   JR	BYTE2
00128A             3449   ;
00128A             3450   ;GROUP 8 - IN
00128A             3451   ;GROUP 9 - OUT
00128A             3452   ;
00128A D6 02       3453   GROUP8:         SUB	2
00128C 30 21       3454                   JR	NC,GROUPA
00128E FE FF       3455                   CP	1-2
001290 CC B5 13    3456                   CALL	Z,CORN
001293 08          3457                   EX	AF,AF'
001294 CD 25 14    3458                   CALL	REGHI
001297 D8          3459                   RET	C
001298 08          3460                   EX	AF,AF'
001299 DC B5 13    3461                   CALL	C,CORN
00129C 24          3462                   INC	H
00129D 28 E8       3463                   JR	Z,BYTE0
00129F 78          3464                   LD	A,B
0012A0 FE 07       3465                   CP	7
0012A2 37          3466                   SCF
0012A3 C0          3467                   RET	NZ
0012A4 79          3468                   LD	A,C
0012A5 EE 03       3469                   XOR	3
0012A7 07          3470                   RLCA
0012A8 07          3471                   RLCA
0012A9 07          3472                   RLCA
0012AA CD F2 13    3473                   CALL	BYTE
0012AD 18 25       3474                   JR	VAL8
0012AF             3475   ;
0012AF             3476   ;GROUP 10 - JR, DJNZ
0012AF             3477   ;
0012AF D6 02       3478   GROUPA:         SUB	2
0012B1 30 24       3479                   JR	NC,GROUPB
0012B3 FE FF       3480                   CP	1-2
0012B5 C4 2B 14    3481                   CALL	NZ,COND_
0012B8 79          3482                   LD	A,C
0012B9 30 02       3483                   JR	NC,GRPA
0012BB 3E 18       3484                   LD	A,18H
0012BD CD F2 13    3485   GRPA:           CALL	BYTE
0012C0 CD 02 14    3486                   CALL	NUMBER
0012C3 ED 5B 40 54 3487                   LD	DE,(PC)
0012C7 13          3488                   INC	DE
0012C8 37          3489                   SCF
0012C9 ED 52       3490                   SBC	HL,DE
0012CB 7D          3491                   LD	A,L
0012CC 17          3492                   RLA
0012CD 9F          3493                   SBC	A,A
0012CE BC          3494                   CP	H
0012CF 3E 01       3495   TOOFAR:         LD	A,1
0012D1 C2 44 3F    3496                   JP	NZ,ERROR_	;"Out of range"
0012D4 7D          3497   VAL8:           LD	A,L
0012D5 18 32       3498                   JR	BYTE2
0012D7             3499   ;
0012D7             3500   ;GROUP 11 - JP
0012D7             3501   ;
0012D7 47          3502   GROUPB:         LD	B,A
0012D8 20 16       3503                   JR	NZ,GROUPC
0012DA CD 2B 14    3504                   CALL	COND_
0012DD 79          3505                   LD	A,C
0012DE 30 0B       3506                   JR	NC,GRPB
0012E0 78          3507                   LD	A,B
0012E1 E6 3F       3508                   AND	3FH
0012E3 FE 06       3509                   CP	6
0012E5 3E E9       3510                   LD	A,0E9H
0012E7 28 20       3511                   JR	Z,BYTE2
0012E9 3E C3       3512                   LD	A,0C3H
0012EB CD F2 13    3513   GRPB:           CALL	BYTE
0012EE 18 05       3514                   JR	ADDR_
0012F0             3515   ;
0012F0             3516   ;GROUP 12 - CALL
0012F0             3517   ;
0012F0 10 0C       3518   GROUPC:         DJNZ	GROUPD
0012F2 CD 0D 13    3519   GRPC:           CALL	GRPE
0012F5 CD 02 14    3520   ADDR_:          CALL	NUMBER
0012F8 CD D4 12    3521   VAL16:          CALL	VAL8
0012FB 7C          3522                   LD	A,H
0012FC 18 0B       3523                   JR	BYTE2
0012FE             3524   ;
0012FE             3525   ;GROUP 13 - RST
0012FE             3526   ;
0012FE 10 0B       3527   GROUPD:         DJNZ	GROUPE
001300 CD 02 14    3528                   CALL	NUMBER
001303 A1          3529                   AND	C
001304 B4          3530                   OR	H
001305 20 C8       3531                   JR	NZ,TOOFAR
001307 7D          3532                   LD	A,L
001308 B1          3533                   OR	C
001309 18 78       3534   BYTE2:          JR	BYTE1
00130B             3535   ;
00130B             3536   ;GROUP 14 - RET
00130B             3537   ;
00130B 10 0A       3538   GROUPE:         DJNZ	GROUPF
00130D CD 2B 14    3539   GRPE:           CALL	COND_
001310 79          3540                   LD	A,C
001311 30 70       3541                   JR	NC,BYTE1
001313 F6 09       3542                   OR	9
001315 18 6C       3543                   JR	BYTE1
001317             3544   ;
001317             3545   ;GROUP 15 - LD
001317             3546   ;
001317 10 6C       3547   GROUPF:         DJNZ	MISC
001319 CD 57 14    3548                   CALL	LDOP
00131C 30 5F       3549                   JR	NC,LDA
00131E CD 25 14    3550                   CALL	REGHI
001321 08          3551                   EX	AF,AF'
001322 CD A3 14    3552                   CALL	SKIP
001325 FE 28       3553                   CP	'('
001327 28 1D       3554                   JR	Z,LDIN
001329 08          3555                   EX	AF,AF'
00132A D2 4C 12    3556                   JP	NC,G6
00132D 0E 01       3557                   LD	C,1
00132F CD 42 14    3558                   CALL	PAIR1asm
001332 D8          3559                   RET	C
001333 3E 0E       3560                   LD	A,14
001335 B8          3561                   CP	B
001336 47          3562                   LD	B,A
001337 CC 3E 14    3563                   CALL	Z,PAIRasm
00133A 78          3564                   LD	A,B
00133B E6 3F       3565                   AND	3FH
00133D FE 0C       3566                   CP	12
00133F 79          3567                   LD	A,C
001340 20 A9       3568                   JR	NZ,GRPB
001342 3E F9       3569                   LD	A,0F9H
001344 18 3D       3570                   JR	BYTE1
001346             3571   ;
001346 08          3572   LDIN:           EX	AF,AF'
001347 C5          3573                   PUSH	BC
001348 D4 1F 14    3574                   CALL	NC,REGLO
00134B 79          3575                   LD	A,C
00134C C1          3576                   POP	BC
00134D 30 77       3577                   JR	NC,BIND
00134F 0E 0A       3578                   LD	C,0AH
001351 CD 42 14    3579                   CALL	PAIR1asm
001354 CD 9C 13    3580                   CALL	LD16
001357 30 92       3581                   JR	NC,GRPB
001359 CD 02 14    3582                   CALL	NUMBER
00135C 0E 02       3583                   LD	C,2
00135E CD 3E 14    3584                   CALL	PAIRasm
001361 CD 9C 13    3585                   CALL	LD16
001364 D8          3586                   RET	C
001365 CD F2 13    3587                   CALL	BYTE
001368 18 8E       3588                   JR	VAL16
00136A             3589   ;
00136A             3590   ;OPT - SET OPTION
00136A             3591   ;
00136A 05          3592   OPT:            DEC	B
00136B CA 57 12    3593                   JP	Z,DB
00136E 10 85       3594                   DJNZ	ADDR_
001370 CD 02 14    3595                   CALL	NUMBER
001373 21 FE 54    3596                   LD	HL,LISTON
001376 4F          3597                   LD	C,A
001377 ED 6F       3598                   RLD
001379 79          3599                   LD	A,C
00137A ED 67       3600                   RRD
00137C C9          3601                   RET
00137D             3602   ;
00137D FE 04       3603   LDA:            CP	4
00137F DC C0 13    3604                   CALL	C,ED
001382 78          3605                   LD	A,B
001383 18 6D       3606   BYTE1:          JR	BYTE
001385             3607   ;
001385             3608   ;MISC - DEFB, DEFW, DEFM
001385             3609   ;
001385 10 E3       3610   MISC:           DJNZ	OPT
001387 DD E5       3611                   PUSH	IX
001389 CD 3C 18    3612                   CALL	EXPRS
00138C DD E1       3613                   POP	IX
00138E 21 00 52    3614                   LD	HL,ACCS
001391 AF          3615   DEFM1:          XOR	A
001392 BB          3616                   CP	E
001393 C8          3617                   RET	Z
001394 7E          3618                   LD	A,(HL)
001395 23          3619                   INC	HL
001396 CD F2 13    3620                   CALL	BYTE
001399 1D          3621                   DEC	E
00139A 18 F5       3622                   JR	DEFM1
00139C             3623   ;
00139C             3624   ;SUBROUTINES:
00139C             3625   ;
00139C 78          3626   LD16:           LD	A,B
00139D 38 0E       3627                   JR	C,LD8
00139F 78          3628                   LD	A,B
0013A0 E6 3F       3629                   AND	3FH
0013A2 FE 0C       3630                   CP	12
0013A4 79          3631                   LD	A,C
0013A5 C8          3632                   RET	Z
0013A6 CD C0 13    3633                   CALL	ED
0013A9 79          3634                   LD	A,C
0013AA F6 43       3635                   OR	43H
0013AC C9          3636                   RET
0013AD             3637   ;
0013AD FE 07       3638   LD8:            CP	7
0013AF 37          3639                   SCF
0013B0 C0          3640                   RET	NZ
0013B1 79          3641                   LD	A,C
0013B2 F6 30       3642                   OR	30H
0013B4 C9          3643                   RET
0013B5             3644   ;
0013B5 C5          3645   CORN:           PUSH	BC
0013B6 CD D2 13    3646                   CALL	OPND
0013B9 CB 68       3647                   BIT	5,B
0013BB C1          3648                   POP	BC
0013BC 28 44       3649                   JR	Z,NUMBER
0013BE 26 FF       3650                   LD	H,-1
0013C0 3E ED       3651   ED:             LD	A,0EDH
0013C2 18 2E       3652                   JR	BYTE
0013C4             3653   ;
0013C4 3E CB       3654   CB:             LD	A,0CBH
0013C6 FE 76       3655   BIND:           CP	76H
0013C8 37          3656                   SCF
0013C9 C8          3657                   RET	Z		;REJECT LD (HL),(HL)
0013CA CD F2 13    3658                   CALL	BYTE
0013CD 14          3659                   INC	D
0013CE F0          3660                   RET	P
0013CF 7B          3661                   LD	A,E
0013D0 18 20       3662                   JR	BYTE
0013D2             3663   ;
0013D2 E5          3664   OPND:           PUSH	HL
0013D3 21 14 16    3665                   LD	HL,OPRNDS
0013D6 CD 5A 14    3666                   CALL	FIND
0013D9 E1          3667                   POP	HL
0013DA D8          3668                   RET	C
0013DB CB 78       3669                   BIT	7,B
0013DD C8          3670                   RET	Z
0013DE CB 58       3671                   BIT	3,B
0013E0 E5          3672                   PUSH	HL
0013E1 CC F9 13    3673                   CALL	Z,OFFSETasm
0013E4 5D          3674                   LD	E,L
0013E5 E1          3675                   POP	HL
0013E6 3E DD       3676                   LD	A,0DDH
0013E8 CB 70       3677                   BIT	6,B
0013EA 28 02       3678                   JR	Z,OP1
0013EC 3E FD       3679                   LD	A,0FDH
0013EE B7          3680   OP1:            OR	A
0013EF 14          3681                   INC	D
0013F0 57          3682                   LD	D,A
0013F1 F8          3683                   RET	M
0013F2 DD 77 00    3684   BYTE:           LD	(IX),A
0013F5 DD 23       3685                   INC	IX
0013F7 B7          3686                   OR	A
0013F8 C9          3687                   RET
0013F9             3688   ;
0013F9 FD 7E 00    3689   OFFSETasm:         LD	A,(IY)
0013FC FE 29       3690                   CP	')'
0013FE 21 00 00    3691                   LD	HL,0
001401 C8          3692                   RET	Z
001402 CD A3 14    3693   NUMBER:         CALL	SKIP
001405 C5          3694                   PUSH	BC
001406 D5          3695                   PUSH	DE
001407 DD E5       3696                   PUSH	IX
001409 CD 33 18    3697                   CALL	EXPRI
00140C DD E1       3698                   POP	IX
00140E D9          3699                   EXX
00140F D1          3700                   POP	DE
001410 C1          3701                   POP	BC
001411 7D          3702                   LD	A,L
001412 B7          3703                   OR	A
001413 C9          3704                   RET
001414             3705   ;
001414 CD D2 13    3706   REG:            CALL	OPND
001417 D8          3707                   RET	C
001418 78          3708                   LD	A,B
001419 E6 3F       3709                   AND	3FH
00141B FE 08       3710                   CP	8
00141D 3F          3711                   CCF
00141E C9          3712                   RET
00141F             3713   ;
00141F CD 14 14    3714   REGLO:          CALL	REG
001422 D8          3715                   RET	C
001423 18 2F       3716                   JR	ORC
001425             3717   ;
001425 CD 14 14    3718   REGHI:          CALL	REG
001428 D8          3719                   RET	C
001429 18 26       3720                   JR	SHL3
00142B             3721   ;
00142B CD D2 13    3722   COND_:          CALL	OPND
00142E D8          3723                   RET	C
00142F 78          3724                   LD	A,B
001430 E6 1F       3725                   AND	1FH
001432 D6 10       3726                   SUB	16
001434 30 1B       3727                   JR	NC,SHL3
001436 FE F1       3728                   CP	-15
001438 37          3729                   SCF
001439 C0          3730                   RET	NZ
00143A 3E 03       3731                   LD	A,3
00143C 18 13       3732                   JR	SHL3
00143E             3733   ;
00143E CD D2 13    3734   PAIRasm:           CALL	OPND
001441 D8          3735                   RET	C
001442 78          3736   PAIR1asm:          LD	A,B
001443 E6 0F       3737                   AND	0FH
001445 D6 08       3738                   SUB	8
001447 D8          3739                   RET	C
001448 18 07       3740                   JR	SHL3
00144A             3741   ;
00144A CD 02 14    3742   BIT:            CALL	NUMBER
00144D FE 08       3743                   CP	8
00144F 3F          3744                   CCF
001450 D8          3745                   RET	C
001451 07          3746   SHL3:           RLCA
001452 07          3747                   RLCA
001453 07          3748                   RLCA
001454 B1          3749   ORC:            OR	C
001455 4F          3750                   LD	C,A
001456 C9          3751                   RET
001457             3752   ;
001457 21 59 16    3753   LDOP:           LD	HL,LDOPS
00145A CD A3 14    3754   FIND:           CALL	SKIP
00145D 06 00       3755   EXIT:           LD	B,0
00145F 37          3756                   SCF
001460 C8          3757                   RET	Z
001461 FE DD       3758                   CP	TDEF
001463 28 04       3759                   JR	Z,FIND0
001465 FE 85       3760                   CP	TOR+1
001467 3F          3761                   CCF
001468 D8          3762                   RET	C
001469 7E          3763   FIND0:          LD	A,(HL)
00146A B7          3764                   OR	A
00146B 28 F0       3765                   JR	Z,EXIT
00146D FD AE 00    3766                   XOR	(IY)
001470 E6 5F       3767                   AND	01011111B
001472 28 09       3768                   JR	Z,FIND2
001474 CB 7E       3769   FIND1:          BIT	7,(HL)
001476 23          3770                   INC	HL
001477 28 FB       3771                   JR	Z,FIND1
001479 23          3772                   INC	HL
00147A 04          3773                   INC	B
00147B 18 EC       3774                   JR	FIND0
00147D             3775   ;
00147D FD E5       3776   FIND2:          PUSH	IY
00147F CB 7E       3777   FIND3:          BIT	7,(HL)
001481 FD 23       3778                   INC	IY
001483 23          3779                   INC	HL
001484 20 10       3780                   JR	NZ,FIND5
001486 BE          3781                   CP	(HL)
001487 CC A2 14    3782                   CALL	Z,SKIP0
00148A 7E          3783                   LD	A,(HL)
00148B FD AE 00    3784                   XOR	(IY)
00148E E6 5F       3785                   AND	01011111B
001490 28 ED       3786                   JR	Z,FIND3
001492 FD E1       3787   FIND4:          POP	IY
001494 18 DE       3788                   JR	FIND1
001496             3789   ;
001496 CD B5 14    3790   FIND5:          CALL	DELIM
001499 C4 AF 14    3791                   CALL	NZ,SIGN
00149C 20 F4       3792                   JR	NZ,FIND4
00149E 78          3793   FIND6:          LD	A,B
00149F 46          3794                   LD	B,(HL)
0014A0 E1          3795                   POP	HL
0014A1 C9          3796                   RET
0014A2             3797   ;
0014A2 23          3798   SKIP0:          INC	HL
0014A3 CD B5 14    3799   SKIP:           CALL	DELIM
0014A6 C0          3800                   RET	NZ
0014A7 CD C1 14    3801                   CALL	TERM
0014AA C8          3802                   RET	Z
0014AB FD 23       3803                   INC	IY
0014AD 18 F4       3804                   JR	SKIP
0014AF             3805   ;
0014AF FE 2B       3806   SIGN:           CP	'+'
0014B1 C8          3807                   RET	Z
0014B2 FE 2D       3808                   CP	'-'
0014B4 C9          3809                   RET
0014B5             3810   ;
0014B5 FD 7E 00    3811   DELIM:          LD	A,(IY)		;ASSEMBLER DELIMITER
0014B8 FE 20       3812                   CP	' '
0014BA C8          3813                   RET	Z
0014BB FE 2C       3814                   CP	','
0014BD C8          3815                   RET	Z
0014BE FE 29       3816                   CP	')'
0014C0 C8          3817                   RET	Z
0014C1 FE 3B       3818   TERM:           CP	';'		;ASSEMBLER TERMINATOR
0014C3 C8          3819                   RET	Z
0014C4 FE 5C       3820                   CP	'\'
0014C6 C8          3821                   RET	Z
0014C7 FE 3A       3822   TERM0:          CP	':'		;ASSEMBLER SEPARATOR
0014C9 D0          3823                   RET	NC
0014CA FE 0D       3824                   CP	CR
0014CC C9          3825                   RET
0014CD             3826   ;
0014CD 4E 4F       3827   OPCODS:         DB	"NO"
0014CF D0          3828                   DB	'P'+80H
0014D0 00          3829                   DB	0
0014D1 52 4C 43    3830                   DB	"RLC"
0014D4 C1          3831                   DB	'A'+80H
0014D5 07          3832                   DB	7
0014D6 45 58       3833                   DB	"EX"
0014D8 00          3834                   DB	0
0014D9 41 46       3835                   DB	"AF"
0014DB 00          3836                   DB	0
0014DC 41 46       3837                   DB	"AF"
0014DE 27          3838                   DB	"'"+80H
0014DF 08          3839                   DB	8
0014E0 52 52 43    3840                   DB	"RRC"
0014E3 C1          3841                   DB	'A'+80H
0014E4 0F          3842                   DB	0FH
0014E5 52 4C       3843                   DB	"RL"
0014E7 C1          3844                   DB	'A'+80H
0014E8 17          3845                   DB	17H
0014E9 52 52       3846                   DB	"RR"
0014EB C1          3847                   DB	'A'+80H
0014EC 1F          3848                   DB	1FH
0014ED 44 41       3849                   DB	"DA"
0014EF C1          3850                   DB	'A'+80H
0014F0 27          3851                   DB	27H
0014F1 43 50       3852                   DB	"CP"
0014F3 CC          3853                   DB	'L'+80H
0014F4 2F          3854                   DB	2FH
0014F5 53 43       3855                   DB	"SC"
0014F7 C6          3856                   DB	'F'+80H
0014F8 37          3857                   DB	37H
0014F9 43 43       3858                   DB	"CC"
0014FB C6          3859                   DB	'F'+80H
0014FC 3F          3860                   DB	3FH
0014FD 48 41 4C    3861                   DB	"HAL"
001500 D4          3862                   DB	'T'+80H
001501 76          3863                   DB	76H
001502 45 58       3864                   DB	"EX"
001504 D8          3865                   DB	'X'+80H
001505 D9          3866                   DB	0D9H
001506 45 58       3867                   DB	"EX"
001508 00          3868                   DB	0
001509 44 45       3869                   DB	"DE"
00150B 00          3870                   DB	0
00150C 48          3871                   DB	'H'
00150D CC          3872                   DB	'L'+80H
00150E EB          3873                   DB	0EBH
00150F 44          3874                   DB	'D'
001510 C9          3875                   DB	'I'+80H
001511 F3          3876                   DB	0F3H
001512 45          3877                   DB	'E'
001513 C9          3878                   DB	'I'+80H
001514 FB          3879                   DB	0FBH
001515             3880   ;
001515 4E 45       3881                   DB	"NE"
001517 C7          3882                   DB	'G'+80H
001518 44          3883                   DB	44H
001519 49 4D       3884                   DB	"IM"
00151B 00          3885                   DB	0
00151C B0          3886                   DB	'0'+80H
00151D 46          3887                   DB	46H
00151E 52 45 54    3888                   DB	"RET"
001521 CE          3889                   DB	'N'+80H
001522 45          3890                   DB	45H
001523 52 45 54    3891                   DB	"RET"
001526 C9          3892                   DB	'I'+80H
001527 4D          3893                   DB	4DH
001528 49 4D       3894                   DB	"IM"
00152A 00          3895                   DB	0
00152B B1          3896                   DB	'1'+80H
00152C 56          3897                   DB	56H
00152D 49 4D       3898                   DB	"IM"
00152F 00          3899                   DB	0
001530 B2          3900                   DB	'2'+80H
001531 5E          3901                   DB	5EH
001532 52 52       3902                   DB	"RR"
001534 C4          3903                   DB	'D'+80H
001535 67          3904                   DB	67H
001536 52 4C       3905                   DB	"RL"
001538 C4          3906                   DB	'D'+80H
001539 6F          3907                   DB	6FH
00153A 4C 44       3908                   DB	"LD"
00153C C9          3909                   DB	'I'+80H
00153D A0          3910                   DB	0A0H
00153E 43 50       3911                   DB	"CP"
001540 C9          3912                   DB	'I'+80H
001541 A1          3913                   DB	0A1H
001542 49 4E       3914                   DB	"IN"
001544 C9          3915                   DB	'I'+80H
001545 A2          3916                   DB	0A2H
001546 4F 55 54    3917                   DB	"OUT"
001549 C9          3918                   DB	'I'+80H
00154A A3          3919                   DB	0A3H
00154B 4C 44       3920                   DB	"LD"
00154D C4          3921                   DB	'D'+80H
00154E A8          3922                   DB	0A8H
00154F 43 50       3923                   DB	"CP"
001551 C4          3924                   DB	'D'+80H
001552 A9          3925                   DB	0A9H
001553 49 4E       3926                   DB	"IN"
001555 C4          3927                   DB	'D'+80H
001556 AA          3928                   DB	0AAH
001557 4F 55 54    3929                   DB	"OUT"
00155A C4          3930                   DB	'D'+80H
00155B AB          3931                   DB	0ABH
00155C 4C 44 49    3932                   DB	"LDI"
00155F D2          3933                   DB	'R'+80H
001560 B0          3934                   DB	0B0H
001561 43 50 49    3935                   DB	"CPI"
001564 D2          3936                   DB	'R'+80H
001565 B1          3937                   DB	0B1H
001566 49 4E 49    3938                   DB	"INI"
001569 D2          3939                   DB	'R'+80H
00156A B2          3940                   DB	0B2H
00156B 4F 54 49    3941                   DB	"OTI"
00156E D2          3942                   DB	'R'+80H
00156F B3          3943                   DB	0B3H
001570 4C 44 44    3944                   DB	"LDD"
001573 D2          3945                   DB	'R'+80H
001574 B8          3946                   DB	0B8H
001575 43 50 44    3947                   DB	"CPD"
001578 D2          3948                   DB	'R'+80H
001579 B9          3949                   DB	0B9H
00157A 49 4E 44    3950                   DB	"IND"
00157D D2          3951                   DB	'R'+80H
00157E BA          3952                   DB	0BAH
00157F 4F 54 44    3953                   DB	"OTD"
001582 D2          3954                   DB	'R'+80H
001583 BB          3955                   DB	0BBH
001584             3956   ;
001584 42 49       3957                   DB	"BI"
001586 D4          3958                   DB	'T'+80H
001587 40          3959                   DB	40H
001588 52 45       3960                   DB	"RE"
00158A D3          3961                   DB	'S'+80H
00158B 80          3962                   DB	80H
00158C 53 45       3963                   DB	"SE"
00158E D4          3964                   DB	'T'+80H
00158F C0          3965                   DB	0C0H
001590             3966   ;
001590 52 4C       3967                   DB	"RL"
001592 C3          3968                   DB	'C'+80H
001593 00          3969                   DB	0
001594 52 52       3970                   DB	"RR"
001596 C3          3971                   DB	'C'+80H
001597 08          3972                   DB	8
001598 52          3973                   DB	'R'
001599 CC          3974                   DB	'L'+80H
00159A 10          3975                   DB	10H
00159B 52          3976                   DB	'R'
00159C D2          3977                   DB	'R'+80H
00159D 18          3978                   DB	18H
00159E 53 4C       3979                   DB	"SL"
0015A0 C1          3980                   DB	'A'+80H
0015A1 20          3981                   DB	20H
0015A2 53 52       3982                   DB	"SR"
0015A4 C1          3983                   DB	'A'+80H
0015A5 28          3984                   DB	28H
0015A6 53 52       3985                   DB	"SR"
0015A8 CC          3986                   DB	'L'+80H
0015A9 38          3987                   DB	38H
0015AA             3988   ;
0015AA 50 4F       3989                   DB	"PO"
0015AC D0          3990                   DB	'P'+80H
0015AD C1          3991                   DB	0C1H
0015AE 50 55 53    3992                   DB	"PUS"
0015B1 C8          3993                   DB	'H'+80H
0015B2 C5          3994                   DB	0C5H
0015B3 45 58       3995                   DB	"EX"
0015B5 00          3996                   DB	0
0015B6 28 53       3997                   DB	"(S"
0015B8 D0          3998                   DB	'P'+80H
0015B9 E3          3999                   DB	0E3H
0015BA             4000   ;
0015BA 53 55       4001                   DB	"SU"
0015BC C2          4002                   DB	'B'+80H
0015BD 90          4003                   DB	90H
0015BE 41 4E       4004                   DB	"AN"
0015C0 C4          4005                   DB	'D'+80H
0015C1 A0          4006                   DB	0A0H
0015C2 58 4F       4007                   DB	"XO"
0015C4 D2          4008                   DB	'R'+80H
0015C5 A8          4009                   DB	0A8H
0015C6 4F          4010                   DB	'O'
0015C7 D2          4011                   DB	'R'+80H
0015C8 B0          4012                   DB	0B0H
0015C9 43          4013                   DB	'C'
0015CA D0          4014                   DB	'P'+80H
0015CB B8          4015                   DB	0B8H
0015CC 80          4016                   DB	TAND
0015CD A0          4017                   DB	0A0H
0015CE 84          4018                   DB	TOR
0015CF B0          4019                   DB	0B0H
0015D0             4020   ;
0015D0 41 44       4021                   DB	"AD"
0015D2 C4          4022                   DB	'D'+80H
0015D3 80          4023                   DB	80H
0015D4 41 44       4024                   DB	"AD"
0015D6 C3          4025                   DB	'C'+80H
0015D7 88          4026                   DB	88H
0015D8 53 42       4027                   DB	"SB"
0015DA C3          4028                   DB	'C'+80H
0015DB 98          4029                   DB	98H
0015DC             4030   ;
0015DC 49 4E       4031                   DB	"IN"
0015DE C3          4032                   DB	'C'+80H
0015DF 04          4033                   DB	4
0015E0 44 45       4034                   DB	"DE"
0015E2 C3          4035                   DB	'C'+80H
0015E3 05          4036                   DB	5
0015E4             4037   ;
0015E4 49          4038                   DB	'I'
0015E5 CE          4039                   DB	'N'+80H
0015E6 40          4040                   DB	40H
0015E7 4F 55       4041                   DB	"OU"
0015E9 D4          4042                   DB	'T'+80H
0015EA 41          4043                   DB	41H
0015EB             4044   ;
0015EB 4A          4045                   DB	'J'
0015EC D2          4046                   DB	'R'+80H
0015ED 20          4047                   DB	20H
0015EE 44 4A 4E    4048                   DB	"DJN"
0015F1 DA          4049                   DB	'Z'+80H
0015F2 10          4050                   DB	10H
0015F3             4051   ;
0015F3 4A          4052                   DB	'J'
0015F4 D0          4053                   DB	'P'+80H
0015F5 C2          4054                   DB	0C2H
0015F6             4055   ;
0015F6 43 41 4C    4056                   DB	"CAL"
0015F9 CC          4057                   DB	'L'+80H
0015FA C4          4058                   DB	0C4H
0015FB             4059   ;
0015FB 52 53       4060                   DB	"RS"
0015FD D4          4061                   DB	'T'+80H
0015FE C7          4062                   DB	0C7H
0015FF             4063   ;
0015FF 52 45       4064                   DB	"RE"
001601 D4          4065                   DB	'T'+80H
001602 C0          4066                   DB	0C0H
001603             4067   ;
001603 4C          4068                   DB	'L'
001604 C4          4069                   DB	'D'+80H
001605 40          4070                   DB	40H
001606             4071   ;
001606 5D          4072                   DB	TDEF & 7FH
001607 CD          4073                   DB	'M'+80H
001608 00          4074                   DB	0
001609             4075   ;
001609 5D          4076                   DB	TDEF & 7FH
00160A C2          4077                   DB	'B'+80H
00160B 00          4078                   DB	0
00160C             4079   ;
00160C 4F 50       4080                   DB	"OP"
00160E D4          4081                   DB	'T'+80H
00160F 00          4082                   DB	0
001610             4083   ;
001610 5D          4084                   DB	TDEF & 7FH
001611 D7          4085                   DB	'W'+80H
001612 00          4086                   DB	0
001613             4087   ;
001613 00          4088                   DB	0
001614             4089   ;
001614 C2          4090   OPRNDS:         DB	'B'+80H
001615 00          4091                   DB	0
001616 C3          4092                   DB	'C'+80H
001617 01          4093                   DB	1
001618 C4          4094                   DB	'D'+80H
001619 02          4095                   DB	2
00161A C5          4096                   DB	'E'+80H
00161B 03          4097                   DB	3
00161C C8          4098                   DB	'H'+80H
00161D 04          4099                   DB	4
00161E CC          4100                   DB	'L'+80H
00161F 05          4101                   DB	5
001620 28 48       4102                   DB	"(H"
001622 CC          4103                   DB	'L'+80H
001623 06          4104                   DB	6
001624 C1          4105                   DB	'A'+80H
001625 07          4106                   DB	7
001626 28 49       4107                   DB	"(I"
001628 D8          4108                   DB	'X'+80H
001629 86          4109                   DB	86H
00162A 28 49       4110                   DB	"(I"
00162C D9          4111                   DB	'Y'+80H
00162D C6          4112                   DB	0C6H
00162E             4113   ;
00162E 42          4114                   DB	'B'
00162F C3          4115                   DB	'C'+80H
001630 08          4116                   DB	8
001631 44          4117                   DB	'D'
001632 C5          4118                   DB	'E'+80H
001633 0A          4119                   DB	10
001634 48          4120                   DB	'H'
001635 CC          4121                   DB	'L'+80H
001636 0C          4122                   DB	12
001637 49          4123                   DB	'I'
001638 D8          4124                   DB	'X'+80H
001639 8C          4125                   DB	8CH
00163A 49          4126                   DB	'I'
00163B D9          4127                   DB	'Y'+80H
00163C CC          4128                   DB	0CCH
00163D 41          4129                   DB	'A'
00163E C6          4130                   DB	'F'+80H
00163F 0E          4131                   DB	14
001640 53          4132                   DB	'S'
001641 D0          4133                   DB	'P'+80H
001642 0E          4134                   DB	14
001643             4135   ;
001643 4E          4136                   DB	'N'
001644 DA          4137                   DB	'Z'+80H
001645 10          4138                   DB	16
001646 DA          4139                   DB	'Z'+80H
001647 11          4140                   DB	17
001648 4E          4141                   DB	'N'
001649 C3          4142                   DB	'C'+80H
00164A 12          4143                   DB	18
00164B 50          4144                   DB	'P'
00164C CF          4145                   DB	'O'+80H
00164D 14          4146                   DB	20
00164E 50          4147                   DB	'P'
00164F C5          4148                   DB	'E'+80H
001650 15          4149                   DB	21
001651 D0          4150                   DB	'P'+80H
001652 16          4151                   DB	22
001653 CD          4152                   DB	'M'+80H
001654 17          4153                   DB	23
001655             4154   ;
001655 28          4155                   DB	'('
001656 C3          4156                   DB	'C'+80H
001657 20          4157                   DB	20H
001658             4158   ;
001658 00          4159                   DB	0
001659             4160   ;
001659 49          4161   LDOPS:          DB	'I'
00165A 00          4162                   DB	0
00165B C1          4163                   DB	'A'+80H
00165C 47          4164                   DB	47H
00165D 52          4165                   DB	'R'
00165E 00          4166                   DB	0
00165F C1          4167                   DB	'A'+80H
001660 4F          4168                   DB	4FH
001661 41          4169                   DB	'A'
001662 00          4170                   DB	0
001663 C9          4171                   DB	'I'+80H
001664 57          4172                   DB	57H
001665 41          4173                   DB	'A'
001666 00          4174                   DB	0
001667 D2          4175                   DB	'R'+80H
001668 5F          4176                   DB	5FH
001669 28 42 43    4177                   DB	"(BC"
00166C 00          4178                   DB	0
00166D C1          4179                   DB	'A'+80H
00166E 02          4180                   DB	2
00166F 28 44 45    4181                   DB	"(DE"
001672 00          4182                   DB	0
001673 C1          4183                   DB	'A'+80H
001674 12          4184                   DB	12H
001675 41          4185                   DB	'A'
001676 00          4186                   DB	0
001677 28 42       4187                   DB	"(B"
001679 C3          4188                   DB	'C'+80H
00167A 0A          4189                   DB	0AH
00167B 41          4190                   DB	'A'
00167C 00          4191                   DB	0
00167D 28 44       4192                   DB	"(D"
00167F C5          4193                   DB	'E'+80H
001680 1A          4194                   DB	1AH
001681             4195   ;
001681 00          4196                   DB	0
001682             4197   ;
001682             4198   FIN:            ; END
001682             4199   ; --- End asmb.asm ---
001682             4200   
001682             4201   ; --- Begin eval.asm ---
001682             4202   ;
001682             4203   ;Automatically created from original source on 2024-12-15 15:29:12
001682             4204   ;
001682             4205                   .ASSUME ADL = 0
001682             4206   ;	.ORG 0x0000
001682             4207   ;                SEGMENT CODE
001682             4208   ;
001682             4209   ;                XDEF	COUNT0
001682             4210   ;                XDEF	COUNT1
001682             4211   ;
001682             4212   ;BBC BASIC INTERPRETER - Z80 VERSION
001682             4213   ;EVALUATE EXPRESSION MODULE - "EVAL"
001682             4214   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
001682             4215   ;
001682             4216   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
001682             4217   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
001682             4218   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
001682             4219   ;
001682             4220   ;VERSION 2.3, 07-05-1984
001682             4221   ;VERSION 3.0, 08-03-1987
001682             4222   ;VERSION 5.0, 31-05-2024
001682             4223   ;
001682             4224   ;BINARY FLOATING POINT REPRESENTATION:
001682             4225   ; 32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
001682             4226   ; 8 BIT EXCESS-128 SIGNED EXPONENT
001682             4227   ; SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
001682             4228   ; MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
001682             4229   ;
001682             4230   ;BINARY INTEGER REPRESENTATION:
001682             4231   ; 32 BIT 2'S-COMPLEMENT SIGNED INTEGER
001682             4232   ; "EXPONENT" BYTE = 0 (WHEN PRESENT)
001682             4233   ;
001682             4234   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
001682             4235   ;                            EXPONENT - C
001682             4236   ;
001682             4237   ;                XDEF	EXPR
001682             4238   ;                XDEF	EXPRN
001682             4239   ;                XDEF	EXPRI
001682             4240   ;                XDEF	EXPRS
001682             4241   ;                XDEF	ITEMI
001682             4242   ;                XDEF	CONS
001682             4243   ;                XDEF	LOADS
001682             4244   ;                XDEF	VAL0
001682             4245   ;                XDEF	SFIX
001682             4246   ;                XDEF	STR
001682             4247   ;                XDEF	HEXSTR
001682             4248   ;                XDEF	LOAD4
001682             4249   ;                XDEF	LOADN
001682             4250   ;                XDEF	DLOAD5
001682             4251   ;                XDEF	TEST
001682             4252   ;                XDEF	ZERO
001682             4253   ;                XDEF	COMMA
001682             4254   ;                XDEF	BRAKET
001682             4255   ;                XDEF	DECODE
001682             4256   ;                XDEF	PUSHS
001682             4257   ;                XDEF	POPS
001682             4258   ;                XDEF	SEARCH
001682             4259   ;                XDEF	SCP
001682             4260   ;                XDEF	LETARR
001682             4261   ;
001682             4262   ;                XREF	MUL16
001682             4263   ;                XREF	ERROR_
001682             4264   ;                XREF	SYNTAX
001682             4265   ;                XREF	CHANEL
001682             4266   ;                XREF	CHNL
001682             4267   ;                XREF	STOREN
001682             4268   ;                XREF	STORE4
001682             4269   ;                XREF	STORE5
001682             4270   ;                XREF	STACCS
001682             4271   ;                XREF	CHECK
001682             4272   ;                XREF	USR
001682             4273   ;                XREF	VAR_
001682             4274   ;                XREF	FN
001682             4275   ;                XREF	XEQ
001682             4276   ;                XREF	NXT
001682             4277   ;                XREF	X14OR5
001682             4278   ;                XREF	MODIFY
001682             4279   ;                XREF	MODIFS
001682             4280   ;                XREF	TERMQ
001682             4281   ;
001682             4282   ;                XREF	GETVAR
001682             4283   ;                XREF	LEXAN2
001682             4284   ;                XREF	RANGE
001682             4285   ;                XREF	GETTOP
001682             4286   ;
001682             4287   ;                XREF	STAVAR
001682             4288   ;                XREF	PAGE_
001682             4289   ;                XREF	LOMEM
001682             4290   ;                XREF	HIMEM
001682             4291   ;                XREF	RANDOM
001682             4292   ;                XREF	COUNT
001682             4293   ;                XREF	LISTON
001682             4294   ;                XREF	PC
001682             4295   ;                XREF	ERL
001682             4296   ;                XREF	ERR
001682             4297   ;                XREF	ACCS
001682             4298   ;                XREF	ERRTXT
001682             4299   ;                XREF	KEYWDS
001682             4300   ;                XREF	KEYWDL
001682             4301   ;                XREF	FREE
001682             4302   ;                XREF	BUFFER
001682             4303   ;
001682             4304   ;                XREF	OSRDCH
001682             4305   ;                XREF	OSOPEN
001682             4306   ;                XREF	OSBGET
001682             4307   ;                XREF	OSSTAT
001682             4308   ;                XREF	GETCSR
001682             4309   ;                XREF	GETIME
001682             4310   ;                XREF	GETIMS
001682             4311   ;                XREF	GETEXT
001682             4312   ;                XREF	GETPTR
001682             4313   ;                XREF	OSKEY
001682             4314   ;
001682             4315   ;                XREF	POINT
001682             4316   ;                XREF	ADVAL
001682             4317   ;                XREF	TINTFN
001682             4318   ;                XREF	MODEFN
001682             4319   ;                XREF	WIDFN
001682             4320   ;
001682             4321   ;                XREF	FPP
001682             4322   ;
001682             4323   FUNTOK:         EQU	8DH		;1st FUNCTION TOKEN
001682             4324   TMOD:           EQU	83H
001682             4325   TLEN:           EQU	0A9H
001682             4326   ; TTO:            EQU	0B8H	; IN main.asm
001682             4327   ; TDIM:           EQU	0DEH	; IN main.asm
001682             4328   TEND:           EQU	0E0H
001682             4329   TMODE:          EQU	0EBH
001682             4330   TREPORT:        EQU	0F6H
001682             4331   TWIDTH:         EQU	0FEH
001682             4332   TTINT:          EQU	0AH
001682             4333   ; TBY:            EQU	0FH	; IN main.asm
001682             4334   ;
001682             4335   ;TABLE OF ADDRESSES FOR FUNCTIONS:
001682             4336   ;
001682 60 1F       4337   FUNTBL:         DW	DECODE		;Line number
001684 5B 1B       4338                   DW	OPENIN		;OPENIN
001686 78 1B       4339                   DW	PTRev		;PTR
001688 2D 1B       4340                   DW	PAGEVev		;PAGE
00168A 80 1B       4341                   DW	TIMEVev		;TIME
00168C 23 1B       4342                   DW	LOMEMVev		;LOMEM
00168E 28 1B       4343                   DW	HIMEMVev		;HIMEM
001690 CC 1B       4344                   DW	ABSev		;ABS
001692 08 1C       4345                   DW	ACSev		;ACS
001694 E7 0D       4346                   DW	ADVAL		;ADVAL
001696 10 1B       4347                   DW	ASC		;ASC
001698 00 1C       4348                   DW	ASNev		;ASN
00169A 04 1C       4349                   DW	ATNev		;ATN
00169C EC 1A       4350                   DW	BGET		;BGET
00169E EC 1B       4351                   DW	COSev		;COS
0016A0 4B 1B       4352                   DW	COUNTV		;COUNT
0016A2 D4 1B       4353                   DW	DEGev		;DEG
0016A4 41 1B       4354                   DW	ERLV		;ERL
0016A6 46 1B       4355                   DW	ERRV		;ERR
0016A8 2C 1C       4356                   DW	EVAL_		;EVAL_
0016AA F4 1B       4357                   DW	EXPev		;EXP
0016AC 70 1B       4358                   DW	EXTev		;EXT
0016AE F8 1F       4359                   DW	ZERO		;FALSE
0016B0 E3 29       4360                   DW	FN		;FN
0016B2 FA 1A       4361                   DW	GET		;GET
0016B4 F5 1A       4362                   DW	INKEY		;INKEY
0016B6 A5 1D       4363                   DW	INSTR		;INSTR(
0016B8 E0 1B       4364                   DW	INT_ev		;INT_
0016BA 1D 1B       4365                   DW	LEN		;LEN
0016BC F8 1B       4366                   DW	LNev		;LN
0016BE FC 1B       4367                   DW	LOGev		;LOG
0016C0 D0 1B       4368                   DW	CPL_ev		;NOT
0016C2 58 1B       4369                   DW	OPENUP		;OPENUP
0016C4 56 1B       4370                   DW	OPENOT		;OPENOUT
0016C6 C8 1B       4371                   DW	PIev		;PI
0016C8 B4 0D       4372                   DW	POINT		;POINT(
0016CA D5 1A       4373                   DW	POS		;POS
0016CC D8 1B       4374                   DW	RADev		;RAD
0016CE 59 1C       4375                   DW	RND		;RND
0016D0 DC 1B       4376                   DW	SGNev		;SGN
0016D2 F0 1B       4377                   DW	SINev		;SIN
0016D4 E4 1B       4378                   DW	SQRev		;SQR
0016D6 E8 1B       4379                   DW	TANev		;TAN
0016D8 32 1B       4380                   DW	TOPV		;TO(P)
0016DA BD 1B       4381                   DW	TRUEev		;TRUE
0016DC 3F 30       4382                   DW	USR		;USR
0016DE 1F 1C       4383                   DW	VALev		;VAL
0016E0 DB 1A       4384                   DW	VPOS		;VPOS
0016E2 26 1E       4385                   DW	CHRS		;CHR$
0016E4 2D 1E       4386                   DW	GETS		;GET$
0016E6 8E 1E       4387                   DW	INKEYS		;INKEY$
0016E8 CE 1E       4388                   DW	LEFTS		;LEFT$(
0016EA 9E 1E       4389                   DW	MIDS		;MID$(
0016EC FC 1E       4390                   DW	RIGHTS		;RIGHT$(
0016EE B8 1F       4391                   DW	STRS		;STR$
0016F0 26 1F       4392                   DW	STRING_		;STRING_$(
0016F2 E0 1A       4393                   DW	EOF		;EOF
0016F4 E9 1C       4394                   DW	SUM		;SUM
0016F6             4395   ;
0016F6             4396   FUNTBL_END:     EQU	$
0016F6             4397   ; TCMD:           EQU	FUNTOK+(FUNTBL_END-FUNTBL)/2
0016F6             4398   TCMD:           EQU	FUNTBL_END-FUNTBL/2+FUNTOK
0016F6             4399   ;
0016F6             4400   ; CR             EQU	0DH
0016F6             4401   ; LF             EQU	0AH
0016F6             4402   AND_:           EQU	80H
0016F6             4403   DIV_:           EQU	81H
0016F6             4404   EOR:            EQU	82H
0016F6             4405   MOD_:           EQU	83H
0016F6             4406   OR_:            EQU	84H
0016F6             4407   ;
0016F6 AB 1B       4408   SOPTBL:         DW	SLE		;<= (STRING)
0016F8 B3 1B       4409                   DW	SNE		;<>
0016FA A5 1B       4410                   DW	SGE		;>=
0016FC 98 1B       4411                   DW	SLT		;<
0016FE B9 1B       4412                   DW	SEQ		;=
001700 9E 1B       4413                   DW	SGT		;>
001702             4414   ;
001702             4415   ;EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
001702             4416   ; Expression type is returned in A'F':
001702             4417   ; Numeric - A' bit 7=0, F' sign bit cleared.
001702             4418   ; String - A' bit 7=1, F' sign bit set.
001702             4419   ;Floating-point or integer result returned in HLH'L'C
001702             4420   ; Integer result denoted by C=0 and HLH'L' non-zero.
001702             4421   ;String result returned in string accumulator, DE set.
001702             4422   ;
001702             4423   ;Hierarchy is: (1) Variables, functions,
001702             4424   ; constants, bracketed expressions.
001702             4425   ; (2) ^
001702             4426   ; (3) * / MOD DIV
001702             4427   ; (4) + -
001702             4428   ; (5) = <> <= >= > <
001702             4429   ; (6) AND
001702             4430   ; (7) EOR OR
001702             4431   ;
001702 CD 17 17    4432   EXPR:           CALL	EXPR1		;GET FIRST OPERAND
001705 FE 82       4433   EXPR0A:         CP	EOR		;CHECK OPERATOR
001707 28 03       4434                   JR	Z,EXPR0B
001709 FE 84       4435                   CP	OR_
00170B C0          4436                   RET	NZ
00170C CD 73 20    4437   EXPR0B:         CALL	SAVEev		;SAVE FIRST OPERAND
00170F CD 17 17    4438                   CALL	EXPR1		;GET SECOND OPERAND
001712 CD 83 20    4439                   CALL	DOIT		;DO OPERATION
001715 18 EE       4440                   JR	EXPR0A		;CONTINUE
001717             4441   ;
001717 CD 28 17    4442   EXPR1:          CALL	EXPR2
00171A FE 80       4443   EXPR1A:         CP	AND_
00171C C0          4444                   RET	NZ
00171D CD 73 20    4445                   CALL	SAVEev
001720 CD 28 17    4446                   CALL	EXPR2
001723 CD 83 20    4447                   CALL	DOIT
001726 18 F2       4448                   JR	EXPR1A
001728             4449   ;
001728 CD A0 17    4450   EXPR2:          CALL	EXPR3ev
00172B CD 6A 20    4451                   CALL	RELOPQ
00172E C0          4452                   RET	NZ
00172F 47          4453                   LD	B,A
001730 FD 23       4454                   INC	IY		;BUMP OVER OPERATOR
001732 CD 0B 45    4455                   CALL	NXT
001735 CD 6A 20    4456                   CALL	RELOPQ		;COMPOUND OPERATOR?
001738 20 07       4457                   JR	NZ,EXPR2B
00173A FD 23       4458                   INC	IY
00173C B8          4459                   CP	B
00173D 28 1C       4460                   JR	Z,SHIFT		;SHIFT | ==
00173F 80          4461                   ADD	A,B
001740 47          4462                   LD	B,A
001741 78          4463   EXPR2B:         LD	A,B
001742 08          4464                   EX	AF,AF'
001743 FA 73 17    4465                   JP	M,EXPR2S
001746 08          4466                   EX	AF,AF'
001747 D6 04       4467                   SUB	4
001749 FE 3A       4468                   CP	'>'-4
00174B 20 02       4469                   JR	NZ,EXPR2C
00174D C6 02       4470                   ADD	A,2
00174F E6 0F       4471   EXPR2C:         AND	0FH
001751 CD 77 20    4472   EXPR2D:         CALL	SAVE1
001754 CD A0 17    4473                   CALL	EXPR3ev
001757 CD 83 20    4474                   CALL	DOIT		;Must NOT be "JP DOIT"
00175A C9          4475                   RET
00175B             4476   ;
00175B FE 3D       4477   SHIFT:          CP	'='
00175D 28 E2       4478                   JR	Z,EXPR2B	;==
00175F CD 0B 45    4479                   CALL	NXT
001762 CD 6A 20    4480                   CALL	RELOPQ
001765 20 07       4481                   JR	NZ,SHIFT1
001767 B8          4482                   CP	B
001768 C2 E0 25    4483                   JP	NZ,SYNTAX
00176B FD 23       4484                   INC	IY
00176D 04          4485                   INC	B
00176E 78          4486   SHIFT1:         LD	A,B
00176F D6 12       4487                   SUB	18
001771 18 DE       4488                   JR	EXPR2D
001773             4489   ;
001773 08          4490   EXPR2S:         EX	AF,AF'
001774 3D          4491                   DEC	A
001775 E6 07       4492                   AND	7
001777 CD 19 20    4493                   CALL	PUSHS		;SAVE STRING ON STACK
00177A F5          4494                   PUSH	AF		;SAVE OPERATOR
00177B CD A0 17    4495                   CALL	EXPR3ev		;SECOND STRING
00177E 08          4496                   EX	AF,AF'
00177F F2 6E 18    4497                   JP	P,MISMATev
001782 F1          4498                   POP	AF
001783 4B          4499                   LD	C,E		;LENGTH OF STRING #2
001784 D1          4500                   POP	DE
001785 21 00 00    4501                   LD	HL,0
001788 39          4502                   ADD	HL,SP
001789 43          4503                   LD	B,E		;LENGTH OF STRING #1
00178A D5          4504                   PUSH	DE
00178B 11 00 52    4505                   LD	DE,ACCS
00178E EB          4506                   EX	DE,HL
00178F CD BB 20    4507                   CALL	DISPT2
001792 D1          4508                   POP	DE
001793 EB          4509                   EX	DE,HL
001794 26 00       4510                   LD	H,0
001796 39          4511                   ADD	HL,SP
001797 F9          4512                   LD	SP,HL
001798 EB          4513                   EX	DE,HL
001799 AF          4514                   XOR	A		;NUMERIC MARKER
00179A 4F          4515                   LD	C,A		;INTEGER MARKER
00179B 08          4516                   EX	AF,AF'
00179C FD 7E 00    4517                   LD	A,(IY)
00179F C9          4518                   RET
0017A0             4519   ;
0017A0 CD EE 17    4520   EXPR3ev:          CALL	EXPR4
0017A3 FE 2D       4521   EXPR3A:         CP	'-'
0017A5 28 08       4522                   JR	Z,EXPR3B
0017A7 FE 2B       4523                   CP	'+'
0017A9 C0          4524                   RET	NZ
0017AA 08          4525                   EX	AF,AF'
0017AB FA BA 17    4526                   JP	M,EXPR3S
0017AE 08          4527                   EX	AF,AF'
0017AF CD 73 20    4528   EXPR3B:         CALL	SAVEev
0017B2 CD EE 17    4529                   CALL	EXPR4
0017B5 CD 83 20    4530                   CALL	DOIT
0017B8 18 E9       4531                   JR	EXPR3A
0017BA             4532   ;
0017BA 08          4533   EXPR3S:         EX	AF,AF'
0017BB FD 23       4534                   INC	IY		;BUMP PAST '+'
0017BD CD 19 20    4535                   CALL	PUSHS		;SAVE STRING ON STACK
0017C0 CD EE 17    4536                   CALL	EXPR4		;SECOND STRING
0017C3 08          4537                   EX	AF,AF'
0017C4 F2 6E 18    4538                   JP	P,MISMATev
0017C7 4B          4539                   LD	C,E		;C=LENGTH
0017C8 D1          4540                   POP	DE
0017C9 D5          4541                   PUSH	DE
0017CA 21 00 52    4542                   LD	HL,ACCS
0017CD 54          4543                   LD	D,H
0017CE 79          4544                   LD	A,C
0017CF B7          4545                   OR	A
0017D0 28 0E       4546                   JR	Z,EXP3S3
0017D2 45          4547                   LD	B,L
0017D3 6F          4548                   LD	L,A		;SOURCE
0017D4 83          4549                   ADD	A,E
0017D5 5F          4550                   LD	E,A		;DESTINATION
0017D6 3E 13       4551                   LD	A,19
0017D8 38 6B       4552                   JR	C,ERROR2ev	;"String too long"
0017DA D5          4553                   PUSH	DE
0017DB 1D          4554                   DEC	E
0017DC 2D          4555                   DEC	L
0017DD ED B8       4556                   LDDR			;COPY
0017DF D1          4557                   POP	DE
0017E0 D9          4558   EXP3S3:         EXX
0017E1 C1          4559                   POP	BC
0017E2 CD 37 20    4560                   CALL	POPS		;RESTORE FROM STACK
0017E5 D9          4561                   EXX
0017E6 F6 80       4562                   OR	80H		;FLAG STRING
0017E8 08          4563                   EX	AF,AF'
0017E9 FD 7E 00    4564                   LD	A,(IY)
0017EC 18 B5       4565                   JR	EXPR3A
0017EE             4566   ;
0017EE CD 14 18    4567   EXPR4:          CALL	EXPR5
0017F1 FE 2A       4568   EXPR4A:         CP	'*'
0017F3 28 0B       4569                   JR	Z,EXPR4B
0017F5 FE 2F       4570                   CP	'/'
0017F7 28 07       4571                   JR	Z,EXPR4B
0017F9 FE 83       4572                   CP	MOD_
0017FB 28 03       4573                   JR	Z,EXPR4B
0017FD FE 81       4574                   CP	DIV_
0017FF C0          4575                   RET	NZ
001800 CD 73 20    4576   EXPR4B:         CALL	SAVEev
001803 CD 14 18    4577                   CALL	EXPR5
001806 CD 83 20    4578                   CALL	DOIT
001809 18 E6       4579                   JR	EXPR4A
00180B             4580   ;
00180B 7B          4581   EXPR45:         LD	A,E
00180C FE 2B       4582                   CP	'+'
00180E 28 DE       4583                   JR	Z,EXPR4
001810 FE 2D       4584                   CP	'-'
001812 28 DA       4585                   JR	Z,EXPR4
001814 CD D0 18    4586   EXPR5:          CALL	ITEM
001817 B7          4587                   OR	A		;TEST TYPE
001818 08          4588                   EX	AF,AF'		;SAVE TYPE
001819 CD 0B 45    4589   EXPR5A:         CALL	NXT
00181C FE 5E       4590                   CP	'^'
00181E C0          4591                   RET	NZ
00181F CD 73 20    4592                   CALL	SAVEev
001822 CD D0 18    4593                   CALL	ITEM
001825 B7          4594                   OR	A
001826 08          4595                   EX	AF,AF'
001827 CD 83 20    4596                   CALL	DOIT
00182A 18 ED       4597                   JR	EXPR5A
00182C             4598   ;
00182C CD 02 17    4599   EXPRN:          CALL	EXPR
00182F 08          4600                   EX	AF,AF'
001830 F0          4601                   RET	P
001831 18 3B       4602                   JR	MISMATev
001833             4603   ;
001833 CD 02 17    4604   EXPRI:          CALL	EXPR
001836 08          4605                   EX	AF,AF'
001837 F2 17 1C    4606                   JP	P,SFIX
00183A 18 32       4607                   JR	MISMATev
00183C             4608   ;
00183C CD 02 17    4609   EXPRS:          CALL	EXPR
00183F 08          4610                   EX	AF,AF'
001840 F8          4611                   RET	M
001841 18 2B       4612                   JR	MISMATev
001843             4613   ;
001843 3E 1C       4614   BADHEX:         LD	A,28
001845 C3 44 3F    4615   ERROR2ev:         JP	ERROR_		;"Bad HEX or binary"
001848             4616   ;
001848 D9          4617   NEGATEev:         EXX
001849 7C          4618                   LD	A,H
00184A 2F          4619                   CPL
00184B 67          4620                   LD	H,A
00184C 7D          4621                   LD	A,L
00184D 2F          4622                   CPL
00184E 6F          4623                   LD	L,A
00184F D9          4624                   EXX
001850 7C          4625                   LD	A,H
001851 2F          4626                   CPL
001852 67          4627                   LD	H,A
001853 7D          4628                   LD	A,L
001854 2F          4629                   CPL
001855 6F          4630                   LD	L,A
001856 D9          4631   ADD1ev:           EXX
001857 23          4632                   INC	HL
001858 7C          4633                   LD	A,H
001859 B5          4634                   OR	L
00185A D9          4635                   EXX
00185B 3E 00       4636                   LD	A,0		;NUMERIC MARKER
00185D C0          4637                   RET	NZ
00185E 23          4638                   INC	HL
00185F C9          4639                   RET
001860             4640   ;
001860 CD D0 18    4641   ITEMI:          CALL	ITEM
001863 B7          4642                   OR	A
001864 F2 17 1C    4643                   JP	P,SFIX
001867 18 05       4644                   JR	MISMATev
001869             4645   ;
001869 CD D0 18    4646   ITEMS:          CALL	ITEM
00186C B7          4647                   OR	A
00186D F8          4648                   RET	M
00186E 3E 06       4649   MISMATev:         LD	A,6
001870 18 D3       4650                   JR	ERROR2ev		;"Type mismatch"
001872             4651   ;
001872 CD 02 17    4652   ITEM1:          CALL	EXPR		;BRACKETED EXPR
001875 CD AE 20    4653                   CALL	BRAKET
001878 08          4654                   EX	AF,AF'
001879 C9          4655                   RET
00187A             4656   ;
00187A CD D0 18    4657   ITEMN:          CALL	ITEM
00187D B7          4658                   OR	A
00187E F0          4659                   RET	P
00187F 18 ED       4660                   JR	MISMATev
001881             4661   ;
001881             4662   ;HEX - Get hexadecimal constant.
001881             4663   ;   Inputs: ASCII string at (IY)
001881             4664   ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
001881             4665   ;           IY updated (points to delimiter)
001881             4666   ;
001881 CD F8 1F    4667   HEXev:            CALL	ZERO
001884 CD 57 20    4668                   CALL	HEXDIG
001887 38 BA       4669                   JR	C,BADHEX
001889 FD 23       4670   HEX1:           INC	IY
00188B E6 0F       4671                   AND	0FH
00188D 06 04       4672                   LD	B,4
00188F D9          4673   HEX2:           EXX
001890 29          4674                   ADD	HL,HL
001891 D9          4675                   EXX
001892 ED 6A       4676                   ADC	HL,HL
001894 10 F9       4677                   DJNZ	HEX2
001896 D9          4678                   EXX
001897 B5          4679                   OR	L
001898 6F          4680                   LD	L,A
001899 D9          4681                   EXX
00189A CD 57 20    4682                   CALL	HEXDIG
00189D 30 EA       4683                   JR	NC,HEX1
00189F AF          4684                   XOR	A
0018A0 C9          4685                   RET
0018A1             4686   ;
0018A1             4687   ;BIN - Get binary constant.
0018A1             4688   ;   Inputs: ASCII string at (IY)
0018A1             4689   ;  Outputs: Integer result in H'L'HL, C=0, A=0.
0018A1             4690   ;           IY updated (points to delimiter)
0018A1             4691   ;
0018A1 CD F8 1F    4692   BIN:            CALL	ZERO
0018A4 CD 4A 20    4693                   CALL	BINDIG
0018A7 38 9A       4694                   JR	C,BADHEX
0018A9 FD 23       4695   BIN1:           INC	IY
0018AB CB 1F       4696                   RR	A
0018AD D9          4697                   EXX
0018AE ED 6A       4698                   ADC	HL,HL
0018B0 D9          4699                   EXX
0018B1 ED 6A       4700                   ADC	HL,HL
0018B3 CD 4A 20    4701                   CALL	BINDIG
0018B6 30 F1       4702                   JR	NC,BIN1
0018B8 AF          4703                   XOR	A
0018B9 C9          4704                   RET
0018BA             4705   ;
0018BA             4706   ;MINUS - Unary minus.
0018BA             4707   ;   Inputs: IY = text pointer
0018BA             4708   ;  Outputs: Numeric result, same type as argument.
0018BA             4709   ;           Result in H'L'HLC
0018BA             4710   ;
0018BA CD 7A 18    4711   MINUS:          CALL	ITEMN
0018BD 0D          4712   MINUS0:         DEC	C
0018BE 0C          4713                   INC	C
0018BF 28 87       4714                   JR	Z,NEGATEev	;ZERO/INTEGER
0018C1 7C          4715                   LD	A,H
0018C2 EE 80       4716                   XOR	80H		;CHANGE SIGN (FP)
0018C4 67          4717                   LD	H,A
0018C5 AF          4718                   XOR	A		;NUMERIC MARKER
0018C6 C9          4719                   RET
0018C7             4720   ;
0018C7 CD D6 25    4721   ADDROF:         CALL	VAR_
0018CA E5          4722                   PUSH	HL
0018CB D9          4723                   EXX
0018CC E1          4724                   POP	HL
0018CD C3 50 1B    4725                   JP	COUNT1
0018D0             4726   ;
0018D0             4727   ;ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
0018D0             4728   ;Item type is returned in A: Bit 7=0 numeric.
0018D0             4729   ; Bit 7=1 string.
0018D0             4730   ;Numeric item returned in HLH'L'C.
0018D0             4731   ;String item returned in string accumulator,
0018D0             4732   ; DE addresses byte after last (E=length).
0018D0             4733   ;
0018D0 CD 86 32    4734   ITEM:           CALL	CHECK
0018D3 CD 0B 45    4735                   CALL	NXT
0018D6 FD 23       4736                   INC	IY
0018D8 FE 8D       4737                   CP	FUNTOK
0018DA 38 08       4738                   JR	C,ITEM0
0018DC FE C7       4739                   CP	TCMD
0018DE DA C1 20    4740                   JP	C,DISPATev	;FUNCTIONS
0018E1 C3 30 1A    4741                   JP	EXTRASev		;DIM, END, MODE, REPORT$, WIDTH
0018E4             4742   ;
0018E4 FE 3A       4743   ITEM0:          CP	':'
0018E6 30 25       4744                   JR	NC,ITEM2	;VARIABLES
0018E8 FE 30       4745                   CP	'0'
0018EA 30 7B       4746                   JR	NC,CONev		;NUMERIC CONSTANT
0018EC FE 28       4747                   CP	'('
0018EE 28 82       4748                   JR	Z,ITEM1		;EXPRESSION
0018F0 FE 2D       4749                   CP	'-'
0018F2 28 C6       4750                   JR	Z,MINUS		;UNARY MINUS
0018F4 FE 2B       4751                   CP	'+'
0018F6 28 82       4752                   JR	Z,ITEMN		;UNARY PLUS
0018F8 FE 2E       4753                   CP	'.'
0018FA 28 6B       4754                   JR	Z,CONev		;NUMERIC CONSTANT
0018FC FE 26       4755                   CP	'&'
0018FE 28 81       4756                   JR	Z,HEXev		;HEX CONSTANT
001900 FE 25       4757                   CP	'%'
001902 28 9D       4758                   JR	Z,BIN		;BINARY CONSTANT
001904 FE 22       4759                   CP	'"'
001906 28 72       4760                   JR	Z,CONS		;STRING CONSTANT
001908 FE 0A       4761                   CP	TTINT
00190A CA D0 1A    4762                   JP	Z,TINTev		;TINT FUNCTION
00190D FE 83       4763   ITEM2:          CP	TMOD
00190F CA 4D 1D    4764                   JP	Z,MODFUN	;MOD
001912 FE 5E       4765                   CP	'^'
001914 28 B1       4766                   JR	Z,ADDROF	;^ OPERATOR
001916 FD 2B       4767                   DEC	IY
001918 CD E3 41    4768                   CALL	GETVAR		;VARIABLE
00191B 20 2F       4769                   JR	NZ,NOSUCHev
00191D CB 77       4770                   BIT	6,A
00191F 20 7E       4771                   JR	NZ,ARRAYev
001921 B7          4772                   OR	A
001922 FA 0E 1A    4773                   JP	M,LOADS		;STRING VARIABLE
001925 CB 57       4774   LOADN:          BIT	2,A
001927 0E 00       4775                   LD	C,0
001929 28 16       4776                   JR	Z,LOAD1		;BYTE VARIABLE
00192B CB 47       4777                   BIT	0,A
00192D 28 03       4778                   JR	Z,LOAD4		;INTEGER VARIABLE
00192F DD 4E 04    4779   LOAD5:          LD	C,(IX+4)
001932 D9          4780   LOAD4:          EXX
001933 DD 6E 00    4781                   LD	L,(IX+0)
001936 DD 66 01    4782                   LD	H,(IX+1)
001939 D9          4783                   EXX
00193A DD 6E 02    4784                   LD	L,(IX+2)
00193D DD 66 03    4785                   LD	H,(IX+3)
001940 C9          4786                   RET
001941             4787   ;
001941 21 00 00    4788   LOAD1:          LD	HL,0
001944 D9          4789                   EXX
001945 26 00       4790                   LD	H,0
001947 DD 6E 00    4791                   LD	L,(IX+0)
00194A D9          4792                   EXX
00194B C9          4793                   RET
00194C             4794   ;
00194C DA E0 25    4795   NOSUCHev:         JP	C,SYNTAX
00194F 3A FE 54    4796                   LD	A,(LISTON)
001952 CB 6F       4797                   BIT	5,A
001954 3E 1A       4798                   LD	A,26
001956 20 36       4799                   JR	NZ,ERROR0ev	;"No such variable"
001958 FD 23       4800   NOS1:           INC	IY
00195A CD EF 43    4801                   CALL	RANGE
00195D 30 F9       4802                   JR	NC,NOS1
00195F DD 21 40 54 4803                   LD	IX,PC
001963 AF          4804                   XOR	A
001964 4F          4805                   LD	C,A
001965 18 CB       4806                   JR	LOAD4
001967             4807   ;
001967             4808   ;CON - Get unsigned numeric constant from ASCII string.
001967             4809   ;   Inputs: ASCII string at (IY-1)
001967             4810   ;  Outputs: Variable-type result in HLH'L'C
001967             4811   ;           IY updated (points to delimiter)
001967             4812   ;           A7 = 0 (numeric marker)
001967             4813   ;
001967 FD 2B       4814   CONev:            DEC	IY
001969 FD E5       4815                   PUSH	IY
00196B DD E1       4816                   POP	IX
00196D 3E 24       4817                   LD	A,36
00196F CD 15 45    4818                   CALL	FPP
001972 38 1A       4819                   JR	C,ERROR0ev
001974 DD E5       4820                   PUSH	IX
001976 FD E1       4821                   POP	IY
001978 AF          4822                   XOR	A
001979 C9          4823                   RET
00197A             4824   ;
00197A             4825   ;CONS - Get string constant from ASCII string.
00197A             4826   ;   Inputs: ASCII string at (IY)
00197A             4827   ;  Outputs: Result in string accumulator.
00197A             4828   ;           D = MS byte of ACCS, E = string length
00197A             4829   ;           A7 = 1 (string marker)
00197A             4830   ;           IY updated
00197A             4831   ;
00197A 11 00 52    4832   CONS:           LD	DE,ACCS
00197D FD 7E 00    4833   CONS3:          LD	A,(IY)
001980 FD 23       4834                   INC	IY
001982 FE 22       4835                   CP	'"'
001984 28 0B       4836                   JR	Z,CONS2
001986 12          4837   CONS1:          LD	(DE),A
001987 1C          4838                   INC	E
001988 FE 0D       4839                   CP	CR
00198A 20 F1       4840                   JR	NZ,CONS3
00198C 3E 09       4841                   LD	A,9
00198E C3 44 3F    4842   ERROR0ev:         JP	ERROR_		;"Missing """
001991             4843   ;
001991 FD 7E 00    4844   CONS2:          LD	A,(IY)
001994 FE 22       4845                   CP	'"'
001996 FD 23       4846                   INC	IY
001998 28 EC       4847                   JR	Z,CONS1
00199A FD 2B       4848                   DEC	IY
00199C 3E 80       4849                   LD	A,80H		;STRING MARKER
00199E C9          4850                   RET
00199F             4851   ;
00199F 3E 0E       4852   ARRAYev:          LD	A,14		;'Bad use of array'
0019A1 C3 44 3F    4853                   JP	ERROR_
0019A4             4854   ;
0019A4             4855   ; ARRLEN - Get start address and number of elements of an array
0019A4             4856   ;   Inputs: HL addresses array descriptor
0019A4             4857   ;  Outputs: HL = address of first element
0019A4             4858   ;           DE = total number of elements
0019A4             4859   ;           A = 0
0019A4             4860   ; Destroys: A,B,C,D,E,H,L,flags
0019A4             4861   ;
0019A4 7E          4862   ARRLEN:         LD	A,(HL)		;Number of dimensions
0019A5 23          4863                   INC	HL
0019A6 B7          4864                   OR	A
0019A7 28 F6       4865                   JR	Z,ARRAYev
0019A9 11 01 00    4866                   LD	DE,1
0019AC 4E          4867   ARLOOP:         LD	C,(HL)
0019AD 23          4868                   INC	HL
0019AE 46          4869                   LD	B,(HL)		;BC = size of this dimension
0019AF 23          4870                   INC	HL
0019B0 EB          4871                   EX	DE,HL
0019B1 F5          4872                   PUSH	AF
0019B2 D5          4873                   PUSH	DE
0019B3 CD BD 36    4874                   CALL	MUL16		;HL=HL*BC
0019B6 D1          4875                   POP	DE
0019B7 F1          4876                   POP	AF
0019B8 EB          4877                   EX	DE,HL
0019B9 3D          4878                   DEC	A
0019BA 20 F0       4879                   JR	NZ,ARLOOP
0019BC C9          4880                   RET
0019BD             4881   ;
0019BD CD 0B 45    4882   GETARR:         CALL	NXT
0019C0 CD E3 41    4883                   CALL	GETVAR
0019C3 20 87       4884                   JR	NZ,NOSUCHev
0019C5 CB 77       4885                   BIT	6,A
0019C7 37          4886                   SCF
0019C8 28 82       4887                   JR	Z,NOSUCHev
0019CA E6 8F       4888                   AND	8FH
0019CC 47          4889                   LD	B,A		;Type + size
0019CD 7E          4890   GETAR1:         LD	A,(HL)
0019CE 23          4891                   INC	HL
0019CF 66          4892                   LD	H,(HL)
0019D0 6F          4893                   LD	L,A
0019D1 E6 FE       4894                   AND	0FEH
0019D3 B4          4895                   OR	H
0019D4 28 C9       4896                   JR	Z,ARRAYev		;Bad use of array
0019D6 C9          4897                   RET
0019D7             4898   ;
0019D7 CD 0B 45    4899   GETARB:         CALL	NXT
0019DA FE 28       4900                   CP	'('
0019DC 20 DF       4901                   JR	NZ,GETARR
0019DE FD 23       4902                   INC	IY
0019E0 CD BD 19    4903                   CALL	GETARR
0019E3 CD AE 20    4904                   CALL	BRAKET
0019E6 C9          4905                   RET
0019E7             4906   ;
0019E7 CB 57       4907   DLOADN:         BIT	2,A
0019E9 06 00       4908                   LD	B,0
0019EB 28 16       4909                   JR	Z,DLOAD1	;BYTE VARIABLE
0019ED CB 47       4910                   BIT	0,A
0019EF 28 03       4911                   JR	Z,DLOAD4	;INTEGER VARIABLE
0019F1 DD 46 04    4912   DLOAD5:         LD	B,(IX+4)
0019F4 D9          4913   DLOAD4:         EXX
0019F5 DD 5E 00    4914                   LD	E,(IX+0)
0019F8 DD 56 01    4915                   LD	D,(IX+1)
0019FB D9          4916                   EXX
0019FC DD 5E 02    4917                   LD	E,(IX+2)
0019FF DD 56 03    4918                   LD	D,(IX+3)
001A02 C9          4919                   RET
001A03             4920   ;
001A03 11 00 00    4921   DLOAD1:         LD	DE,0
001A06 D9          4922                   EXX
001A07 16 00       4923                   LD	D,0
001A09 DD 5E 00    4924                   LD	E,(IX+0)
001A0C D9          4925                   EXX
001A0D C9          4926                   RET
001A0E             4927   ;
001A0E 11 00 52    4928   LOADS:          LD	DE,ACCS
001A11 1F          4929                   RRA
001A12 30 10       4930                   JR	NC,LOADS2	;FIXED STRING
001A14 CD 32 19    4931                   CALL	LOAD4
001A17 D9          4932                   EXX
001A18 7D          4933                   LD	A,L
001A19 D9          4934                   EXX
001A1A B7          4935                   OR	A
001A1B 4F          4936                   LD	C,A
001A1C 3E 80       4937                   LD	A,80H		;STRING MARKER
001A1E C8          4938                   RET	Z
001A1F 06 00       4939                   LD	B,0
001A21 ED B0       4940                   LDIR
001A23 C9          4941                   RET
001A24             4942   ;
001A24 7E          4943   LOADS2:         LD	A,(HL)
001A25 12          4944                   LD	(DE),A
001A26 23          4945                   INC	HL
001A27 FE 0D       4946                   CP	CR
001A29 3E 80       4947   REPDUN:         LD	A,80H		;STRING MARKER
001A2B C8          4948                   RET	Z
001A2C 1C          4949                   INC	E
001A2D 20 F5       4950                   JR	NZ,LOADS2
001A2F C9          4951                   RET			;RETURN NULL STRING
001A30             4952   ;
001A30             4953   ; Version 5 extensions:
001A30             4954   ;
001A30 FE EB       4955   EXTRASev:         CP	TMODE
001A32 CA F3 0D    4956                   JP	Z,MODEFN	;MODE
001A35 FE FE       4957                   CP	TWIDTH
001A37 CA FD 0D    4958                   JP	Z,WIDFN		;WIDTH
001A3A FE F6       4959                   CP	TREPORT
001A3C 28 11       4960                   JR	Z,REPORS	;REPORT$
001A3E FE E0       4961                   CP	TEND
001A40 28 07       4962                   JR	Z,ENDFUN	;END
001A42 FE DE       4963                   CP	TDIM
001A44 28 44       4964                   JR	Z,DIMFUN	;DIM
001A46 C3 E0 25    4965   SYNERR:         JP	SYNTAX		; 'Syntax error'
001A49             4966   ;
001A49             4967   ; END (function)
001A49             4968   ;
001A49 2A E0 54    4969   ENDFUN:         LD	HL,(FREE)
001A4C C3 50 1B    4970                   JP	COUNT1
001A4F             4971   ;
001A4F             4972   ; REPORT$
001A4F             4973   ;
001A4F FD 7E 00    4974   REPORS:         LD	A,(IY)
001A52 FE 24       4975                   CP	'$'
001A54 20 F0       4976                   JR	NZ,SYNERR
001A56 FD 23       4977                   INC	IY
001A58 2A EE 54    4978                   LD	HL,(ERRTXT)
001A5B 11 00 52    4979                   LD	DE,ACCS
001A5E 7E          4980   REPCPY:         LD	A,(HL)
001A5F B7          4981                   OR	A
001A60 28 C7       4982                   JR	Z,REPDUN
001A62 ED A0       4983                   LDI
001A64 FE A0       4984                   CP	160
001A66 EA 5E 1A    4985                   JP	PE,REPCPY
001A69 FE 0A       4986                   CP	LF
001A6B 28 F1       4987                   JR	Z,REPCPY
001A6D 1D          4988                   DEC	E
001A6E E5          4989                   PUSH	HL
001A6F 21 84 38    4990                   LD	HL,KEYWDS
001A72 01 5B 03    4991                   LD	BC,KEYWDL
001A75 ED B1       4992                   CPIR
001A77 06 A0       4993                   LD	B,160
001A79 FE 91       4994                   CP	145
001A7B EA 7F 1A    4995                   JP	PE,REPTOK
001A7E 04          4996                   INC	B
001A7F 7E          4997   REPTOK:         LD	A,(HL)
001A80 ED A0       4998                   LDI
001A82 B8          4999                   CP	B
001A83 EA 7F 1A    5000                   JP	PE,REPTOK
001A86 E1          5001                   POP	HL
001A87 1D          5002                   DEC	E
001A88 18 D4       5003                   JR	REPCPY
001A8A             5004   ;
001A8A             5005   ; DIM(array()[,sub])
001A8A             5006   ;
001A8A CD 0B 45    5007   DIMFUN:         CALL	NXT
001A8D FE 28       5008                   CP	'('
001A8F 20 09       5009                   JR	NZ,DIMF0
001A91 FD 23       5010                   INC	IY
001A93 CD 9A 1A    5011                   CALL	DIMF0
001A96 CD AE 20    5012                   CALL	BRAKET
001A99 C9          5013                   RET
001A9A             5014   ;
001A9A CD BD 19    5015   DIMF0:          CALL	GETARR
001A9D E5          5016                   PUSH	HL
001A9E CD 0B 45    5017                   CALL	NXT
001AA1 1E 00       5018                   LD	E,0
001AA3 FE 2C       5019                   CP	','
001AA5 20 0B       5020                   JR	NZ,DIMF1
001AA7 FD 23       5021                   INC	IY
001AA9 CD 33 18    5022                   CALL	EXPRI
001AAC D9          5023                   EXX
001AAD EB          5024                   EX	DE,HL
001AAE 1C          5025                   INC	E
001AAF 1D          5026                   DEC	E
001AB0 28 19       5027                   JR	Z,BADSUB
001AB2 E1          5028   DIMF1:          POP	HL
001AB3 7E          5029                   LD	A,(HL)
001AB4 23          5030                   INC	HL
001AB5 BB          5031                   CP	E
001AB6 38 13       5032                   JR	C,BADSUB
001AB8 1D          5033                   DEC	E
001AB9 FA C6 1A    5034                   JP	M,DIMF3
001ABC 19          5035                   ADD	HL,DE
001ABD 19          5036                   ADD	HL,DE
001ABE 7E          5037                   LD	A,(HL)
001ABF 23          5038                   INC	HL
001AC0 66          5039                   LD	H,(HL)
001AC1 6F          5040                   LD	L,A
001AC2 2B          5041                   DEC	HL
001AC3 C3 50 1B    5042   DIMF2:          JP	COUNT1
001AC6 6F          5043   DIMF3:          LD	L,A
001AC7 26 00       5044                   LD	H,0
001AC9 18 F8       5045                   JR	DIMF2
001ACB             5046   ;
001ACB 3E 0F       5047   BADSUB:         LD	A,15
001ACD C3 44 3F    5048                   JP	ERROR_			;"Bad subscript"
001AD0             5049   ;
001AD0             5050   ;VARIABLE-TYPE FUNCTIONS:
001AD0             5051   ;
001AD0             5052   ;Result returned in HLH'L'C (floating point)
001AD0             5053   ;Result returned in HLH'L' (C=0) (integer)
001AD0             5054   ;Result returned in string accumulator & DE (string)
001AD0             5055   ;All registers destroyed.
001AD0             5056   ;IY (text pointer) updated.
001AD0             5057   ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
001AD0             5058   ;
001AD0             5059   ;
001AD0             5060   ;POS - horizontal cursor position.
001AD0             5061   ;VPOS - vertical cursor position.
001AD0             5062   ;EOF - return status of file.
001AD0             5063   ;BGET - read byte from file.
001AD0             5064   ;INKEY - as GET but wait only n centiseconds.
001AD0             5065   ;GET - wait for keypress and return ASCII value.
001AD0             5066   ;GET(n) - input from Z80 port n.
001AD0             5067   ;ASC - ASCII value of string.
001AD0             5068   ;LEN - length of string.
001AD0             5069   ;LOMEM - location of dynamic variables.
001AD0             5070   ;HIMEM - top of available RAM.
001AD0             5071   ;PAGE - start of current text page.
001AD0             5072   ;TOP - address of first free byte after program.
001AD0             5073   ;ERL - line number where last error occurred.
001AD0             5074   ;ERR - number of last error.
001AD0             5075   ;COUNT - number of printing characters since CR.
001AD0             5076   ;Results are integer numeric.
001AD0             5077   ;
001AD0 CD 11 11    5078   TINTev:           CALL	TINTFN
001AD3 18 7B       5079                   JR	COUNT1
001AD5 CD A9 0D    5080   POS:            CALL	GETCSR
001AD8 EB          5081                   EX	DE,HL
001AD9 18 75       5082                   JR	COUNT1
001ADB CD A9 0D    5083   VPOS:           CALL	GETCSR
001ADE 18 70       5084                   JR	COUNT1
001AE0 CD D1 36    5085   EOF:            CALL	CHANEL
001AE3 CD 6C 06    5086                   CALL	OSSTAT
001AE6 CA BD 1B    5087                   JP	Z,TRUEev
001AE9 C3 F8 1F    5088                   JP	ZERO
001AEC CD D1 36    5089   BGET:           CALL	CHANEL		;CHANNEL NUMBER
001AEF CD 5B 06    5090                   CALL	OSBGET
001AF2 6F          5091                   LD	L,A
001AF3 18 59       5092                   JR	COUNT0
001AF5 CD 8E 1E    5093   INKEY:          CALL	INKEYS
001AF8 18 19       5094                   JR	ASC0
001AFA CD 0B 45    5095   GET:            CALL	NXT
001AFD FE 28       5096                   CP	'('
001AFF 20 0A       5097                   JR	NZ,GET0
001B01 CD 60 18    5098                   CALL	ITEMI		;PORT ADDRESS
001B04 D9          5099                   EXX
001B05 44          5100                   LD	B,H
001B06 4D          5101                   LD	C,L
001B07 ED 68       5102                   IN	L,(C)		;INPUT FROM PORT BC
001B09 18 43       5103                   JR	COUNT0
001B0B CD 2D 1E    5104   GET0:           CALL	GETS
001B0E 18 08       5105                   JR	ASC1
001B10 CD 69 18    5106   ASC:            CALL	ITEMS
001B13 AF          5107   ASC0:           XOR	A
001B14 BB          5108                   CP	E
001B15 CA BD 1B    5109                   JP	Z,TRUEev		;NULL STRING
001B18 2A 00 52    5110   ASC1:           LD	HL,(ACCS)
001B1B 18 31       5111                   JR	COUNT0
001B1D CD 69 18    5112   LEN:            CALL	ITEMS
001B20 EB          5113                   EX	DE,HL
001B21 18 2B       5114                   JR	COUNT0
001B23 2A DE 54    5115   LOMEMVev:         LD	HL,(LOMEM)
001B26 18 28       5116                   JR	COUNT1
001B28 2A E2 54    5117   HIMEMVev:         LD	HL,(HIMEM)
001B2B 18 23       5118                   JR	COUNT1
001B2D 2A DC 54    5119   PAGEVev:          LD	HL,(PAGE_)
001B30 18 1E       5120                   JR	COUNT1
001B32 FD 7E 00    5121   TOPV:           LD	A,(IY)
001B35 FD 23       5122                   INC	IY		;SKIP "P"
001B37 FE 50       5123                   CP	'P'
001B39 C2 E0 25    5124                   JP	NZ,SYNTAX	;"Syntax Error"
001B3C CD 25 40    5125                   CALL	GETTOP
001B3F 18 0F       5126                   JR	COUNT1
001B41 2A F2 54    5127   ERLV:           LD	HL,(ERL)
001B44 18 0A       5128                   JR	COUNT1
001B46 2A FD 54    5129   ERRV:           LD	HL,(ERR)
001B49 18 03       5130                   JR	COUNT0
001B4B 2A FB 54    5131   COUNTV:         LD	HL,(COUNT)
001B4E 26 00       5132   COUNT0:         LD	H,0
001B50 D9          5133   COUNT1:         EXX
001B51 AF          5134                   XOR	A
001B52 4F          5135                   LD	C,A		;INTEGER MARKER
001B53 67          5136                   LD	H,A
001B54 6F          5137                   LD	L,A
001B55 C9          5138                   RET
001B56             5139   ;
001B56             5140   ;OPENIN - Open a file for reading.
001B56             5141   ;OPENOUT - Open a file for writing.
001B56             5142   ;OPENUP - Open a file for reading or writing.
001B56             5143   ;Result is integer channel number (0 if error)
001B56             5144   ;
001B56 AF          5145   OPENOT:         XOR	A
001B57 21          5146                   DB	21H		;SKIP NEXT 2 BYTES
001B58 3E 02       5147   OPENUP:         LD	A,2
001B5A 21          5148                   DB	21H		;SKIP NEXT 2 BYTES
001B5B 3E 01       5149   OPENIN:         LD	A,1
001B5D F5          5150                   PUSH	AF		;SAVE OPEN TYPE
001B5E CD 69 18    5151                   CALL	ITEMS		;FILENAME
001B61 3E 0D       5152                   LD	A,CR
001B63 12          5153                   LD	(DE),A
001B64 F1          5154                   POP	AF		;RESTORE OPEN TYPE
001B65 C6 FF       5155                   ADD	A,-1		;AFFECT FLAGS
001B67 21 00 52    5156                   LD	HL,ACCS
001B6A CD 44 06    5157                   CALL	OSOPEN
001B6D 6F          5158                   LD	L,A
001B6E 18 DE       5159                   JR	COUNT0
001B70             5160   ;
001B70             5161   ;EXT - Return length of file.
001B70             5162   ;PTR - Return current file pointer.
001B70             5163   ;Results are integer numeric.
001B70             5164   ;
001B70 CD D1 36    5165   EXTev:            CALL	CHANEL
001B73 CD AD 06    5166                   CALL	GETEXT
001B76 18 12       5167                   JR	TIME0
001B78             5168   ;
001B78 CD D1 36    5169   PTRev:            CALL	CHANEL
001B7B CD 76 06    5170                   CALL	GETPTR
001B7E 18 0A       5171                   JR	TIME0
001B80             5172   ;
001B80             5173   ;TIME - Return current value of elapsed time.
001B80             5174   ;Result is integer numeric.
001B80             5175   ;
001B80 FD 7E 00    5176   TIMEVev:          LD	A,(IY)
001B83 FE 24       5177                   CP	'$'
001B85 28 09       5178                   JR	Z,TIMEVSev
001B87 CD 29 0D    5179                   CALL	GETIME
001B8A D5          5180   TIME0:          PUSH	DE
001B8B D9          5181                   EXX
001B8C E1          5182                   POP	HL
001B8D AF          5183                   XOR	A
001B8E 4F          5184                   LD	C,A
001B8F C9          5185                   RET
001B90             5186   ;
001B90             5187   ;TIME$ - Return date/time string.
001B90             5188   ;Result is string
001B90             5189   ;
001B90 FD 23       5190   TIMEVSev:         INC	IY		;SKIP $
001B92 CD 3E 0D    5191                   CALL	GETIMS
001B95 3E 80       5192                   LD	A,80H		;MARK STRING
001B97 C9          5193                   RET
001B98             5194   ;
001B98             5195   ;String comparison:
001B98             5196   ;
001B98 CD F5 1F    5197   SLT:            CALL	SCP
001B9B D0          5198                   RET	NC
001B9C 18 1F       5199                   JR	TRUEev
001B9E             5200   ;
001B9E CD F5 1F    5201   SGT:            CALL	SCP
001BA1 C8          5202                   RET	Z
001BA2 D8          5203                   RET	C
001BA3 18 18       5204                   JR	TRUEev
001BA5             5205   ;
001BA5 CD F5 1F    5206   SGE:            CALL	SCP
001BA8 D8          5207                   RET	C
001BA9 18 12       5208                   JR	TRUEev
001BAB             5209   ;
001BAB CD F5 1F    5210   SLE:            CALL	SCP
001BAE 28 0D       5211                   JR	Z,TRUEev
001BB0 D0          5212                   RET	NC
001BB1 18 0A       5213                   JR	TRUEev
001BB3             5214   ;
001BB3 CD F5 1F    5215   SNE:            CALL	SCP
001BB6 C8          5216                   RET	Z
001BB7 18 04       5217                   JR	TRUEev
001BB9             5218   ;
001BB9 CD F5 1F    5219   SEQ:            CALL	SCP
001BBC C0          5220                   RET	NZ
001BBD 3E FF       5221   TRUEev:           LD	A,-1
001BBF D9          5222                   EXX
001BC0 67          5223                   LD	H,A
001BC1 6F          5224                   LD	L,A
001BC2 D9          5225                   EXX
001BC3 67          5226                   LD	H,A
001BC4 6F          5227                   LD	L,A
001BC5 3C          5228                   INC	A
001BC6 4F          5229                   LD	C,A
001BC7 C9          5230                   RET
001BC8             5231   ;
001BC8             5232   ;PI - Return PI (3.141592654)
001BC8             5233   ;Result is floating-point numeric.
001BC8             5234   ;
001BC8 3E 23       5235   PIev:             LD	A,35
001BCA 18 43       5236                   JR	FPP1
001BCC             5237   ;
001BCC             5238   ;ABS - Absolute value
001BCC             5239   ;Result is numeric, variable type.
001BCC             5240   ;
001BCC 3E 10       5241   ABSev:            LD	A,16
001BCE 18 3A       5242                   JR	FPPN
001BD0             5243   ;
001BD0             5244   ;NOT - Complement integer.
001BD0             5245   ;Result is integer numeric.
001BD0             5246   ;
001BD0 3E 1A       5247   CPL_ev:           LD	A,26
001BD2 18 36       5248                   JR	FPPN
001BD4             5249   ;
001BD4             5250   ;DEG - Convert radians to degrees
001BD4             5251   ;Result is floating-point numeric.
001BD4             5252   ;
001BD4 3E 15       5253   DEGev:            LD	A,21
001BD6 18 32       5254                   JR	FPPN
001BD8             5255   ;
001BD8             5256   ;RAD - Convert degrees to radians
001BD8             5257   ;Result is floating-point numeric.
001BD8             5258   ;
001BD8 3E 1B       5259   RADev:            LD	A,27
001BDA 18 2E       5260                   JR	FPPN
001BDC             5261   ;
001BDC             5262   ;SGN - Return -1, 0 or +1
001BDC             5263   ;Result is integer numeric.
001BDC             5264   ;
001BDC 3E 1C       5265   SGNev:            LD	A,28
001BDE 18 2A       5266                   JR	FPPN
001BE0             5267   ;
001BE0             5268   ;INT - Floor function
001BE0             5269   ;Result is integer numeric.
001BE0             5270   ;
001BE0 3E 17       5271   INT_ev:           LD	A,23
001BE2 18 26       5272                   JR	FPPN
001BE4             5273   ;
001BE4             5274   ;SQR - square root
001BE4             5275   ;Result is floating-point numeric.
001BE4             5276   ;
001BE4 3E 1E       5277   SQRev:            LD	A,30
001BE6 18 22       5278                   JR	FPPN
001BE8             5279   ;
001BE8             5280   ;TAN - Tangent function
001BE8             5281   ;Result is floating-point numeric.
001BE8             5282   ;
001BE8 3E 1F       5283   TANev:            LD	A,31
001BEA 18 1E       5284                   JR	FPPN
001BEC             5285   ;
001BEC             5286   ;COS - Cosine function
001BEC             5287   ;Result is floating-point numeric.
001BEC             5288   ;
001BEC 3E 14       5289   COSev:            LD	A,20
001BEE 18 1A       5290                   JR	FPPN
001BF0             5291   ;
001BF0             5292   ;SIN - Sine function
001BF0             5293   ;Result is floating-point numeric.
001BF0             5294   ;
001BF0 3E 1D       5295   SINev:            LD	A,29
001BF2 18 16       5296                   JR	FPPN
001BF4             5297   ;
001BF4             5298   ;EXP - Exponential function
001BF4             5299   ;Result is floating-point numeric.
001BF4             5300   ;
001BF4 3E 16       5301   EXPev:            LD	A,22
001BF6 18 12       5302                   JR	FPPN
001BF8             5303   ;
001BF8             5304   ;LN - Natural log.
001BF8             5305   ;Result is floating-point numeric.
001BF8             5306   ;
001BF8 3E 18       5307   LNev:             LD	A,24
001BFA 18 0E       5308                   JR	FPPN
001BFC             5309   ;
001BFC             5310   ;LOG - base-10 logarithm.
001BFC             5311   ;Result is floating-point numeric.
001BFC             5312   ;
001BFC 3E 19       5313   LOGev:            LD	A,25
001BFE 18 0A       5314                   JR	FPPN
001C00             5315   ;
001C00             5316   ;ASN - Arc-sine
001C00             5317   ;Result is floating-point numeric.
001C00             5318   ;
001C00 3E 12       5319   ASNev:            LD	A,18
001C02 18 06       5320                   JR	FPPN
001C04             5321   ;
001C04             5322   ;ATN - arc-tangent
001C04             5323   ;Result is floating-point numeric.
001C04             5324   ;
001C04 3E 13       5325   ATNev:            LD	A,19
001C06 18 02       5326                   JR	FPPN
001C08             5327   ;
001C08             5328   ;ACS - arc-cosine
001C08             5329   ;Result is floating point numeric.
001C08             5330   ;
001C08 3E 11       5331   ACSev:            LD	A,17
001C0A F5          5332   FPPN:           PUSH	AF
001C0B CD 7A 18    5333                   CALL	ITEMN
001C0E F1          5334                   POP	AF
001C0F CD 15 45    5335   FPP1:           CALL	FPP
001C12 DA 44 3F    5336                   JP	C,ERROR_
001C15 AF          5337                   XOR	A
001C16 C9          5338                   RET
001C17             5339   ;
001C17             5340   ;SFIX - Convert to fixed-point notation
001C17             5341   ;
001C17 3E 26       5342   SFIX:           LD	A,38
001C19 18 F4       5343                   JR	FPP1
001C1B             5344   ;
001C1B             5345   ;SFLOAT - Convert to floating-point notation
001C1B             5346   ;
001C1B 3E 27       5347   SFLOATev:         LD	A,39
001C1D 18 F0       5348                   JR	FPP1
001C1F             5349   ;
001C1F             5350   ;VAL - Return numeric value of string.
001C1F             5351   ;Result is variable type numeric.
001C1F             5352   ;
001C1F CD 69 18    5353   VALev:            CALL	ITEMS
001C22 AF          5354   VAL0:           XOR	A
001C23 12          5355                   LD	(DE),A
001C24 DD 21 00 52 5356                   LD	IX,ACCS
001C28 3E 24       5357                   LD	A,36
001C2A 18 E3       5358                   JR	FPP1
001C2C             5359   ;
001C2C             5360   ;EVAL - Pass string to expression evaluator.
001C2C             5361   ;Result is variable type (numeric or string).
001C2C             5362   ;
001C2C CD 69 18    5363   EVAL_:          CALL	ITEMS
001C2F 3E 0D       5364                   LD	A,CR
001C31 12          5365                   LD	(DE),A
001C32 FD E5       5366                   PUSH	IY
001C34 11 00 52    5367                   LD	DE,ACCS
001C37 FD 21 00 52 5368                   LD	IY,ACCS
001C3B 0E 00       5369                   LD	C,0
001C3D CD 18 44    5370                   CALL	LEXAN2		;TOKENISE
001C40 12          5371                   LD	(DE),A
001C41 13          5372                   INC	DE
001C42 AF          5373                   XOR	A
001C43 CD 19 20    5374                   CALL	PUSHS		;PUT ON STACK
001C46 FD 21 02 00 5375                   LD	IY,2
001C4A FD 39       5376                   ADD	IY,SP
001C4C CD 02 17    5377                   CALL	EXPR
001C4F FD E1       5378                   POP	IY
001C51 FD 39       5379                   ADD	IY,SP
001C53 FD F9       5380                   LD	SP,IY		;ADJUST STACK POINTER
001C55 FD E1       5381                   POP	IY
001C57 08          5382                   EX	AF,AF'
001C58 C9          5383                   RET
001C59             5384   ;
001C59             5385   ;RND - Random number function.
001C59             5386   ; RND gives random integer 0-&FFFFFFFF
001C59             5387   ; RND(-n) seeds random number & returns -n.
001C59             5388   ; RND(0) returns last value in RND(1) form.
001C59             5389   ; RND(1) returns floating-point 0-0.99999999.
001C59             5390   ; RND(n) returns random integer 1-n.
001C59             5391   ;
001C59 DD 21 F6 54 5392   RND:            LD	IX,RANDOM
001C5D CD 0B 45    5393                   CALL	NXT
001C60 FE 28       5394                   CP	'('
001C62 28 1C       5395                   JR	Z,RND5		;ARGUMENT FOLLOWS
001C64 CD 2F 19    5396                   CALL	LOAD5
001C67 CB 19       5397   RND1:           RR	C
001C69 06 20       5398                   LD	B,32
001C6B D9          5399   RND2:           EXX			;CALCULATE NEXT
001C6C ED 6A       5400                   ADC	HL,HL
001C6E D9          5401                   EXX
001C6F ED 6A       5402                   ADC	HL,HL
001C71 CB 5D       5403                   BIT	3,L
001C73 28 01       5404                   JR	Z,RND3
001C75 3F          5405                   CCF
001C76 10 F3       5406   RND3:           DJNZ	RND2
001C78 CB 11       5407   RND4:           RL	C		;SAVE CARRY
001C7A CD 06 32    5408                   CALL	STORE5		;STORE NEW NUMBER
001C7D AF          5409                   XOR	A
001C7E 4F          5410                   LD	C,A
001C7F C9          5411                   RET
001C80 CD 60 18    5412   RND5:           CALL	ITEMI
001C83 DD 21 F6 54 5413                   LD	IX,RANDOM
001C87 CB 7C       5414                   BIT	7,H		;NEGATIVE?
001C89 37          5415                   SCF
001C8A 20 EC       5416                   JR	NZ,RND4		;SEED
001C8C CD 59 1F    5417                   CALL	TEST
001C8F F5          5418                   PUSH	AF
001C90 41          5419                   LD	B,C
001C91 EB          5420                   EX	DE,HL
001C92 D9          5421                   EXX
001C93 EB          5422                   EX	DE,HL
001C94 CD 2F 19    5423                   CALL	LOAD5
001C97 C4 67 1C    5424                   CALL	NZ,RND1		;NEXT IF NON-ZERO
001C9A D9          5425                   EXX			;SCRAMBLE (CARE!)
001C9B 0E 7F       5426                   LD	C,7FH
001C9D CB 7C       5427   RND6:           BIT	7,H		;FLOAT
001C9F 20 08       5428                   JR	NZ,RND7
001CA1 D9          5429                   EXX
001CA2 29          5430                   ADD	HL,HL
001CA3 D9          5431                   EXX
001CA4 ED 6A       5432                   ADC	HL,HL
001CA6 0D          5433                   DEC	C
001CA7 20 F4       5434                   JR	NZ,RND6
001CA9 CB BC       5435   RND7:           RES	7,H		;POSITIVE 0-0.999999
001CAB F1          5436                   POP	AF
001CAC C8          5437                   RET	Z		;ZERO ARGUMENT
001CAD D9          5438                   EXX
001CAE 7B          5439                   LD	A,E
001CAF 3D          5440                   DEC	A
001CB0 B2          5441                   OR	D
001CB1 D9          5442                   EXX
001CB2 B3          5443                   OR	E
001CB3 B2          5444                   OR	D
001CB4 C8          5445                   RET	Z		;ARGUMENT=1
001CB5 06 00       5446                   LD	B,0		;INTEGER MARKER
001CB7 3E 0A       5447                   LD	A,10
001CB9 CD 15 45    5448                   CALL	FPP		;MULTIPLY
001CBC DA 44 3F    5449                   JP	C,ERROR_
001CBF CD 17 1C    5450                   CALL	SFIX
001CC2 C3 56 18    5451                   JP	ADD1ev
001CC5             5452   ;
001CC5             5453   ;SUMLEN(array())
001CC5             5454   ;
001CC5 FD 23       5455   SUMLEN:         INC	IY		;Skip LEN
001CC7 CD D7 19    5456                   CALL	GETARB
001CCA CB 78       5457                   BIT	7,B
001CCC CA 6E 18    5458                   JP	Z,MISMATev	;Type mismatch
001CCF CD A4 19    5459                   CALL	ARRLEN
001CD2 E5          5460                   PUSH	HL
001CD3 DD E1       5461                   POP	IX		;IX addresses array
001CD5 AF          5462                   XOR	A
001CD6 67          5463                   LD	H,A
001CD7 6F          5464                   LD	L,A
001CD8 47          5465                   LD	B,A
001CD9 DD 4E 00    5466   SUMLN1:         LD	C,(IX)
001CDC 09          5467                   ADD	HL,BC
001CDD 0E 04       5468                   LD	C,4
001CDF DD 09       5469                   ADD	IX,BC
001CE1 1B          5470                   DEC	DE		;Count elements
001CE2 7A          5471                   LD	A,D
001CE3 B3          5472                   OR	E
001CE4 20 F3       5473                   JR	NZ,SUMLN1
001CE6 C3 50 1B    5474                   JP	COUNT1
001CE9             5475   ;
001CE9             5476   ;SUM(array())
001CE9             5477   ;
001CE9 CD 0B 45    5478   SUM:            CALL	NXT
001CEC FE A9       5479                   CP	TLEN
001CEE 28 D5       5480                   JR	Z,SUMLEN
001CF0 CD D7 19    5481                   CALL	GETARB
001CF3 CB 78       5482                   BIT	7,B
001CF5 20 27       5483                   JR	NZ,SUMSTR
001CF7 C5          5484                   PUSH	BC
001CF8 CD A4 19    5485                   CALL	ARRLEN
001CFB E5          5486                   PUSH	HL
001CFC DD E1       5487                   POP	IX		;IX addresses array
001CFE CD F8 1F    5488                   CALL	ZERO
001D01 F1          5489                   POP	AF		;A = element size
001D02 D5          5490   SUMUP:          PUSH	DE
001D03 F5          5491                   PUSH	AF
001D04 CD E7 19    5492                   CALL	DLOADN
001D07 3E 0B       5493                   LD	A,11
001D09 CD 15 45    5494                   CALL	FPP
001D0C DA 44 3F    5495                   JP	C,ERROR_
001D0F F1          5496                   POP	AF
001D10 16 00       5497                   LD	D,0
001D12 5F          5498                   LD	E,A
001D13 DD 19       5499                   ADD	IX,DE		;Bump to next element
001D15 D1          5500                   POP	DE
001D16 1B          5501                   DEC	DE		;Count elements
001D17 47          5502                   LD	B,A
001D18 7A          5503                   LD	A,D
001D19 B3          5504                   OR	E
001D1A 78          5505                   LD	A,B
001D1B 20 E5       5506                   JR	NZ,SUMUP
001D1D C9          5507                   RET
001D1E             5508   ;
001D1E             5509   ;SUM(string array)
001D1E             5510   ;
001D1E CD A4 19    5511   SUMSTR:         CALL	ARRLEN
001D21 E5          5512                   PUSH	HL
001D22 DD E1       5513                   POP	IX		;IX addresses array
001D24 EB          5514                   EX	DE,HL
001D25 11 00 52    5515                   LD	DE,ACCS
001D28 06 00       5516                   LD	B,0
001D2A E5          5517   SUMST1:         PUSH	HL
001D2B DD 4E 00    5518                   LD	C,(IX)
001D2E 79          5519                   LD	A,C
001D2F B7          5520                   OR	A
001D30 28 0E       5521                   JR	Z,SUMST2
001D32 83          5522                   ADD	A,E
001D33 3E 13       5523                   LD	A,19
001D35 DA 44 3F    5524                   JP	C,ERROR_		;"String too long"
001D38 DD 6E 02    5525                   LD	L,(IX+2)
001D3B DD 66 03    5526                   LD	H,(IX+3)
001D3E ED B0       5527                   LDIR
001D40 E1          5528   SUMST2:         POP	HL
001D41 0E 04       5529                   LD	C,4
001D43 DD 09       5530                   ADD	IX,BC
001D45 2B          5531                   DEC	HL		;Count elements
001D46 7C          5532                   LD	A,H
001D47 B5          5533                   OR	L
001D48 20 E0       5534                   JR	NZ,SUMST1
001D4A F6 80       5535                   OR	80H
001D4C C9          5536                   RET
001D4D             5537   ;
001D4D             5538   ;MOD(array())
001D4D             5539   ;
001D4D CD D7 19    5540   MODFUN:         CALL	GETARB
001D50 CB 78       5541                   BIT	7,B
001D52 C2 6E 18    5542                   JP	NZ,MISMATev
001D55 C5          5543                   PUSH	BC
001D56 CD A4 19    5544                   CALL	ARRLEN
001D59 E5          5545                   PUSH	HL
001D5A DD E1       5546                   POP	IX		;IX addresses array
001D5C CD F8 1F    5547                   CALL	ZERO
001D5F F1          5548                   POP	AF		;A = element size
001D60 D5          5549   MODUP:          PUSH	DE
001D61 F5          5550                   PUSH	AF
001D62 C5          5551                   PUSH	BC
001D63 E5          5552                   PUSH	HL
001D64 D9          5553                   EXX
001D65 E5          5554                   PUSH	HL
001D66 D9          5555                   EXX
001D67 CD 25 19    5556                   CALL	LOADN
001D6A AF          5557                   XOR	A
001D6B 47          5558                   LD	B,A
001D6C 57          5559                   LD	D,A
001D6D 5F          5560                   LD	E,A
001D6E D9          5561                   EXX
001D6F 57          5562                   LD	D,A
001D70 1E 02       5563                   LD	E,2
001D72 D9          5564                   EXX
001D73 3E 0E       5565                   LD	A,14
001D75 DD E5       5566                   PUSH	IX
001D77 CD 15 45    5567                   CALL	FPP		;Square
001D7A DD E1       5568                   POP	IX
001D7C DA 44 3F    5569                   JP	C,ERROR_
001D7F D9          5570                   EXX
001D80 EB          5571                   EX	DE,HL
001D81 E1          5572                   POP	HL
001D82 D9          5573                   EXX
001D83 EB          5574                   EX	DE,HL
001D84 E1          5575                   POP	HL
001D85 79          5576                   LD	A,C
001D86 C1          5577                   POP	BC
001D87 47          5578                   LD	B,A
001D88 3E 0B       5579                   LD	A,11
001D8A CD 15 45    5580                   CALL	FPP		;Accumulate
001D8D DA 44 3F    5581                   JP	C,ERROR_
001D90 F1          5582                   POP	AF
001D91 16 00       5583                   LD	D,0
001D93 5F          5584                   LD	E,A
001D94 DD 19       5585                   ADD	IX,DE		;Bump to next element
001D96 D1          5586                   POP	DE
001D97 1B          5587                   DEC	DE		;Count elements
001D98 47          5588                   LD	B,A
001D99 7A          5589                   LD	A,D
001D9A B3          5590                   OR	E
001D9B 78          5591                   LD	A,B
001D9C 20 C2       5592                   JR	NZ,MODUP
001D9E 3E 1E       5593                   LD	A,30
001DA0 CD 15 45    5594                   CALL	FPP		;Square root
001DA3 AF          5595                   XOR	A
001DA4 C9          5596                   RET
001DA5             5597   ;
001DA5             5598   ;INSTR - String search.
001DA5             5599   ;Result is integer numeric.
001DA5             5600   ;
001DA5 CD 3C 18    5601   INSTR:          CALL	EXPRS		;STRING TO SEARCH
001DA8 CD A2 20    5602                   CALL	COMMA
001DAB CD 19 20    5603                   CALL	PUSHS		;SAVE STRING ON STACK
001DAE CD 3C 18    5604                   CALL	EXPRS		;SUB-STRING
001DB1 C1          5605                   POP	BC
001DB2 21 00 00    5606                   LD	HL,0
001DB5 39          5607                   ADD	HL,SP		;HL ADDRESSES MAIN
001DB6 C5          5608                   PUSH	BC		;C = MAIN STRING LENGTH
001DB7 43          5609                   LD	B,E		;B = SUB-STRING LENGTH
001DB8 CD 0B 45    5610                   CALL	NXT
001DBB FE 2C       5611                   CP	','
001DBD 3E 00       5612                   LD	A,0
001DBF 20 17       5613                   JR	NZ,INSTR1
001DC1 FD 23       5614                   INC	IY		;SKIP COMMA
001DC3 C5          5615                   PUSH	BC		;SAVE LENGTHS
001DC4 E5          5616                   PUSH	HL		;SAVE MAIN ADDRESS
001DC5 CD 19 20    5617                   CALL	PUSHS
001DC8 CD 33 18    5618                   CALL	EXPRI
001DCB C1          5619                   POP	BC
001DCC CD 37 20    5620                   CALL	POPS
001DCF E1          5621                   POP	HL		;RESTORE MAIN ADDRESS
001DD0 C1          5622                   POP	BC		;RESTORE LENGTHS
001DD1 D9          5623                   EXX
001DD2 7D          5624                   LD	A,L
001DD3 D9          5625                   EXX
001DD4 B7          5626                   OR	A
001DD5 28 01       5627                   JR	Z,INSTR1
001DD7 3D          5628                   DEC	A
001DD8 11 00 52    5629   INSTR1:         LD	DE,ACCS		;DE ADDRESSES SUB
001DDB CD F2 1D    5630                   CALL	SEARCH
001DDE D1          5631                   POP	DE
001DDF 28 03       5632                   JR	Z,INSTR2	;N.B. CARRY CLEARED
001DE1 ED 62       5633                   SBC	HL,HL
001DE3 39          5634                   ADD	HL,SP
001DE4 ED 72       5635   INSTR2:         SBC	HL,SP
001DE6 EB          5636                   EX	DE,HL
001DE7 26 00       5637                   LD	H,0
001DE9 39          5638                   ADD	HL,SP
001DEA F9          5639                   LD	SP,HL
001DEB EB          5640                   EX	DE,HL
001DEC CD AE 20    5641                   CALL	BRAKET
001DEF C3 50 1B    5642                   JP	COUNT1
001DF2             5643   ;
001DF2             5644   ;SEARCH - Search string for sub-string
001DF2             5645   ;   Inputs: Main string at HL length C
001DF2             5646   ;           Sub-string at DE length B
001DF2             5647   ;           Starting offset A
001DF2             5648   ;  Outputs: NZ - not found
001DF2             5649   ;           Z - found at location HL-1
001DF2             5650   ;           Carry always cleared
001DF2             5651   ;
001DF2 C5          5652   SEARCH:         PUSH	BC
001DF3 06 00       5653                   LD	B,0
001DF5 4F          5654                   LD	C,A
001DF6 09          5655                   ADD	HL,BC		;NEW START ADDRESS
001DF7 C1          5656                   POP	BC
001DF8 91          5657                   SUB	C
001DF9 30 28       5658                   JR	NC,SRCH4
001DFB ED 44       5659                   NEG
001DFD 4F          5660                   LD	C,A		;REMAINING LENGTH
001DFE 1A          5661   SRCH1ev:          LD	A,(DE)
001DFF C5          5662                   PUSH	BC
001E00 06 00       5663                   LD	B,0
001E02 ED B1       5664                   CPIR			;FIND FIRST CHARACTER
001E04 79          5665                   LD	A,C
001E05 C1          5666                   POP	BC
001E06 20 1B       5667                   JR	NZ,SRCH4
001E08 4F          5668                   LD	C,A
001E09 05          5669                   DEC	B		;Bug fix
001E0A B8          5670                   CP	B		;Bug fix
001E0B 04          5671                   INC	B		;Bug fix
001E0C 38 15       5672                   JR	C,SRCH4		;Bug fix
001E0E C5          5673                   PUSH	BC
001E0F D5          5674                   PUSH	DE
001E10 E5          5675                   PUSH	HL
001E11 05          5676                   DEC	B
001E12 28 08       5677                   JR	Z,SRCH3		;FOUND !
001E14 13          5678   SRCH2ev:          INC	DE
001E15 1A          5679                   LD	A,(DE)
001E16 BE          5680                   CP	(HL)
001E17 20 03       5681                   JR	NZ,SRCH3
001E19 23          5682                   INC	HL
001E1A 10 F8       5683                   DJNZ	SRCH2ev
001E1C E1          5684   SRCH3:          POP	HL
001E1D D1          5685                   POP	DE
001E1E C1          5686                   POP	BC
001E1F 20 DD       5687                   JR	NZ,SRCH1ev
001E21 AF          5688                   XOR	A		;Z, NC
001E22 C9          5689                   RET			;FOUND
001E23             5690   ;
001E23 F6 FF       5691   SRCH4:          OR	0FFH		;NZ, NC
001E25 C9          5692                   RET			;NOT FOUND
001E26             5693   ;
001E26             5694   ;CHR$ - Return character with given ASCII value.
001E26             5695   ;Result is string.
001E26             5696   ;
001E26 CD 60 18    5697   CHRS:           CALL	ITEMI
001E29 D9          5698                   EXX
001E2A 7D          5699                   LD	A,L
001E2B 18 0A       5700                   JR	GET1
001E2D             5701   ;
001E2D             5702   ;GET$ - Return key pressed as string, or read from file
001E2D             5703   ;Result is string.
001E2D             5704   ;
001E2D CD 0B 45    5705   GETS:           CALL	NXT
001E30 FE 23       5706                   CP	'#'
001E32 28 06       5707                   JR	Z,GET2
001E34 CD DE 05    5708                   CALL	OSRDCH
001E37 37          5709   GET1:           SCF
001E38 18 5B       5710                   JR	INKEY1
001E3A             5711   ;
001E3A CD DB 36    5712   GET2:           CALL	CHNL		;File channel
001E3D CD 0B 45    5713                   CALL	NXT
001E40 FE 0F       5714                   CP	TBY
001E42 28 04       5715                   JR	Z,GET3
001E44 FE B8       5716                   CP	TTO
001E46 20 0C       5717                   JR	NZ,GET4
001E48 FD 23       5718   GET3:           INC	IY
001E4A F5          5719                   PUSH	AF
001E4B D5          5720                   PUSH	DE
001E4C CD 60 18    5721                   CALL	ITEMI		;Get BY or TO qualifier
001E4F D9          5722                   EXX
001E50 44          5723                   LD	B,H
001E51 4D          5724                   LD	C,L
001E52 D1          5725                   POP	DE
001E53 F1          5726                   POP	AF
001E54 21 00 52    5727   GET4:           LD	HL,ACCS
001E57 FE B8       5728                   CP	TTO
001E59 28 08       5729                   JR	Z,GET5
001E5B 51          5730                   LD	D,C		;Maximum count
001E5C 01 00 01    5731                   LD	BC,100H		;Default
001E5F FE 0F       5732                   CP	TBY
001E61 28 04       5733                   JR	Z,GET6
001E63 16 00       5734   GET5:           LD	D,0
001E65 CB C8       5735                   SET	1,B		;Flag no count
001E67 C5          5736   GET6:           PUSH	BC
001E68 CD 5B 06    5737                   CALL	OSBGET
001E6B C1          5738                   POP	BC
001E6C 38 1C       5739                   JR	C,GET9		;EOF
001E6E CB 48       5740                   BIT	1,B
001E70 28 13       5741                   JR	Z,GET8
001E72 B9          5742                   CP	C
001E73 28 15       5743                   JR	Z,GET9		;NUL (or supplied term)
001E75 CB 78       5744                   BIT	7,B
001E77 20 08       5745                   JR	NZ,GET7
001E79 CB 40       5746                   BIT	0,B
001E7B 28 08       5747                   JR	Z,GET8
001E7D FE 0A       5748                   CP	LF
001E7F 28 09       5749                   JR	Z,GET9		;LF
001E81 FE 0D       5750   GET7:           CP	CR
001E83 28 05       5751                   JR	Z,GET9		;CR
001E85 77          5752   GET8:           LD	(HL),A
001E86 2C          5753                   INC	L
001E87 15          5754                   DEC	D
001E88 20 DD       5755                   JR	NZ,GET6
001E8A EB          5756   GET9:           EX	DE,HL
001E8B 3E 80       5757                   LD	A,80H
001E8D C9          5758                   RET
001E8E             5759   ;
001E8E             5760   ;INKEY$ - Wait up to n centiseconds for keypress.
001E8E             5761   ; Return key pressed as string or null
001E8E             5762   ; string if time elapsed.
001E8E             5763   ;Result is string.
001E8E             5764   ;
001E8E CD 60 18    5765   INKEYS:         CALL	ITEMI
001E91 D9          5766                   EXX
001E92 CD 91 0D    5767                   CALL	OSKEY
001E95 11 00 52    5768   INKEY1:         LD	DE,ACCS
001E98 12          5769                   LD	(DE),A
001E99 3E 80       5770                   LD	A,80H
001E9B D0          5771                   RET	NC
001E9C 1C          5772                   INC	E
001E9D C9          5773                   RET
001E9E             5774   ;
001E9E             5775   ;MID$ - Return sub-string.
001E9E             5776   ;Result is string.
001E9E             5777   ;
001E9E CD 3C 18    5778   MIDS:           CALL	EXPRS
001EA1 CD A2 20    5779                   CALL	COMMA
001EA4 CD 19 20    5780                   CALL	PUSHS		;SAVE STRING ON STACK
001EA7 CD 33 18    5781                   CALL	EXPRI
001EAA C1          5782                   POP	BC
001EAB CD 37 20    5783                   CALL	POPS
001EAE D9          5784                   EXX
001EAF 7D          5785                   LD	A,L
001EB0 D9          5786                   EXX
001EB1 B7          5787                   OR	A
001EB2 28 0D       5788                   JR	Z,MIDS1
001EB4 3D          5789                   DEC	A
001EB5 6F          5790                   LD	L,A
001EB6 93          5791                   SUB	E
001EB7 1E 00       5792                   LD	E,0
001EB9 30 06       5793                   JR	NC,MIDS1
001EBB ED 44       5794                   NEG
001EBD 4F          5795                   LD	C,A
001EBE CD 1D 1F    5796                   CALL	RIGHT1
001EC1 CD 0B 45    5797   MIDS1:          CALL	NXT
001EC4 FE 2C       5798                   CP	','
001EC6 28 1A       5799                   JR	Z,LEFT1
001EC8 CD AE 20    5800                   CALL	BRAKET
001ECB 3E 80       5801                   LD	A,80H
001ECD C9          5802                   RET
001ECE             5803   ;
001ECE             5804   ;LEFT$ - Return left part of string.
001ECE             5805   ;Carry cleared if entire string returned.
001ECE             5806   ;Result is string.
001ECE             5807   ;
001ECE CD 3C 18    5808   LEFTS:          CALL	EXPRS
001ED1 CD 0B 45    5809                   CALL	NXT
001ED4 FE 2C       5810                   CP	','
001ED6 28 0A       5811                   JR	Z,LEFT1
001ED8 CD AE 20    5812                   CALL	BRAKET
001EDB 7B          5813                   LD	A,E
001EDC B7          5814                   OR	A
001EDD 28 1A       5815                   JR	Z,LEFT3
001EDF 1D          5816                   DEC	E
001EE0 18 17       5817                   JR	LEFT3
001EE2             5818   ;
001EE2 FD 23       5819   LEFT1:          INC	IY
001EE4 CD 19 20    5820                   CALL	PUSHS		;SAVE STRING ON STACK
001EE7 CD 33 18    5821                   CALL	EXPRI
001EEA C1          5822                   POP	BC
001EEB CD 37 20    5823                   CALL	POPS
001EEE CD AE 20    5824                   CALL	BRAKET
001EF1 D9          5825                   EXX
001EF2 7D          5826                   LD	A,L
001EF3 D9          5827                   EXX
001EF4 BB          5828                   CP	E
001EF5 30 02       5829                   JR	NC,LEFT3
001EF7 6B          5830                   LD	L,E		;FOR RIGHT$
001EF8 5F          5831   LEFT2:          LD	E,A
001EF9 3E 80       5832   LEFT3:          LD	A,80H		;STRING MARKER
001EFB C9          5833                   RET
001EFC             5834   ;
001EFC             5835   ;RIGHT$ - Return right part of string.
001EFC             5836   ;Result is string.
001EFC             5837   ;
001EFC CD 3C 18    5838   RIGHTS:         CALL	EXPRS
001EFF CD 0B 45    5839                   CALL	NXT
001F02 FE 2C       5840                   CP	','
001F04 28 0C       5841                   JR	Z,RIGHT0
001F06 CD AE 20    5842                   CALL	BRAKET
001F09 7B          5843                   LD	A,E
001F0A B7          5844                   OR	A
001F0B 28 EC       5845                   JR	Z,LEFT3
001F0D 3D          5846                   DEC	A
001F0E 0E 01       5847                   LD	C,1
001F10 18 0A       5848                   JR	RIGHT2
001F12             5849   ;
001F12 CD E2 1E    5850   RIGHT0:         CALL	LEFT1
001F15 D0          5851                   RET	NC
001F16 1C          5852                   INC	E
001F17 1D          5853                   DEC	E
001F18 C8          5854                   RET	Z
001F19 4B          5855                   LD	C,E
001F1A 7D          5856                   LD	A,L
001F1B 93          5857                   SUB	E
001F1C 6F          5858   RIGHT2:         LD	L,A
001F1D 06 00       5859   RIGHT1:         LD	B,0
001F1F 62          5860                   LD	H,D
001F20 58          5861                   LD	E,B
001F21 ED B0       5862                   LDIR			;MOVE
001F23 3E 80       5863                   LD	A,80H
001F25 C9          5864                   RET
001F26             5865   ;
001F26             5866   ;STRING$ - Return n concatenations of a string.
001F26             5867   ;Result is string.
001F26             5868   ;
001F26 CD 33 18    5869   STRING_:        CALL	EXPRI
001F29 CD A2 20    5870                   CALL	COMMA
001F2C D9          5871                   EXX
001F2D 7D          5872                   LD	A,L
001F2E D9          5873                   EXX
001F2F F5          5874                   PUSH	AF
001F30 CD 3C 18    5875                   CALL	EXPRS
001F33 CD AE 20    5876                   CALL	BRAKET
001F36 F1          5877                   POP	AF
001F37 B7          5878                   OR	A
001F38 28 BE       5879                   JR	Z,LEFT2		;N=0
001F3A 3D          5880                   DEC	A
001F3B 4F          5881                   LD	C,A
001F3C 3E 80       5882                   LD	A,80H		;STRING MARKER
001F3E C8          5883                   RET	Z
001F3F 1C          5884                   INC	E
001F40 1D          5885                   DEC	E
001F41 C8          5886                   RET	Z		;NULL STRING
001F42 43          5887                   LD	B,E
001F43 62          5888                   LD	H,D
001F44 2E 00       5889                   LD	L,0
001F46 C5          5890   STRIN1:         PUSH	BC
001F47 7E          5891   STRIN2:         LD	A,(HL)
001F48 23          5892                   INC	HL
001F49 12          5893                   LD	(DE),A
001F4A 1C          5894                   INC	E
001F4B 3E 13       5895                   LD	A,19
001F4D CA 44 3F    5896                   JP	Z,ERROR_		;"String too long"
001F50 10 F5       5897                   DJNZ	STRIN2
001F52 C1          5898                   POP	BC
001F53 0D          5899                   DEC	C
001F54 20 F0       5900                   JR	NZ,STRIN1
001F56 3E 80       5901                   LD	A,80H
001F58 C9          5902                   RET
001F59             5903   ;
001F59             5904   ;SUBROUTINES
001F59             5905   ;
001F59             5906   ;TEST - Test HLH'L' for zero
001F59             5907   ;  Outputs: Z-flag set & A=0 if zero
001F59             5908   ; Destroys: A,F
001F59             5909   ;
001F59 7C          5910   TEST:           LD	A,H
001F5A B5          5911                   OR	L
001F5B D9          5912                   EXX
001F5C B4          5913                   OR	H
001F5D B5          5914                   OR	L
001F5E D9          5915                   EXX
001F5F C9          5916                   RET
001F60             5917   ;
001F60             5918   ;DECODE - Decode line number in pseudo-binary.
001F60             5919   ;   Inputs: IY = Text pointer.
001F60             5920   ;  Outputs: HL=0, H'L'=line number, C=0.
001F60             5921   ; Destroys: A,C,H,L,H',L',IY,F
001F60             5922   ;
001F60 D9          5923   DECODE:         EXX
001F61 FD 7E 00    5924                   LD	A,(IY)
001F64 FD 23       5925                   INC	IY
001F66 17          5926                   RLA
001F67 17          5927                   RLA
001F68 67          5928                   LD	H,A
001F69 E6 C0       5929                   AND	0C0H
001F6B FD AE 00    5930                   XOR	(IY)
001F6E FD 23       5931                   INC	IY
001F70 6F          5932                   LD	L,A
001F71 7C          5933                   LD	A,H
001F72 17          5934                   RLA
001F73 17          5935                   RLA
001F74 E6 C0       5936                   AND	0C0H
001F76 FD AE 00    5937                   XOR	(IY)
001F79 FD 23       5938                   INC	IY
001F7B 67          5939                   LD	H,A
001F7C D9          5940                   EXX
001F7D AF          5941                   XOR	A
001F7E 4F          5942                   LD	C,A
001F7F 67          5943                   LD	H,A
001F80 6F          5944                   LD	L,A
001F81 C9          5945                   RET
001F82             5946   ;
001F82             5947   ;HEXSTR - convert numeric value to HEX string.
001F82             5948   ;   Inputs: HLH'L'C = integer or floating-point number
001F82             5949   ;  Outputs: String in string accumulator.
001F82             5950   ;           E = string length. D = ACCS/256
001F82             5951   ;
001F82 FD 23       5952   HEXSTS:         INC	IY		;SKIP TILDE
001F84 CD 7A 18    5953                   CALL	ITEMN
001F87 CD 8D 1F    5954                   CALL	HEXSTR
001F8A 3E 80       5955                   LD	A,80H
001F8C C9          5956                   RET
001F8D             5957   ;
001F8D CD 17 1C    5958   HEXSTR:         CALL	SFIX
001F90 01 08 00    5959                   LD	BC,8
001F93 11 00 52    5960                   LD	DE,ACCS
001F96 C5          5961   HEXST1:         PUSH	BC
001F97 06 04       5962                   LD	B,4
001F99 AF          5963                   XOR	A
001F9A D9          5964   HEXST2:         EXX
001F9B 29          5965                   ADD	HL,HL
001F9C D9          5966                   EXX
001F9D ED 6A       5967                   ADC	HL,HL
001F9F 17          5968                   RLA
001FA0 10 F8       5969                   DJNZ	HEXST2
001FA2 C1          5970                   POP	BC
001FA3 0D          5971                   DEC	C
001FA4 F8          5972                   RET	M
001FA5 28 06       5973                   JR	Z,HEXST3
001FA7 B7          5974                   OR	A
001FA8 20 03       5975                   JR	NZ,HEXST3
001FAA B8          5976                   CP	B
001FAB 28 E9       5977                   JR	Z,HEXST1
001FAD C6 90       5978   HEXST3:         ADD	A,90H
001FAF 27          5979                   DAA
001FB0 CE 40       5980                   ADC	A,40H
001FB2 27          5981                   DAA
001FB3 12          5982                   LD	(DE),A
001FB4 13          5983                   INC	DE
001FB5 47          5984                   LD	B,A
001FB6 18 DE       5985                   JR	HEXST1
001FB8             5986   ;
001FB8             5987   ;Function STR - convert numeric value to ASCII string.
001FB8             5988   ;   Inputs: HLH'L'C = integer or floating-point number.
001FB8             5989   ;  Outputs: String in string accumulator.
001FB8             5990   ;           E = length, D = ACCS/256
001FB8             5991   ;           A = 80H (type=string)
001FB8             5992   ;
001FB8             5993   ;First normalise for decimal output:
001FB8             5994   ;
001FB8 CD 0B 45    5995   STRS:           CALL	NXT
001FBB FE 7E       5996                   CP	'~'
001FBD 28 C3       5997                   JR	Z,HEXSTS
001FBF CD 7A 18    5998                   CALL	ITEMN
001FC2 DD 21 00 54 5999                   LD	IX,STAVAR
001FC6 DD 7E 03    6000                   LD	A,(IX+3)
001FC9 B7          6001                   OR	A
001FCA DD 21 F2 1F 6002                   LD	IX,G9-1		;G9 FORMAT
001FCE 28 04       6003                   JR	Z,STR0
001FD0 DD 21 00 54 6004   STR:            LD	IX,STAVAR
001FD4 11 00 52    6005   STR0:           LD	DE,ACCS
001FD7 3E 25       6006                   LD	A,37
001FD9 CD 15 45    6007                   CALL	FPP
001FDC DA 44 3F    6008                   JP	C,ERROR_
001FDF DD CB 02 46 6009                   BIT	0,(IX+2)
001FE3 3E 80       6010   STR1:           LD	A,80H		;STRING MARKER
001FE5 C8          6011                   RET	Z
001FE6 79          6012                   LD	A,C
001FE7 C6 04       6013                   ADD	A,4
001FE9 BB          6014   STR2:           CP	E
001FEA 28 F7       6015                   JR	Z,STR1
001FEC EB          6016                   EX	DE,HL
001FED 36 20       6017                   LD	(HL),' '	;TRAILING SPACE
001FEF 23          6018                   INC	HL
001FF0 EB          6019                   EX	DE,HL
001FF1 18 F6       6020                   JR	STR2
001FF3             6021   ;
001FF3 09 00       6022   G9:             DW	9
001FF5             6023   ;
001FF5             6024   ;STRING COMPARE
001FF5             6025   ;Compare string (DE) length B with string (HL) length C.
001FF5             6026   ;Result preset to false.
001FF5             6027   ;
001FF5 CD 02 20    6028   SCP:            CALL	SCP0
001FF8 3E 00       6029   ZERO:           LD	A,0
001FFA D9          6030                   EXX
001FFB 67          6031                   LD	H,A
001FFC 6F          6032                   LD	L,A
001FFD D9          6033                   EXX
001FFE 67          6034                   LD	H,A
001FFF 6F          6035                   LD	L,A
002000 4F          6036                   LD	C,A
002001 C9          6037                   RET
002002             6038   ;
002002 04          6039   SCP0:           INC	B
002003 0C          6040                   INC	C
002004 05          6041   SCP1:           DEC	B
002005 28 0A       6042                   JR	Z,SCP2
002007 0D          6043                   DEC	C
002008 28 0C       6044                   JR	Z,SCP3
00200A 1A          6045                   LD	A,(DE)
00200B BE          6046                   CP	(HL)
00200C C0          6047                   RET	NZ
00200D 13          6048                   INC	DE
00200E 23          6049                   INC	HL
00200F 18 F3       6050                   JR	SCP1
002011 B7          6051   SCP2:           OR	A
002012 0D          6052                   DEC	C
002013 C8          6053                   RET	Z
002014 37          6054                   SCF
002015 C9          6055                   RET
002016 B7          6056   SCP3:           OR	A
002017 0C          6057                   INC	C
002018 C9          6058                   RET
002019             6059   ;
002019             6060   ;PUSH$ - SAVE STRING ON STACK.
002019             6061   ;   Inputs: String in string accumulator.
002019             6062   ;           E = string length.
002019             6063   ;           A - saved on stack.
002019             6064   ; Destroys: B,C,D,E,H,L,IX,SP,F
002019             6065   ;
002019 21 00 52    6066   PUSHS:          LD	HL,ACCS
00201C CD 86 32    6067                   CALL	CHECK
00201F DD E1       6068                   POP	IX		;RETURN ADDRESS
002021 B7          6069                   OR	A		;CLEAR CARRY
002022 54          6070                   LD	D,H
002023 4B          6071                   LD	C,E
002024 ED 52       6072                   SBC	HL,DE
002026 39          6073                   ADD	HL,SP
002027 F9          6074                   LD	SP,HL
002028 47          6075                   LD	B,A
002029 C5          6076                   PUSH	BC
00202A 28 09       6077                   JR	Z,PUSHS1	;ZERO LENGTH
00202C EB          6078                   EX	DE,HL
00202D 06 00       6079                   LD	B,0
00202F 68          6080                   LD	L,B		;L=0
002030 ED B0       6081                   LDIR			;COPY TO STACK
002032 CD 86 32    6082                   CALL	CHECK
002035 DD E9       6083   PUSHS1:         JP	(IX)		;"RETURN"
002037             6084   ;
002037             6085   ;POP$ - RESTORE STRING FROM STACK.
002037             6086   ;   Inputs: C = string length.
002037             6087   ;  Outputs: String in string accumulator.
002037             6088   ;           E = string length.
002037             6089   ; Destroys: B,C,D,E,H,L,IX,SP,F
002037             6090   ;
002037 DD E1       6091   POPS:           POP	IX		;RETURN ADDRESS
002039 21 00 00    6092                   LD	HL,0
00203C 44          6093                   LD	B,H		;B=0
00203D 39          6094                   ADD	HL,SP
00203E 11 00 52    6095                   LD	DE,ACCS
002041 0C          6096                   INC	C
002042 0D          6097                   DEC	C
002043 28 02       6098                   JR	Z,POPS1		;ZERO LENGTH
002045 ED B0       6099                   LDIR			;COPY FROM STACK
002047 F9          6100   POPS1:          LD	SP,HL
002048 DD E9       6101                   JP	(IX)		;"RETURN"
00204A             6102   ;
00204A FD 7E 00    6103   BINDIG:         LD	A,(IY)
00204D FE 30       6104                   CP	'0'
00204F D8          6105                   RET	C
002050 FE 32       6106                   CP	'1'+1
002052 3F          6107                   CCF
002053 D8          6108                   RET	C
002054 D6 30       6109                   SUB	'0'
002056 C9          6110                   RET
002057             6111   ;
002057 FD 7E 00    6112   HEXDIG:         LD	A,(IY)
00205A FE 30       6113                   CP	'0'
00205C D8          6114                   RET	C
00205D FE 3A       6115                   CP	'9'+1
00205F 3F          6116                   CCF
002060 D0          6117                   RET	NC
002061 FE 41       6118                   CP	'A'
002063 D8          6119                   RET	C
002064 D6 37       6120                   SUB	'A'-10
002066 FE 10       6121                   CP	16
002068 3F          6122                   CCF
002069 C9          6123                   RET
00206A             6124   ;
00206A FE 3E       6125   RELOPQ:         CP	'>'
00206C D0          6126                   RET	NC
00206D FE 3D       6127                   CP	'='
00206F D0          6128                   RET	NC
002070 FE 3C       6129                   CP	'<'
002072 C9          6130                   RET
002073             6131   ;
002073 FD 23       6132   SAVEev:           INC	IY
002075 E6 0F       6133                   AND	0FH
002077 08          6134   SAVE1:          EX	AF,AF'
002078 FA 6E 18    6135                   JP	M,MISMATev
00207B 08          6136                   EX	AF,AF'
00207C E3          6137                   EX	(SP),HL
00207D D9          6138                   EXX
00207E E5          6139                   PUSH	HL
00207F D9          6140                   EXX
002080 F5          6141                   PUSH	AF
002081 C5          6142                   PUSH	BC
002082 E9          6143                   JP	(HL)
002083             6144   ;
002083 08          6145   DOIT:           EX	AF,AF'
002084 FA 6E 18    6146                   JP	M,MISMATev
002087 D9          6147                   EXX
002088 C1          6148                   POP	BC		;RETURN ADDRESS
002089 D9          6149                   EXX
00208A 79          6150                   LD	A,C
00208B C1          6151                   POP	BC
00208C 47          6152                   LD	B,A
00208D F1          6153                   POP	AF		;OPERATOR
00208E D9          6154                   EXX
00208F EB          6155                   EX	DE,HL
002090 E1          6156                   POP	HL
002091 D9          6157                   EXX
002092 EB          6158                   EX	DE,HL
002093 E1          6159                   POP	HL
002094 D9          6160                   EXX
002095 C5          6161                   PUSH	BC
002096 D9          6162                   EXX
002097 CD 15 45    6163                   CALL	FPP
00209A 38 1C       6164                   JR	C,ERROR1ev
00209C AF          6165                   XOR	A
00209D 08          6166                   EX	AF,AF'		;TYPE
00209E FD 7E 00    6167                   LD	A,(IY)
0020A1 C9          6168                   RET
0020A2             6169   ;
0020A2 CD 0B 45    6170   COMMA:          CALL	NXT
0020A5 FD 23       6171                   INC	IY
0020A7 FE 2C       6172                   CP	','
0020A9 C8          6173                   RET	Z
0020AA 3E 05       6174                   LD	A,5
0020AC 18 0A       6175                   JR	ERROR1ev		;"Missing ,"
0020AE             6176   ;
0020AE CD 0B 45    6177   BRAKET:         CALL	NXT
0020B1 FD 23       6178                   INC	IY
0020B3 FE 29       6179                   CP	')'
0020B5 C8          6180                   RET	Z
0020B6 3E 1B       6181                   LD	A,27
0020B8 C3 44 3F    6182   ERROR1ev:         JP	ERROR_		;"Missing )"
0020BB             6183   ;
0020BB E5          6184   DISPT2:         PUSH	HL
0020BC 21 F6 16    6185                   LD	HL,SOPTBL
0020BF 18 06       6186                   JR	DISPT0
0020C1             6187   ;
0020C1 E5          6188   DISPATev:         PUSH	HL
0020C2 D6 8D       6189                   SUB	FUNTOK
0020C4 21 82 16    6190                   LD	HL,FUNTBL
0020C7 C5          6191   DISPT0:         PUSH	BC
0020C8 87          6192                   ADD	A,A
0020C9 4F          6193                   LD	C,A
0020CA 06 00       6194                   LD	B,0
0020CC 09          6195                   ADD	HL,BC
0020CD 7E          6196                   LD	A,(HL)
0020CE 23          6197                   INC	HL
0020CF 66          6198                   LD	H,(HL)
0020D0 6F          6199                   LD	L,A
0020D1 C1          6200                   POP	BC
0020D2 E3          6201                   EX	(SP),HL
0020D3 C9          6202                   RET			;OFF TO ROUTINE
0020D4             6203   ;
0020D4 7A          6204   STOREA:         LD	A,D
0020D5 D5          6205                   PUSH	DE
0020D6 E5          6206                   PUSH	HL
0020D7 DD E3       6207                   EX	(SP),IX
0020D9 B7          6208                   OR	A
0020DA FA EB 20    6209                   JP	M,STORA1
0020DD CD 25 19    6210                   CALL	LOADN
0020E0 DD E3       6211                   EX	(SP),IX
0020E2 CD CE 31    6212                   CALL	MODIFY
0020E5 E1          6213                   POP	HL
0020E6 D1          6214                   POP	DE
0020E7 4A          6215                   LD	C,D
0020E8 06 00       6216                   LD	B,0
0020EA C9          6217                   RET
0020EB             6218   ;
0020EB D5          6219   STORA1:         PUSH	DE
0020EC CD 0E 1A    6220                   CALL	LOADS
0020EF E1          6221                   POP	HL
0020F0 DD E3       6222                   EX	(SP),IX
0020F2 CD 18 32    6223                   CALL	MODIFS
0020F5 E1          6224                   POP	HL
0020F6 D1          6225                   POP	DE
0020F7 01 04 00    6226                   LD	BC,4
0020FA C9          6227                   RET
0020FB             6228   ;
0020FB             6229   ; Assign to whole array:
0020FB             6230   ; array1() = array expression
0020FB             6231   ; array1() = n1,n2,n3,n4...
0020FB             6232   ; array1() = n (n copied into all elements)
0020FB             6233   ;
0020FB             6234   ; Inputs: D = type (65, 68, 69, 193)
0020FB             6235   ;         E = opcode ('=' for store, '+','-' etc. for modify)
0020FB             6236   ;         HL = IX = VARPTR
0020FB             6237   ;         IY = text pointer
0020FB             6238   ;
0020FB CB B2       6239   LETARR:         RES	6,D		;Lose array marker
0020FD D5          6240                   PUSH	DE		;Save type & opcode
0020FE CD CD 19    6241                   CALL	GETAR1		;Get and check indirect link
002101 CD A4 19    6242                   CALL	ARRLEN		;DE = elements, HL addresses first
002104 C1          6243                   POP	BC
002105 78          6244                   LD	A,B		;A = type
002106 D5          6245                   PUSH	DE
002107 C5          6246                   PUSH	BC
002108 E5          6247                   PUSH	HL
002109 CD AD 36    6248                   CALL	X14OR5		;DE = size in bytes
00210C 42          6249                   LD	B,D
00210D 4B          6250                   LD	C,E
00210E DD E1       6251                   POP	IX
002110 D1          6252                   POP	DE
002111             6253   ;
002111             6254   ; (SP) = number of elements
002111             6255   ; BC = size in bytes
002111             6256   ; DE = type & opcode
002111             6257   ; IX = address of first element
002111             6258   ;
002111             6259   ; allocate space on stack and zero it:
002111             6260   ;
002111 AF          6261                   XOR	A		;Clear carry and zero error code
002112 ED 62       6262                   SBC	HL,HL
002114 39          6263                   ADD	HL,SP		;HL = SP
002115 ED 42       6264                   SBC	HL,BC
002117 38 9F       6265                   JR	C,ERROR1ev	;'No room'
002119 C5          6266                   PUSH	BC
00211A ED 4B E0 54 6267                   LD	BC,(FREE)
00211E 04          6268                   INC	B		;Safety margin
00211F ED 42       6269                   SBC	HL,BC
002121 09          6270                   ADD	HL,BC
002122 C1          6271                   POP	BC
002123 38 93       6272                   JR	C,ERROR1ev	;'No room'
002125 F9          6273                   LD	SP,HL
002126 36 00       6274   LETA0:          LD	(HL),0
002128 23          6275                   INC	HL
002129 0B          6276                   DEC	BC
00212A 78          6277                   LD	A,B
00212B B1          6278                   OR	C
00212C 20 F8       6279                   JR	NZ,LETA0	;Clear allocated stack
00212E 4E          6280                   LD	C,(HL)
00212F 23          6281                   INC	HL
002130 46          6282                   LD	B,(HL)
002131 67          6283                   LD	H,A
002132 6F          6284                   LD	L,A
002133 39          6285                   ADD	HL,SP
002134             6286   ;
002134             6287   ;	CALL	NXT
002134             6288   ;	CP	TEVAL		;;EVAL not currently supported
002134             6289   ;
002134 CD 3C 21    6290                   CALL	EXPRA
002137 F9          6291                   LD	SP,HL		;Update stack pointer
002138 C1          6292                   POP	BC		;Level stack
002139 C3 99 24    6293                   JP	XEQ
00213C             6294   ;
00213C             6295   ; EXPRA - Evaluate array expression, strictly left-to-right;
00213C             6296   ; Note: String array arithmetic (concatenation) is not supported
00213C             6297   ; because it would require a way of recovering freed string space.
00213C             6298   ;
00213C             6299   ;   Inputs: BC = number of elements
00213C             6300   ;           DE = type & opcode
00213C             6301   ;           HL = address of temporary stack space
00213C             6302   ;           IX = address of first element of array
00213C             6303   ;  Outputs: HL = value to set stack pointer to
00213C             6304   ;
00213C 3E 3D       6305   EXPRA:          LD	A,'='
00213E FD 2B       6306                   DEC	IY
002140 FD 23       6307   EXPRA1:         INC	IY
002142 D5          6308                   PUSH	DE
002143 C5          6309                   PUSH	BC
002144 E5          6310                   PUSH	HL
002145 DD E5       6311                   PUSH	IX
002147 5F          6312                   LD	E,A		;Operator
002148 CD B6 21    6313                   CALL	ITEMA
00214B DD E1       6314                   POP	IX
00214D E1          6315                   POP	HL
00214E C1          6316                   POP	BC
00214F D1          6317                   POP	DE
002150 CD 0B 45    6318                   CALL	NXT
002153 FE 2C       6319                   CP	','		;List?
002155 28 13       6320                   JR	Z,EXPRA3
002157 CD 36 35    6321                   CALL	TERMQ
00215A 20 E4       6322                   JR	NZ,EXPRA1
00215C             6323   ;
00215C             6324   ; Update destination array from stack:
00215C             6325   ;
00215C C5          6326   EXPRA2:         PUSH	BC
00215D CD D4 20    6327                   CALL	STOREA		;(IX) <- (HL)
002160 09          6328                   ADD	HL,BC
002161 DD 09       6329                   ADD	IX,BC
002163 C1          6330                   POP	BC
002164 0B          6331                   DEC	BC
002165 78          6332                   LD	A,B
002166 B1          6333                   OR	C
002167 20 F3       6334                   JR	NZ,EXPRA2
002169 C9          6335                   RET
00216A             6336   ;
00216A             6337   ; Update destination array from list (n.b. not transferred via stack):
00216A             6338   ;
00216A C5          6339   EXPRA3:         PUSH	BC
00216B CD D4 20    6340                   CALL	STOREA		;(IX) <- (HL)
00216E FD 23       6341   EXPRA4:         INC	IY		;Bump past comma
002170 09          6342                   ADD	HL,BC
002171 DD 09       6343                   ADD	IX,BC
002173 C1          6344                   POP	BC
002174 0B          6345                   DEC	BC
002175 78          6346                   LD	A,B
002176 B1          6347                   OR	C
002177 C8          6348                   RET	Z
002178 C5          6349                   PUSH	BC
002179 D5          6350                   PUSH	DE
00217A E5          6351                   PUSH	HL
00217B DD E5       6352                   PUSH	IX
00217D CB 7A       6353                   BIT	7,D
00217F 20 0E       6354                   JR	NZ,EXPRA5
002181 D5          6355                   PUSH	DE
002182 CD 2C 18    6356                   CALL	EXPRN
002185 D1          6357                   POP	DE
002186 DD E1       6358                   POP	IX
002188 DD E5       6359                   PUSH	IX
00218A CD CE 31    6360                   CALL	MODIFY
00218D 18 0C       6361                   JR	EXPRA6
00218F             6362   ;
00218F D5          6363   EXPRA5:         PUSH	DE
002190 CD 3C 18    6364                   CALL	EXPRS
002193 E1          6365                   POP	HL
002194 DD E1       6366                   POP	IX
002196 DD E5       6367                   PUSH	IX
002198 CD 18 32    6368                   CALL	MODIFS
00219B DD E1       6369   EXPRA6:         POP	IX
00219D E1          6370                   POP	HL
00219E D1          6371                   POP	DE
00219F 01 04 00    6372                   LD	BC,4
0021A2 CB 7A       6373                   BIT	7,D
0021A4 20 01       6374                   JR	NZ,EXPRA7
0021A6 4A          6375                   LD	C,D
0021A7 CD 0B 45    6376   EXPRA7:         CALL	NXT
0021AA FE 2C       6377                   CP	','
0021AC 28 C0       6378                   JR	Z,EXPRA4
0021AE D1          6379                   POP	DE
0021AF 09          6380   EXPRA8:         ADD	HL,BC		;Skip remaining elements
0021B0 1B          6381                   DEC	DE
0021B1 7A          6382                   LD	A,D
0021B2 B3          6383                   OR	E
0021B3 20 FA       6384                   JR	NZ,EXPRA8
0021B5 C9          6385                   RET
0021B6             6386   ;
0021B6             6387   ; ITEMA: evaluate and operate on array item
0021B6             6388   ;   Inputs: D = type
0021B6             6389   ;           E = operator ('=' for first item)
0021B6             6390   ;           BC = number of elements
0021B6             6391   ;           HL = pointer to destination on stack
0021B6             6392   ;           IY = text pointer
0021B6             6393   ;  Outputs: IY updated
0021B6             6394   ; Destroys: Everything except SP
0021B6             6395   ;
0021B6 CD 0B 45    6396   ITEMA:          CALL	NXT
0021B9 E5          6397                   PUSH	HL		;Pointer to destination
0021BA C5          6398                   PUSH	BC		;Number of elements
0021BB FD E5       6399                   PUSH	IY		;In case normal expression
0021BD D5          6400                   PUSH	DE		;Ditto
0021BE FE 2D       6401                   CP	'-'
0021C0 20 0C       6402                   JR	NZ,ITEMA1	;Not unary minus
0021C2 7B          6403                   LD	A,E
0021C3 FE 3D       6404                   CP	'='
0021C5 20 07       6405                   JR	NZ,ITEMA1	;Not unary minus
0021C7 FD 23       6406                   INC	IY		;Bump past '-'
0021C9 CD 0B 45    6407                   CALL	NXT
0021CC 1E 2D       6408                   LD	E,'-'		;Unary minus
0021CE D5          6409   ITEMA1:         PUSH	DE		;Type and operator
0021CF CD E3 41    6410                   CALL	GETVAR
0021D2 D1          6411                   POP	DE		;Type & operator
0021D3 20 56       6412                   JR	NZ,ITEMA4	;Non-array expression
0021D5 CB 77       6413                   BIT	6,A
0021D7 28 52       6414                   JR	Z,ITEMA4	;Not a whole array
0021D9 C1          6415                   POP	BC		;Junk saved original op
0021DA C1          6416                   POP	BC		;Junk saved text pointer
0021DB CB B7       6417                   RES	6,A
0021DD BA          6418                   CP	D
0021DE C2 6E 18    6419                   JP	NZ,MISMATev	;'Type mismatch'
0021E1 D5          6420                   PUSH	DE		;Save type & operator again
0021E2 CD CD 19    6421                   CALL	GETAR1
0021E5 CD A4 19    6422                   CALL	ARRLEN
0021E8 42          6423                   LD	B,D		;BC = number of elements
0021E9 4B          6424                   LD	C,E
0021EA D1          6425                   POP	DE		;Restore type & operator
0021EB E3          6426                   EX	(SP),HL
0021EC CD 0B 45    6427                   CALL	NXT
0021EF DD E1       6428                   POP	IX		;Pointer to source
0021F1 FE 2E       6429                   CP	'.'
0021F3 CA 83 22    6430                   JP	Z,ARRDOT	;Dot product
0021F6 B7          6431                   OR	A
0021F7 ED 42       6432                   SBC	HL,BC		;Same number of elements?
0021F9 C2 6E 18    6433                   JP	NZ,MISMATev	;'Type mismatch'
0021FC E1          6434                   POP	HL		;Pointer to destination
0021FD CB 7A       6435                   BIT	7,D
0021FF 20 1D       6436                   JR	NZ,ITEMA3
002201             6437   ;
002201             6438   ; Process numeric array item:
002201             6439   ;
002201 C5          6440   ITEMA2:         PUSH	BC
002202 E5          6441                   PUSH	HL
002203 7A          6442                   LD	A,D
002204 CD 25 19    6443                   CALL	LOADN
002207 DD E3       6444                   EX	(SP),IX
002209 D5          6445                   PUSH	DE
00220A CD CE 31    6446                   CALL	MODIFY
00220D D1          6447                   POP	DE
00220E DD E3       6448                   EX	(SP),IX
002210 E1          6449                   POP	HL
002211 4A          6450                   LD	C,D
002212 06 00       6451                   LD	B,0
002214 DD 09       6452                   ADD	IX,BC
002216 09          6453                   ADD	HL,BC
002217 C1          6454                   POP	BC
002218 0B          6455                   DEC	BC
002219 78          6456                   LD	A,B
00221A B1          6457                   OR	C
00221B 20 E4       6458                   JR	NZ,ITEMA2
00221D C9          6459                   RET
00221E             6460   ;
00221E             6461   ; Process string array item (just copy descriptors):
00221E             6462   ;
00221E EB          6463   ITEMA3:         EX	DE,HL		;DE = destination
00221F 60          6464                   LD	H,B
002220 69          6465                   LD	L,C
002221 29          6466                   ADD	HL,HL
002222 29          6467                   ADD	HL,HL
002223 44          6468                   LD	B,H
002224 4D          6469                   LD	C,L
002225 DD E5       6470                   PUSH	IX
002227 E1          6471                   POP	HL		;HL = source
002228 ED B0       6472                   LDIR
00222A C9          6473                   RET
00222B             6474   ;
00222B             6475   ; Process numeric non-array item:
00222B             6476   ;
00222B D1          6477   ITEMA4:         POP	DE		;Restore original operator
00222C FD E1       6478                   POP	IY		;Restore original text pointer
00222E CB 7A       6479                   BIT	7,D
002230 20 28       6480                   JR	NZ,ITEMA5
002232 D5          6481                   PUSH	DE
002233 CD 0B 18    6482                   CALL	EXPR45		;; should be EXP345
002236 79          6483                   LD	A,C		;Exponent
002237 D1          6484                   POP	DE		;Type / operator
002238 C1          6485                   POP	BC		;Count
002239 DD E1       6486                   POP	IX
00223B E5          6487   ITEMA7:         PUSH	HL
00223C C5          6488                   PUSH	BC
00223D D5          6489                   PUSH	DE
00223E D9          6490                   EXX
00223F E5          6491                   PUSH	HL
002240 D9          6492                   EXX
002241 F5          6493                   PUSH	AF
002242 4F          6494                   LD	C,A
002243 CD CE 31    6495                   CALL	MODIFY
002246 F1          6496                   POP	AF
002247 D9          6497                   EXX
002248 E1          6498                   POP	HL
002249 D9          6499                   EXX
00224A D1          6500                   POP	DE
00224B 4A          6501                   LD	C,D
00224C 06 00       6502                   LD	B,0
00224E DD 09       6503                   ADD	IX,BC
002250 C1          6504                   POP	BC
002251 0B          6505                   DEC	BC
002252 ED 62       6506                   SBC	HL,HL
002254 ED 42       6507                   SBC	HL,BC
002256 E1          6508                   POP	HL
002257 20 E2       6509                   JR	NZ,ITEMA7	;Copy into every element!
002259 C9          6510                   RET
00225A             6511   ;
00225A             6512   ; Process string non-array item:
00225A             6513   ;
00225A CD 3C 18    6514   ITEMA5:         CALL	EXPRS
00225D 7B          6515                   LD	A,E
00225E B7          6516                   OR	A
00225F 28 0B       6517                   JR	Z,ITEMA0
002261 21 00 52    6518                   LD	HL,ACCS
002264 11 00 53    6519                   LD	DE,BUFFER
002267 4F          6520                   LD	C,A
002268 06 00       6521                   LD	B,0
00226A ED B0       6522                   LDIR
00226C C1          6523   ITEMA0:         POP	BC
00226D DD E1       6524                   POP	IX
00226F D9          6525                   EXX
002270 6F          6526                   LD	L,A
002271 D9          6527                   EXX
002272 11 04 00    6528                   LD	DE,4
002275 21 00 53    6529                   LD	HL,BUFFER
002278 CD 09 32    6530   ITEMA6:         CALL	STORE4
00227B DD 19       6531                   ADD	IX,DE
00227D 0B          6532                   DEC	BC
00227E 78          6533                   LD	A,B
00227F B1          6534                   OR	C
002280 20 F6       6535                   JR	NZ,ITEMA6	;Copy into every element!
002282 C9          6536                   RET
002283             6537   ;
002283             6538   ; Array dot-product:
002283             6539   ;
002283 FD 23       6540   ARRDOT:         INC	IY		;Bump past dot
002285 7A          6541                   LD	A,D		;Type
002286 B7          6542                   OR	A
002287 FA 6E 18    6543                   JP	M,MISMATev	;'Type mismatch'
00228A EB          6544                   EX	DE,HL
00228B E1          6545                   POP	HL
00228C             6546   ;
00228C             6547   ; A = type
00228C             6548   ; DE = no. of elements in destination array (outer loop counter)
00228C             6549   ; IX = pointer to first source array data
00228C             6550   ; HL = pointer to destination data
00228C             6551   ; IY = text pointer
00228C             6552   ;
00228C D5          6553                   PUSH	DE
00228D E5          6554                   PUSH	HL
00228E DD E5       6555                   PUSH	IX
002290 F5          6556                   PUSH	AF
002291 CD BD 19    6557                   CALL	GETARR
002294 CD A4 19    6558                   CALL	ARRLEN
002297 F1          6559                   POP	AF
002298 EB          6560                   EX	DE,HL
002299 DD 6E 00    6561                   LD	L,(IX)
00229C DD 66 01    6562                   LD	H,(IX+1)	;Indirect pointer
00229F 6E          6563                   LD	L,(HL)		;No. of dimensions
0022A0 2D          6564                   DEC	L
0022A1 EB          6565                   EX	DE,HL
0022A2 DD E1       6566                   POP	IX
0022A4 C1          6567                   POP	BC
0022A5 D1          6568                   POP	DE
0022A6             6569   ;
0022A6 FD E5       6570                   PUSH	IY		;Save text pointer
0022A8 C5          6571                   PUSH	BC		;Save destination pointer
0022A9 E5          6572                   PUSH	HL
0022AA FD E1       6573                   POP	IY
0022AC             6574   ;
0022AC             6575   ; Get row counts:
0022AC             6576   ;
0022AC 21 01 00    6577                   LD	HL,1
0022AF 28 06       6578                   JR	Z,ARR1D
0022B1 FD 66 FF    6579                   LD	H,(IY-1)
0022B4 FD 6E FE    6580                   LD	L,(IY-2)
0022B7 D5          6581   ARR1D:          PUSH	DE
0022B8 EB          6582                   EX	DE,HL
0022B9 CD AD 36    6583                   CALL	X14OR5
0022BC EB          6584                   EX	DE,HL
0022BD D1          6585                   POP	DE
0022BE DD 46 FF    6586                   LD	B,(IX-1)
0022C1 DD 4E FE    6587                   LD	C,(IX-2)
0022C4             6588   ;
0022C4             6589   ; A = type, Z-flag set if first array is one-dimensional
0022C4             6590   ; BC = no. of rows of first source array (inner loop counter)
0022C4             6591   ; DE = no. of elements in destination array (outer loop counter)
0022C4             6592   ; HL = no. of rows of second source array * size of each element
0022C4             6593   ; IX = pointer to first source array
0022C4             6594   ; IY = pointer to second source array
0022C4             6595   ; (SP) = pointer to destination data
0022C4             6596   ;
0022C4             6597   ; Dot-product outer loop:
0022C4             6598   ;
0022C4 C5          6599   OUTER:          PUSH	BC		;1
0022C5 D5          6600                   PUSH	DE		;2
0022C6 E5          6601                   PUSH	HL		;3
0022C7 DD E5       6602                   PUSH	IX		;4
0022C9 FD E5       6603                   PUSH	IY		;5
0022CB 50          6604                   LD	D,B
0022CC 59          6605                   LD	E,C
0022CD F5          6606                   PUSH	AF
0022CE CD F8 1F    6607                   CALL	ZERO		;Zero accumulator
0022D1 F1          6608                   POP	AF
0022D2 D5          6609   INNER:          PUSH	DE		;6
0022D3 C5          6610                   PUSH	BC		;Save accumulator
0022D4 E5          6611                   PUSH	HL
0022D5 D9          6612                   EXX
0022D6 E5          6613                   PUSH	HL
0022D7 D9          6614                   EXX
0022D8             6615   ;
0022D8 CD 25 19    6616                   CALL	LOADN		;Load from (IX)
0022DB DD E5       6617                   PUSH	IX
0022DD FD E3       6618                   EX	(SP),IY
0022DF DD E1       6619                   POP	IX
0022E1             6620   ;
0022E1 CD E7 19    6621                   CALL	DLOADN		;Load from (IY)
0022E4 DD E5       6622                   PUSH	IX
0022E6 FD E3       6623                   EX	(SP),IY
0022E8 DD E1       6624                   POP	IX
0022EA             6625   ;
0022EA F5          6626                   PUSH	AF
0022EB 3E 0A       6627                   LD	A,10
0022ED CD 15 45    6628                   CALL	FPP		;Multiply
0022F0 DA 44 3F    6629                   JP	C,ERROR_
0022F3 F1          6630                   POP	AF
0022F4             6631   ;
0022F4 D9          6632                   EXX			;Restore accumulator
0022F5 EB          6633                   EX	DE,HL
0022F6 E1          6634                   POP	HL
0022F7 D9          6635                   EXX
0022F8 EB          6636                   EX	DE,HL
0022F9 E1          6637                   POP	HL
0022FA 08          6638                   EX	AF,AF'
0022FB 79          6639                   LD	A,C
0022FC C1          6640                   POP	BC
0022FD 47          6641                   LD	B,A
0022FE 08          6642                   EX	AF,AF'
0022FF             6643   ;
0022FF F5          6644                   PUSH	AF
002300 3E 0B       6645                   LD	A,11
002302 CD 15 45    6646                   CALL	FPP		;Accumulate
002305 DA 44 3F    6647                   JP	C,ERROR_
002308 F1          6648                   POP	AF
002309             6649   ;
002309             6650   ; Bump pointers:
002309             6651   ;
002309 D1          6652                   POP	DE		;5
00230A             6653   ;
00230A D9          6654                   EXX
00230B 4F          6655                   LD	C,A
00230C 06 00       6656                   LD	B,0
00230E DD 09       6657                   ADD	IX,BC
002310 D1          6658                   POP	DE
002311 C1          6659                   POP	BC
002312 E3          6660                   EX	(SP),HL
002313 EB          6661                   EX	DE,HL
002314 FD 19       6662                   ADD	IY,DE
002316 EB          6663                   EX	DE,HL
002317 E3          6664                   EX	(SP),HL
002318 C5          6665                   PUSH	BC
002319 D5          6666                   PUSH	DE
00231A D9          6667                   EXX
00231B             6668   ;
00231B             6669   ; Count inner loops:
00231B             6670   ;
00231B 1B          6671                   DEC	DE		;Inner loop counter
00231C 1C          6672                   INC	E
00231D 1D          6673                   DEC	E
00231E 20 B2       6674                   JR	NZ,INNER
002320 14          6675                   INC	D
002321 15          6676                   DEC	D
002322 20 AE       6677                   JR	NZ,INNER
002324             6678   ;
002324 FD E1       6679                   POP	IY		;4
002326 DD E1       6680                   POP	IX		;3
002328             6681   ;
002328             6682   ; Swap pointers:
002328             6683   ;
002328 D9          6684                   EXX
002329 08          6685                   EX	AF,AF'
00232A F1          6686                   POP	AF
00232B C1          6687                   POP	BC
00232C D1          6688                   POP	DE
00232D DD E3       6689                   EX	(SP),IX
00232F D5          6690                   PUSH	DE
002330 C5          6691                   PUSH	BC
002331 F5          6692                   PUSH	AF
002332 08          6693                   EX	AF,AF'
002333 D9          6694                   EXX
002334             6695   ;
002334             6696   ; Save to destination array and bump pointer:
002334             6697   ;
002334 F5          6698                   PUSH	AF
002335 D5          6699                   PUSH	DE
002336 CD F0 31    6700                   CALL	STOREN
002339 D1          6701                   POP	DE
00233A F1          6702                   POP	AF
00233B 4F          6703                   LD	C,A
00233C 06 00       6704                   LD	B,0
00233E DD 09       6705                   ADD	IX,BC
002340             6706   ;
002340             6707   ; Swap pointers:
002340             6708   ;
002340 D9          6709                   EXX
002341 08          6710                   EX	AF,AF'
002342 F1          6711                   POP	AF
002343 C1          6712                   POP	BC
002344 D1          6713                   POP	DE
002345 DD E3       6714                   EX	(SP),IX
002347 D5          6715                   PUSH	DE
002348 C5          6716                   PUSH	BC
002349 F5          6717                   PUSH	AF
00234A 08          6718                   EX	AF,AF'
00234B D9          6719                   EXX
00234C             6720   ;
00234C E1          6721                   POP	HL		;2
00234D D1          6722                   POP	DE		;1 Outer loop counter
00234E C1          6723                   POP	BC		;0
00234F 1B          6724                   DEC	DE		;Count outer loops
002350             6725   ;
002350             6726   ; Adjust IX & IY
002350             6727   ;
002350 C5          6728                   PUSH	BC
002351 D5          6729                   PUSH	DE
002352 E5          6730                   PUSH	HL
002353 4F          6731                   LD	C,A
002354 06 00       6732                   LD	B,0
002356 FD 09       6733                   ADD	IY,BC
002358 F5          6734                   PUSH	AF
002359 E5          6735                   PUSH	HL
00235A CD AD 36    6736                   CALL	X14OR5
00235D C1          6737                   POP	BC
00235E CD 90 23    6738                   CALL	MOD16
002361 F1          6739                   POP	AF
002362 B7          6740                   OR	A
002363 01 00 00    6741                   LD	BC,0
002366 ED 42       6742                   SBC	HL,BC
002368 E1          6743                   POP	HL
002369 D1          6744                   POP	DE
00236A C1          6745                   POP	BC
00236B 20 15       6746                   JR	NZ,MODNZ
00236D D5          6747                   PUSH	DE
00236E E5          6748                   PUSH	HL
00236F EB          6749                   EX	DE,HL
002370 FD E5       6750                   PUSH	IY
002372 E1          6751                   POP	HL
002373 B7          6752                   OR	A
002374 ED 52       6753                   SBC	HL,DE
002376 E5          6754                   PUSH	HL
002377 FD E1       6755                   POP	IY
002379 50          6756                   LD	D,B
00237A 59          6757                   LD	E,C
00237B CD AD 36    6758                   CALL	X14OR5
00237E DD 19       6759                   ADD	IX,DE
002380 E1          6760                   POP	HL
002381 D1          6761                   POP	DE
002382             6762   MODNZ:
002382             6763   ;
002382             6764   ; Count outer loops:
002382             6765   ;
002382 1C          6766                   INC	E
002383 1D          6767                   DEC	E
002384 C2 C4 22    6768                   JP	NZ,OUTER
002387 14          6769                   INC	D
002388 15          6770                   DEC	D
002389 C2 C4 22    6771                   JP	NZ,OUTER
00238C             6772   ;
00238C             6773   ; Exit:
00238C             6774   ;
00238C E1          6775                   POP	HL
00238D FD E1       6776                   POP	IY
00238F C9          6777                   RET
002390             6778   ;
002390             6779   ; HL = DE MOD BC
002390             6780   ;
002390 AF          6781   MOD16:          XOR	A
002391 67          6782                   LD	H,A
002392 6F          6783                   LD	L,A
002393 3E 11       6784                   LD	A,17
002395 ED 42       6785   MOD160:         SBC	HL,BC
002397 30 01       6786                   JR	NC,MOD161
002399 09          6787                   ADD	HL,BC
00239A 3F          6788   MOD161:         CCF
00239B CB 13       6789                   RL	E
00239D CB 12       6790                   RL	D
00239F 3D          6791                   DEC	A
0023A0 C8          6792                   RET	Z
0023A1 ED 6A       6793                   ADC	HL,HL
0023A3 18 F0       6794                   JR	MOD160
0023A5             6795   ;
0023A5             6796   ;                END
0023A5             6797   ; --- End eval.asm ---
0023A5             6798   
0023A5             6799   ; --- Begin exec.asm ---
0023A5             6800   ;
0023A5             6801   ;Automatically created from original source on 2024-12-15 15:29:12
0023A5             6802   ;
0023A5             6803                   .ASSUME ADL = 0
0023A5             6804   ;	.ORG 0x0000
0023A5             6805   ;                SEGMENT CODE
0023A5             6806   ;
0023A5             6807   ;BBC BASIC INTERPRETER - Z80 VERSION
0023A5             6808   ;STATEMENT EXECUTION MODULE - "EXEC"
0023A5             6809   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0023A5             6810   ;
0023A5             6811   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0023A5             6812   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0023A5             6813   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0023A5             6814   ;
0023A5             6815   ;VERSION 2.1, 22-01-1984
0023A5             6816   ;VERSION 3.1, 11-06-1987
0023A5             6817   ;VERSION 5.0, 12-07-2024
0023A5             6818   ;
0023A5             6819   ;                XDEF	XEQ
0023A5             6820   ;                XDEF	RUN0
0023A5             6821   ;                XDEF	CHAIN0
0023A5             6822   ;                XDEF	CHECK
0023A5             6823   ;                XDEF	MUL16
0023A5             6824   ;                XDEF	X14OR5
0023A5             6825   ;                XDEF	TERMQ
0023A5             6826   ;                XDEF	STOREN
0023A5             6827   ;                XDEF	STORE4
0023A5             6828   ;                XDEF	STORE5
0023A5             6829   ;                XDEF	STACCS
0023A5             6830   ;                XDEF	SPACES
0023A5             6831   ;                XDEF	FN
0023A5             6832   ;                XDEF	USR
0023A5             6833   ;                XDEF	ESCAPE
0023A5             6834   ;                XDEF	SYNTAX
0023A5             6835   ;                XDEF	CHANEL
0023A5             6836   ;                XDEF	CHNL
0023A5             6837   ;                XDEF	VAR_
0023A5             6838   ;                XDEF	TABIT
0023A5             6839   ;                XDEF	MODIFY
0023A5             6840   ;                XDEF	MODIFS
0023A5             6841   ;
0023A5             6842   ;                XREF	ASSEM
0023A5             6843   ;                XREF	ERROR_
0023A5             6844   ;                XREF	REPORT
0023A5             6845   ;                XREF	WARM
0023A5             6846   ;                XREF	CLOOP
0023A5             6847   ;                XREF	SAYLN
0023A5             6848   ;                XREF	LOAD0
0023A5             6849   ;                XREF	CRLF
0023A5             6850   ;                XREF	PBCDL
0023A5             6851   ;                XREF	TELL
0023A5             6852   ;                XREF	FINDL
0023A5             6853   ;                XREF	SETLIN
0023A5             6854   ;                XREF	CLEAR
0023A5             6855   ;                XREF	GETVAR
0023A5             6856   ;                XREF	PUTVAR
0023A5             6857   ;                XREF	GETDEF
0023A5             6858   ;                XREF	LOCATE
0023A5             6859   ;                XREF	CREATE
0023A5             6860   ;                XREF	OUTCHR
0023A5             6861   ;                XREF	EXTERR
0023A5             6862   ;                XREF	BYE
0023A5             6863   ;                XREF	NXT
0023A5             6864   ;                XREF	NLIST
0023A5             6865   ;                XREF	CSRON
0023A5             6866   ;                XREF	CSROFF
0023A5             6867   ;
0023A5             6868   ;                XREF	OSWRCH
0023A5             6869   ;                XREF	OSLINE
0023A5             6870   ;                XREF	OSSHUT
0023A5             6871   ;                XREF	OSBPUT
0023A5             6872   ;                XREF	OSBGET
0023A5             6873   ;                XREF	CLRSCN
0023A5             6874   ;                XREF	PUTCSR
0023A5             6875   ;                XREF	PUTIME
0023A5             6876   ;                XREF	PUTIMS
0023A5             6877   ;                XREF	PUTPTR
0023A5             6878   ;                XREF	OSCALL
0023A5             6879   ;                XREF	OSCLI
0023A5             6880   ;                XREF	TRAP
0023A5             6881   ;
0023A5             6882   ;                XREF	SOUND
0023A5             6883   ;                XREF	CLG
0023A5             6884   ;                XREF	DRAW
0023A5             6885   ;                XREF	ENVEL
0023A5             6886   ;                XREF	GCOL
0023A5             6887   ;                XREF	MODE
0023A5             6888   ;                XREF	MOVE
0023A5             6889   ;                XREF	PLOT
0023A5             6890   ;                XREF	COLOUR
0023A5             6891   ;                XREF	CIRCLE
0023A5             6892   ;                XREF	ELLIPS
0023A5             6893   ;                XREF	FILL
0023A5             6894   ;                XREF	MOUSE
0023A5             6895   ;                XREF	ORIGIN
0023A5             6896   ;                XREF	RECTAN
0023A5             6897   ;                XREF	LINE
0023A5             6898   ;                XREF	WAIT
0023A5             6899   ;                XREF	TINT
0023A5             6900   ;                XREF	SYS
0023A5             6901   ;
0023A5             6902   ;                XREF	STR
0023A5             6903   ;                XREF	HEXSTR
0023A5             6904   ;                XREF	EXPR
0023A5             6905   ;                XREF	EXPRN
0023A5             6906   ;                XREF	EXPRI
0023A5             6907   ;                XREF	EXPRS
0023A5             6908   ;                XREF	ITEMI
0023A5             6909   ;                XREF	CONS
0023A5             6910   ;                XREF	LOADS
0023A5             6911   ;                XREF	VAL0
0023A5             6912   ;                XREF	SFIX
0023A5             6913   ;                XREF	TEST
0023A5             6914   ;                XREF	LOAD4
0023A5             6915   ;                XREF	LOADN
0023A5             6916   ;                XREF	DLOAD5
0023A5             6917   ;                XREF	FPP
0023A5             6918   ;                XREF	COMMA
0023A5             6919   ;                XREF	BRAKET
0023A5             6920   ;                XREF	PUSHS
0023A5             6921   ;                XREF	POPS
0023A5             6922   ;                XREF	ZERO
0023A5             6923   ;                XREF	SCP
0023A5             6924   ;                XREF	LETARR
0023A5             6925   ;
0023A5             6926   ;                XREF	ACCS
0023A5             6927   ;                XREF	PAGE_
0023A5             6928   ;                XREF	LOMEM
0023A5             6929   ;                XREF	HIMEM
0023A5             6930   ;                XREF	FREE
0023A5             6931   ;                XREF	BUFFER
0023A5             6932   ;                XREF	ERRTRP
0023A5             6933   ;                XREF	ONERSP
0023A5             6934   ;                XREF	CURLIN
0023A5             6935   ;                XREF	COUNT
0023A5             6936   ;                XREF	WIDTH
0023A5             6937   ;                XREF	STAVAR
0023A5             6938   ;                XREF	DATPTR
0023A5             6939   ;                XREF	RANDOM
0023A5             6940   ;                XREF	TRACEN
0023A5             6941   ;                XREF	LISTON
0023A5             6942   ;                XREF	PC
0023A5             6943   ;                XREF	OC
0023A5             6944   ;
0023A5             6945   ; LF             EQU	0AH	; in equs.inc
0023A5             6946   ; CR             EQU	0DH	; in equs.inc
0023A5             6947   ; IN main.asm
0023A5             6948   ; TAND:           EQU	80H
0023A5             6949   ; TOR:            EQU	84H
0023A5             6950   ; TERROR:         EQU	85H
0023A5             6951   ; TLINE:          EQU	86H
0023A5             6952   TOFF:           EQU	87H
0023A5             6953   TSTEP:          EQU	88H
0023A5             6954   TSPC:           EQU	89H
0023A5             6955   TTAB:           EQU	8AH
0023A5             6956   ; TELSE:          EQU	8BH
0023A5             6957   ; TTHEN:          EQU	8CH
0023A5             6958   ; TLINO:          EQU	8DH
0023A5             6959   ; TTO:            EQU	0B8H
0023A5             6960   ; TBY:           EQU	0C0H
0023A5             6961   ; TWHILE:         EQU	0C7H
0023A5             6962   ; TWHEN:          EQU	0C9H
0023A5             6963   ; TOF:            EQU	0CAH
0023A5             6964   ; TENDCASE:       EQU	0CBH
0023A5             6965   ; TOTHERWISE:     EQU	0CCH
0023A5             6966   ; TENDIF:         EQU	0CDH
0023A5             6967   ; TENDWHILE:      EQU	0CEH
0023A5             6968   ; TCALL:          EQU	0D6H
0023A5             6969   ; TDATA:          EQU	0DCH
0023A5             6970   ; TDEF:           EQU	0DDH
0023A5             6971   ; TFOR:           EQU	0E3H
0023A5             6972   ; TGOSUB:         EQU	0E4H
0023A5             6973   ; TGOTO:          EQU	0E5H
0023A5             6974   ; TLOCAL:         EQU	0EAH
0023A5             6975   ; TNEXT:          EQU	0EDH
0023A5             6976   ; TON:            EQU	0EEH
0023A5             6977   ; TPROC:          EQU	0F2H
0023A5             6978   ; TREM:           EQU	0F4H
0023A5             6979   ; TREPEAT:        EQU	0F5H
0023A5             6980   TRETURN:        EQU	0F8H
0023A5             6981   TSTOP:          EQU	0FAH
0023A5             6982   ; TUNTIL:         EQU	0FDH
0023A5             6983   ; TEXIT:          EQU	10H
0023A5             6984   ; END in main.asm
0023A5             6985   ;
0023A5 77 30       6986   CMDTAB:         DW	LEFTSL
0023A7 8B 30       6987                   DW	MIDSL
0023A9 81 30       6988                   DW	RITESL
0023AB E0 25       6989                   DW	SYNTAX	;STR$
0023AD E0 25       6990                   DW	SYNTAX	;STRING$
0023AF E0 25       6991                   DW	SYNTAX	;EOF
0023B1 E0 25       6992                   DW	SYNTAX	;SUM
0023B3 26 2E       6993                   DW	WHILE
0023B5 57 2D       6994                   DW	CASE
0023B7 E0 25       6995                   DW	SYNTAX	;WHEN
0023B9 E0 25       6996                   DW	SYNTAX	;OF
0023BB 99 24       6997                   DW	XEQ	;ENDCASE
0023BD E0 25       6998                   DW	SYNTAX	;OTHERWISE
0023BF 99 24       6999                   DW	XEQ	;ENDIF
0023C1 43 2E       7000                   DW	ENDWHI	;ENDWHILE
0023C3 01 2F       7001                   DW	PTR
0023C5 15 2F       7002                   DW	PAGEV
0023C7 23 2F       7003                   DW	TIMEV
0023C9 42 2F       7004                   DW	LOMEMV
0023CB 54 2F       7005                   DW	HIMEMV
0023CD 31 0E       7006                   DW	SOUND
0023CF D3 2F       7007                   DW	BPUT
0023D1 0C 30       7008                   DW	CALL
0023D3 4C 24       7009                   DW	CHAIN
0023D5 96 2E       7010                   DW	CLR
0023D7 CB 2F       7011                   DW	CLOSE
0023D9 75 0E       7012                   DW	CLG
0023DB 75 2E       7013                   DW	CLS
0023DD 31 25       7014                   DW	REM		;DATA
0023DF 31 25       7015                   DW	REM		;DEF
0023E1 3E 26       7016                   DW	DIM
0023E3 7C 0F       7017                   DW	DRAW
0023E5 D3 24       7018                   DW	END
0023E7 7D 2B       7019                   DW	ENDPRO
0023E9 03 0E       7020                   DW	ENVEL
0023EB 14 29       7021                   DW	FORex
0023ED CB 28       7022                   DW	GOSUB
0023EF B4 28       7023                   DW	GOTO
0023F1 CD 0E       7024                   DW	GCOL
0023F3 C9 2C       7025                   DW	IF_
0023F5 E2 2B       7026                   DW	INPUT
0023F7 A1 25       7027                   DW	LET
0023F9 13 2B       7028                   DW	LOCAL
0023FB 65 0E       7029                   DW	MODE
0023FD 78 0F       7030                   DW	MOVE
0023FF 61 29       7031                   DW	NEXT
002401 3A 28       7032                   DW	ON
002403 9C 2F       7033                   DW	VDU
002405 84 0F       7034                   DW	PLOT
002407 46 27       7035                   DW	PRINT
002409 E7 29       7036                   DW	PROC
00240B 80 2C       7037                   DW	READ
00240D 31 25       7038                   DW	REM
00240F E5 28       7039                   DW	REPEAT
002411 91 2E       7040                   DW	REPOR
002413 BC 2E       7041                   DW	RESTOR
002415 D6 28       7042                   DW	RETURN
002417 47 24       7043                   DW	RUN
002419 7E 2E       7044                   DW	STOP
00241B 8D 0E       7045                   DW	COLOUR
00241D 83 2F       7046                   DW	TRACE
00241F ED 28       7047                   DW	UNTIL
002421 79 2F       7048                   DW	WIDTHV
002423 08 25       7049                   DW	CLI		;OSCLI
002425 31 25       7050                   DW	REM		;NUL
002427 1B 0F       7051                   DW	CIRCLE
002429 47 0F       7052                   DW	ELLIPS
00242B 80 0F       7053                   DW	FILL
00242D 3A 10       7054                   DW	MOUSE
00242F 7C 0E       7055                   DW	ORIGIN
002431 2C 0A       7056                   DW	BYE		;QUIT
002433 B9 0F       7057                   DW	RECTAN
002435 5E 25       7058                   DW	SWAPex
002437 11 11       7059                   DW	SYS
002439 11 11       7060                   DW	TINT
00243B 79 10       7061                   DW	WAIT
00243D E0 25       7062                   DW	SYNTAX		;INSTALL
00243F 31 25       7063                   DW	REM		;CR
002441 9D 31       7064                   DW	PUT		;Token changed
002443 E0 25       7065                   DW	SYNTAX		;BY
002445 23 31       7066                   DW	EXITex
002447             7067   ;
002447             7068   CMDTAB_END:     EQU	$
002447             7069   ; TLAST:          EQU	TCMD-128+(CMDTAB_END-CMDTAB)/2
002447             7070   TLAST:          EQU	CMDTAB_END-CMDTAB/2+TCMD-128
002447             7071   ;
002447 CD 36 35    7072   RUN:            CALL	TERMQ
00244A 28 0D       7073                   JR	Z,RUN0
00244C CD 3C 18    7074   CHAIN:          CALL	EXPRS
00244F 3E 0D       7075                   LD	A,CR
002451 12          7076                   LD	(DE),A
002452 ED 7B E2 54 7077   CHAIN0:         LD	SP,(HIMEM)
002456 CD 00 40    7078                   CALL	LOAD0
002459 ED 7B E2 54 7079   RUN0:           LD	SP,(HIMEM)	;PREPARE FOR RUN
00245D DD 21 F6 54 7080                   LD	IX,RANDOM
002461 ED 5F       7081   RAND:           LD	A,R		;RANDOMISE (CARE!)
002463 28 FC       7082                   JR	Z,RAND
002465 07          7083                   RLCA
002466 07          7084                   RLCA
002467 DD 77 03    7085                   LD	(IX+3),A
00246A 9F          7086                   SBC	A,A
00246B DD 77 04    7087                   LD	(IX+4),A
00246E CD 43 40    7088                   CALL	CLEAR
002471 21 00 00    7089                   LD	HL,0
002474 22 EA 54    7090                   LD	(ERRTRP),HL
002477 2A DC 54    7091                   LD	HL,(PAGE_)
00247A CD F9 35    7092                   CALL	DSRCH		;LOOK FOR "DATA"
00247D 22 F0 54    7093                   LD	(DATPTR),HL	;SET DATA POINTER
002480 FD 2A DC 54 7094                   LD	IY,(PAGE_)
002484 CD DB 24    7095   XEQ0:           CALL	NEWLIN
002487 FD 7E 00    7096                   LD	A,(IY)
00248A FE 8B       7097                   CP	TELSE
00248C CA 30 2D    7098                   JP	Z,MELSE		;ELSE
00248F FE C9       7099                   CP	TWHEN
002491 CA 43 2D    7100                   JP	Z,WHEN		;WHEN
002494 FE CC       7101                   CP	TOTHERWISE
002496 CA 43 2D    7102                   JP	Z,WHEN
002499 FD 22 F4 54 7103   XEQ:            LD	(CURLIN),IY	;ERROR POINTER
00249D CD 33 06    7104                   CALL	TRAP		;CHECK KEYBOARD
0024A0 CD 0B 45    7105   XEQ1:           CALL	NXT
0024A3 FD 23       7106                   INC	IY
0024A5 FE 3A       7107                   CP	':'		;SEPARATOR
0024A7 28 F7       7108                   JR	Z,XEQ1
0024A9 FE 0D       7109                   CP	CR
0024AB 28 D7       7110                   JR	Z,XEQ0		;NEW PROGRAM LINE
0024AD FE 98       7111                   CP	TLAST
0024AF EA 93 25    7112                   JP	PE,LET0		;IMPLIED LET
0024B2 D6 C7       7113                   SUB	TCMD
0024B4 FA 16 25    7114                   JP	M,EXTRAS
0024B7 87          7115                   ADD	A,A
0024B8 4F          7116                   LD	C,A
0024B9 06 00       7117                   LD	B,0
0024BB 21 A5 23    7118                   LD	HL,CMDTAB
0024BE 09          7119                   ADD	HL,BC
0024BF 7E          7120                   LD	A,(HL)		;TABLE ENTRY
0024C0 23          7121                   INC	HL
0024C1 66          7122                   LD	H,(HL)
0024C2 6F          7123                   LD	L,A
0024C3 CD 0B 45    7124                   CALL	NXT
0024C6 E9          7125                   JP	(HL)		;EXECUTE STATEMENT
0024C7             7126   ;
0024C7             7127   ;END
0024C7             7128   ;
0024C7 FD E5       7129   ENDIM:          PUSH	IY
0024C9 E1          7130                   POP	HL
0024CA ED 4B DC 54 7131                   LD	BC,(PAGE_)
0024CE ED 42       7132                   SBC	HL,BC		;IMMEDIATE MODE ?
0024D0 DA B0 37    7133                   JP	C,CLOOP
0024D3 1E 00       7134   END:            LD	E,0
0024D5 CD 53 06    7135                   CALL	OSSHUT		;CLOSE ALL FILES
0024D8 C3 AF 37    7136                   JP	WARM		;"Ready"
0024DB             7137   ;
0024DB FD 7E 00    7138   NEWLIN:         LD	A,(IY+0)	;A=LINE LENGTH
0024DE 01 03 00    7139                   LD	BC,3
0024E1 FD 09       7140                   ADD	IY,BC
0024E3 B7          7141                   OR	A
0024E4 28 E1       7142                   JR	Z,ENDIM		;LENGTH=0, EXITex
0024E6 2A E6 54    7143                   LD	HL,(TRACEN)
0024E9 7C          7144                   LD	A,H
0024EA B5          7145                   OR	L
0024EB C8          7146                   RET	Z
0024EC FD 56 FF    7147                   LD	D,(IY-1)	;DE = LINE NUMBER
0024EF FD 5E FE    7148                   LD	E,(IY-2)
0024F2 ED 52       7149                   SBC	HL,DE
0024F4 D8          7150                   RET	C
0024F5 EB          7151                   EX	DE,HL
0024F6 3E 5B       7152                   LD	A,'['		;TRACE
0024F8 CD 02 41    7153                   CALL	OUTCHR
0024FB CD 92 41    7154                   CALL	PBCDL
0024FE 3E 5D       7155                   LD	A,']'
002500 CD 02 41    7156                   CALL	OUTCHR
002503 3E 20       7157                   LD	A,' '
002505 C3 02 41    7158                   JP	OUTCHR
002508             7159   ;
002508             7160   ;ROUTINES FOR EACH STATEMENT:
002508             7161   ;
002508             7162   ;OSCLI
002508             7163   ;
002508 CD 3C 18    7164   CLI:            CALL	EXPRS
00250B 3E 0D       7165                   LD	A,CR
00250D 12          7166                   LD	(DE),A
00250E 21 00 52    7167                   LD	HL,ACCS
002511 CD B3 09    7168                   CALL	OSCLI
002514 18 83       7169                   JR	XEQ
002516             7170   ;
002516 FE C4       7171   EXTRAS:         CP	TELSE-TCMD
002518 28 17       7172                   JR	Z,REM		;ELSE
00251A FE BE       7173                   CP	TERROR-TCMD
00251C 28 21       7174                   JR	Z,THROW		;ERROR
00251E FE BF       7175                   CP	TLINE-TCMD
002520 CA 05 0F    7176                   JP	Z,LINE		;LINE
002523 FE C0       7177                   CP	TOFF-TCMD
002525 CA EE 0E    7178                   JP	Z,CSROFF	;OFF
002528 C3 E0 25    7179                   JP	SYNTAX
00252B             7180   ;
00252B             7181   ;REM, *
00252B             7182   ;
00252B FD E5       7183   EXT:            PUSH	IY
00252D E1          7184                   POP	HL
00252E CD B3 09    7185                   CALL	OSCLI
002531 FD E5       7186   REM:            PUSH	IY
002533 E1          7187                   POP	HL
002534 3E 0D       7188                   LD	A,CR
002536 47          7189                   LD	B,A
002537 ED B1       7190                   CPIR			;FIND LINE END
002539 E5          7191                   PUSH	HL
00253A FD E1       7192                   POP	IY
00253C C3 84 24    7193                   JP	XEQ0
00253F             7194   ;
00253F             7195   ;ERROR num,string$
00253F             7196   ;
00253F CD 33 18    7197   THROW:          CALL	EXPRI
002542 D9          7198                   EXX
002543 E5          7199                   PUSH	HL
002544 D9          7200                   EXX
002545 CD A2 20    7201                   CALL	COMMA
002548 CD 3C 18    7202                   CALL	EXPRS
00254B E1          7203                   POP	HL
00254C AF          7204                   XOR	A
00254D 12          7205                   LD	(DE),A
00254E 7D          7206                   LD	A,L
00254F 21 00 52    7207                   LD	HL,ACCS
002552 11 00 53    7208                   LD	DE,BUFFER
002555 D5          7209                   PUSH	DE
002556 01 00 01    7210                   LD	BC,256
002559 ED B0       7211                   LDIR
00255B C3 55 3F    7212                   JP	EXTERR
00255E             7213   ;
00255E             7214   ; SWAP
00255E             7215   ;
00255E CD E3 41    7216   SWAPex:           CALL	GETVAR
002561 20 0B       7217                   JR	NZ,SWAPNZ
002563 F5          7218                   PUSH	AF
002564 E5          7219                   PUSH	HL
002565 CD A2 20    7220                   CALL	COMMA
002568 CD 0B 45    7221                   CALL	NXT
00256B CD E3 41    7222                   CALL	GETVAR
00256E 20 6D       7223   SWAPNZ:         JR	NZ,NOSUCH
002570 D1          7224                   POP	DE
002571 C1          7225                   POP	BC
002572 B8          7226                   CP	B
002573 20 74       7227                   JR	NZ,MISMAT
002575 E6 0F       7228                   AND	00001111B
002577 28 70       7229                   JR	Z,MISMAT
002579 78          7230                   LD	A,B
00257A E6 C0       7231                   AND	11000000B
00257C 28 0A       7232                   JR	Z,SWAP1ex
00257E 06 02       7233                   LD	B,2
002580 F2 88 25    7234                   JP	P,SWAP1ex
002583 EA 88 25    7235                   JP	PE,SWAP1ex
002586 06 04       7236                   LD	B,4
002588 4E          7237   SWAP1ex:          LD	C,(HL)
002589 1A          7238                   LD	A,(DE)
00258A 77          7239                   LD	(HL),A
00258B 79          7240                   LD	A,C
00258C 12          7241                   LD	(DE),A
00258D 13          7242                   INC	DE
00258E 23          7243                   INC	HL
00258F 10 F7       7244                   DJNZ	SWAP1ex
002591 18 28       7245                   JR	XEQGO4
002593             7246   ;
002593             7247   ;[LET] var = expr
002593             7248   ;
002593 FE 2A       7249   LET0:           CP	'*'
002595 28 94       7250                   JR	Z,EXT
002597 FE 3D       7251                   CP	'='
002599 28 71       7252                   JR	Z,FNEND
00259B FE 5B       7253                   CP	'['
00259D 28 52       7254                   JR	Z,ASM
00259F FD 2B       7255                   DEC	IY
0025A1 CD AF 31    7256   LET:            CALL	ASSIGN
0025A4 CA 99 24    7257                   JP	Z,XEQ
0025A7 38 37       7258                   JR	C,SYNTAX	;"Syntax error"
0025A9 F2 FB 20    7259                   JP	P,LETARR	;Numeric array
0025AC EA FB 20    7260                   JP	PE,LETARR	;String array
0025AF 7A          7261                   LD	A,D		;Type
0025B0 D5          7262                   PUSH	DE
0025B1 E5          7263                   PUSH	HL
0025B2 CD 3C 18    7264                   CALL	EXPRS
0025B5 DD E1       7265                   POP	IX
0025B7 E1          7266                   POP	HL
0025B8 CD 18 32    7267                   CALL	MODIFS
0025BB C3 99 24    7268   XEQGO4:         JP	XEQ
0025BE             7269   ;
0025BE             7270   ; GETSTR - Get string variable
0025BE             7271   ;   Inputs: IY = text pointer
0025BE             7272   ;  Outputs: B = type
0025BE             7273   ;           Z-flag set if comma
0025BE             7274   ;
0025BE CD E3 41    7275   GETSTR:         CALL	GETVAR
0025C1 20 1A       7276                   JR	NZ,NOSUCH
0025C3 47          7277                   LD	B,A
0025C4 E6 C0       7278                   AND	11000000B
0025C6 F2 E9 25    7279                   JP	P,MISMAT
0025C9 EA E6 25    7280                   JP	PE,BADUSE
0025CC CB 40       7281                   BIT	0,B
0025CE 28 19       7282                   JR	Z,MISMAT
0025D0 CD 0B 45    7283                   CALL	NXT
0025D3 FE 2C       7284                   CP	','
0025D5 C9          7285                   RET
0025D6             7286   ;
0025D6 CD E3 41    7287   VAR_:           CALL	GETVAR
0025D9 C8          7288                   RET	Z
0025DA D2 CD 41    7289                   JP	NC,PUTVAR
0025DD 3E 1A       7290   NOSUCH:         LD	A,26		;'No such variable'
0025DF 21          7291                   DB	21H
0025E0 3E 10       7292   SYNTAX:         LD	A,16		;"Syntax error"
0025E2 21          7293                   DB	21H
0025E3 3E 11       7294   ESCAPE:         LD	A,17		;"Escape"
0025E5 21          7295                   DB	21H
0025E6 3E 0E       7296   BADUSE:         LD	A,14		;'Bad use of array'
0025E8 21          7297                   DB	21H
0025E9 3E 06       7298   MISMAT:         LD	A,6		;'Type mismatch'
0025EB C3 44 3F    7299   ERROR0ex:         JP	ERROR_
0025EE             7300   ;
0025EE CD DB 24    7301   ASM0:           CALL	NEWLIN
0025F1 FD 22 F4 54 7302   ASM:            LD	(CURLIN),IY
0025F5 CD 33 06    7303                   CALL	TRAP
0025F8 CD 1B 11    7304                   CALL	ASSEM
0025FB 38 E3       7305                   JR	C,SYNTAX
0025FD FE 0D       7306                   CP	CR
0025FF 28 ED       7307                   JR	Z,ASM0
002601 21 FE 54    7308                   LD	HL,LISTON
002604 7E          7309                   LD	A,(HL)
002605 E6 0F       7310                   AND	0FH
002607 F6 30       7311                   OR	30H
002609 77          7312                   LD	(HL),A
00260A 18 AF       7313                   JR	XEQGO4
00260C             7314   ;
00260C             7315   ;=
00260C             7316   ;
00260C CD 02 17    7317   FNEND:          CALL	EXPR		;FUNCTION RESULT
00260F 08          7318                   EX	AF,AF'
002610 87          7319                   ADD	A,A
002611 7B          7320                   LD	A,E
002612 38 01       7321                   JR	C,FNEND1
002614 79          7322                   LD	A,C
002615 08          7323   FNEND1:         EX	AF,AF'
002616 E5          7324                   PUSH	HL
002617 D9          7325                   EXX
002618 C1          7326                   POP	BC
002619 EB          7327                   EX	DE,HL		;SAVE RESULT IN A'B'C'D'E'
00261A D9          7328                   EXX
00261B C1          7329   FNEND2:         POP	BC
00261C 21 E7 29    7330                   LD	HL,FNCHK
00261F AF          7331                   XOR	A
002620 ED 42       7332                   SBC	HL,BC
002622 28 0A       7333                   JR	Z,FNEND3
002624 C5          7334                   PUSH	BC
002625 CD 31 34    7335                   CALL	RESLOC
002628 20 F1       7336                   JR	NZ,FNEND2
00262A 3E 07       7337                   LD	A,7
00262C 18 BD       7338                   JR	ERROR0ex		;"No FN"
00262E             7339   ;
00262E FD E1       7340   FNEND3:         POP	IY
002630 FD 22 F4 54 7341                   LD	(CURLIN),IY	;IN CASE OF ERROR
002634 D9          7342                   EXX
002635 EB          7343                   EX	DE,HL
002636 C5          7344                   PUSH	BC
002637 D9          7345                   EXX
002638 E1          7346                   POP	HL
002639 08          7347                   EX	AF,AF'
00263A 5F          7348                   LD	E,A
00263B 4F          7349                   LD	C,A
00263C 1F          7350                   RRA
00263D C9          7351                   RET
00263E             7352   ;
00263E             7353   ;DIM var(dim1[,dim2[,...]])[,var(...]
00263E             7354   ;DIM var expr[,var expr...]
00263E             7355   ;
00263E FD E5       7356   DIM:            PUSH	IY
002640 FE 21       7357                   CP	'!'
002642 CA 0F 27    7358                   JP	Z,DIM4
002645 CD B0 42    7359                   CALL	LOCATE		;VARIABLE
002648 DA F9 26    7360                   JP	C,BADDIM
00264B C4 3C 43    7361                   CALL	NZ,CREATE
00264E FD 7E 00    7362                   LD	A,(IY)
002651 FE 28       7363                   CP	'('
002653 C2 0F 27    7364                   JP	NZ,DIM4
002656 E5          7365                   PUSH	HL
002657 DD E1       7366                   POP	IX
002659 7E          7367                   LD	A,(HL)
00265A E6 FE       7368                   AND	0FEH
00265C 23          7369                   INC	HL
00265D B6          7370                   OR	(HL)
00265E C2 0F 27    7371                   JP	NZ,DIM4
002661 C1          7372                   POP	BC		;LEVEL STACK
002662 7A          7373                   LD	A,D
002663 2A E0 54    7374                   LD	HL,(FREE)
002666 E5          7375                   PUSH	HL
002667 DD E3       7376                   EX	(SP),IX
002669 E5          7377                   PUSH	HL
00266A F5          7378                   PUSH	AF		;SAVE TYPE
00266B 11 01 00    7379                   LD	DE,1
00266E 42          7380                   LD	B,D		;DIMENSION COUNTER
00266F FD 23       7381   DIM1:           INC	IY
002671 C5          7382                   PUSH	BC
002672 D5          7383                   PUSH	DE
002673 DD E5       7384                   PUSH	IX
002675 CD 33 18    7385                   CALL	EXPRI		;DIMENSION SIZE
002678 CB 7C       7386                   BIT	7,H
00267A 20 7D       7387                   JR	NZ,BADDIM
00267C D9          7388                   EXX
00267D 23          7389                   INC	HL
00267E DD E1       7390                   POP	IX
002680 DD 23       7391                   INC	IX
002682 DD 75 00    7392                   LD	(IX),L		;SAVE SIZE
002685 DD 23       7393                   INC	IX
002687 DD 74 00    7394                   LD	(IX),H
00268A C1          7395                   POP	BC
00268B CD BD 36    7396                   CALL	MUL16		;HL=HL*BC
00268E 38 6C       7397                   JR	C,NOROOM	;TOO LARGE
002690 EB          7398                   EX	DE,HL		;DE=PRODUCT
002691 C1          7399                   POP	BC
002692 04          7400                   INC	B		;DIMENSION COUNTER
002693 FD 7E 00    7401                   LD	A,(IY)
002696 FE 2C       7402                   CP	','		;ANOTHER
002698 28 D5       7403                   JR	Z,DIM1
00269A DD 23       7404                   INC	IX
00269C CD AE 20    7405                   CALL	BRAKET		;CLOSING BRACKET
00269F F1          7406                   POP	AF		;RESTORE TYPE
0026A0 CD AD 36    7407                   CALL	X14OR5		;DE=DE*n
0026A3 38 57       7408                   JR	C,NOROOM
0026A5 E1          7409                   POP	HL
0026A6 70          7410                   LD	(HL),B		;NO. OF DIMENSIONS
0026A7 DD E3       7411                   EX	(SP),IX
0026A9 E1          7412                   POP	HL
0026AA E6 80       7413                   AND	80H
0026AC DD B6 00    7414                   OR	(IX)		;FLAGS
0026AF             7415   ;
0026AF             7416   ;  A = flags: bit 7 = string, bit 0 = LOCAL
0026AF             7417   ; DE = amount to allocate
0026AF             7418   ; HL = where to allocate (if not LOCAL)
0026AF             7419   ; (HL - FREE is size of 'descriptor')
0026AF             7420   ; IX = where to store pointer
0026AF             7421   ;
0026AF E5          7422   DIM3:           PUSH	HL
0026B0 24          7423                   INC	H		;Safety margin
0026B1 19          7424                   ADD	HL,DE
0026B2 38 48       7425                   JR	C,NOROOM
0026B4 ED 72       7426                   SBC	HL,SP
0026B6 30 44       7427                   JR	NC,NOROOM
0026B8 E1          7428                   POP	HL
0026B9 E5          7429                   PUSH	HL
0026BA ED 4B E0 54 7430                   LD	BC,(FREE)
0026BE B7          7431                   OR	A
0026BF ED 42       7432                   SBC	HL,BC
0026C1 44          7433                   LD	B,H
0026C2 4D          7434                   LD	C,L
0026C3 E1          7435                   POP	HL
0026C4 ED 42       7436                   SBC	HL,BC
0026C6 CB 47       7437                   BIT	0,A
0026C8 28 12       7438                   JR	Z,ARRCHK	;NOT LOCAL
0026CA 21 00 00    7439                   LD	HL,0
0026CD ED 52       7440                   SBC	HL,DE
0026CF B7          7441                   OR	A
0026D0 ED 42       7442                   SBC	HL,BC
0026D2 39          7443                   ADD	HL,SP
0026D3 28 07       7444                   JR	Z,ARRCHK	;RESERVE NOTHING
0026D5 F9          7445                   LD	SP,HL
0026D6 D5          7446                   PUSH	DE
0026D7 C5          7447                   PUSH	BC
0026D8 F5          7448                   PUSH	AF
0026D9 CD DC 26    7449                   CALL	ARRCHK
0026DC DD 75 00    7450   ARRCHK:         LD	(IX+0),L	;SAVE POINTER
0026DF DD 74 01    7451                   LD	(IX+1),H
0026E2 78          7452                   LD	A,B
0026E3 B1          7453                   OR	C
0026E4 28 09       7454                   JR	Z,DIM2
0026E6 D5          7455                   PUSH	DE
0026E7 EB          7456                   EX	DE,HL
0026E8 2A E0 54    7457                   LD	HL,(FREE)
0026EB ED B0       7458                   LDIR			;COPY DESCRIPTOR
0026ED EB          7459                   EX	DE,HL
0026EE D1          7460                   POP	DE
0026EF 7A          7461   DIM2:           LD	A,D
0026F0 B3          7462                   OR	E
0026F1 28 0E       7463                   JR	Z,DIM5
0026F3 36 00       7464                   LD	(HL),0		;INITIALISE ARRAY
0026F5 23          7465                   INC	HL
0026F6 1B          7466                   DEC	DE
0026F7 18 F6       7467                   JR	DIM2
0026F9             7468   ;
0026F9 3E 0A       7469   BADDIM:         LD	A,10		;"Bad DIM"
0026FB 21          7470                   DB	21H
0026FC 3E 0B       7471   NOROOM:         LD	A,11		;"DIM space"
0026FE C3 44 3F    7472   ERROR1ex:         JP	ERROR_
002701             7473   ;
002701 ED 72       7474   DIM5:           SBC	HL,SP
002703 30 04       7475                   JR	NC,DIM7		;LOCAL
002705 39          7476                   ADD	HL,SP
002706 22 E0 54    7477                   LD	(FREE),HL
002709 CD 00 45    7478   DIM7:           CALL	NLIST		;ANOTHER VARIABLE?
00270C C3 3E 26    7479                   JP	DIM
00270F             7480   ;
00270F FD E1       7481   DIM4:           POP	IY
002711 CD D6 25    7482                   CALL	VAR_
002714 B7          7483                   OR	A
002715 28 E2       7484                   JR	Z,BADDIM
002717 FA F9 26    7485                   JP	M,BADDIM
00271A CB 77       7486                   BIT	6,A
00271C 20 DB       7487                   JR	NZ,BADDIM
00271E 47          7488                   LD	B,A		;TYPE
00271F CD 0B 45    7489                   CALL	NXT
002722 FE EA       7490                   CP	TLOCAL
002724 3E 00       7491                   LD	A,0		;PRESET TO NOT LOCAL
002726 20 03       7492                   JR	NZ,DIM8
002728 FD 23       7493                   INC	IY
00272A 3C          7494                   INC	A		;FLAG LOCAL
00272B F5          7495   DIM8:           PUSH	AF
00272C 78          7496                   LD	A,B		;TYPE
00272D D9          7497                   EXX
00272E 21 00 00    7498                   LD	HL,0
002731 4C          7499                   LD	C,H
002732 CD F0 31    7500                   CALL	STOREN		;RESERVED AREA
002735 DD E5       7501                   PUSH	IX
002737 CD 33 18    7502                   CALL	EXPRI
00273A DD E1       7503                   POP	IX
00273C D9          7504                   EXX
00273D 23          7505                   INC	HL
00273E EB          7506                   EX	DE,HL
00273F 2A E0 54    7507                   LD	HL,(FREE)
002742 F1          7508                   POP	AF		;LOCAL FLAG
002743 C3 AF 26    7509                   JP	DIM3
002746             7510   ;
002746             7511   ;PRINT list...
002746             7512   ;PRINT #channel,list...
002746             7513   ;
002746 FE 23       7514   PRINT:          CP	'#'
002748 20 64       7515                   JR	NZ,PRINT0
00274A CD DB 36    7516                   CALL	CHNL		;CHANNEL NO. = E
00274D CD 00 45    7517   PRNTN1:         CALL	NLIST
002750 D5          7518                   PUSH	DE
002751 CD 02 17    7519                   CALL	EXPR		;ITEM TO PRINT
002754 08          7520                   EX	AF,AF'
002755 FA 75 27    7521                   JP	M,PRNTN2	;STRING
002758 D1          7522                   POP	DE
002759 C5          7523                   PUSH	BC
00275A D9          7524                   EXX
00275B 7D          7525                   LD	A,L
00275C D9          7526                   EXX
00275D CD 63 06    7527                   CALL	OSBPUT
002760 D9          7528                   EXX
002761 7C          7529                   LD	A,H
002762 D9          7530                   EXX
002763 CD 63 06    7531                   CALL	OSBPUT
002766 7D          7532                   LD	A,L
002767 CD 63 06    7533                   CALL	OSBPUT
00276A 7C          7534                   LD	A,H
00276B CD 63 06    7535                   CALL	OSBPUT
00276E C1          7536                   POP	BC
00276F 79          7537                   LD	A,C
002770 CD 63 06    7538                   CALL	OSBPUT
002773 18 D8       7539                   JR	PRNTN1
002775 4B          7540   PRNTN2:         LD	C,E
002776 D1          7541                   POP	DE
002777 21 00 52    7542                   LD	HL,ACCS
00277A 0C          7543                   INC	C
00277B 0D          7544   PRNTN3:         DEC	C
00277C 28 09       7545                   JR	Z,PRNTN4
00277E 7E          7546                   LD	A,(HL)
00277F 23          7547                   INC	HL
002780 C5          7548                   PUSH	BC
002781 CD 63 06    7549                   CALL	OSBPUT
002784 C1          7550                   POP	BC
002785 18 F4       7551                   JR	PRNTN3
002787 3E 0D       7552   PRNTN4:         LD	A,CR
002789 CD 63 06    7553                   CALL	OSBPUT
00278C 18 BF       7554                   JR	PRNTN1
00278E             7555   ;
00278E 06 02       7556   PRINT6:         LD	B,2
002790 18 22       7557                   JR	PRINTC
002792 01 00 01    7558   PRINT8:         LD	BC,100H
002795 18 1D       7559                   JR	PRINTC
002797 21 00 54    7560   PRINT9:         LD	HL,STAVAR
00279A AF          7561                   XOR	A
00279B BE          7562                   CP	(HL)
00279C 28 10       7563                   JR	Z,PRINT0
00279E 3A FB 54    7564                   LD	A,(COUNT)
0027A1 B7          7565                   OR	A
0027A2 28 0A       7566                   JR	Z,PRINT0
0027A4 96          7567   PRINTA:         SUB	(HL)
0027A5 28 07       7568                   JR	Z,PRINT0
0027A7 30 FB       7569                   JR	NC,PRINTA
0027A9 ED 44       7570                   NEG
0027AB CD A3 35    7571                   CALL	SPACES
0027AE 3A 00 54    7572   PRINT0:         LD	A,(STAVAR)
0027B1 4F          7573                   LD	C,A		;PRINTS
0027B2 06 00       7574                   LD	B,0		;PRINTF
0027B4 CD 36 35    7575   PRINTC:         CALL	TERMQ
0027B7 28 38       7576                   JR	Z,PRINT4
0027B9 CB 80       7577                   RES	0,B
0027BB FD 23       7578                   INC	IY
0027BD FE 7E       7579                   CP	'~'
0027BF 28 CD       7580                   JR	Z,PRINT6
0027C1 FE 3B       7581                   CP	';'
0027C3 28 CD       7582                   JR	Z,PRINT8
0027C5 FE 2C       7583                   CP	','
0027C7 28 CE       7584                   JR	Z,PRINT9
0027C9 CD 5C 35    7585                   CALL	FORMAT		;SPC, TAB, '
0027CC 28 E6       7586                   JR	Z,PRINTC
0027CE FD 2B       7587                   DEC	IY
0027D0 C5          7588                   PUSH	BC
0027D1 CD 02 17    7589                   CALL	EXPR		;VARIABLE TYPE
0027D4 08          7590                   EX	AF,AF'
0027D5 FA EB 27    7591                   JP	M,PRINT3	;STRING
0027D8 D1          7592                   POP	DE
0027D9 D5          7593                   PUSH	DE
0027DA CB 4A       7594                   BIT	1,D
0027DC F5          7595                   PUSH	AF
0027DD CC D0 1F    7596                   CALL	Z,STR		;DECIMAL
0027E0 F1          7597                   POP	AF
0027E1 C4 8D 1F    7598                   CALL	NZ,HEXSTR	;HEX
0027E4 C1          7599                   POP	BC
0027E5 C5          7600                   PUSH	BC
0027E6 79          7601                   LD	A,C
0027E7 93          7602                   SUB	E
0027E8 D4 A3 35    7603                   CALL	NC,SPACES		;RIGHT JUSTIFY
0027EB C1          7604   PRINT3:         POP	BC
0027EC CD B1 35    7605                   CALL	PTEXT		;PRINT
0027EF 18 C3       7606                   JR	PRINTC
0027F1 CB 40       7607   PRINT4:         BIT	0,B
0027F3 CC FB 40    7608                   CALL	Z,CRLF
0027F6 18 3F       7609                   JR	XEQGO3
0027F8             7610   ;
0027F8 FD 23       7611   ONERR:          INC	IY		;SKIP "ERROR"
0027FA CD 0B 45    7612                   CALL	NXT
0027FD 21 00 00    7613                   LD	HL,0		;FLAG NOT LOCAL
002800 FE EA       7614                   CP	TLOCAL
002802 20 1D       7615                   JR	NZ,ONERR1
002804 FD 23       7616                   INC	IY		;SKIP "LOCAL"
002806 2A EA 54    7617                   LD	HL,(ERRTRP)
002809 E5          7618                   PUSH	HL
00280A 2A EC 54    7619                   LD	HL,(ONERSP)
00280D E5          7620                   PUSH	HL
00280E 21 00 04    7621                   LD	HL,400H		;TYPE = 4, 'EXPONENT' = 0
002811 E5          7622                   PUSH	HL
002812 21 EA 54    7623                   LD	HL,ERRTRP
002815 E5          7624                   PUSH	HL
002816 21 2A 35    7625                   LD	HL,LOCCHK
002819 E5          7626                   PUSH	HL
00281A 21 00 00    7627                   LD	HL,0
00281D 39          7628                   ADD	HL,SP
00281E CD 0B 45    7629                   CALL	NXT
002821 22 EC 54    7630   ONERR1:         LD	(ONERSP),HL
002824 FD 22 EA 54 7631                   LD	(ERRTRP),IY
002828 FE 87       7632                   CP	TOFF
00282A C2 31 25    7633                   JP	NZ,REM
00282D FD 23       7634                   INC	IY		;SKIP "OFF"
00282F ED 62       7635                   SBC	HL,HL
002831 22 EC 54    7636                   LD	(ONERSP),HL
002834 22 EA 54    7637                   LD	(ERRTRP),HL
002837 C3 99 24    7638   XEQGO3:         JP	XEQ
00283A             7639   ;
00283A             7640   ;ON expr GOTO line[,line...] [ELSE statement]
00283A             7641   ;ON expr GOTO line[,line...] [ELSE line]
00283A             7642   ;ON expr GOSUB line[,line...] [ELSE statement]
00283A             7643   ;ON expr GOSUB line[,line...] [ELSE line]
00283A             7644   ;ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
00283A             7645   ;ON ERROR [LOCAL] statement [:statement...]
00283A             7646   ;ON ERROR [LOCAL] OFF
00283A             7647   ;
00283A CD 36 35    7648   ON:             CALL	TERMQ
00283D CA EA 0E    7649                   JP	Z,CSRON
002840 FE 85       7650                   CP	TERROR
002842 28 B4       7651                   JR	Z,ONERR		;"ON ERROR"
002844 CD 33 18    7652                   CALL	EXPRI
002847 FD 7E 00    7653                   LD	A,(IY)
00284A FD 23       7654                   INC	IY
00284C 1E 2C       7655                   LD	E,','		;SEPARATOR
00284E FE E5       7656                   CP	TGOTO
002850 28 0B       7657                   JR	Z,ON1
002852 FE E4       7658                   CP	TGOSUB
002854 28 07       7659                   JR	Z,ON1
002856 1E F2       7660                   LD	E,TPROC
002858 BB          7661                   CP	E
002859 3E 27       7662                   LD	A,39
00285B 20 4F       7663                   JR	NZ,ERROR2ex	;"ON syntax"
00285D 57          7664   ON1:            LD	D,A
00285E D9          7665                   EXX
00285F E5          7666                   PUSH	HL
002860 D9          7667                   EXX
002861 C1          7668                   POP	BC		;ON INDEX
002862 78          7669                   LD	A,B
002863 B4          7670                   OR	H
002864 B5          7671                   OR	L
002865 20 32       7672                   JR	NZ,ON4		;OUT OF RANGE
002867 B1          7673                   OR	C
002868 28 2F       7674                   JR	Z,ON4
00286A 0D          7675                   DEC	C
00286B 28 11       7676                   JR	Z,ON3		;INDEX=1
00286D CD 36 35    7677   ON2:            CALL	TERMQ
002870 28 27       7678                   JR	Z,ON4		;OUT OF RANGE
002872 FD 23       7679                   INC	IY		;SKIP DELIMITER
002874 FE 22       7680                   CP	'"'
002876 28 1A       7681                   JR	Z,ON5
002878 BB          7682                   CP	E
002879 20 F2       7683                   JR	NZ,ON2
00287B 0D          7684                   DEC	C
00287C 20 EF       7685                   JR	NZ,ON2
00287E 7B          7686   ON3:            LD	A,E
00287F FE F2       7687                   CP	TPROC
002881 28 2C       7688                   JR	Z,ONPROC
002883 D5          7689                   PUSH	DE
002884 CD 60 18    7690                   CALL	ITEMI		;LINE NUMBER
002887 D1          7691                   POP	DE
002888 7A          7692                   LD	A,D
002889 FE E5       7693                   CP	TGOTO
00288B 28 30       7694                   JR	Z,GOTO2
00288D CD 42 35    7695                   CALL	SPAN		;SKIP REST OF LIST
002890 18 3C       7696                   JR	GOSUB1
002892             7697   ;
002892 CD 99 36    7698   ON5:            CALL	QUOTE
002895 FD 23       7699                   INC	IY
002897 18 D4       7700                   JR	ON2
002899             7701   ;
002899 FD 7E 00    7702   ON4:            LD	A,(IY)
00289C FD 23       7703                   INC	IY
00289E FE 8B       7704                   CP	TELSE
0028A0 CA E2 2C    7705                   JP	Z,IF1		;ELSE CLAUSE
0028A3 FE 0D       7706                   CP	CR
0028A5 20 F2       7707                   JR	NZ,ON4
0028A7 3E 28       7708                   LD	A,40		;'ON range'
0028A9 21          7709                   DB	21H
0028AA 3E 22       7710   FORVAR:         LD	A,34		;'FOR variable'
0028AC C3 44 3F    7711   ERROR2ex:         JP	ERROR_
0028AF             7712   ;
0028AF 3E EE       7713   ONPROC:         LD	A,TON
0028B1 C3 E7 29    7714                   JP	PROC
0028B4             7715   ;
0028B4             7716   ;GOTO line
0028B4             7717   ;
0028B4 CD 60 18    7718   GOTO:           CALL	ITEMI		;LINE NUMBER
0028B7 CD 36 35    7719   GOTO1:          CALL	TERMQ
0028BA C2 E0 25    7720                   JP	NZ,SYNTAX
0028BD D9          7721   GOTO2:          EXX
0028BE CD 43 41    7722                   CALL	FINDL
0028C1 E5          7723                   PUSH	HL
0028C2 FD E1       7724                   POP	IY
0028C4 CA 84 24    7725                   JP	Z,XEQ0
0028C7 3E 29       7726                   LD	A,41
0028C9 18 E1       7727                   JR	ERROR2ex		;"No such line"
0028CB             7728   ;
0028CB             7729   ;GOSUB line
0028CB             7730   ;
0028CB CD 60 18    7731   GOSUB:          CALL	ITEMI		;LINE NUMBER
0028CE FD E5       7732   GOSUB1:         PUSH	IY		;TEXT POINTER
0028D0 CD 86 32    7733                   CALL	CHECK		;CHECK ROOM
0028D3 CD B7 28    7734                   CALL	GOTO1		;SAVE MARKER
0028D6             7735   GOSCHK:         EQU	$
0028D6             7736   ;
0028D6             7737   ;RETURN
0028D6             7738   ;
0028D6 D1          7739   RETURN:         POP	DE		;MARKER
0028D7 21 D6 28    7740                   LD	HL,GOSCHK
0028DA B7          7741                   OR	A
0028DB ED 52       7742                   SBC	HL,DE
0028DD FD E1       7743                   POP	IY
0028DF 28 30       7744                   JR	Z,XEQGO2ex
0028E1 3E 26       7745                   LD	A,38
0028E3 18 C7       7746                   JR	ERROR2ex		;"No GOSUB"
0028E5             7747   ;
0028E5             7748   ;REPEAT
0028E5             7749   ;
0028E5 FD E5       7750   REPEAT:         PUSH	IY
0028E7 CD 86 32    7751                   CALL	CHECK
0028EA CD 99 24    7752                   CALL	XEQ
0028ED             7753   REPCHK:         EQU	$
0028ED             7754   ;
0028ED             7755   ;UNTIL expr
0028ED             7756   ;
0028ED C1          7757   UNTIL:          POP	BC
0028EE C5          7758                   PUSH	BC
0028EF 21 ED 28    7759                   LD	HL,REPCHK
0028F2 B7          7760                   OR	A
0028F3 ED 42       7761                   SBC	HL,BC
0028F5 28 0B       7762                   JR	Z,UNTIL1
0028F7 3E 03       7763                   LD	A,3
0028F9 CD 31 34    7764                   CALL	RESLOC
0028FC 20 EF       7765                   JR	NZ,UNTIL
0028FE 3E 2B       7766                   LD	A,43
002900 18 AA       7767                   JR	ERROR2ex		;"Not in a REPEAT loop"
002902             7768   ;
002902 CD 33 18    7769   UNTIL1:         CALL	EXPRI
002905 CD 59 1F    7770                   CALL	TEST
002908 C1          7771                   POP	BC
002909 D1          7772                   POP	DE
00290A 20 05       7773                   JR	NZ,XEQGO2ex		;TRUE
00290C D5          7774                   PUSH	DE
00290D C5          7775                   PUSH	BC
00290E D5          7776                   PUSH	DE
00290F FD E1       7777                   POP	IY
002911 C3 99 24    7778   XEQGO2ex:         JP	XEQ
002914             7779   ;
002914             7780   ;FOR var = expr TO expr [STEP expr]
002914             7781   ;
002914 CD AF 31    7782   FORex:            CALL	ASSIGN
002917 20 91       7783                   JR	NZ,FORVAR	;"FOR variable"
002919 F5          7784                   PUSH	AF		;SAVE TYPE
00291A FD 7E 00    7785                   LD	A,(IY)
00291D FE B8       7786                   CP	TTO
00291F 3E 24       7787                   LD	A,36
002921 20 89       7788                   JR	NZ,ERROR2ex	;"No TO"
002923 FD 23       7789                   INC	IY
002925 DD E5       7790                   PUSH	IX
002927 CD 2C 18    7791                   CALL	EXPRN		;LIMIT
00292A DD E1       7792                   POP	IX
00292C F1          7793                   POP	AF
00292D 47          7794                   LD	B,A		;TYPE
00292E C5          7795                   PUSH	BC		;SAVE ON STACK
00292F E5          7796                   PUSH	HL
002930 21 00 00    7797                   LD	HL,0
002933 4C          7798                   LD	C,H
002934 D9          7799                   EXX
002935 E5          7800                   PUSH	HL
002936 21 01 00    7801                   LD	HL,1		;PRESET STEP
002939 D9          7802                   EXX
00293A FD 7E 00    7803                   LD	A,(IY)
00293D FE 88       7804                   CP	TSTEP
00293F 20 09       7805                   JR	NZ,FOR1
002941 FD 23       7806                   INC	IY
002943 DD E5       7807                   PUSH	IX
002945 CD 2C 18    7808                   CALL	EXPRN		;STEP
002948 DD E1       7809                   POP	IX
00294A 06 08       7810   FOR1:           LD	B,8		;FPP '>'
00294C CB 7C       7811                   BIT	7,H
00294E 20 02       7812                   JR	NZ,FOR2		;STEP SIGN
002950 06 0C       7813                   LD	B,12		;FPP '<'
002952 C5          7814   FOR2:           PUSH	BC
002953 E5          7815                   PUSH	HL
002954 D9          7816                   EXX
002955 E5          7817                   PUSH	HL
002956 D9          7818                   EXX
002957 FD E5       7819                   PUSH	IY		;SAVE TEXT POINTER
002959 DD E5       7820                   PUSH	IX		;LOOP VARIABLE
00295B CD 86 32    7821                   CALL	CHECK
00295E CD 99 24    7822                   CALL	XEQ
002961             7823   FORCHK:         EQU	$
002961             7824   ;
002961             7825   ;NEXT [var[,var...]]
002961             7826   ;
002961 C1          7827   NEXT:           POP	BC		;MARKER
002962 21 61 29    7828                   LD	HL,FORCHK
002965 B7          7829                   OR	A
002966 ED 42       7830                   SBC	HL,BC
002968 28 0C       7831                   JR	Z,NEXT2
00296A C5          7832                   PUSH	BC
00296B 3E 03       7833                   LD	A,3
00296D CD 31 34    7834                   CALL	RESLOC
002970 20 EF       7835                   JR	NZ,NEXT
002972 3E 20       7836                   LD	A,32
002974 18 6A       7837                   JR	ERROR3ex		;"Not in a FOR loop"
002976             7838   ;
002976 CD 36 35    7839   NEXT2:          CALL	TERMQ
002979 E1          7840                   POP	HL
00297A E5          7841                   PUSH	HL
00297B C5          7842                   PUSH	BC
00297C E5          7843                   PUSH	HL
00297D C4 E3 41    7844                   CALL	NZ,GETVAR	;VARIABLE
002980 D1          7845                   POP	DE
002981 EB          7846                   EX	DE,HL
002982 B7          7847                   OR	A
002983 ED 52       7848   NEXT0:          SBC	HL,DE
002985 20 47       7849                   JR	NZ,NEXT1
002987 D5          7850                   PUSH	DE
002988 DD 21 08 00 7851                   LD	IX,6+2
00298C DD 39       7852                   ADD	IX,SP
00298E CD F1 19    7853                   CALL	DLOAD5		;STEP
002991 DD 7E 0B    7854                   LD	A,(IX+11)	;TYPE
002994 DD E1       7855                   POP	IX
002996 CD 25 19    7856                   CALL	LOADN		;LOOP VARIABLE
002999 F5          7857                   PUSH	AF
00299A 3E 0B       7858                   LD	A,'+' & 0FH
00299C CD 15 45    7859                   CALL	FPP		;ADD STEP
00299F 38 3F       7860                   JR	C,ERROR3ex
0029A1 F1          7861                   POP	AF		;RESTORE TYPE
0029A2 CD F0 31    7862                   CALL	STOREN		;UPDATE VARIABLE
0029A5 DD 21 0C 00 7863                   LD	IX,12
0029A9 DD 39       7864                   ADD	IX,SP
0029AB CD F1 19    7865                   CALL	DLOAD5		;LIMIT
0029AE DD 7E FF    7866                   LD	A,(IX-1)
0029B1 CD 15 45    7867                   CALL	FPP		;TEST AGAINST LIMIT
0029B4 38 2A       7868                   JR	C,ERROR3ex
0029B6 24          7869                   INC	H
0029B7 20 0A       7870                   JR	NZ,LOOP		;KEEP LOOPING
0029B9 21 12 00    7871                   LD	HL,18
0029BC 39          7872                   ADD	HL,SP
0029BD F9          7873                   LD	SP,HL
0029BE CD 00 45    7874                   CALL	NLIST
0029C1 18 9E       7875                   JR	NEXT
0029C3             7876   ;
0029C3 C1          7877   LOOP:           POP	BC
0029C4 D1          7878                   POP	DE
0029C5 FD E1       7879                   POP	IY
0029C7 FD E5       7880                   PUSH	IY
0029C9 D5          7881                   PUSH	DE
0029CA C5          7882                   PUSH	BC
0029CB C3 99 24    7883                   JP	XEQ
0029CE             7884   ;
0029CE 21 12 00    7885   NEXT1:          LD	HL,18
0029D1 39          7886                   ADD	HL,SP
0029D2 F9          7887                   LD	SP,HL		;"POP" THE STACK
0029D3 C1          7888                   POP	BC
0029D4 21 61 29    7889                   LD	HL,FORCHK
0029D7 ED 42       7890                   SBC	HL,BC
0029D9 E1          7891                   POP	HL		;VARIABLE POINTER
0029DA E5          7892                   PUSH	HL
0029DB C5          7893                   PUSH	BC
0029DC 28 A5       7894                   JR	Z,NEXT0
0029DE 3E 21       7895                   LD	A,33
0029E0 C3 44 3F    7896   ERROR3ex:         JP	ERROR_		;"Can't match FOR"
0029E3             7897   ;
0029E3             7898   ;FNname
0029E3             7899   ;N.B. ENTERED WITH A <> TON
0029E3             7900   ;
0029E3 F5          7901   FN:             PUSH	AF		;MAKE SPACE ON STACK
0029E4 CD EB 29    7902                   CALL	PROC1
0029E7             7903   FNCHK:          EQU	$
0029E7             7904   ;
0029E7             7905   ;PROCname
0029E7             7906   ;N.B. ENTERED WITH A = ON PROC FLAG
0029E7             7907   ;
0029E7 F5          7908   PROC:           PUSH	AF		;MAKE SPACE ON STACK
0029E8 CD EB 29    7909                   CALL	PROC1
0029EB             7910   PROCHK:         EQU	$
0029EB CD 86 32    7911   PROC1:          CALL	CHECK
0029EE FD 2B       7912                   DEC	IY
0029F0 FD E5       7913                   PUSH	IY
0029F2 CD 96 42    7914                   CALL	GETDEF
0029F5 C1          7915                   POP	BC
0029F6 28 39       7916                   JR	Z,PROC4
0029F8 3E 1E       7917                   LD	A,30
0029FA 38 E4       7918                   JR	C,ERROR3ex	;"Bad call"
0029FC C5          7919                   PUSH	BC
0029FD 2A DC 54    7920                   LD	HL,(PAGE_)
002A00 3E DD       7921   PROC2:          LD	A,TDEF
002A02 CD FB 35    7922                   CALL	SEARCHex		;LOOK FOR "DEF"
002A05 38 21       7923                   JR	C,PROC3
002A07 E5          7924                   PUSH	HL
002A08 FD E1       7925                   POP	IY
002A0A FD 23       7926                   INC	IY		;SKIP DEF
002A0C CD 0B 45    7927                   CALL	NXT
002A0F CD 96 42    7928                   CALL	GETDEF
002A12 FD E5       7929                   PUSH	IY
002A14 D1          7930                   POP	DE
002A15 38 09       7931                   JR	C,PROC6
002A17 C4 3C 43    7932                   CALL	NZ,CREATE
002A1A FD E5       7933                   PUSH	IY
002A1C D1          7934                   POP	DE
002A1D 73          7935                   LD	(HL),E
002A1E 23          7936                   INC	HL
002A1F 72          7937                   LD	(HL),D		;SAVE ADDRESS
002A20 EB          7938   PROC6:          EX	DE,HL
002A21 3E 0D       7939                   LD	A,CR
002A23 47          7940                   LD	B,A
002A24 ED B1       7941                   CPIR			;SKIP TO END OF LINE
002A26 18 D8       7942                   JR	PROC2
002A28 FD E1       7943   PROC3:          POP	IY		;RESTORE TEXT POINTER
002A2A CD 96 42    7944                   CALL	GETDEF
002A2D 3E 1D       7945                   LD	A,29
002A2F 20 AF       7946                   JR	NZ,ERROR3ex	;"No such FN/PROC"
002A31 5E          7947   PROC4:          LD	E,(HL)
002A32 23          7948                   INC	HL
002A33 56          7949                   LD	D,(HL)		;GET ADDRESS
002A34 21 02 00    7950                   LD	HL,2
002A37 39          7951                   ADD	HL,SP
002A38 CD 0B 45    7952                   CALL	NXT		;ALLOW SPACE BEFORE (
002A3B D5          7953                   PUSH	DE		;EXCHANGE DE,IY
002A3C FD E3       7954                   EX	(SP),IY
002A3E D1          7955                   POP	DE
002A3F FE 28       7956                   CP	'('		;ARGUMENTS?
002A41 C2 E5 2A    7957                   JP	NZ,PROC5
002A44 CD 0B 45    7958                   CALL	NXT		;ALLOW SPACE BEFORE (
002A47 FE 28       7959                   CP	'('
002A49 C2 E0 25    7960                   JP	NZ,SYNTAX	;"Syntax error"
002A4C FD E5       7961                   PUSH	IY
002A4E C1          7962                   POP	BC		;SAVE IY IN BC
002A4F D9          7963                   EXX
002A50 08          7964                   EX	AF,AF'
002A51 AF          7965                   XOR	A		;INITIALISE RETURN COUNT
002A52 08          7966                   EX	AF,AF'
002A53 CD BE 34    7967                   CALL	SAVLOC		;SAVE DUMMY VARIABLES
002A56 08          7968                   EX	AF,AF'
002A57 B7          7969                   OR	A
002A58 28 16       7970                   JR	Z,RETCHK	;NO RETURNS
002A5A E5          7971                   PUSH	HL
002A5B ED 44       7972                   NEG
002A5D 6F          7973                   LD	L,A
002A5E ED 44       7974                   NEG
002A60 26 FF       7975                   LD	H,-1		;HL = -RETURNS
002A62 29          7976                   ADD	HL,HL
002A63 29          7977                   ADD	HL,HL
002A64 29          7978                   ADD	HL,HL		;-RETURNS * 8
002A65 E3          7979                   EX	(SP),HL
002A66 DD E1       7980                   POP	IX
002A68 DD 39       7981                   ADD	IX,SP
002A6A DD F9       7982                   LD	SP,IX
002A6C F5          7983                   PUSH	AF		;PUSH RETURN COUNT
002A6D CD 70 2A    7984                   CALL	RETCHK		;PUSH MARKER
002A70 08          7985   RETCHK:         EX	AF,AF'
002A71 CD AE 20    7986                   CALL	BRAKET		;CLOSING BRACKET
002A74 D9          7987                   EXX
002A75 C5          7988                   PUSH	BC
002A76 FD E1       7989                   POP	IY		;RESTORE IY
002A78 E5          7990                   PUSH	HL
002A79 CD CD 32    7991                   CALL	ARGUE		;TRANSFER ARGUMENTS
002A7C E1          7992                   POP	HL
002A7D             7993   ;
002A7D             7994   ; If any of the dummy arguments is the same as a passed-by-reference
002A7D             7995   ; variable, then it must not be restored on exit (it would overwrite
002A7D             7996   ; the wanted returned values), therefore search the saved values on
002A7D             7997   ; the stack and if a match is found set bit 4 of the type.  On exit
002A7D             7998   ; from the FN/PROC this will prevent the dummies from being restored.
002A7D             7999   ;
002A7D E3          8000                   EX	(SP),HL
002A7E B7          8001                   OR	A
002A7F 01 70 2A    8002                   LD	BC,RETCHK
002A82 ED 42       8003                   SBC	HL,BC
002A84 09          8004                   ADD	HL,BC
002A85 E3          8005                   EX	(SP),HL
002A86 20 5D       8006                   JR	NZ,PROC5	;No RETURNs
002A88             8007   ;
002A88 D5          8008                   PUSH	DE
002A89 E5          8009                   PUSH	HL
002A8A 21 07 00    8010                   LD	HL,7		;Skip two PUSHes and RETCHK
002A8D 39          8011                   ADD	HL,SP
002A8E 7E          8012                   LD	A,(HL)		;RETURN count
002A8F 23          8013                   INC	HL
002A90 E5          8014                   PUSH	HL
002A91 DD E1       8015                   POP	IX		;Address RETURNs table
002A93 5F          8016   PROC0:          LD	E,A
002A94 16 00       8017                   LD	D,0
002A96 EB          8018                   EX	DE,HL
002A97 29          8019                   ADD	HL,HL
002A98 29          8020                   ADD	HL,HL
002A99 29          8021                   ADD	HL,HL
002A9A 19          8022                   ADD	HL,DE		;HL addresses SAVLOC stack
002A9B 23          8023                   INC	HL
002A9C 23          8024                   INC	HL		;Bump past LOCCHK
002A9D 5E          8025   PROC7:          LD	E,(HL)
002A9E 23          8026                   INC	HL
002A9F 56          8027                   LD	D,(HL)		;DE = SAVLOC VARPTR
002AA0 23          8028                   INC	HL
002AA1 4E          8029                   LD	C,(HL)		;Length (if string)
002AA2 23          8030                   INC	HL
002AA3 46          8031                   LD	B,(HL)		;Variable type
002AA4             8032   ;
002AA4             8033   ; Scan RETURNs table for VARPTR match
002AA4             8034   ;
002AA4 C5          8035                   PUSH	BC		;Save type
002AA5 E5          8036                   PUSH	HL
002AA6 DD E5       8037                   PUSH	IX
002AA8 47          8038                   LD	B,A		;B = RETURN count
002AA9 DD 6E 04    8039   PROC8:          LD	L,(IX+4)
002AAC DD 66 05    8040                   LD	H,(IX+5)	;HL = RETURNed VARPTR
002AAF B7          8041                   OR	A
002AB0 ED 52       8042                   SBC	HL,DE
002AB2 28 09       8043                   JR	Z,PROC9
002AB4 EB          8044                   EX	DE,HL
002AB5 11 08 00    8045                   LD	DE,8
002AB8 DD 19       8046                   ADD	IX,DE
002ABA EB          8047                   EX	DE,HL
002ABB 10 EC       8048                   DJNZ	PROC8
002ABD DD E1       8049   PROC9:          POP	IX
002ABF E1          8050                   POP	HL
002AC0 C1          8051                   POP	BC		;Restore type
002AC1             8052   ;
002AC1             8053   ; If match, set bit 4 of type:
002AC1             8054   ;
002AC1 20 02       8055                   JR	NZ,PROCA
002AC3 CB E6       8056                   SET	4,(HL)		;Flag don't restore
002AC5             8057   ;
002AC5             8058   ; Increment past stacked data:
002AC5             8059   ;
002AC5 11 03 00    8060   PROCA:          LD	DE,3
002AC8 CB 70       8061                   BIT	6,B
002ACA 20 08       8062                   JR	NZ,PROCB	;Whole array
002ACC 1E 05       8063                   LD	E,5
002ACE CB 78       8064                   BIT	7,B
002AD0 28 02       8065                   JR	Z,PROCB		;Numeric
002AD2 59          8066                   LD	E,C
002AD3 13          8067                   INC	DE
002AD4 19          8068   PROCB:          ADD	HL,DE
002AD5 4E          8069                   LD	C,(HL)
002AD6 23          8070                   INC	HL
002AD7 46          8071                   LD	B,(HL)
002AD8 23          8072                   INC	HL		; BC = marker ?
002AD9 EB          8073                   EX	DE,HL
002ADA 21 2A 35    8074                   LD	HL,LOCCHK
002ADD B7          8075                   OR	A
002ADE ED 42       8076                   SBC	HL,BC
002AE0 EB          8077                   EX	DE,HL
002AE1 28 BA       8078                   JR	Z,PROC7		;Another
002AE3 E1          8079                   POP	HL
002AE4 D1          8080                   POP	DE
002AE5             8081   ;
002AE5 73          8082   PROC5:          LD	(HL),E		;SAVE "RETURN ADDRESS"
002AE6 23          8083                   INC	HL
002AE7 7E          8084                   LD	A,(HL)
002AE8 72          8085                   LD	(HL),D
002AE9 FE EE       8086                   CP	TON		;WAS IT "ON PROC" ?
002AEB 20 0C       8087                   JR	NZ,XEQGO
002AED D5          8088                   PUSH	DE
002AEE FD E3       8089                   EX	(SP),IY
002AF0 CD 42 35    8090                   CALL	SPAN		;SKIP REST OF ON LIST
002AF3 FD E3       8091                   EX	(SP),IY
002AF5 D1          8092                   POP	DE
002AF6 72          8093                   LD	(HL),D
002AF7 2B          8094                   DEC	HL
002AF8 73          8095                   LD	(HL),E
002AF9 C3 99 24    8096   XEQGO:          JP	XEQ
002AFC             8097   ;
002AFC FD 23       8098   LOCERR:         INC	IY
002AFE 18 F9       8099                   JR	XEQGO
002B00             8100   ;
002B00             8101   ;LOCAL DATA
002B00             8102   ;
002B00 FD 23       8103   LOCDAT:         INC	IY
002B02 2A F0 54    8104                   LD	HL,(DATPTR)
002B05 E5          8105                   PUSH	HL
002B06 3E 40       8106                   LD	A,40H
002B08 F5          8107                   PUSH	AF
002B09 21 F0 54    8108                   LD	HL,DATPTR
002B0C E5          8109                   PUSH	HL
002B0D 21 2A 35    8110                   LD	HL,LOCCHK
002B10 E5          8111                   PUSH	HL
002B11 18 E6       8112                   JR	XEQGO
002B13             8113   ;
002B13             8114   ;LOCAL var[,var...]
002B13             8115   ;
002B13 FE 85       8116   LOCAL:          CP	TERROR
002B15 28 E5       8117                   JR	Z,LOCERR
002B17 FE DC       8118                   CP	TDATA
002B19 28 E5       8119                   JR	Z,LOCDAT
002B1B C1          8120                   POP	BC
002B1C C5          8121                   PUSH	BC
002B1D 21 E7 29    8122                   LD	HL,FNCHK
002B20 B7          8123                   OR	A
002B21 ED 42       8124                   SBC	HL,BC
002B23 28 23       8125                   JR	Z,LOCAL1
002B25 21 EB 29    8126                   LD	HL,PROCHK
002B28 B7          8127                   OR	A
002B29 ED 42       8128                   SBC	HL,BC
002B2B 28 1B       8129                   JR	Z,LOCAL1
002B2D 21 2A 35    8130                   LD	HL,LOCCHK
002B30 B7          8131                   OR	A
002B31 ED 42       8132                   SBC	HL,BC
002B33 28 13       8133                   JR	Z,LOCAL1
002B35 21 DC 26    8134                   LD	HL,ARRCHK
002B38 B7          8135                   OR	A
002B39 ED 42       8136                   SBC	HL,BC
002B3B 28 0B       8137                   JR	Z,LOCAL1
002B3D 21 70 2A    8138                   LD	HL,RETCHK
002B40 B7          8139                   OR	A
002B41 ED 42       8140                   SBC	HL,BC
002B43 3E 0C       8141                   LD	A,12
002B45 C2 44 3F    8142                   JP	NZ,ERROR_	;"Not LOCAL"
002B48 FD E5       8143   LOCAL1:         PUSH	IY
002B4A C1          8144                   POP	BC
002B4B D9          8145                   EXX
002B4C FD 2B       8146                   DEC	IY
002B4E CD BE 34    8147                   CALL	SAVLOC
002B51 D9          8148                   EXX
002B52 C5          8149                   PUSH	BC
002B53 FD E1       8150                   POP	IY
002B55 CD E3 41    8151   LOCAL2:         CALL	GETVAR
002B58 C2 E0 25    8152                   JP	NZ,SYNTAX
002B5B CB 77       8153                   BIT	6,A		;ARRAY?
002B5D 20 14       8154                   JR	NZ,LOCAL4
002B5F B7          8155                   OR	A		;TYPE
002B60 08          8156                   EX	AF,AF'
002B61 CD F8 1F    8157                   CALL	ZERO
002B64 08          8158                   EX	AF,AF'
002B65 F5          8159                   PUSH	AF
002B66 F4 F0 31    8160                   CALL	P,STOREN	;ZERO
002B69 F1          8161                   POP	AF
002B6A 59          8162                   LD	E,C
002B6B FC 41 32    8163                   CALL	M,STORES
002B6E CD 00 45    8164   LOCAL3:         CALL	NLIST
002B71 18 E2       8165                   JR	LOCAL2
002B73             8166   ;
002B73 DD 36 00 01 8167   LOCAL4:         LD	(IX+0),1	;FLAG LOCAL ARRAY
002B77 DD 36 01 00 8168                   LD	(IX+1),0
002B7B 18 F1       8169                   JR	LOCAL3
002B7D             8170   ;
002B7D             8171   ;ENDPROC
002B7D             8172   ;
002B7D C1          8173   ENDPRO:         POP	BC
002B7E 21 EB 29    8174                   LD	HL,PROCHK	;PROC MARKER
002B81 AF          8175                   XOR	A
002B82 ED 42       8176                   SBC	HL,BC
002B84 28 0B       8177                   JR	Z,ENDPR1
002B86 C5          8178                   PUSH	BC		;PUT BACK
002B87 CD 31 34    8179                   CALL	RESLOC
002B8A 20 F1       8180                   JR	NZ,ENDPRO
002B8C 3E 0D       8181                   LD	A,13
002B8E C3 44 3F    8182                   JP	ERROR_		;"No PROC"
002B91             8183   ;
002B91 FD E1       8184   ENDPR1:         POP	IY
002B93 C3 99 24    8185   XEQGO6:         JP	XEQ
002B96             8186   ;
002B96             8187   ;INPUT #channel,var,var...
002B96             8188   ;
002B96 CD DB 36    8189   INPUTN:         CALL	CHNL		;E = CHANNEL NUMBER
002B99 CD 00 45    8190   INPN1:          CALL	NLIST
002B9C D5          8191                   PUSH	DE
002B9D CD D6 25    8192                   CALL	VAR_
002BA0 D1          8193                   POP	DE
002BA1 F5          8194                   PUSH	AF		;SAVE TYPE
002BA2 E5          8195                   PUSH	HL		;VARPTR
002BA3 B7          8196                   OR	A
002BA4 FA C9 2B    8197                   JP	M,INPN2		;STRING
002BA7 CD 5B 06    8198                   CALL	OSBGET
002BAA D9          8199                   EXX
002BAB 6F          8200                   LD	L,A
002BAC D9          8201                   EXX
002BAD CD 5B 06    8202                   CALL	OSBGET
002BB0 D9          8203                   EXX
002BB1 67          8204                   LD	H,A
002BB2 D9          8205                   EXX
002BB3 CD 5B 06    8206                   CALL	OSBGET
002BB6 6F          8207                   LD	L,A
002BB7 CD 5B 06    8208                   CALL	OSBGET
002BBA 67          8209                   LD	H,A
002BBB CD 5B 06    8210                   CALL	OSBGET
002BBE 4F          8211                   LD	C,A
002BBF DD E1       8212                   POP	IX
002BC1 F1          8213                   POP	AF		;RESTORE TYPE
002BC2 D5          8214                   PUSH	DE		;SAVE CHANNEL
002BC3 CD F0 31    8215                   CALL	STOREN
002BC6 D1          8216                   POP	DE
002BC7 18 D0       8217                   JR	INPN1
002BC9 21 00 52    8218   INPN2:          LD	HL,ACCS
002BCC CD 5B 06    8219   INPN3:          CALL	OSBGET
002BCF FE 0D       8220                   CP	CR
002BD1 28 04       8221                   JR	Z,INPN4
002BD3 77          8222                   LD	(HL),A
002BD4 2C          8223                   INC	L
002BD5 20 F5       8224                   JR	NZ,INPN3
002BD7 DD E1       8225   INPN4:          POP	IX
002BD9 F1          8226                   POP	AF
002BDA D5          8227                   PUSH	DE
002BDB EB          8228                   EX	DE,HL
002BDC CD 3E 32    8229                   CALL	STACCS
002BDF D1          8230                   POP	DE
002BE0 18 B7       8231                   JR	INPN1
002BE2             8232   ;
002BE2             8233   ;INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BE2             8234   ;INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BE2             8235   ;
002BE2 FE 23       8236   INPUT:          CP	'#'
002BE4 28 B0       8237                   JR	Z,INPUTN
002BE6 0E 00       8238                   LD	C,0		;FLAG PROMPT
002BE8 FE 86       8239                   CP	TLINE
002BEA 20 04       8240                   JR	NZ,INPUT0
002BEC FD 23       8241                   INC	IY		;SKIP "LINE"
002BEE 0E 80       8242                   LD	C,80H
002BF0 21 00 53    8243   INPUT0:         LD	HL,BUFFER
002BF3 36 0D       8244                   LD	(HL),CR		;INITIALISE EMPTY
002BF5 CD 36 35    8245   INPUT1:         CALL	TERMQ
002BF8 28 99       8246                   JR	Z,XEQGO6	;DONE
002BFA FD 23       8247                   INC	IY
002BFC FE 2C       8248                   CP	','
002BFE 28 51       8249                   JR	Z,INPUT3	;SKIP COMMA
002C00 FE 3B       8250                   CP	';'
002C02 28 4D       8251                   JR	Z,INPUT3
002C04 E5          8252                   PUSH	HL		;SAVE BUFFER POINTER
002C05 FE 22       8253                   CP	'"'
002C07 20 0A       8254                   JR	NZ,INPUT6
002C09 C5          8255                   PUSH	BC
002C0A CD 7A 19    8256                   CALL	CONS
002C0D C1          8257                   POP	BC
002C0E CD B1 35    8258                   CALL	PTEXT		;PRINT PROMPT
002C11 18 05       8259                   JR	INPUT9
002C13 CD 5C 35    8260   INPUT6:         CALL	FORMAT		;SPC, TAB, '
002C16 20 05       8261                   JR	NZ,INPUT2
002C18 E1          8262   INPUT9:         POP	HL
002C19 CB C1       8263                   SET	0,C		;FLAG NO PROMPT
002C1B 18 D3       8264                   JR	INPUT0
002C1D FD 2B       8265   INPUT2:         DEC	IY
002C1F C5          8266                   PUSH	BC
002C20 CD D6 25    8267                   CALL	VAR_
002C23 C1          8268                   POP	BC
002C24 E1          8269                   POP	HL
002C25 F5          8270                   PUSH	AF		;SAVE TYPE
002C26 7E          8271                   LD	A,(HL)
002C27 23          8272                   INC	HL
002C28 FE 0D       8273                   CP	CR		;BUFFER EMPTY?
002C2A CC 55 2C    8274                   CALL	Z,REFILL
002C2D CB 79       8275                   BIT	7,C
002C2F F5          8276                   PUSH	AF
002C30 C4 CF 35    8277                   CALL	NZ,LINES
002C33 F1          8278                   POP	AF
002C34 CC BE 35    8279                   CALL	Z,FETCHS
002C37 F1          8280                   POP	AF		;RESTORE TYPE
002C38 C5          8281                   PUSH	BC
002C39 E5          8282                   PUSH	HL
002C3A B7          8283                   OR	A
002C3B FA 4C 2C    8284                   JP	M,INPUT4	;STRING
002C3E F5          8285                   PUSH	AF
002C3F DD E5       8286                   PUSH	IX
002C41 CD 22 1C    8287                   CALL	VAL0
002C44 DD E1       8288                   POP	IX
002C46 F1          8289                   POP	AF
002C47 CD F0 31    8290                   CALL	STOREN
002C4A 18 03       8291                   JR	INPUT5
002C4C CD 3E 32    8292   INPUT4:         CALL	STACCS
002C4F E1          8293   INPUT5:         POP	HL
002C50 C1          8294                   POP	BC
002C51 CB 81       8295   INPUT3:         RES	0,C
002C53 18 A0       8296                   JR	INPUT1
002C55             8297   ;
002C55 CB 41       8298   REFILL:         BIT	0,C
002C57 20 0A       8299                   JR	NZ,REFIL0	;NO PROMPT
002C59 3E 3F       8300                   LD	A,'?'
002C5B CD 02 41    8301                   CALL	OUTCHR		;PROMPT
002C5E 3E 20       8302                   LD	A,' '
002C60 CD 02 41    8303                   CALL	OUTCHR
002C63 21 00 53    8304   REFIL0:         LD	HL,BUFFER
002C66 C5          8305                   PUSH	BC
002C67 E5          8306                   PUSH	HL
002C68 DD E5       8307                   PUSH	IX
002C6A CD E7 05    8308                   CALL	OSLINE
002C6D DD E1       8309                   POP	IX
002C6F E1          8310                   POP	HL
002C70 C1          8311                   POP	BC
002C71 47          8312                   LD	B,A		;POS AT ENTRY
002C72 AF          8313                   XOR	A
002C73 32 FB 54    8314                   LD	(COUNT),A
002C76 B8          8315                   CP	B
002C77 C8          8316                   RET	Z
002C78 7E          8317   REFIL1:         LD	A,(HL)
002C79 FE 0D       8318                   CP	CR
002C7B C8          8319                   RET	Z
002C7C 23          8320                   INC	HL
002C7D 10 F9       8321                   DJNZ	REFIL1
002C7F C9          8322                   RET
002C80             8323   ;
002C80             8324   ;READ var[,var...]
002C80             8325   ;
002C80 FE 23       8326   READ:           CP	'#'
002C82 CA 96 2B    8327                   JP	Z,INPUTN
002C85 2A F0 54    8328                   LD	HL,(DATPTR)
002C88 7E          8329   READ0:          LD	A,(HL)
002C89 FE 3A       8330                   CP	':'
002C8B CC 78 2C    8331                   CALL	Z,REFIL1
002C8E 23          8332                   INC	HL		;SKIP COMMA | "DATA"
002C8F FE 0D       8333                   CP	CR		;END OF DATA STMT?
002C91 CC C0 2C    8334                   CALL	Z,GETDAT
002C94 E5          8335                   PUSH	HL
002C95 CD D6 25    8336                   CALL	VAR_
002C98 E1          8337                   POP	HL
002C99 B7          8338                   OR	A
002C9A FA B0 2C    8339                   JP	M,READ1		;STRING
002C9D E5          8340                   PUSH	HL
002C9E FD E3       8341                   EX	(SP),IY
002CA0 F5          8342                   PUSH	AF		;SAVE TYPE
002CA1 DD E5       8343                   PUSH	IX
002CA3 CD 2C 18    8344                   CALL	EXPRN
002CA6 DD E1       8345                   POP	IX
002CA8 F1          8346                   POP	AF
002CA9 CD F0 31    8347                   CALL	STOREN
002CAC FD E3       8348                   EX	(SP),IY
002CAE 18 07       8349                   JR	READ2
002CB0 CD BE 35    8350   READ1:          CALL	FETCHS
002CB3 E5          8351                   PUSH	HL
002CB4 CD 3E 32    8352                   CALL	STACCS
002CB7 E1          8353   READ2:          POP	HL
002CB8 22 F0 54    8354                   LD	(DATPTR),HL
002CBB CD 00 45    8355                   CALL	NLIST
002CBE 18 C8       8356                   JR	READ0
002CC0             8357   ;
002CC0 CD F9 35    8358   GETDAT:         CALL	DSRCH
002CC3 23          8359                   INC	HL
002CC4 D0          8360                   RET	NC
002CC5 3E 2A       8361                   LD	A,42
002CC7 18 64       8362                   JR	ERROR4ex		;"Out of DATA"
002CC9             8363   ;
002CC9             8364   ;IF expr statement
002CC9             8365   ;IF expr THEN statement [ELSE statement]
002CC9             8366   ;IF expr THEN line [ELSE line]
002CC9             8367   ;IF expr THEN
002CC9             8368   ;
002CC9 CD 33 18    8369   IF_:            CALL	EXPRI
002CCC CD 59 1F    8370                   CALL	TEST
002CCF 28 2A       8371                   JR	Z,IFNOT		;FALSE
002CD1 FD 7E 00    8372                   LD	A,(IY)
002CD4 FE 8C       8373                   CP	TTHEN
002CD6 C2 99 24    8374                   JP	NZ,XEQ
002CD9 FD 23       8375   IF0:            INC	IY		;SKIP "THEN"
002CDB FD 7E 00    8376                   LD	A,(IY)
002CDE FE 3B       8377                   CP	';'
002CE0 28 F7       8378                   JR	Z,IF0
002CE2 CD 0B 45    8379   IF1:            CALL	NXT
002CE5 FE 8D       8380                   CP	TLINO
002CE7 C2 99 24    8381                   JP	NZ,XEQ		;STATEMENT FOLLOWS
002CEA C3 B4 28    8382                   JP	GOTO		;LINE NO. FOLLOWS
002CED             8383   ;
002CED FD 7E 00    8384   IFELSE:         LD	A,(IY)
002CF0 FD 23       8385                   INC	IY
002CF2 FE 3B       8386                   CP	';'
002CF4 20 0A       8387                   JR	NZ,IFNEXT
002CF6 18 1E       8388                   JR	IFTHEN
002CF8             8389   ;
002CF8 CD 99 36    8390   IF2:            CALL	QUOTE		;SKIP STRING
002CFB FD 7E 00    8391   IFNOT:          LD	A,(IY)
002CFE FD 23       8392                   INC	IY
002D00 FE 22       8393   IFNEXT:         CP	'"'
002D02 28 F4       8394                   JR	Z,IF2		;QUOTED STRING
002D04 FE F4       8395                   CP	TREM
002D06 CA 31 25    8396                   JP	Z,REM		;REM
002D09 FE 0D       8397                   CP	CR
002D0B CA 84 24    8398                   JP	Z,XEQ0		;END OF LINE
002D0E FE 8B       8399                   CP	TELSE
002D10 28 D0       8400                   JR	Z,IF1		;ELSE CLAUSE
002D12 FE 8C       8401                   CP	TTHEN
002D14 20 E5       8402                   JR	NZ,IFNOT	;TRY FOR END AGAIN
002D16 FD 7E 00    8403   IFTHEN:         LD	A,(IY)
002D19 FE 0D       8404                   CP	CR
002D1B 20 D0       8405                   JR	NZ,IFELSE
002D1D 01 8B 00    8406                   LD	BC,TELSE
002D20 11 8C CD    8407                   LD	DE,TENDIF*256+TTHEN
002D23 FD 23       8408                   INC	IY
002D25 CD 11 36    8409                   CALL	NSCAN
002D28 CA A0 24    8410                   JP	Z,XEQ1
002D2B 3E 31       8411   NENDIF:         LD	A,49
002D2D C3 44 3F    8412   ERROR4ex:         JP	ERROR_		;"Missing ENDIF"
002D30             8413   ;
002D30             8414   ; ELSE (multi-line)
002D30             8415   ;
002D30 01 FD FF    8416   MELSE:          LD	BC,-3
002D33 FD 09       8417                   ADD	IY,BC
002D35 01 CD 00    8418                   LD	BC,TENDIF
002D38 11 8C CD    8419                   LD	DE,TENDIF*256+TTHEN
002D3B CD 11 36    8420                   CALL	NSCAN
002D3E 20 EB       8421                   JR	NZ,NENDIF
002D40 C3 99 24    8422   XEQGO7:         JP	XEQ
002D43             8423   ;
002D43             8424   ; WHEN and OTHERWISE:
002D43             8425   ;
002D43 01 FD FF    8426   WHEN:           LD	BC,-3
002D46 FD 09       8427                   ADD	IY,BC
002D48 01 CB 00    8428                   LD	BC,TENDCASE
002D4B 11 CA CB    8429                   LD	DE,TENDCASE*256+TOF
002D4E CD 11 36    8430                   CALL	NSCAN
002D51 28 ED       8431                   JR	Z,XEQGO7
002D53 3E 2F       8432                   LD	A,47
002D55 18 D6       8433                   JR	ERROR4ex		;"Missing ENDCASE"
002D57             8434   ;
002D57             8435   ; CASE
002D57             8436   ;
002D57 CD 02 17    8437   CASE:           CALL	EXPR		;String or numeric
002D5A 08          8438                   EX	AF,AF'
002D5B 06 00       8439                   LD	B,0		;Flag numeric
002D5D F2 66 2D    8440                   JP	P,CASE6		;numeric
002D60 CD 19 20    8441                   CALL	PUSHS		;put string on stack
002D63 C1          8442                   POP	BC		;C = length
002D64 06 01       8443                   LD	B,1		;Flag string
002D66 FD 7E 00    8444   CASE6:          LD	A,(IY)
002D69 FD 23       8445                   INC	IY
002D6B FE CA       8446                   CP	TOF
002D6D 3E 25       8447                   LD	A,37
002D6F 20 BC       8448                   JR	NZ,ERROR4ex	;"Missing OF"
002D71 FD 7E 00    8449                   LD	A,(IY)
002D74 FD 23       8450                   INC	IY		;Address line-length byte
002D76 FE 0D       8451                   CP	CR
002D78 3E 30       8452                   LD	A,48
002D7A 20 B1       8453                   JR	NZ,ERROR4ex	;"OF not last"
002D7C AF          8454   CASE1:          XOR	A		;Level
002D7D D9          8455   CASE0:          EXX
002D7E E5          8456                   PUSH	HL		;Push to stack
002D7F D9          8457                   EXX
002D80 E5          8458                   PUSH	HL
002D81 C5          8459                   PUSH	BC
002D82 6F          8460                   LD	L,A		;Level
002D83 01 C9 CC    8461                   LD	BC,TOTHERWISE*256+TWHEN
002D86 11 CA CB    8462                   LD	DE,TENDCASE*256+TOF
002D89 CD 13 36    8463                   CALL	NSCAN1
002D8C C1          8464                   POP	BC		;Restore from stack
002D8D E1          8465                   POP	HL
002D8E D9          8466                   EXX
002D8F E1          8467                   POP	HL
002D90 D9          8468                   EXX
002D91 3E 2F       8469                   LD	A,47
002D93 C2 44 3F    8470                   JP	NZ,ERROR_	;Missing ENDCASE
002D96 FD 7E FF    8471                   LD	A,(IY-1)
002D99 FE CB       8472                   CP	TENDCASE
002D9B 28 56       8473                   JR	Z,CASE9
002D9D FE CC       8474                   CP	TOTHERWISE
002D9F 28 52       8475                   JR	Z,CASE9
002DA1 CB 40       8476   CASE4:          BIT	0,B		;Numeric or string?
002DA3 20 69       8477                   JR	NZ,CASE3
002DA5 C5          8478                   PUSH	BC		;Type/exponent/length
002DA6 E5          8479                   PUSH	HL		;MS 32 bits
002DA7 D9          8480                   EXX
002DA8 E5          8481                   PUSH	HL		;LS 32 bits
002DA9 D9          8482                   EXX
002DAA CD 2C 18    8483                   CALL	EXPRN
002DAD DD 21 00 00 8484                   LD	IX,0
002DB1 DD 39       8485                   ADD	IX,SP		;Address stack
002DB3 D9          8486                   EXX
002DB4 DD 5E 00    8487                   LD	E,(IX+0)	;Get LS 32-bits
002DB7 DD 56 01    8488                   LD	D,(IX+1)
002DBA D9          8489                   EXX
002DBB DD 5E 02    8490                   LD	E,(IX+2)
002DBE DD 56 03    8491                   LD	D,(IX+3)	;Get MS 32-bits
002DC1 DD 46 04    8492                   LD	B,(IX+4)	;Get exponent
002DC4 3E 09       8493                   LD	A,9
002DC6 CD 15 45    8494                   CALL	FPP		;In case integer vs float
002DC9 7D          8495                   LD	A,L
002DCA B7          8496                   OR	A		;NZ if equal
002DCB D9          8497                   EXX
002DCC E1          8498                   POP	HL
002DCD D9          8499                   EXX
002DCE E1          8500                   POP	HL
002DCF C1          8501                   POP	BC
002DD0 20 2C       8502                   JR	NZ,CASE5	;Match found
002DD2 FD 7E 00    8503   CASE2:          LD	A,(IY)
002DD5 FD 23       8504                   INC	IY
002DD7 FE 2C       8505                   CP	','
002DD9 28 C6       8506                   JR	Z,CASE4		;Not found, try another
002DDB D9          8507                   EXX
002DDC FD E5       8508                   PUSH	IY
002DDE E3          8509                   EX	(SP),HL
002DDF 3E 0D       8510                   LD	A,CR
002DE1 47          8511                   LD	B,A
002DE2 ED B1       8512                   CPIR			;Find CR
002DE4 E3          8513                   EX	(SP),HL
002DE5 FD E1       8514                   POP	IY
002DE7 D9          8515                   EXX
002DE8 FD 7E FE    8516                   LD	A,(IY-2)	;Last token in previous line
002DEB FE CA       8517                   CP	TOF		;CASE statement in WHEN line
002DED 20 8D       8518                   JR	NZ,CASE1
002DEF 3E 01       8519                   LD	A,1
002DF1 18 8A       8520                   JR	CASE0
002DF3             8521   ;
002DF3             8522   ;Finished, level stack if string:
002DF3             8523   ;
002DF3 CB 40       8524   CASE9:          BIT	0,B
002DF5 28 49       8525                   JR	Z,XEQGO5
002DF7 26 00       8526                   LD	H,0
002DF9 69          8527                   LD	L,C
002DFA 39          8528                   ADD	HL,SP
002DFB F9          8529                   LD	SP,HL
002DFC 18 42       8530                   JR	XEQGO5
002DFE             8531   ;
002DFE             8532   ;Matched, so skip any more expressions:
002DFE             8533   ;
002DFE CD 0B 45    8534   CASE5:          CALL	NXT
002E01 FE 2C       8535                   CP	','
002E03 20 EE       8536                   JR	NZ,CASE9	;End of list
002E05 FD 23       8537                   INC	IY
002E07 C5          8538                   PUSH	BC		;Save type and string length
002E08 CD 02 17    8539                   CALL	EXPR		;Evaluate but discard
002E0B C1          8540                   POP	BC
002E0C 18 F0       8541                   JR	CASE5
002E0E             8542   ;
002E0E             8543   ;String compare:
002E0E             8544   ;
002E0E C5          8545   CASE3:          PUSH	BC
002E0F CD 3C 18    8546                   CALL	EXPRS
002E12 C1          8547                   POP	BC
002E13 21 00 00    8548                   LD	HL,0
002E16 39          8549                   ADD	HL,SP
002E17 43          8550                   LD	B,E
002E18 11 00 52    8551                   LD	DE,ACCS
002E1B C5          8552                   PUSH	BC
002E1C CD F5 1F    8553                   CALL	SCP		;String compare
002E1F C1          8554                   POP	BC
002E20 06 01       8555                   LD	B,1
002E22 20 AE       8556                   JR	NZ,CASE2
002E24 18 D8       8557                   JR	CASE5
002E26             8558   ;
002E26             8559   ; WHILE
002E26             8560   ;
002E26 FD E5       8561   WHILE:          PUSH	IY		;Save current position
002E28 CD 86 32    8562                   CALL	CHECK
002E2B CD 2E 2E    8563                   CALL	WHICHK		;Push marker
002E2E CD 33 18    8564   WHICHK:         CALL	EXPRI
002E31 CD 59 1F    8565                   CALL	TEST
002E34 20 0A       8566                   JR	NZ,XEQGO5
002E36 C1          8567                   POP	BC		;Pop marker
002E37 C1          8568                   POP	BC		;Level stack
002E38 01 00 95    8569                   LD	BC,TWHILE+TENDWHILE*256
002E3B 16 01       8570                   LD	D,1
002E3D CD 50 36    8571                   CALL	WSRCH
002E40 C3 99 24    8572   XEQGO5:         JP	XEQ
002E43             8573   ;
002E43             8574   ; ENDWHILE
002E43             8575   ;
002E43 C1          8576   ENDWHI:         POP	BC		;Marker
002E44 D1          8577                   POP	DE		;Saved text pointer
002E45 D5          8578                   PUSH	DE
002E46 C5          8579                   PUSH	BC
002E47 B7          8580                   OR	A
002E48 21 2E 2E    8581                   LD	HL,WHICHK
002E4B ED 42       8582                   SBC	HL,BC
002E4D 28 0B       8583                   JR	Z,ENDWH1
002E4F 3E 03       8584                   LD	A,3
002E51 CD 31 34    8585                   CALL	RESLOC
002E54 20 ED       8586                   JR	NZ,ENDWHI
002E56 3E 2E       8587                   LD	A,46
002E58 18 4F       8588                   JR	ERROR5		;"Not in a WHILE loop"
002E5A             8589   ;
002E5A FD E5       8590   ENDWH1:         PUSH	IY
002E5C FD 21 00 00 8591                   LD	IY,0
002E60 FD 19       8592                   ADD	IY,DE
002E62 CD 33 18    8593                   CALL	EXPRI
002E65 CD 59 1F    8594                   CALL	TEST
002E68 D1          8595                   POP	DE		;Text pointer
002E69 20 D5       8596                   JR	NZ,XEQGO5
002E6B C1          8597                   POP	BC		;Junk marker
002E6C C1          8598                   POP	BC		;Junk pointer
002E6D FD 21 00 00 8599                   LD	IY,0
002E71 FD 19       8600                   ADD	IY,DE
002E73 18 CB       8601                   JR	XEQGO5
002E75             8602   ;
002E75             8603   ;CLS
002E75             8604   ;
002E75 CD 8C 0D    8605   CLS:            CALL	CLRSCN
002E78 AF          8606                   XOR	A
002E79 32 FB 54    8607                   LD	(COUNT),A
002E7C 18 C2       8608                   JR	XEQGO5
002E7E             8609   ;
002E7E             8610   ;STOP
002E7E             8611   ;
002E7E CD FA 44    8612   STOP:           CALL	TELL
002E81 0D          8613                   DB	CR
002E82 0A          8614                   DB	LF
002E83 FA          8615                   DB	TSTOP
002E84 00          8616                   DB	0
002E85 CD 5B 41    8617                   CALL	SETLIN		;FIND CURRENT LINE
002E88 CD 82 41    8618                   CALL	SAYLN
002E8B CD FB 40    8619                   CALL	CRLF
002E8E C3 B0 37    8620                   JP	CLOOP
002E91             8621   ;
002E91             8622   ;REPORT
002E91             8623   ;
002E91 CD E5 44    8624   REPOR:          CALL	REPORT
002E94 18 AA       8625                   JR	XEQGO5
002E96             8626   ;
002E96             8627   ;CLEAR
002E96             8628   ;
002E96 CD 43 40    8629   CLR:            CALL	CLEAR
002E99 2A DC 54    8630                   LD	HL,(PAGE_)
002E9C 18 3B       8631                   JR	RESTR1
002E9E             8632   ;
002E9E             8633   ;RESTORE ERROR
002E9E             8634   ;
002E9E FD 23       8635   RESERR:         INC	IY
002EA0 3E 02       8636                   LD	A,2
002EA2 CD 31 34    8637                   CALL	RESLOC
002EA5 20 99       8638                   JR	NZ,XEQGO5
002EA7 3E 35       8639                   LD	A,53		;ON ERROR not LOCAL
002EA9 C3 44 3F    8640   ERROR5:         JP	ERROR_
002EAC             8641   ;
002EAC             8642   ;RESTORE DATA
002EAC             8643   ;
002EAC FD 23       8644   RESDAT:         INC	IY
002EAE 3E 01       8645                   LD	A,1
002EB0 CD 31 34    8646                   CALL	RESLOC
002EB3 20 8B       8647                   JR	NZ,XEQGO5
002EB5 3E 36       8648                   LD	A,54		;'DATA not LOCAL'
002EB7 21          8649                   DB	21H
002EB8 3E 29       8650   NOLINE:         LD	A,41		;'No such line'
002EBA 18 ED       8651                   JR	ERROR5
002EBC             8652   ;
002EBC             8653   ;RESTORE [line]
002EBC             8654   ;
002EBC FE 85       8655   RESTOR:         CP	TERROR
002EBE 28 DE       8656                   JR	Z,RESERR
002EC0 FE DC       8657                   CP	TDATA
002EC2 28 E8       8658                   JR	Z,RESDAT
002EC4 FE 2B       8659                   CP	'+'
002EC6 28 1A       8660                   JR	Z,RESREL
002EC8 2A DC 54    8661                   LD	HL,(PAGE_)
002ECB CD 36 35    8662                   CALL	TERMQ
002ECE 28 09       8663                   JR	Z,RESTR1
002ED0 CD 60 18    8664                   CALL	ITEMI
002ED3 D9          8665                   EXX
002ED4 CD 43 41    8666                   CALL	FINDL		;SEARCH FOR LINE
002ED7 20 DF       8667                   JR	NZ,NOLINE
002ED9 CD F9 35    8668   RESTR1:         CALL	DSRCH
002EDC 22 F0 54    8669                   LD	(DATPTR),HL
002EDF C3 99 24    8670                   JP	XEQ
002EE2             8671   ;
002EE2 CD 33 18    8672   RESREL:         CALL	EXPRI
002EE5 D9          8673                   EXX
002EE6 EB          8674                   EX	DE,HL
002EE7 FD E5       8675                   PUSH	IY
002EE9 E1          8676                   POP	HL
002EEA 3E 0D       8677                   LD	A,CR
002EEC 47          8678                   LD	B,A
002EED ED B1       8679                   CPIR			;FIND LINE END
002EEF 1D          8680                   DEC	E
002EF0 28 E7       8681                   JR	Z,RESTR1
002EF2 FA D9 2E    8682                   JP	M,RESTR1
002EF5 AF          8683                   XOR	A
002EF6 47          8684                   LD	B,A
002EF7 4E          8685   RESTR2:         LD	C,(HL)
002EF8 B9          8686                   CP	C
002EF9 28 BD       8687                   JR	Z,NOLINE
002EFB 09          8688                   ADD	HL,BC
002EFC 1D          8689                   DEC	E
002EFD 20 F8       8690                   JR	NZ,RESTR2
002EFF 18 D8       8691                   JR	RESTR1
002F01             8692   ;
002F01             8693   ;PTR#channel=expr
002F01             8694   ;PAGE=expr
002F01             8695   ;TIME=expr
002F01             8696   ;LOMEM=expr
002F01             8697   ;HIMEM=expr
002F01             8698   ;
002F01 CD D1 36    8699   PTR:            CALL	CHANEL
002F04 CD 4F 35    8700                   CALL	EQUALS
002F07 7B          8701                   LD	A,E
002F08 F5          8702                   PUSH	AF
002F09 CD 33 18    8703                   CALL	EXPRI
002F0C E5          8704                   PUSH	HL
002F0D D9          8705                   EXX
002F0E D1          8706                   POP	DE
002F0F F1          8707                   POP	AF
002F10 CD 95 06    8708                   CALL	PUTPTR
002F13 18 61       8709                   JR	XEQGO1ex
002F15             8710   ;
002F15 CD 4F 35    8711   PAGEV:          CALL	EQUALS
002F18 CD 33 18    8712                   CALL	EXPRI
002F1B D9          8713                   EXX
002F1C 2E 00       8714                   LD	L,0
002F1E 22 DC 54    8715                   LD	(PAGE_),HL
002F21 18 53       8716                   JR	XEQGO1ex
002F23             8717   ;
002F23 FE 24       8718   TIMEV:          CP	'$'
002F25 28 0E       8719                   JR	Z,TIMEVS
002F27 CD 4F 35    8720                   CALL	EQUALS
002F2A CD 33 18    8721                   CALL	EXPRI
002F2D E5          8722                   PUSH	HL
002F2E D9          8723                   EXX
002F2F D1          8724                   POP	DE
002F30 CD 57 0D    8725                   CALL	PUTIME
002F33 18 41       8726                   JR	XEQGO1ex
002F35             8727   ;
002F35 FD 23       8728   TIMEVS:         INC	IY		;SKIP '$'
002F37 CD 4F 35    8729                   CALL	EQUALS
002F3A CD 3C 18    8730                   CALL	EXPRS
002F3D CD 74 0D    8731                   CALL	PUTIMS
002F40 18 34       8732                   JR	XEQGO1ex
002F42             8733   ;
002F42 CD 4F 35    8734   LOMEMV:         CALL	EQUALS
002F45 CD 33 18    8735                   CALL	EXPRI
002F48 CD 43 40    8736                   CALL	CLEAR
002F4B D9          8737                   EXX
002F4C 22 DE 54    8738                   LD	(LOMEM),HL
002F4F 22 E0 54    8739                   LD	(FREE),HL
002F52 18 22       8740                   JR	XEQGO1ex
002F54             8741   ;
002F54 CD 4F 35    8742   HIMEMV:         CALL	EQUALS
002F57 CD 33 18    8743                   CALL	EXPRI
002F5A D9          8744                   EXX
002F5B ED 5B E0 54 8745                   LD	DE,(FREE)
002F5F 14          8746                   INC	D
002F60 AF          8747                   XOR	A
002F61 ED 52       8748                   SBC	HL,DE
002F63 19          8749                   ADD	HL,DE
002F64 DA 44 3F    8750                   JP	C,ERROR_		;"No room"
002F67 ED 5B E2 54 8751                   LD	DE,(HIMEM)
002F6B 22 E2 54    8752                   LD	(HIMEM),HL
002F6E EB          8753                   EX	DE,HL
002F6F ED 72       8754                   SBC	HL,SP
002F71 C2 99 24    8755                   JP	NZ,XEQ
002F74 EB          8756                   EX	DE,HL
002F75 F9          8757                   LD	SP,HL		;LOAD STACK POINTER
002F76 C3 99 24    8758   XEQGO1ex:         JP	XEQ
002F79             8759   ;
002F79             8760   ;WIDTH expr
002F79             8761   ;
002F79 CD 33 18    8762   WIDTHV:         CALL	EXPRI
002F7C D9          8763                   EXX
002F7D 7D          8764                   LD	A,L
002F7E 32 FC 54    8765                   LD	(WIDTH),A
002F81 18 F3       8766                   JR	XEQGO1ex
002F83             8767   ;
002F83             8768   ;TRACE ON
002F83             8769   ;TRACE OFF
002F83             8770   ;TRACE line
002F83             8771   ;
002F83 FD 23       8772   TRACE:          INC	IY
002F85 21 00 00    8773                   LD	HL,0
002F88 FE EE       8774                   CP	TON
002F8A 28 0A       8775                   JR	Z,TRACE0
002F8C FE 87       8776                   CP	TOFF
002F8E 28 07       8777                   JR	Z,TRACE1
002F90 FD 2B       8778                   DEC	IY
002F92 CD 33 18    8779                   CALL	EXPRI
002F95 D9          8780                   EXX
002F96 2B          8781   TRACE0:         DEC	HL
002F97 22 E6 54    8782   TRACE1:         LD	(TRACEN),HL
002F9A 18 DA       8783                   JR	XEQGO1ex
002F9C             8784   ;
002F9C             8785   ;VDU expr,expr;....[|]
002F9C             8786   ;
002F9C CD 33 18    8787   VDU:            CALL	EXPRI
002F9F D9          8788                   EXX
002FA0 7D          8789                   LD	A,L
002FA1 06 01       8790                   LD	B,1
002FA3 CD B1 05    8791   VDU1:           CALL	OSWRCH
002FA6 10 FB       8792                   DJNZ	VDU1
002FA8 FD 7E 00    8793                   LD	A,(IY)
002FAB FE 7C       8794                   CP	'|'
002FAD 28 15       8795                   JR	Z,VDU4
002FAF FE 2C       8796                   CP	','
002FB1 28 08       8797                   JR	Z,VDU2
002FB3 FE 3B       8798                   CP	';'
002FB5 20 06       8799                   JR	NZ,VDU3
002FB7 7C          8800                   LD	A,H
002FB8 CD B1 05    8801                   CALL	OSWRCH
002FBB FD 23       8802   VDU2:           INC	IY
002FBD CD 36 35    8803   VDU3:           CALL	TERMQ
002FC0 20 DA       8804                   JR	NZ,VDU
002FC2 18 B2       8805                   JR	XEQGO1ex
002FC4             8806   ;
002FC4 FD 23       8807   VDU4:           INC	IY
002FC6 AF          8808                   XOR	A
002FC7 06 09       8809                   LD	B,9
002FC9 18 D8       8810                   JR	VDU1
002FCB             8811   ;
002FCB             8812   ;CLOSE channel number
002FCB             8813   ;
002FCB CD D1 36    8814   CLOSE:          CALL	CHANEL
002FCE CD 53 06    8815                   CALL	OSSHUT
002FD1 18 A3       8816                   JR	XEQGO1ex
002FD3             8817   ;
002FD3             8818   ;BPUT #channel,byte
002FD3             8819   ;BPUT #channel,string[;]
002FD3             8820   ;
002FD3 CD D1 36    8821   BPUT:           CALL	CHANEL		;CHANNEL NUMBER
002FD6 D5          8822                   PUSH	DE
002FD7 CD A2 20    8823                   CALL	COMMA
002FDA CD 02 17    8824                   CALL	EXPR
002FDD 08          8825                   EX	AF,AF'
002FDE FA EC 2F    8826                   JP	M,BPUTS
002FE1 CD 17 1C    8827                   CALL	SFIX
002FE4 D9          8828                   EXX
002FE5 7D          8829                   LD	A,L
002FE6 D1          8830                   POP	DE
002FE7 CD 63 06    8831                   CALL	OSBPUT
002FEA 18 8A       8832   BPUTX:          JR	XEQGO1ex
002FEC             8833   ;
002FEC 7B          8834   BPUTS:          LD	A,E
002FED D1          8835                   POP	DE
002FEE 57          8836                   LD	D,A
002FEF 21 00 52    8837                   LD	HL,ACCS
002FF2 7E          8838   BPUTS1:         LD	A,(HL)
002FF3 23          8839                   INC	HL
002FF4 CD 63 06    8840                   CALL	OSBPUT
002FF7 15          8841                   DEC	D
002FF8 20 F8       8842                   JR	NZ,BPUTS1
002FFA CD 0B 45    8843                   CALL	NXT
002FFD FE 3B       8844                   CP	';'
002FFF FD 23       8845                   INC	IY
003001 28 E7       8846                   JR	Z,BPUTX
003003 3E 0A       8847                   LD	A,LF
003005 CD 63 06    8848                   CALL	OSBPUT
003008 FD 2B       8849                   DEC	IY
00300A 18 DE       8850                   JR	BPUTX
00300C             8851   ;
00300C             8852   ;CALL address[,var[,var...]]
00300C             8853   ;
00300C CD 33 18    8854   CALL:           CALL	EXPRI		;ADDRESS
00300F D9          8855                   EXX
003010 E5          8856                   PUSH	HL		;SAVE IT
003011 06 00       8857                   LD	B,0		;PARAMETER COUNTER
003013 11 00 53    8858                   LD	DE,BUFFER	;VECTOR
003016 CD 0B 45    8859   CALL1:          CALL	NXT
003019 FE 2C       8860                   CP	','
00301B 20 17       8861                   JR	NZ,CALL2
00301D FD 23       8862                   INC	IY
00301F 04          8863                   INC	B
003020 CD 0B 45    8864                   CALL	NXT
003023 C5          8865                   PUSH	BC
003024 D5          8866                   PUSH	DE
003025 CD D6 25    8867                   CALL	VAR_
003028 D1          8868                   POP	DE
003029 C1          8869                   POP	BC
00302A 13          8870                   INC	DE
00302B 12          8871                   LD	(DE),A		;PARAMETER TYPE
00302C 13          8872                   INC	DE
00302D EB          8873                   EX	DE,HL
00302E 73          8874                   LD	(HL),E		;PARAMETER ADDRESS
00302F 23          8875                   INC	HL
003030 72          8876                   LD	(HL),D
003031 EB          8877                   EX	DE,HL
003032 18 E2       8878                   JR	CALL1
003034 78          8879   CALL2:          LD	A,B
003035 32 00 53    8880                   LD	(BUFFER),A	;PARAMETER COUNT
003038 E1          8881                   POP	HL		;RESTORE ADDRESS
003039 CD 43 30    8882                   CALL	USR1
00303C C3 99 24    8883                   JP	XEQ
00303F             8884   ;
00303F             8885   ;USR(address)
00303F             8886   ;
00303F CD 60 18    8887   USR:            CALL	ITEMI
003042 D9          8888                   EXX
003043 E5          8889   USR1:           PUSH	HL		;ADDRESS ON STACK
003044 FD E3       8890                   EX	(SP),IY
003046 24          8891                   INC	H		;PAGE &FF?
003047 21 72 30    8892                   LD	HL,USR2		;RETURN ADDRESS
00304A E5          8893                   PUSH	HL
00304B DD 21 00 54 8894                   LD	IX,STAVAR
00304F CC A8 10    8895                   CALL	Z,OSCALL	;INTERCEPT PAGE &FF
003052 DD 4E 18    8896                   LD	C,(IX+24)
003055 C5          8897                   PUSH	BC
003056 F1          8898                   POP	AF		;LOAD FLAGS
003057 DD 7E 04    8899                   LD	A,(IX+4)	;LOAD Z80 REGISTERS
00305A DD 46 08    8900                   LD	B,(IX+8)
00305D DD 4E 0C    8901                   LD	C,(IX+12)
003060 DD 56 10    8902                   LD	D,(IX+16)
003063 DD 5E 14    8903                   LD	E,(IX+20)
003066 DD 66 20    8904                   LD	H,(IX+32)
003069 DD 6E 30    8905                   LD	L,(IX+48)
00306C DD 21 00 53 8906                   LD	IX,BUFFER
003070 FD E9       8907                   JP	(IY)		;OFF TO USER ROUTINE
003072 FD E1       8908   USR2:           POP	IY
003074 AF          8909                   XOR	A
003075 4F          8910                   LD	C,A
003076 C9          8911                   RET
003077             8912   ;
003077             8913   ; LEFT$(A$[,N]) = string
003077             8914   ; MID$(A$,N[,M]) = string
003077             8915   ; RIGHT$(A$[,N]) = string
003077             8916   ;
003077 CD BE 25    8917   LEFTSL:         CALL    GETSTR
00307A 21 00 FF    8918                   LD	HL,0FF00H	;Default all but last
00307D 20 48       8919                   JR	NZ,MIDSL1
00307F 18 26       8920                   JR	MIDSL0
003081             8921   ;
003081 CD BE 25    8922   RITESL:         CALL	GETSTR
003084 21 FF FF    8923                   LD	HL,0FFFFH	;Default last char only
003087 20 3E       8924                   JR	NZ,MIDSL1
003089 18 1C       8925                   JR	MIDSL0
00308B             8926   ;
00308B CD BE 25    8927   MIDSL:          CALL	GETSTR
00308E 3E 05       8928                   LD	A,5
003090 C2 44 3F    8929                   JP	NZ,ERROR_	;'Missing comma'
003093 FD 23       8930                   INC	IY
003095 DD E5       8931                   PUSH	IX
003097 CD 33 18    8932                   CALL	EXPRI
00309A DD E1       8933                   POP	IX
00309C D9          8934                   EXX
00309D CD 0B 45    8935                   CALL	NXT
0030A0 2D          8936                   DEC	L
0030A1 26 FE       8937                   LD	H,254		;Default rest of string
0030A3 FE 2C       8938                   CP	','
0030A5 20 20       8939                   JR	NZ,MIDSL1
0030A7 FD 23       8940   MIDSL0:         INC	IY
0030A9 E5          8941                   PUSH	HL
0030AA DD E5       8942                   PUSH	IX
0030AC CD 33 18    8943                   CALL	EXPRI
0030AF DD E1       8944                   POP	IX
0030B1 D9          8945                   EXX
0030B2 7D          8946                   LD	A,L
0030B3 E1          8947                   POP	HL
0030B4 B7          8948                   OR	A
0030B5 28 0D       8949                   JR	Z,MIDSL2	;Zero length
0030B7 3D          8950                   DEC	A
0030B8 85          8951                   ADD	A,L
0030B9 67          8952                   LD	H,A
0030BA 30 0B       8953                   JR	NC,MIDSL1
0030BC 7D          8954                   LD	A,L
0030BD 3C          8955                   INC	A
0030BE 28 07       8956                   JR	Z,MIDSL1
0030C0 26 FE       8957                   LD	H,254
0030C2 18 03       8958                   JR	MIDSL1
0030C4             8959   ;
0030C4 21 01 00    8960   MIDSL2:         LD	HL,1
0030C7 CD AE 20    8961   MIDSL1:         CALL	BRAKET
0030CA CD 4F 35    8962                   CALL	EQUALS
0030CD E5          8963                   PUSH	HL
0030CE DD E5       8964                   PUSH	IX
0030D0 CD 3C 18    8965                   CALL	EXPRS
0030D3 DD E1       8966                   POP	IX
0030D5 E1          8967                   POP	HL
0030D6 4B          8968                   LD	C,E
0030D7 DD 46 00    8969                   LD	B,(IX+0)
0030DA DD 5E 02    8970                   LD	E,(IX+2)
0030DD DD 56 03    8971                   LD	D,(IX+3)
0030E0             8972   ;
0030E0             8973   ; Source string at ACCS, length C
0030E0             8974   ; Destination string at DE, length B
0030E0             8975   ; L = first character to modify 0-254
0030E0             8976   ; H =  last character to modify 0-254
0030E0             8977   ; IF L=255 THEN modify rightmost H + 2 chars
0030E0             8978   ; ELSE IF H=255 modify all but last character
0030E0             8979   ; ELSE IF L > H do nothing
0030E0             8980   ; IX = destination VARPTR
0030E0             8981   ;
0030E0 7D          8982                   LD	A,L
0030E1 3C          8983                   INC	A
0030E2 20 0F       8984                   JR	NZ,SUBSL1
0030E4 24          8985                   INC	H
0030E5 24          8986                   INC	H
0030E6 79          8987                   LD	A,C
0030E7 BC          8988                   CP	H
0030E8 30 01       8989                   JR	NC,SUBSL0
0030EA 67          8990                   LD	H,A
0030EB 78          8991   SUBSL0:         LD	A,B
0030EC 94          8992                   SUB	H
0030ED 30 01       8993                   JR	NC,SUBSL6
0030EF AF          8994                   XOR	A
0030F0 6F          8995   SUBSL6:         LD	L,A
0030F1 18 12       8996                   JR	SUBSL5
0030F3             8997   ;
0030F3 7C          8998   SUBSL1:         LD	A,H
0030F4 3C          8999                   INC	A
0030F5 20 06       9000                   JR	NZ,SUBSL2
0030F7 78          9001                   LD	A,B
0030F8 D6 02       9002                   SUB	2
0030FA 38 24       9003                   JR	C,SUBSL9
0030FC 67          9004                   LD	H,A
0030FD 7D          9005   SUBSL2:         LD	A,L
0030FE B8          9006                   CP	B
0030FF 30 1F       9007                   JR	NC,SUBSL9
003101 7C          9008                   LD	A,H
003102 B8          9009                   CP	B
003103 38 03       9010                   JR	C,SUBSL3
003105 78          9011   SUBSL5:         LD	A,B
003106 3D          9012                   DEC	A
003107 67          9013                   LD	H,A
003108 7C          9014   SUBSL3:         LD	A,H
003109 95          9015                   SUB	L
00310A 38 14       9016                   JR	C,SUBSL9
00310C 3C          9017                   INC	A
00310D B9          9018                   CP	C
00310E 38 01       9019                   JR	C,SUBSL4
003110 79          9020                   LD	A,C
003111 06 00       9021   SUBSL4:         LD	B,0
003113 60          9022                   LD	H,B
003114 4F          9023                   LD	C,A
003115 B7          9024                   OR	A
003116 28 08       9025                   JR	Z,SUBSL9
003118 EB          9026                   EX	DE,HL
003119 19          9027                   ADD	HL,DE
00311A EB          9028                   EX	DE,HL
00311B 21 00 52    9029                   LD	HL,ACCS
00311E ED B0       9030                   LDIR
003120 C3 99 24    9031   SUBSL9:         JP	XEQ
003123             9032   ;
003123             9033   ; EXITex FOR [var]
003123             9034   ; EXITex REPEAT
003123             9035   ; EXITex WHILE
003123             9036   ;
003123 FD 23       9037   EXITex:           INC	IY		;Skip FOR/REPEAT/WHILE
003125 FE E3       9038                   CP	TFOR
003127 20 0C       9039                   JR	NZ,EXIT0
003129 DD 21 00 00 9040                   LD	IX,0		;For EXITex FOR <var>
00312D CD 36 35    9041                   CALL	TERMQ
003130 C4 E3 41    9042                   CALL	NZ,GETVAR
003133 3E E3       9043                   LD	A,TFOR
003135 16 01       9044   EXIT0:          LD	D,1		;Level for WSRCH
003137 5F          9045                   LD	E,A
003138 7B          9046   EXIT1:          LD	A,E
003139 C1          9047                   POP	BC		;Marker
00313A 21 61 29    9048                   LD	HL,FORCHK
00313D B7          9049                   OR	A
00313E ED 42       9050                   SBC	HL,BC
003140 28 25       9051                   JR	Z,EXIT4
003142 21 ED 28    9052                   LD	HL,REPCHK
003145 B7          9053                   OR	A
003146 ED 42       9054                   SBC	HL,BC
003148 28 38       9055                   JR	Z,EXIT6
00314A 21 2E 2E    9056                   LD	HL,WHICHK
00314D B7          9057                   OR	A
00314E ED 42       9058                   SBC	HL,BC
003150 28 3A       9059                   JR	Z,EXIT7
003152 C5          9060                   PUSH	BC		;Put back marker
003153 DD E5       9061                   PUSH	IX
003155 C1          9062                   POP	BC
003156 D9          9063                   EXX
003157 3E 03       9064                   LD	A,3
003159 CD 31 34    9065                   CALL	RESLOC
00315C D9          9066                   EXX
00315D C5          9067                   PUSH	BC
00315E DD E1       9068                   POP	IX
003160 20 D6       9069                   JR	NZ,EXIT1
003162 3E 2C       9070                   LD	A,44
003164 C3 44 3F    9071                   JP	ERROR_		;'Bad EXITex'
003167             9072   ;
003167 C1          9073   EXIT4:          POP	BC		;VARPTR
003168 21 0E 00    9074                   LD	HL,14		;Skip text pointer, limit & step
00316B 39          9075                   ADD	HL,SP
00316C F9          9076                   LD	SP,HL		;Pop FOR record
00316D FE E3       9077                   CP	TFOR
00316F 20 C7       9078                   JR	NZ,EXIT1
003171 DD E5       9079                   PUSH	IX
003173 E1          9080                   POP	HL
003174 7C          9081                   LD	A,H
003175 B5          9082                   OR	L
003176 28 02       9083                   JR	Z,EXIT5
003178 ED 42       9084                   SBC	HL,BC
00317A 01 00 D0    9085   EXIT5:          LD	BC,TFOR+TNEXT*256
00317D 28 15       9086                   JR	Z,EXIT8
00317F 14          9087                   INC	D		;Count nested FOR loops
003180 18 B6       9088                   JR	EXIT1
003182             9089   ;
003182 C1          9090   EXIT6:          POP	BC		;Text pointer
003183 FE F5       9091                   CP	TREPEAT
003185 20 B1       9092                   JR	NZ,EXIT1
003187 01 00 F2    9093                   LD	BC,TREPEAT+TUNTIL*256
00318A 18 08       9094                   JR	EXIT8
00318C             9095   ;
00318C C1          9096   EXIT7:          POP	BC		;Text pointer
00318D FE C7       9097                   CP	TWHILE
00318F 20 A7       9098                   JR	NZ,EXIT1
003191 01 00 95    9099                   LD	BC,TWHILE+TENDWHILE*256
003194 CD 50 36    9100   EXIT8:          CALL	WSRCH
003197 CD 42 35    9101                   CALL	SPAN		;Skip UNTIL expression
00319A C3 99 24    9102                   JP	XEQ
00319D             9103   ;
00319D             9104   ;PUT port,data
00319D             9105   ;
00319D CD 33 18    9106   PUT:            CALL	EXPRI		;PORT ADDRESS
0031A0 D9          9107                   EXX
0031A1 E5          9108                   PUSH	HL
0031A2 CD A2 20    9109                   CALL	COMMA
0031A5 CD 33 18    9110                   CALL	EXPRI		;DATA
0031A8 D9          9111                   EXX
0031A9 C1          9112                   POP	BC
0031AA ED 69       9113                   OUT	(C),L		;OUTPUT TO PORT BC
0031AC C3 99 24    9114                   JP	XEQ
0031AF             9115   ;
0031AF             9116   ;SUBROUTINES:
0031AF             9117   ;
0031AF             9118   ;ASSIGN - Assign a numeric value to a variable.
0031AF             9119   ;Outputs: NC,  Z     - OK, numeric scalar
0031AF             9120   ;         NC, NZ, PE - OK, string array  (D = type, E = operator)
0031AF             9121   ; else if NC, NZ, P  - OK, numeric array (D = type, E = operator)
0031AF             9122   ; else if NC, NZ     - OK, string scalar
0031AF             9123   ;          C, NZ     - illegal / invalid
0031AF             9124   ;
0031AF CD E3 41    9125   ASSIGN:         CALL	GETVAR		;VARIABLE
0031B2 D8          9126                   RET	C		;ILLEGAL VARIABLE
0031B3 C4 CD 41    9127                   CALL	NZ,PUTVAR
0031B6 57          9128                   LD	D,A		;Type
0031B7 CD 0B 45    9129                   CALL	NXT
0031BA FD 23       9130                   INC	IY
0031BC 5F          9131                   LD	E,A		;Operator (or =)
0031BD FE 3D       9132                   CP	'='
0031BF C4 4F 35    9133                   CALL	NZ,EQUALS
0031C2 7A          9134                   LD	A,D
0031C3 E6 C0       9135                   AND	11000000B
0031C5 C0          9136                   RET	NZ		;String or array
0031C6 D5          9137                   PUSH	DE
0031C7 E5          9138                   PUSH	HL
0031C8 CD 2C 18    9139                   CALL	EXPRN
0031CB DD E1       9140                   POP	IX
0031CD D1          9141                   POP	DE
0031CE             9142   ;
0031CE             9143   ; Falls through to...
0031CE             9144   ;
0031CE             9145   ; MODIFY - Update numeric variable according to operator:
0031CE             9146   ;   Inputs: D = type
0031CE             9147   ;           E = operator
0031CE             9148   ;           HLH'L'C = value
0031CE             9149   ;           IX = destination VARPTR
0031CE             9150   ; Destroys: Everything except IX,IY,SP
0031CE             9151   ;
0031CE 7B          9152   MODIFY:         LD	A,E
0031CF FE 3D       9153                   CP	'='
0031D1 28 1C       9154                   JR	Z,STORE0	;Simple assignment
0031D3 D5          9155                   PUSH	DE
0031D4 D9          9156                   EXX
0031D5 EB          9157                   EX	DE,HL
0031D6 D9          9158                   EXX
0031D7 EB          9159                   EX	DE,HL
0031D8 41          9160                   LD	B,C
0031D9 E3          9161                   EX	(SP),HL
0031DA 7C          9162                   LD	A,H
0031DB E3          9163                   EX	(SP),HL
0031DC CD 25 19    9164                   CALL	LOADN
0031DF E3          9165                   EX	(SP),HL
0031E0 7D          9166                   LD	A,L
0031E1 E3          9167                   EX	(SP),HL
0031E2 E6 0F       9168                   AND	15
0031E4 DD E5       9169                   PUSH	IX
0031E6 CD 15 45    9170                   CALL	FPP
0031E9 DD E1       9171                   POP	IX
0031EB D1          9172                   POP	DE
0031EC DA 44 3F    9173                   JP	C,ERROR_
0031EF 7A          9174   STORE0:         LD	A,D		;Type
0031F0 FE 05       9175   STOREN:         CP	5
0031F2 28 12       9176                   JR	Z,STORE5
0031F4 F5          9177                   PUSH	AF
0031F5 0C          9178                   INC	C		;SPEED - & PRESERVE F'
0031F6 0D          9179                   DEC	C		; WHEN CALLED BY FNEND0
0031F7 C4 17 1C    9180                   CALL	NZ,SFIX		;CONVERT TO INTEGER
0031FA F1          9181                   POP	AF
0031FB FE 04       9182                   CP	4
0031FD 28 0A       9183                   JR	Z,STORE4
0031FF BF          9184                   CP	A		;SET ZERO
003200 D9          9185   STORE1:         EXX
003201 DD 75 00    9186                   LD	(IX+0),L
003204 D9          9187                   EXX
003205 C9          9188                   RET
003206             9189   ;
003206 DD 71 04    9190   STORE5:         LD	(IX+4),C
003209 D9          9191   STORE4:         EXX
00320A DD 75 00    9192                   LD	(IX+0),L
00320D DD 74 01    9193                   LD	(IX+1),H
003210 D9          9194                   EXX
003211 DD 75 02    9195                   LD	(IX+2),L
003214 DD 74 03    9196                   LD	(IX+3),H
003217 C9          9197                   RET
003218             9198   ;
003218             9199   ; MODIFS - Update string variable according to operator:
003218             9200   ;   Inputs: H = type
003218             9201   ;           L = operator (= or +)
003218             9202   ;           E = string length (string in accumulator)
003218             9203   ;           IX = destination VARPTR
003218             9204   ; Destroys: Everything except SP, IY
003218             9205   ;
003218 7D          9206   MODIFS:         LD	A,L		;Operator
003219 FE 2B       9207                   CP	'+'
00321B 7C          9208                   LD	A,H		;Type
00321C 20 20       9209                   JR	NZ,STACCS
00321E FD E5       9210                   PUSH	IY
003220 DD E5       9211                   PUSH	IX
003222 FD E1       9212                   POP	IY
003224 CD 19 20    9213                   CALL	PUSHS
003227 FD E5       9214                   PUSH	IY
003229 DD E1       9215                   POP	IX
00322B CD 0E 1A    9216                   CALL	LOADS
00322E C1          9217                   POP	BC
00322F 78          9218                   LD	A,B		;Type
003230 0C          9219                   INC	C
003231 0D          9220                   DEC	C
003232 28 08       9221                   JR	Z,MODFS1	;Zero length
003234 21 00 00    9222                   LD	HL,0
003237 44          9223                   LD	B,H
003238 39          9224                   ADD	HL,SP
003239 ED B0       9225                   LDIR
00323B F9          9226                   LD	SP,HL
00323C FD E1       9227   MODFS1:         POP	IY
00323E             9228   ;
00323E             9229   ; Falls through to:
00323E             9230   ;
00323E 21 00 52    9231   STACCS:         LD	HL,ACCS
003241 1F          9232   STORES:         RRA
003242 30 4F       9233                   JR	NC,STORS3	;FIXED STRING
003244 E5          9234                   PUSH	HL
003245 CD 32 19    9235                   CALL	LOAD4
003248 7B          9236                   LD	A,E		;LENGTH OF STRING
003249 D9          9237                   EXX
00324A 6F          9238                   LD	L,A
00324B 7C          9239                   LD	A,H		;LENGTH ALLOCATED
00324C D9          9240                   EXX
00324D BB          9241                   CP	E
00324E 30 24       9242                   JR	NC,STORS1	;ENOUGH ROOM
003250 D9          9243                   EXX
003251 65          9244                   LD	H,L
003252 D9          9245                   EXX
003253 E5          9246                   PUSH	HL
003254 06 00       9247                   LD	B,0
003256 4F          9248                   LD	C,A
003257 09          9249                   ADD	HL,BC
003258 ED 4B E0 54 9250                   LD	BC,(FREE)
00325C ED 42       9251                   SBC	HL,BC		;IS STRING LAST?
00325E E1          9252                   POP	HL
00325F 28 12       9253                   JR	Z,STORS0
003261 60          9254                   LD	H,B
003262 69          9255                   LD	L,C		;DESTINATION
003263             9256   ;
003263 B7          9257                   OR	A		;V5 optimisation
003264 28 0D       9258                   JR	Z,STORS0
003266 7B          9259                   LD	A,E
003267 5F          9260   STORS2:         LD	E,A
003268 1D          9261                   DEC	E
003269 A3          9262                   AND	E
00326A 20 FB       9263                   JR	NZ,STORS2
00326C 37          9264                   SCF
00326D CB 13       9265                   RL	E
00326F 7B          9266                   LD	A,E
003270 D9          9267                   EXX
003271 67          9268                   LD	H,A
003272 D9          9269                   EXX
003273             9270   ;
003273 37          9271   STORS0:         SCF
003274 CD 09 32    9272   STORS1:         CALL	STORE4		;PRESERVES CARRY!
003277 06 00       9273                   LD	B,0
003279 4B          9274                   LD	C,E
00327A EB          9275                   EX	DE,HL
00327B E1          9276                   POP	HL
00327C 0D          9277                   DEC	C
00327D 0C          9278                   INC	C
00327E C8          9279                   RET	Z		;NULL STRING
00327F ED B0       9280                   LDIR
003281 D0          9281                   RET	NC		;STRING REPLACED
003282 ED 53 E0 54 9282                   LD	(FREE),DE
003286 E5          9283   CHECK:          PUSH	HL
003287 2A E0 54    9284                   LD	HL,(FREE)
00328A 24          9285                   INC	H
00328B ED 72       9286                   SBC	HL,SP
00328D E1          9287                   POP	HL
00328E D8          9288                   RET	C
00328F AF          9289                   XOR	A
003290 C3 44 3F    9290                   JP	ERROR_		;"No room"
003293             9291   ;
003293 4B          9292   STORS3:         LD	C,E
003294 DD E5       9293                   PUSH	IX
003296 D1          9294                   POP	DE
003297 AF          9295                   XOR	A
003298 47          9296                   LD	B,A
003299 B9          9297                   CP	C
00329A 28 02       9298                   JR	Z,STORS5
00329C ED B0       9299                   LDIR
00329E 3E 0D       9300   STORS5:         LD	A,CR
0032A0 12          9301                   LD	(DE),A
0032A1 C9          9302                   RET
0032A2             9303   ;
0032A2             9304   ; SAVRET - SAVE 'RETURNed' PARAMETER INFO
0032A2             9305   ;
0032A2 DD 75 00    9306   SAVRET:         LD	(IX+0),L		;Formal VARPTR
0032A5 DD 74 01    9307                   LD	(IX+1),H
0032A8 DD 77 02    9308                   LD	(IX+2),A
0032AB FD E3       9309                   EX	(SP),IY
0032AD F5          9310                   PUSH	AF
0032AE FD E5       9311                   PUSH	IY
0032B0 DD E5       9312                   PUSH	IX
0032B2 CD 0B 45    9313                   CALL	NXT
0032B5 CD D6 25    9314                   CALL	VAR_
0032B8 DD E1       9315                   POP	IX
0032BA DD 75 04    9316                   LD	(IX+4),L		;Actual VARPTR
0032BD DD 74 05    9317                   LD	(IX+5),H
0032C0 DD 77 06    9318                   LD	(IX+6),A
0032C3 FD E1       9319                   POP	IY
0032C5 F1          9320                   POP	AF
0032C6 01 08 00    9321                   LD	BC,8
0032C9 DD 09       9322                   ADD	IX,BC
0032CB 18 2D       9323                   JR	ARGUE0
0032CD             9324   ;
0032CD             9325   ;ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
0032CD             9326   ; CALLING STATEMENT TO THE DUMMY VARIABLES VIA
0032CD             9327   ; THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
0032CD             9328   ; PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
0032CD             9329   ;   Inputs: DE addresses parameter list
0032CD             9330   ;           IY addresses dummy variable list
0032CD             9331   ;           IX addresses RETURNed parameter data block
0032CD             9332   ;  Outputs: DE,IY updated
0032CD             9333   ; Destroys: Everything
0032CD             9334   ;
0032CD 3E FF       9335   ARGUE:          LD	A,-1
0032CF F5          9336                   PUSH	AF		;PUT MARKER ON STACK
0032D0 FD 23       9337   ARGUE1:         INC	IY		;BUMP PAST ( | ,
0032D2 13          9338                   INC	DE
0032D3 D5          9339                   PUSH	DE
0032D4 06 00       9340                   LD	B,0
0032D6 CD 0B 45    9341                   CALL	NXT
0032D9 FE F8       9342                   CP	TRETURN
0032DB 20 06       9343                   JR	NZ,ARGUE9
0032DD FD 23       9344                   INC	IY		;SKIP 'RETURN'
0032DF CD 0B 45    9345                   CALL	NXT
0032E2 04          9346                   INC	B		;FLAG 'RETURN'
0032E3 C5          9347   ARGUE9:         PUSH	BC
0032E4 DD E5       9348                   PUSH	IX
0032E6 CD E3 41    9349                   CALL	GETVAR		;FORMAL PARAMETER
0032E9 38 49       9350                   JR	C,ARGERR
0032EB C4 CD 41    9351                   CALL	NZ,PUTVAR
0032EE DD E1       9352                   POP	IX
0032F0 C1          9353                   POP	BC
0032F1 D1          9354                   POP	DE
0032F2 E5          9355                   PUSH	HL		;VARPTR
0032F3 F5          9356                   PUSH	AF
0032F4 D5          9357                   PUSH	DE
0032F5 05          9358                   DEC	B
0032F6 28 AA       9359                   JR	Z,SAVRET
0032F8 FD E3       9360                   EX	(SP),IY
0032FA CB 77       9361   ARGUE0:         BIT	6,A		;ARRAY?
0032FC 20 3B       9362                   JR	NZ,ARGUE3
0032FE B7          9363                   OR	A		;TYPE
0032FF FA 15 33    9364                   JP	M,ARGUE2	;STRING
003302 DD E5       9365                   PUSH	IX
003304 CD 2C 18    9366                   CALL	EXPRN		;ACTUAL PARAMETER
003307 DD E1       9367                   POP	IX
003309 FD E3       9368                   EX	(SP),IY
00330B D1          9369                   POP	DE
00330C F1          9370                   POP	AF
00330D D9          9371                   EXX
00330E E5          9372                   PUSH	HL
00330F D9          9373                   EXX
003310 E5          9374                   PUSH	HL
003311 47          9375                   LD	B,A
003312 C5          9376                   PUSH	BC
003313 18 13       9377                   JR	ARGUE4
003315             9378   ;
003315 DD E5       9379   ARGUE2:         PUSH	IX
003317 CD 3C 18    9380                   CALL	EXPRS
00331A D9          9381                   EXX
00331B C1          9382                   POP	BC
00331C FD E3       9383                   EX	(SP),IY
00331E D1          9384                   POP	DE
00331F D9          9385                   EXX
003320 F1          9386                   POP	AF
003321 CD 19 20    9387                   CALL	PUSHS
003324 D9          9388                   EXX
003325 C5          9389                   PUSH	BC
003326 DD E1       9390                   POP	IX
003328 CD 0B 45    9391   ARGUE4:         CALL	NXT
00332B FE 2C       9392                   CP	','
00332D 20 27       9393                   JR	NZ,ARGUE5
00332F 1A          9394                   LD	A,(DE)
003330 FE 2C       9395                   CP	','
003332 28 9C       9396                   JR	Z,ARGUE1	;ANOTHER
003334 3E 1F       9397   ARGERR:         LD	A,31
003336 C3 44 3F    9398                   JP	ERROR_		;"Bad arguments"
003339             9399   ;
003339 DD E5       9400   ARGUE3:         PUSH	IX
00333B CD 0B 45    9401                   CALL	NXT
00333E CD E3 41    9402                   CALL	GETVAR
003341 38 F1       9403                   JR	C,ARGERR
003343 DD 4E 00    9404                   LD	C,(IX+0)
003346 DD 46 01    9405                   LD	B,(IX+1)
003349 DD E1       9406                   POP	IX
00334B CD 0B 45    9407                   CALL	NXT
00334E FD E3       9408                   EX	(SP),IY
003350 D1          9409                   POP	DE
003351 F1          9410                   POP	AF
003352 C5          9411                   PUSH	BC		;STACK ARRAY POINTER
003353 F5          9412                   PUSH	AF		;STACK TYPE
003354 18 D2       9413                   JR	ARGUE4
003356             9414   ;
003356 CD AE 20    9415   ARGUE5:         CALL	BRAKET
003359 1A          9416                   LD	A,(DE)
00335A FE 29       9417                   CP	')'
00335C 20 D6       9418                   JR	NZ,ARGERR
00335E 13          9419                   INC	DE
00335F D9          9420   UNSTAK:         EXX
003360 C1          9421   ARGUE6:         POP	BC
003361 78          9422                   LD	A,B
003362 3C          9423                   INC	A
003363 D9          9424                   EXX
003364 C8          9425                   RET	Z		;MARKER POPPED
003365 D9          9426                   EXX
003366 3D          9427                   DEC	A
003367 CB 77       9428                   BIT	6,A		;ARRAY
003369 20 19       9429                   JR	NZ,ARGUE8
00336B B7          9430                   OR	A
00336C FA 7A 33    9431                   JP	M,ARGUE7	;STRING
00336F E1          9432                   POP	HL
003370 D9          9433                   EXX
003371 E1          9434                   POP	HL
003372 D9          9435                   EXX
003373 DD E1       9436                   POP	IX
003375 CD F0 31    9437                   CALL	STOREN		;WRITE TO DUMMY
003378 18 E6       9438                   JR	ARGUE6
00337A             9439   ;
00337A CD 37 20    9440   ARGUE7:         CALL	POPS
00337D DD E1       9441                   POP	IX
00337F CD 3E 32    9442                   CALL	STACCS
003382 18 DC       9443                   JR	ARGUE6
003384             9444   ;
003384 C1          9445   ARGUE8:         POP	BC		;ARRAY POINTER
003385 DD E1       9446                   POP	IX
003387 DD 71 00    9447                   LD	(IX+0),C
00338A DD 70 01    9448                   LD	(IX+1),B
00338D 18 D1       9449                   JR	ARGUE6
00338F             9450   ;
00338F             9451   ;Restore RETURNed parameters, via the stack to ensure that
00338F             9452   ; PROCFRED(A,B)    DEF PROCFRED(RETURN B,RETURN A)  works.
00338F             9453   ;
00338F 3E FF       9454   RETXFR:         LD	A,-1
003391 F5          9455                   PUSH	AF		;PUT MARKER ON STACK
003392 D9          9456   RETXF1:         EXX
003393 DD 6E 04    9457                   LD	L,(IX+4)	;Actual parameter (destination)
003396 DD 66 05    9458                   LD	H,(IX+5)
003399 E5          9459                   PUSH	HL		;STACK VARPTR
00339A DD 6E 00    9460                   LD	L,(IX+0)	;Formal parameter (source)
00339D DD 66 01    9461                   LD	H,(IX+1)
0033A0 DD 7E 02    9462                   LD	A,(IX+2)
0033A3 CB 77       9463                   BIT	6,A		;ARRAY?
0033A5 20 19       9464                   JR	NZ,RETXF3
0033A7 B7          9465                   OR	A		;TYPE
0033A8 FA C6 33    9466                   JP	M,RETXF2	;STRING
0033AB E5          9467                   PUSH	HL
0033AC DD E3       9468                   EX	(SP),IX
0033AE CD 25 19    9469                   CALL	LOADN
0033B1 DD E1       9470                   POP	IX
0033B3 D9          9471                   EXX			;STACK VALUE
0033B4 E5          9472                   PUSH	HL
0033B5 D9          9473                   EXX
0033B6 E5          9474                   PUSH	HL
0033B7 DD 46 06    9475   RETXF6:         LD	B,(IX+6)
0033BA C5          9476                   PUSH	BC		;TYPE & EXPONENT
0033BB CD 86 32    9477   RETXF5:         CALL	CHECK		;CHECK ROOM
0033BE 18 1E       9478                   JR	RETXF4
0033C0             9479   ;
0033C0 5E          9480   RETXF3:         LD	E,(HL)
0033C1 23          9481                   INC	HL
0033C2 56          9482                   LD	D,(HL)
0033C3 D5          9483                   PUSH	DE		;STACK ARRAY POINTER
0033C4 18 F1       9484                   JR	RETXF6
0033C6             9485   ;
0033C6 E5          9486   RETXF2:         PUSH	HL
0033C7 DD E3       9487                   EX	(SP),IX
0033C9 CD 0E 1A    9488                   CALL	LOADS
0033CC DD E1       9489                   POP	IX
0033CE DD 7E 06    9490                   LD	A,(IX+6)
0033D1 D9          9491                   EXX
0033D2 DD E5       9492                   PUSH	IX
0033D4 E1          9493                   POP	HL
0033D5 D9          9494                   EXX
0033D6 CD 19 20    9495                   CALL	PUSHS
0033D9 D9          9496                   EXX
0033DA E5          9497                   PUSH	HL
0033DB DD E1       9498                   POP	IX
0033DD D9          9499                   EXX
0033DE 11 08 00    9500   RETXF4:         LD	DE,8
0033E1 DD 19       9501                   ADD	IX,DE
0033E3 D9          9502                   EXX
0033E4 10 AC       9503                   DJNZ	RETXF1
0033E6 C3 5F 33    9504                   JP	UNSTAK
0033E9             9505   ;
0033E9             9506   ;Restore 'RETURNed' parameters,
0033E9             9507   ;
0033E9 C1          9508   RESRET:         POP	BC		;B = 'RETURN' COUNT
0033EA 26 00       9509                   LD	H,0
0033EC 68          9510                   LD	L,B
0033ED 29          9511                   ADD	HL,HL
0033EE 29          9512                   ADD	HL,HL
0033EF 29          9513                   ADD	HL,HL		;RETURN COUNT * 8
0033F0 39          9514                   ADD	HL,SP
0033F1 DD 21 00 00 9515                   LD	IX,0
0033F5 DD 39       9516                   ADD	IX,SP		;ADDRESS PARAMETER LIST
0033F7 F5          9517                   PUSH	AF
0033F8 D5          9518                   PUSH	DE
0033F9 E5          9519                   PUSH	HL
0033FA D9          9520                   EXX
0033FB C5          9521                   PUSH	BC
0033FC D5          9522                   PUSH	DE
0033FD D9          9523                   EXX
0033FE 78          9524                   LD	A,B
0033FF 21 00 52    9525                   LD	HL,ACCS
003402 11 00 53    9526                   LD	DE,BUFFER
003405 01 FF 00    9527                   LD	BC,255
003408 ED B0       9528                   LDIR
00340A 47          9529                   LD	B,A
00340B CD 8F 33    9530                   CALL	RETXFR		;TRANSFER VIA STACK
00340E 21 00 53    9531                   LD	HL,BUFFER
003411 11 00 52    9532                   LD	DE,ACCS
003414 01 FF 00    9533                   LD	BC,255
003417 ED B0       9534                   LDIR
003419 D9          9535                   EXX
00341A D1          9536                   POP	DE
00341B C1          9537                   POP	BC
00341C D9          9538                   EXX
00341D E1          9539                   POP	HL
00341E D1          9540                   POP	DE
00341F F1          9541                   POP	AF
003420 18 0A       9542                   JR	RESAR1
003422             9543   ;
003422             9544   ; Restore LOCAL array or memory block:
003422             9545   ;
003422 C1          9546   RESARR:         POP	BC
003423 CB 78       9547                   BIT	7,B		;String array?
003425 E1          9548                   POP	HL
003426 C1          9549                   POP	BC
003427 09          9550                   ADD	HL,BC
003428 39          9551                   ADD	HL,SP
003429 C4 E3 36    9552                   CALL	NZ,FREESA	;Free string array
00342C F9          9553   RESAR1:         LD	SP,HL
00342D DD 23       9554                   INC	IX		;Flag something restored
00342F 18 05       9555                   JR	RESLO1
003431             9556   ;
003431             9557   ; RESLOC - Restore local variables/arrays or DATA/ERROR status from stack
003431             9558   ;   Inputs: A = 0 if everything OK, bit0 set if DATPTR, bit1 set if ERRTRP
003431             9559   ;  Outputs: Z if nothing was restored, NZ if something was restored
003431             9560   ; Destroys: A,B,C,D,E,H,L,H',L',IX,SP,flags
003431             9561   ;
003431 D1          9562   RESLOC:         POP	DE		;Return address
003432 DD 21 00 00 9563                   LD	IX,0		;To flag nothing was restored
003436 C1          9564   RESLO1:         POP	BC		;Marker ?
003437 21 2A 35    9565                   LD	HL,LOCCHK
00343A B7          9566                   OR	A
00343B ED 42       9567                   SBC	HL,BC
00343D 28 1A       9568                   JR	Z,RESLO2	;Something to restore
00343F B7          9569                   OR	A
003440 20 0F       9570                   JR	NZ,RESLO8
003442 21 70 2A    9571                   LD	HL,RETCHK
003445 ED 42       9572                   SBC	HL,BC
003447 28 A0       9573                   JR	Z,RESRET
003449 21 DC 26    9574                   LD	HL,ARRCHK
00344C B7          9575                   OR	A
00344D ED 42       9576                   SBC	HL,BC
00344F 28 D1       9577                   JR	Z,RESARR
003451 DD E5       9578   RESLO8:         PUSH	IX
003453 E1          9579                   POP	HL
003454 7C          9580                   LD	A,H
003455 B5          9581                   OR	L
003456 C5          9582   RESLO0:         PUSH	BC		;Put back marker
003457 EB          9583                   EX	DE,HL
003458 E9          9584                   JP	(HL)		;Return
003459             9585   ;
003459 DD E1       9586   RESLO2:         POP	IX		;Variable pointer
00345B B7          9587                   OR	A
00345C 28 20       9588                   JR	Z,RESLO3	;Everything allowed
00345E DD E5       9589                   PUSH	IX
003460 C1          9590                   POP	BC
003461 CB 47       9591                   BIT	0,A
003463 28 07       9592                   JR	Z,RESLO6	;Bit 0 set, so
003465 21 F0 54    9593                   LD	HL,DATPTR	;test for DATPTR
003468 ED 42       9594                   SBC	HL,BC
00346A 28 12       9595                   JR	Z,RESLO3
00346C B7          9596   RESLO6:         OR	A
00346D CB 4F       9597                   BIT	1,A
00346F 28 07       9598                   JR	Z,RESLO7	;Bit 1 set, so
003471 21 EA 54    9599                   LD	HL,ERRTRP	;test for ERRPTR
003474 ED 42       9600                   SBC	HL,BC
003476 28 06       9601                   JR	Z,RESLO3
003478 C5          9602   RESLO7:         PUSH	BC		;Put back pointer
003479 01 2A 35    9603                   LD	BC,LOCCHK
00347C 18 D8       9604                   JR	RESLO0
00347E             9605   ;
00347E C1          9606   RESLO3:         POP	BC		;Type / exponent
00347F CB 70       9607                   BIT	6,B
003481 20 14       9608                   JR	NZ,RESLO4	;Array?
003483 CB 78       9609                   BIT	7,B
003485 20 23       9610                   JR	NZ,RESLO5	;String?
003487 E1          9611                   POP	HL
003488 D9          9612                   EXX
003489 E1          9613                   POP	HL
00348A D9          9614                   EXX
00348B CB 60       9615                   BIT	4,B
00348D 20 A7       9616                   JR	NZ,RESLO1
00348F F5          9617                   PUSH	AF
003490 78          9618                   LD	A,B
003491 CD F0 31    9619                   CALL	STOREN		;Numeric
003494 F1          9620                   POP	AF
003495 18 9F       9621                   JR	RESLO1
003497             9622   ;
003497 E1          9623   RESLO4:         POP	HL
003498 CB 60       9624                   BIT	4,B
00349A 20 9A       9625                   JR	NZ,RESLO1
00349C DD 75 00    9626                   LD	(IX+0),L	;Array
00349F DD 74 01    9627                   LD	(IX+1),H
0034A2 18 92       9628                   JR	RESLO1
0034A4             9629   ;
0034A4 06 00       9630   RESLO9:         LD	B,0
0034A6 09          9631                   ADD	HL,BC
0034A7 F9          9632                   LD	SP,HL
0034A8 18 8C       9633   RESLGO:         JR	RESLO1
0034AA             9634   ;
0034AA 21 00 00    9635   RESLO5:         LD	HL,0
0034AD 39          9636                   ADD	HL,SP
0034AE CB 60       9637                   BIT	4,B
0034B0 20 F2       9638                   JR	NZ,RESLO9
0034B2 F5          9639                   PUSH	AF
0034B3 D5          9640                   PUSH	DE
0034B4 59          9641                   LD	E,C
0034B5 78          9642                   LD	A,B
0034B6 CD 41 32    9643                   CALL	STORES		;String
0034B9 D1          9644                   POP	DE
0034BA F1          9645                   POP	AF
0034BB F9          9646                   LD	SP,HL
0034BC 18 EA       9647                   JR	RESLGO
0034BE             9648   ;
0034BE             9649   ;SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
0034BE             9650   ;  OF A FUNCTION OR PROCEDURE.
0034BE             9651   ;THERE IS A LOT OF STACK MANIPULATION - CARE!!
0034BE             9652   ;   Inputs: IY is parameters pointer
0034BE             9653   ;  Outputs: IY updated
0034BE             9654   ;           A' incremented for each RETURN
0034BE             9655   ; Destroys: A',A,B,C,D,E,H,L,IX,IY,F,SP
0034BE             9656   ;
0034BE D1          9657   SAVLOC:         POP	DE		;RETURN ADDRESS
0034BF FD 23       9658   SAVLO1:         INC	IY		;BUMP PAST ( | ,
0034C1 CD 0B 45    9659                   CALL	NXT
0034C4 FE F8       9660                   CP	TRETURN
0034C6 20 08       9661                   JR	NZ,SAVLO6
0034C8 08          9662                   EX	AF,AF'
0034C9 3C          9663                   INC	A		;RETURN counter
0034CA 08          9664                   EX	AF,AF'
0034CB FD 23       9665                   INC	IY		;Bump past RETURN
0034CD CD 0B 45    9666                   CALL	NXT
0034D0 D5          9667   SAVLO6:         PUSH	DE
0034D1 D9          9668                   EXX
0034D2 C5          9669                   PUSH	BC
0034D3 D5          9670                   PUSH	DE
0034D4 E5          9671                   PUSH	HL
0034D5 D9          9672                   EXX
0034D6 CD D6 25    9673                   CALL	VAR_		;DUMMY VARIABLE
0034D9 D9          9674                   EXX
0034DA E1          9675                   POP	HL
0034DB D1          9676                   POP	DE
0034DC C1          9677                   POP	BC
0034DD D9          9678                   EXX
0034DE D1          9679                   POP	DE
0034DF CB 77       9680                   BIT	6,A		;ARRAY?
0034E1 20 12       9681                   JR	NZ,SAVLO3
0034E3 B7          9682                   OR	A		;TYPE
0034E4 FA FF 34    9683                   JP	M,SAVLO2	;STRING
0034E7 D9          9684                   EXX
0034E8 E5          9685                   PUSH	HL		;SAVE H'L'
0034E9 D9          9686                   EXX
0034EA 47          9687                   LD	B,A		;TYPE
0034EB CD 25 19    9688                   CALL	LOADN
0034EE D9          9689                   EXX
0034EF E3          9690                   EX	(SP),HL
0034F0 D9          9691                   EXX
0034F1 E5          9692                   PUSH	HL
0034F2 C5          9693                   PUSH	BC
0034F3 18 30       9694                   JR	SAVLO4
0034F5             9695   ;
0034F5 DD 4E 00    9696   SAVLO3:         LD	C,(IX+0)	;ARRAY POINTER
0034F8 DD 46 01    9697                   LD	B,(IX+1)
0034FB C5          9698                   PUSH	BC		;SAVE TO STACK
0034FC F5          9699                   PUSH	AF		;SAVE TYPE
0034FD 18 26       9700                   JR	SAVLO4
0034FF             9701   ;
0034FF F5          9702   SAVLO2:         PUSH	AF		;STRING TYPE
003500 D5          9703                   PUSH	DE
003501 D9          9704                   EXX
003502 E5          9705                   PUSH	HL
003503 D9          9706                   EXX
003504 CD 0E 1A    9707                   CALL	LOADS
003507 D9          9708                   EXX
003508 E1          9709                   POP	HL
003509 D9          9710                   EXX
00350A 4B          9711                   LD	C,E
00350B D1          9712                   POP	DE
00350C CD 86 32    9713                   CALL	CHECK
00350F F1          9714                   POP	AF		;LEVEL STACK
003510 21 00 00    9715                   LD	HL,0
003513 45          9716                   LD	B,L
003514 ED 42       9717                   SBC	HL,BC
003516 39          9718                   ADD	HL,SP
003517 F9          9719                   LD	SP,HL
003518 47          9720                   LD	B,A		;TYPE
003519 C5          9721                   PUSH	BC
00351A 28 09       9722                   JR	Z,SAVLO4
00351C D5          9723                   PUSH	DE
00351D 11 00 52    9724                   LD	DE,ACCS
003520 EB          9725                   EX	DE,HL
003521 45          9726                   LD	B,L
003522 ED B0       9727                   LDIR			;SAVE STRING ON STACK
003524 D1          9728                   POP	DE
003525 DD E5       9729   SAVLO4:         PUSH	IX		;VARPTR
003527 CD 2A 35    9730                   CALL	SAVLO5
00352A             9731   LOCCHK:         EQU	$
00352A CD 86 32    9732   SAVLO5:         CALL	CHECK
00352D CD 0B 45    9733                   CALL	NXT
003530 FE 2C       9734                   CP	','		;MORE?
003532 28 8B       9735                   JR	Z,SAVLO1
003534 EB          9736                   EX	DE,HL
003535 E9          9737                   JP	(HL)		;"RETURN"
003536             9738   ;
003536 CD 0B 45    9739   TERMQ:          CALL	NXT
003539 FE 8B       9740                   CP	TELSE
00353B D0          9741                   RET	NC
00353C FE 3A       9742                   CP	':'		;ASSEMBLER SEPARATOR
00353E D0          9743                   RET	NC
00353F FE 0D       9744                   CP	CR
003541 C9          9745                   RET
003542             9746   ;
003542 CD 36 35    9747   SPAN:           CALL	TERMQ
003545 C8          9748                   RET	Z
003546 FD 23       9749                   INC	IY
003548 FE 22       9750                   CP	'"'
00354A CC 99 36    9751                   CALL	Z,QUOTE
00354D 18 F3       9752                   JR	SPAN
00354F             9753   ;
00354F CD 0B 45    9754   EQUALS:         CALL	NXT
003552 FD 23       9755                   INC	IY
003554 FE 3D       9756                   CP	'='
003556 C8          9757                   RET	Z
003557 3E 04       9758                   LD	A,4
003559 C3 44 3F    9759                   JP	ERROR_		;"Mistake"
00355C             9760   ;
00355C FE 8A       9761   FORMAT:         CP	TTAB
00355E 28 0C       9762                   JR	Z,DOTAB
003560 FE 89       9763                   CP	TSPC
003562 28 38       9764                   JR	Z,DOSPC
003564             9765                   ; CP	'''
003564 FE 27       9766                   CP	39	; apostrophe
003566 C0          9767                   RET	NZ
003567 CD FB 40    9768                   CALL	CRLF
00356A AF          9769                   XOR	A
00356B C9          9770                   RET
00356C             9771   ;
00356C C5          9772   DOTAB:          PUSH	BC
00356D CD 33 18    9773                   CALL	EXPRI
003570 D9          9774                   EXX
003571 C1          9775                   POP	BC
003572 FD 7E 00    9776                   LD	A,(IY)
003575 FE 2C       9777                   CP	','
003577 28 11       9778                   JR	Z,DOTAB1
003579 CD AE 20    9779                   CALL	BRAKET
00357C 7D          9780                   LD	A,L
00357D 21 FB 54    9781   TABIT:          LD	HL,COUNT
003580 BE          9782                   CP	(HL)
003581 C8          9783                   RET	Z
003582 F5          9784                   PUSH	AF
003583 DC FB 40    9785                   CALL	C,CRLF
003586 F1          9786                   POP	AF
003587 96          9787                   SUB	(HL)
003588 18 19       9788                   JR	SPACES
00358A FD 23       9789   DOTAB1:         INC	IY
00358C C5          9790                   PUSH	BC
00358D E5          9791                   PUSH	HL
00358E CD 33 18    9792                   CALL	EXPRI
003591 D9          9793                   EXX
003592 D1          9794                   POP	DE
003593 C1          9795                   POP	BC
003594 CD AE 20    9796                   CALL	BRAKET
003597 CD 9C 0D    9797                   CALL	PUTCSR
00359A AF          9798                   XOR	A
00359B C9          9799                   RET
00359C             9800   ;
00359C C5          9801   DOSPC:          PUSH	BC
00359D CD 60 18    9802                   CALL	ITEMI
0035A0 D9          9803                   EXX
0035A1 7D          9804                   LD	A,L
0035A2 C1          9805                   POP	BC
0035A3 B7          9806   SPACES:         OR	A
0035A4 C8          9807                   RET	Z
0035A5 C5          9808                   PUSH	BC
0035A6 47          9809                   LD	B,A
0035A7 3E 20       9810   FILL1:          LD	A,' '
0035A9 CD 02 41    9811                   CALL	OUTCHR
0035AC 10 F9       9812                   DJNZ	FILL1
0035AE C1          9813                   POP	BC
0035AF AF          9814                   XOR	A
0035B0 C9          9815                   RET
0035B1             9816   ;
0035B1 21 00 52    9817   PTEXT:          LD	HL,ACCS
0035B4 1C          9818                   INC	E
0035B5 1D          9819   PTEXT1:         DEC	E
0035B6 C8          9820                   RET	Z
0035B7 7E          9821                   LD	A,(HL)
0035B8 23          9822                   INC	HL
0035B9 CD 02 41    9823                   CALL	OUTCHR
0035BC 18 F7       9824                   JR	PTEXT1
0035BE             9825   ;
0035BE F5          9826   FETCHS:         PUSH	AF
0035BF C5          9827                   PUSH	BC
0035C0 E5          9828                   PUSH	HL
0035C1 FD E3       9829                   EX	(SP),IY
0035C3 CD DB 35    9830                   CALL	XTRACT
0035C6 CD 0B 45    9831                   CALL	NXT
0035C9 FD E3       9832                   EX	(SP),IY
0035CB E1          9833                   POP	HL
0035CC C1          9834                   POP	BC
0035CD F1          9835                   POP	AF
0035CE C9          9836                   RET
0035CF             9837   ;
0035CF 11 00 52    9838   LINES:          LD	DE,ACCS
0035D2 7E          9839   LINE1S:         LD	A,(HL)
0035D3 12          9840                   LD	(DE),A
0035D4 FE 0D       9841                   CP	CR
0035D6 C8          9842                   RET	Z
0035D7 23          9843                   INC	HL
0035D8 1C          9844                   INC	E
0035D9 18 F7       9845                   JR	LINE1S
0035DB             9846   ;
0035DB CD 0B 45    9847   XTRACT:         CALL	NXT
0035DE FE 22       9848                   CP	'"'
0035E0 FD 23       9849                   INC	IY
0035E2 CA 7A 19    9850                   JP	Z,CONS
0035E5 FD 2B       9851                   DEC	IY
0035E7 11 00 52    9852                   LD	DE,ACCS
0035EA FD 7E 00    9853   XTRAC1:         LD	A,(IY)
0035ED 12          9854                   LD	(DE),A
0035EE FE 2C       9855                   CP	','
0035F0 C8          9856                   RET	Z
0035F1 FE 0D       9857                   CP	CR
0035F3 C8          9858                   RET	Z
0035F4 FD 23       9859                   INC	IY
0035F6 1C          9860                   INC	E
0035F7 18 F1       9861                   JR	XTRAC1
0035F9             9862   ;
0035F9 3E DC       9863   DSRCH:          LD	A,TDATA
0035FB 06 00       9864   SEARCHex:         LD	B,0
0035FD 4E          9865   SRCH1:          LD	C,(HL)
0035FE 0C          9866                   INC	C
0035FF 0D          9867                   DEC	C
003600 28 0C       9868                   JR	Z,SRCH2		;FAIL
003602 23          9869                   INC	HL
003603 23          9870                   INC	HL
003604 23          9871                   INC	HL
003605 BE          9872                   CP	(HL)
003606 C8          9873                   RET	Z
003607 0D          9874                   DEC	C
003608 0D          9875                   DEC	C
003609 0D          9876                   DEC	C
00360A 09          9877                   ADD	HL,BC
00360B C3 FD 35    9878                   JP	SRCH1
00360E 2B          9879   SRCH2:          DEC	HL		;POINT TO CR
00360F 37          9880                   SCF
003610 C9          9881                   RET
003611             9882   ;
003611             9883   ; NSCAN - scan for token at start of line, with nesting of inner structures
003611             9884   ; Alternative entry at NSCAN1 with L = level (used by CASE)
003611             9885   ;
003611             9886   ;   Inputs: B = token to find (1, start of line)
003611             9887   ;           C = token to find (2, start of line)
003611             9888   ;           E = token to nest (end of line)
003611             9889   ;           D = token to unnest (start of line)
003611             9890   ;           IY = start search area (line length byte)
003611             9891   ;  Outputs: NZ if not found
003611             9892   ;           Z if found, IY points to byte after token
003611             9893   ; Destroys: A,B,C,L,IY,F
003611             9894   ;
003611 2E 00       9895   NSCAN:          LD	L,0		;nest level
003613 FD 7E 00    9896   NSCAN1:         LD	A,(IY)		;get line length
003616 B7          9897                   OR	A		;test zero = end of prog
003617 28 34       9898                   JR	Z,NSCAN6
003619 FD 7E 03    9899                   LD	A,(IY+3)	;initial token
00361C B8          9900                   CP	B		;test value reqd
00361D 28 1D       9901                   JR	Z,NSCAN3	;found (1)
00361F B9          9902                   CP	C
003620 28 1A       9903                   JR	Z,NSCAN3	;found (2)
003622 BA          9904   NSCAN7:         CP	D		;unnest?
003623 28 22       9905                   JR	Z,NSCAN5
003625 C5          9906   NSCAN2:         PUSH	BC
003626 06 00       9907                   LD	B,0
003628 FD 4E 00    9908                   LD	C,(IY)
00362B FD 09       9909                   ADD	IY,BC		;go to next line
00362D FD 7E FE    9910                   LD	A,(IY-2)
003630 BB          9911                   CP	E		;nest?
003631 79          9912                   LD	A,C
003632 C1          9913                   POP	BC
003633 20 DE       9914                   JR	NZ,NSCAN1	;continue
003635 FE 05       9915                   CP	5		;empty line ?
003637 38 DA       9916                   JR	C,NSCAN1	;continue
003639 2C          9917                   INC	L		;increment nest level
00363A 18 D7       9918                   JR	NSCAN1		;continue
00363C             9919   ;
00363C 2C          9920   NSCAN3:         INC	L
00363D 2D          9921                   DEC	L
00363E 20 E2       9922                   JR	NZ,NSCAN7
003640 01 04 00    9923   NSCAN4:         LD	BC,4
003643 FD 09       9924                   ADD	IY,BC
003645 AF          9925                   XOR	A		;Z
003646 C9          9926                   RET
003647             9927   ;
003647 2D          9928   NSCAN5:         DEC	L		;decrement nest level
003648 F2 25 36    9929                   JP	P,NSCAN2
00364B 18 F3       9930                   JR	NSCAN4
00364D             9931   ;
00364D F6 01       9932   NSCAN6:         OR	1		;NZ
00364F C9          9933                   RET
003650             9934   ;
003650             9935   ; WSRCH - search for token, with nesting of inner structures
003650             9936   ;
003650             9937   ;   Inputs: B = token to find or unnest (anywhere)
003650             9938   ;           C = token to nest (anywhere), ignore after EXITex
003650             9939   ;           D = ordinal (1 = find first token, 2 = second)
003650             9940   ;           IY = address to start looking
003650             9941   ;  Outputs: IY points to byte after that found
003650             9942   ;           if not found abort to END
003650             9943   ; Destroys: A,D,IY,F
003650             9944   ;
003650 FD 7E 00    9945   WSRCH:          LD	A,(IY)
003653 FD 23       9946                   INC	IY
003655 FE 22       9947                   CP	'"'
003657 CC 99 36    9948                   CALL	Z,QUOTE
00365A FE F4       9949                   CP	TREM
00365C 28 22       9950                   JR	Z,WSRCHM
00365E FE 10       9951                   CP	TEXIT
003660 28 30       9952                   JR	Z,WSRCHE
003662 B8          9953                   CP	B
003663 28 29       9954                   JR	Z,WSRCHX
003665 B9          9955                   CP	C
003666 28 23       9956                   JR	Z,WSRCHP
003668 FE 0D       9957                   CP	CR
00366A 20 E4       9958                   JR	NZ,WSRCH
00366C FD 7E 00    9959   WSRCH1:         LD	A,(IY)			;Line length
00366F FD 23       9960                   INC	IY
003671 B7          9961                   OR	A
003672 CA D3 24    9962                   JP	Z,END
003675 FD 23       9963                   INC	IY
003677 FD 23       9964                   INC	IY			;Skip line number
003679 FD 7E 00    9965                   LD	A,(IY)
00367C FE DC       9966                   CP	TDATA
00367E 20 D0       9967                   JR	NZ,WSRCH
003680 FD 7E 00    9968   WSRCHM:         LD	A,(IY)
003683 FD 23       9969                   INC	IY
003685 FE 0D       9970                   CP	CR
003687 20 F7       9971                   JR	NZ,WSRCHM		;Skip to end of line
003689 18 E1       9972                   JR	WSRCH1
00368B             9973   ;
00368B 14          9974   WSRCHP:         INC	D
00368C 18 C2       9975                   JR	WSRCH
00368E             9976   ;
00368E 15          9977   WSRCHX:         DEC	D
00368F 20 BF       9978                   JR	NZ,WSRCH
003691 C9          9979                   RET
003692             9980   ;
003692 CD 0B 45    9981   WSRCHE:         CALL	NXT
003695 FD 23       9982                   INC	IY
003697 18 B7       9983                   JR	WSRCH
003699             9984   ;
003699             9985   ; QUOTE - skip quoted string
003699             9986   ;
003699 FD 7E 00    9987   QUOTE:          LD	A,(IY)
00369C FD 23       9988                   INC	IY
00369E FE 0D       9989                   CP	CR
0036A0 CA A8 36    9990                   JP	Z,MISQUO
0036A3 FE 22       9991                   CP	'"'
0036A5 20 F2       9992                   JR	NZ,QUOTE
0036A7 C9          9993                   RET
0036A8             9994   ;
0036A8 3E 09       9995   MISQUO:         LD	A,9
0036AA C3 44 3F    9996                   JP	ERROR_		;"Missing quote"
0036AD             9997   ;
0036AD             9998   ; X14OR5 - multiply by 1, 4 or 5
0036AD             9999   ;   Inputs: DE = number to be multiplied
0036AD             10000   ;           A = 1, 4 or 5 (else multiply by 4)
0036AD             10001   ;  Outputs: DE = DE * A
0036AD             10002   ;           Carry set if overflow
0036AD             10003   ; Destroys: D,E,H,L,F
0036AD             10004   ;
0036AD 62          10005   X14OR5:         LD	H,D
0036AE 6B          10006                   LD	L,E
0036AF FE 01       10007                   CP	1
0036B1 C8          10008                   RET	Z
0036B2 FE 05       10009                   CP	5
0036B4 29          10010                   ADD	HL,HL
0036B5 D8          10011                   RET	C
0036B6 29          10012                   ADD	HL,HL
0036B7 D8          10013                   RET	C
0036B8 EB          10014                   EX	DE,HL
0036B9 C0          10015                   RET	NZ
0036BA 19          10016                   ADD	HL,DE
0036BB EB          10017                   EX	DE,HL
0036BC C9          10018                   RET
0036BD             10019   ;
0036BD             10020   ; MUL16 - 16-bit multiply
0036BD             10021   ;   Inputs: HL = number to be multiplied
0036BD             10022   ;           BC = multiplier
0036BD             10023   ;  Outputs: HL = HL * BC
0036BD             10024   ;           Carry set if overflow
0036BD             10025   ; Destroys: A,D,E,H,L,F
0036BD             10026   ;
0036BD EB          10027   MUL16:          EX	DE,HL
0036BE 21 00 00    10028                   LD	HL,0
0036C1 3E 10       10029                   LD	A,16
0036C3 29          10030   MUL161:         ADD	HL,HL
0036C4 D8          10031                   RET	C		;OVERFLOW
0036C5 CB 23       10032                   SLA	E
0036C7 CB 12       10033                   RL	D
0036C9 30 02       10034                   JR	NC,MUL162
0036CB 09          10035                   ADD	HL,BC
0036CC D8          10036                   RET	C
0036CD 3D          10037   MUL162:         DEC	A
0036CE 20 F3       10038                   JR	NZ,MUL161
0036D0 C9          10039                   RET
0036D1             10040   ;
0036D1 CD 0B 45    10041   CHANEL:         CALL	NXT
0036D4 FE 23       10042                   CP	'#'
0036D6 3E 2D       10043                   LD	A,45
0036D8 C2 44 3F    10044                   JP	NZ,ERROR_	;"Missing #"
0036DB FD 23       10045   CHNL:           INC	IY		;SKIP '#'
0036DD CD 60 18    10046                   CALL	ITEMI
0036E0 D9          10047                   EXX
0036E1 EB          10048                   EX	DE,HL
0036E2 C9          10049                   RET
0036E3             10050   ;
0036E3             10051   ; FREESA - Free members of a string array if adjacent to the top of heap
0036E3             10052   ;   Inputs: BC = length of array (= 4 * number of elements)
0036E3             10053   ;           HL addresses array first byte *above* array
0036E3             10054   ;  Outputs: NZ if any array element freed, Z if none
0036E3             10055   ; Destroys: nothing
0036E3             10056   ;
0036E3 F5          10057   FREESA:         PUSH	AF
0036E4 C5          10058   FREES0:         PUSH	BC
0036E5 D5          10059                   PUSH	DE
0036E6 E5          10060                   PUSH	HL
0036E7 AF          10061                   XOR	A
0036E8 50          10062                   LD	D,B
0036E9 59          10063                   LD	E,C
0036EA 47          10064                   LD	B,A
0036EB D5          10065   FREES1:         PUSH	DE
0036EC 2B          10066                   DEC	HL
0036ED 56          10067                   LD	D,(HL)
0036EE 2B          10068                   DEC	HL
0036EF 5E          10069                   LD	E,(HL)
0036F0 2B          10070                   DEC	HL
0036F1 4E          10071                   LD	C,(HL)
0036F2 2B          10072                   DEC	HL
0036F3 E5          10073                   PUSH	HL
0036F4 2A E0 54    10074                   LD	HL,(FREE)
0036F7 EB          10075                   EX	DE,HL
0036F8 09          10076                   ADD	HL,BC
0036F9 ED 52       10077                   SBC	HL,DE
0036FB 20 07       10078                   JR	NZ,FREES2
0036FD 19          10079                   ADD	HL,DE
0036FE ED 42       10080                   SBC	HL,BC
003700 22 E0 54    10081                   LD	(FREE),HL
003703 B4          10082                   OR	H
003704 D1          10083   FREES2:         POP	DE
003705 E1          10084                   POP	HL
003706 0E 04       10085                   LD	C,4
003708 B7          10086                   OR	A
003709 ED 42       10087                   SBC	HL,BC
00370B EB          10088                   EX	DE,HL
00370C 20 DD       10089                   JR	NZ,FREES1
00370E B7          10090                   OR	A
00370F E1          10091                   POP	HL
003710 D1          10092                   POP	DE
003711 C1          10093                   POP	BC
003712 B7          10094                   OR	A
003713 20 CF       10095                   JR	NZ,FREES0
003715 F1          10096                   POP	AF
003716 C9          10097                   RET
003717             10098   ;
003717             10099   ;                END
003717             10100   ; --- End exec.asm ---
003717             10101   
003717             10102   ; --- Begin main.asm ---
003717             10103   ;
003717             10104   ;Automatically created from original source on 2024-12-15 15:29:12
003717             10105   ;
003717             10106                   .ASSUME ADL = 0
003717             10107   ;	.ORG 0x0000
003717             10108   ;                SEGMENT CODE
003717             10109   ;
003717             10110   ;                XDEF	NEWIT
003717             10111   ;                XDEF	BAD
003717             10112   ;                XDEF	CLEAN
003717             10113   ;                XDEF	LINNUM
003717             10114   ;                XDEF	ERROR_
003717             10115   ;                XDEF	GETTOP
003717             10116   ;                XDEF	DEL
003717             10117   ;                XDEF	LISTIT
003717             10118   ;
003717             10119   ;BBC BASIC INTERPRETER - Z80 VERSION
003717             10120   ;COMMANDS AND COMMON MODULE - "MAIN"
003717             10121   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
003717             10122   ;
003717             10123   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
003717             10124   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
003717             10125   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
003717             10126   ;
003717             10127   ;VERSION 2.3, 07-05-1984
003717             10128   ;VERSION 3.0, 01-03-1987
003717             10129   ;VERSION 5.0, 31-05-2024
003717             10130   ;VERSION 5.1, 10-08-2024
003717             10131   ;
003717             10132   ;                XREF	XEQ
003717             10133   ;                XREF	RUN0
003717             10134   ;                XREF	CHAIN0
003717             10135   ;                XREF	TERMQ
003717             10136   ;                XREF	MUL16
003717             10137   ;                XREF	X14OR5
003717             10138   ;                XREF	SPACES
003717             10139   ;                XREF	ESCAPE
003717             10140   ;                XREF	CHECK
003717             10141   ;                XREF	SEARCH
003717             10142   ;
003717             10143   ;                XREF	OSWRCH
003717             10144   ;                XREF	OSLINE
003717             10145   ;                XREF	OSINIT
003717             10146   ;                XREF	OSLOAD
003717             10147   ;                XREF	OSSAVE
003717             10148   ;                XREF	OSBGET
003717             10149   ;                XREF	OSBPUT
003717             10150   ;                XREF	OSSHUT
003717             10151   ;                XREF	OSSTAT
003717             10152   ;                XREF	PROMPT
003717             10153   ;                XREF	LTRAP
003717             10154   ;                XREF	OSCLI
003717             10155   ;                XREF	RESET
003717             10156   ;
003717             10157   ;                XREF	COMMA
003717             10158   ;                XREF	BRAKET
003717             10159   ;                XREF	ZERO
003717             10160   ;                XREF	ITEMI
003717             10161   ;                XREF	EXPRI
003717             10162   ;                XREF	EXPRS
003717             10163   ;                XREF	DECODE
003717             10164   ;                XREF	LOADN
003717             10165   ;                XREF	SFIX
003717             10166   ;
003717             10167   ;                XDEF	NXT
003717             10168   ;                XDEF	NLIST
003717             10169   ;                XDEF	START
003717             10170   ;                XDEF	OUTCHR
003717             10171   ;                XDEF	OUT
003717             10172   ;                XDEF	ERROR_
003717             10173   ;                XDEF	EXTERR
003717             10174   ;                XDEF	REPORT
003717             10175   ;                XDEF	CLOOP
003717             10176   ;                XDEF	WARM
003717             10177   ;                XDEF	CLEAR
003717             10178   ;                XDEF	CRLF
003717             10179   ;                XDEF	SAYLN
003717             10180   ;                XDEF	LOAD0
003717             10181   ;                XDEF	TELL
003717             10182   ;                XDEF	FINDL
003717             10183   ;                XDEF	GETTOP
003717             10184   ;                XDEF	SETLIN
003717             10185   ;                XDEF	GETVAR
003717             10186   ;                XDEF	PUTVAR
003717             10187   ;                XDEF	GETDEF
003717             10188   ;                XDEF	LOCATE
003717             10189   ;                XDEF	CREATE
003717             10190   ;                XDEF	PBCDL
003717             10191   ;                XDEF	LEXAN2
003717             10192   ;                XDEF	RANGE
003717             10193   ;                XDEF	VERMSG
003717             10194   ;                XDEF	KEYWDS
003717             10195   ;                XDEF	KEYWDL
003717             10196   ;
003717             10197   ;                XREF	PAGE_
003717             10198   ;                XREF	ACCS
003717             10199   ;                XREF	BUFFER
003717             10200   ;                XREF	LOMEM
003717             10201   ;                XREF	HIMEM
003717             10202   ;                XREF	COUNT
003717             10203   ;                XREF	WIDTH
003717             10204   ;                XREF	FREE
003717             10205   ;                XREF	STAVAR
003717             10206   ;                XREF	DYNVAR
003717             10207   ;                XREF	ERRTXT
003717             10208   ;                XREF	ERR
003717             10209   ;                XREF	ERL
003717             10210   ;                XREF	CURLIN
003717             10211   ;                XREF	ERRTRP
003717             10212   ;                XREF	ONERSP
003717             10213   ;                XREF	FNPTR
003717             10214   ;                XREF	PROPTR
003717             10215   ;                XREF	AUTONO
003717             10216   ;                XREF	INCREM
003717             10217   ;                XREF	LISTON
003717             10218   ;                XREF	TRACEN
003717             10219   ;
003717             10220   ; CR             EQU	0DH
003717             10221   ; LF             EQU	0AH
003717             10222   ; ESC            EQU	1BH
003717             10223   ;
003717             10224   TERROR:         EQU	85H
003717             10225   TLINE:          EQU	86H
003717             10226   TELSE:          EQU	8BH
003717             10227   TTHEN:          EQU	8CH
003717             10228   TLINO:          EQU	8DH
003717             10229   TFN:            EQU	0A4H
003717             10230   TTO:            EQU	0B8H
003717             10231   TWHILE:         EQU	0C7H
003717             10232   TCASE:          EQU	0C8H
003717             10233   TWHEN:          EQU	0C9H
003717             10234   TOF:            EQU	0CAH
003717             10235   TENDCASE:       EQU	0CBH
003717             10236   TOTHERWISE:     EQU	0CCH
003717             10237   TENDIF:         EQU	0CDH
003717             10238   TENDWHILE:      EQU	0CEH
003717             10239   TDATA:          EQU	0DCH
003717             10240   TDIM:           EQU	0DEH
003717             10241   TFOR:           EQU	0E3H
003717             10242   TGOSUB:         EQU	0E4H
003717             10243   TGOTO:          EQU	0E5H
003717             10244   TIF:            EQU	0E7H
003717             10245   TLOCAL:         EQU	0EAH
003717             10246   TNEXT:          EQU	0EDH
003717             10247   TON:            EQU	0EEH
003717             10248   TPROC:          EQU	0F2H
003717             10249   TREM:           EQU	0F4H
003717             10250   TREPEAT:        EQU	0F5H
003717             10251   TRESTORE:       EQU	0F7H
003717             10252   TTRACE:         EQU	0FCH
003717             10253   TUNTIL:         EQU	0FDH
003717             10254   TEXIT:          EQU	10H
003717             10255   ;
003717             10256   TOKLO:          EQU	8FH
003717             10257   TOKHI:          EQU	93H
003717             10258   OFFSET:         EQU	0CFH-TOKLO
003717             10259   ;
003717 C3 41 37    10260   START:          JP	COLD
00371A C3 AF 37    10261                   JP	WARM
00371D C3 E3 25    10262                   JP	ESCAPE
003720 C3 55 3F    10263                   JP	EXTERR
003723 C3 FA 44    10264                   JP	TELL
003726 C3 E8 44    10265                   JP	TEXT_
003729 C3 60 18    10266                   JP	ITEMI
00372C C3 33 18    10267                   JP	EXPRI
00372F C3 3C 18    10268                   JP	EXPRS
003732 C3 B3 09    10269                   JP	OSCLI
003735 C3 5B 06    10270                   JP	OSBGET
003738 C3 63 06    10271                   JP	OSBPUT
00373B C3 6C 06    10272                   JP	OSSTAT
00373E C3 53 06    10273                   JP	OSSHUT
003741 21 00 54    10274   COLD:           LD	HL,STAVAR	;COLD START
003744 F9          10275                   LD	SP,HL
003745 36 0A       10276                   LD	(HL),10
003747 2C          10277                   INC	L
003748 36 09       10278                   LD	(HL),9
00374A 2C          10279                   INC	L
00374B AF          10280                   XOR	A
00374C 77          10281   PURGE:          LD	(HL),A		;CLEAR SCRATCHPAD
00374D 2C          10282                   INC	L
00374E 20 FC       10283                   JR	NZ,PURGE
003750 3E 37       10284                   LD	A,37H		;V3.0
003752 32 FE 54    10285                   LD	(LISTON),A
003755 21 8E 37    10286                   LD	HL,NOTICE
003758 22 EE 54    10287                   LD	(ERRTXT),HL
00375B CD A0 05    10288                   CALL	OSINIT
00375E ED 53 E2 54 10289                   LD	(HIMEM),DE
003762 22 DC 54    10290                   LD	(PAGE_),HL
003765 CD 3E 40    10291                   CALL	NEWIT
003768 C2 52 24    10292                   JP	NZ,CHAIN0	;AUTO-RUN
00376B CD FA 44    10293                   CALL	TELL
00376E 42 42 43 20 10294   VERMSG:         DB	"BBC BASIC (Z80) Version 5.00  "
       42 41 53 49 
       43 20 28 5A 
       38 30 29 20 
       56 65 72 73 
       69 6F 6E 20 
       35 2E 30 30 
       20 20       
00378C 0D          10295                   DB	CR
00378D 0A          10296                   DB	LF
00378E 28 43 29 20 10297   NOTICE:         DB	"(C) Copyright R.T.Russell 2024"
       43 6F 70 79 
       72 69 67 68 
       74 20 52 2E 
       54 2E 52 75 
       73 73 65 6C 
       6C 20 32 30 
       32 34       
0037AC 0D          10298                   DB	CR
0037AD 0A          10299                   DB	LF
0037AE 00          10300                   DB	0
0037AF F6          10301   WARM:           DB	0F6H
0037B0 37          10302   CLOOP:          SCF
0037B1 ED 7B E2 54 10303                   LD	SP,(HIMEM)
0037B5 CD AF 05    10304                   CALL	PROMPT		;PROMPT USER
0037B8 21 FE 54    10305                   LD	HL,LISTON
0037BB 7E          10306                   LD	A,(HL)
0037BC E6 0F       10307                   AND	0FH		;LISTO
0037BE F6 30       10308                   OR	30H		;OPT 3
0037C0 77          10309                   LD	(HL),A
0037C1 ED 62       10310                   SBC	HL,HL		;HL <- 0 (V3.0)
0037C3 22 EA 54    10311                   LD	(ERRTRP),HL
0037C6 22 EC 54    10312                   LD	(ONERSP),HL
0037C9 22 F4 54    10313                   LD	(CURLIN),HL	;For CMOS EDIT->LIST
0037CC 2A E8 54    10314                   LD	HL,(AUTONO)
0037CF E5          10315                   PUSH	HL
0037D0 7C          10316                   LD	A,H
0037D1 B5          10317                   OR	L
0037D2 28 17       10318                   JR	Z,NOAUTO
0037D4 E5          10319                   PUSH	HL
0037D5 CD 96 41    10320                   CALL	PBCD		;AUTO NUMBER
0037D8 E1          10321                   POP	HL
0037D9 ED 4B FF 54 10322                   LD	BC,(INCREM)
0037DD 06 00       10323                   LD	B,0
0037DF 09          10324                   ADD	HL,BC
0037E0 DA AF 43    10325                   JP	C,TOOBIGmn
0037E3 22 E8 54    10326                   LD	(AUTONO),HL
0037E6 3E 20       10327                   LD	A,' '
0037E8 CD 02 41    10328                   CALL	OUTCHR
0037EB 21 00 52    10329   NOAUTO:         LD	HL,ACCS
0037EE CD E7 05    10330                   CALL	OSLINE		;GET CONSOLE INPUT
0037F1 AF          10331                   XOR	A
0037F2 32 FB 54    10332                   LD	(COUNT),A
0037F5 FD 21 00 52 10333                   LD	IY,ACCS
0037F9 21 E1 3B    10334                   LD	HL,COMNDS
0037FC CD A6 3F    10335                   CALL	LEX0
0037FF E1          10336                   POP	HL
003800 20 19       10337                   JR	NZ,NOTCMD
003802 87          10338                   ADD	A,A
003803 4F          10339                   LD	C,A
003804 7C          10340                   LD	A,H
003805 B5          10341                   OR	L
003806 20 0F       10342                   JR	NZ,INAUTO
003808 47          10343                   LD	B,A
003809 21 11 3C    10344                   LD	HL,CMDTABmn
00380C 09          10345                   ADD	HL,BC
00380D 7E          10346                   LD	A,(HL)		;TABLE ENTRY
00380E 23          10347                   INC	HL
00380F 66          10348                   LD	H,(HL)
003810 6F          10349                   LD	L,A
003811 FD 23       10350                   INC	IY
003813 CD 0B 45    10351                   CALL	NXT
003816 E9          10352                   JP	(HL)		;EXECUTE COMMAND
003817             10353   ;
003817 FD 21 00 52 10354   INAUTO:         LD	IY,ACCS
00381B 7C          10355   NOTCMD:         LD	A,H
00381C B5          10356                   OR	L
00381D CC 8A 43    10357                   CALL	Z,LINNUM
003820 CD 0B 45    10358                   CALL	NXT
003823 11 00 53    10359                   LD	DE,BUFFER
003826 0E 01       10360                   LD	C,1		;LEFT MODE
003828 E5          10361                   PUSH	HL
003829 CD 18 44    10362                   CALL	LEXAN2		;LEXICAL ANALYSIS
00382C E1          10363                   POP	HL
00382D 12          10364                   LD	(DE),A		;TERMINATOR
00382E AF          10365                   XOR	A
00382F 47          10366                   LD	B,A
003830 4B          10367                   LD	C,E		;BC=LINE LENGTH
003831 13          10368                   INC	DE
003832 12          10369                   LD	(DE),A		;ZERO NEXT
003833 7C          10370                   LD	A,H
003834 B5          10371                   OR	L
003835 FD 21 00 53 10372                   LD	IY,BUFFER	;FOR XEQ
003839 CA 99 24    10373                   JP	Z,XEQ		;DIRECT MODE
00383C C5          10374                   PUSH	BC
00383D CD 43 41    10375                   CALL	FINDL
003840 CC E9 3F    10376                   CALL	Z,DEL
003843 C1          10377                   POP	BC
003844 79          10378                   LD	A,C
003845 B7          10379                   OR	A
003846 28 39       10380                   JR	Z,CLOOP2	;DELETE LINE ONLY
003848 C6 04       10381                   ADD	A,4
00384A 4F          10382                   LD	C,A		;LENGTH INCLUSIVE
00384B D5          10383                   PUSH	DE		;LINE NUMBER
00384C C5          10384                   PUSH	BC		;SAVE LINE LENGTH
00384D EB          10385                   EX	DE,HL
00384E C5          10386                   PUSH	BC
00384F CD 25 40    10387                   CALL	GETTOP
003852 C1          10388                   POP	BC
003853 E5          10389                   PUSH	HL
003854 09          10390                   ADD	HL,BC
003855 E5          10391                   PUSH	HL
003856 24          10392                   INC	H
003857 AF          10393                   XOR	A
003858 ED 72       10394                   SBC	HL,SP
00385A E1          10395                   POP	HL
00385B D2 44 3F    10396                   JP	NC,ERROR_	;"No room"
00385E E3          10397                   EX	(SP),HL
00385F E5          10398                   PUSH	HL
003860 23          10399                   INC	HL
003861 B7          10400                   OR	A
003862 ED 52       10401                   SBC	HL,DE
003864 44          10402                   LD	B,H		;BC=AMOUNT TO MOVE
003865 4D          10403                   LD	C,L
003866 E1          10404                   POP	HL
003867 D1          10405                   POP	DE
003868 28 02       10406                   JR	Z,ATEND
00386A ED B8       10407                   LDDR			;MAKE SPACE
00386C C1          10408   ATEND:          POP	BC		;LINE LENGTH
00386D D1          10409                   POP	DE		;LINE NUMBER
00386E 23          10410                   INC	HL
00386F 71          10411                   LD	(HL),C		;STORE LENGTH
003870 23          10412                   INC	HL
003871 73          10413                   LD	(HL),E		;STORE LINE NUMBER
003872 23          10414                   INC	HL
003873 72          10415                   LD	(HL),D
003874 23          10416                   INC	HL
003875 11 00 53    10417                   LD	DE,BUFFER
003878 EB          10418                   EX	DE,HL
003879 0D          10419                   DEC	C
00387A 0D          10420                   DEC	C
00387B 0D          10421                   DEC	C
00387C ED B0       10422                   LDIR			;ADD LINE
00387E CD 1A 40    10423                   CALL	CLEAN
003881 C3 B0 37    10424   CLOOP2:         JP	CLOOP
003884             10425   ;
003884             10426   ;LIST OF TOKENS AND KEYWORDS.
003884             10427   ;IF A KEYWORD IS FOLLOWED BY NUL THEN IT WILL
003884             10428   ; ONLY MATCH WITH THE WORD FOLLOWED IMMEDIATELY
003884             10429   ; BY A DELIMITER.
003884             10430   ;
003884 80          10431   KEYWDS:         DB	80H
003885 41 4E 44    10432                   DB	"AND"
003888 94          10433                   DB	94H
003889 41 42 53    10434                   DB	"ABS"
00388C 95          10435                   DB	95H
00388D 41 43 53    10436                   DB	"ACS"
003890 96          10437                   DB	96H
003891 41 44 56 41 10438                   DB	"ADVAL"
       4C          
003896 97          10439                   DB	97H
003897 41 53 43    10440                   DB	"ASC"
00389A 98          10441                   DB	98H
00389B 41 53 4E    10442                   DB	"ASN"
00389E 99          10443                   DB	99H
00389F 41 54 4E    10444                   DB	"ATN"
0038A2 9A          10445                   DB	9AH
0038A3 42 47 45 54 10446                   DB	"BGET "
       20          
0038A8 D5          10447                   DB	0D5H
0038A9 42 50 55 54 10448                   DB	"BPUT "
       20          
0038AE 0F          10449                   DB	0FH
0038AF 42 59 20    10450                   DB	"BY "		; v5
0038B2 FB          10451                   DB	0FBH
0038B3 43 4F 4C 4F 10452                   DB	"COLOUR"
       55 52       
0038B9 FB          10453                   DB	0FBH
0038BA 43 4F 4C 4F 10454                   DB	"COLOR"
       52          
0038BF D6          10455                   DB	0D6H
0038C0 43 41 4C 4C 10456                   DB	"CALL"
0038C4 C8          10457                   DB	0C8H
0038C5 43 41 53 45 10458                   DB	"CASE"		; v5
0038C9 D7          10459                   DB	0D7H
0038CA 43 48 41 49 10460                   DB	"CHAIN"
       4E          
0038CF BD          10461                   DB	0BDH
0038D0 43 48 52 24 10462                   DB	"CHR$"
0038D4 D8          10463                   DB	0D8H
0038D5 43 4C 45 41 10464                   DB	"CLEAR "
       52 20       
0038DB D9          10465                   DB	0D9H
0038DC 43 4C 4F 53 10466                   DB	"CLOSE "
       45 20       
0038E2 DA          10467                   DB	0DAH
0038E3 43 4C 47 20 10468                   DB	"CLG "
0038E7 DB          10469                   DB	0DBH
0038E8 43 4C 53 20 10470                   DB	"CLS "
0038EC 9B          10471                   DB	9BH
0038ED 43 4F 53    10472                   DB	"COS"
0038F0 9C          10473                   DB	9CH
0038F1 43 4F 55 4E 10474                   DB	"COUNT "
       54 20       
0038F7 01          10475                   DB	01H
0038F8 43 49 52 43 10476                   DB	"CIRCLE"	; v5
       4C 45       
0038FE DC          10477                   DB	0DCH
0038FF 44 41 54 41 10478                   DB	"DATA"
003903 9D          10479                   DB	9DH
003904 44 45 47    10480                   DB	"DEG"
003907 DD          10481                   DB	0DDH
003908 44 45 46    10482                   DB	"DEF"
00390B 81          10483                   DB	81H
00390C 44 49 56    10484                   DB	"DIV"
00390F DE          10485                   DB	0DEH
003910 44 49 4D    10486                   DB	"DIM"
003913 DF          10487                   DB	0DFH
003914 44 52 41 57 10488                   DB	"DRAW"
003918 E1          10489                   DB	0E1H
003919 45 4E 44 50 10490                   DB	"ENDPROC "
       52 4F 43 20 
003921 CE          10491                   DB	0CEH
003922 45 4E 44 57 10492                   DB	"ENDWHILE "	; v5
       48 49 4C 45 
       20          
00392B CB          10493                   DB	0CBH
00392C 45 4E 44 43 10494                   DB	"ENDCASE "	; v5
       41 53 45 20 
003934 CD          10495                   DB	0CDH
003935 45 4E 44 49 10496                   DB	"ENDIF "	; v5
       46 20       
00393B E0          10497                   DB	0E0H
00393C 45 4E 44 20 10498                   DB	"END "
003940 E2          10499                   DB	0E2H
003941 45 4E 56 45 10500                   DB	"ENVELOPE"
       4C 4F 50 45 
003949 8B          10501                   DB	8BH
00394A 45 4C 53 45 10502                   DB	"ELSE"
00394E A0          10503                   DB	0A0H
00394F 45 56 41 4C 10504                   DB	"EVAL"
003953 9E          10505                   DB	9EH
003954 45 52 4C 20 10506                   DB	"ERL "
003958 85          10507                   DB	85H
003959 45 52 52 4F 10508                   DB	"ERROR"
       52          
00395E C5          10509                   DB	0C5H
00395F 45 4F 46 20 10510                   DB	"EOF "
003963 82          10511                   DB	82H
003964 45 4F 52    10512                   DB	"EOR"
003967 9F          10513                   DB	9FH
003968 45 52 52 20 10514                   DB	"ERR "
00396C 10          10515                   DB	10H
00396D 45 58 49 54 10516                   DB	"EXIT "		; v5
       20          
003972 A1          10517                   DB	0A1H
003973 45 58 50    10518                   DB	"EXP"
003976 A2          10519                   DB	0A2H
003977 45 58 54 20 10520                   DB	"EXT "
00397B 02          10521                   DB	02H
00397C 45 4C 4C 49 10522                   DB	"ELLIPSE"	; v5
       50 53 45    
003983 E3          10523                   DB	0E3H
003984 46 4F 52    10524                   DB	"FOR"
003987 A3          10525                   DB	0A3H
003988 46 41 4C 53 10526                   DB	"FALSE "
       45 20       
00398E 03          10527                   DB	03H
00398F 46 49 4C 4C 10528                   DB	"FILL"		; v5
003993 A4          10529                   DB	0A4H
003994 46 4E       10530                   DB	"FN"
003996 E5          10531                   DB	0E5H
003997 47 4F 54 4F 10532                   DB	"GOTO"
00399B BE          10533                   DB	0BEH
00399C 47 45 54 24 10534                   DB	"GET$"
0039A0 A5          10535                   DB	0A5H
0039A1 47 45 54    10536                   DB	"GET"
0039A4 E4          10537                   DB	0E4H
0039A5 47 4F 53 55 10538                   DB	"GOSUB"
       42          
0039AA E6          10539                   DB	0E6H
0039AB 47 43 4F 4C 10540                   DB	"GCOL"
0039AF 93          10541                   DB	93H
0039B0 48 49 4D 45 10542                   DB	"HIMEM "
       4D 20       
0039B6 E8          10543                   DB	0E8H
0039B7 49 4E 50 55 10544                   DB	"INPUT"
       54          
0039BC E7          10545                   DB	0E7H
0039BD 49 46       10546                   DB	"IF"
0039BF BF          10547                   DB	0BFH
0039C0 49 4E 4B 45 10548                   DB	"INKEY$"
       59 24       
0039C6 A6          10549                   DB	0A6H
0039C7 49 4E 4B 45 10550                   DB	"INKEY"
       59          
0039CC A8          10551                   DB	0A8H
0039CD 49 4E 54    10552                   DB	"INT"
0039D0 A7          10553                   DB	0A7H
0039D1 49 4E 53 54 10554                   DB	"INSTR("
       52 28       
0039D7 0C          10555                   DB	0CH
0039D8 49 4E 53 54 10556                   DB	"INSTALL"	; v5
       41 4C 4C    
0039DF 86          10557                   DB	86H
0039E0 4C 49 4E 45 10558                   DB	"LINE"
0039E4 92          10559                   DB	92H
0039E5 4C 4F 4D 45 10560                   DB	"LOMEM "
       4D 20       
0039EB EA          10561                   DB	0EAH
0039EC 4C 4F 43 41 10562                   DB	"LOCAL"
       4C          
0039F1 C0          10563                   DB	0C0H
0039F2 4C 45 46 54 10564                   DB	"LEFT$("
       24 28       
0039F8 A9          10565                   DB	0A9H
0039F9 4C 45 4E    10566                   DB	"LEN"
0039FC E9          10567                   DB	0E9H
0039FD 4C 45 54    10568                   DB	"LET"
003A00 AB          10569                   DB	0ABH
003A01 4C 4F 47    10570                   DB	"LOG"
003A04 AA          10571                   DB	0AAH
003A05 4C 4E       10572                   DB	"LN"
003A07 C1          10573                   DB	0C1H
003A08 4D 49 44 24 10574                   DB	"MID$("
       28          
003A0D EB          10575                   DB	0EBH
003A0E 4D 4F 44 45 10576                   DB	"MODE"
003A12 83          10577                   DB	83H
003A13 4D 4F 44    10578                   DB	"MOD"
003A16 EC          10579                   DB	0ECH
003A17 4D 4F 56 45 10580                   DB	"MOVE"
003A1B 04          10581                   DB	04H
003A1C 4D 4F 55 53 10582                   DB	"MOUSE"		; v5
       45          
003A21 ED          10583                   DB	0EDH
003A22 4E 45 58 54 10584                   DB	"NEXT"
003A26 AC          10585                   DB	0ACH
003A27 4E 4F 54    10586                   DB	"NOT"
003A2A EE          10587                   DB	0EEH
003A2B 4F 4E       10588                   DB	"ON"
003A2D 87          10589                   DB	87H
003A2E 4F 46 46 20 10590                   DB	"OFF "
003A32 CA          10591                   DB	0CAH
003A33 4F 46 20    10592                   DB	"OF "		; v5
003A36 05          10593                   DB	05H
003A37 4F 52 49 47 10594                   DB	"ORIGIN"	; v5
       49 4E       
003A3D 84          10595                   DB	84H
003A3E 4F 52       10596                   DB	"OR"
003A40 8E          10597                   DB	8EH
003A41 4F 50 45 4E 10598                   DB	"OPENIN"
       49 4E       
003A47 AE          10599                   DB	0AEH
003A48 4F 50 45 4E 10600                   DB	"OPENOUT"
       4F 55 54    
003A4F AD          10601                   DB	0ADH
003A50 4F 50 45 4E 10602                   DB	"OPENUP"
       55 50       
003A56 FF          10603                   DB	0FFH
003A57 4F 53 43 4C 10604                   DB	"OSCLI"
       49          
003A5C CC          10605                   DB	0CCH
003A5D 4F 54 48 45 10606                   DB	"OTHERWISE"	; v5
       52 57 49 53 
       45          
003A66 F1          10607                   DB	0F1H
003A67 50 52 49 4E 10608                   DB	"PRINT"
       54          
003A6C 90          10609                   DB	90H
003A6D 50 41 47 45 10610                   DB	"PAGE "
       20          
003A72 8F          10611                   DB	8FH
003A73 50 54 52 20 10612                   DB	"PTR "
003A77 AF          10613                   DB	0AFH
003A78 50 49 20    10614                   DB	"PI "
003A7B F0          10615                   DB	0F0H
003A7C 50 4C 4F 54 10616                   DB	"PLOT"
003A80 B0          10617                   DB	0B0H
003A81 50 4F 49 4E 10618                   DB	"POINT("
       54 28       
003A87 F2          10619                   DB	0F2H
003A88 50 52 4F 43 10620                   DB	"PROC"
003A8C B1          10621                   DB	0B1H
003A8D 50 4F 53 20 10622                   DB	"POS "
003A91 0E          10623                   DB	0EH
003A92 50 55 54    10624                   DB	"PUT"		; Token changed
003A95 06          10625                   DB	06H
003A96 51 55 49 54 10626                   DB	"QUIT "		; v5
       20          
003A9B F8          10627                   DB	0F8H
003A9C 52 45 54 55 10628                   DB	"RETURN "
       52 4E 20    
003AA3 F5          10629                   DB	0F5H
003AA4 52 45 50 45 10630                   DB	"REPEAT"
       41 54       
003AAA F6          10631                   DB	0F6H
003AAB 52 45 50 4F 10632                   DB	"REPORT "
       52 54 20    
003AB2 F3          10633                   DB	0F3H
003AB3 52 45 41 44 10634                   DB	"READ"
003AB7 F4          10635                   DB	0F4H
003AB8 52 45 4D    10636                   DB	"REM"
003ABB F9          10637                   DB	0F9H
003ABC 52 55 4E 20 10638                   DB	"RUN "
003AC0 B2          10639                   DB	0B2H
003AC1 52 41 44    10640                   DB	"RAD"
003AC4 F7          10641                   DB	0F7H
003AC5 52 45 53 54 10642                   DB	"RESTORE"
       4F 52 45    
003ACC C2          10643                   DB	0C2H
003ACD 52 49 47 48 10644                   DB	"RIGHT$("
       54 24 28    
003AD4 B3          10645                   DB	0B3H
003AD5 52 4E 44 20 10646                   DB	"RND "
003AD9 07          10647                   DB	07H
003ADA 52 45 43 54 10648                   DB	"RECTANGLE"	; v5
       41 4E 47 4C 
       45          
003AE3 88          10649                   DB	88H
003AE4 53 54 45 50 10650                   DB	"STEP"
003AE8 B4          10651                   DB	0B4H
003AE9 53 47 4E    10652                   DB	"SGN"
003AEC B5          10653                   DB	0B5H
003AED 53 49 4E    10654                   DB	"SIN"
003AF0 B6          10655                   DB	0B6H
003AF1 53 51 52    10656                   DB	"SQR"
003AF4 89          10657                   DB	89H
003AF5 53 50 43    10658                   DB	"SPC"
003AF8 C3          10659                   DB	0C3H
003AF9 53 54 52 24 10660                   DB	"STR$"
003AFD C4          10661                   DB	0C4H
003AFE 53 54 52 49 10662                   DB	"STRING$("
       4E 47 24 28 
003B06 D4          10663                   DB	0D4H
003B07 53 4F 55 4E 10664                   DB	"SOUND"
       44          
003B0C FA          10665                   DB	0FAH
003B0D 53 54 4F 50 10666                   DB	"STOP "
       20          
003B12 C6          10667                   DB	0C6H
003B13 53 55 4D    10668                   DB	"SUM"		; v5
003B16 08          10669                   DB	08H
003B17 53 57 41 50 10670                   DB	"SWAP"		; v5
003B1B 09          10671                   DB	09H
003B1C 53 59 53    10672                   DB	"SYS"		; v5
003B1F B7          10673                   DB	0B7H
003B20 54 41 4E    10674                   DB	"TAN"
003B23 8A          10675                   DB	8AH
003B24 54 41 42 28 10676                   DB	"TAB("
003B28 8C          10677                   DB	8CH
003B29 54 48 45 4E 10678                   DB	"THEN"
003B2D 91          10679                   DB	91H
003B2E 54 49 4D 45 10680                   DB	"TIME "
       20          
003B33 0A          10681                   DB	0AH
003B34 54 49 4E 54 10682                   DB	"TINT"
003B38 B8          10683                   DB	0B8H
003B39 54 4F       10684                   DB	"TO"
003B3B FC          10685                   DB	0FCH
003B3C 54 52 41 43 10686                   DB	"TRACE"
       45          
003B41 B9          10687                   DB	0B9H
003B42 54 52 55 45 10688                   DB	"TRUE "
       20          
003B47 FD          10689                   DB	0FDH
003B48 55 4E 54 49 10690                   DB	"UNTIL"
       4C          
003B4D BA          10691                   DB	0BAH
003B4E 55 53 52    10692                   DB	"USR"
003B51 EF          10693                   DB	0EFH
003B52 56 44 55    10694                   DB	"VDU"
003B55 BB          10695                   DB	0BBH
003B56 56 41 4C    10696                   DB	"VAL"
003B59 BC          10697                   DB	0BCH
003B5A 56 50 4F 53 10698                   DB	"VPOS "
       20          
003B5F C7          10699                   DB	0C7H
003B60 57 48 49 4C 10700                   DB	"WHILE"		; v5
       45          
003B65 C9          10701                   DB	0C9H
003B66 57 48 45 4E 10702                   DB	"WHEN"		; v5
003B6A 0B          10703                   DB	0BH
003B6B 57 41 49 54 10704                   DB	"WAIT "		; v5
       20          
003B70 FE          10705                   DB	0FEH
003B71 57 49 44 54 10706                   DB	"WIDTH"
       48          
003B76             10707   ;'LEFT' TOKENS:
003B76 CF          10708                   DB	0CFH
003B77 50 54 52    10709                   DB	"PTR"
003B7A D1          10710                   DB	0D1H
003B7B 54 49 4D 45 10711                   DB	"TIME"
003B7F D3          10712                   DB	0D3H
003B80 48 49 4D 45 10713                   DB	"HIMEM"
       4D          
003B85 D2          10714                   DB	0D2H
003B86 4C 4F 4D 45 10715                   DB	"LOMEM"
       4D          
003B8B D0          10716                   DB	0D0H
003B8C 50 41 47 45 10717                   DB	"PAGE"
003B90             10718   ;
003B90 11          10719                   DB	11H
003B91 4D 69 73 73 10720                   DB	"Missing "
       69 6E 67 20 
003B99 12          10721                   DB	12H
003B9A 4E 6F 20 73 10722                   DB	"No such "
       75 63 68 20 
003BA2 13          10723                   DB	13H
003BA3 42 61 64 20 10724                   DB	"Bad "
003BA7 14          10725                   DB	14H
003BA8 20 72 61 6E 10726                   DB	" range"
       67 65       
003BAE 15          10727                   DB	15H
003BAF 76 61 72 69 10728                   DB	"variable"
       61 62 6C 65 
003BB7 16          10729                   DB	16H
003BB8 4F 75 74 20 10730                   DB	"Out of"
       6F 66       
003BBE 17          10731                   DB	17H
003BBF 4E 6F 20    10732                   DB	"No "
003BC2 18          10733                   DB	18H
003BC3 20 73 70 61 10734                   DB	" space"
       63 65       
003BC9 19          10735                   DB	19H
003BCA 4E 6F 74 20 10736                   DB	"Not in a "
       69 6E 20 61 
       20          
003BD3 1A          10737                   DB	1AH
003BD4 20 6C 6F 6F 10738                   DB	" loop"
       70          
003BD9 1B          10739                   DB	1BH
003BDA 20 6E 6F 74 10740                   DB	" not "
       20          
003BDF             10741   KEYWDL:         EQU	$-KEYWDS
003BDF FF FF       10742                   DW	-1
003BE1             10743   ;
003BE1             10744   ;LIST OF IMMEDIATE MODE COMMANDS:
003BE1             10745   ;
003BE1 80          10746   COMNDS:         DB	80H
003BE2 41 55 54 4F 10747                   DB	"AUTO"
003BE6 81          10748                   DB	81H
003BE7 44 45 4C 45 10749                   DB	"DELETE"
       54 45       
003BED 82          10750                   DB	82H
003BEE 4C 49 53 54 10751                   DB	"LIST"
003BF2 83          10752                   DB	83H
003BF3 4C 4F 41 44 10753                   DB	"LOAD"
003BF7 84          10754                   DB	84H
003BF8 4E 45 57 20 10755                   DB	"NEW "
003BFC 85          10756                   DB	85H
003BFD 4F 4C 44 20 10757                   DB	"OLD "
003C01 86          10758                   DB	86H
003C02 52 45 4E 55 10759                   DB	"RENUMBER"
       4D 42 45 52 
003C0A 87          10760                   DB	87H
003C0B 53 41 56 45 10761                   DB	"SAVE"
003C0F FF FF       10762                   DW	-1
003C11             10763   ;
003C11             10764   ;IMMEDIATE MODE COMMANDS:
003C11             10765   ;
003C11 E3 3E       10766   CMDTABmn:         DW	AUTO
003C13 86 3D       10767                   DW	DELETE
003C15 AE 3D       10768                   DW	LIST
003C17 02 3F       10769                   DW	LOAD
003C19 FD 3E       10770                   DW	NEW
003C1B 10 3F       10771                   DW	OLD
003C1D 33 3E       10772                   DW	RENUM
003C1F 29 3F       10773                   DW	SAVE
003C21             10774   ;
003C21             10775   ;ERROR MESSAGES:
003C21             10776   ;
003C21 17          10777   ERRWDS:         DB	17H
003C22 72 6F 6F 6D 10778                   DB	"room"
003C26 00          10779                   DB	0
003C27 16          10780                   DB	16H
003C28 14          10781                   DB	14H
003C29 00 00       10782                   DW	0
003C2B 4D 75 6C 74 10783                   DB	"Multiple label"
       69 70 6C 65 
       20 6C 61 62 
       65 6C       
003C39 00          10784                   DB	0
003C3A 4D 69 73 74 10785                   DB	"Mistake"
       61 6B 65    
003C41 00          10786                   DB	0
003C42 11          10787                   DB	11H
003C43 2C          10788                   DB	','
003C44 00          10789                   DB	0
003C45 54 79 70 65 10790                   DB	"Type mismatch"
       20 6D 69 73 
       6D 61 74 63 
       68          
003C52 00          10791                   DB	0
003C53 19          10792                   DB	19H
003C54 A4          10793                   DB	TFN
003C55 00 00       10794                   DW	0
003C57 11          10795                   DB	11H
003C58 22          10796                   DB	'"'
003C59 00          10797                   DB	0
003C5A 13          10798                   DB	13H
003C5B DE          10799                   DB	TDIM
003C5C 00          10800                   DB	0
003C5D DE          10801                   DB	TDIM
003C5E 18          10802                   DB	18H
003C5F 00          10803                   DB	0
003C60 19          10804                   DB	19H
003C61 A4          10805                   DB	TFN
003C62 20 6F 72 20 10806                   DB	" or "
003C66 F2          10807                   DB	TPROC
003C67 00          10808                   DB	0
003C68 19          10809                   DB	19H
003C69 F2          10810                   DB	TPROC
003C6A 00          10811                   DB	0
003C6B 13          10812                   DB	13H
003C6C 75 73 65 20 10813                   DB	"use of array"
       6F 66 20 61 
       72 72 61 79 
003C78 00          10814                   DB	0
003C79 13          10815                   DB	13H
003C7A 73 75 62 73 10816                   DB	"subscript"
       63 72 69 70 
       74          
003C83 00          10817                   DB	0
003C84 53 79 6E 74 10818                   DB	"Syntax error"
       61 78 20 65 
       72 72 6F 72 
003C90 00          10819                   DB	0
003C91 45 73 63 61 10820                   DB	"Escape"
       70 65       
003C97 00          10821                   DB	0
003C98 44 69 76 69 10822                   DB	"Division by zero"
       73 69 6F 6E 
       20 62 79 20 
       7A 65 72 6F 
003CA8 00          10823                   DB	0
003CA9 53 74 72 69 10824                   DB	"String too long"
       6E 67 20 74 
       6F 6F 20 6C 
       6F 6E 67    
003CB8 00          10825                   DB	0
003CB9 4E 75 6D 62 10826                   DB	"Number too big"
       65 72 20 74 
       6F 6F 20 62 
       69 67       
003CC7 00          10827                   DB	0
003CC8 2D 76 65 20 10828                   DB	"-ve root"
       72 6F 6F 74 
003CD0 00          10829                   DB	0
003CD1 4C 6F 67    10830                   DB	"Log"
003CD4 14          10831                   DB	14H
003CD5 00          10832                   DB	0
003CD6 41 63 63 75 10833                   DB	"Accuracy lost"
       72 61 63 79 
       20 6C 6F 73 
       74          
003CE3 00          10834                   DB	0
003CE4 45 78 70 6F 10835                   DB	"Exponent"
       6E 65 6E 74 
003CEC 14          10836                   DB	14H
003CED 00 00       10837                   DW	0
003CEF 12          10838                   DB	12H
003CF0 15          10839                   DB	15H
003CF1 00          10840                   DB	0
003CF2 11          10841                   DB	11H
003CF3 29          10842                   DB	')'
003CF4 00          10843                   DB	0
003CF5 13          10844                   DB	13H
003CF6 68 65 78 20 10845                   DB	"hex or binary"
       6F 72 20 62 
       69 6E 61 72 
       79          
003D03 00          10846                   DB	0
003D04 12          10847                   DB	12H
003D05 A4          10848                   DB	TFN
003D06 2F          10849                   DB	'/'
003D07 F2          10850                   DB	TPROC
003D08 00          10851                   DB	0
003D09 13          10852                   DB	13H
003D0A 63 61 6C 6C 10853                   DB	"call"
003D0E 00          10854                   DB	0
003D0F 13          10855                   DB	13H
003D10 61 72 67 75 10856                   DB	"arguments"
       6D 65 6E 74 
       73          
003D19 00          10857                   DB	0
003D1A 19          10858                   DB	19H
003D1B E3          10859                   DB	TFOR
003D1C 1A          10860                   DB	1AH
003D1D 00          10861                   DB	0
003D1E 43 61 6E 27 10862                   DB	"Can't match "
       74 20 6D 61 
       74 63 68 20 
003D2A E3          10863                   DB	TFOR
003D2B 00          10864                   DB	0
003D2C 13          10865                   DB	13H
003D2D E3          10866                   DB	TFOR
003D2E 20          10867                   DB	' '
003D2F 15          10868                   DB	15H
003D30 00 00       10869                   DW	0
003D32 11          10870                   DB	11H
003D33 B8          10871                   DB	TTO
003D34 00 00       10872                   DW	0
003D36 17          10873                   DB	17H
003D37 E4          10874                   DB	TGOSUB
003D38 00          10875                   DB	0
003D39 EE          10876                   DB	TON
003D3A 20 73 79 6E 10877                   DB	" syntax"
       74 61 78    
003D41 00          10878                   DB	0
003D42 EE          10879                   DB	TON
003D43 14          10880                   DB	14H
003D44 00          10881                   DB	0
003D45 12          10882                   DB	12H
003D46 6C 69 6E 65 10883                   DB	"line"
003D4A 00          10884                   DB	0
003D4B 16          10885                   DB	16H
003D4C 20          10886                   DB	' '
003D4D DC          10887                   DB	TDATA
003D4E 00          10888                   DB	0
003D4F 19          10889                   DB	19H
003D50 F5          10890                   DB	TREPEAT
003D51 1A          10891                   DB	1AH
003D52 00          10892                   DB	0
003D53 13          10893                   DB	13H
003D54 10          10894                   DB	TEXIT
003D55 00          10895                   DB	0
003D56 11          10896                   DB	11H
003D57 23          10897                   DB	'#'
003D58 00          10898                   DB	0
003D59 19          10899                   DB	19H		;46 Not in a WHILE loop
003D5A C7          10900                   DB	TWHILE
003D5B 1A          10901                   DB	1AH
003D5C 00          10902                   DB	0
003D5D 11          10903                   DB	11H		;47 Missing ENDCASE
003D5E CB          10904                   DB	TENDCASE
003D5F 00          10905                   DB	0
003D60 CA          10906                   DB	TOF		;48 OF not last
003D61 1B          10907                   DB	1BH
003D62 6C 61 73 74 10908                   DB	"last"
003D66 00          10909                   DB	0
003D67 11          10910                   DB	11H		;49 Missing ENDIF
003D68 CD          10911                   DB	TENDIF
003D69 00          10912                   DB	0
003D6A 00 00       10913                   DW	0
003D6C 00          10914                   DB	0
003D6D EE          10915                   DB	TON		;53 ON ERROR not LOCAL
003D6E 20          10916                   DB	' '
003D6F 85          10917                   DB	TERROR
003D70 1B          10918                   DB	1BH
003D71 EA          10919                   DB	TLOCAL
003D72 00          10920                   DB	0
003D73 DC          10921                   DB	TDATA		;54 DATA not LOCAL
003D74 1B          10922                   DB	1BH
003D75 EA          10923                   DB	TLOCAL
003D76 00          10924                   DB	0
003D77             10925   ;
003D77             10926   ;Indent tokens (first four needn't be at start of line):
003D77             10927   ;
003D77 E3          10928   TOKADD:         DB	TFOR
003D78 F5          10929                   DB	TREPEAT
003D79 C7          10930                   DB	TWHILE
003D7A C8          10931                   DB	TCASE
003D7B 8B          10932                   DB	TELSE
003D7C C9          10933                   DB	TWHEN
003D7D CC          10934                   DB	TOTHERWISE
003D7E             10935   LENADD:         EQU	$-TOKADD
003D7E             10936   ;
003D7E             10937   ;Outdent tokens (first three needn't be at start of line):
003D7E             10938   ;
003D7E ED          10939   TOKSUB:         DB	TNEXT
003D7F FD          10940                   DB	TUNTIL
003D80 CE          10941                   DB	TENDWHILE
003D81 CB          10942                   DB	TENDCASE
003D82 CD          10943                   DB	TENDIF
003D83 8B          10944                   DB	TELSE
003D84 C9          10945                   DB	TWHEN
003D85 CC          10946                   DB	TOTHERWISE
003D86             10947   LENSUB:         EQU	$-TOKSUB
003D86             10948   ;
003D86             10949   ;COMMANDS:
003D86             10950   ;
003D86             10951   ;DELETE line,line
003D86             10952   ;
003D86 CD D7 43    10953   DELETE:         CALL	DLPAIR
003D89 7E          10954   DELET1:         LD	A,(HL)
003D8A B7          10955                   OR	A
003D8B 28 79       10956                   JR	Z,WARMNC
003D8D 23          10957                   INC	HL
003D8E 5E          10958                   LD	E,(HL)
003D8F 23          10959                   INC	HL
003D90 56          10960                   LD	D,(HL)
003D91 2B          10961                   DEC	HL
003D92 2B          10962                   DEC	HL
003D93 EB          10963                   EX	DE,HL
003D94 37          10964                   SCF
003D95 ED 42       10965                   SBC	HL,BC
003D97 EB          10966                   EX	DE,HL
003D98 30 6C       10967                   JR	NC,WARMNC
003D9A C5          10968                   PUSH	BC
003D9B CD E9 3F    10969                   CALL	DEL
003D9E C1          10970                   POP	BC
003D9F 18 E8       10971                   JR	DELET1
003DA1             10972   ;
003DA1             10973   ;LISTO expr
003DA1             10974   ;
003DA1 FD 23       10975   LISTO:          INC	IY		;SKIP "O"
003DA3 CD 33 18    10976                   CALL	EXPRI
003DA6 D9          10977                   EXX
003DA7 7D          10978                   LD	A,L
003DA8 32 FE 54    10979                   LD	(LISTON),A
003DAB C3 B0 37    10980                   JP	CLOOP
003DAE             10981   ;
003DAE             10982   ;LIST
003DAE             10983   ;LIST line
003DAE             10984   ;LIST line,line [IF string]
003DAE             10985   ;LIST ,line
003DAE             10986   ;LIST line,
003DAE             10987   ;
003DAE FE 4F       10988   LIST:           CP	'O'
003DB0 28 EF       10989                   JR	Z,LISTO
003DB2 0E 01       10990                   LD	C,1
003DB4 11 00 53    10991                   LD	DE,BUFFER
003DB7 CD 18 44    10992                   CALL	LEXAN2
003DBA 12          10993                   LD	(DE),A
003DBB FD 21 00 53 10994                   LD	IY,BUFFER
003DBF CD D7 43    10995                   CALL	DLPAIR
003DC2 CD 0B 45    10996                   CALL	NXT
003DC5 FE E7       10997                   CP	TIF		;IF CLAUSE ?
003DC7 3E 00       10998                   LD	A,0		;INIT IF-CLAUSE LENGTH
003DC9 20 15       10999                   JR	NZ,LISTB
003DCB FD 23       11000                   INC	IY		;SKIP IF
003DCD CD 0B 45    11001                   CALL	NXT		;SKIP SPACES (IF ANY)
003DD0 EB          11002                   EX	DE,HL
003DD1 FD E5       11003                   PUSH	IY
003DD3 E1          11004                   POP	HL		;HL ADDRESSES IF CLAUSE
003DD4 3E 0D       11005                   LD	A,CR
003DD6 C5          11006                   PUSH	BC
003DD7 01 00 01    11007                   LD	BC,256
003DDA ED B1       11008                   CPIR			;LOCATE CR
003DDC 79          11009                   LD	A,C
003DDD 2F          11010                   CPL			;A = SUBSTRING LENGTH
003DDE C1          11011                   POP	BC
003DDF EB          11012                   EX	DE,HL
003DE0 5F          11013   LISTB:          LD	E,A		;IF-CLAUSE LENGTH
003DE1 78          11014                   LD	A,B
003DE2 B1          11015                   OR	C
003DE3 20 01       11016                   JR	NZ,LISTA
003DE5 0B          11017                   DEC	BC
003DE6 D9          11018   LISTA:          EXX
003DE7 DD 21 FE 54 11019                   LD	IX,LISTON
003DEB 1E 00       11020                   LD	E,0		;INDENTATION COUNT
003DED D9          11021                   EXX
003DEE 3E 14       11022                   LD	A,20
003DF0             11023   ;
003DF0 C5          11024   LISTC:          PUSH	BC		;SAVE HIGH LINE NUMBER
003DF1 D5          11025                   PUSH	DE		;SAVE IF-CLAUSE LENGTH
003DF2 E5          11026                   PUSH	HL		;SAVE PROGRAM POINTER
003DF3 08          11027                   EX	AF,AF'
003DF4 7E          11028                   LD	A,(HL)
003DF5 B7          11029                   OR	A
003DF6 28 0E       11030                   JR	Z,WARMNC
003DF8             11031   ;
003DF8             11032   ;CHECK IF PAST TERMINATING LINE NUMBER:
003DF8             11033   ;
003DF8 7B          11034                   LD	A,E		;A = IF-CLAUSE LENGTH
003DF9 23          11035                   INC	HL
003DFA 5E          11036                   LD	E,(HL)
003DFB 23          11037                   INC	HL
003DFC 56          11038                   LD	D,(HL)		;DE = LINE NUMBER
003DFD 2B          11039                   DEC	HL
003DFE 2B          11040                   DEC	HL
003DFF D5          11041                   PUSH	DE		;SAVE LINE NUMBER
003E00 EB          11042                   EX	DE,HL
003E01 37          11043                   SCF
003E02 ED 42       11044                   SBC	HL,BC
003E04 EB          11045                   EX	DE,HL
003E05 D1          11046                   POP	DE		;RESTORE LINE NUMBER
003E06 D2 AF 37    11047   WARMNC:         JP	NC,WARM
003E09 4E          11048                   LD	C,(HL)		;C = LINE LENGTH + 4
003E0A 47          11049                   LD	B,A		;B = IF-CLAUSE LENGTH
003E0B             11050   ;
003E0B             11051   ;CHECK FOR IF CLAUSE:
003E0B             11052   ;
003E0B 23          11053                   INC	HL
003E0C 23          11054                   INC	HL
003E0D 23          11055                   INC	HL		;HL ADDRESSES LINE TEXT
003E0E 0D          11056                   DEC	C
003E0F 0D          11057                   DEC	C
003E10 0D          11058                   DEC	C
003E11 0D          11059                   DEC	C		;C = LINE LENGTH
003E12 D5          11060                   PUSH	DE		;SAVE LINE NUMBER
003E13 E5          11061                   PUSH	HL		;SAVE LINE ADDRESS
003E14 AF          11062                   XOR	A		;A <- 0
003E15 B8          11063                   CP	B		;WAS THERE AN IF-CLAUSE
003E16 FD E5       11064                   PUSH	IY
003E18 D1          11065                   POP	DE		;DE ADDRESSES IF-CLAUSE
003E19 C4 F2 1D    11066                   CALL	NZ,SEARCH	;SEARCH FOR IF CLAUSE
003E1C E1          11067                   POP	HL		;RESTORE LINE ADDRESS
003E1D D1          11068                   POP	DE		;RESTORE LINE NUMBER
003E1E FD E5       11069                   PUSH	IY
003E20 CC 5D 40    11070                   CALL	Z,LISTIT	;LIST IF MATCH
003E23 FD E1       11071                   POP	IY
003E25             11072   ;
003E25 08          11073                   EX	AF,AF'
003E26 3D          11074                   DEC	A
003E27 CD 36 06    11075                   CALL	LTRAP
003E2A E1          11076                   POP	HL		;RESTORE POINTER
003E2B 5E          11077                   LD	E,(HL)
003E2C 16 00       11078                   LD	D,0
003E2E 19          11079                   ADD	HL,DE		;ADDRESS NEXT LINE
003E2F D1          11080                   POP	DE		;RESTORE IF-CLAUSE LEN
003E30 C1          11081                   POP	BC		;RESTORE HI LINE NUMBER
003E31 18 BD       11082                   JR	LISTC
003E33             11083   ;
003E33             11084   ;RENUMBER
003E33             11085   ;RENUMBER start
003E33             11086   ;RENUMBER start,increment
003E33             11087   ;RENUMBER ,increment
003E33             11088   ;
003E33 CD 43 40    11089   RENUM:          CALL	CLEAR		;USES DYNAMIC AREA
003E36 CD B4 43    11090                   CALL	PAIR		;LOAD HL,BC
003E39 D9          11091                   EXX
003E3A 2A DC 54    11092                   LD	HL,(PAGE_)
003E3D ED 5B DE 54 11093                   LD	DE,(LOMEM)
003E41 7E          11094   RENUM1:         LD	A,(HL)		;BUILD TABLE
003E42 B7          11095                   OR	A
003E43 28 28       11096                   JR	Z,RENUM2
003E45 23          11097                   INC	HL
003E46 4E          11098                   LD	C,(HL)		;OLD LINE NUMBER
003E47 23          11099                   INC	HL
003E48 46          11100                   LD	B,(HL)
003E49 EB          11101                   EX	DE,HL
003E4A 71          11102                   LD	(HL),C
003E4B 23          11103                   INC	HL
003E4C 70          11104                   LD	(HL),B
003E4D 23          11105                   INC	HL
003E4E D9          11106                   EXX
003E4F E5          11107                   PUSH	HL
003E50 09          11108                   ADD	HL,BC		;ADD INCREMENT
003E51 DA AF 43    11109                   JP	C,TOOBIGmn	;"Too big"
003E54 D9          11110                   EXX
003E55 C1          11111                   POP	BC
003E56 71          11112                   LD	(HL),C
003E57 23          11113                   INC	HL
003E58 70          11114                   LD	(HL),B
003E59 23          11115                   INC	HL
003E5A EB          11116                   EX	DE,HL
003E5B 2B          11117                   DEC	HL
003E5C 2B          11118                   DEC	HL
003E5D AF          11119                   XOR	A
003E5E 47          11120                   LD	B,A
003E5F 4E          11121                   LD	C,(HL)
003E60 09          11122                   ADD	HL,BC		;NEXT LINE
003E61 EB          11123                   EX	DE,HL
003E62 E5          11124                   PUSH	HL
003E63 24          11125                   INC	H
003E64 ED 72       11126                   SBC	HL,SP
003E66 E1          11127                   POP	HL
003E67 EB          11128                   EX	DE,HL
003E68 38 D7       11129                   JR	C,RENUM1	;CONTINUE
003E6A C3 44 3F    11130                   JP	ERROR_		;'No room' (A = 0)
003E6D             11131   ;
003E6D EB          11132   RENUM2:         EX	DE,HL
003E6E 36 FF       11133                   LD	(HL),-1
003E70 23          11134                   INC	HL
003E71 36 FF       11135                   LD	(HL),-1
003E73 ED 5B DE 54 11136                   LD	DE,(LOMEM)
003E77 D9          11137                   EXX
003E78 2A DC 54    11138                   LD	HL,(PAGE_)
003E7B 4E          11139   RENUM3:         LD	C,(HL)
003E7C 79          11140                   LD	A,C
003E7D B7          11141                   OR	A
003E7E 28 86       11142                   JR	Z,WARMNC
003E80 D9          11143                   EXX
003E81 EB          11144                   EX	DE,HL
003E82 23          11145                   INC	HL
003E83 23          11146                   INC	HL
003E84 5E          11147                   LD	E,(HL)
003E85 23          11148                   INC	HL
003E86 56          11149                   LD	D,(HL)
003E87 23          11150                   INC	HL
003E88 D5          11151                   PUSH	DE
003E89 EB          11152                   EX	DE,HL
003E8A D9          11153                   EXX
003E8B D1          11154                   POP	DE
003E8C 23          11155                   INC	HL
003E8D 73          11156                   LD	(HL),E		;NEW LINE NUMBER
003E8E 23          11157                   INC	HL
003E8F 72          11158                   LD	(HL),D
003E90 23          11159                   INC	HL
003E91 0D          11160                   DEC	C
003E92 0D          11161                   DEC	C
003E93 0D          11162                   DEC	C
003E94 06 00       11163                   LD	B,0
003E96 3E 8D       11164   RENUM7:         LD	A,TLINO
003E98 ED B1       11165                   CPIR			;SEARCH FOR LINE NUMBER
003E9A 20 DF       11166                   JR	NZ,RENUM3
003E9C C5          11167                   PUSH	BC
003E9D E5          11168                   PUSH	HL
003E9E E5          11169                   PUSH	HL
003E9F FD E1       11170                   POP	IY
003EA1 D9          11171                   EXX
003EA2 E5          11172                   PUSH	HL
003EA3 CD 60 1F    11173                   CALL	DECODE		;DECODE LINE NUMBER
003EA6 E1          11174                   POP	HL
003EA7 D9          11175                   EXX
003EA8 44          11176                   LD	B,H
003EA9 4D          11177                   LD	C,L
003EAA 2A DE 54    11178                   LD	HL,(LOMEM)
003EAD 5E          11179   RENUM4:         LD	E,(HL)		;CROSS-REFERENCE TABLE
003EAE 23          11180                   INC	HL
003EAF 56          11181                   LD	D,(HL)
003EB0 23          11182                   INC	HL
003EB1 EB          11183                   EX	DE,HL
003EB2 B7          11184                   OR	A		;CLEAR CARRY
003EB3 ED 42       11185                   SBC	HL,BC
003EB5 EB          11186                   EX	DE,HL
003EB6 5E          11187                   LD	E,(HL)		;NEW NUMBER
003EB7 23          11188                   INC	HL
003EB8 56          11189                   LD	D,(HL)
003EB9 23          11190                   INC	HL
003EBA 38 F1       11191                   JR	C,RENUM4
003EBC EB          11192                   EX	DE,HL
003EBD 28 1A       11193                   JR	Z,RENUM5	;FOUND
003EBF CD FA 44    11194                   CALL	TELL
003EC2 46 61 69 6C 11195                   DB	"Failed at "
       65 64 20 61 
       74 20       
003ECC 00          11196                   DB	0
003ECD D9          11197                   EXX
003ECE E5          11198                   PUSH	HL
003ECF D9          11199                   EXX
003ED0 E1          11200                   POP	HL
003ED1 CD 92 41    11201                   CALL	PBCDL
003ED4 CD FB 40    11202                   CALL	CRLF
003ED7 18 06       11203                   JR	RENUM6
003ED9 D1          11204   RENUM5:         POP	DE
003EDA D5          11205                   PUSH	DE
003EDB 1B          11206                   DEC	DE
003EDC CD BF 44    11207                   CALL	ENCODE		;RE-WRITE NUMBER
003EDF E1          11208   RENUM6:         POP	HL
003EE0 C1          11209                   POP	BC
003EE1 18 B3       11210                   JR	RENUM7
003EE3             11211   ;
003EE3             11212   ;AUTO
003EE3             11213   ;AUTO start,increment
003EE3             11214   ;AUTO start
003EE3             11215   ;AUTO ,increment
003EE3             11216   ;
003EE3 CD B4 43    11217   AUTO:           CALL	PAIR
003EE6 22 E8 54    11218                   LD	(AUTONO),HL
003EE9 79          11219                   LD	A,C
003EEA 32 FF 54    11220                   LD	(INCREM),A
003EED 18 37       11221                   JR	CLOOP0
003EEF             11222   ;
003EEF             11223   ;BAD
003EEF             11224   ;NEW
003EEF             11225   ;
003EEF CD FA 44    11226   BAD:            CALL	TELL		;"Bad program'
003EF2 13          11227                   DB	13H
003EF3 70 72 6F 67 11228                   DB	"program"
       72 61 6D    
003EFA 0D          11229                   DB	CR
003EFB 0A          11230                   DB	LF
003EFC 00          11231                   DB	0
003EFD CD 3E 40    11232   NEW:            CALL	NEWIT
003F00 18 24       11233                   JR	CLOOP0
003F02             11234   ;
003F02             11235   ;LOAD filename
003F02             11236   ;
003F02 CD 3C 18    11237   LOAD:           CALL	EXPRS		;GET FILENAME
003F05 3E 0D       11238                   LD	A,CR
003F07 12          11239                   LD	(DE),A
003F08 CD 00 40    11240                   CALL	LOAD0
003F0B CD 43 40    11241                   CALL	CLEAR
003F0E 18 31       11242                   JR	WARM0
003F10             11243   ;
003F10             11244   ;OLD
003F10             11245   ;
003F10 2A DC 54    11246   OLD:            LD	HL,(PAGE_)
003F13 E5          11247                   PUSH	HL
003F14 23          11248                   INC	HL
003F15 23          11249                   INC	HL
003F16 23          11250                   INC	HL
003F17 01 FC 00    11251                   LD	BC,252
003F1A 3E 0D       11252                   LD	A,CR
003F1C ED B1       11253                   CPIR
003F1E 20 CF       11254                   JR	NZ,BAD
003F20 7D          11255                   LD	A,L
003F21 E1          11256                   POP	HL
003F22 77          11257                   LD	(HL),A
003F23 CD 1A 40    11258                   CALL	CLEAN
003F26 C3 B0 37    11259   CLOOP0:         JP	CLOOP
003F29             11260   ;
003F29             11261   ;SAVE filename
003F29             11262   ;
003F29 CD 3C 18    11263   SAVE:           CALL	EXPRS		;FILENAME
003F2C 3E 0D       11264                   LD	A,CR
003F2E 12          11265                   LD	(DE),A
003F2F ED 5B DC 54 11266                   LD	DE,(PAGE_)
003F33 CD 25 40    11267                   CALL	GETTOP
003F36 B7          11268                   OR	A
003F37 ED 52       11269                   SBC	HL,DE
003F39 44          11270                   LD	B,H		;LENGTH OF PROGRAM
003F3A 4D          11271                   LD	C,L
003F3B 21 00 52    11272                   LD	HL,ACCS
003F3E CD C2 07    11273                   CALL	OSSAVE
003F41 C3 AF 37    11274   WARM0:          JP	WARM
003F44             11275   ;
003F44             11276   ;ERROR
003F44             11277   ;N.B. CARE NEEDED BECAUSE SP MAY NOT BE VALID (E.G. ABOVE HIMEM)
003F44             11278   ;
003F44 21 21 3C    11279   ERROR_:         LD	HL,ERRWDS
003F47 4F          11280                   LD	C,A
003F48 B7          11281                   OR	A
003F49 28 0C       11282                   JR	Z,ERROR1
003F4B 47          11283                   LD	B,A		;ERROR NUMBER
003F4C AF          11284                   XOR	A
003F4D BE          11285   ERROR0:         CP	(HL)
003F4E 23          11286                   INC	HL
003F4F 20 FC       11287                   JR	NZ,ERROR0
003F51 10 FA       11288                   DJNZ	ERROR0
003F53 18 02       11289                   JR	ERROR1		;MUST NOT PUSH HL HERE
003F55             11290   ;
003F55 E1          11291   EXTERR:         POP	HL
003F56 4F          11292                   LD	C,A
003F57 22 EE 54    11293   ERROR1:         LD	(ERRTXT),HL
003F5A 2A EC 54    11294                   LD	HL,(ONERSP)
003F5D 7C          11295                   LD	A,H
003F5E B5          11296                   OR	L
003F5F ED 7B E2 54 11297                   LD	SP,(HIMEM)	;MUST SET SP BEFORE 'CALL'
003F63 28 01       11298                   JR	Z,ERROR4
003F65 F9          11299                   LD	SP,HL
003F66 79          11300   ERROR4:         LD	A,C		;ERROR NUMBER
003F67 CD 5B 41    11301                   CALL	SETLIN		;SP IS SET NOW
003F6A 32 FD 54    11302                   LD	(ERR),A
003F6D 22 F2 54    11303                   LD	(ERL),HL
003F70 B7          11304                   OR	A
003F71 28 0B       11305                   JR	Z,ERROR2	;'FATAL' ERROR
003F73 2A EA 54    11306                   LD	HL,(ERRTRP)
003F76 7C          11307                   LD	A,H
003F77 B5          11308                   OR	L
003F78 E5          11309                   PUSH	HL
003F79 FD E1       11310                   POP	IY
003F7B C2 99 24    11311                   JP	NZ,XEQ		;ERROR TRAPPED
003F7E ED 7B E2 54 11312   ERROR2:         LD	SP,(HIMEM)
003F82 ED 62       11313                   SBC	HL,HL
003F84 22 E8 54    11314                   LD	(AUTONO),HL
003F87 22 E6 54    11315                   LD	(TRACEN),HL	;CANCEL TRACE
003F8A CD 43 06    11316                   CALL	RESET		;RESET OPSYS
003F8D CD FB 40    11317                   CALL	CRLF
003F90 CD E5 44    11318                   CALL	REPORT		;MESSAGE
003F93 2A F2 54    11319                   LD	HL,(ERL)
003F96 CD 82 41    11320                   CALL	SAYLN
003F99 1E 00       11321                   LD	E,0
003F9B DC 53 06    11322                   CALL	C,OSSHUT	;CLOSE ALL FILES
003F9E CD FB 40    11323                   CALL	CRLF
003FA1 18 83       11324                   JR	CLOOP0
003FA3             11325   ;
003FA3             11326   ;SUBROUTINES:
003FA3             11327   ;
003FA3             11328   ;
003FA3             11329   ;LEX - SEARCH FOR KEYWORDS
003FA3             11330   ;   Inputs: HL = start of keyword table
003FA3             11331   ;           IY = start of match text
003FA3             11332   ;  Outputs: If found, Z-flag set, A=token.
003FA3             11333   ;           If not found, Z-flag reset, A=(IY).
003FA3             11334   ;           IY updated (if NZ, IY unchanged).
003FA3             11335   ; Destroys: A,B,H,L,IY,F
003FA3             11336   ;
003FA3 21 84 38    11337   LEX:            LD	HL,KEYWDS
003FA6 FD 7E 00    11338   LEX0:           LD	A,(IY)
003FA9 46          11339                   LD	B,(HL)
003FAA 23          11340                   INC	HL
003FAB BE          11341                   CP	(HL)
003FAC 28 0A       11342                   JR	Z,LEX2
003FAE D8          11343                   RET	C		;FAIL EXIT
003FAF 23          11344   LEX1:           INC	HL
003FB0 7E          11345                   LD	A,(HL)
003FB1 FE A0       11346                   CP	160
003FB3 EA AF 3F    11347                   JP	PE,LEX1
003FB6 18 EE       11348                   JR	LEX0
003FB8             11349   ;
003FB8 FD E5       11350   LEX2:           PUSH	IY		;SAVE POINTER
003FBA 23          11351   LEX3:           INC	HL
003FBB 7E          11352                   LD	A,(HL)
003FBC FE A0       11353                   CP	160
003FBE E2 E5 3F    11354                   JP	PO,LEX6		;FOUND
003FC1 FD 23       11355                   INC	IY
003FC3 FD 7E 00    11356                   LD	A,(IY)
003FC6 BE          11357                   CP	(HL)
003FC7 20 05       11358                   JR	NZ,LEX7
003FC9 FE A1       11359                   CP	161
003FCB EA BA 3F    11360                   JP	PE,LEX3
003FCE FD 7E 00    11361   LEX7:           LD	A,(IY)
003FD1 FE 2E       11362                   CP	'.'
003FD3 28 10       11363                   JR	Z,LEX6		;FOUND (ABBREV.)
003FD5 CD FC 43    11364                   CALL	RANGE1
003FD8 38 04       11365                   JR	C,LEX5
003FDA FD E1       11366   LEX4:           POP	IY		;RESTORE POINTER
003FDC 18 D1       11367                   JR	LEX1
003FDE             11368   ;
003FDE 7E          11369   LEX5:           LD	A,(HL)
003FDF FE 20       11370                   CP	' '
003FE1 20 F7       11371                   JR	NZ,LEX4
003FE3 FD 2B       11372                   DEC	IY
003FE5 F1          11373   LEX6:           POP	AF
003FE6 AF          11374                   XOR	A
003FE7 78          11375                   LD	A,B
003FE8 C9          11376                   RET
003FE9             11377   ;
003FE9             11378   ;DEL - DELETE A PROGRAM LINE.
003FE9             11379   ;   Inputs: HL addresses program line.
003FE9             11380   ; Destroys: B,C,F
003FE9             11381   ;
003FE9 D5          11382   DEL:            PUSH	DE
003FEA E5          11383                   PUSH	HL
003FEB E5          11384                   PUSH	HL
003FEC 06 00       11385                   LD	B,0
003FEE 4E          11386                   LD	C,(HL)
003FEF 09          11387                   ADD	HL,BC
003FF0 E5          11388                   PUSH	HL
003FF1 EB          11389                   EX	DE,HL
003FF2 CD 25 40    11390                   CALL	GETTOP
003FF5 ED 52       11391                   SBC	HL,DE
003FF7 44          11392                   LD	B,H
003FF8 4D          11393                   LD	C,L
003FF9 E1          11394                   POP	HL
003FFA D1          11395                   POP	DE
003FFB ED B0       11396                   LDIR			;DELETE LINE
003FFD E1          11397                   POP	HL
003FFE D1          11398                   POP	DE
003FFF C9          11399                   RET
004000             11400   ;
004000             11401   ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
004000             11402   ;   Inputs: Filename in ACCS (term CR)
004000             11403   ; Destroys: A,B,C,D,E,H,L,F
004000             11404   ;
004000             11405   ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
004000             11406   ; AND WRITE FF FF.
004000             11407   ; Destroys: A,B,C,H,L,F
004000             11408   ;
004000 ED 5B DC 54 11409   LOAD0:          LD	DE,(PAGE_)
004004 21 00 FF    11410                   LD	HL,-256
004007 39          11411                   ADD	HL,SP
004008 ED 52       11412                   SBC	HL,DE		;FIND AVAILABLE SPACE
00400A 44          11413                   LD	B,H
00400B 4D          11414                   LD	C,L
00400C 21 00 52    11415                   LD	HL,ACCS
00400F CD CC 06    11416                   CALL	OSLOAD		;LOAD
004012 D4 3E 40    11417                   CALL	NC,NEWIT
004015 3E 00       11418                   LD	A,0
004017 D2 44 3F    11419                   JP	NC,ERROR_	;"No room"
00401A CD 25 40    11420   CLEAN:          CALL	GETTOP
00401D 2B          11421                   DEC	HL
00401E 36 FF       11422                   LD	(HL),-1		;WRITE &FFFF
004020 2B          11423                   DEC	HL
004021 36 FF       11424                   LD	(HL),-1
004023 18 1E       11425                   JR	CLEAR
004025             11426   ;
004025 2A DC 54    11427   GETTOP:         LD	HL,(PAGE_)
004028 06 00       11428                   LD	B,0
00402A 3E 0D       11429                   LD	A,CR
00402C 4E          11430   GETOP1:         LD	C,(HL)
00402D 0C          11431                   INC	C
00402E 0D          11432                   DEC	C
00402F 28 09       11433                   JR	Z,GETOP2
004031 09          11434                   ADD	HL,BC
004032 2B          11435                   DEC	HL
004033 BE          11436                   CP	(HL)
004034 23          11437                   INC	HL
004035 28 F5       11438                   JR	Z,GETOP1
004037 C3 EF 3E    11439                   JP	BAD
00403A 23          11440   GETOP2:         INC	HL		;N.B. CALLED FROM NEWIT
00403B 23          11441                   INC	HL
00403C 23          11442                   INC	HL
00403D C9          11443                   RET
00403E             11444   ;
00403E             11445   ;NEWIT - NEW PROGRAM THEN CLEAR
00403E             11446   ;   Destroys: H,L
00403E             11447   ;
00403E             11448   ;CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
00403E             11449   ; FUNCTION AND PROCEDURE POINTERS.
00403E             11450   ;   Destroys: Nothing
00403E             11451   ;
00403E 2A DC 54    11452   NEWIT:          LD	HL,(PAGE_)
004041 36 00       11453                   LD	(HL),0
004043 E5          11454   CLEAR:          PUSH	HL
004044 C5          11455                   PUSH	BC
004045 F5          11456                   PUSH	AF
004046 CD 25 40    11457                   CALL	GETTOP
004049 22 DE 54    11458                   LD	(LOMEM),HL
00404C 22 E0 54    11459                   LD	(FREE),HL
00404F 21 6C 54    11460                   LD	HL,DYNVAR
004052             11461                   ; LD	B,2*(54+2)
004052 06 70       11462                   LD	B,54+2*2
004054 36 00       11463   CLEAR1:         LD	(HL),0
004056 23          11464                   INC	HL
004057 10 FB       11465                   DJNZ	CLEAR1
004059 F1          11466                   POP	AF
00405A C1          11467                   POP	BC
00405B E1          11468                   POP	HL
00405C C9          11469                   RET
00405D             11470   ;
00405D             11471   ;LISTIT - LIST A PROGRAM LINE.
00405D             11472   ;    Inputs: HL addresses line
00405D             11473   ;            DE = line number (binary)
00405D             11474   ;	     E' = indentation count
00405D             11475   ;            IX addresses LISTON
00405D             11476   ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
00405D             11477   ;
00405D E5          11478   LISTIT:         PUSH	HL
00405E EB          11479                   EX	DE,HL
00405F C5          11480                   PUSH	BC
004060 CD 96 41    11481                   CALL	PBCD
004063 C1          11482                   POP	BC
004064 E1          11483                   POP	HL
004065 7E          11484                   LD	A,(HL)
004066 D9          11485                   EXX
004067 21 7E 3D    11486                   LD	HL,TOKSUB
00406A 01 08 00    11487                   LD	BC,LENSUB
00406D ED B1       11488                   CPIR
00406F CC F5 40    11489                   CALL	Z,INDSUB
004072 FE CB       11490                   CP	TENDCASE
004074 CC F5 40    11491                   CALL	Z,INDSUB
004077 3E 20       11492                   LD	A,' '
004079 DD CB 00 46 11493                   BIT	0,(IX)
00407D C4 02 41    11494                   CALL	NZ,OUTCHR
004080 7B          11495                   LD	A,E
004081 87          11496                   ADD	A,A
004082 DD CB 00 4E 11497                   BIT	1,(IX)
004086 C4 A3 35    11498                   CALL	NZ,SPACES
004089 D9          11499                   EXX
00408A 7E          11500                   LD	A,(HL)
00408B 1E 00       11501                   LD	E,0
00408D D9          11502                   EXX
00408E 01 07 00    11503                   LD	BC,LENADD
004091 21 77 3D    11504   LIST5:          LD	HL,TOKADD
004094 ED B1       11505                   CPIR
004096 CC F9 40    11506                   CALL	Z,INDADD
004099 FE C8       11507                   CP	TCASE
00409B CC F9 40    11508                   CALL	Z,INDADD
00409E D9          11509                   EXX
00409F 7E          11510   LIST8:          LD	A,(HL)
0040A0 23          11511                   INC	HL
0040A1 FE 0D       11512                   CP	CR
0040A3 28 25       11513                   JR	Z,LIST9
0040A5 57          11514                   LD	D,A
0040A6 FE 10       11515                   CP	TEXIT
0040A8 20 02       11516                   JR	NZ,LIST6
0040AA CB FB       11517                   SET	7,E
0040AC FE 22       11518   LIST6:          CP	'"'
0040AE 20 01       11519                   JR	NZ,LIST7
0040B0 1C          11520                   INC	E
0040B1 CD E9 40    11521   LIST7:          CALL	LOUT
0040B4 7B          11522                   LD	A,E
0040B5 E6 81       11523                   AND	81H
0040B7 20 E6       11524                   JR	NZ,LIST8
0040B9 7E          11525                   LD	A,(HL)
0040BA D9          11526                   EXX
0040BB 21 7E 3D    11527                   LD	HL,TOKSUB
0040BE 01 03 00    11528                   LD	BC,3
0040C1 ED B1       11529                   CPIR
0040C3 CC F5 40    11530                   CALL	Z,INDSUB
0040C6 0E 04       11531                   LD	C,4
0040C8 18 C7       11532                   JR	LIST5
0040CA             11533   ;
0040CA 7A          11534   LIST9:          LD	A,D
0040CB FE 8C       11535                   CP	TTHEN
0040CD D9          11536                   EXX
0040CE CC F9 40    11537                   CALL	Z,INDADD
0040D1 D9          11538                   EXX
0040D2 18 27       11539                   JR	CRLF
0040D4             11540   ;
0040D4 E5          11541   PRLINO:         PUSH	HL
0040D5 FD E1       11542                   POP	IY
0040D7 C5          11543                   PUSH	BC
0040D8 CD 60 1F    11544                   CALL	DECODE
0040DB C1          11545                   POP	BC
0040DC D9          11546                   EXX
0040DD C5          11547                   PUSH	BC
0040DE D5          11548                   PUSH	DE
0040DF CD 92 41    11549                   CALL	PBCDL
0040E2 D1          11550                   POP	DE
0040E3 C1          11551                   POP	BC
0040E4 D9          11552                   EXX
0040E5 FD E5       11553                   PUSH	IY
0040E7 E1          11554                   POP	HL
0040E8 C9          11555                   RET
0040E9             11556   ;
0040E9 CB 43       11557   LOUT:           BIT	0,E
0040EB 20 15       11558                   JR	NZ,OUTCHR
0040ED FE 8D       11559                   CP	TLINO
0040EF 28 E3       11560                   JR	Z,PRLINO
0040F1 CD 1B 41    11561                   CALL	OUT
0040F4 C9          11562                   RET
0040F5             11563   ;
0040F5 1D          11564   INDSUB:         DEC	E
0040F6 F2 FA 40    11565                   JP	P,INDRET
0040F9 1C          11566   INDADD:         INC	E
0040FA C9          11567   INDRET:         RET
0040FB             11568   ;
0040FB             11569   ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
0040FB             11570   ;  Destroys: A,F
0040FB             11571   ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
0040FB             11572   ;    Inputs: A = character
0040FB             11573   ;  Destroys: A,F
0040FB             11574   ;
0040FB 3E 0D       11575   CRLF:           LD	A,CR
0040FD CD 02 41    11576                   CALL	OUTCHR
004100 3E 0A       11577                   LD	A,LF
004102 CD B1 05    11578   OUTCHR:         CALL	OSWRCH
004105 D6 0D       11579                   SUB	CR
004107 28 05       11580                   JR	Z,CARRET
004109 D8          11581                   RET	C		;NON-PRINTING
00410A 3A FB 54    11582                   LD	A,(COUNT)
00410D 3C          11583                   INC	A
00410E 32 FB 54    11584   CARRET:         LD	(COUNT),A
004111 C8          11585                   RET	Z
004112 E5          11586                   PUSH	HL
004113 2A FC 54    11587                   LD	HL,(WIDTH)
004116 BD          11588                   CP	L
004117 E1          11589                   POP	HL
004118 C0          11590                   RET	NZ
004119 18 E0       11591                   JR	CRLF
00411B             11592   ;
00411B             11593   ;OUT - SEND CHARACTER OR KEYWORD
00411B             11594   ;   Inputs: A = character (>=10, <128)
00411B             11595   ;           A = Token (<10, >=128)
00411B             11596   ;  Destroys: A,F
00411B             11597   ;
00411B FE A0       11598   OUT:            CP	160
00411D EA 02 41    11599                   JP	PE,OUTCHR
004120 C5          11600                   PUSH	BC
004121 E5          11601                   PUSH	HL
004122 21 84 38    11602                   LD	HL,KEYWDS
004125 01 5B 03    11603                   LD	BC,KEYWDL
004128 ED B1       11604                   CPIR
00412A C4 02 41    11605                   CALL	NZ,OUTCHR
00412D 06 A0       11606                   LD	B,160
00412F FE 91       11607                   CP	145
004131 EA 35 41    11608                   JP	PE,TOKEN1
004134 04          11609                   INC	B
004135 7E          11610   TOKEN1:         LD	A,(HL)
004136 23          11611                   INC	HL
004137 B8          11612                   CP	B
004138 F5          11613                   PUSH	AF
004139 EC 02 41    11614                   CALL	PE,OUTCHR
00413C F1          11615                   POP	AF
00413D EA 35 41    11616                   JP	PE,TOKEN1
004140 E1          11617                   POP	HL
004141 C1          11618                   POP	BC
004142 C9          11619                   RET
004143             11620   ;
004143             11621   ;FINDL - FIND PROGRAM LINE.
004143             11622   ;   Inputs: HL = line number (binary)
004143             11623   ;  Outputs: HL addresses line (if found)
004143             11624   ;           DE = line number
004143             11625   ;           Z-flag set if found.
004143             11626   ; Destroys: A,B,C,D,E,H,L,F
004143             11627   ;
004143 EB          11628   FINDL:          EX	DE,HL
004144 2A DC 54    11629                   LD	HL,(PAGE_)
004147 AF          11630                   XOR	A		;A=0
004148 BE          11631                   CP	(HL)
004149 3C          11632                   INC	A
00414A D0          11633                   RET	NC
00414B AF          11634                   XOR	A		;CLEAR CARRY
00414C 47          11635                   LD	B,A
00414D 4E          11636   FINDL1:         LD	C,(HL)
00414E E5          11637                   PUSH	HL
00414F 23          11638                   INC	HL
004150 7E          11639                   LD	A,(HL)
004151 23          11640                   INC	HL
004152 66          11641                   LD	H,(HL)
004153 6F          11642                   LD	L,A
004154 ED 52       11643                   SBC	HL,DE
004156 E1          11644                   POP	HL
004157 D0          11645                   RET	NC		;FOUND | PAST
004158 09          11646                   ADD	HL,BC
004159 18 F2       11647                   JR	FINDL1
00415B             11648   ;
00415B             11649   ;SETLIN - Search program for line containing address.
00415B             11650   ;   Inputs: Address in (CURLIN)
00415B             11651   ;  Outputs: Line number in HL
00415B             11652   ; Destroys: B,C,D,E,H,L,F
00415B             11653   ;
00415B 06 00       11654   SETLIN:         LD	B,0
00415D ED 5B F4 54 11655                   LD	DE,(CURLIN)
004161 2A DC 54    11656                   LD	HL,(PAGE_)
004164 B7          11657                   OR	A
004165 ED 52       11658                   SBC	HL,DE
004167 19          11659                   ADD	HL,DE
004168 30 13       11660                   JR	NC,SET3
00416A 4E          11661   SET1:           LD	C,(HL)
00416B 0C          11662                   INC	C
00416C 0D          11663                   DEC	C
00416D 28 0E       11664                   JR	Z,SET3
00416F 09          11665                   ADD	HL,BC
004170 ED 52       11666                   SBC	HL,DE
004172 19          11667                   ADD	HL,DE
004173 38 F5       11668                   JR	C,SET1
004175 ED 42       11669                   SBC	HL,BC
004177 23          11670                   INC	HL
004178 5E          11671                   LD	E,(HL)		;LINE NUMBER
004179 23          11672                   INC	HL
00417A 56          11673                   LD	D,(HL)
00417B EB          11674                   EX	DE,HL
00417C C9          11675   SET2:           RET
00417D             11676   ;
00417D 21 00 00    11677   SET3:           LD	HL,0
004180 18 FA       11678                   JR	SET2
004182             11679   ;
004182             11680   ;SAYLN - PRINT " at line nnnn" MESSAGE.
004182             11681   ;   Inputs: HL = line number
004182             11682   ;  Outputs: Carry=0 if line number is zero.
004182             11683   ;           Carry=1 if line number is non-zero.
004182             11684   ; Destroys: A,B,C,D,E,H,L,F
004182             11685   ;
004182 7C          11686   SAYLN:          LD	A,H
004183 B5          11687                   OR	L
004184 C8          11688                   RET	Z
004185 CD FA 44    11689                   CALL	TELL
004188 20 61 74 20 11690                   DB	" at line "
       6C 69 6E 65 
       20          
004191 00          11691                   DB	0
004192 0E 00       11692   PBCDL:          LD	C,0
004194 18 02       11693                   JR	PBCD0
004196             11694   ;
004196             11695   ;PBCD - PRINT NUMBER AS DECIMAL INTEGER.
004196             11696   ;   Inputs: HL = number (binary).
004196             11697   ;  Outputs: Carry = 1
004196             11698   ; Destroys: A,B,C,D,E,H,L,F
004196             11699   ;
004196 0E 20       11700   PBCD:           LD	C,' '
004198 06 05       11701   PBCD0:          LD	B,5
00419A 11 10 27    11702                   LD	DE,10000
00419D AF          11703   PBCD1:          XOR	A
00419E ED 52       11704   PBCD2:          SBC	HL,DE
0041A0 3C          11705                   INC	A
0041A1 30 FB       11706                   JR	NC,PBCD2
0041A3 19          11707                   ADD	HL,DE
0041A4 3D          11708                   DEC	A
0041A5 28 04       11709                   JR	Z,PBCD3
0041A7 CB E1       11710                   SET	4,C
0041A9 CB E9       11711                   SET	5,C
0041AB B1          11712   PBCD3:          OR	C
0041AC C4 02 41    11713                   CALL	NZ,OUTCHR
0041AF 78          11714                   LD	A,B
0041B0 FE 05       11715                   CP	5
0041B2 28 06       11716                   JR	Z,PBCD4
0041B4 29          11717                   ADD	HL,HL
0041B5 54          11718                   LD	D,H
0041B6 5D          11719                   LD	E,L
0041B7 29          11720                   ADD	HL,HL
0041B8 29          11721                   ADD	HL,HL
0041B9 19          11722                   ADD	HL,DE
0041BA 11 E8 03    11723   PBCD4:          LD	DE,1000
0041BD 10 DE       11724                   DJNZ	PBCD1
0041BF 37          11725                   SCF
0041C0 C9          11726                   RET
0041C1             11727   ;
0041C1             11728   ;HANDLE WHOLE ARRAY:
0041C1             11729   ;
0041C1 FD 23       11730   GETV1:          INC	IY
0041C3 FD 23       11731                   INC	IY		;SKIP ()
0041C5 E5          11732                   PUSH	HL		;SET EXIT CONDITIONS
0041C6 DD E1       11733                   POP	IX
0041C8 7A          11734                   LD	A,D
0041C9 F6 40       11735                   OR	64		;FLAG ARRAY
0041CB BF          11736                   CP	A
0041CC C9          11737                   RET
0041CD             11738   ;
0041CD             11739   ;PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
0041CD             11740   ;   Inputs: HL, IY as returned from GETVAR (NZ).
0041CD             11741   ;  Outputs: As GETVAR.
0041CD             11742   ; Destroys: everything
0041CD             11743   ;
0041CD CD 3C 43    11744   PUTVAR:         CALL	CREATE
0041D0 FD 7E 00    11745                   LD	A,(IY)
0041D3 FE 28       11746                   CP	'('
0041D5 20 7D       11747                   JR	NZ,GETVZ	;SET EXIT CONDITIONS
0041D7 FD 7E 01    11748                   LD	A,(IY+1)
0041DA FE 29       11749                   CP	')'		;WHOLE ARRAY?
0041DC 28 E3       11750                   JR	Z,GETV1
0041DE 3E 0E       11751   ARRAY:          LD	A,14		;'Bad use of array'
0041E0 C3 44 3F    11752   ERROR3:         JP	ERROR_
0041E3             11753   ;
0041E3             11754   ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
0041E3             11755   ;   Inputs: IY addresses first character.
0041E3             11756   ;  Outputs: Carry set and NZ if illegal character.
0041E3             11757   ;           Z-flag set if variable found, then:
0041E3             11758   ;            A = variable type (0,4,5,128 or 129)
0041E3             11759   ;                (68,69 or 193 for whole array)
0041E3             11760   ;            HL = IX = variable pointer.
0041E3             11761   ;            IY updated
0041E3             11762   ;           If Z-flag & carry reset, then:
0041E3             11763   ;            HL, IY set for subsequent PUTVAR call.
0041E3             11764   ; Destroys: everything
0041E3             11765   ;
0041E3 FD 7E 00    11766   GETVAR:         LD	A,(IY)
0041E6 FE 21       11767                   CP	'!'
0041E8 28 76       11768                   JR	Z,GETV5
0041EA FE 3F       11769                   CP	'?'
0041EC 28 76       11770                   JR	Z,GETV6
0041EE FE 7C       11771                   CP	'|'
0041F0 28 75       11772                   JR	Z,GETVF
0041F2 FE 24       11773                   CP	'$'
0041F4 28 75       11774                   JR	Z,GETV4
0041F6 CD B0 42    11775                   CALL	LOCATE
0041F9 C0          11776                   RET	NZ
0041FA FD 7E 00    11777                   LD	A,(IY)
0041FD FE 28       11778                   CP	'('		;ARRAY?
0041FF 20 4B       11779                   JR	NZ,GETVX	;EXIT
004201 FD 7E 01    11780                   LD	A,(IY+1)
004204 FE 29       11781                   CP	')'		;WHOLE ARRAY?
004206 28 B9       11782                   JR	Z,GETV1
004208 D5          11783                   PUSH	DE		;SAVE TYPE
004209 7E          11784                   LD	A,(HL)
00420A 23          11785                   INC	HL
00420B 66          11786                   LD	H,(HL)
00420C 6F          11787                   LD	L,A		;INDIRECT LINK
00420D E6 FE       11788                   AND	0FEH
00420F B4          11789                   OR	H
004210 28 CC       11790                   JR	Z,ARRAY
004212 7E          11791                   LD	A,(HL)		;NO. OF DIMENSIONS
004213 B7          11792                   OR	A
004214 28 C8       11793                   JR	Z,ARRAY
004216 23          11794                   INC	HL
004217 11 00 00    11795                   LD	DE,0		;ACCUMULATOR
00421A F5          11796                   PUSH	AF
00421B FD 23       11797                   INC	IY		;SKIP (
00421D E5          11798   GETV3:          PUSH	HL
00421E D5          11799                   PUSH	DE
00421F CD 33 18    11800                   CALL	EXPRI		;SUBSCRIPT
004222 D9          11801                   EXX
004223 D1          11802                   POP	DE
004224 E3          11803                   EX	(SP),HL
004225 4E          11804                   LD	C,(HL)
004226 23          11805                   INC	HL
004227 46          11806                   LD	B,(HL)
004228 23          11807                   INC	HL
004229 E3          11808                   EX	(SP),HL
00422A EB          11809                   EX	DE,HL
00422B D5          11810                   PUSH	DE
00422C CD BD 36    11811                   CALL	MUL16		;HL=HL*BC
00422F D1          11812                   POP	DE
004230 19          11813                   ADD	HL,DE
004231 EB          11814                   EX	DE,HL
004232 B7          11815                   OR	A
004233 ED 42       11816                   SBC	HL,BC
004235 3E 0F       11817                   LD	A,15
004237 30 A7       11818                   JR	NC,ERROR3	;"Subscript"
004239 E1          11819                   POP	HL
00423A F1          11820                   POP	AF
00423B 3D          11821                   DEC	A		;DIMENSION COUNTER
00423C 20 1C       11822                   JR	NZ,GETV2
00423E CD AE 20    11823                   CALL	BRAKET		;CLOSING BRACKET
004241 F1          11824                   POP	AF		;RESTORE TYPE
004242 E5          11825                   PUSH	HL
004243 CD AD 36    11826                   CALL	X14OR5		;DE=DE*n
004246 E1          11827                   POP	HL
004247 19          11828                   ADD	HL,DE
004248 57          11829                   LD	D,A		;TYPE
004249 FD 7E 00    11830                   LD	A,(IY)
00424C FE 3F       11831   GETVX:          CP	'?'
00424E 28 26       11832                   JR	Z,GETV9
004250 FE 21       11833                   CP	'!'
004252 28 1E       11834                   JR	Z,GETV8
004254 E5          11835   GETVZ:          PUSH	HL		;SET EXIT CONDITIONS
004255 DD E1       11836                   POP	IX
004257 7A          11837                   LD	A,D
004258 BF          11838                   CP	A
004259 C9          11839                   RET
00425A             11840   ;
00425A F5          11841   GETV2:          PUSH	AF
00425B CD A2 20    11842                   CALL	COMMA
00425E 18 BD       11843                   JR	GETV3
004260             11844   ;
004260             11845   ;PROCESS UNARY & BINARY INDIRECTION:
004260             11846   ;
004260 3E 04       11847   GETV5:          LD	A,4		;UNARY 32-BIT INDIRN.
004262 18 09       11848                   JR	GETV7
004264 AF          11849   GETV6:          XOR	A		;UNARY 8-BIT INDIRECTION
004265 18 06       11850                   JR	GETV7
004267 3E 05       11851   GETVF:          LD	A,5		;VARIANT INDIRECTION
004269 18 02       11852                   JR	GETV7
00426B 3E 80       11853   GETV4:          LD	A,128		;STATIC STRING
00426D ED 62       11854   GETV7:          SBC	HL,HL
00426F F5          11855                   PUSH	AF
004270 18 15       11856                   JR	GETV0
004272             11857   ;
004272 06 04       11858   GETV8:          LD	B,4		;32-BIT BINARY INDIRN.
004274 18 02       11859                   JR	GETVA
004276 06 00       11860   GETV9:          LD	B,0		;8-BIT BINARY INDIRN.
004278 E5          11861   GETVA:          PUSH	HL
004279 DD E1       11862                   POP	IX
00427B 7A          11863                   LD	A,D		;TYPE
00427C FE 81       11864                   CP	129
00427E C8          11865                   RET	Z		;STRING!
00427F C5          11866                   PUSH	BC
004280 CD 25 19    11867                   CALL	LOADN		;LEFT OPERAND
004283 CD 17 1C    11868                   CALL	SFIX
004286 D9          11869                   EXX
004287 E5          11870   GETV0:          PUSH	HL
004288 FD 23       11871                   INC	IY
00428A CD 60 18    11872                   CALL	ITEMI
00428D D9          11873                   EXX
00428E D1          11874                   POP	DE
00428F F1          11875                   POP	AF
004290 19          11876                   ADD	HL,DE
004291 E5          11877                   PUSH	HL
004292 DD E1       11878                   POP	IX
004294 BF          11879                   CP	A
004295 C9          11880                   RET
004296             11881   ;
004296             11882   ;GETDEF - Find entry for FN or PROC in dynamic area.
004296             11883   ;   Inputs: IY addresses byte following "DEF" token.
004296             11884   ;  Outputs: Z flag set if found
004296             11885   ;           Carry set if neither FN or PROC first.
004296             11886   ;           If Z: HL points to entry
004296             11887   ;                 IY addresses delimiter
004296             11888   ; Destroys: A,D,E,H,L,IY,F
004296             11889   ;
004296 FD 7E 01    11890   GETDEF:         LD	A,(IY+1)
004299 CD FC 43    11891                   CALL	RANGE1
00429C D8          11892                   RET	C
00429D FD 7E 00    11893                   LD	A,(IY)
0042A0 21 D8 54    11894                   LD	HL,FNPTR
0042A3 FE A4       11895                   CP	TFN
0042A5 28 43       11896                   JR	Z,LOC2
0042A7 21 DA 54    11897                   LD	HL,PROPTR
0042AA FE F2       11898                   CP	TPROC
0042AC 28 3C       11899                   JR	Z,LOC2
0042AE 37          11900                   SCF
0042AF C9          11901                   RET
0042B0             11902   ;
0042B0             11903   ;LOCATE - Try to locate variable name in static or
0042B0             11904   ;dynamic variables.  If illegal first character return
0042B0             11905   ;carry, non-zero.  If found, return no-carry, zero.
0042B0             11906   ;If not found, return no-carry, non-zero.
0042B0             11907   ;   Inputs: IY addresses first character of name.
0042B0             11908   ;           A=(IY)
0042B0             11909   ;  Outputs: Z-flag set if found, then:
0042B0             11910   ;            IY addresses terminator
0042B0             11911   ;            HL addresses location of variable
0042B0             11912   ;            D=type of variable:  4 = integer
0042B0             11913   ;                                 5 = floating point
0042B0             11914   ;                               129 = string
0042B0             11915   ; Destroys: A,D,E,H,L,IY,F
0042B0             11916   ;
0042B0 D6 40       11917   LOCATE:         SUB	'@'
0042B2 D8          11918                   RET	C
0042B3 26 00       11919                   LD	H,0
0042B5 FE 1B       11920                   CP	'Z'-'@'+1
0042B7 30 1D       11921                   JR	NC,LOC0		;NOT STATIC
0042B9 87          11922                   ADD	A,A
0042BA 6F          11923                   LD	L,A
0042BB FD 7E 01    11924                   LD	A,(IY+1)	;2nd CHARACTER
0042BE FE 25       11925                   CP	'%'
0042C0 20 20       11926                   JR	NZ,LOC1		;NOT STATIC
0042C2 FD 7E 02    11927                   LD	A,(IY+2)
0042C5 FE 28       11928                   CP	'('
0042C7 28 19       11929                   JR	Z,LOC1		;NOT STATIC
0042C9 29          11930                   ADD	HL,HL
0042CA 11 00 54    11931                   LD	DE,STAVAR	;STATIC VARIABLES
0042CD 19          11932                   ADD	HL,DE
0042CE FD 23       11933                   INC	IY
0042D0 FD 23       11934                   INC	IY
0042D2 16 04       11935                   LD	D,4		;INTEGER TYPE
0042D4 AF          11936                   XOR	A
0042D5 C9          11937                   RET
0042D6             11938   ;
0042D6 FE 1F       11939   LOC0:           CP	'_'-'@'
0042D8 D8          11940                   RET	C
0042D9 FE 3B       11941                   CP	'z'-'@'+1
0042DB 3F          11942                   CCF
0042DC 3D          11943                   DEC	A		;SET NZ
0042DD D8          11944                   RET	C
0042DE D6 03       11945                   SUB	3
0042E0 87          11946                   ADD	A,A
0042E1 6F          11947                   LD	L,A
0042E2 11 6C 54    11948   LOC1:           LD	DE,DYNVAR	;DYNAMIC VARIABLES
0042E5 2D          11949                   DEC	L
0042E6 2D          11950                   DEC	L
0042E7 37          11951                   SCF
0042E8 F8          11952                   RET	M
0042E9 19          11953                   ADD	HL,DE
0042EA 5E          11954   LOC2:           LD	E,(HL)
0042EB 23          11955                   INC	HL
0042EC 56          11956                   LD	D,(HL)
0042ED 7A          11957                   LD	A,D
0042EE B3          11958                   OR	E
0042EF 28 49       11959                   JR	Z,LOC6		;UNDEFINED VARIABLE
0042F1 62          11960                   LD	H,D
0042F2 6B          11961                   LD	L,E
0042F3 23          11962                   INC	HL		;SKIP LINK
0042F4 23          11963                   INC	HL
0042F5 FD E5       11964                   PUSH	IY
0042F7 7E          11965   LOC3:           LD	A,(HL)		;COMPARE
0042F8 23          11966                   INC	HL
0042F9 FD 23       11967                   INC	IY
0042FB FD BE 00    11968                   CP	(IY)
0042FE 28 F7       11969                   JR	Z,LOC3
004300 B7          11970                   OR	A		;0=TERMINATOR
004301 28 05       11971                   JR	Z,LOC5		;FOUND (MAYBE)
004303 FD E1       11972   LOC4:           POP	IY
004305 EB          11973                   EX	DE,HL
004306 18 E2       11974                   JR	LOC2		;TRY NEXT ENTRY
004308             11975   ;
004308 FD 2B       11976   LOC5:           DEC	IY
00430A FD 7E 00    11977                   LD	A,(IY)
00430D FE 28       11978                   CP	'('
00430F 28 13       11979                   JR	Z,LOCX		;FOUND
004311 FD 23       11980                   INC	IY
004313 CD EF 43    11981                   CALL	RANGE
004316 38 0C       11982                   JR	C,LOCX		;FOUND
004318 FE 28       11983                   CP	'('
00431A 28 E7       11984                   JR	Z,LOC4		;KEEP LOOKING
00431C FD 7E FF    11985                   LD	A,(IY-1)
00431F CD FC 43    11986                   CALL	RANGE1
004322 30 DF       11987                   JR	NC,LOC4		;KEEP LOOKING
004324 D1          11988   LOCX:           POP	DE
004325 FD 7E FF    11989   TYPE:           LD	A,(IY-1)
004328 FE 24       11990                   CP	'$'
00432A 16 81       11991                   LD	D,129
00432C C8          11992                   RET	Z		;STRING
00432D FE 26       11993                   CP	'&'
00432F 16 01       11994                   LD	D,1
004331 C8          11995                   RET	Z		;BYTE
004332 FE 25       11996                   CP	'%'
004334 16 04       11997                   LD	D,4
004336 C8          11998                   RET	Z		;INTEGER
004337 14          11999                   INC	D
004338 BF          12000                   CP	A
004339 C9          12001                   RET
00433A             12002   ;
00433A 3C          12003   LOC6:           INC	A		;SET NZ
00433B C9          12004                   RET
00433C             12005   ;
00433C             12006   ;CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
00433C             12007   ;   Inputs: HL, IY as returned from LOCATE (NZ).
00433C             12008   ;  Outputs: As LOCATE, GETDEF.
00433C             12009   ; Destroys: As LOCATE, GETDEF.
00433C             12010   ;
00433C AF          12011   CREATE:         XOR	A
00433D ED 5B E0 54 12012                   LD	DE,(FREE)
004341 72          12013                   LD	(HL),D
004342 2B          12014                   DEC	HL
004343 73          12015                   LD	(HL),E
004344 EB          12016                   EX	DE,HL
004345 77          12017                   LD	(HL),A
004346 23          12018                   INC	HL
004347 77          12019                   LD	(HL),A
004348 23          12020                   INC	HL
004349 FD 23       12021   LOC7:           INC	IY
00434B CD EF 43    12022                   CALL	RANGE		;END OF VARIABLE?
00434E 38 14       12023                   JR	C,LOC8
004350 77          12024                   LD	(HL),A
004351 23          12025                   INC	HL
004352 CD FC 43    12026                   CALL	RANGE1
004355 30 F2       12027                   JR	NC,LOC7
004357 FE 28       12028                   CP	'('
004359 28 09       12029                   JR	Z,LOC8
00435B FD 7E 01    12030                   LD	A,(IY+1)
00435E FE 28       12031                   CP	'('
004360 28 E7       12032                   JR	Z,LOC7
004362 FD 23       12033                   INC	IY
004364 36 00       12034   LOC8:           LD	(HL),0		;TERMINATOR
004366 23          12035                   INC	HL
004367 E5          12036                   PUSH	HL
004368 CD 25 43    12037                   CALL	TYPE
00436B FD 7E 00    12038                   LD	A,(IY)
00436E FE 28       12039                   CP	'('
004370 3E 02       12040                   LD	A,2		;SIZE OF INDIRECT LINK
004372 28 07       12041                   JR	Z,LOC9
004374 7A          12042                   LD	A,D
004375 B7          12043                   OR	A		;STRING?
004376 F2 7B 43    12044                   JP	P,LOC9
004379 3E 04       12045                   LD	A,4
00437B 36 00       12046   LOC9:           LD	(HL),0		;INITIALISE TO ZERO
00437D 23          12047                   INC	HL
00437E 3D          12048                   DEC	A
00437F 20 FA       12049                   JR	NZ,LOC9
004381 22 E0 54    12050                   LD	(FREE),HL
004384 CD 86 32    12051                   CALL	CHECK
004387 E1          12052                   POP	HL
004388 AF          12053                   XOR	A
004389 C9          12054                   RET
00438A             12055   ;
00438A             12056   ;LINNUM - GET LINE NUMBER FROM TEXT STRING
00438A             12057   ;   Inputs: IY = Text Pointer
00438A             12058   ;  Outputs: HL = Line number (zero if none)
00438A             12059   ;           IY updated
00438A             12060   ; Destroys: A,D,E,H,L,IY,F
00438A             12061   ;
00438A CD 0B 45    12062   LINNUM:         CALL	NXT
00438D 21 00 00    12063                   LD	HL,0
004390 FD 7E 00    12064   LINNM1:         LD	A,(IY)
004393 D6 30       12065                   SUB	'0'
004395 D8          12066                   RET	C
004396 FE 0A       12067                   CP	10
004398 D0          12068                   RET	NC
004399 FD 23       12069                   INC	IY
00439B 54          12070                   LD	D,H
00439C 5D          12071                   LD	E,L
00439D 29          12072                   ADD	HL,HL		;*2
00439E 38 0F       12073                   JR	C,TOOBIGmn
0043A0 29          12074                   ADD	HL,HL		;*4
0043A1 38 0C       12075                   JR	C,TOOBIGmn
0043A3 19          12076                   ADD	HL,DE		;*5
0043A4 38 09       12077                   JR	C,TOOBIGmn
0043A6 29          12078                   ADD	HL,HL		;*10
0043A7 38 06       12079                   JR	C,TOOBIGmn
0043A9 5F          12080                   LD	E,A
0043AA 16 00       12081                   LD	D,0
0043AC 19          12082                   ADD	HL,DE		;ADD IN DIGIT
0043AD 30 E1       12083                   JR	NC,LINNM1
0043AF 3E 14       12084   TOOBIGmn:         LD	A,20
0043B1 C3 44 3F    12085                   JP	ERROR_		;"Too big"
0043B4             12086   ;
0043B4             12087   ;PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
0043B4             12088   ;   Inputs: IY = text pointer
0043B4             12089   ;  Outputs: HL = first number (10 by default)
0043B4             12090   ;           BC = second number (10 by default)
0043B4             12091   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
0043B4             12092   ;
0043B4 CD 8A 43    12093   PAIR:           CALL	LINNUM		;FIRST
0043B7 7C          12094                   LD	A,H
0043B8 B5          12095                   OR	L
0043B9 20 02       12096                   JR	NZ,PAIR1
0043BB 2E 0A       12097                   LD	L,10
0043BD CD 36 35    12098   PAIR1:          CALL	TERMQ
0043C0 FD 23       12099                   INC	IY
0043C2 E5          12100                   PUSH	HL
0043C3 21 0A 00    12101                   LD	HL,10
0043C6 C4 8A 43    12102                   CALL	NZ,LINNUM	;SECOND
0043C9 E3          12103                   EX	(SP),HL
0043CA C1          12104                   POP	BC
0043CB 78          12105                   LD	A,B
0043CC B1          12106                   OR	C
0043CD C0          12107                   RET	NZ
0043CE CD 55 3F    12108                   CALL	EXTERR
0043D1 53 69 6C 6C 12109                   DB	"Silly"
       79          
0043D6 00          12110                   DB	0
0043D7             12111   ;
0043D7             12112   ;DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
0043D7             12113   ;   Inputs: IY = text pointer
0043D7             12114   ;  Outputs: HL = points to program text
0043D7             12115   ;           BC = second number (0 by default)
0043D7             12116   ; Destroys: A,B,C,D,E,H,L,IY,F
0043D7             12117   ;
0043D7 CD 8A 43    12118   DLPAIR:         CALL	LINNUM
0043DA E5          12119                   PUSH	HL
0043DB CD 36 35    12120                   CALL	TERMQ
0043DE 28 09       12121                   JR	Z,DLP1
0043E0 FE E7       12122                   CP	TIF
0043E2 28 05       12123                   JR	Z,DLP1
0043E4 FD 23       12124                   INC	IY
0043E6 CD 8A 43    12125                   CALL	LINNUM
0043E9 E3          12126   DLP1:           EX	(SP),HL
0043EA CD 43 41    12127                   CALL	FINDL
0043ED C1          12128                   POP	BC
0043EE C9          12129                   RET
0043EF             12130   ;
0043EF             12131   ;TEST FOR VALID CHARACTER IN VARIABLE NAME:
0043EF             12132   ;   Inputs: IY addresses character
0043EF             12133   ;  Outputs: Carry set if out-of-range.
0043EF             12134   ; Destroys: A,F
0043EF             12135   ;
0043EF FD 7E 00    12136   RANGE:          LD	A,(IY)
0043F2 FE 24       12137                   CP	'$'
0043F4 D8          12138                   RET	C
0043F5 FE 27       12139                   CP	'&'+1
0043F7 3F          12140                   CCF
0043F8 D0          12141                   RET	NC
0043F9 FE 28       12142                   CP	'('
0043FB C8          12143                   RET	Z
0043FC FE 30       12144   RANGE1:         CP	'0'
0043FE D8          12145                   RET	C
0043FF FE 3A       12146                   CP	'9'+1
004401 3F          12147                   CCF
004402 D0          12148                   RET	NC
004403 FE 40       12149                   CP	'@'		;V2.4
004405 C8          12150                   RET	Z
004406 FE 41       12151   RANGE2:         CP	'A'
004408 D8          12152                   RET	C
004409 FE 5B       12153                   CP	'Z'+1
00440B 3F          12154                   CCF
00440C D0          12155                   RET	NC
00440D FE 5F       12156                   CP	'_'
00440F D8          12157                   RET	C
004410 FE 7B       12158                   CP	'z'+1
004412 3F          12159                   CCF
004413 C9          12160                   RET
004414             12161   ;
004414             12162   ;LEXAN - LEXICAL ANALYSIS.
004414             12163   ;  Bit 0,C: 1=left, 0=right
004414             12164   ;  Bit 3,C: 1=in HEX
004414             12165   ;  Bit 4,C: 1=accept line number
004414             12166   ;  Bit 5,C: 1=in variable, FN, PROC
004414             12167   ;  Bit 6,C: 1=in REM, DATA, *
004414             12168   ;  Bit 7,C: 1=in quotes
004414             12169   ;   Inputs: IY addresses source string
004414             12170   ;           DE addresses destination string
004414             12171   ;           (must be page boundary)
004414             12172   ;           C  sets initial mode
004414             12173   ;  Outputs: DE, IY updated
004414             12174   ;           A holds carriage return
004414             12175   ;
004414 12          12176   LEXAN1:         LD	(DE),A		;TRANSFER TO BUFFER
004415 13          12177                   INC	DE		;INCREMENT POINTERS
004416 FD 23       12178                   INC	IY
004418 7B          12179   LEXAN2:         LD	A,E		;MAIN ENTRY
004419 FE FC       12180                   CP	252		;TEST LENGTH
00441B 3E 13       12181                   LD	A,19
00441D D2 44 3F    12182                   JP	NC,ERROR_	;'String too long'
004420 FD 7E 00    12183                   LD	A,(IY)
004423 FE 0D       12184                   CP	CR
004425 C8          12185                   RET	Z		;END OF LINE
004426 CD FC 43    12186                   CALL	RANGE1
004429 30 04       12187                   JR	NC,LEXAN3
00442B CB A9       12188                   RES	5,C		;NOT IN VARIABLE
00442D CB 99       12189                   RES	3,C		;NOT IN HEX
00442F FE 20       12190   LEXAN3:         CP	' '
004431 28 E1       12191                   JR	Z,LEXAN1	;PASS SPACES
004433 FE 2C       12192                   CP	','
004435 28 DD       12193                   JR	Z,LEXAN1	;PASS COMMAS
004437 FE 47       12194                   CP	'G'
004439 38 02       12195                   JR	C,LEXAN4
00443B CB 99       12196                   RES	3,C		;NOT IN HEX
00443D FE 22       12197   LEXAN4:         CP	'"'
00443F 20 05       12198                   JR	NZ,LEXAN5
004441 CB 11       12199                   RL	C
004443 3F          12200                   CCF			;TOGGLE C7
004444 CB 19       12201                   RR	C
004446 CB 61       12202   LEXAN5:         BIT	4,C
004448 28 10       12203                   JR	Z,LEXAN6
00444A CB A1       12204                   RES	4,C
00444C C5          12205                   PUSH	BC
00444D D5          12206                   PUSH	DE
00444E CD 8A 43    12207                   CALL	LINNUM		;GET LINE NUMBER
004451 D1          12208                   POP	DE
004452 C1          12209                   POP	BC
004453 7C          12210                   LD	A,H
004454 B5          12211                   OR	L
004455 C4 BF 44    12212                   CALL	NZ,ENCODE	;ENCODE LINE NUMBER
004458 18 BE       12213                   JR	LEXAN2		;CONTINUE
00445A             12214   ;
00445A 0D          12215   LEXAN6:         DEC	C
00445B 28 09       12216                   JR	Z,LEXAN7	;C=1 (LEFT)
00445D 0C          12217                   INC	C
00445E 20 B4       12218                   JR	NZ,LEXAN1
004460 B7          12219                   OR	A
004461 F4 A3 3F    12220                   CALL	P,LEX		;TOKENISE IF POSS.
004464 18 12       12221                   JR	LEXAN8
004466             12222   ;
004466 FE 2A       12223   LEXAN7:         CP	'*'
004468 28 16       12224                   JR	Z,LEXAN9
00446A B7          12225                   OR	A
00446B F4 A3 3F    12226                   CALL	P,LEX		;TOKENISE IF POSS.
00446E FE 8F       12227                   CP	TOKLO
004470 38 06       12228                   JR	C,LEXAN8
004472 FE 94       12229                   CP	TOKHI+1
004474 30 02       12230                   JR	NC,LEXAN8
004476 C6 40       12231                   ADD	A,OFFSET	;LEFT VERSION
004478 FE F4       12232   LEXAN8:         CP	TREM
00447A 28 04       12233                   JR	Z,LEXAN9
00447C FE DC       12234                   CP	TDATA
00447E 20 02       12235                   JR	NZ,LEXANA
004480 CB F1       12236   LEXAN9:         SET	6,C		;QUIT TOKENISING
004482 FE A4       12237   LEXANA:         CP	TFN
004484 28 09       12238                   JR	Z,LEXANB
004486 FE F2       12239                   CP	TPROC
004488 28 05       12240                   JR	Z,LEXANB
00448A CD 06 44    12241                   CALL	RANGE2
00448D 38 02       12242                   JR	C,LEXANC
00448F CB E9       12243   LEXANB:         SET	5,C		;IN VARIABLE/FN/PROC
004491 FE 26       12244   LEXANC:         CP	'&'
004493 20 02       12245                   JR	NZ,LEXAND
004495 CB D9       12246                   SET	3,C		;IN HEX
004497 21 B6 44    12247   LEXAND:         LD	HL,LIST1
00449A C5          12248                   PUSH	BC
00449B 01 06 00    12249                   LD	BC,LIST1L
00449E ED B1       12250                   CPIR
0044A0 C1          12251                   POP	BC
0044A1 20 02       12252                   JR	NZ,LEXANE
0044A3 CB E1       12253                   SET	4,C		;ACCEPT LINE NUMBER
0044A5 21 BA 44    12254   LEXANE:         LD	HL,LIST2
0044A8 C5          12255                   PUSH	BC
0044A9 01 05 00    12256                   LD	BC,LIST2L
0044AC ED B1       12257                   CPIR
0044AE C1          12258                   POP	BC
0044AF 20 02       12259                   JR	NZ,LEXANF
0044B1 CB C1       12260                   SET	0,C		;ENTER LEFT MODE
0044B3 C3 14 44    12261   LEXANF:         JP	LEXAN1
0044B6             12262   ;
0044B6 E5          12263   LIST1:          DB	TGOTO
0044B7 E4          12264                   DB	TGOSUB
0044B8 F7          12265                   DB	TRESTORE
0044B9 FC          12266                   DB	TTRACE
0044BA 8C          12267   LIST2:          DB	TTHEN
0044BB 8B          12268                   DB	TELSE
0044BC             12269   LIST1L:         EQU	$-LIST1
0044BC F5          12270                   DB	TREPEAT
0044BD 85          12271                   DB	TERROR
0044BE 3A          12272                   DB	':'
0044BF             12273   LIST2L:         EQU	$-LIST2
0044BF             12274   ;
0044BF             12275   ;ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
0044BF             12276   ;   Inputs: HL=line number, DE=string pointer
0044BF             12277   ;  Outputs: DE updated, BIT 4,C set.
0044BF             12278   ; Destroys: A,B,C,D,E,H,L,F
0044BF             12279   ;
0044BF CB E1       12280   ENCODE:         SET	4,C
0044C1 EB          12281                   EX	DE,HL
0044C2 36 8D       12282                   LD	(HL),TLINO
0044C4 23          12283                   INC	HL
0044C5 7A          12284                   LD	A,D
0044C6 E6 C0       12285                   AND	0C0H
0044C8 0F          12286                   RRCA
0044C9 0F          12287                   RRCA
0044CA 47          12288                   LD	B,A
0044CB 7B          12289                   LD	A,E
0044CC E6 C0       12290                   AND	0C0H
0044CE B0          12291                   OR	B
0044CF 0F          12292                   RRCA
0044D0 0F          12293                   RRCA
0044D1 EE 54       12294                   XOR	01010100B
0044D3 77          12295                   LD	(HL),A
0044D4 23          12296                   INC	HL
0044D5 7B          12297                   LD	A,E
0044D6 E6 3F       12298                   AND	3FH
0044D8 F6 40       12299                   OR	'@'
0044DA 77          12300                   LD	(HL),A
0044DB 23          12301                   INC	HL
0044DC 7A          12302                   LD	A,D
0044DD E6 3F       12303                   AND	3FH
0044DF F6 40       12304                   OR	'@'
0044E1 77          12305                   LD	(HL),A
0044E2 23          12306                   INC	HL
0044E3 EB          12307                   EX	DE,HL
0044E4 C9          12308                   RET
0044E5             12309   ;
0044E5             12310   ;TEXT - OUTPUT MESSAGE.
0044E5             12311   ;   Inputs: HL addresses text (terminated by nul)
0044E5             12312   ;  Outputs: HL addresses character following nul.
0044E5             12313   ; Destroys: A,H,L,F
0044E5             12314   ;
0044E5 2A EE 54    12315   REPORT:         LD	HL,(ERRTXT)
0044E8 7E          12316   TEXT_:          LD	A,(HL)
0044E9 23          12317                   INC	HL
0044EA B7          12318                   OR	A
0044EB C8          12319                   RET	Z
0044EC FE 0A       12320                   CP	LF
0044EE 28 05       12321                   JR	Z,TEXTLF	;Token for TINT
0044F0 CD 1B 41    12322                   CALL	OUT
0044F3 18 F3       12323                   JR	TEXT_
0044F5             12324   ;
0044F5 CD 02 41    12325   TEXTLF:         CALL	OUTCHR
0044F8 18 EE       12326                   JR	TEXT_
0044FA             12327   ;
0044FA             12328   ;TELL - OUTPUT MESSAGE.
0044FA             12329   ;   Inputs: Text follows subroutine call (term=nul)
0044FA             12330   ; Destroys: A,F
0044FA             12331   ;
0044FA E3          12332   TELL:           EX	(SP),HL		;GET RETURN ADDRESS
0044FB CD E8 44    12333                   CALL	TEXT_
0044FE E3          12334                   EX	(SP),HL
0044FF C9          12335                   RET
004500             12336   ;
004500             12337   ; NLIST - Check for end of list
004500             12338   ;
004500 CD 0B 45    12339   NLIST:          CALL	NXT
004503 FE 2C       12340                   CP	','		;ANOTHER VARIABLE?
004505 28 0A       12341                   JR	Z,NXT1
004507 C1          12342                   POP	BC		;DITCH RETURN ADDRESS
004508 C3 99 24    12343                   JP	XEQ
00450B             12344   ;
00450B FD 7E 00    12345   NXT:            LD	A,(IY)
00450E FE 20       12346                   CP	' '
004510 C0          12347                   RET	NZ
004511 FD 23       12348   NXT1:           INC	IY
004513 18 F6       12349                   JR	NXT
004515             12350   ;
004515             12351   ;                END	START
004515             12352   ; --- End main.asm ---
004515             12353   
004515             12354   ; --- Begin math.asm ---
004515             12355   ;
004515             12356   ;Automatically created from original source on 2024-12-15 15:29:12
004515             12357   ;
004515             12358                   .ASSUME ADL = 0
004515             12359   ;	.ORG 0x0000
004515             12360   ;                SEGMENT CODE
004515             12361   ;
004515             12362   ;Z80 FLOATING POINT PACKAGE
004515             12363   ;(C) COPYRIGHT  R.T.RUSSELL  1986-2024
004515             12364   ;VERSION 0.0, 26-10-1986
004515             12365   ;VERSION 0.1, 14-12-1988 (BUG FIX)
004515             12366   ;VERSION 5.0, 16-06-2024 (SHIFTS ADDED)
004515             12367   ;
004515             12368   ;BINARY FLOATING POINT REPRESENTATION:
004515             12369   ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
004515             12370   ;    8 BIT EXCESS-128 SIGNED EXPONENT
004515             12371   ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
004515             12372   ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
004515             12373   ;
004515             12374   ;BINARY INTEGER REPRESENTATION:
004515             12375   ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
004515             12376   ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
004515             12377   ;
004515             12378   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
004515             12379   ;                            EXPONENT - C
004515             12380   ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
004515             12381   ;                               EXPONENT - B
004515             12382   ;
004515             12383   ;Error codes:
004515             12384   ;
004515             12385   BADOP:          EQU	1		;Bad operation code
004515             12386   DIVBY0:         EQU	18		;Division by zero
004515             12387   TOOBIG:         EQU	20		;Too big
004515             12388   NGROOT:         EQU	21		;Negative root
004515             12389   LOGRNG:         EQU	22		;Log range
004515             12390   ACLOST:         EQU	23		;Accuracy lost
004515             12391   EXPRNG:         EQU	24		;Exp range
004515             12392   ;
004515             12393   ;                XDEF	FPP
004515             12394   ;                XREF	STORE5
004515             12395   ;                XREF	DLOAD5
004515             12396   ;
004515             12397   ;Call entry and despatch code:
004515             12398   ;
004515 FD E5       12399   FPP:            PUSH	IY		;Save IY
004517 FD 21 00 00 12400                   LD	IY,0
00451B FD 39       12401                   ADD	IY,SP		;Save SP in IY
00451D CD 2C 45    12402                   CALL	OP		;Perform operation
004520 BF          12403                   CP	A		;Good return (Z, NC)
004521 FD E1       12404   EXITmat:           POP	IY		;Restore IY
004523 C9          12405                   RET			;Return to caller
004524             12406   ;
004524             12407   ;Error exit:
004524             12408   ;
004524 3E 01       12409   BADmat:            LD	A,BADOP		;"Bad operation code"
004526 FD F9       12410   ERROR_mat:         LD	SP,IY		;Restore SP from IY
004528 B7          12411                   OR	A		;Set NZ
004529 37          12412                   SCF			;Set C
00452A 18 F5       12413                   JR	EXITmat
00452C             12414   ;
00452C             12415   ;Perform operation or function:
00452C             12416   ;
00452C             12417   ; OP:             CP	(RTABLE-DTABLE)/2
00452C FE 2E       12418   OP:             CP	RTABLE-DTABLE/2
00452E 30 F4       12419                   JR	NC,BADmat
004530             12420                   ; CP	(FTABLE-DTABLE)/2
004530 FE 10       12421                   CP	FTABLE-DTABLE/2
004532 30 07       12422                   JR	NC,DISPAT
004534 08          12423                   EX	AF,AF'
004535 78          12424                   LD	A,B
004536 B1          12425                   OR	C		;Both integer?
004537 C4 A5 4E    12426                   CALL	NZ,FLOATA	;No, so float both
00453A 08          12427                   EX	AF,AF'
00453B E5          12428   DISPAT:         PUSH	HL
00453C 21 4C 45    12429                   LD	HL,DTABLE
00453F C5          12430                   PUSH	BC
004540 87          12431                   ADD	A,A		;A = op-code * 2
004541 4F          12432                   LD	C,A
004542 06 00       12433                   LD	B,0		;BC = op-code * 2
004544 09          12434                   ADD	HL,BC
004545 7E          12435                   LD	A,(HL)		;Get low byte
004546 23          12436                   INC	HL
004547 66          12437                   LD	H,(HL)		;Get high byte
004548 6F          12438                   LD	L,A
004549 C1          12439                   POP	BC
00454A E3          12440                   EX	(SP),HL
00454B C9          12441                   RET			;Off to routine
00454C             12442   ;
00454C             12443   ;Despatch table:
00454C             12444   ;
00454C CB 45       12445   DTABLE:         DW	IAND		;0  & (INTEGER)
00454E 18 46       12446                   DW	IBDIV		;1  DIV
004550 DD 45       12447                   DW	IEOR		;2  EOR
004552 01 46       12448                   DW	IMOD		;3  MOD
004554 EF 45       12449                   DW	IOR		;4  |
004556 16 48       12450                   DW	ILE		;5  <=
004558 23 48       12451                   DW	INE		;6  <>
00455A 0B 48       12452                   DW	IGE		;7  >=
00455C F4 47       12453                   DW	ILT		;8  <
00455E 2E 48       12454                   DW	IEQ		;9  =
004560 E2 46       12455                   DW	IMUL		;10 *
004562 3B 46       12456                   DW	IADD		;11 +
004564 FF 47       12457                   DW	IGT		;12 >
004566 25 46       12458                   DW	ISUB		;13 -
004568 5D 47       12459                   DW	IPOW		;14 ^
00456A 9A 46       12460                   DW	IDIV		;15 /
00456C             12461   ;
00456C 7E 48       12462   FTABLE:         DW	ABS		;16 ABS
00456E DA 4B       12463                   DW	ACS		;17 ACS
004570 36 4B       12464                   DW	ASN		;18 ASN
004572 5B 4B       12465                   DW	ATN		;19 ATN
004574 74 49       12466                   DW	COS		;20 COS
004576 A8 48       12467                   DW	DEG		;21 DEG
004578 19 4A       12468                   DW	EXP		;22 EXP
00457A EE 48       12469                   DW	INT_		;23 INT_
00457C A4 4A       12470                   DW	LN		;24 LN
00457E 24 4B       12471                   DW	LOG		;25 LOG
004580 89 48       12472                   DW	CPL_		;26 NOT
004582 B0 48       12473                   DW	RAD		;27 RAD
004584 C6 48       12474                   DW	SGN		;28 SGN
004586 7F 49       12475                   DW	SIN		;29 SIN
004588 04 49       12476                   DW	SQR		;30 SQR
00458A 57 49       12477                   DW	TAN		;31 TAN
00458C             12478   ;
00458C 21 4F       12479                   DW	ZEROmat		;32 ZERO
00458E F8 49       12480                   DW	FONE		;33 FONE
004590 32 48       12481                   DW	TRUE		;34 TRUE
004592 9C 48       12482                   DW	PI		;35 PI
004594             12483   ;
004594 D6 48       12484                   DW	VAL		;36 VAL
004596 E2 4B       12485                   DW	STRmat		;37 STR$
004598             12486   ;
004598 F7 4D       12487                   DW	SFIXmat		;38 FIX
00459A B2 4E       12488                   DW	SFLOAT		;39 FLOAT
00459C             12489   ;
00459C F7 4E       12490                   DW	FTEST		;40 TEST
00459E 08 4F       12491                   DW	FCOMP		;41 COMPARE
0045A0             12492   ;
0045A0 3D 48       12493                   DW	ISHL		;42 <<
0045A2 3D 48       12494                   DW	ISHX		;43 <<<
0045A4 4A 48       12495                   DW	ISAR		;44 >>
0045A6 5C 48       12496                   DW	ISHR		;45 >>>
0045A8             12497   ;
0045A8 C8 45       12498   RTABLE:         DW	FAND		;& (FLOATING-POINT)
0045AA 15 46       12499                   DW	FBDIV		;DIV
0045AC DA 45       12500                   DW	FEOR		;EOR
0045AE FE 45       12501                   DW	FMOD		;MOD
0045B0 EC 45       12502                   DW	FOR		;|
0045B2 11 48       12503                   DW	FLE		;<=
0045B4 1E 48       12504                   DW	FNE		;<>
0045B6 06 48       12505                   DW	FGE		;>=
0045B8 EF 47       12506                   DW	FLT		;<
0045BA 29 48       12507                   DW	FEQ		;=
0045BC 0D 47       12508                   DW	FMUL		;*
0045BE 45 46       12509                   DW	FADD		;+
0045C0 FA 47       12510                   DW	FGT		;>
0045C2 2F 46       12511                   DW	FSUB		;-
0045C4 C5 47       12512                   DW	FPOW		;^
0045C6 9D 46       12513                   DW	FDIV		;/
0045C8             12514   ;
0045C8             12515   ;ARITHMETIC AND LOGICAL OPERATORS:
0045C8             12516   ;All take two arguments, in HLH'L'C & DED'E'B.
0045C8             12517   ;Output in HLH'L'C
0045C8             12518   ;All registers except IX, IY destroyed.
0045C8             12519   ; (N.B. FPOW destroys IX).
0045C8             12520   ;
0045C8             12521   ;FAND - Floating-point AND.
0045C8             12522   ;IAND - Integer AND.
0045C8             12523   ;
0045C8 CD EE 4D    12524   FAND:           CALL	FIX2
0045CB 7C          12525   IAND:           LD	A,H
0045CC A2          12526                   AND	D
0045CD 67          12527                   LD	H,A
0045CE 7D          12528                   LD	A,L
0045CF A3          12529                   AND	E
0045D0 6F          12530                   LD	L,A
0045D1 D9          12531                   EXX
0045D2 7C          12532                   LD	A,H
0045D3 A2          12533                   AND	D
0045D4 67          12534                   LD	H,A
0045D5 7D          12535                   LD	A,L
0045D6 A3          12536                   AND	E
0045D7 6F          12537                   LD	L,A
0045D8 D9          12538                   EXX
0045D9 C9          12539                   RET
0045DA             12540   ;
0045DA             12541   ;FEOR - Floating-point exclusive-OR.
0045DA             12542   ;IEOR - Integer exclusive-OR.
0045DA             12543   ;
0045DA CD EE 4D    12544   FEOR:           CALL	FIX2
0045DD 7C          12545   IEOR:           LD	A,H
0045DE AA          12546                   XOR	D
0045DF 67          12547                   LD	H,A
0045E0 7D          12548                   LD	A,L
0045E1 AB          12549                   XOR	E
0045E2 6F          12550                   LD	L,A
0045E3 D9          12551                   EXX
0045E4 7C          12552                   LD	A,H
0045E5 AA          12553                   XOR	D
0045E6 67          12554                   LD	H,A
0045E7 7D          12555                   LD	A,L
0045E8 AB          12556                   XOR	E
0045E9 6F          12557                   LD	L,A
0045EA D9          12558                   EXX
0045EB C9          12559                   RET
0045EC             12560   ;
0045EC             12561   ;FOR - Floating-point OR.
0045EC             12562   ;IOR - Integer OR.
0045EC             12563   ;
0045EC CD EE 4D    12564   FOR:            CALL	FIX2
0045EF 7C          12565   IOR:            LD	A,H
0045F0 B2          12566                   OR	D
0045F1 67          12567                   LD	H,A
0045F2 7D          12568                   LD	A,L
0045F3 B3          12569                   OR	E
0045F4 6F          12570                   LD	L,A
0045F5 D9          12571                   EXX
0045F6 7C          12572                   LD	A,H
0045F7 B2          12573                   OR	D
0045F8 67          12574                   LD	H,A
0045F9 7D          12575                   LD	A,L
0045FA B3          12576                   OR	E
0045FB 6F          12577                   LD	L,A
0045FC D9          12578                   EXX
0045FD C9          12579                   RET
0045FE             12580   ;
0045FE             12581   ;FMOD - Floating-point remainder.
0045FE             12582   ;IMOD - Integer remainder.
0045FE             12583   ;
0045FE CD EE 4D    12584   FMOD:           CALL	FIX2
004601 7C          12585   IMOD:           LD	A,H
004602 AA          12586                   XOR	D		;DIV RESULT SIGN
004603 CB 7C       12587                   BIT	7,H
004605 CD F5 50    12588                   CALL	ABS2		;MAKE BOTH POSITIVE
004608 3E DF       12589                   LD	A,-33
00460A CD 31 50    12590                   CALL	DIVA		;DIVIDE
00460D D9          12591                   EXX
00460E 0E 00       12592                   LD	C,0		;INTEGER MARKER
004610 08          12593                   EX	AF,AF'
004611 C8          12594                   RET	Z
004612 C3 06 4E    12595                   JP	NEGATE
004615             12596   ;
004615             12597   ;BDIV - Integer division.
004615             12598   ;
004615 CD EE 4D    12599   FBDIV:          CALL	FIX2
004618 CD 01 46    12600   IBDIV:          CALL	IMOD
00461B B7          12601                   OR	A
00461C CD DC 4E    12602                   CALL	SWAP
00461F 0E 00       12603                   LD	C,0
004621 F0          12604                   RET	P
004622 C3 06 4E    12605                   JP	NEGATE
004625             12606   ;
004625             12607   ;ISUB - Integer subtraction.
004625             12608   ;FSUB - Floating point subtraction with rounding.
004625             12609   ;
004625 CD 64 4F    12610   ISUB:           CALL	SUB
004628 E0          12611                   RET	PO
004629 CD 5E 4F    12612                   CALL	ADD
00462C CD A9 4E    12613                   CALL	FLOAT2
00462F 7A          12614   FSUB:           LD	A,D
004630 EE 80       12615                   XOR	80H		;CHANGE SIGN THEN ADD
004632 57          12616                   LD	D,A
004633 18 10       12617                   JR	FADD
004635             12618   ;
004635             12619   ;Reverse subtract.
004635             12620   ;
004635 7C          12621   RSUB:           LD	A,H
004636 EE 80       12622                   XOR	80H
004638 67          12623                   LD	H,A
004639 18 0A       12624                   JR	FADD
00463B             12625   ;
00463B             12626   ;IADD - Integer addition.
00463B             12627   ;FADD - Floating point addition with rounding.
00463B             12628   ;
00463B CD 5E 4F    12629   IADD:           CALL	ADD
00463E E0          12630                   RET	PO
00463F CD 64 4F    12631                   CALL	SUB
004642 CD A9 4E    12632                   CALL	FLOAT2
004645 05          12633   FADD:           DEC	B
004646 04          12634                   INC	B
004647 C8          12635                   RET	Z		;ARG 2 ZERO
004648 0D          12636                   DEC	C
004649 0C          12637                   INC	C
00464A CA DC 4E    12638                   JP	Z,SWAP		;ARG 1 ZERO
00464D D9          12639                   EXX
00464E 01 00 00    12640                   LD	BC,0		;INITIALISE
004651 D9          12641                   EXX
004652 7C          12642                   LD	A,H
004653 AA          12643                   XOR	D		;XOR SIGNS
004654 F5          12644                   PUSH	AF
004655 78          12645                   LD	A,B
004656 B9          12646                   CP	C		;COMPARE EXPONENTS
004657 DC DC 4E    12647                   CALL	C,SWAP		;MAKE DED'E'B LARGEST
00465A 78          12648                   LD	A,B
00465B CB FC       12649                   SET	7,H		;IMPLIED 1
00465D C4 DE 4D    12650                   CALL	NZ,FIX		;ALIGN
004660 F1          12651                   POP	AF
004661 7A          12652                   LD	A,D		;SIGN OF LARGER
004662 CB FA       12653                   SET	7,D		;IMPLIED 1
004664 FA 71 46    12654                   JP	M,FADD3		;SIGNS DIFFERENT
004667 CD 5E 4F    12655                   CALL	ADD		;HLH'L'=HLH'L'+DED'E'
00466A DC E4 4E    12656                   CALL	C,DIV2		;NORMALISE
00466D CB FC       12657                   SET	7,H
00466F 18 0A       12658                   JR	FADD4
004671             12659   ;
004671 CD 64 4F    12660   FADD3:          CALL	SUB		;HLH'L'=HLH'L'-DED'E'
004674 DC 1A 4E    12661                   CALL	C,NEG		;NEGATE HLH'L'B'C'
004677 CD 86 4E    12662                   CALL	FLO48
00467A 2F          12663                   CPL			;CHANGE RESULT SIGN
00467B D9          12664   FADD4:          EXX
00467C EB          12665                   EX	DE,HL
00467D 21 00 80    12666                   LD	HL,8000H
004680 B7          12667                   OR	A		;CLEAR CARRY
004681 ED 42       12668                   SBC	HL,BC
004683 EB          12669                   EX	DE,HL
004684 D9          12670                   EXX
004685 CC D6 4E    12671                   CALL	Z,ODD		;ROUND UNBIASSED
004688 DC C8 4E    12672                   CALL	C,ADD1		;ROUND UP
00468B DC F0 4E    12673                   CALL	C,INCC
00468E CB BC       12674                   RES	7,H
004690 0D          12675                   DEC	C
004691 0C          12676                   INC	C
004692 CA 21 4F    12677                   JP	Z,ZEROmat
004695 B7          12678                   OR	A		;RESULT SIGNQ
004696 F0          12679                   RET	P		;POSITIVE
004697 CB FC       12680                   SET	7,H		;NEGATIVE
004699 C9          12681                   RET
00469A             12682   ;
00469A             12683   ;IDIV - Integer division.
00469A             12684   ;FDIV - Floating point division with rounding.
00469A             12685   ;
00469A CD A9 4E    12686   IDIV:           CALL	FLOAT2
00469D 05          12687   FDIV:           DEC	B		;TEST FOR ZERO
00469E 04          12688                   INC	B
00469F 3E 12       12689                   LD	A,DIVBY0
0046A1 CA 26 45    12690                   JP	Z,ERROR_mat		;"Division by zero"
0046A4 0D          12691                   DEC	C		;TEST FOR ZERO
0046A5 0C          12692                   INC	C
0046A6 C8          12693                   RET	Z
0046A7 7C          12694                   LD	A,H
0046A8 AA          12695                   XOR	D		;CALC. RESULT SIGN
0046A9 08          12696                   EX	AF,AF'		;SAVE SIGN
0046AA CB FA       12697                   SET	7,D		;REPLACE IMPLIED 1's
0046AC CB FC       12698                   SET	7,H
0046AE C5          12699                   PUSH	BC		;SAVE EXPONENTS
0046AF 42          12700                   LD	B,D		;LOAD REGISTERS
0046B0 4B          12701                   LD	C,E
0046B1 11 00 00    12702                   LD	DE,0
0046B4 D9          12703                   EXX
0046B5 42          12704                   LD	B,D
0046B6 4B          12705                   LD	C,E
0046B7 11 00 00    12706                   LD	DE,0
0046BA 3E E0       12707                   LD	A,-32		;LOOP COUNTER
0046BC CD 31 50    12708                   CALL	DIVA		;DIVIDE
0046BF D9          12709                   EXX
0046C0 CB 7A       12710                   BIT	7,D
0046C2 D9          12711                   EXX
0046C3 CC 4C 50    12712                   CALL	Z,DIVB		;NORMALISE & INC A
0046C6 EB          12713                   EX	DE,HL
0046C7 D9          12714                   EXX
0046C8 CB 38       12715                   SRL	B		;DIVISOR/2
0046CA CB 19       12716                   RR	C
0046CC B7          12717                   OR	A		;CLEAR CARRY
0046CD ED 42       12718                   SBC	HL,BC		;REMAINDER-DIVISOR/2
0046CF 3F          12719                   CCF
0046D0 EB          12720                   EX	DE,HL		;RESULT IN HLH'L'
0046D1 CC D6 4E    12721                   CALL	Z,ODD		;ROUND UNBIASSED
0046D4 DC C8 4E    12722                   CALL	C,ADD1		;ROUND UP
0046D7 C1          12723                   POP	BC		;RESTORE EXPONENTS
0046D8 DC F0 4E    12724                   CALL	C,INCC
0046DB 1F          12725                   RRA			;LSB OF A TO CARRY
0046DC 79          12726                   LD	A,C		;COMPUTE NEW EXPONENT
0046DD 98          12727                   SBC	A,B
0046DE 3F          12728                   CCF
0046DF C3 46 47    12729                   JP	CHKOVF
0046E2             12730   ;
0046E2             12731   ;IMUL - Integer multiplication.
0046E2             12732   ;
0046E2 7C          12733   IMUL:           LD	A,H
0046E3 AA          12734                   XOR	D
0046E4 CD F5 50    12735                   CALL	ABS2		;MAKE BOTH POSITIVE
0046E7 3E DF       12736                   LD	A,-33
0046E9 CD 5F 50    12737                   CALL	MULA		;MULTIPLY
0046EC D9          12738                   EXX
0046ED 0E BF       12739                   LD	C,191		;PRESET EXPONENT
0046EF CD 01 4F    12740                   CALL	TESTmat		;TEST RANGE
0046F2 20 0D       12741                   JR	NZ,IMUL1	;TOO BIG
0046F4 CB 7A       12742                   BIT	7,D
0046F6 20 09       12743                   JR	NZ,IMUL1
0046F8 CD DC 4E    12744                   CALL	SWAP
0046FB 4A          12745                   LD	C,D		;INTEGER MARKER
0046FC 08          12746                   EX	AF,AF'
0046FD F0          12747                   RET	P
0046FE C3 06 4E    12748                   JP	NEGATE
004701             12749   ;
004701 0D          12750   IMUL1:          DEC	C
004702 CD C8 50    12751                   CALL	SLA8
004705 F2 01 47    12752                   JP	P,IMUL1		;NORMALISE
004708 08          12753                   EX	AF,AF'
004709 F8          12754                   RET	M
00470A CB BC       12755                   RES	7,H		;POSITIVE
00470C C9          12756                   RET
00470D             12757   ;
00470D             12758   ;FMUL - Floating point multiplication with rounding.
00470D             12759   ;
00470D 05          12760   FMUL:           DEC	B		;TEST FOR ZERO
00470E 04          12761                   INC	B
00470F CA 21 4F    12762                   JP	Z,ZEROmat
004712 0D          12763                   DEC	C		;TEST FOR ZERO
004713 0C          12764                   INC	C
004714 C8          12765                   RET	Z
004715 7C          12766                   LD	A,H
004716 AA          12767                   XOR	D		;CALC. RESULT SIGN
004717 08          12768                   EX	AF,AF'
004718 CB FA       12769                   SET	7,D		;REPLACE IMPLIED 1's
00471A CB FC       12770                   SET	7,H
00471C C5          12771                   PUSH	BC		;SAVE EXPONENTS
00471D 44          12772                   LD	B,H		;LOAD REGISTERS
00471E 4D          12773                   LD	C,L
00471F 21 00 00    12774                   LD	HL,0
004722 D9          12775                   EXX
004723 44          12776                   LD	B,H
004724 4D          12777                   LD	C,L
004725 21 00 00    12778                   LD	HL,0
004728 3E E0       12779                   LD	A,-32		;LOOP COUNTER
00472A CD 5F 50    12780                   CALL	MULA		;MULTIPLY
00472D DC 73 50    12781                   CALL	C,MULB		;NORMALISE & INC A
004730 D9          12782                   EXX
004731 E5          12783                   PUSH	HL
004732 21 00 80    12784                   LD	HL,8000H
004735 B7          12785                   OR	A		;CLEAR CARRY
004736 ED 52       12786                   SBC	HL,DE
004738 E1          12787                   POP	HL
004739 CC D6 4E    12788                   CALL	Z,ODD		;ROUND UNBIASSED
00473C DC C8 4E    12789                   CALL	C,ADD1		;ROUND UP
00473F C1          12790                   POP	BC		;RESTORE EXPONENTS
004740 DC F0 4E    12791                   CALL	C,INCC
004743 1F          12792                   RRA			;LSB OF A TO CARRY
004744 79          12793                   LD	A,C		;COMPUTE NEW EXPONENT
004745 88          12794                   ADC	A,B
004746 38 05       12795   CHKOVF:         JR	C,CHKO1
004748 F2 21 4F    12796                   JP	P,ZEROmat		;UNDERFLOW
00474B 18 03       12797                   JR	CHKO2
00474D FA F2 4E    12798   CHKO1:          JP	M,OFLOW		;OVERFLOW
004750 C6 80       12799   CHKO2:          ADD	A,80H
004752 4F          12800                   LD	C,A
004753 CA 21 4F    12801                   JP	Z,ZEROmat
004756 08          12802                   EX	AF,AF'		;RESTORE SIGN BIT
004757 CB BC       12803                   RES	7,H
004759 F0          12804                   RET	P
00475A CB FC       12805                   SET	7,H
00475C C9          12806                   RET
00475D             12807   ;
00475D             12808   ;IPOW - Integer involution.
00475D             12809   ;
00475D CD DC 4E    12810   IPOW:           CALL	SWAP
004760 CB 7C       12811                   BIT	7,H
004762 F5          12812                   PUSH	AF		;SAVE SIGN
004763 C4 06 4E    12813                   CALL	NZ,NEGATE
004766 48          12814   IPOW0:          LD	C,B
004767 06 20       12815                   LD	B,32		;LOOP COUNTER
004769 CD 7B 4F    12816   IPOW1:          CALL	X2
00476C 38 08       12817                   JR	C,IPOW2
00476E 10 F9       12818                   DJNZ	IPOW1
004770 F1          12819                   POP	AF
004771 D9          12820                   EXX
004772 2C          12821                   INC	L		;RESULT=1
004773 D9          12822                   EXX
004774 4C          12823                   LD	C,H
004775 C9          12824                   RET
004776             12825   ;
004776 F1          12826   IPOW2:          POP	AF
004777 C5          12827                   PUSH	BC
004778 EB          12828                   EX	DE,HL
004779 E5          12829                   PUSH	HL
00477A D9          12830                   EXX
00477B EB          12831                   EX	DE,HL
00477C E5          12832                   PUSH	HL
00477D D9          12833                   EXX
00477E DD 21 00 00 12834                   LD	IX,0
004782 DD 39       12835                   ADD	IX,SP
004784 28 34       12836                   JR	Z,IPOW4
004786 C5          12837                   PUSH	BC
004787 D9          12838                   EXX
004788 D5          12839                   PUSH	DE
004789 D9          12840                   EXX
00478A D5          12841                   PUSH	DE
00478B CD B2 4E    12842                   CALL	SFLOAT
00478E CD 90 4A    12843                   CALL	RECIP
004791 CD 06 32    12844                   CALL	STORE5
004794 18 1D       12845                   JR	IPOW5
004796             12846   ;
004796 C5          12847   IPOW3:          PUSH	BC
004797 D9          12848                   EXX
004798 CB 23       12849                   SLA	E
00479A CB 12       12850                   RL	D
00479C D5          12851                   PUSH	DE
00479D D9          12852                   EXX
00479E CB 13       12853                   RL	E
0047A0 CB 12       12854                   RL	D
0047A2 D5          12855                   PUSH	DE
0047A3 3E 0A       12856                   LD	A,'*' & 0FH
0047A5 F5          12857                   PUSH	AF
0047A6 CD 8D 4F    12858                   CALL	COPY
0047A9 CD 2C 45    12859                   CALL	OP		;SQUARE
0047AC F1          12860                   POP	AF
0047AD CD F1 19    12861                   CALL	DLOAD5
0047B0 DC 2C 45    12862                   CALL	C,OP		;MULTIPLY BY X
0047B3 D1          12863   IPOW5:          POP	DE
0047B4 D9          12864                   EXX
0047B5 D1          12865                   POP	DE
0047B6 D9          12866                   EXX
0047B7 79          12867                   LD	A,C
0047B8 C1          12868                   POP	BC
0047B9 4F          12869                   LD	C,A
0047BA 10 DA       12870   IPOW4:          DJNZ	IPOW3
0047BC F1          12871                   POP	AF
0047BD F1          12872                   POP	AF
0047BE F1          12873                   POP	AF
0047BF C9          12874                   RET
0047C0             12875   ;
0047C0 F1          12876   FPOW0:          POP	AF
0047C1 F1          12877                   POP	AF
0047C2 F1          12878                   POP	AF
0047C3 18 A1       12879                   JR	IPOW0
0047C5             12880   ;
0047C5             12881   ;FPOW - Floating-point involution.
0047C5             12882   ;
0047C5 CB 7A       12883   FPOW:           BIT	7,D
0047C7 F5          12884                   PUSH	AF
0047C8 CD DC 4E    12885                   CALL	SWAP
0047CB CD 9B 4F    12886                   CALL	PUSH5
0047CE 0D          12887                   DEC	C
0047CF 0C          12888                   INC	C
0047D0 28 EE       12889                   JR	Z,FPOW0
0047D2 3E 9E       12890                   LD	A,158
0047D4 B9          12891                   CP	C
0047D5 38 08       12892                   JR	C,FPOW1
0047D7 3C          12893                   INC	A
0047D8 CD DE 4D    12894                   CALL	FIX
0047DB 08          12895                   EX	AF,AF'
0047DC F2 C0 47    12896                   JP	P,FPOW0
0047DF CD DC 4E    12897   FPOW1:          CALL	SWAP
0047E2 CD A7 4A    12898                   CALL	LN0
0047E5 CD A4 4F    12899                   CALL	POP5
0047E8 F1          12900                   POP	AF
0047E9 CD 0D 47    12901                   CALL	FMUL
0047EC C3 1C 4A    12902                   JP	EXP0
0047EF             12903   ;
0047EF             12904   ;Integer and floating-point compare.
0047EF             12905   ;Result is TRUE (-1) or FALSE (0).
0047EF             12906   ;
0047EF CD 2B 4F    12907   FLT:            CALL	FCP
0047F2 18 03       12908                   JR	ILT1
0047F4 CD 1E 4F    12909   ILT:            CALL	ICP
0047F7 D0          12910   ILT1:           RET	NC
0047F8 18 38       12911                   JR	TRUE
0047FA             12912   ;
0047FA CD 2B 4F    12913   FGT:            CALL	FCP
0047FD 18 03       12914                   JR	IGT1
0047FF CD 1E 4F    12915   IGT:            CALL	ICP
004802 C8          12916   IGT1:           RET	Z
004803 D8          12917                   RET	C
004804 18 2C       12918                   JR	TRUE
004806             12919   ;
004806 CD 2B 4F    12920   FGE:            CALL	FCP
004809 18 03       12921                   JR	IGE1
00480B CD 1E 4F    12922   IGE:            CALL	ICP
00480E D8          12923   IGE1:           RET	C
00480F 18 21       12924                   JR	TRUE
004811             12925   ;
004811 CD 2B 4F    12926   FLE:            CALL	FCP
004814 18 03       12927                   JR	ILE1
004816 CD 1E 4F    12928   ILE:            CALL	ICP
004819 28 17       12929   ILE1:           JR	Z,TRUE
00481B D0          12930                   RET	NC
00481C 18 14       12931                   JR	TRUE
00481E             12932   ;
00481E CD 2B 4F    12933   FNE:            CALL	FCP
004821 18 03       12934                   JR	INE1
004823 CD 1E 4F    12935   INE:            CALL	ICP
004826 C8          12936   INE1:           RET	Z
004827 18 09       12937                   JR	TRUE
004829             12938   ;
004829 CD 2B 4F    12939   FEQ:            CALL	FCP
00482C 18 03       12940                   JR	IEQ1
00482E CD 1E 4F    12941   IEQ:            CALL	ICP
004831 C0          12942   IEQ1:           RET	NZ
004832 21 FF FF    12943   TRUE:           LD	HL,-1
004835 D9          12944                   EXX
004836 21 FF FF    12945                   LD	HL,-1
004839 D9          12946                   EXX
00483A AF          12947                   XOR	A
00483B 4F          12948                   LD	C,A
00483C C9          12949                   RET
00483D             12950   ;
00483D             12951   ;Integer shifts:
00483D             12952   ;
00483D             12953   ISHX:
00483D CD 6E 48    12954   ISHL:           CALL	SHIFTS
004840 28 07       12955                   JR	Z,SHRET
004842 D9          12956   ISHL1:          EXX
004843 29          12957                   ADD	HL,HL
004844 D9          12958                   EXX
004845 ED 6A       12959                   ADC	HL,HL
004847 10 F9       12960                   DJNZ	ISHL1
004849 C9          12961   SHRET:          RET
00484A             12962   ;
00484A CD 6E 48    12963   ISAR:           CALL	SHIFTS
00484D 28 FA       12964                   JR	Z,SHRET
00484F CB 2C       12965   ISAR1:          SRA	H
004851 CB 1D       12966                   RR	L
004853 D9          12967                   EXX
004854 CB 1C       12968                   RR	H
004856 CB 1D       12969                   RR	L
004858 D9          12970                   EXX
004859 10 F4       12971                   DJNZ	ISAR1
00485B C9          12972                   RET
00485C             12973   ;
00485C CD 6E 48    12974   ISHR:           CALL	SHIFTS
00485F 28 E8       12975                   JR	Z,SHRET
004861 CB 3C       12976   ISHR1:          SRL	H
004863 CB 1D       12977                   RR	L
004865 D9          12978                   EXX
004866 CB 1C       12979                   RR	H
004868 CB 1D       12980                   RR	L
00486A D9          12981                   EXX
00486B 10 F4       12982                   DJNZ	ISHR1
00486D C9          12983                   RET
00486E             12984   ;
00486E CD EE 4D    12985   SHIFTS:         CALL	FIX2
004871 7A          12986                   LD	A,D
004872 B3          12987                   OR	E
004873 D9          12988                   EXX
004874 B2          12989                   OR	D
004875 7B          12990                   LD	A,E
004876 D9          12991                   EXX
004877 06 20       12992                   LD	B,32
004879 20 02       12993                   JR	NZ,SHMAX
00487B 47          12994                   LD	B,A
00487C B7          12995                   OR	A
00487D C9          12996   SHMAX:          RET
00487E             12997   ;
00487E             12998   ;FUNCTIONS:
00487E             12999   ;
00487E             13000   ;Result returned in HLH'L'C (floating point)
00487E             13001   ;Result returned in HLH'L' (C=0) (integer)
00487E             13002   ;All registers except IY destroyed.
00487E             13003   ;
00487E             13004   ;ABS - Absolute value
00487E             13005   ;Result is numeric, variable type.
00487E             13006   ;
00487E CB 7C       13007   ABS:            BIT	7,H
004880 C8          13008                   RET	Z		;POSITIVE/ZERO
004881 0D          13009                   DEC	C
004882 0C          13010                   INC	C
004883 CA 06 4E    13011                   JP	Z,NEGATE	;INTEGER
004886 CB BC       13012                   RES	7,H
004888 C9          13013                   RET
004889             13014   ;
004889             13015   ;NOT - Complement integer.
004889             13016   ;Result is integer numeric.
004889             13017   ;
004889 CD F7 4D    13018   CPL_:           CALL	SFIXmat
00488C 7C          13019                   LD	A,H
00488D 2F          13020                   CPL
00488E 67          13021                   LD	H,A
00488F 7D          13022                   LD	A,L
004890 2F          13023                   CPL
004891 6F          13024                   LD	L,A
004892 D9          13025                   EXX
004893 7C          13026                   LD	A,H
004894 2F          13027                   CPL
004895 67          13028                   LD	H,A
004896 7D          13029                   LD	A,L
004897 2F          13030                   CPL
004898 6F          13031                   LD	L,A
004899 D9          13032                   EXX
00489A AF          13033                   XOR	A		;NUMERIC MARKER
00489B C9          13034                   RET
00489C             13035   ;
00489C             13036   ;PI - Return PI (3.141592654)
00489C             13037   ;Result is floating-point numeric.
00489C             13038   ;
00489C 21 0F 49    13039   PI:             LD	HL,490FH
00489F D9          13040                   EXX
0048A0 21 A2 DA    13041                   LD	HL,0DAA2H
0048A3 D9          13042                   EXX
0048A4 0E 81       13043                   LD	C,81H
0048A6 AF          13044                   XOR	A		;NUMERIC MARKER
0048A7 C9          13045                   RET
0048A8             13046   ;
0048A8             13047   ;DEG - Convert radians to degrees
0048A8             13048   ;Result is floating-point numeric.
0048A8             13049   ;
0048A8 CD B8 48    13050   DEG:            CALL	FPI180
0048AB CD 0D 47    13051                   CALL	FMUL
0048AE AF          13052                   XOR	A
0048AF C9          13053                   RET
0048B0             13054   ;
0048B0             13055   ;RAD - Convert degrees to radians
0048B0             13056   ;Result is floating-point numeric.
0048B0             13057   ;
0048B0 CD B8 48    13058   RAD:            CALL	FPI180
0048B3 CD 9D 46    13059                   CALL	FDIV
0048B6 AF          13060                   XOR	A
0048B7 C9          13061                   RET
0048B8             13062   ;
0048B8             13063   ;180/PI
0048B8             13064   ;
0048B8 CD B2 4E    13065   FPI180:         CALL	SFLOAT
0048BB 11 2E 65    13066                   LD	DE,652EH
0048BE D9          13067                   EXX
0048BF 11 D3 E0    13068                   LD	DE,0E0D3H
0048C2 D9          13069                   EXX
0048C3 06 85       13070                   LD	B,85H
0048C5 C9          13071                   RET
0048C6             13072   ;
0048C6             13073   ;SGN - Return -1, 0 or +1
0048C6             13074   ;Result is integer numeric.
0048C6             13075   ;
0048C6 CD 01 4F    13076   SGN:            CALL	TESTmat
0048C9 B1          13077                   OR	C
0048CA C8          13078                   RET	Z		;ZERO
0048CB CB 7C       13079                   BIT	7,H
0048CD C2 32 48    13080                   JP	NZ,TRUE		;-1
0048D0 CD 21 4F    13081                   CALL	ZEROmat
0048D3 C3 C8 4E    13082                   JP	ADD1		;1
0048D6             13083   ;
0048D6             13084   ;VAL - Return numeric value of string.
0048D6             13085   ;Input: ASCII string at IX
0048D6             13086   ;Result is variable type numeric.
0048D6             13087   ;
0048D6 CD E3 50    13088   VAL:            CALL	SIGNQ
0048D9 F5          13089                   PUSH	AF
0048DA CD 34 4D    13090                   CALL	CON
0048DD F1          13091                   POP	AF
0048DE FE 2D       13092                   CP	'-'
0048E0 3E 00       13093                   LD	A,0		;NUMERIC MARKER
0048E2 C0          13094                   RET	NZ
0048E3 0D          13095                   DEC	C
0048E4 0C          13096                   INC	C
0048E5 CA 06 4E    13097                   JP	Z,NEGATE	;ZERO/INTEGER
0048E8 7C          13098                   LD	A,H
0048E9 EE 80       13099                   XOR	80H		;CHANGE SIGN (FP)
0048EB 67          13100                   LD	H,A
0048EC AF          13101                   XOR	A
0048ED C9          13102                   RET
0048EE             13103   ;
0048EE             13104   ;INT - Floor function
0048EE             13105   ;Result is integer numeric.
0048EE             13106   ;
0048EE 0D          13107   INT_:           DEC	C
0048EF 0C          13108                   INC	C
0048F0 C8          13109                   RET	Z		;ZERO/INTEGER
0048F1 3E 9F       13110                   LD	A,159
0048F3 44          13111                   LD	B,H		;B7=SIGN BIT
0048F4 CD DE 4D    13112                   CALL	FIX
0048F7 08          13113                   EX	AF,AF'
0048F8 A0          13114                   AND	B
0048F9 FC C8 4E    13115                   CALL	M,ADD1		;NEGATIVE NON-INTEGER
0048FC 78          13116                   LD	A,B
0048FD B7          13117                   OR	A
0048FE FC 06 4E    13118                   CALL	M,NEGATE
004901 AF          13119                   XOR	A
004902 4F          13120                   LD	C,A
004903 C9          13121                   RET
004904             13122   ;
004904             13123   ;SQR - square root
004904             13124   ;Result is floating-point numeric.
004904             13125   ;
004904 CD B2 4E    13126   SQR:            CALL	SFLOAT
004907 CB 7C       13127   SQR0:           BIT	7,H
004909 3E 15       13128                   LD	A,NGROOT
00490B C2 26 45    13129                   JP	NZ,ERROR_mat	;"-ve root"
00490E 0D          13130                   DEC	C
00490F 0C          13131                   INC	C
004910 C8          13132                   RET	Z		;ZERO
004911 CB FC       13133                   SET	7,H		;IMPLIED 1
004913 CB 41       13134                   BIT	0,C
004915 CC E4 4E    13135                   CALL	Z,DIV2		;MAKE EXPONENT ODD
004918 79          13136                   LD	A,C
004919 D6 80       13137                   SUB	80H
00491B CB 2F       13138                   SRA	A		;HALVE EXPONENT
00491D C6 80       13139                   ADD	A,80H
00491F 4F          13140                   LD	C,A
004920 C5          13141                   PUSH	BC		;SAVE EXPONENT
004921 EB          13142                   EX	DE,HL
004922 21 00 00    13143                   LD	HL,0
004925 44          13144                   LD	B,H
004926 4D          13145                   LD	C,L
004927 D9          13146                   EXX
004928 EB          13147                   EX	DE,HL
004929 21 00 00    13148                   LD	HL,0
00492C 44          13149                   LD	B,H
00492D 4D          13150                   LD	C,L
00492E 3E E1       13151                   LD	A,-31
004930 CD 92 50    13152                   CALL	SQRA		;ROOT
004933 D9          13153                   EXX
004934 CB 78       13154                   BIT	7,B
004936 D9          13155                   EXX
004937 CC 92 50    13156                   CALL	Z,SQRA		;NORMALISE & INC A
00493A CD B1 50    13157                   CALL	SQRB
00493D B7          13158                   OR	A		;CLEAR CARRY
00493E CD 4C 50    13159                   CALL	DIVB
004941 CB 1B       13160                   RR	E		;LSB TO CARRY
004943 60          13161                   LD	H,B
004944 69          13162                   LD	L,C
004945 D9          13163                   EXX
004946 60          13164                   LD	H,B
004947 69          13165                   LD	L,C
004948 DC C8 4E    13166                   CALL	C,ADD1		;ROUND UP
00494B C1          13167                   POP	BC		;RESTORE EXPONENT
00494C DC F0 4E    13168                   CALL	C,INCC
00494F 1F          13169                   RRA
004950 9F          13170                   SBC	A,A
004951 81          13171                   ADD	A,C
004952 4F          13172                   LD	C,A
004953 CB BC       13173                   RES	7,H		;POSITIVE
004955 AF          13174                   XOR	A
004956 C9          13175                   RET
004957             13176   ;
004957             13177   ;TAN - Tangent function
004957             13178   ;Result is floating-point numeric.
004957             13179   ;
004957 CD B2 4E    13180   TAN:            CALL	SFLOAT
00495A CD 9B 4F    13181                   CALL	PUSH5
00495D CD 77 49    13182                   CALL	COS0
004960 CD A4 4F    13183                   CALL	POP5
004963 CD 9B 4F    13184                   CALL	PUSH5
004966 CD DC 4E    13185                   CALL	SWAP
004969 CD 82 49    13186                   CALL	SIN0
00496C CD A4 4F    13187                   CALL	POP5
00496F CD 9D 46    13188                   CALL	FDIV
004972 AF          13189                   XOR	A		;NUMERIC MARKER
004973 C9          13190                   RET
004974             13191   ;
004974             13192   ;COS - Cosine function
004974             13193   ;Result is floating-point numeric.
004974             13194   ;
004974 CD B2 4E    13195   COS:            CALL	SFLOAT
004977 CD 27 4E    13196   COS0:           CALL	SCALE
00497A 1C          13197                   INC	E
00497B 1C          13198                   INC	E
00497C 7B          13199                   LD	A,E
00497D 18 0E       13200                   JR	SIN1
00497F             13201   ;
00497F             13202   ;SIN - Sine function
00497F             13203   ;Result is floating-point numeric.
00497F             13204   ;
00497F CD B2 4E    13205   SIN:            CALL	SFLOAT
004982 E5          13206   SIN0:           PUSH	HL		;H7=SIGN
004983 CD 27 4E    13207                   CALL	SCALE
004986 F1          13208                   POP	AF
004987 07          13209                   RLCA
004988 07          13210                   RLCA
004989 07          13211                   RLCA
00498A E6 04       13212                   AND	4
00498C AB          13213                   XOR	E
00498D F5          13214   SIN1:           PUSH	AF		;OCTANT
00498E CB BC       13215                   RES	7,H
004990 1F          13216                   RRA
004991 CD 0E 4A    13217                   CALL	PIBY4
004994 DC 35 46    13218                   CALL	C,RSUB		;X=(PI/4)-X
004997 F1          13219                   POP	AF
004998 F5          13220                   PUSH	AF
004999 E6 03       13221                   AND	3
00499B E2 CC 49    13222                   JP	PO,SIN2		;USE COSINE APPROX.
00499E CD 9B 4F    13223                   CALL	PUSH5		;SAVE X
0049A1 CD 95 4F    13224                   CALL	SQUARE		;PUSH X*X
0049A4 CD CE 4F    13225                   CALL	POLY
0049A7 B7 A8       13226                   DW	0A8B7H		;a(8)
0049A9 11 36       13227                   DW	3611H
0049AB 6D          13228                   DB	6DH
0049AC 26 DE       13229                   DW	0DE26H		;a(6)
0049AE 05 D0       13230                   DW	0D005H
0049B0 73          13231                   DB	73H
0049B1 C0 80       13232                   DW	80C0H		;a(4)
0049B3 88 08       13233                   DW	888H
0049B5 79          13234                   DB	79H
0049B6 9D AA       13235                   DW	0AA9DH		;a(2)
0049B8 AA AA       13236                   DW	0AAAAH
0049BA 7D          13237                   DB	7DH
0049BB 00 00       13238                   DW	0		;a(0)
0049BD 00 00       13239                   DW	0
0049BF 80          13240                   DB	80H
0049C0 CD A4 4F    13241                   CALL	POP5
0049C3 CD A4 4F    13242                   CALL	POP5
0049C6 CD 0D 47    13243                   CALL	FMUL
0049C9 C3 EE 49    13244                   JP	SIN3
0049CC             13245   ;
0049CC CD 95 4F    13246   SIN2:           CALL	SQUARE		;PUSH X*X
0049CF CD CE 4F    13247                   CALL	POLY
0049D2 71 D5       13248                   DW	0D571H		;b(8)
0049D4 78 4C       13249                   DW	4C78H
0049D6 70          13250                   DB	70H
0049D7 AF 94       13251                   DW	94AFH		;b(6)
0049D9 03 B6       13252                   DW	0B603H
0049DB 76          13253                   DB	76H
0049DC C8 9C       13254                   DW	9CC8H		;b(4)
0049DE AA 2A       13255                   DW	2AAAH
0049E0 7B          13256                   DB	7BH
0049E1 DD FF       13257                   DW	0FFDDH		;b(2)
0049E3 FF FF       13258                   DW	0FFFFH
0049E5 7E          13259                   DB	7EH
0049E6 00 00       13260                   DW	0		;b(0)
0049E8 00 00       13261                   DW	0
0049EA 80          13262                   DB	80H
0049EB CD A4 4F    13263                   CALL	POP5
0049EE F1          13264   SIN3:           POP	AF
0049EF E6 04       13265                   AND	4
0049F1 C8          13266                   RET	Z
0049F2 0D          13267                   DEC	C
0049F3 0C          13268                   INC	C
0049F4 C8          13269                   RET	Z		;ZERO
0049F5 CB FC       13270                   SET	7,H		;MAKE NEGATIVE
0049F7 C9          13271                   RET
0049F8             13272   ;
0049F8             13273   ;Floating-point one:
0049F8             13274   ;
0049F8 21 00 00    13275   FONE:           LD	HL,0
0049FB D9          13276                   EXX
0049FC 21 00 00    13277                   LD	HL,0
0049FF D9          13278                   EXX
004A00 0E 80       13279                   LD	C,80H
004A02 C9          13280                   RET
004A03             13281   ;
004A03 11 00 00    13282   DONE:           LD	DE,0
004A06 D9          13283                   EXX
004A07 11 00 00    13284                   LD	DE,0
004A0A D9          13285                   EXX
004A0B 06 80       13286                   LD	B,80H
004A0D C9          13287                   RET
004A0E             13288   ;
004A0E 11 0F 49    13289   PIBY4:          LD	DE,490FH
004A11 D9          13290                   EXX
004A12 11 A2 DA    13291                   LD	DE,0DAA2H
004A15 D9          13292                   EXX
004A16 06 7F       13293                   LD	B,7FH
004A18 C9          13294                   RET
004A19             13295   ;
004A19             13296   ;EXP - Exponential function
004A19             13297   ;Result is floating-point numeric.
004A19             13298   ;
004A19 CD B2 4E    13299   EXP:            CALL	SFLOAT
004A1C CD 99 4A    13300   EXP0:           CALL	LN2		;LN(2)
004A1F D9          13301                   EXX
004A20 1D          13302                   DEC	E
004A21 01 CF D1    13303                   LD	BC,0D1CFH	;0.6931471805599453
004A24 D9          13304                   EXX
004A25 E5          13305                   PUSH	HL		;H7=SIGN
004A26 CD 37 4E    13306                   CALL	MOD48		;"MODULUS"
004A29 F1          13307                   POP	AF
004A2A CB 7B       13308                   BIT	7,E
004A2C 28 09       13309                   JR	Z,EXP1
004A2E 17          13310                   RLA
004A2F DA 21 4F    13311                   JP	C,ZEROmat
004A32 3E 18       13312                   LD	A,EXPRNG
004A34 C3 26 45    13313                   JP	ERROR_mat		;"Exp range"
004A37             13314   ;
004A37 E6 80       13315   EXP1:           AND	80H
004A39 B3          13316                   OR	E
004A3A F5          13317                   PUSH	AF		;INTEGER PART
004A3B CB BC       13318                   RES	7,H
004A3D CD 9B 4F    13319                   CALL	PUSH5		;PUSH X*LN(2)
004A40 CD CE 4F    13320                   CALL	POLY
004A43 72 40       13321                   DW	4072H		;a(7)
004A45 2E 94       13322                   DW	942EH
004A47 73          13323                   DB	73H
004A48 65 6F       13324                   DW	6F65H		;a(6)
004A4A 4F 2E       13325                   DW	2E4FH
004A4C 76          13326                   DB	76H
004A4D 37 6D       13327                   DW	6D37H		;a(5)
004A4F 02 88       13328                   DW	8802H
004A51 79          13329                   DB	79H
004A52 12 E5       13330                   DW	0E512H		;a(4)
004A54 A0 2A       13331                   DW	2AA0H
004A56 7B          13332                   DB	7BH
004A57 14 4F       13333                   DW	4F14H		;a(3)
004A59 AA AA       13334                   DW	0AAAAH
004A5B 7D          13335                   DB	7DH
004A5C 56 FD       13336                   DW	0FD56H		;a(2)
004A5E FF 7F       13337                   DW	7FFFH
004A60 7E          13338                   DB	7EH
004A61 FE FF       13339                   DW	0FFFEH		;a(1)
004A63 FF FF       13340                   DW	0FFFFH
004A65 7F          13341                   DB	7FH
004A66 00 00       13342                   DW	0		;a(0)
004A68 00 00       13343                   DW	0
004A6A 80          13344                   DB	80H
004A6B CD A4 4F    13345                   CALL	POP5
004A6E F1          13346                   POP	AF
004A6F F5          13347                   PUSH	AF
004A70 F4 90 4A    13348                   CALL	P,RECIP		;X=1/X
004A73 F1          13349                   POP	AF
004A74 F2 7B 4A    13350                   JP	P,EXP4
004A77 E6 7F       13351                   AND	7FH
004A79 ED 44       13352                   NEG
004A7B C6 80       13353   EXP4:           ADD	A,80H
004A7D 81          13354                   ADD	A,C
004A7E 38 05       13355                   JR	C,EXP2
004A80 F2 21 4F    13356                   JP	P,ZEROmat		;UNDERFLOW
004A83 18 03       13357                   JR	EXP3
004A85 FA F2 4E    13358   EXP2:           JP	M,OFLOW		;OVERFLOW
004A88 C6 80       13359   EXP3:           ADD	A,80H
004A8A CA 21 4F    13360                   JP	Z,ZEROmat
004A8D 4F          13361                   LD	C,A
004A8E AF          13362                   XOR	A		;NUMERIC MARKER
004A8F C9          13363                   RET
004A90             13364   ;
004A90 CD 03 4A    13365   RECIP:          CALL	DONE
004A93 CD DC 4E    13366   RDIV:           CALL	SWAP
004A96 C3 9D 46    13367                   JP	FDIV		;RECIPROCAL
004A99             13368   ;
004A99 11 72 31    13369   LN2:            LD	DE,3172H	;LN(2)
004A9C D9          13370                   EXX
004A9D 11 F8 17    13371                   LD	DE,17F8H
004AA0 D9          13372                   EXX
004AA1 06 7F       13373                   LD	B,7FH
004AA3 C9          13374                   RET
004AA4             13375   ;
004AA4             13376   ;LN - Natural log.
004AA4             13377   ;Result is floating-point numeric.
004AA4             13378   ;
004AA4 CD B2 4E    13379   LN:             CALL	SFLOAT
004AA7 3E 16       13380   LN0:            LD	A,LOGRNG
004AA9 CB 7C       13381                   BIT	7,H
004AAB C2 26 45    13382                   JP	NZ,ERROR_mat	;"Log range"
004AAE 0C          13383                   INC	C
004AAF 0D          13384                   DEC	C
004AB0 CA 26 45    13385                   JP	Z,ERROR_mat
004AB3 11 04 35    13386                   LD	DE,3504H	;SQR(2)
004AB6 D9          13387                   EXX
004AB7 11 33 F3    13388                   LD	DE,0F333H	;1.41421356237
004ABA D9          13389                   EXX
004ABB CD 33 4F    13390                   CALL	ICP0		;MANTISSA>SQR(2)?
004ABE 79          13391                   LD	A,C		;EXPONENT
004ABF 0E 80       13392                   LD	C,80H		;1 <= X < 2
004AC1 38 02       13393                   JR	C,LN4
004AC3 0D          13394                   DEC	C
004AC4 3C          13395                   INC	A
004AC5 F5          13396   LN4:            PUSH	AF		;SAVE EXPONENT
004AC6 CD B0 4F    13397                   CALL	RATIO		;X=(X-1)/(X+1)
004AC9 CD 9B 4F    13398                   CALL	PUSH5
004ACC CD 95 4F    13399                   CALL	SQUARE		;PUSH X*X
004ACF CD CE 4F    13400                   CALL	POLY
004AD2 48 CC       13401                   DW	0CC48H		;a(9)
004AD4 FB 74       13402                   DW	74FBH
004AD6 7D          13403                   DB	7DH
004AD7 AF AE       13404                   DW	0AEAFH		;a(7)
004AD9 FF 11       13405                   DW	11FFH
004ADB 7E          13406                   DB	7EH
004ADC 8C D9       13407                   DW	0D98CH		;a(5)
004ADE CD 4C       13408                   DW	4CCDH
004AE0 7E          13409                   DB	7EH
004AE1 E3 A9       13410                   DW	0A9E3H		;a(3)
004AE3 AA 2A       13411                   DW	2AAAH
004AE5 7F          13412                   DB	7FH
004AE6 00 00       13413                   DW	0		;a(1)
004AE8 00 00       13414                   DW	0
004AEA 81          13415                   DB	81H
004AEB CD A4 4F    13416                   CALL	POP5
004AEE CD A4 4F    13417                   CALL	POP5
004AF1 CD 0D 47    13418                   CALL	FMUL
004AF4 F1          13419                   POP	AF		;EXPONENT
004AF5 CD 9B 4F    13420                   CALL	PUSH5
004AF8 08          13421                   EX	AF,AF'
004AF9 CD 21 4F    13422                   CALL	ZEROmat
004AFC 08          13423                   EX	AF,AF'
004AFD D6 80       13424                   SUB	80H
004AFF 28 1B       13425                   JR	Z,LN3
004B01 30 02       13426                   JR	NC,LN1
004B03 2F          13427                   CPL
004B04 3C          13428                   INC	A
004B05 67          13429   LN1:            LD	H,A
004B06 0E 87       13430                   LD	C,87H
004B08 F5          13431                   PUSH	AF
004B09 CD 98 4E    13432                   CALL	FLOAT
004B0C CB BC       13433                   RES	7,H
004B0E CD 99 4A    13434                   CALL	LN2
004B11 CD 0D 47    13435                   CALL	FMUL
004B14 F1          13436                   POP	AF
004B15 30 05       13437                   JR	NC,LN3
004B17 FA 1C 4B    13438                   JP	M,LN3
004B1A CB FC       13439                   SET	7,H
004B1C CD A4 4F    13440   LN3:            CALL	POP5
004B1F CD 45 46    13441                   CALL	FADD
004B22 AF          13442                   XOR	A
004B23 C9          13443                   RET
004B24             13444   ;
004B24             13445   ;LOG - base-10 logarithm.
004B24             13446   ;Result is floating-point numeric.
004B24             13447   ;
004B24 CD A4 4A    13448   LOG:            CALL	LN
004B27 11 5B 5E    13449                   LD	DE,5E5BH	;LOG(e)
004B2A D9          13450                   EXX
004B2B 11 A9 D8    13451                   LD	DE,0D8A9H
004B2E D9          13452                   EXX
004B2F 06 7E       13453                   LD	B,7EH
004B31 CD 0D 47    13454                   CALL	FMUL
004B34 AF          13455                   XOR	A
004B35 C9          13456                   RET
004B36             13457   ;
004B36             13458   ;ASN - Arc-sine
004B36             13459   ;Result is floating-point numeric.
004B36             13460   ;
004B36 CD B2 4E    13461   ASN:            CALL	SFLOAT
004B39 CD 9B 4F    13462                   CALL	PUSH5
004B3C CD 8D 4F    13463                   CALL	COPY
004B3F CD 0D 47    13464                   CALL	FMUL
004B42 CD 03 4A    13465                   CALL	DONE
004B45 CD 35 46    13466                   CALL	RSUB
004B48 CD 07 49    13467                   CALL	SQR0
004B4B CD A4 4F    13468                   CALL	POP5
004B4E 0C          13469                   INC	C
004B4F 0D          13470                   DEC	C
004B50 3E 02       13471                   LD	A,2
004B52 D5          13472                   PUSH	DE
004B53 28 70       13473                   JR	Z,ACS1
004B55 D1          13474                   POP	DE
004B56 CD 93 4A    13475                   CALL	RDIV
004B59 18 03       13476                   JR	ATN0
004B5B             13477   ;
004B5B             13478   ;ATN - arc-tangent
004B5B             13479   ;Result is floating-point numeric.
004B5B             13480   ;
004B5B CD B2 4E    13481   ATN:            CALL	SFLOAT
004B5E E5          13482   ATN0:           PUSH	HL		;SAVE SIGN
004B5F CB BC       13483                   RES	7,H
004B61 11 13 54    13484                   LD	DE,5413H	;TAN(PI/8)=SQR(2)-1
004B64 D9          13485                   EXX
004B65 11 D0 CC    13486                   LD	DE,0CCD0H
004B68 D9          13487                   EXX
004B69 06 7E       13488                   LD	B,7EH
004B6B CD 30 4F    13489                   CALL	FCP0		;COMPARE
004B6E 06 00       13490                   LD	B,0
004B70 38 1C       13491                   JR	C,ATN2
004B72 11 82 1A    13492                   LD	DE,1A82H	;TAN(3*PI/8)=SQR(2)+1
004B75 D9          13493                   EXX
004B76 11 9A 79    13494                   LD	DE,799AH
004B79 D9          13495                   EXX
004B7A 06 81       13496                   LD	B,81H
004B7C CD 30 4F    13497                   CALL	FCP0		;COMPARE
004B7F 38 08       13498                   JR	C,ATN1
004B81 CD 90 4A    13499                   CALL	RECIP		;X=1/X
004B84 06 02       13500                   LD	B,2
004B86 C3 8E 4B    13501                   JP	ATN2
004B89 CD B0 4F    13502   ATN1:           CALL	RATIO		;X=(X-1)/(X+1)
004B8C 06 01       13503                   LD	B,1
004B8E C5          13504   ATN2:           PUSH	BC		;SAVE FLAG
004B8F CD 9B 4F    13505                   CALL	PUSH5
004B92 CD 95 4F    13506                   CALL	SQUARE		;PUSH X*X
004B95 CD CE 4F    13507                   CALL	POLY
004B98 35 F3       13508                   DW	0F335H		;a(13)
004B9A D8 37       13509                   DW	37D8H
004B9C 7B          13510                   DB	7BH
004B9D 91 6B       13511                   DW	6B91H		;a(11)
004B9F B9 AA       13512                   DW	0AAB9H
004BA1 7C          13513                   DB	7CH
004BA2 DE 41       13514                   DW	41DEH		;a(9)
004BA4 97 61       13515                   DW	6197H
004BA6 7C          13516                   DB	7CH
004BA7 7B 9D       13517                   DW	9D7BH		;a(7)
004BA9 37 92       13518                   DW	9237H
004BAB 7D          13519                   DB	7DH
004BAC 5A 2A       13520                   DW	2A5AH		;a(5)
004BAE CC 4C       13521                   DW	4CCCH
004BB0 7D          13522                   DB	7DH
004BB1 5C A9       13523                   DW	0A95CH		;a(3)
004BB3 AA AA       13524                   DW	0AAAAH
004BB5 7E          13525                   DB	7EH
004BB6 00 00       13526                   DW	0		;a(1)
004BB8 00 00       13527                   DW	0
004BBA 80          13528                   DB	80H
004BBB CD A4 4F    13529                   CALL	POP5
004BBE CD A4 4F    13530                   CALL	POP5
004BC1 CD 0D 47    13531                   CALL	FMUL
004BC4 F1          13532                   POP	AF
004BC5 CD 0E 4A    13533   ACS1:           CALL	PIBY4		;PI/4
004BC8 1F          13534                   RRA
004BC9 F5          13535                   PUSH	AF
004BCA DC 45 46    13536                   CALL	C,FADD
004BCD F1          13537                   POP	AF
004BCE 04          13538                   INC	B
004BCF 1F          13539                   RRA
004BD0 DC 35 46    13540                   CALL	C,RSUB
004BD3 F1          13541                   POP	AF
004BD4 B7          13542                   OR	A
004BD5 F0          13543                   RET	P
004BD6 CB FC       13544                   SET	7,H		;MAKE NEGATIVE
004BD8 AF          13545                   XOR	A
004BD9 C9          13546                   RET
004BDA             13547   ;
004BDA             13548   ;ACS - Arc cosine=PI/2-ASN.
004BDA             13549   ;Result is floating point numeric.
004BDA             13550   ;
004BDA CD 36 4B    13551   ACS:            CALL	ASN
004BDD 3E 02       13552                   LD	A,2
004BDF F5          13553                   PUSH	AF
004BE0 18 E3       13554                   JR	ACS1
004BE2             13555   ;
004BE2             13556   ;Function STR - convert numeric value to ASCII string.
004BE2             13557   ;   Inputs: HLH'L'C = integer or floating-point number
004BE2             13558   ;           DE = address at which to store string
004BE2             13559   ;           IX = address of @% format control
004BE2             13560   ;  Outputs: String stored, with NUL terminator
004BE2             13561   ;
004BE2             13562   ;First normalise for decimal output:
004BE2             13563   ;
004BE2 CD B2 4E    13564   STRmat:            CALL	SFLOAT
004BE5 06 00       13565                   LD	B,0		;DEFAULT PT. POSITION
004BE7 CB 7C       13566                   BIT	7,H		;NEGATIVE?
004BE9 28 06       13567                   JR	Z,STR10
004BEB CB BC       13568                   RES	7,H
004BED 3E 2D       13569                   LD	A,'-'
004BEF 12          13570                   LD	(DE),A		;STORE SIGN
004BF0 13          13571                   INC	DE
004BF1 AF          13572   STR10:          XOR	A		;CLEAR A
004BF2 B9          13573                   CP	C
004BF3 28 47       13574                   JR	Z,STR2mat		;ZERO
004BF5 D5          13575                   PUSH	DE		;SAVE TEXT POINTER
004BF6 78          13576                   LD	A,B
004BF7 F5          13577   STR11:          PUSH	AF		;SAVE DECIMAL COUNTER
004BF8 79          13578                   LD	A,C		;BINARY EXPONENT
004BF9 FE A1       13579                   CP	161
004BFB 30 1A       13580                   JR	NC,STR14
004BFD FE 9B       13581                   CP	155
004BFF 30 25       13582                   JR	NC,STR15
004C01 2F          13583                   CPL
004C02 FE E1       13584                   CP	225
004C04 38 02       13585                   JR	C,STR13
004C06 3E F8       13586                   LD	A,-8
004C08 C6 1C       13587   STR13:          ADD	A,28
004C0A CD F5 4F    13588                   CALL	POWR10
004C0D F5          13589                   PUSH	AF
004C0E CD 0D 47    13590                   CALL	FMUL
004C11 F1          13591                   POP	AF
004C12 47          13592                   LD	B,A
004C13 F1          13593                   POP	AF
004C14 90          13594                   SUB	B
004C15 18 E0       13595                   JR	STR11
004C17 D6 20       13596   STR14:          SUB	32
004C19 CD F5 4F    13597                   CALL	POWR10
004C1C F5          13598                   PUSH	AF
004C1D CD 9D 46    13599                   CALL	FDIV
004C20 F1          13600                   POP	AF
004C21 47          13601                   LD	B,A
004C22 F1          13602                   POP	AF
004C23 80          13603                   ADD	A,B
004C24 18 D1       13604                   JR	STR11
004C26 3E 09       13605   STR15:          LD	A,9
004C28 CD F5 4F    13606                   CALL	POWR10		;10^9
004C2B CD 30 4F    13607                   CALL	FCP0
004C2E 79          13608                   LD	A,C
004C2F C1          13609                   POP	BC
004C30 4F          13610                   LD	C,A
004C31 CB FC       13611                   SET	7,H		;IMPLIED 1
004C33 DC 52 4F    13612                   CALL	C,X10B		;X10, DEC B
004C36 D1          13613                   POP	DE		;RESTORE TEXT POINTER
004C37 CB B9       13614                   RES	7,C
004C39 3E 00       13615                   LD	A,0
004C3B 17          13616                   RLA			;PUT CARRY IN LSB
004C3C             13617   ;
004C3C             13618   ;At this point decimal normalisation has been done,
004C3C             13619   ;now convert to decimal digits:
004C3C             13620   ;      AHLH'L' = number in normalised integer form
004C3C             13621   ;            B = decimal place adjustment
004C3C             13622   ;            C = binary place adjustment (29-33)
004C3C             13623   ;
004C3C 0C          13624   STR2mat:           INC	C
004C3D 08          13625                   EX	AF,AF'		;SAVE A
004C3E 78          13626                   LD	A,B
004C3F DD CB 02 4E 13627                   BIT	1,(IX+2)
004C43 20 08       13628                   JR	NZ,STR20
004C45 AF          13629                   XOR	A
004C46 DD BE 01    13630                   CP	(IX+1)
004C49 28 0A       13631                   JR	Z,STR21
004C4B 3E F6       13632                   LD	A,-10
004C4D DD 86 01    13633   STR20:          ADD	A,(IX+1)	;SIG. FIG. COUNT
004C50 B7          13634                   OR	A		;CLEAR CARRY
004C51 FA 55 4C    13635                   JP	M,STR21
004C54 AF          13636                   XOR	A
004C55 F5          13637   STR21:          PUSH	AF
004C56 08          13638                   EX	AF,AF'		;RESTORE A
004C57 CD 7B 4F    13639   STR22:          CALL	X2		;RL AHLH'L'
004C5A 8F          13640                   ADC	A,A
004C5B FE 0A       13641                   CP	10
004C5D 38 05       13642                   JR	C,STR23
004C5F D6 0A       13643                   SUB	10
004C61 D9          13644                   EXX
004C62 2C          13645                   INC	L		;SET RESULT BIT
004C63 D9          13646                   EXX
004C64 0D          13647   STR23:          DEC	C
004C65 20 F0       13648                   JR	NZ,STR22	;32 TIMES
004C67 4F          13649                   LD	C,A		;REMAINDER
004C68 7C          13650                   LD	A,H
004C69 E6 3F       13651                   AND	3FH		;CLEAR OUT JUNK
004C6B 67          13652                   LD	H,A
004C6C F1          13653                   POP	AF
004C6D F2 7A 4C    13654                   JP	P,STR24
004C70 3C          13655                   INC	A
004C71 20 1C       13656                   JR	NZ,STR26
004C73 3E 04       13657                   LD	A,4
004C75 B9          13658                   CP	C		;ROUND UP?
004C76 3E 00       13659                   LD	A,0
004C78 18 15       13660                   JR	STR26
004C7A F5          13661   STR24:          PUSH	AF
004C7B 79          13662                   LD	A,C
004C7C CE 30       13663                   ADC	A,'0'		;ADD CARRY
004C7E FE 30       13664                   CP	'0'
004C80 28 05       13665                   JR	Z,STR25		;SUPPRESS ZERO
004C82 FE 3A       13666                   CP	'9'+1
004C84 3F          13667                   CCF
004C85 30 08       13668                   JR	NC,STR26
004C87 E3          13669   STR25:          EX	(SP),HL
004C88 CB 75       13670                   BIT	6,L		;ZERO FLAG
004C8A E3          13671                   EX	(SP),HL
004C8B 20 05       13672                   JR	NZ,STR27
004C8D 3E 30       13673                   LD	A,'0'
004C8F 3C          13674   STR26:          INC	A		;SET +VE
004C90 3D          13675                   DEC	A
004C91 F5          13676                   PUSH	AF		;PUT ON STACK + CARRY
004C92 04          13677   STR27:          INC	B
004C93 CD 01 4F    13678                   CALL	TESTmat		;IS HLH'L' ZERO?
004C96 0E 20       13679                   LD	C,32
004C98 3E 00       13680                   LD	A,0
004C9A 20 BB       13681                   JR	NZ,STR22
004C9C F1          13682                   POP	AF
004C9D F5          13683                   PUSH	AF
004C9E 3E 00       13684                   LD	A,0
004CA0 38 B5       13685                   JR	C,STR22
004CA2             13686   ;
004CA2             13687   ;At this point, the decimal character string is stored
004CA2             13688   ; on the stack. Trailing zeroes are suppressed and may
004CA2             13689   ; need to be replaced.
004CA2             13690   ;B register holds decimal point position.
004CA2             13691   ;Now format number and store as ASCII string:
004CA2             13692   ;
004CA2 EB          13693   STR3:           EX	DE,HL		;STRING POINTER
004CA3 0E FF       13694                   LD	C,-1		;FLAG "E"
004CA5 16 01       13695                   LD	D,1
004CA7 DD 5E 01    13696                   LD	E,(IX+1)	;f2
004CAA DD CB 02 46 13697                   BIT	0,(IX+2)
004CAE 20 32       13698                   JR	NZ,STR34	;E MODE
004CB0 DD CB 02 4E 13699                   BIT	1,(IX+2)
004CB4 28 11       13700                   JR	Z,STR31
004CB6 78          13701                   LD	A,B		;F MODE
004CB7 B7          13702                   OR	A
004CB8 28 04       13703                   JR	Z,STR30
004CBA FA BE 4C    13704                   JP	M,STR30
004CBD 50          13705                   LD	D,B
004CBE 7A          13706   STR30:          LD	A,D
004CBF DD 86 01    13707                   ADD	A,(IX+1)
004CC2 5F          13708                   LD	E,A
004CC3 FE 0B       13709                   CP	11
004CC5 38 17       13710                   JR	C,STR32
004CC7 78          13711   STR31:          LD	A,B		;G MODE
004CC8 11 01 01    13712                   LD	DE,101H
004CCB B7          13713                   OR	A
004CCC FA E2 4C    13714                   JP	M,STR34
004CCF 28 0D       13715                   JR	Z,STR32
004CD1 DD 7E 01    13716                   LD	A,(IX+1)
004CD4 B7          13717                   OR	A
004CD5 20 02       13718                   JR	NZ,STR3A
004CD7 3E 0A       13719                   LD	A,10
004CD9 B8          13720   STR3A:          CP	B
004CDA 38 06       13721                   JR	C,STR34
004CDC 50          13722                   LD	D,B
004CDD 58          13723                   LD	E,B
004CDE 78          13724   STR32:          LD	A,B
004CDF C6 81       13725                   ADD	A,129
004CE1 4F          13726                   LD	C,A
004CE2 CB FA       13727   STR34:          SET	7,D
004CE4 1D          13728                   DEC	E
004CE5 7A          13729   STR35:          LD	A,D
004CE6 B9          13730                   CP	C
004CE7 30 0C       13731                   JR	NC,STR33
004CE9 F1          13732   STR36:          POP	AF
004CEA 28 03       13733                   JR	Z,STR37
004CEC F2 F7 4C    13734                   JP	P,STR38
004CEF F5          13735   STR37:          PUSH	AF
004CF0 1C          13736                   INC	E
004CF1 1D          13737                   DEC	E
004CF2 FA 06 4D    13738                   JP	M,STR4
004CF5 3E 30       13739   STR33:          LD	A,'0'
004CF7 15          13740   STR38:          DEC	D
004CF8 E2 FE 4C    13741                   JP	PO,STR39
004CFB 36 2E       13742                   LD	(HL),'.'
004CFD 23          13743                   INC	HL
004CFE 77          13744   STR39:          LD	(HL),A
004CFF 23          13745                   INC	HL
004D00 1D          13746                   DEC	E
004D01 F2 E5 4C    13747                   JP	P,STR35
004D04 18 E3       13748                   JR	STR36
004D06             13749   ;
004D06 F1          13750   STR4:           POP	AF
004D07 0C          13751   STR40:          INC	C
004D08 4D          13752                   LD	C,L
004D09 20 27       13753                   JR	NZ,STR44
004D0B 36 45       13754                   LD	(HL),'E'	;EXPONENT
004D0D 23          13755                   INC	HL
004D0E 78          13756                   LD	A,B
004D0F 3D          13757                   DEC	A
004D10 F2 18 4D    13758                   JP	P,STR41
004D13 36 2D       13759                   LD	(HL),'-'
004D15 23          13760                   INC	HL
004D16 ED 44       13761                   NEG
004D18 36 30       13762   STR41:          LD	(HL),'0'
004D1A 28 15       13763                   JR	Z,STR47
004D1C FE 0A       13764                   CP	10
004D1E 47          13765                   LD	B,A
004D1F 3E 3A       13766                   LD	A,':'
004D21 38 03       13767                   JR	C,STR42
004D23 23          13768                   INC	HL
004D24 36 30       13769                   LD	(HL),'0'
004D26 34          13770   STR42:          INC	(HL)
004D27 BE          13771                   CP	(HL)
004D28 20 05       13772                   JR	NZ,STR43
004D2A 36 30       13773                   LD	(HL),'0'
004D2C 2B          13774                   DEC	HL
004D2D 34          13775                   INC	(HL)
004D2E 23          13776                   INC	HL
004D2F 10 F5       13777   STR43:          DJNZ	STR42
004D31 23          13778   STR47:          INC	HL
004D32 EB          13779   STR44:          EX	DE,HL
004D33 C9          13780                   RET
004D34             13781   ;
004D34             13782   ;Support subroutines:
004D34             13783   ;
004D34             13784   ;CON - Get unsigned numeric constant from ASCII string.
004D34             13785   ;   Inputs: ASCII string at (IX).
004D34             13786   ;  Outputs: Variable-type result in HLH'L'C
004D34             13787   ;           IX updated (points to delimiter)
004D34             13788   ;           A7 = 0 (numeric marker)
004D34             13789   ;
004D34 CD 21 4F    13790   CON:            CALL	ZEROmat		;INITIALISE TO ZERO
004D37 0E 00       13791                   LD	C,0		;TRUNCATION COUNTER
004D39 CD B9 4D    13792                   CALL	NUMBERmat		;GET INTEGER PART
004D3C FE 2E       13793                   CP	'.'
004D3E 06 00       13794                   LD	B,0		;DECL. PLACE COUNTER
004D40 CC B7 4D    13795                   CALL	Z,NUMBIX	;GET FRACTION PART
004D43 FE 45       13796                   CP	'E'
004D45 3E 00       13797                   LD	A,0		;INITIALISE EXPONENT
004D47 CC 88 4D    13798                   CALL	Z,GETEXP	;GET EXPONENT
004D4A CB 7C       13799                   BIT	7,H
004D4C 20 08       13800                   JR	NZ,CON0		;INTEGER OVERFLOW
004D4E B7          13801                   OR	A
004D4F 20 05       13802                   JR	NZ,CON0		;EXPONENT NON-ZERO
004D51 B8          13803                   CP	B
004D52 20 02       13804                   JR	NZ,CON0		;DECIMAL POINT
004D54 B9          13805                   CP	C
004D55 C8          13806                   RET	Z		;INTEGER
004D56 90          13807   CON0:           SUB	B
004D57 81          13808                   ADD	A,C
004D58 0E 9F       13809                   LD	C,159
004D5A CD 98 4E    13810                   CALL	FLOAT
004D5D CB BC       13811                   RES	7,H		;DITCH IMPLIED 1
004D5F B7          13812                   OR	A
004D60 C8          13813                   RET	Z		;DONE
004D61 FA 6C 4D    13814                   JP	M,CON2		;NEGATIVE EXPONENT
004D64 CD F5 4F    13815                   CALL	POWR10
004D67 CD 0D 47    13816                   CALL	FMUL		;SCALE
004D6A AF          13817                   XOR	A
004D6B C9          13818                   RET
004D6C FE DA       13819   CON2:           CP	-38
004D6E 38 0A       13820                   JR	C,CON3		;CAN'T SCALE IN ONE GO
004D70 ED 44       13821                   NEG
004D72 CD F5 4F    13822                   CALL	POWR10
004D75 CD 9D 46    13823                   CALL	FDIV		;SCALE
004D78 AF          13824                   XOR	A
004D79 C9          13825                   RET
004D7A F5          13826   CON3:           PUSH	AF
004D7B 3E 26       13827                   LD	A,38
004D7D CD F5 4F    13828                   CALL	POWR10
004D80 CD 9D 46    13829                   CALL	FDIV
004D83 F1          13830                   POP	AF
004D84 C6 26       13831                   ADD	A,38
004D86 18 E4       13832                   JR	CON2
004D88             13833   ;
004D88             13834   ;GETEXP - Get decimal exponent from string
004D88             13835   ;     Inputs: ASCII string at (IX)
004D88             13836   ;             (IX points at 'E')
004D88             13837   ;             A = initial value
004D88             13838   ;    Outputs: A = new exponent
004D88             13839   ;             IX updated.
004D88             13840   ;   Destroys: A,A',IX,F,F'
004D88             13841   ;
004D88 C5          13842   GETEXP:         PUSH	BC		;SAVE REGISTERS
004D89 47          13843                   LD	B,A		;INITIAL VALUE
004D8A 0E 02       13844                   LD	C,2		;2 DIGITS MAX
004D8C DD 23       13845                   INC	IX		;BUMP PAST 'E'
004D8E CD E3 50    13846                   CALL	SIGNQ
004D91 08          13847                   EX	AF,AF'		;SAVE EXPONENT SIGN
004D92 CD D9 50    13848   GETEX1:         CALL	DIGITQ
004D95 38 17       13849                   JR	C,GETEX2
004D97 78          13850                   LD	A,B		;B=B*10
004D98 87          13851                   ADD	A,A
004D99 87          13852                   ADD	A,A
004D9A 80          13853                   ADD	A,B
004D9B 87          13854                   ADD	A,A
004D9C 47          13855                   LD	B,A
004D9D DD 7E 00    13856                   LD	A,(IX)		;GET BACK DIGIT
004DA0 DD 23       13857                   INC	IX
004DA2 E6 0F       13858                   AND	0FH		;MASK UNWANTED BITS
004DA4 80          13859                   ADD	A,B		;ADD IN DIGIT
004DA5 47          13860                   LD	B,A
004DA6 0D          13861                   DEC	C
004DA7 F2 92 4D    13862                   JP	P,GETEX1
004DAA 06 64       13863                   LD	B,100		;FORCE OVERFLOW
004DAC 18 E4       13864                   JR	GETEX1
004DAE 08          13865   GETEX2:         EX	AF,AF'		;RESTORE SIGN
004DAF FE 2D       13866                   CP	'-'
004DB1 78          13867                   LD	A,B
004DB2 C1          13868                   POP	BC		;RESTORE
004DB3 C0          13869                   RET	NZ
004DB4 ED 44       13870                   NEG			;NEGATE EXPONENT
004DB6 C9          13871                   RET
004DB7             13872   ;
004DB7             13873   ;NUMBER: Get unsigned integer from string.
004DB7             13874   ;    Inputs: string at (IX)
004DB7             13875   ;            C = truncated digit count
004DB7             13876   ;                (initially zero)
004DB7             13877   ;            B = total digit count
004DB7             13878   ;            HLH'L' = initial value
004DB7             13879   ;   Outputs: HLH'L' = number (binary integer)
004DB7             13880   ;            A = delimiter.
004DB7             13881   ;            B, C & IX updated
004DB7             13882   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004DB7             13883   ;
004DB7 DD 23       13884   NUMBIX:         INC	IX
004DB9 CD D9 50    13885   NUMBERmat:         CALL	DIGITQ
004DBC D8          13886                   RET	C
004DBD 04          13887                   INC	B		;INCREMENT DIGIT COUNT
004DBE DD 23       13888                   INC	IX
004DC0 CD 6C 4F    13889                   CALL	X10		;*10 & COPY OLD VALUE
004DC3 38 13       13890                   JR	C,NUMB1		;OVERFLOW
004DC5 0D          13891                   DEC	C		;SEE IF TRUNCATED
004DC6 0C          13892                   INC	C
004DC7 20 0F       13893                   JR	NZ,NUMB1	;IMPORTANT!
004DC9 E6 0F       13894                   AND	0FH
004DCB D9          13895                   EXX
004DCC 06 00       13896                   LD	B,0
004DCE 4F          13897                   LD	C,A
004DCF 09          13898                   ADD	HL,BC		;ADD IN DIGIT
004DD0 D9          13899                   EXX
004DD1 30 E6       13900                   JR	NC,NUMBERmat
004DD3 23          13901                   INC	HL		;CARRY
004DD4 7C          13902                   LD	A,H
004DD5 B5          13903                   OR	L
004DD6 20 E1       13904                   JR	NZ,NUMBERmat
004DD8 0C          13905   NUMB1:          INC	C		;TRUNCATION COUNTER
004DD9 CD DF 4E    13906                   CALL	SWAP1		;RESTORE PREVIOUS VALUE
004DDC 18 DB       13907                   JR	NUMBERmat
004DDE             13908   ;
004DDE             13909   ;FIX - Fix number to specified exponent value.
004DDE             13910   ;    Inputs: HLH'L'C = +ve non-zero number (floated)
004DDE             13911   ;            A = desired exponent (A>C)
004DDE             13912   ;   Outputs: HLH'L'C = fixed number (unsigned)
004DDE             13913   ;            fraction shifted into B'C'
004DDE             13914   ;            A'F' positive if integer input
004DDE             13915   ;  Destroys: C,H,L,A',B',C',H',L',F,F'
004DDE             13916   ;
004DDE 08          13917   FIX:            EX	AF,AF'
004DDF AF          13918                   XOR	A
004DE0 08          13919                   EX	AF,AF'
004DE1 CB FC       13920                   SET	7,H		;IMPLIED 1
004DE3 CD E4 4E    13921   FIX1:           CALL	DIV2
004DE6 B9          13922                   CP	C
004DE7 C8          13923                   RET	Z
004DE8 D2 E3 4D    13924                   JP	NC,FIX1
004DEB C3 F2 4E    13925                   JP	OFLOW
004DEE             13926   ;
004DEE             13927   ;SFIXmat - Convert to integer if necessary.
004DEE             13928   ;    Input: Variable-type number in HLH'L'C
004DEE             13929   ;   Output: Integer in HLH'L', C=0
004DEE             13930   ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
004DEE             13931   ;
004DEE             13932   ;NEGATE - Negate HLH'L'
004DEE             13933   ;    Destroys: H,L,H',L',F
004DEE             13934   ;
004DEE CD DC 4E    13935   FIX2:           CALL	SWAP
004DF1 CD F7 4D    13936                   CALL	SFIXmat
004DF4 CD DC 4E    13937                   CALL	SWAP
004DF7 0D          13938   SFIXmat:           DEC	C
004DF8 0C          13939                   INC	C
004DF9 C8          13940                   RET	Z		;INTEGER/ZERO
004DFA CB 7C       13941                   BIT	7,H		;SIGN
004DFC F5          13942                   PUSH	AF
004DFD 3E 9F       13943                   LD	A,159
004DFF CD DE 4D    13944                   CALL	FIX
004E02 F1          13945                   POP	AF
004E03 0E 00       13946                   LD	C,0
004E05 C8          13947                   RET	Z
004E06 B7          13948   NEGATE:         OR	A		;CLEAR CARRY
004E07 D9          13949                   EXX
004E08 D5          13950   NEG0:           PUSH	DE
004E09 EB          13951                   EX	DE,HL
004E0A 21 00 00    13952                   LD	HL,0
004E0D ED 52       13953                   SBC	HL,DE
004E0F D1          13954                   POP	DE
004E10 D9          13955                   EXX
004E11 D5          13956                   PUSH	DE
004E12 EB          13957                   EX	DE,HL
004E13 21 00 00    13958                   LD	HL,0
004E16 ED 52       13959                   SBC	HL,DE
004E18 D1          13960                   POP	DE
004E19 C9          13961                   RET
004E1A             13962   ;
004E1A             13963   ;NEG - Negate HLH'L'B'C'
004E1A             13964   ;    Also complements A (used in FADD)
004E1A             13965   ;    Destroys: A,H,L,B',C',H',L',F
004E1A             13966   ;
004E1A D9          13967   NEG:            EXX
004E1B 2F          13968                   CPL
004E1C E5          13969                   PUSH	HL
004E1D B7          13970                   OR	A		;CLEAR CARRY
004E1E ED 62       13971                   SBC	HL,HL
004E20 ED 42       13972                   SBC	HL,BC
004E22 44          13973                   LD	B,H
004E23 4D          13974                   LD	C,L
004E24 E1          13975                   POP	HL
004E25 18 E1       13976                   JR	NEG0
004E27             13977   ;
004E27             13978   ;SCALE - Trig scaling.
004E27             13979   ;MOD48 - 48-bit floating-point "modulus" (remainder).
004E27             13980   ;   Inputs: HLH'L'C unsigned floating-point dividend
004E27             13981   ;           DED'E'B'C'B unsigned 48-bit FP divisor
004E27             13982   ;  Outputs: HLH'L'C floating point remainder (H7=1)
004E27             13983   ;           E = quotient (bit 7 is sticky)
004E27             13984   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004E27             13985   ;FLO48 - Float unsigned number (48 bits)
004E27             13986   ;    Input/output in HLH'L'B'C'C
004E27             13987   ;   Destroys: C,H,L,B',C',H',L',F
004E27             13988   ;
004E27 3E 96       13989   SCALE:          LD	A,150
004E29 B9          13990                   CP	C
004E2A 3E 17       13991                   LD	A,ACLOST
004E2C DA 26 45    13992                   JP	C,ERROR_mat		;"Accuracy lost"
004E2F CD 0E 4A    13993                   CALL	PIBY4
004E32 D9          13994                   EXX
004E33 01 69 21    13995                   LD	BC,2169H	;3.141592653589793238
004E36 D9          13996                   EXX
004E37 CB FA       13997   MOD48:          SET	7,D		;IMPLIED 1
004E39 CB FC       13998                   SET	7,H
004E3B 79          13999                   LD	A,C
004E3C 0E 00       14000                   LD	C,0		;INIT QUOTIENT
004E3E DD 21 00 00 14001                   LD	IX,0
004E42 DD E5       14002                   PUSH	IX		;PUT ZERO ON STACK
004E44 B8          14003                   CP	B
004E45 38 3A       14004                   JR	C,MOD485	;DIVIDEND<DIVISOR
004E47 D9          14005   MOD481:         EXX			;CARRY=0 HERE
004E48 E3          14006                   EX	(SP),HL
004E49 ED 42       14007                   SBC	HL,BC
004E4B E3          14008                   EX	(SP),HL
004E4C ED 52       14009                   SBC	HL,DE
004E4E D9          14010                   EXX
004E4F ED 52       14011                   SBC	HL,DE
004E51 30 09       14012                   JR	NC,MOD482	;DIVIDEND>=DIVISOR
004E53 D9          14013                   EXX
004E54 E3          14014                   EX	(SP),HL
004E55 09          14015                   ADD	HL,BC
004E56 E3          14016                   EX	(SP),HL
004E57 ED 5A       14017                   ADC	HL,DE
004E59 D9          14018                   EXX
004E5A ED 5A       14019                   ADC	HL,DE
004E5C 3F          14020   MOD482:         CCF
004E5D CB 11       14021                   RL	C		;QUOTIENT
004E5F 30 02       14022                   JR	NC,MOD483
004E61 CB F9       14023                   SET	7,C		;STICKY BIT
004E63 3D          14024   MOD483:         DEC	A
004E64 B8          14025                   CP	B
004E65 38 19       14026                   JR	C,MOD484	;DIVIDEND<DIVISOR
004E67 E3          14027                   EX	(SP),HL
004E68 29          14028                   ADD	HL,HL		;DIVIDEND * 2
004E69 E3          14029                   EX	(SP),HL
004E6A D9          14030                   EXX
004E6B ED 6A       14031                   ADC	HL,HL
004E6D D9          14032                   EXX
004E6E ED 6A       14033                   ADC	HL,HL
004E70 30 D5       14034                   JR	NC,MOD481	;AGAIN
004E72 B7          14035                   OR	A
004E73 D9          14036                   EXX
004E74 E3          14037                   EX	(SP),HL
004E75 ED 42       14038                   SBC	HL,BC		;OVERFLOW, SO SUBTRACT
004E77 E3          14039                   EX	(SP),HL
004E78 ED 52       14040                   SBC	HL,DE
004E7A D9          14041                   EXX
004E7B ED 52       14042                   SBC	HL,DE
004E7D B7          14043                   OR	A
004E7E 18 DC       14044                   JR	MOD482
004E80             14045   ;
004E80 3C          14046   MOD484:         INC	A
004E81 59          14047   MOD485:         LD	E,C		;QUOTIENT
004E82 4F          14048                   LD	C,A		;REMAINDER EXPONENT
004E83 D9          14049                   EXX
004E84 C1          14050                   POP	BC
004E85 D9          14051                   EXX
004E86 CB 7C       14052   FLO48:          BIT	7,H
004E88 C0          14053                   RET	NZ
004E89 D9          14054                   EXX
004E8A CB 21       14055                   SLA	C
004E8C CB 10       14056                   RL	B
004E8E ED 6A       14057                   ADC	HL,HL
004E90 D9          14058                   EXX
004E91 ED 6A       14059                   ADC	HL,HL
004E93 0D          14060                   DEC	C
004E94 C2 86 4E    14061                   JP	NZ,FLO48
004E97 C9          14062                   RET
004E98             14063   ;
004E98             14064   ;Float unsigned number
004E98             14065   ;    Input/output in HLH'L'C
004E98             14066   ;   Destroys: C,H,L,H',L',F
004E98             14067   ;
004E98 CB 7C       14068   FLOAT:          BIT	7,H
004E9A C0          14069                   RET	NZ
004E9B D9          14070                   EXX			;SAME AS "X2"
004E9C 29          14071                   ADD	HL,HL		;TIME-CRITICAL
004E9D D9          14072                   EXX			;REGION
004E9E ED 6A       14073                   ADC	HL,HL		;(BENCHMARKS)
004EA0 0D          14074                   DEC	C
004EA1 C2 98 4E    14075                   JP	NZ,FLOAT
004EA4 C9          14076                   RET
004EA5             14077   ;
004EA5             14078   ;SFLOAT - Convert to floating-point if necessary.
004EA5             14079   ;    Input: Variable-type number in HLH'L'C
004EA5             14080   ;    Output: Floating-point in HLH'L'C
004EA5             14081   ;    Destroys: A,C,H,L,H',L',F
004EA5             14082   ;
004EA5 08          14083   FLOATA:         EX	AF,AF'
004EA6             14084                   ; ADD	A,(RTABLE-DTABLE)/2
004EA6 C6 2E       14085                   ADD	A,RTABLE-DTABLE/2
004EA8 08          14086                   EX	AF,AF'
004EA9 CD DC 4E    14087   FLOAT2:         CALL	SWAP
004EAC CD B2 4E    14088                   CALL	SFLOAT
004EAF CD DC 4E    14089                   CALL	SWAP
004EB2 0D          14090   SFLOAT:         DEC	C
004EB3 0C          14091                   INC	C
004EB4 C0          14092                   RET	NZ		;ALREADY FLOATING-POINT
004EB5 CD 01 4F    14093                   CALL	TESTmat
004EB8 C8          14094                   RET	Z		;ZERO
004EB9 7C          14095                   LD	A,H
004EBA B7          14096                   OR	A
004EBB FC 06 4E    14097                   CALL	M,NEGATE
004EBE 0E 9F       14098                   LD	C,159
004EC0 CD 98 4E    14099                   CALL	FLOAT
004EC3 B7          14100                   OR	A
004EC4 F8          14101                   RET	M		;NEGATIVE
004EC5 CB BC       14102                   RES	7,H
004EC7 C9          14103                   RET
004EC8             14104   ;
004EC8             14105   ;ROUND UP
004EC8             14106   ;Return with carry set if 32-bit overflow
004EC8             14107   ;   Destroys: H,L,B',C',H',L',F
004EC8             14108   ;
004EC8 D9          14109   ADD1:           EXX
004EC9 01 01 00    14110                   LD	BC,1
004ECC 09          14111                   ADD	HL,BC
004ECD D9          14112                   EXX
004ECE D0          14113                   RET	NC
004ECF C5          14114                   PUSH	BC
004ED0 01 01 00    14115                   LD	BC,1
004ED3 09          14116                   ADD	HL,BC
004ED4 C1          14117                   POP	BC
004ED5 C9          14118                   RET
004ED6             14119   ;
004ED6             14120   ;ODD - Add one if even, leave alone if odd.
004ED6             14121   ; (Used to perform unbiassed rounding, i.e.
004ED6             14122   ;  number is rounded up half the time)
004ED6             14123   ;    Destroys: L',F (carry cleared)
004ED6             14124   ;
004ED6 B7          14125   ODD:            OR	A		;CLEAR CARRY
004ED7 D9          14126                   EXX
004ED8 CB C5       14127                   SET	0,L		;MAKE ODD
004EDA D9          14128                   EXX
004EDB C9          14129                   RET
004EDC             14130   ;
004EDC             14131   ;SWAP - Swap arguments.
004EDC             14132   ;    Exchanges DE,HL D'E',H'L' and B,C
004EDC             14133   ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
004EDC             14134   ;SWAP1 - Swap DEHL with D'E'H'L'
004EDC             14135   ;    Destroys: D,E,H,L,D',E',H',L'
004EDC             14136   ;
004EDC 79          14137   SWAP:           LD	A,C
004EDD 48          14138                   LD	C,B
004EDE 47          14139                   LD	B,A
004EDF EB          14140   SWAP1:          EX	DE,HL
004EE0 D9          14141                   EXX
004EE1 EB          14142                   EX	DE,HL
004EE2 D9          14143                   EXX
004EE3 C9          14144                   RET
004EE4             14145   ;
004EE4             14146   ;DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
004EE4             14147   ;INCC - destroys C,F
004EE4             14148   ;OFLOW
004EE4             14149   ;
004EE4 CD 82 4F    14150   DIV2:           CALL	D2
004EE7 D9          14151                   EXX
004EE8 CB 18       14152                   RR	B
004EEA CB 19       14153                   RR	C
004EEC 08          14154                   EX	AF,AF'
004EED B0          14155                   OR	B
004EEE 08          14156                   EX	AF,AF'
004EEF D9          14157                   EXX
004EF0 0C          14158   INCC:           INC	C
004EF1 C0          14159                   RET	NZ
004EF2 3E 14       14160   OFLOW:          LD	A,TOOBIG
004EF4 C3 26 45    14161                   JP	ERROR_mat		;"Too big"
004EF7             14162   ;
004EF7             14163   ;FTEST - Test for zero & sign
004EF7             14164   ;    Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
004EF7             14165   ;
004EF7 CD 01 4F    14166   FTEST:          CALL	TESTmat
004EFA C8          14167                   RET	Z
004EFB 7C          14168                   LD	A,H
004EFC E6 80       14169                   AND	10000000B
004EFE F6 40       14170                   OR	01000000B
004F00 C9          14171                   RET
004F01             14172   ;
004F01             14173   ;TEST - Test HLH'L' for zero.
004F01             14174   ;    Output: Z-flag set & A=0 if HLH'L'=0
004F01             14175   ;    Destroys: A,F
004F01             14176   ;
004F01 7C          14177   TESTmat:           LD	A,H
004F02 B5          14178                   OR	L
004F03 D9          14179                   EXX
004F04 B4          14180                   OR	H
004F05 B5          14181                   OR	L
004F06 D9          14182                   EXX
004F07 C9          14183                   RET
004F08             14184   ;
004F08             14185   ;FCOMP - Compare two numbers
004F08             14186   ;    Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
004F08             14187   ;
004F08 78          14188   FCOMP:          LD	A,B
004F09 B1          14189                   OR	C		;Both integer?
004F0A 20 0A       14190                   JR	NZ,FCOMP1
004F0C CD 1E 4F    14191                   CALL	ICP
004F0F 3E 00       14192   FCOMP0:         LD	A,0
004F11 C8          14193                   RET	Z		;Equal
004F12 3E 80       14194                   LD	A,80H
004F14 1F          14195                   RRA
004F15 C9          14196                   RET
004F16             14197   ;
004F16 CD A9 4E    14198   FCOMP1:         CALL	FLOAT2		;Float both
004F19 CD 2B 4F    14199                   CALL	FCP
004F1C 18 F1       14200                   JR	FCOMP0
004F1E             14201   ;
004F1E             14202   ;Integer and floating point compare.
004F1E             14203   ;Sets carry & zero flags according to HLH'L'C-DED'E'B
004F1E             14204   ;Result pre-set to FALSE
004F1E             14205   ;ICP1, FCP1 destroy A,F
004F1E             14206   ;
004F1E             14207   ;ZERO - Return zero.
004F1E             14208   ; Destroys: A,C,H,L,H',L'
004F1E             14209   ;
004F1E CD 4A 4F    14210   ICP:            CALL	ICP1
004F21 3E 00       14211   ZEROmat:           LD	A,0
004F23 D9          14212                   EXX
004F24 67          14213                   LD	H,A
004F25 6F          14214                   LD	L,A
004F26 D9          14215                   EXX
004F27 67          14216                   LD	H,A
004F28 6F          14217                   LD	L,A
004F29 4F          14218                   LD	C,A
004F2A C9          14219                   RET
004F2B             14220   ;
004F2B CD 3D 4F    14221   FCP:            CALL	FCP1
004F2E 18 F1       14222                   JR	ZEROmat		;PRESET FALSE
004F30             14223   ;
004F30 79          14224   FCP0:           LD	A,C
004F31 B8          14225                   CP	B		;COMPARE EXPONENTS
004F32 C0          14226                   RET	NZ
004F33 ED 52       14227   ICP0:           SBC	HL,DE		;COMP MANTISSA MSB
004F35 19          14228                   ADD	HL,DE
004F36 C0          14229                   RET	NZ
004F37 D9          14230                   EXX
004F38 ED 52       14231                   SBC	HL,DE		;COMP MANTISSA LSB
004F3A 19          14232                   ADD	HL,DE
004F3B D9          14233                   EXX
004F3C C9          14234                   RET
004F3D             14235   ;
004F3D 7C          14236   FCP1:           LD	A,H
004F3E AA          14237                   XOR	D
004F3F 7C          14238                   LD	A,H
004F40 17          14239                   RLA
004F41 F8          14240                   RET	M
004F42 30 EC       14241                   JR	NC,FCP0
004F44 CD 30 4F    14242                   CALL	FCP0
004F47 C8          14243                   RET	Z		;** V0.1 BUG FIX
004F48 3F          14244                   CCF
004F49 C9          14245                   RET
004F4A             14246   ;
004F4A 7C          14247   ICP1:           LD	A,H
004F4B AA          14248                   XOR	D
004F4C F2 33 4F    14249                   JP	P,ICP0
004F4F 7C          14250                   LD	A,H
004F50 17          14251                   RLA
004F51 C9          14252                   RET
004F52             14253   ;
004F52             14254   ;ADD - Integer add.
004F52             14255   ;Carry, sign & zero flags valid on exit
004F52             14256   ;    Destroys: H,L,H',L',F
004F52             14257   ;
004F52 05          14258   X10B:           DEC	B
004F53 0C          14259                   INC	C
004F54 CD 8E 4F    14260   X5:             CALL	COPY0
004F57 CD 81 4F    14261                   CALL	D2C
004F5A CD 81 4F    14262                   CALL	D2C
004F5D 08          14263                   EX	AF,AF'		;SAVE CARRY
004F5E D9          14264   ADD:            EXX
004F5F 19          14265                   ADD	HL,DE
004F60 D9          14266                   EXX
004F61 ED 5A       14267                   ADC	HL,DE
004F63 C9          14268                   RET
004F64             14269   ;
004F64             14270   ;SUB - Integer subtract.
004F64             14271   ;Carry, sign & zero flags valid on exit
004F64             14272   ;    Destroys: H,L,H',L',F
004F64             14273   ;
004F64 D9          14274   SUB:            EXX
004F65 B7          14275                   OR	A
004F66 ED 52       14276                   SBC	HL,DE
004F68 D9          14277                   EXX
004F69 ED 52       14278                   SBC	HL,DE
004F6B C9          14279                   RET
004F6C             14280   ;
004F6C             14281   ;X10 - unsigned integer * 10
004F6C             14282   ;   Inputs: HLH'L' initial value
004F6C             14283   ;  Outputs: DED'E' = initial HLH'L'
004F6C             14284   ;           Carry bit set if overflow
004F6C             14285   ;           If carry not set HLH'L'=result
004F6C             14286   ; Destroys: D,E,H,L,D',E',H',L',F
004F6C             14287   ;X2 - Multiply HLH'L' by 2 as 32-bit integer.
004F6C             14288   ;    Carry set if MSB=1 before shift.
004F6C             14289   ;    Sign set if MSB=1 after shift.
004F6C             14290   ;    Destroys: H,L,H',L',F
004F6C             14291   ;
004F6C CD 8E 4F    14292   X10:            CALL	COPY0		;DED'E'=HLH'L'
004F6F CD 7B 4F    14293                   CALL	X2
004F72 D8          14294                   RET	C		;TOO BIG
004F73 CD 7B 4F    14295                   CALL	X2
004F76 D8          14296                   RET	C
004F77 CD 5E 4F    14297                   CALL	ADD
004F7A D8          14298                   RET	C
004F7B D9          14299   X2:             EXX
004F7C 29          14300                   ADD	HL,HL
004F7D D9          14301                   EXX
004F7E ED 6A       14302                   ADC	HL,HL
004F80 C9          14303                   RET
004F81             14304   ;
004F81             14305   ;D2 - Divide HLH'L' by 2 as 32-bit integer.
004F81             14306   ;    Carry set if LSB=1 before shift.
004F81             14307   ;    Destroys: H,L,H',L',F
004F81             14308   ;
004F81 0C          14309   D2C:            INC	C
004F82 CB 3C       14310   D2:             SRL	H
004F84 CB 1D       14311                   RR	L
004F86 D9          14312                   EXX
004F87 CB 1C       14313                   RR	H
004F89 CB 1D       14314                   RR	L
004F8B D9          14315                   EXX
004F8C C9          14316                   RET
004F8D             14317   ;
004F8D             14318   ;COPY - COPY HLH'L'C INTO DED'E'B
004F8D             14319   ;  Destroys: B,C,D,E,H,L,D',E',H',L'
004F8D             14320   ;
004F8D 41          14321   COPY:           LD	B,C
004F8E 54          14322   COPY0:          LD	D,H
004F8F 5D          14323                   LD	E,L
004F90 D9          14324                   EXX
004F91 54          14325                   LD	D,H
004F92 5D          14326                   LD	E,L
004F93 D9          14327                   EXX
004F94 C9          14328                   RET
004F95             14329   ;
004F95             14330   ;SQUARE - PUSH X*X
004F95             14331   ;PUSH5 - PUSH HLH'L'C ONTO STACK.
004F95             14332   ;  Destroys: SP,IX
004F95             14333   ;
004F95 CD 8D 4F    14334   SQUARE:         CALL	COPY
004F98 CD 0D 47    14335                   CALL	FMUL
004F9B DD E1       14336   PUSH5:          POP	IX		;RETURN ADDRESS
004F9D C5          14337                   PUSH	BC
004F9E E5          14338                   PUSH	HL
004F9F D9          14339                   EXX
004FA0 E5          14340                   PUSH	HL
004FA1 D9          14341                   EXX
004FA2 DD E9       14342                   JP	(IX)		;"RETURN"
004FA4             14343   ;
004FA4             14344   ;POP5 - POP DED'E'B OFF STACK.
004FA4             14345   ;  Destroys: A,B,D,E,D',E',SP,IX
004FA4             14346   ;
004FA4 DD E1       14347   POP5:           POP	IX		;RETURN ADDRESS
004FA6 D9          14348                   EXX
004FA7 D1          14349                   POP	DE
004FA8 D9          14350                   EXX
004FA9 D1          14351                   POP	DE
004FAA 79          14352                   LD	A,C
004FAB C1          14353                   POP	BC
004FAC 41          14354                   LD	B,C
004FAD 4F          14355                   LD	C,A
004FAE DD E9       14356                   JP	(IX)		;"RETURN"
004FB0             14357   ;
004FB0             14358   ;RATIO - Calculate (X-1)/(X+1)
004FB0             14359   ;    Inputs: X in HLH'L'C
004FB0             14360   ;   Outputs: (X-1)/(X+1) in HLH'L'C
004FB0             14361   ;  Destroys: Everything except IY,SP,I
004FB0             14362   ;
004FB0 CD 9B 4F    14363   RATIO:          CALL	PUSH5		;SAVE X
004FB3 CD 03 4A    14364                   CALL	DONE
004FB6 CD 45 46    14365                   CALL	FADD
004FB9 CD A4 4F    14366                   CALL	POP5		;RESTORE X
004FBC CD 9B 4F    14367                   CALL	PUSH5		;SAVE X+1
004FBF CD DC 4E    14368                   CALL	SWAP
004FC2 CD 03 4A    14369                   CALL	DONE
004FC5 CD 2F 46    14370                   CALL	FSUB
004FC8 CD A4 4F    14371                   CALL	POP5		;RESTORE X+1
004FCB C3 9D 46    14372                   JP	FDIV
004FCE             14373   ;
004FCE             14374   ;POLY - Evaluate a polynomial.
004FCE             14375   ;    Inputs: X in HLH'L'C and also stored at (SP+2)
004FCE             14376   ;            Polynomial coefficients follow call.
004FCE             14377   ;   Outputs: Result in HLH'L'C
004FCE             14378   ;  Destroys: Everything except IY,SP,I
004FCE             14379   ;Routine terminates on finding a coefficient >=1.
004FCE             14380   ;Note: The last coefficient is EXECUTED on return
004FCE             14381   ;      so must contain only innocuous bytes!
004FCE             14382   ;
004FCE DD 21 02 00 14383   POLY:           LD	IX,2
004FD2 DD 39       14384                   ADD	IX,SP
004FD4 DD E3       14385                   EX	(SP),IX
004FD6 CD F1 19    14386                   CALL	DLOAD5		;FIRST COEFFICIENT
004FD9 CD 0D 47    14387   POLY1:          CALL	FMUL
004FDC 11 05 00    14388                   LD	DE,5
004FDF DD 19       14389                   ADD	IX,DE
004FE1 CD F1 19    14390                   CALL	DLOAD5		;NEXT COEFFICIENT
004FE4 DD E3       14391                   EX	(SP),IX
004FE6 04          14392                   INC	B
004FE7 05          14393                   DEC	B		;TEST
004FE8 FA 45 46    14394                   JP	M,FADD
004FEB CD 45 46    14395                   CALL	FADD
004FEE CD F1 19    14396                   CALL	DLOAD5		;X
004FF1 DD E3       14397                   EX	(SP),IX
004FF3 18 E4       14398                   JR	POLY1
004FF5             14399   ;
004FF5             14400   ;POWR10 - Calculate power of ten.
004FF5             14401   ;    Inputs: A=power of 10 required (A<128)
004FF5             14402   ;            A=binary exponent to be exceeded (A>=128)
004FF5             14403   ;   Outputs: DED'E'B = result
004FF5             14404   ;            A = actual power of ten returned
004FF5             14405   ;  Destroys: A,B,D,E,A',D',E',F,F'
004FF5             14406   ;
004FF5 3C          14407   POWR10:         INC	A
004FF6 08          14408                   EX	AF,AF'
004FF7 E5          14409                   PUSH	HL
004FF8 D9          14410                   EXX
004FF9 E5          14411                   PUSH	HL
004FFA D9          14412                   EXX
004FFB CD 03 4A    14413                   CALL	DONE
004FFE CD DC 4E    14414                   CALL	SWAP
005001 AF          14415                   XOR	A
005002 08          14416   POWR11:         EX	AF,AF'
005003 3D          14417                   DEC	A
005004 28 20       14418                   JR	Z,POWR14	;EXITmat TYPE 1
005006 F2 0D 50    14419                   JP	P,POWR13
005009 B9          14420                   CP	C
00500A 38 1A       14421                   JR	C,POWR14	;EXITmat TYPE 2
00500C 3C          14422                   INC	A
00500D 08          14423   POWR13:         EX	AF,AF'
00500E 3C          14424                   INC	A
00500F CB FC       14425                   SET	7,H
005011 CD 54 4F    14426                   CALL	X5
005014 30 05       14427                   JR	NC,POWR12
005016 08          14428                   EX	AF,AF'
005017 CD 81 4F    14429                   CALL	D2C
00501A 08          14430                   EX	AF,AF'
00501B 08          14431   POWR12:         EX	AF,AF'
00501C DC C8 4E    14432                   CALL	C,ADD1		;ROUND UP
00501F 0C          14433                   INC	C
005020 FA 02 50    14434                   JP	M,POWR11
005023 C3 F2 4E    14435                   JP	OFLOW
005026 CD DC 4E    14436   POWR14:         CALL	SWAP
005029 CB BA       14437                   RES	7,D
00502B D9          14438                   EXX
00502C E1          14439                   POP	HL
00502D D9          14440                   EXX
00502E E1          14441                   POP	HL
00502F 08          14442                   EX	AF,AF'
005030 C9          14443                   RET
005031             14444   ;
005031             14445   ;DIVA, DIVB - DIVISION PRIMITIVE.
005031             14446   ;    Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
005031             14447   ;              Remainder in H'L'HL
005031             14448   ;    Inputs: A = loop counter (normally -32)
005031             14449   ;    Destroys: A,D,E,H,L,D',E',H',L',F
005031             14450   ;
005031 B7          14451   DIVA:           OR	A		;CLEAR CARRY
005032 ED 42       14452   DIV0:           SBC	HL,BC		;DIVIDEND-DIVISOR
005034 D9          14453                   EXX
005035 ED 42       14454                   SBC	HL,BC
005037 D9          14455                   EXX
005038 30 05       14456                   JR	NC,DIV1
00503A 09          14457                   ADD	HL,BC		;DIVIDEND+DIVISOR
00503B D9          14458                   EXX
00503C ED 4A       14459                   ADC	HL,BC
00503E D9          14460                   EXX
00503F 3F          14461   DIV1:           CCF
005040 CB 13       14462   DIVC:           RL	E		;SHIFT RESULT INTO DE
005042 CB 12       14463                   RL	D
005044 D9          14464                   EXX
005045 CB 13       14465                   RL	E
005047 CB 12       14466                   RL	D
005049 D9          14467                   EXX
00504A 3C          14468                   INC	A
00504B F0          14469                   RET	P
00504C ED 6A       14470   DIVB:           ADC	HL,HL		;DIVIDEND*2
00504E D9          14471                   EXX
00504F ED 6A       14472                   ADC	HL,HL
005051 D9          14473                   EXX
005052 30 DE       14474                   JR	NC,DIV0
005054 B7          14475                   OR	A
005055 ED 42       14476                   SBC	HL,BC		;DIVIDEND-DIVISOR
005057 D9          14477                   EXX
005058 ED 42       14478                   SBC	HL,BC
00505A D9          14479                   EXX
00505B 37          14480                   SCF
00505C C3 40 50    14481                   JP	DIVC
00505F             14482   ;
00505F             14483   ;MULA, MULB - MULTIPLICATION PRIMITIVE.
00505F             14484   ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
00505F             14485   ;    Inputs: A = loop counter (usually -32)
00505F             14486   ;            H'L'HL = 0
00505F             14487   ;    Destroys: D,E,H,L,D',E',H',L',A,F
00505F             14488   ;
00505F B7          14489   MULA:           OR	A		;CLEAR CARRY
005060 D9          14490   MUL0:           EXX
005061 CB 1A       14491                   RR	D		;MULTIPLIER/2
005063 CB 1B       14492                   RR	E
005065 D9          14493                   EXX
005066 CB 1A       14494                   RR	D
005068 CB 1B       14495                   RR	E
00506A 30 05       14496                   JR	NC,MUL1
00506C 09          14497                   ADD	HL,BC		;ADD IN MULTIPLICAND
00506D D9          14498                   EXX
00506E ED 4A       14499                   ADC	HL,BC
005070 D9          14500                   EXX
005071 3C          14501   MUL1:           INC	A
005072 F0          14502                   RET	P
005073 D9          14503   MULB:           EXX
005074 CB 1C       14504                   RR	H		;PRODUCT/2
005076 CB 1D       14505                   RR	L
005078 D9          14506                   EXX
005079 CB 1C       14507                   RR	H
00507B CB 1D       14508                   RR	L
00507D C3 60 50    14509                   JP	MUL0
005080             14510   ;
005080             14511   ;SQRA, SQRB - SQUARE ROOT PRIMITIVES
005080             14512   ;    Function: B'C'BC = SQR (D'E'DE)
005080             14513   ;    Inputs: A = loop counter (normally -31)
005080             14514   ;            B'C'BCH'L'HL initialised to 0
005080             14515   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
005080             14516   ;
005080 ED 42       14517   SQR1:           SBC	HL,BC
005082 D9          14518                   EXX
005083 ED 42       14519                   SBC	HL,BC
005085 D9          14520                   EXX
005086 0C          14521                   INC	C
005087 30 07       14522                   JR	NC,SQR2
005089 0D          14523                   DEC	C
00508A 09          14524                   ADD	HL,BC
00508B D9          14525                   EXX
00508C ED 4A       14526                   ADC	HL,BC
00508E D9          14527                   EXX
00508F 0D          14528                   DEC	C
005090 3C          14529   SQR2:           INC	A
005091 F0          14530                   RET	P
005092 CB 21       14531   SQRA:           SLA	C
005094 CB 10       14532                   RL	B
005096 0C          14533                   INC	C
005097 D9          14534                   EXX
005098 CB 11       14535                   RL	C
00509A CB 10       14536                   RL	B
00509C CD C8 50    14537                   CALL	SLA8
00509F CD C8 50    14538                   CALL	SLA8
0050A2 D9          14539                   EXX
0050A3 D2 80 50    14540                   JP	NC,SQR1
0050A6 B7          14541   SQR3:           OR	A
0050A7 ED 42       14542                   SBC	HL,BC
0050A9 D9          14543                   EXX
0050AA ED 42       14544                   SBC	HL,BC
0050AC D9          14545                   EXX
0050AD 0C          14546                   INC	C
0050AE C3 90 50    14547                   JP	SQR2
0050B1             14548   ;
0050B1 29          14549   SQRB:           ADD	HL,HL
0050B2 D9          14550                   EXX
0050B3 ED 6A       14551                   ADC	HL,HL
0050B5 D9          14552                   EXX
0050B6 38 EE       14553                   JR	C,SQR3
0050B8 3C          14554                   INC	A
0050B9 0C          14555                   INC	C
0050BA ED 42       14556                   SBC	HL,BC
0050BC D9          14557                   EXX
0050BD ED 42       14558                   SBC	HL,BC
0050BF D9          14559                   EXX
0050C0 D0          14560                   RET	NC
0050C1 09          14561                   ADD	HL,BC
0050C2 D9          14562                   EXX
0050C3 ED 4A       14563                   ADC	HL,BC
0050C5 D9          14564                   EXX
0050C6 0D          14565                   DEC	C
0050C7 C9          14566                   RET
0050C8             14567   ;
0050C8 D9          14568   SLA8:           EXX
0050C9 CB 23       14569                   SLA	E
0050CB CB 12       14570                   RL	D
0050CD D9          14571                   EXX
0050CE CB 13       14572                   RL	E
0050D0 CB 12       14573                   RL	D
0050D2 D9          14574                   EXX
0050D3 ED 6A       14575                   ADC	HL,HL
0050D5 D9          14576                   EXX
0050D6 ED 6A       14577                   ADC	HL,HL
0050D8 C9          14578                   RET
0050D9             14579   ;
0050D9 DD 7E 00    14580   DIGITQ:         LD	A,(IX)
0050DC FE 3A       14581                   CP	'9'+1
0050DE 3F          14582                   CCF
0050DF D8          14583                   RET	C
0050E0 FE 30       14584                   CP	'0'
0050E2 C9          14585                   RET
0050E3             14586   ;
0050E3 DD 7E 00    14587   SIGNQ:          LD	A,(IX)
0050E6 DD 23       14588                   INC	IX
0050E8 FE 20       14589                   CP	' '
0050EA 28 F7       14590                   JR	Z,SIGNQ
0050EC FE 2B       14591                   CP	'+'
0050EE C8          14592                   RET	Z
0050EF FE 2D       14593                   CP	'-'
0050F1 C8          14594                   RET	Z
0050F2 DD 2B       14595                   DEC	IX
0050F4 C9          14596                   RET
0050F5             14597   ;
0050F5 08          14598   ABS2:           EX	AF,AF'
0050F6 CB 7C       14599                   BIT	7,H
0050F8 C4 06 4E    14600                   CALL	NZ,NEGATE	;MAKE ARGUMENTS +VE
0050FB CD DC 4E    14601                   CALL	SWAP
0050FE CB 7C       14602                   BIT	7,H
005100 C4 06 4E    14603                   CALL	NZ,NEGATE
005103 44          14604                   LD	B,H
005104 4D          14605                   LD	C,L
005105 21 00 00    14606                   LD	HL,0
005108 D9          14607                   EXX
005109 44          14608                   LD	B,H
00510A 4D          14609                   LD	C,L
00510B 21 00 00    14610                   LD	HL,0
00510E C9          14611                   RET
00510F             14612   ;
00510F             14613   ;                END
00510F             14614   ; --- End math.asm ---
00510F             14615   
00510F             14616   ; --- Begin data.asm ---
00510F             14617   ;
00510F             14618   ;Automatically created from original source on 2024-12-15 15:29:12
00510F             14619   ;
00510F             14620                   .ASSUME ADL = 0
00510F             14621   ;	.ORG 0x0000
00510F             14622   ;                DEFINE LORAM, SPACE = ROM
00510F             14623   ;                SEGMENT LORAM
00510F             14624   ;
00510F             14625   ;                XDEF	FLAGS
00510F             14626   ;                XDEF	OSWRCHPT
00510F             14627   ;                XDEF	OSWRCHCH
00510F             14628   ;                XDEF	OSWRCHFH
00510F             14629   ;                XDEF	KEYDOWN
00510F             14630   ;                XDEF	KEYASCII
00510F             14631   ;                XDEF	KEYCOUNT
00510F             14632   ;                XDEF	SCRAP
00510F             14633   ;                XDEF	BUFFER
00510F             14634   ;                XDEF	LISTON
00510F             14635   ;                XDEF	PAGE_
00510F             14636   ;
00510F             14637   FLAGS:          DS	1
005110             14638   OSWRCHPT:       DS	2
005112             14639   OSWRCHCH:       DS	1
005113             14640   OSWRCHFH:       DS	1
005114             14641   KEYDOWN:        DS	1
005115             14642   KEYASCII:       DS	1
005116             14643   KEYCOUNT:       DS	1
005117             14644   SCRAP:          DS	31
005136             14645   ;
005136             14646   end_binary: ;  for 05_assemble.py to know where to truncate the binary file
005136             14647   
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 
005136 FF FF FF FF 14648                   ALIGN 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
005200             14649   ;
005200             14650   ;RAM MODULE FOR BBC BASIC INTERPRETER
005200             14651   ;FOR USE WITH VERSION 5.0 OF BBC BASIC
005200             14652   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
005200             14653   ;
005200             14654   ;                XDEF	ACCS
005200             14655   ;                XDEF	BUFFER
005200             14656   ;                XDEF	ONERSP
005200             14657   ;                XDEF	LIBASE
005200             14658   ;                XDEF	PAGE_
005200             14659   ;                XDEF	LOMEM
005200             14660   ;                XDEF	FREE
005200             14661   ;                XDEF	HIMEM
005200             14662   ;                XDEF	RANDOM
005200             14663   ;                XDEF	COUNT
005200             14664   ;                XDEF	WIDTH
005200             14665   ;                XDEF	ERL
005200             14666   ;                XDEF	ERR
005200             14667   ;                XDEF	ERRTRP
005200             14668   ;                XDEF	ERRTXT
005200             14669   ;                XDEF	TRACEN
005200             14670   ;                XDEF	AUTONO
005200             14671   ;                XDEF	INCREM
005200             14672   ;                XDEF	LISTON
005200             14673   ;                XDEF	DATPTR
005200             14674   ;                XDEF	FNPTR
005200             14675   ;                XDEF	PROPTR
005200             14676   ;                XDEF	STAVAR
005200             14677   ;                XDEF	OC
005200             14678   ;                XDEF	PC
005200             14679   ;                XDEF	DYNVAR
005200             14680   ;                XDEF	CURLIN
005200             14681   ;                XDEF	USER
005200             14682   ;
005200             14683   ;n.b. ACCS, BUFFER & STAVAR must be on page boundaries.
005200             14684   ;
005200             14685   ACCS:           DS	256		;STRING ACCUMULATOR
005300             14686   BUFFER:         DS	256		;STRING INPUT BUFFER
005400             14687   
005400             14688   STAVAR:         DS	27*4		;STATIC VARIABLES
00546C             14689   ; OC:             EQU	STAVAR+15*4	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             14690   ; PC:             EQU	STAVAR+16*4	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             14691   OC:             EQU	15*4+STAVAR	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             14692   PC:             EQU	16*4+STAVAR	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             14693   DYNVAR:         DS	54*2		;DYN. VARIABLE POINTERS
0054D8             14694   FNPTR:          DS	2		;DYN. FUNCTION POINTER
0054DA             14695   PROPTR:         DS	2		;DYN. PROCEDURE POINTER
0054DC             14696   ;
0054DC             14697   PAGE_:          DS	2		;START OF USER PROGRAM
0054DE             14698   LOMEM:          DS	2		;START OF DYN. STORAGE
0054E0             14699   FREE:           DS	2		;FIRST FREE-SPACE BYTE
0054E2             14700   HIMEM:          DS	2		;FIRST BYTE ABOVE STACK
0054E4             14701   LIBASE:         DS	2		;START OF FIRST LIBRARY
0054E6             14702   ;
0054E6             14703   TRACEN:         DS	2		;TRACE FLAG & NUMBER
0054E8             14704   AUTONO:         DS	2		;AUTO FLAG & NUMBER
0054EA             14705   ERRTRP:         DS	2		;ON ERROR STMT POINTER \
0054EC             14706   ONERSP:         DS	2		;ON ERROR LOCAL STKPTR /
0054EE             14707   ERRTXT:         DS	2		;ERROR MESSAGE POINTER
0054F0             14708   DATPTR:         DS	2		;DATA POINTER
0054F2             14709   ERL:            DS	2		;LINE NO OF LAST ERROR
0054F4             14710   CURLIN:         DS	2		;POINTER TO CURRENT LINE
0054F6             14711   RANDOM:         DS	5		;RANDOM NUMBER
0054FB             14712   COUNT:          DS	1		;PRINT POSITION
0054FC             14713   WIDTH:          DS	1		;PRINT WIDTH
0054FD             14714   ERR:            DS	1		;ERROR NUMBER
0054FE             14715   LISTON:         DS	1		;LISTO & OPT FLAG
0054FF             14716   INCREM:         DS	1		;AUTO INCREMENT
005500             14717   VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; originally in equs.inc
005500             14718   ;
005500             14719   USER:           ; END
005500             14720   ; --- End data.asm ---
005500             14721   
