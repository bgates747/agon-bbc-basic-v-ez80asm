PC     Output      Line
040000             0001   ; --- Begin mos_api.inc ---
040000             0002   ;
040000             0003   ; Title:	AGON MOS - API for user projects
040000             0004   ; Author:	Dean Belfield
040000             0005   ; Created:	03/08/2022
040000             0006   ; Last Updated:	11/11/2023
040000             0007   ;
040000             0008   ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
040000             0009   ;
040000             0010   ; Modinfo:
040000             0011   ; 05/08/2022:	Added mos_feof
040000             0012   ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0013   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0014   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0015   ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0016   ; 13/10/2022:	Added mos_oscli
040000             0017   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0018   ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0019   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0020   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0021   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0022   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0023   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0024   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0025   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0026   ; 19/05/2023:	Added sysvar_scrMode
040000             0027   ; 05/06/2023:	Added sysvar_rtcEnable
040000             0028   ; 03/08/2023:	Added mos_setkbvector
040000             0029   ; 10/08/2023:	Added mos_getkbmap
040000             0030   ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0031   ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
040000             0032   ;
040000             0033   ; VDP control (VDU 23, 0, n)
040000             0034   ;
040000             0035   vdp_gp:			EQU 	80h
040000             0036   vdp_keycode:		EQU 	81h
040000             0037   vdp_cursor:		EQU	82h
040000             0038   vdp_scrchar:		EQU	83h
040000             0039   vdp_scrpixel:		EQU	84h
040000             0040   vdp_audio:		EQU	85h
040000             0041   vdp_mode:		EQU	86h
040000             0042   vdp_rtc:		EQU	87h
040000             0043   vdp_keystate:		EQU	88h
040000             0044   vdp_logicalcoords:	EQU	C0h
040000             0045   vdp_terminalmode:	EQU	FFh
040000             0046   
040000             0047   ; MOS high level functions
040000             0048   ;
040000             0049   mos_getkey:		EQU	00h
040000             0050   mos_load:		EQU	01h
040000             0051   mos_save:		EQU	02h
040000             0052   mos_cd:			EQU	03h
040000             0053   mos_dir:		EQU	04h
040000             0054   mos_del:		EQU	05h
040000             0055   mos_ren:		EQU	06h
040000             0056   mos_mkdir:		EQU	07h
040000             0057   mos_sysvars:		EQU	08h
040000             0058   mos_editline:		EQU	09h
040000             0059   mos_fopen:		EQU	0Ah
040000             0060   mos_fclose:		EQU	0Bh
040000             0061   mos_fgetc:		EQU	0Ch
040000             0062   mos_fputc:		EQU	0Dh
040000             0063   mos_feof:		EQU	0Eh
040000             0064   mos_getError:		EQU	0Fh
040000             0065   mos_oscli:		EQU	10h
040000             0066   mos_copy:		EQU	11h
040000             0067   mos_getrtc:		EQU	12h
040000             0068   mos_setrtc:		EQU	13h
040000             0069   mos_setintvector:	EQU	14h
040000             0070   mos_uopen:		EQU	15h
040000             0071   mos_uclose:		EQU	16h
040000             0072   mos_ugetc:		EQU	17h
040000             0073   mos_uputc:		EQU 	18h
040000             0074   mos_getfil:		EQU	19h
040000             0075   mos_fread:		EQU	1Ah
040000             0076   mos_fwrite:		EQU	1Bh
040000             0077   mos_flseek:		EQU	1Ch
040000             0078   mos_setkbvector:	EQU	1Dh
040000             0079   mos_getkbmap:		EQU	1Eh
040000             0080   mos_i2c_open:		EQU	1Fh
040000             0081   mos_i2c_close:		EQU	20h
040000             0082   mos_i2c_write:		EQU	21h
040000             0083   mos_i2c_read:		EQU	22h
040000             0084   
040000             0085   
040000             0086   ; FatFS file access functions
040000             0087   ;
040000             0088   ffs_fopen:		EQU	80h
040000             0089   ffs_fclose:		EQU	81h
040000             0090   ffs_fread:		EQU	82h
040000             0091   ffs_fwrite:		EQU	83h
040000             0092   ffs_flseek:		EQU	84h
040000             0093   ffs_ftruncate:		EQU	85h
040000             0094   ffs_fsync:		EQU	86h
040000             0095   ffs_fforward:		EQU	87h
040000             0096   ffs_fexpand:		EQU	88h
040000             0097   ffs_fgets:		EQU	89h
040000             0098   ffs_fputc:		EQU	8Ah
040000             0099   ffs_fputs:		EQU	8Bh
040000             0100   ffs_fprintf:		EQU	8Ch
040000             0101   ffs_ftell:		EQU	8Dh
040000             0102   ffs_feof:		EQU	8Eh
040000             0103   ffs_fsize:		EQU	8Fh
040000             0104   ffs_ferror:		EQU	90h
040000             0105   
040000             0106   ; FatFS directory access functions
040000             0107   ;
040000             0108   ffs_dopen:		EQU	91h
040000             0109   ffs_dclose:		EQU	92h
040000             0110   ffs_dread:		EQU	93h
040000             0111   ffs_dfindfirst:		EQU	94h
040000             0112   ffs_dfindnext:		EQU	95h
040000             0113   
040000             0114   ; FatFS file and directory management functions
040000             0115   ;
040000             0116   ffs_stat:		EQU	96h
040000             0117   ffs_unlink:		EQU	97h
040000             0118   ffs_rename:		EQU	98h
040000             0119   ffs_chmod:		EQU	99h
040000             0120   ffs_utime:		EQU	9Ah
040000             0121   ffs_mkdir:		EQU	9Bh
040000             0122   ffs_chdir:		EQU	9Ch
040000             0123   ffs_chdrive:		EQU	9Dh
040000             0124   ffs_getcwd:		EQU	9Eh
040000             0125   
040000             0126   ; FatFS volume management and system configuration functions
040000             0127   ;
040000             0128   ffs_mount:		EQU	9Fh
040000             0129   ffs_mkfs:		EQU	A0h
040000             0130   ffs_fdisk:		EQU	A1h
040000             0131   ffs_getfree:		EQU	A2h
040000             0132   ffs_getlabel:		EQU	A3h
040000             0133   ffs_setlabel:		EQU	A4h
040000             0134   ffs_setcp:		EQU	A5h
040000             0135   
040000             0136   ; File access modes
040000             0137   ;
040000             0138   fa_read:		EQU	01h
040000             0139   fa_write:		EQU	02h
040000             0140   fa_open_existing:	EQU	00h
040000             0141   fa_create_new:		EQU	04h
040000             0142   fa_create_always:	EQU	08h
040000             0143   fa_open_always:		EQU	10h
040000             0144   fa_open_append:		EQU	30h
040000             0145   
040000             0146   ; System variable indexes for api_sysvars
040000             0147   ; Index into _sysvars in globals.asm
040000             0148   ;
040000             0149   sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0150   sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0151   sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0152   sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0153   sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0154   sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0155   sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0156   sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0157   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0158   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0159   sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0160   sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0161   sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0162   sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0163   sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0164   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0165   sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0166   sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0167   sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0168   sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0169   sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0170   sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0171   sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0172   sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0173   sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0174   sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0175   sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0176   sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0177   sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0178   sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0179   sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0180   sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0181   ;
040000             0182   ; Flags for the VPD protocol
040000             0183   ;
040000             0184   vdp_pflag_cursor:	EQU	00000001b
040000             0185   vdp_pflag_scrchar:	EQU	00000010b
040000             0186   vdp_pflag_point:	EQU	00000100b
040000             0187   vdp_pflag_audio:	EQU	00001000b
040000             0188   vdp_pflag_mode:		EQU	00010000b
040000             0189   vdp_pflag_rtc:		EQU	00100000b
040000             0190   vdp_pflag_mouse:	EQU	01000000b
040000             0191   ; vdp_pflag_buffered:	EQU	10000000b
040000             0192   
040000             0193   
040000             0194   ; FatFS structures
040000             0195   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0196   ;
040000             0197   ; Object ID and allocation information (FFOBJID)
040000             0198   FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0199   FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0200   FFOBJID.attr:     EQU 5    ; Object attribute
040000             0201   FFOBJID.stat:     EQU 6    ; Object chain status
040000             0202   FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0203   FFOBJID.objsize:  EQU 11   ; Object size
040000             0204   FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0205   ;
040000             0206   ; File object structure (FIL)
040000             0207   ;
040000             0208   FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0209   FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0210   FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0211   FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0212   FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0213   FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0214   FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0215   FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0216   FIL.obj.objsize:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0217   ;
040000             0218   ; Directory object structure (DIR)
040000             0219   ;
040000             0220   DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0221   DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0222   DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0223   DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0224   DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0225   DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226   DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0227   DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0228   ;
040000             0229   ; File information structure (FILINFO)
040000             0230   ;
040000             0231   FILINFO.fsize:    EQU 0    ; File size
040000             0232   FILINFO.fdate:    EQU 4    ; Modified date
040000             0233   FILINFO.ftime:    EQU 6    ; Modified time
040000             0234   FILINFO.fattrib:  EQU 8    ; File attribute
040000             0235   FILINFO.altname:  EQU 9    ; Alternative file name
040000             0236   FILINFO.fname:    EQU 22   ; Primary file name
040000             0237   FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0238   ;
040000             0239   ; Macro for calling the API
040000             0240   ; Parameters:
040000             0241   ; - function: One of the function numbers listed above
040000             0242   ;
040000             0243   			MACRO MOSCALL	function
040000             0244   			LD	A, function
040000             0245   			RST.LIS	08h
040000             0246   			ENDMACRO 	; --- End mos_api.inc ---
040000             0247   
040000             0248   ; --- Begin equs.inc ---
040000             0249   ; ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0250   ; STAVAR: EQU 0
040000             0251   ; ACCS: EQU 0
040000             0252   ; ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
040000             0253   
040000             0254   ;
040000             0255   ; Title:	BBC Basic for AGON - Equs
040000             0256   ; Author:	Dean Belfield
040000             0257   ; Created:	04/12/2024
040000             0258   ; Last Updated:	05/12/2024
040000             0259   ;
040000             0260   ; Modinfo:
040000             0261   ; 05/12/2024:	Removed Stack_Top
040000             0262   
040000             0263   ;			XREF		STAVAR
040000             0264   ;			XREF		ACCS
040000             0265   
040000             0266   RAM_Top:		EQU		0FF00h
040000             0267   
040000             0268   ; For GPIO
040000             0269   ; PA not available on eZ80L92
040000             0270   ;
040000             0271   PA_DR:			EQU		96h
040000             0272   PA_DDR:			EQU		97h
040000             0273   PA_ALT1:		EQU		98h
040000             0274   PA_ALT2:		EQU		99h
040000             0275   PB_DR:          	EQU		9Ah
040000             0276   PB_DDR:        	 	EQU		9Bh
040000             0277   PB_ALT1:        	EQU		9Ch
040000             0278   PB_ALT2:        	EQU		9Dh
040000             0279   PC_DR:          	EQU		9Eh
040000             0280   PC_DDR:         	EQU		9Fh
040000             0281   PC_ALT1:        	EQU		A0h
040000             0282   PC_ALT2:        	EQU		A1h
040000             0283   PD_DR:          	EQU		A2h
040000             0284   PD_DDR:			EQU		A3h
040000             0285   PD_ALT1:		EQU		A4h
040000             0286   PD_ALT2:		EQU		A5h
040000             0287   
040000             0288   GPIOMODE_OUT:		EQU		0	; Output
040000             0289   GPIOMODE_IN:		EQU		1	; Input
040000             0290   GPIOMODE_DIO:		EQU		2	; Open Drain IO
040000             0291   GPIOMODE_SIO:		EQU		3	; Open Source IO
040000             0292   GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040000             0293   GPIOMODE_ALTF:		EQU		5;	; Alt Function
040000             0294   GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040000             0295   GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040000             0296   GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040000             0297   GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040000             0298   
040000             0299   ; Originally in ram.asm
040000             0300   ;
040000             0301   ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%) ; back to data.asm
040000             0302   ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%) ; back to data.asm
040000             0303   ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; moved to data.asm
040000             0304   
040000             0305   ; Originally in main.asm
040000             0306   ;
040000             0307   CR:			EQU     0DH
040000             0308   LF:			EQU     0AH
040000             0309   ESC:			EQU     1BH
040000             0310   ; --- End equs.inc ---
040000             0311   
040000             0312   ; --- Begin macros.inc ---
040000             0313   ;
040000             0314   ; Title:	BBC Basic Interpreter - Z80 version
040000             0315   ;		Useful macros
040000             0316   ; Author:	Dean Belfield
040000             0317   ; Created:	04/12/2024
040000             0318   ; Last Updated:	04/12/2024
040000             0319   ;
040000             0320   ; Modinfo:
040000             0321   
040000             0322           MACRO EXREG rp1, rp2
040000             0323           PUSH    rp1
040000             0324           POP     rp2
040000             0325           ENDMACRO
040000             0326   
040000             0327           MACRO ADD8U_DE ; reg
040000             0328           ADD     A, E
040000             0329           LD      E, A
040000             0330           ADC     A, D
040000             0331           SUB     E
040000             0332           LD      D, A
040000             0333           ENDMACRO
040000             0334   
040000             0335           MACRO ADD8U_HL ; reg
040000             0336           ADD     A, L
040000             0337           LD      L, A
040000             0338           ADC     A, H
040000             0339           SUB     L
040000             0340           LD      H, A
040000             0341           ENDMACRO
040000             0342   
040000             0343           MACRO VDU VAL
040000             0344           LD      A, VAL
040000             0345           CALL    OSWRCH
040000             0346           ENDMACRO
040000             0347   
040000             0348           MACRO SET_GPIO REG, VAL
040000             0349           IN0     A, (REG)
040000             0350           OR      VAL
040000             0351           OUT0    (REG), A
040000             0352           ENDMACRO
040000             0353   
040000             0354           MACRO RES_GPIO REG, VAL
040000             0355           PUSH    BC
040000             0356           LD      A, VAL
040000             0357           CPL
040000             0358           LD      C, A
040000             0359           IN0     A, (REG)
040000             0360           AND     C
040000             0361           OUT0    (REG), A
040000             0362           POP     BC
040000             0363           ENDMACRO
040000             0364   ; --- End macros.inc ---
040000             0365   
040000             0366   ; --- Begin agon_init.asm ---
040000             0367   ;
040000             0368   ; Title:	BBC Basic for AGON - Initialisation Code
040000             0369   ;		Initialisation Code
040000             0370   ; Author:	Dean Belfield
040000             0371   ; Created:	04/12/2024
040000             0372   ; Last Updated:	14/12/2024
040000             0373   ;
040000             0374   ; Modinfo:
040000             0375   ; 14/12/2024:	Fix for *BYE command
040000             0376   
040000             0377   ;			SEGMENT __VECTORS
040000             0378   
040000             0379   ;			XREF	START
040000             0380   ;			XREF	ACCS
040000             0381   ;			XREF	TELL
040000             0382   
040000             0383   			.ASSUME	ADL = 0
040000             0384   			.ORG 0x0000
000000             0385   
000000             0386   			; INCLUDE	"equs.inc"
000000             0387   
000000             0388   argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
000000             0389   
000000             0390   ;
000000             0391   ; Start in mixed mode. Assumes MBASE is set to correct segment
000000             0392   ;
000000 C3 52 00    0393   			JP	_start				; Jump to start
000003             0394   			DS	5
000008             0395   
       FF FF FF FF 
       FF 
000008 49 CF       0396   RST_08:			RST.LIS	08h				; API call
00000A C9          0397   			RET
00000B             0398   			DS 	5
000010             0399   
       FF FF FF FF 
       FF 
000010 49 D7       0400   RST_10:			RST.LIS 10h				; Output
000012 C9          0401   			RET
000013             0402   			DS	5
000018             0403   
       FF FF FF FF 
       FF 
000018 49 DF       0404   RST_18:			RST.LIS	18h				; Block Output
00001A C9          0405   			RET
00001B             0406   			DS	5
000020             0407   
000020             0408   RST_20:			DS	8
000028             0409   RST_28:			DS	8
000030             0410   RST_30:			DS	8
000038             0411   
000038             0412   ;
000038             0413   ; The NMI interrupt vector (not currently used by AGON)
000038             0414   ;
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 
000038 FB          0415   RST_38:			EI
000039 ED 4D       0416   			RETI
00003B             0417   ;
00003B             0418   ; The header stuff is from byte 64 onwards
00003B             0419   ;
00003B FF FF FF FF 0420   			ALIGN	64
       FF          
000040             0421   
000040 4D 4F 53    0422   			DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
000043 00          0423   			DB	00h				; MOS header version 0
000044 00          0424   			DB	00h				; Flag for run mode (0: Z80, 1: ADL)
000045             0425   
000045 42 42 43 42 0426   _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
       41 53 49 43 
       2E 42 49 4E 
       00          
000052             0427   
000052             0428   ;
000052             0429   ; And the code follows on immediately after the header
000052             0430   ;
000052 5B FD E5    0431   _start:			PUSH.LIL	IY			; Preserve IY
000055             0432   
000055 FD 21 00 00 0433   			LD		IY, 0			; Preserve SPS
000059 FD 39       0434   			ADD		IY, SP
00005B 5B FD E5    0435   			PUSH.LIL	IY
00005E             0436   
00005E E3          0437   			EX		(SP), HL		; Get the SPS part of the return address
00005F 5B E5       0438   			PUSH.LIL	HL
000061 E3          0439   			EX		(SP), HL		; And restore it for BASIC
000062             0440   
000062 5B F5       0441   			PUSH.LIL	AF			; Preserve the rest of the registers
000064 5B C5       0442   			PUSH.LIL	BC
000066 5B D5       0443   			PUSH.LIL	DE
000068 5B DD E5    0444   			PUSH.LIL	IX
00006B             0445   
00006B ED 6E       0446   			LD		A, MB			; Segment base
00006D DD 21 65 01 0447   			LD		IX, argv_ptrs		; The argv array pointer address
000071 CD 51 01    0448   			CALL		_set_aix24		; Convert to a 24-bit address
000074 5B DD E5    0449   			PUSH.LIL	IX
000077 CD E1 00    0450   			CALL		_parse_params		; Parse the parameters
00007A 5B DD E1    0451   			POP.LIL		IX			; IX: argv
00007D 06 00       0452   			LD		B, 0			;  C: argc
00007F CD 9A 00    0453   			CALL		_main			; Start user code
000082             0454   
000082 5B DD E1    0455   			POP.LIL		IX			; Restore the registers
000085 5B D1       0456   			POP.LIL		DE
000087 5B C1       0457   			POP.LIL		BC
000089 5B F1       0458   			POP.LIL		AF
00008B             0459   
00008B EB          0460   			EX		DE, HL 			; DE: Return code from BASIC
00008C 5B E1       0461   			POP.LIL		HL 			; The SPS part of the return address
00008E 5B FD E1    0462   			POP.LIL		IY			; Get the preserved SPS
000091 FD F9       0463   			LD		SP, IY			; Restore SPS
000093 E3          0464   			EX		(SP), HL		; Store the SPS part of the return address on the stack
000094 EB          0465   			EX		DE, HL 			; HL: Return code from BASIC
000095             0466   
000095 5B FD E1    0467   			POP.LIL		IY			; Restore IY
000098 49 C9       0468   			RET.L					; Return to MOS
00009A             0469   
00009A             0470   ; The main routine
00009A             0471   ; IXU: argv - pointer to array of parameters
00009A             0472   ;   C: argc - number of parameters
00009A             0473   ; Returns:
00009A             0474   ;  HL: Error code, or 0 if OK
00009A             0475   ;
00009A 21 00 52    0476   _main:			LD	HL, ACCS		; Clear the ACCS
00009D 36 00       0477   			LD	(HL), 0
00009F 79          0478   			LD	A, C
0000A0 FE 02       0479   			CP	2
0000A2 28 24       0480   			JR	Z, _autoload		; 2 parameters = autoload
0000A4 38 35       0481   			JR	C, _startbasic		; 1 parameter = normal start
0000A6             0482   ;			CALL	STAR_VERSION		; Output the AGON version
0000A6 CD FA 44    0483   			CALL	TELL
0000A9 55 73 61 67 0484   			DB	"Usage:\n\r"
       65 3A 0A 0D 
0000B1 52 55 4E 20 0485   			DB	"RUN . <filename>\n\r", 0
       2E 20 3C 66 
       69 6C 65 6E 
       61 6D 65 3E 
       0A 0D 00    
0000C4 21 00 00    0486   			LD	HL, 0			; The error code
0000C7 C9          0487   			RET
0000C8             0488   ;
0000C8 5B DD 27 03 0489   _autoload:		LD.LIL	HL, (IX+3)		; HLU: Address of filename
0000CC 11 00 52    0490   			LD	DE, ACCS		;  DE: Destination address
0000CF 5B 7E       0491   @@:			LD.LIL	A, (HL)			; Fetch the filename byte
0000D1 12          0492   			LD	(DE), A			;
0000D2 5B 23       0493   			INC.LIL	HL			; Increase the source pointer
0000D4 1C          0494   			INC	E			; We only need to increase E as ACCS is on a page boundary
0000D5 20 F8       0495   			JR	NZ, @B			; Loop until we hit a 0 byte
0000D7 1D          0496   			DEC	E
0000D8 3E 0D       0497   			LD	A, CR
0000DA 12          0498   			LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
0000DB             0499   ;
0000DB E1          0500   _startbasic:		POP	 HL			; Pop the return address to init off SPS
0000DC 5B E5       0501   			PUSH.LIL HL 			; Stack it on SPL (*BYE will use this as the return address)
0000DE C3 17 37    0502   			JP	 START			; And start BASIC
0000E1             0503   
0000E1             0504   ; Parse the parameter string into a C array
0000E1             0505   ; Parameters
0000E1             0506   ; -   A: Segment base
0000E1             0507   ; - HLU: Address of parameter string
0000E1             0508   ; - IXU: Address for array pointer storage
0000E1             0509   ; Returns:
0000E1             0510   ; -   C: Number of parameters parsed
0000E1             0511   ;
0000E1 01 45 00    0512   _parse_params:		LD		BC, _exec_name		; Get the address of the app name in this segment
0000E4 CD 3F 01    0513   			CALL		_set_abc24		; Convert it to a 24-bit address based upon segment base
0000E7 5B DD 0F 00 0514   			LD.LIL		(IX+0), BC		; ARGV[0] = the executable name
0000EB 5B DD 23    0515   			INC.LIL		IX
0000EE 5B DD 23    0516   			INC.LIL		IX
0000F1 5B DD 23    0517   			INC.LIL		IX
0000F4 CD 36 01    0518   			CALL		_skip_spaces		; Skip HL past any leading spaces
0000F7             0519   ;
0000F7 01 01 00    0520   			LD		BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0000FA 06 0F       0521   			LD		B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0000FC             0522   ;
0000FC C5          0523   _parse_params_1:	PUSH		BC			; Stack ARGC
0000FD 5B E5       0524   			PUSH.LIL	HL			; Stack start address of token
0000FF CD 25 01    0525   			CALL		_get_token		; Get the next token
000102 79          0526   			LD		A, C			; A: Length of the token in characters
000103 5B D1       0527   			POP.LIL		DE			; Start address of token (was in HL)
000105 C1          0528   			POP		BC			; ARGC
000106 B7          0529   			OR		A			; Check for A=0 (no token found) OR at end of string
000107 C8          0530   			RET		Z
000108             0531   ;
000108 5B DD 1F 00 0532   			LD.LIL		(IX+0), DE		; Store the pointer to the token
00010C 5B E5       0533   			PUSH.LIL	HL			; DE=HL
00010E 5B D1       0534   			POP.LIL		DE
000110 CD 36 01    0535   			CALL		_skip_spaces		; And skip HL past any spaces onto the next character
000113 AF          0536   			XOR		A
000114 5B 12       0537   			LD.LIL		(DE), A			; Zero-terminate the token
000116 5B DD 23    0538   			INC.LIL		IX
000119 5B DD 23    0539   			INC.LIL		IX
00011C 5B DD 23    0540   			INC.LIL		IX			; Advance to next pointer position
00011F 0C          0541   			INC		C			; Increment ARGC
000120 79          0542   			LD		A, C			; Check for C >= A
000121 B8          0543   			CP		B
000122 38 D8       0544   			JR		C, _parse_params_1	; And loop
000124 C9          0545   			RET
000125             0546   
000125             0547   ; Get the next token
000125             0548   ; Parameters:
000125             0549   ; - HL: Address of parameter string
000125             0550   ; Returns:
000125             0551   ; - HL: Address of first character after token
000125             0552   ; -  C: Length of token (in characters)
000125             0553   ;
000125 0E 00       0554   _get_token:		LD		C, 0			; Initialise length
000127 5B 7E       0555   @@:			LD.LIL		A, (HL)			; Get the character from the parameter string
000129 B7          0556   			OR		A			; Exit if 0 (end of parameter string in MOS)
00012A C8          0557   			RET 		Z
00012B FE 0D       0558   			CP		13			; Exit if CR (end of parameter string in BBC BASIC)
00012D C8          0559   			RET		Z
00012E FE 20       0560   			CP		' '			; Exit if space (end of token)
000130 C8          0561   			RET		Z
000131 5B 23       0562   			INC.LIL		HL			; Advance to next character
000133 0C          0563   			INC 		C			; Increment length
000134 18 F1       0564   			JR		@B
000136             0565   
000136             0566   ; Skip spaces in the parameter string
000136             0567   ; Parameters:
000136             0568   ; - HL: Address of parameter string
000136             0569   ; Returns:
000136             0570   ; - HL: Address of next none-space character
000136             0571   ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
000136             0572   ;
000136 5B 7E       0573   _skip_spaces:		LD.LIL		A, (HL)			; Get the character from the parameter string
000138 FE 20       0574   			CP		' '			; Exit if not space
00013A C0          0575   			RET		NZ
00013B 5B 23       0576   			INC.LIL		HL			; Advance to next character
00013D 18 F7       0577   			JR		_skip_spaces		; Increment length
00013F             0578   
00013F             0579   ; Set the MSB of BC (U) to A
00013F             0580   ; Parameters:
00013F             0581   ; - BC: 16-bit address
00013F             0582   ; -  A: Value to stick in U of BC
00013F             0583   ; Returns:
00013F             0584   ; - BCU
00013F             0585   ;
00013F 5B E5       0586   _set_abc24:		PUSH.LIL	HL			; Preserve HL
000141 5B C5       0587   			PUSH.LIL	BC			; Stick BC onto SPL
000143 5B 21 02 00 0588   			LD.LIL		HL, 2			; HL: SP+2
       00          
000148 5B 39       0589   			ADD.LIL		HL, SP
00014A 5B 77       0590   			LD.LIL		(HL), A			; Store A in it
00014C 5B C1       0591   			POP.LIL		BC			; Fetch ammended BC
00014E 5B E1       0592   			POP.LIL		HL			; Restore HL
000150 C9          0593   			RET
000151             0594   
000151             0595   ; Set the MSB of BC (U) to A
000151             0596   ; Parameters:
000151             0597   ; - IX: 16-bit address
000151             0598   ; -  A: Value to stick in U of BC
000151             0599   ; Returns:
000151             0600   ; - IXU
000151             0601   ;
000151 5B DD E5    0602   _set_aix24:		PUSH.LIL	IX			; Stick IX onto SPL
000154 5B DD 21 02 0603   			LD.LIL		IX, 2			; IX: SP+2
       00 00       
00015A 5B DD 39    0604   			ADD.LIL		IX, SP
00015D 5B DD 77 00 0605   			LD.LIL		(IX), A			; Store A in it
000161 5B DD E1    0606   			POP.LIL		IX			; Fetch ammended IX
000164 C9          0607   			RET
000165             0608   
000165             0609   ; Storage for the argv array pointers
000165             0610   ;
000165 00 00 00 00 0611   argv_ptrs:		BLKP	argv_ptrs_max, 0		; Storage for the argv array pointers
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
000195             0612   ; --- End agon_init.asm ---
000195             0613   
000195             0614   ; --- Begin acorn.asm ---
000195             0615   ;
000195             0616   ;Automatically created from original source on 2024-12-15 15:29:12
000195             0617   ;
000195             0618                   .ASSUME ADL = 0
000195             0619   ;	.ORG 0x0000
000195             0620   ;                SEGMENT CODE
000195             0621   ;
000195             0622   ;PATCH FOR BBC BASIC TO CP/M 2.2 & 3.0
000195             0623   ;* ACORN COMPUTERS Z80 TUBE VERSION  *
000195             0624   ;(C) COPYRIGHT R.T.RUSSELL, 02-01-1984
000195             0625   ;VERSION 5.0, 12-07-2024
000195             0626   ;
000195             0627   ;                XREF	OSWRCH
000195             0628   ;                XREF	OSWORD
000195             0629   ;                XREF	OSBYTE
000195             0630   ;
000195             0631   ; ESC            EQU	1BH
000195             0632   TBY:            EQU	0FH
000195             0633   ; TTO:            EQU	0B8H in main.asm
000195             0634   TFILL:          EQU	03H
000195             0635   ;
000195             0636   ;                XREF	ITEMI
000195             0637   ;                XREF	EXPRI
000195             0638   ;                XREF	COMMA
000195             0639   ;                XREF	TERMQ
000195             0640   ;                XREF	BRAKET
000195             0641   ;                XREF	EXTERR
000195             0642   ;                XREF	STOREN
000195             0643   ;                XREF	TRAP
000195             0644   ;                XREF	VAR_
000195             0645   ;                XREF	NXT
000195             0646   ;                XREF	XEQ
000195             0647   ;
000195             0648   ;                XREF	ACCS
000195             0649   ;                XREF	COUNT
000195             0650   ;                XREF	WIDTH
000195             0651   ;                XREF	SCRAP
000195             0652   ;
000195             0653   ;                XDEF	OSCALL
000195             0654   ;                XDEF	CLRSCN
000195             0655   ;                XDEF	PUTCSR
000195             0656   ;                XDEF	GETCSR
000195             0657   ;                XDEF	PUTIME
000195             0658   ;                XDEF	GETIME
000195             0659   ;                XDEF	OSKEY
000195             0660   ;
000195             0661   ;                XDEF	CLG
000195             0662   ;                XDEF	MOVE
000195             0663   ;                XDEF	DRAW
000195             0664   ;                XDEF	PLOT
000195             0665   ;                XDEF	MODE
000195             0666   ;                XDEF	COLOUR
000195             0667   ;                XDEF	GCOL
000195             0668   ;                XDEF	ADVAL
000195             0669   ;                XDEF	SOUND
000195             0670   ;                XDEF	ENVEL
000195             0671   ;                XDEF	POINT
000195             0672   ;
000195             0673   ;                XDEF	CIRCLE
000195             0674   ;                XDEF	ELLIPS
000195             0675   ;                XDEF	FILL
000195             0676   ;                XDEF	MOUSE
000195             0677   ;                XDEF	ORIGIN
000195             0678   ;                XDEF	RECTAN
000195             0679   ;                XDEF	LINE
000195             0680   ;                XDEF	TINT
000195             0681   ;                XDEF	WAIT
000195             0682   ;                XDEF	SYS
000195             0683   ;                XDEF	CSRON
000195             0684   ;                XDEF	CSROFF
000195             0685   ;
000195             0686   ;                XDEF	PUTIMS
000195             0687   ;                XDEF	GETIMS
000195             0688   ;                XDEF	TINTFN
000195             0689   ;                XDEF	MODEFN
000195             0690   ;                XDEF	WIDFN
000195             0691   ;
000195             0692   ;GETIME	- Read elapsed-time clock.
000195             0693   ;  	  Outputs:  DEHL = elapsed time (centiseconds)
000195             0694   ; 	  Destroys: A,D,E,H,L,F
000195             0695   ;
000195 3E 01       0696   GETIME:         LD	A,1
000197 21 17 51    0697                   LD	HL,SCRAP
00019A CD 4F 14    0698                   CALL	OSWORD
00019D 21 17 51    0699                   LD	HL,SCRAP
0001A0 5E          0700                   LD	E,(HL)
0001A1 23          0701                   INC	HL
0001A2 56          0702                   LD	D,(HL)
0001A3 23          0703                   INC	HL
0001A4 7E          0704                   LD	A,(HL)
0001A5 23          0705                   INC	HL
0001A6 66          0706                   LD	H,(HL)
0001A7 6F          0707                   LD	L,A
0001A8 EB          0708                   EX	DE,HL
0001A9 C9          0709                   RET
0001AA             0710   ;
0001AA             0711   ;GETIMS	- Read real-time clock as string.
0001AA             0712   ;  	  Outputs:  TIME$ in string accumulator
0001AA             0713   ;                   E = string length (25)
0001AA             0714   ; 	  Destroys: A,B,C,D,E,H,L,F
0001AA             0715   ;
0001AA 3E 0E       0716   GETIMS:         LD	A,14
0001AC 21 17 51    0717                   LD	HL,SCRAP
0001AF 36 00       0718                   LD	(HL),0
0001B1 CD 4F 14    0719                   CALL	OSWORD
0001B4 21 17 51    0720                   LD	HL,SCRAP
0001B7 11 00 52    0721                   LD	DE,ACCS
0001BA 7E          0722                   LD	A,(HL)
0001BB BB          0723                   CP	E
0001BC C8          0724                   RET	Z
0001BD 01 19 00    0725                   LD	BC,25
0001C0 ED B0       0726                   LDIR
0001C2 C9          0727                   RET
0001C3             0728   ;
0001C3             0729   ;
0001C3             0730   ;PUTIME	- Load elapsed-time clock.
0001C3             0731   ;   	  Inputs:   DEHL = time to load (centiseconds)
0001C3             0732   ; 	  Destroys: A,D,E,H,L,F
0001C3             0733   ;
0001C3 DD E5       0734   PUTIME:         PUSH	IX
0001C5 DD 21 17 51 0735                   LD	IX,SCRAP
0001C9 DD 75 00    0736                   LD	(IX+0),L
0001CC DD 74 01    0737                   LD	(IX+1),H
0001CF DD 73 02    0738                   LD	(IX+2),E
0001D2 DD 72 03    0739                   LD	(IX+3),D
0001D5 3E 02       0740                   LD	A,2
0001D7 21 17 51    0741                   LD	HL,SCRAP
0001DA CD 4F 14    0742                   CALL	OSWORD
0001DD DD E1       0743                   POP	IX
0001DF C9          0744                   RET
0001E0             0745   ;
0001E0             0746   ;PUTIMS	- Wtite real-time clock as string.
0001E0             0747   ;  	  Inputs:   string in string accumulator
0001E0             0748   ;                   E = string length
0001E0             0749   ; 	  Destroys: A,B,C,D,E,H,L,F
0001E0             0750   ;
0001E0 7B          0751   PUTIMS:         LD	A,E		;Length
0001E1 FE 1A       0752                   CP	26
0001E3 D0          0753                   RET	NC
0001E4 06 00       0754                   LD	B,0
0001E6 4F          0755                   LD	C,A
0001E7 11 18 51    0756                   LD	DE,SCRAP+1
0001EA 21 00 52    0757                   LD	HL,ACCS
0001ED ED B0       0758                   LDIR
0001EF 21 17 51    0759                   LD	HL,SCRAP
0001F2 77          0760                   LD	(HL),A
0001F3 3E 0F       0761                   LD	A,15
0001F5 C3 4F 14    0762                   JP	OSWORD
0001F8             0763   ;
0001F8             0764   ;
0001F8             0765   ;CLRSCN	- Clear screen.
0001F8             0766   ; 	  Destroys: A,D,E,H,L,F
0001F8             0767   ;
0001F8 3E 0C       0768   CLRSCN:         LD	A,0CH
0001FA C3 95 11    0769                   JP	OSWRCH
0001FD             0770   ;
0001FD             0771   ;
0001FD             0772   ;OSKEY	- Sample keyboard with specified wait.
0001FD             0773   ;   	  Inputs:   HL = Time to wait (centiseconds)
0001FD             0774   ;  	  Outputs:  Carry reset indicates time-out.
0001FD             0775   ;                   If carry set, A = character typed.
0001FD             0776   ; 	  Destroys: A,D,E,H,L,F
0001FD             0777   ;
0001FD 3E 81       0778   OSKEY:          LD	A,129
0001FF CD 6D 14    0779                   CALL	OSBYTE
000202 7C          0780                   LD	A,H
000203 B7          0781                   OR	A
000204 C0          0782                   RET	NZ		;TIME-OUT, CARRY RESET
000205 7D          0783                   LD	A,L
000206 37          0784                   SCF
000207 C9          0785                   RET			;NORMAL, CARRY SET
000208             0786   ;
000208             0787   ;PUTCSR	- Move cursor to specified position.
000208             0788   ;   	  Inputs:   DE = horizontal position (LHS=0)
000208             0789   ;                   HL = vertical position (TOP=0)
000208             0790   ; 	  Destroys: A,D,E,H,L,F
000208             0791   ;
000208 3E 1F       0792   PUTCSR:         LD	A,1FH
00020A CD 95 11    0793                   CALL	OSWRCH
00020D 7B          0794                   LD	A,E
00020E CD 95 11    0795                   CALL	OSWRCH
000211 7D          0796                   LD	A,L
000212 C3 95 11    0797                   JP	OSWRCH
000215             0798   ;
000215             0799   ;GETCSR	- Return cursor coordinates.
000215             0800   ;   	  Outputs:  DE = X coordinate (POS)
000215             0801   ;                   HL = Y coordinate (VPOS)
000215             0802   ;  	  Destroys: A,D,E,H,L,F
000215             0803   ;
000215 3E 86       0804   GETCSR:         LD	A,134
000217 CD 6D 14    0805                   CALL	OSBYTE
00021A 5D          0806                   LD	E,L
00021B 6C          0807                   LD	L,H
00021C 16 00       0808                   LD	D,0
00021E 62          0809                   LD	H,D
00021F C9          0810                   RET
000220             0811   ;
000220             0812   ;POINT - var=POINT(x,y)
000220             0813   ;
000220 CD 33 18    0814   POINT:          CALL	EXPRI
000223 D9          0815                   EXX
000224 E5          0816                   PUSH	HL
000225 CD 5D 05    0817                   CALL	CEXPRI
000228 D9          0818                   EXX
000229 D1          0819                   POP	DE
00022A CD AE 20    0820                   CALL	BRAKET
00022D DD 21 17 51 0821                   LD	IX,SCRAP
000231 DD 73 00    0822                   LD	(IX+0),E
000234 DD 72 01    0823                   LD	(IX+1),D
000237 DD 75 02    0824                   LD	(IX+2),L
00023A DD 74 03    0825                   LD	(IX+3),H
00023D 21 17 51    0826                   LD	HL,SCRAP
000240 3E 09       0827                   LD	A,9
000242 CD 4F 14    0828                   CALL	OSWORD
000245 DD 7E 04    0829                   LD	A,(IX+4)
000248 6F          0830                   LD	L,A
000249 C6 01       0831                   ADD	A,1
00024B 9F          0832                   SBC	A,A
00024C 67          0833                   LD	H,A
00024D D9          0834   RETEXX:         EXX
00024E 67          0835                   LD	H,A
00024F 6F          0836                   LD	L,A
000250 AF          0837                   XOR	A
000251 4F          0838                   LD	C,A
000252 C9          0839                   RET
000253             0840   ;
000253             0841   ;ADVAL - var=ADVAL(n)
000253             0842   ;
000253 CD 60 18    0843   ADVAL:          CALL	ITEMI
000256 D9          0844                   EXX
000257 3E 80       0845                   LD	A,128
000259 CD 6D 14    0846                   CALL	OSBYTE
00025C AF          0847                   XOR	A
00025D 18 EE       0848                   JR	RETEXX
00025F             0849   ;
00025F             0850   ;MODEFN - var=MODE
00025F             0851   ;
00025F 3E 87       0852   MODEFN:         LD	A,135
000261 CD 6D 14    0853                   CALL	OSBYTE
000264 6C          0854                   LD	L,H
000265 AF          0855   RETU8:          XOR	A
000266 67          0856                   LD	H,A
000267 18 E4       0857                   JR	RETEXX
000269             0858   ;
000269             0859   ;WIDFN - var=WIDTH
000269             0860   ;
000269 3A FC 54    0861   WIDFN:          LD	A,(WIDTH)
00026C 6F          0862                   LD	L,A
00026D 18 F6       0863                   JR	RETU8
00026F             0864   ;
00026F             0865   ;ENVEL - ENVELOPE var,var,var,var,var,var,var,
00026F             0866   ;                 var,var,var,var,var,var,var
00026F             0867   ;
00026F 06 00       0868   ENVEL:          LD	B,0
000271 DD 21 17 51 0869                   LD	IX,SCRAP
000275 C5          0870                   PUSH	BC
000276 DD E5       0871                   PUSH	IX
000278 CD 33 18    0872   ENVEL1:         CALL	EXPRI
00027B D9          0873                   EXX
00027C DD E1       0874                   POP	IX
00027E C1          0875                   POP	BC
00027F DD 75 00    0876                   LD	(IX),L
000282 78          0877                   LD	A,B
000283 FE 0D       0878                   CP	13
000285 28 0B       0879                   JR	Z,ENVEL2
000287 04          0880                   INC	B
000288 DD 23       0881                   INC	IX
00028A C5          0882                   PUSH	BC
00028B DD E5       0883                   PUSH	IX
00028D CD A2 20    0884                   CALL	COMMA
000290 18 E6       0885                   JR	ENVEL1
000292 21 17 51    0886   ENVEL2:         LD	HL,SCRAP
000295 3E 08       0887                   LD	A,8
000297 CD 4F 14    0888                   CALL	OSWORD
00029A C3 99 24    0889                   JP	XEQ
00029D             0890   ;
00029D             0891   ;SOUND - SOUND var,var,var,var
00029D             0892   ;
00029D 06 00       0893   SOUND:          LD	B,0
00029F DD 21 17 51 0894                   LD	IX,SCRAP
0002A3 C5          0895                   PUSH	BC
0002A4 DD E5       0896                   PUSH	IX
0002A6 CD 33 18    0897   SOUND1:         CALL	EXPRI
0002A9 D9          0898                   EXX
0002AA DD E1       0899                   POP	IX
0002AC C1          0900                   POP	BC
0002AD DD 75 00    0901                   LD	(IX+0),L
0002B0 DD 74 01    0902                   LD	(IX+1),H
0002B3 DD 23       0903                   INC	IX
0002B5 DD 23       0904                   INC	IX
0002B7 04          0905                   INC	B
0002B8 04          0906                   INC	B
0002B9 78          0907                   LD	A,B
0002BA FE 08       0908                   CP	8
0002BC 28 08       0909                   JR	Z,SOUND2
0002BE C5          0910                   PUSH	BC
0002BF DD E5       0911                   PUSH	IX
0002C1 CD A2 20    0912                   CALL	COMMA
0002C4 18 E0       0913                   JR	SOUND1
0002C6 21 17 51    0914   SOUND2:         LD	HL,SCRAP
0002C9 3E 07       0915                   LD	A,7
0002CB CD 4F 14    0916                   CALL	OSWORD
0002CE C3 99 24    0917                   JP	XEQ
0002D1             0918   ;
0002D1             0919   ;MODE - MODE n
0002D1             0920   ;
0002D1 CD 33 18    0921   MODE:           CALL	EXPRI
0002D4 AF          0922                   XOR	A
0002D5 32 FB 54    0923                   LD	(COUNT),A
0002D8 D9          0924                   EXX
0002D9 65          0925                   LD	H,L
0002DA 2E 16       0926                   LD	L,22
0002DC CD 44 05    0927                   CALL	WRCH2
0002DF 18 72       0928                   JR	XEQGO1
0002E1             0929   ;
0002E1             0930   ;CLG
0002E1             0931   ;
0002E1 3E 10       0932   CLG:            LD	A,16
0002E3 CD 95 11    0933                   CALL	OSWRCH
0002E6 18 6B       0934                   JR	XEQGO1
0002E8             0935   ;
0002E8             0936   ;ORIGIN x,y
0002E8             0937   ;
0002E8 CD 33 18    0938   ORIGIN:         CALL    EXPRI
0002EB D9          0939                   EXX
0002EC E5          0940                   PUSH	HL
0002ED CD 5D 05    0941                   CALL    CEXPRI
0002F0 D9          0942                   EXX
0002F1 D1          0943                   POP	DE
0002F2 0E 1D       0944                   LD	C,29
0002F4 CD 38 05    0945                   CALL	WRCH5
0002F7 18 5A       0946                   JR	XEQGO1
0002F9             0947   ;
0002F9             0948   ;COLOUR n
0002F9             0949   ;COLOUR n,p
0002F9             0950   ;COLOUR n,r,g,b
0002F9             0951   ;
0002F9 CD 33 18    0952   COLOUR:         CALL	EXPRI		;n
0002FC D9          0953                   EXX
0002FD FD 7E 00    0954                   LD	A,(IY)
000300 FE 2C       0955                   CP	','
000302 28 08       0956                   JR      Z,PALCOL
000304 65          0957                   LD	H,L
000305 2E 11       0958                   LD	L,17
000307 CD 44 05    0959                   CALL	WRCH2
00030A 18 47       0960                   JR	XEQGO1
00030C             0961   ;
00030C E5          0962   PALCOL:         PUSH	HL
00030D CD 5D 05    0963                   CALL	CEXPRI		;p or r
000310 D9          0964                   EXX
000311 EB          0965                   EX	DE,HL
000312 21 00 00    0966                   LD	HL,0
000315 FD 7E 00    0967                   LD	A,(IY)
000318 FE 2C       0968                   CP	','
00031A 20 15       0969                   JR	NZ,PALET1
00031C D5          0970                   PUSH	DE
00031D CD 5D 05    0971                   CALL	CEXPRI		;g
000320 D9          0972                   EXX
000321 E5          0973                   PUSH	HL
000322 CD 5D 05    0974                   CALL	CEXPRI		;b
000325 D9          0975                   EXX
000326 D1          0976                   POP	DE
000327 C1          0977                   POP	BC
000328 7D          0978                   LD	A,L
000329 E1          0979                   POP	HL
00032A 51          0980                   LD	D,C		;r
00032B 4D          0981                   LD	C,L		;n
00032C 6B          0982                   LD	L,E		;g
00032D 67          0983                   LD	H,A		;b
00032E 1E 10       0984                   LD	E,16
000330 C5          0985                   PUSH	BC
000331 C1          0986   PALET1:         POP	BC
000332 06 13       0987                   LD	B,19
000334 CD 34 05    0988                   CALL	WRCH6
000337 18 1A       0989                   JR	XEQGO1
000339             0990   ;
000339             0991   ;GCOL [a,]b
000339             0992   ;
000339 CD 33 18    0993   GCOL:           CALL	EXPRI
00033C D9          0994                   EXX
00033D 1E 00       0995                   LD	E,0
00033F FD 7E 00    0996                   LD	A,(IY)
000342 FE 2C       0997                   CP	','
000344 20 06       0998                   JR	NZ,GCOL0
000346 E5          0999                   PUSH	HL
000347 CD 5D 05    1000                   CALL	CEXPRI
00034A D9          1001                   EXX
00034B D1          1002                   POP	DE
00034C 65          1003   GCOL0:          LD	H,L
00034D 6B          1004                   LD	L,E
00034E 16 12       1005                   LD	D,18
000350 CD 40 05    1006                   CALL	WRCH3		;DLH
000353 C3 99 24    1007   XEQGO1:         JP	XEQ
000356             1008   ;
000356             1009   ;CSRON  - Turn caret on
000356             1010   ;CSROFF - Turn caret off
000356             1011   ;
000356 0E 01       1012   CSRON:          LD	C,1
000358 18 02       1013                   JR	CSRGO
00035A             1014   ;
00035A 0E 00       1015   CSROFF:         LD	C,0
00035C 3E 17       1016   CSRGO:          LD	A,23
00035E CD 95 11    1017                   CALL	OSWRCH
000361 3E 01       1018                   LD	A,1
000363 CD 95 11    1019                   CALL	OSWRCH
000366 79          1020                   LD	A,C
000367 06 08       1021                   LD	B,8
000369 CD 95 11    1022   CSRGO1:         CALL	OSWRCH
00036C AF          1023                   XOR	A
00036D 10 FA       1024                   DJNZ	CSRGO1
00036F 18 E2       1025                   JR	XEQGO1
000371             1026   ;
000371             1027   ;LINE x1,y1,x2,y2
000371             1028   ;
000371 CD 33 18    1029   LINE:           CALL	EXPRI
000374 D9          1030                   EXX
000375 E5          1031                   PUSH	HL
000376 CD 4C 05    1032                   CALL	EXPR3
000379 E3          1033                   EX	(SP),HL		;HL <- x1, (SP) <- y2
00037A C5          1034                   PUSH	BC
00037B EB          1035                   EX	DE,HL
00037C 0E 04       1036                   LD	C,4
00037E CD 32 05    1037                   CALL	VDU25
000381 D1          1038                   POP	DE
000382 E1          1039                   POP	HL
000383 0E 05       1040                   LD	C,5
000385 18 2A       1041                   JR	PLOT4A
000387             1042   ;
000387             1043   ;CIRCLE [FILL] x,y,r
000387             1044   ;
000387 FE 03       1045   CIRCLE:         CP	TFILL
000389 F5          1046                   PUSH	AF
00038A 20 02       1047                   JR	NZ,CIRCL0
00038C FD 23       1048                   INC	IY
00038E CD 33 18    1049   CIRCL0:         CALL	EXPRI
000391 D9          1050                   EXX
000392 E5          1051                   PUSH	HL
000393 CD 5D 05    1052                   CALL	CEXPRI
000396 D9          1053                   EXX
000397 E5          1054                   PUSH	HL
000398 CD 5D 05    1055                   CALL	CEXPRI
00039B D9          1056                   EXX
00039C C1          1057                   POP	BC		;y
00039D D1          1058                   POP	DE		;x
00039E E5          1059                   PUSH	HL
00039F 69          1060                   LD	L,C
0003A0 60          1061                   LD	H,B
0003A1 0E 04       1062                   LD	C,4		; PLOT 4 = MOVE
0003A3 CD 32 05    1063                   CALL	VDU25
0003A6 D1          1064                   POP	DE		;r
0003A7 21 00 00    1065                   LD	HL,0
0003AA F1          1066                   POP	AF
0003AB 0E 91       1067                   LD	C,145		; PLOT 145 = outline circle
0003AD 20 02       1068                   JR	NZ,PLOT4A
0003AF 0E 99       1069                   LD	C,153		; PLOT 153 = filled circle
0003B1 18 6C       1070   PLOT4A:         JR	PLOT4
0003B3             1071   ;
0003B3             1072   ;ELLIPSE [FILL] x,y,a,b
0003B3             1073   ;
0003B3 FE 03       1074   ELLIPS:         CP	TFILL
0003B5 F5          1075                   PUSH	AF
0003B6 20 02       1076                   JR	NZ,ELLIP0
0003B8 FD 23       1077                   INC	IY
0003BA CD 33 18    1078   ELLIP0:         CALL	EXPRI
0003BD D9          1079                   EXX
0003BE E5          1080                   PUSH	HL
0003BF CD 4C 05    1081                   CALL	EXPR3
0003C2 E3          1082                   EX	(SP),HL		;HL <- x, (SP) <- b
0003C3 C5          1083                   PUSH	BC
0003C4 EB          1084                   EX	DE,HL
0003C5 0E 04       1085                   LD	C,4		; PLOT 4 = Move absolute
0003C7 CD 32 05    1086                   CALL	VDU25
0003CA D1          1087                   POP	DE		;a
0003CB D5          1088                   PUSH	DE
0003CC 21 00 00    1089                   LD	HL,0
0003CF 4D          1090                   LD	C,L		; PLOT 0 - Move relative
0003D0 CD 32 05    1091                   CALL	VDU25
0003D3 D1          1092                   POP	DE		;a
0003D4 AF          1093                   XOR	A
0003D5 6F          1094                   LD	L,A
0003D6 67          1095                   LD	H,A
0003D7 ED 52       1096                   SBC	HL,DE
0003D9 EB          1097                   EX	DE,HL
0003DA E1          1098                   POP	HL		;b
0003DB F1          1099                   POP	AF
0003DC 0E C1       1100                   LD	C,193		; PLOT 193 = outline ellipse
0003DE 20 3F       1101                   JR	NZ,PLOT4
0003E0 0E C9       1102                   LD	C,201		; PLOT 201 = filled ellipse
0003E2 18 3B       1103                   JR	PLOT4
0003E4             1104   ;
0003E4             1105   ;MOVE [BY} x,y
0003E4             1106   ;DRAW [BY] x,y
0003E4             1107   ;PLOT [BY] [n,]x,y
0003E4             1108   ;FILL [BY] x,y
0003E4             1109   ;
0003E4 0E 04       1110   MOVE:           LD	C,4
0003E6 18 23       1111                   JR	PLOT1
0003E8             1112   ;
0003E8 0E 05       1113   DRAW:           LD	C,5
0003EA 18 1F       1114                   JR	PLOT1
0003EC             1115   ;
0003EC 0E 85       1116   FILL:           LD	C,133
0003EE 18 1B       1117                   JR	PLOT1
0003F0             1118   ;
0003F0 0E 45       1119   PLOT:           LD	C,69
0003F2 FE 0F       1120                   CP	TBY
0003F4 28 15       1121                   JR	Z,PLOT1
0003F6 CD 33 18    1122                   CALL	EXPRI
0003F9 D9          1123                   EXX
0003FA E5          1124                   PUSH	HL
0003FB CD 5D 05    1125                   CALL	CEXPRI
0003FE D9          1126                   EXX
0003FF FD 7E 00    1127                   LD	A,(IY)
000402 FE 2C       1128                   CP	','
000404 28 12       1129                   JR	Z,PLOT3
000406 D1          1130                   POP	DE
000407 0E 45       1131                   LD	C,69
000409 18 14       1132                   JR	PLOT4
00040B             1133   ;
00040B FE 0F       1134   PLOT1:          CP	TBY
00040D 20 04       1135                   JR	NZ,PLOT2
00040F FD 23       1136                   INC	IY
000411 CB 91       1137                   RES	2,C		;Change absolute to relative
000413 C5          1138   PLOT2:          PUSH	BC
000414 CD 33 18    1139                   CALL	EXPRI
000417 D9          1140                   EXX
000418 E5          1141   PLOT3:          PUSH	HL
000419 CD 5D 05    1142                   CALL	CEXPRI
00041C D9          1143                   EXX
00041D D1          1144                   POP	DE
00041E C1          1145                   POP	BC
00041F CD 32 05    1146   PLOT4:          CALL	VDU25
000422 C3 99 24    1147                   JP	XEQ
000425             1148   ;
000425             1149   ;RECTANGLE [FILL] x,y,w[,h] [TO xnew,ynew]
000425             1150   ;
000425 FE 03       1151   RECTAN:         CP	TFILL
000427 F5          1152                   PUSH	AF
000428 20 02       1153                   JR	NZ,RECT0
00042A FD 23       1154                   INC	IY
00042C CD 33 18    1155   RECT0:          CALL	EXPRI
00042F D9          1156                   EXX
000430 E5          1157                   PUSH	HL
000431 CD 5D 05    1158                   CALL	CEXPRI
000434 D9          1159                   EXX
000435 E5          1160                   PUSH	HL
000436 CD 5D 05    1161                   CALL	CEXPRI
000439 D9          1162                   EXX
00043A E5          1163                   PUSH	HL
00043B FD 7E 00    1164                   LD	A,(IY)
00043E FE 2C       1165                   CP	','
000440 20 04       1166                   JR	NZ,RECT1
000442 CD 5D 05    1167                   CALL	CEXPRI
000445 D9          1168                   EXX
000446 C1          1169   RECT1:          POP	BC		;w
000447 D1          1170                   POP	DE		;y
000448 E3          1171                   EX	(SP),HL		;HL <- x, (SP) <- h
000449 C5          1172                   PUSH	BC
00044A EB          1173                   EX	DE,HL
00044B 0E 04       1174                   LD	C,4
00044D CD 32 05    1175                   CALL	VDU25
000450 FD 7E 00    1176                   LD	A,(IY)
000453 FE B8       1177                   CP	TTO
000455 28 09       1178                   JR	Z,RECTTO
000457 D1          1179                   POP	DE		;w
000458 E1          1180                   POP	HL		;h
000459 F1          1181                   POP	AF
00045A 20 22       1182                   JR	NZ,OUTLIN
00045C 0E 61       1183                   LD	C,97
00045E 18 BF       1184                   JR	PLOT4
000460             1185   ;
000460             1186   ;Block copy / move:
000460             1187   ;
000460 FD 23       1188   RECTTO:         INC	IY		; Bump over TO
000462 CD 33 18    1189                   CALL	EXPRI
000465 D9          1190                   EXX
000466 E5          1191                   PUSH	HL
000467 CD 5D 05    1192                   CALL	CEXPRI
00046A D9          1193                   EXX
00046B C1          1194                   POP	BC		;newx
00046C D1          1195                   POP	DE		;w
00046D E3          1196                   EX	(SP),HL		;HL <- h, (SP) <- newy
00046E C5          1197                   PUSH	BC
00046F 0E 00       1198                   LD	C,0
000471 CD 32 05    1199                   CALL	VDU25
000474 D1          1200                   POP	DE		;newx
000475 E1          1201                   POP	HL		;newy
000476 F1          1202                   POP	AF
000477 0E BE       1203                   LD	C,190		; PLOT 190 - Block copy
000479 20 01       1204                   JR	NZ,PLOT4B
00047B 0D          1205                   DEC	C		; PLOT 189 - Block move
00047C 18 A1       1206   PLOT4B:         JR	PLOT4
00047E             1207   ;
00047E             1208   ;Outline rectangle:
00047E             1209   ;
00047E 0E 09       1210   OUTLIN:         LD	C,9		; PLOT 9 - draw relative
000480 E5          1211                   PUSH	HL
000481 21 00 00    1212                   LD	HL,0
000484 CD 32 05    1213                   CALL	VDU25		; side 1
000487 E1          1214                   POP	HL
000488 D5          1215                   PUSH	DE
000489 11 00 00    1216                   LD	DE,0
00048C CD 32 05    1217                   CALL	VDU25		; side 2
00048F D1          1218                   POP	DE
000490 E5          1219                   PUSH	HL
000491 AF          1220                   XOR	A
000492 6F          1221                   LD	L,A
000493 67          1222                   LD	H,A
000494 ED 52       1223                   SBC	HL,DE
000496 EB          1224                   EX	DE,HL
000497 6F          1225                   LD	L,A
000498 67          1226                   LD	H,A
000499 CD 32 05    1227                   CALL 	VDU25		; side 3
00049C D1          1228                   POP	DE
00049D AF          1229                   XOR	A
00049E 6F          1230                   LD	L,A
00049F 67          1231                   LD	H,A
0004A0 ED 52       1232                   SBC	HL,DE
0004A2 5F          1233                   LD	E,A
0004A3 57          1234                   LD	D,A
0004A4 18 D6       1235                   JR	PLOT4B
0004A6             1236   ;
0004A6             1237   ;MOUSE x, y, b
0004A6             1238   ;
0004A6 3E 80       1239   MOUSE:          LD	A,128
0004A8 21 09 00    1240                   LD	HL,9
0004AB CD 6D 14    1241                   CALL	OSBYTE
0004AE E5          1242                   PUSH	HL
0004AF 3E 80       1243                   LD	A,128
0004B1 21 08 00    1244                   LD	HL,8
0004B4 CD 6D 14    1245                   CALL	OSBYTE
0004B7 E5          1246                   PUSH	HL
0004B8 3E 80       1247                   LD	A,128
0004BA 21 07 00    1248                   LD	HL,7
0004BD CD 6D 14    1249                   CALL	OSBYTE
0004C0 E5          1250                   PUSH	HL
0004C1 CD D6 25    1251                   CALL	VAR_
0004C4 E1          1252                   POP	HL
0004C5 CD 63 05    1253                   CALL	STOREI
0004C8 CD A2 20    1254                   CALL	COMMA
0004CB CD 0B 45    1255                   CALL	NXT
0004CE CD D6 25    1256                   CALL	VAR_
0004D1 E1          1257                   POP	HL
0004D2 CD 63 05    1258                   CALL	STOREI
0004D5 CD A2 20    1259                   CALL	COMMA
0004D8 CD 0B 45    1260                   CALL	NXT
0004DB CD D6 25    1261                   CALL	VAR_
0004DE E1          1262                   POP	HL
0004DF CD 63 05    1263                   CALL	STOREI
0004E2 C3 99 24    1264   XEQGO2:         JP	XEQ
0004E5             1265   ;
0004E5             1266   ;WAIT [n]
0004E5             1267   ;
0004E5 CD 36 35    1268   WAIT:           CALL	TERMQ
0004E8 28 F8       1269                   JR	Z,XEQGO2
0004EA CD 33 18    1270                   CALL	EXPRI
0004ED D9          1271                   EXX
0004EE 44          1272                   LD	B,H
0004EF 4D          1273                   LD	C,L
0004F0 CD 95 01    1274                   CALL	GETIME
0004F3 09          1275                   ADD	HL,BC
0004F4 01 00 00    1276                   LD	BC,0
0004F7 EB          1277                   EX	DE,HL
0004F8 ED 4A       1278                   ADC	HL,BC
0004FA EB          1279                   EX	DE,HL
0004FB CD 17 12    1280   WAIT1:          CALL	TRAP
0004FE D5          1281                   PUSH	DE
0004FF E5          1282                   PUSH	HL
000500 CD 95 01    1283                   CALL	GETIME
000503 C1          1284                   POP	BC
000504 B7          1285                   OR	A
000505 ED 42       1286                   SBC	HL,BC
000507 60          1287                   LD	H,B
000508 69          1288                   LD	L,C
000509 EB          1289                   EX	DE,HL
00050A C1          1290                   POP	BC
00050B ED 42       1291                   SBC	HL,BC
00050D 30 D3       1292                   JR	NC,XEQGO2
00050F EB          1293                   EX	DE,HL
000510 50          1294                   LD	D,B
000511 59          1295                   LD	E,C
000512 18 E7       1296                   JR	WAIT1
000514             1297   ;
000514             1298   ;OSCALL - Trap call to FFxx
000514             1299   ;
000514 E1          1300   OSCALL:         POP	HL		;DITCH RETURN ADDRESS
000515 21 27 05    1301                   LD	HL,OSRET
000518 E5          1302                   PUSH	HL		;NEW RETURN ADDRESS
000519 DD 7E 04    1303                   LD	A,(IX+4)	;A%
00051C DD 5E 14    1304                   LD	E,(IX+20)	;E%
00051F DD 66 64    1305                   LD	H,(IX+100)	;Y%
000522 DD 6E 60    1306                   LD	L,(IX+96)	;X%
000525 FD E9       1307                   JP	(IY)
000527 F5          1308   OSRET:          PUSH	AF
000528 7D          1309                   LD	A,L		;F  H  L  A
000529 6C          1310                   LD	L,H		;|  |  |  |
00052A D9          1311                   EXX			;|  |  |  |
00052B C1          1312                   POP	BC		;|  |  |  |
00052C 67          1313                   LD	H,A		;|  |  |  |
00052D 68          1314                   LD	L,B		;H  L  H' L'
00052E 79          1315                   LD	A,C
00052F D9          1316                   EXX
000530 67          1317                   LD	H,A
000531 C9          1318                   RET
000532             1319   ;
000532 06 19       1320   VDU25:          LD	B,25
000534 78          1321   WRCH6:          LD	A,B
000535 CD 95 11    1322                   CALL	OSWRCH
000538 79          1323   WRCH5:          LD	A,C
000539 CD 95 11    1324                   CALL	OSWRCH
00053C 7B          1325   WRCH4:          LD	A,E
00053D CD 95 11    1326                   CALL	OSWRCH
000540 7A          1327   WRCH3:          LD	A,D
000541 CD 95 11    1328                   CALL	OSWRCH
000544 7D          1329   WRCH2:          LD	A,L
000545 CD 95 11    1330                   CALL	OSWRCH
000548 7C          1331                   LD	A,H
000549 C3 95 11    1332                   JP	OSWRCH
00054C             1333   ;
00054C CD 5D 05    1334   EXPR3:          CALL	CEXPRI
00054F D9          1335                   EXX
000550 E5          1336                   PUSH	HL
000551 CD 5D 05    1337                   CALL	CEXPRI
000554 D9          1338                   EXX
000555 E5          1339                   PUSH	HL
000556 CD 5D 05    1340                   CALL	CEXPRI
000559 D9          1341                   EXX
00055A C1          1342                   POP	BC		;x2
00055B D1          1343                   POP	DE		;y1
00055C C9          1344                   RET
00055D             1345   ;
00055D CD A2 20    1346   CEXPRI:         CALL	COMMA
000560 C3 33 18    1347                   JP	EXPRI
000563             1348   ;
000563 CB 7F       1349   STOREI:         BIT	7,A
000565 20 0C       1350                   JR	NZ,EEK
000567 CB 77       1351                   BIT	6,A
000569 20 08       1352                   JR	NZ,EEK
00056B D9          1353                   EXX
00056C 21 00 00    1354                   LD	HL,0
00056F 4D          1355                   LD	C,L
000570 C3 F0 31    1356                   JP	STOREN
000573             1357   ;
000573 3E 32       1358   EEK:            LD	A,50
000575 CD 55 3F    1359                   CALL	EXTERR
000578 13          1360                   DB	13H		;'Bad '
000579 04          1361                   DB	04H		;'MOUSE'
00057A 20          1362                   DB	20H
00057B 15          1363                   DB	15H		;'variable'
00057C 00          1364                   DB	0
00057D             1365   ;
00057D             1366   TINT:
00057D             1367   TINTFN:
00057D             1368   SYS:
00057D AF          1369                   XOR	A
00057E CD 55 3F    1370                   CALL	EXTERR
000581 53 6F 72 72 1371                   DB	"Sorry"
       79          
000586 00          1372                   DB	0
000587             1373   ;
000587             1374   ;                END
000587             1375   ; --- End acorn.asm ---
000587             1376   
000587             1377   ; --- Begin asmb.asm ---
000587             1378   ;
000587             1379   ;Automatically created from original source on 2024-12-15 15:29:12
000587             1380   ;
000587             1381                   .ASSUME ADL = 0
000587             1382   ;	.ORG 0x0000
000587             1383   ;                SEGMENT CODE
000587             1384   ;
000587             1385   ;BBC BASIC INTERPRETER - Z80 VERSION
000587             1386   ;Z80 CPU ASSEMBLER MODULE - "ASMB"
000587             1387   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
000587             1388   ;
000587             1389   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
000587             1390   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
000587             1391   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
000587             1392   ;
000587             1393   ;VERSION 5.0, 14-05-2024
000587             1394   ;
000587             1395   ;                XDEF	ASSEM
000587             1396   ;
000587             1397   ;                XREF	TABIT
000587             1398   ;                XREF	CRLF
000587             1399   ;                XREF	OUT
000587             1400   ;                XREF	VAR_
000587             1401   ;                XREF	ZERO
000587             1402   ;                XREF	STOREN
000587             1403   ;                XREF	ERROR_
000587             1404   ;                XREF	EXPRI
000587             1405   ;                XREF	EXPRS
000587             1406   ;
000587             1407   ;                XREF	LISTON
000587             1408   ;                XREF	COUNT
000587             1409   ;                XREF	ACCS
000587             1410   ;                XREF	OC
000587             1411   ;                XREF	PC
000587             1412   ;
000587             1413   ; CR             EQU	0DH	; in equs.inc
000587             1414   TAND:           EQU	80H
000587             1415   TOR:            EQU	84H
000587             1416   ; TERROR:         EQU	85H	; in exec.asm
000587             1417   TCALL:          EQU	0D6H
000587             1418   TDEF:           EQU	0DDH
000587             1419   ;
000587             1420   ;ASSEMBLER:
000587             1421   ;LANGUAGE-INDEPENDENT CONTROL SECTION:
000587             1422   ; Outputs: A=delimiter, carry set if syntax error.
000587             1423   ;
000587 CD 0F 09    1424   ASSEM:          CALL	SKIP
00058A FD 23       1425                   INC	IY
00058C FE 3A       1426                   CP	':'
00058E 28 F7       1427                   JR	Z,ASSEM
000590 FE 5D       1428                   CP	']'
000592 C8          1429                   RET	Z
000593 FE 0D       1430                   CP	CR
000595 C8          1431                   RET	Z
000596 FD 2B       1432                   DEC	IY
000598 DD 2A 40 54 1433                   LD	IX,(PC)		;PROGRAM COUNTER
00059C 21 FE 54    1434                   LD	HL,LISTON
00059F CB 76       1435                   BIT	6,(HL)
0005A1 28 04       1436                   JR	Z,ASSEM0
0005A3 DD 2A 3C 54 1437                   LD	IX,(OC)		;ORIGIN of CODE
0005A7 DD E5       1438   ASSEM0:         PUSH	IX
0005A9 FD E5       1439                   PUSH	IY
0005AB CD 3B 06    1440                   CALL	ASMB
0005AE C1          1441                   POP	BC
0005AF D1          1442                   POP	DE
0005B0 D8          1443                   RET	C
0005B1 CD 0F 09    1444                   CALL	SKIP
0005B4 37          1445                   SCF
0005B5 C0          1446                   RET	NZ
0005B6 FD 2B       1447                   DEC	IY
0005B8 FD 23       1448   ASSEM3:         INC	IY
0005BA FD 7E 00    1449                   LD	A,(IY)
0005BD CD 33 09    1450                   CALL	TERM0
0005C0 20 F6       1451                   JR	NZ,ASSEM3
0005C2 3A FE 54    1452                   LD	A,(LISTON)
0005C5 DD E5       1453                   PUSH	IX
0005C7 E1          1454                   POP	HL
0005C8 B7          1455                   OR	A
0005C9 ED 52       1456                   SBC	HL,DE
0005CB EB          1457                   EX	DE,HL		;DE= NO. OF BYTES
0005CC E5          1458                   PUSH	HL
0005CD 2A 40 54    1459                   LD	HL,(PC)
0005D0 E5          1460                   PUSH	HL
0005D1 19          1461                   ADD	HL,DE
0005D2 22 40 54    1462                   LD	(PC),HL		;UPDATE PC
0005D5 CB 77       1463                   BIT	6,A
0005D7 28 07       1464                   JR	Z,ASSEM5
0005D9 2A 3C 54    1465                   LD	HL,(OC)
0005DC 19          1466                   ADD	HL,DE
0005DD 22 3C 54    1467                   LD	(OC),HL		;UPDATE OC
0005E0 E1          1468   ASSEM5:         POP	HL		;OLD PC
0005E1 DD E1       1469                   POP	IX		;CODE HERE
0005E3 CB 67       1470                   BIT	4,A
0005E5 28 A0       1471                   JR	Z,ASSEM
0005E7 7C          1472                   LD	A,H
0005E8 CD 27 06    1473                   CALL	HEX
0005EB 7D          1474                   LD	A,L
0005EC CD 20 06    1475                   CALL	HEXSP
0005EF AF          1476                   XOR	A
0005F0 BB          1477                   CP	E
0005F1 28 15       1478                   JR	Z,ASSEM2
0005F3 3A FB 54    1479   ASSEM1:         LD	A,(COUNT)
0005F6 FE 11       1480                   CP	17
0005F8 3E 05       1481                   LD	A,5
0005FA D4 7D 35    1482                   CALL	NC,TABIT	;NEXT LINE
0005FD DD 7E 00    1483                   LD	A,(IX)
000600 CD 20 06    1484                   CALL	HEXSP
000603 DD 23       1485                   INC	IX
000605 1D          1486                   DEC	E
000606 20 EB       1487                   JR	NZ,ASSEM1
000608 3E 12       1488   ASSEM2:         LD	A,18
00060A CD 7D 35    1489                   CALL	TABIT
00060D FD E5       1490                   PUSH	IY
00060F E1          1491                   POP	HL
000610 ED 42       1492                   SBC	HL,BC
000612 0A          1493   ASSEM4:         LD	A,(BC)
000613 CD 1B 41    1494                   CALL	OUT
000616 03          1495                   INC	BC
000617 2D          1496                   DEC	L
000618 20 F8       1497                   JR	NZ,ASSEM4
00061A CD FB 40    1498                   CALL	CRLF
00061D C3 87 05    1499                   JP	ASSEM
000620             1500   ;
000620 CD 27 06    1501   HEXSP:          CALL	HEX
000623 3E 20       1502                   LD	A,' '
000625 18 11       1503                   JR	OUTCH1
000627 F5          1504   HEX:            PUSH	AF
000628 0F          1505                   RRCA
000629 0F          1506                   RRCA
00062A 0F          1507                   RRCA
00062B 0F          1508                   RRCA
00062C CD 30 06    1509                   CALL	HEXOUT
00062F F1          1510                   POP	AF
000630 E6 0F       1511   HEXOUT:         AND	0FH
000632 C6 90       1512                   ADD	A,90H
000634 27          1513                   DAA
000635 CE 40       1514                   ADC	A,40H
000637 27          1515                   DAA
000638 C3 1B 41    1516   OUTCH1:         JP	OUT
00063B             1517   ;
00063B             1518   ;PROCESSOR-SPECIFIC TRANSLATION SECTION:
00063B             1519   ;
00063B             1520   ;REGISTER USAGE: B - TYPE OF MOST RECENT OPERAND
00063B             1521   ;                C - OPCODE BEING BUILT
00063B             1522   ;                D - (IX) OR (IY) FLAG
00063B             1523   ;                E - OFFSET FROM IX OR IY
00063B             1524   ;               HL - NUMERIC OPERAND VALUE
00063B             1525   ;               IX - CODE DESTINATION
00063B             1526   ;               IY - SOURCE TEXT POINTER
00063B             1527   ;   Inputs: A = initial character
00063B             1528   ;  Outputs: Carry set if syntax error.
00063B             1529   ;
00063B FE 2E       1530   ASMB:           CP	'.'
00063D 20 28       1531                   JR	NZ,ASMB1
00063F FD 23       1532                   INC	IY
000641 DD E5       1533                   PUSH	IX
000643 CD D6 25    1534                   CALL	VAR_
000646 F5          1535                   PUSH	AF
000647 CD F8 1F    1536                   CALL	ZERO
00064A D9          1537                   EXX
00064B 2A 40 54    1538                   LD	HL,(PC)
00064E D9          1539                   EXX
00064F 3A FE 54    1540                   LD	A,(LISTON)
000652 E6 20       1541                   AND	20H
000654 20 0B       1542                   JR	NZ,ASMB0
000656 DD 7E 00    1543                   LD	A,(IX)
000659 DD B6 01    1544                   OR	(IX+1)
00065C 3E 03       1545                   LD	A,3
00065E C2 44 3F    1546                   JP	NZ,ERROR_	;Multiple label
000661 F1          1547   ASMB0:          POP	AF
000662 CD F0 31    1548                   CALL	STOREN
000665 DD E1       1549                   POP	IX
000667 CD 0F 09    1550   ASMB1:          CALL	SKIP
00066A C8          1551                   RET	Z
00066B FE D6       1552                   CP	TCALL
00066D 0E C4       1553                   LD	C,0C4H
00066F FD 23       1554                   INC	IY
000671 CA 5E 07    1555                   JP	Z,GRPC
000674 FD 2B       1556                   DEC	IY
000676 21 39 09    1557                   LD	HL,OPCODS
000679 CD C6 08    1558                   CALL	FIND
00067C D8          1559                   RET	C
00067D 48          1560                   LD	C,B	;ROOT OPCODE
00067E 16 00       1561                   LD	D,0	;CLEAR IX/IY FLAG
000680             1562   ;
000680             1563   ;GROUP 0 - TRIVIAL CASES REQUIRING NO COMPUTATION
000680             1564   ;GROUP 1 - AS GROUP 0 BUT WITH "ED" PREFIX
000680             1565   ;
000680 D6 27       1566                   SUB	39
000682 30 07       1567                   JR	NC,GROUP2
000684 FE E8       1568                   CP	15-39
000686 D4 2C 08    1569                   CALL	NC,ED
000689 18 68       1570                   JR	BYTE0
00068B             1571   ;
00068B             1572   ;GROUP 2 - BIT, RES, SET
00068B             1573   ;GROUP 3 - RLC, RRC, RL, RR, SLA, SRA, SRL
00068B             1574   ;
00068B D6 0A       1575   GROUP2:         SUB	10
00068D 30 0F       1576                   JR	NC,GROUP4
00068F FE F9       1577                   CP	3-10
000691 DC B6 08    1578                   CALL	C,BIT
000694 D8          1579                   RET	C
000695 CD 8B 08    1580                   CALL	REGLO
000698 D8          1581                   RET	C
000699 CD 30 08    1582                   CALL	CB
00069C 18 55       1583                   JR	BYTE0
00069E             1584   ;
00069E             1585   ;GROUP 4 - PUSH, POP, EX (SP)
00069E             1586   ;
00069E D6 03       1587   GROUP4:         SUB	3
0006A0 30 06       1588                   JR	NC,GROUP5
0006A2 CD AA 08    1589   G4:             CALL	PAIRasm
0006A5 D8          1590                   RET	C
0006A6 18 4B       1591                   JR	BYTE0
0006A8             1592   ;
0006A8             1593   ;GROUP 5 - SUB, AND, XOR, OR, CP
0006A8             1594   ;GROUP 6 - ADD, ADC, SBC
0006A8             1595   ;
0006A8 D6 0A       1596   GROUP5:         SUB	8+2
0006AA 30 32       1597                   JR	NC,GROUP7
0006AC FE FD       1598                   CP	5-8
0006AE 06 07       1599                   LD	B,7
0006B0 D4 3E 08    1600                   CALL	NC,OPND
0006B3 78          1601                   LD	A,B
0006B4 FE 07       1602                   CP	7
0006B6 20 10       1603                   JR	NZ,G6HL
0006B8 CD 8B 08    1604   G6:             CALL	REGLO
0006BB 79          1605                   LD	A,C
0006BC 30 28       1606                   JR	NC,BIND1
0006BE EE 46       1607                   XOR	46H
0006C0 CD 32 08    1608                   CALL	BIND
0006C3 CD 6E 08    1609   DB:             CALL	NUMBER
0006C6 18 78       1610                   JR	VAL8
0006C8             1611   ;
0006C8 E6 3F       1612   G6HL:           AND	3FH
0006CA FE 0C       1613                   CP	12
0006CC 37          1614                   SCF
0006CD C0          1615                   RET	NZ
0006CE 79          1616                   LD	A,C
0006CF FE 80       1617                   CP	80H
0006D1 0E 09       1618                   LD	C,9
0006D3 28 CD       1619                   JR	Z,G4
0006D5 EE 1C       1620                   XOR	1CH
0006D7 0F          1621                   RRCA
0006D8 4F          1622                   LD	C,A
0006D9 CD 2C 08    1623                   CALL	ED
0006DC 18 C4       1624                   JR	G4
0006DE             1625   ;
0006DE             1626   ;GROUP 7 - INC, DEC
0006DE             1627   ;
0006DE D6 02       1628   GROUP7:         SUB	2
0006E0 30 14       1629                   JR	NC,GROUP8
0006E2 CD 91 08    1630                   CALL	REGHI
0006E5 79          1631                   LD	A,C
0006E6 D2 32 08    1632   BIND1:          JP	NC,BIND
0006E9 EE 64       1633                   XOR	64H
0006EB 07          1634                   RLCA
0006EC 07          1635                   RLCA
0006ED 07          1636                   RLCA
0006EE 4F          1637                   LD	C,A
0006EF CD AE 08    1638                   CALL	PAIR1asm
0006F2 D8          1639                   RET	C
0006F3 79          1640   BYTE0:          LD	A,C
0006F4 18 7F       1641                   JR	BYTE2
0006F6             1642   ;
0006F6             1643   ;GROUP 8 - IN
0006F6             1644   ;GROUP 9 - OUT
0006F6             1645   ;
0006F6 D6 02       1646   GROUP8:         SUB	2
0006F8 30 21       1647                   JR	NC,GROUPA
0006FA FE FF       1648                   CP	1-2
0006FC CC 21 08    1649                   CALL	Z,CORN
0006FF 08          1650                   EX	AF,AF'
000700 CD 91 08    1651                   CALL	REGHI
000703 D8          1652                   RET	C
000704 08          1653                   EX	AF,AF'
000705 DC 21 08    1654                   CALL	C,CORN
000708 24          1655                   INC	H
000709 28 E8       1656                   JR	Z,BYTE0
00070B 78          1657                   LD	A,B
00070C FE 07       1658                   CP	7
00070E 37          1659                   SCF
00070F C0          1660                   RET	NZ
000710 79          1661                   LD	A,C
000711 EE 03       1662                   XOR	3
000713 07          1663                   RLCA
000714 07          1664                   RLCA
000715 07          1665                   RLCA
000716 CD 5E 08    1666                   CALL	BYTE
000719 18 25       1667                   JR	VAL8
00071B             1668   ;
00071B             1669   ;GROUP 10 - JR, DJNZ
00071B             1670   ;
00071B D6 02       1671   GROUPA:         SUB	2
00071D 30 24       1672                   JR	NC,GROUPB
00071F FE FF       1673                   CP	1-2
000721 C4 97 08    1674                   CALL	NZ,COND_
000724 79          1675                   LD	A,C
000725 30 02       1676                   JR	NC,GRPA
000727 3E 18       1677                   LD	A,18H
000729 CD 5E 08    1678   GRPA:           CALL	BYTE
00072C CD 6E 08    1679                   CALL	NUMBER
00072F ED 5B 40 54 1680                   LD	DE,(PC)
000733 13          1681                   INC	DE
000734 37          1682                   SCF
000735 ED 52       1683                   SBC	HL,DE
000737 7D          1684                   LD	A,L
000738 17          1685                   RLA
000739 9F          1686                   SBC	A,A
00073A BC          1687                   CP	H
00073B 3E 01       1688   TOOFAR:         LD	A,1
00073D C2 44 3F    1689                   JP	NZ,ERROR_	;"Out of range"
000740 7D          1690   VAL8:           LD	A,L
000741 18 32       1691                   JR	BYTE2
000743             1692   ;
000743             1693   ;GROUP 11 - JP
000743             1694   ;
000743 47          1695   GROUPB:         LD	B,A
000744 20 16       1696                   JR	NZ,GROUPC
000746 CD 97 08    1697                   CALL	COND_
000749 79          1698                   LD	A,C
00074A 30 0B       1699                   JR	NC,GRPB
00074C 78          1700                   LD	A,B
00074D E6 3F       1701                   AND	3FH
00074F FE 06       1702                   CP	6
000751 3E E9       1703                   LD	A,0E9H
000753 28 20       1704                   JR	Z,BYTE2
000755 3E C3       1705                   LD	A,0C3H
000757 CD 5E 08    1706   GRPB:           CALL	BYTE
00075A 18 05       1707                   JR	ADDR_
00075C             1708   ;
00075C             1709   ;GROUP 12 - CALL
00075C             1710   ;
00075C 10 0C       1711   GROUPC:         DJNZ	GROUPD
00075E CD 79 07    1712   GRPC:           CALL	GRPE
000761 CD 6E 08    1713   ADDR_:          CALL	NUMBER
000764 CD 40 07    1714   VAL16:          CALL	VAL8
000767 7C          1715                   LD	A,H
000768 18 0B       1716                   JR	BYTE2
00076A             1717   ;
00076A             1718   ;GROUP 13 - RST
00076A             1719   ;
00076A 10 0B       1720   GROUPD:         DJNZ	GROUPE
00076C CD 6E 08    1721                   CALL	NUMBER
00076F A1          1722                   AND	C
000770 B4          1723                   OR	H
000771 20 C8       1724                   JR	NZ,TOOFAR
000773 7D          1725                   LD	A,L
000774 B1          1726                   OR	C
000775 18 78       1727   BYTE2:          JR	BYTE1
000777             1728   ;
000777             1729   ;GROUP 14 - RET
000777             1730   ;
000777 10 0A       1731   GROUPE:         DJNZ	GROUPF
000779 CD 97 08    1732   GRPE:           CALL	COND_
00077C 79          1733                   LD	A,C
00077D 30 70       1734                   JR	NC,BYTE1
00077F F6 09       1735                   OR	9
000781 18 6C       1736                   JR	BYTE1
000783             1737   ;
000783             1738   ;GROUP 15 - LD
000783             1739   ;
000783 10 6C       1740   GROUPF:         DJNZ	MISC
000785 CD C3 08    1741                   CALL	LDOP
000788 30 5F       1742                   JR	NC,LDA
00078A CD 91 08    1743                   CALL	REGHI
00078D 08          1744                   EX	AF,AF'
00078E CD 0F 09    1745                   CALL	SKIP
000791 FE 28       1746                   CP	'('
000793 28 1D       1747                   JR	Z,LDIN
000795 08          1748                   EX	AF,AF'
000796 D2 B8 06    1749                   JP	NC,G6
000799 0E 01       1750                   LD	C,1
00079B CD AE 08    1751                   CALL	PAIR1asm
00079E D8          1752                   RET	C
00079F 3E 0E       1753                   LD	A,14
0007A1 B8          1754                   CP	B
0007A2 47          1755                   LD	B,A
0007A3 CC AA 08    1756                   CALL	Z,PAIRasm
0007A6 78          1757                   LD	A,B
0007A7 E6 3F       1758                   AND	3FH
0007A9 FE 0C       1759                   CP	12
0007AB 79          1760                   LD	A,C
0007AC 20 A9       1761                   JR	NZ,GRPB
0007AE 3E F9       1762                   LD	A,0F9H
0007B0 18 3D       1763                   JR	BYTE1
0007B2             1764   ;
0007B2 08          1765   LDIN:           EX	AF,AF'
0007B3 C5          1766                   PUSH	BC
0007B4 D4 8B 08    1767                   CALL	NC,REGLO
0007B7 79          1768                   LD	A,C
0007B8 C1          1769                   POP	BC
0007B9 30 77       1770                   JR	NC,BIND
0007BB 0E 0A       1771                   LD	C,0AH
0007BD CD AE 08    1772                   CALL	PAIR1asm
0007C0 CD 08 08    1773                   CALL	LD16
0007C3 30 92       1774                   JR	NC,GRPB
0007C5 CD 6E 08    1775                   CALL	NUMBER
0007C8 0E 02       1776                   LD	C,2
0007CA CD AA 08    1777                   CALL	PAIRasm
0007CD CD 08 08    1778                   CALL	LD16
0007D0 D8          1779                   RET	C
0007D1 CD 5E 08    1780                   CALL	BYTE
0007D4 18 8E       1781                   JR	VAL16
0007D6             1782   ;
0007D6             1783   ;OPT - SET OPTION
0007D6             1784   ;
0007D6 05          1785   OPT:            DEC	B
0007D7 CA C3 06    1786                   JP	Z,DB
0007DA 10 85       1787                   DJNZ	ADDR_
0007DC CD 6E 08    1788                   CALL	NUMBER
0007DF 21 FE 54    1789                   LD	HL,LISTON
0007E2 4F          1790                   LD	C,A
0007E3 ED 6F       1791                   RLD
0007E5 79          1792                   LD	A,C
0007E6 ED 67       1793                   RRD
0007E8 C9          1794                   RET
0007E9             1795   ;
0007E9 FE 04       1796   LDA:            CP	4
0007EB DC 2C 08    1797                   CALL	C,ED
0007EE 78          1798                   LD	A,B
0007EF 18 6D       1799   BYTE1:          JR	BYTE
0007F1             1800   ;
0007F1             1801   ;MISC - DEFB, DEFW, DEFM
0007F1             1802   ;
0007F1 10 E3       1803   MISC:           DJNZ	OPT
0007F3 DD E5       1804                   PUSH	IX
0007F5 CD 3C 18    1805                   CALL	EXPRS
0007F8 DD E1       1806                   POP	IX
0007FA 21 00 52    1807                   LD	HL,ACCS
0007FD AF          1808   DEFM1:          XOR	A
0007FE BB          1809                   CP	E
0007FF C8          1810                   RET	Z
000800 7E          1811                   LD	A,(HL)
000801 23          1812                   INC	HL
000802 CD 5E 08    1813                   CALL	BYTE
000805 1D          1814                   DEC	E
000806 18 F5       1815                   JR	DEFM1
000808             1816   ;
000808             1817   ;SUBROUTINES:
000808             1818   ;
000808 78          1819   LD16:           LD	A,B
000809 38 0E       1820                   JR	C,LD8
00080B 78          1821                   LD	A,B
00080C E6 3F       1822                   AND	3FH
00080E FE 0C       1823                   CP	12
000810 79          1824                   LD	A,C
000811 C8          1825                   RET	Z
000812 CD 2C 08    1826                   CALL	ED
000815 79          1827                   LD	A,C
000816 F6 43       1828                   OR	43H
000818 C9          1829                   RET
000819             1830   ;
000819 FE 07       1831   LD8:            CP	7
00081B 37          1832                   SCF
00081C C0          1833                   RET	NZ
00081D 79          1834                   LD	A,C
00081E F6 30       1835                   OR	30H
000820 C9          1836                   RET
000821             1837   ;
000821 C5          1838   CORN:           PUSH	BC
000822 CD 3E 08    1839                   CALL	OPND
000825 CB 68       1840                   BIT	5,B
000827 C1          1841                   POP	BC
000828 28 44       1842                   JR	Z,NUMBER
00082A 26 FF       1843                   LD	H,-1
00082C 3E ED       1844   ED:             LD	A,0EDH
00082E 18 2E       1845                   JR	BYTE
000830             1846   ;
000830 3E CB       1847   CB:             LD	A,0CBH
000832 FE 76       1848   BIND:           CP	76H
000834 37          1849                   SCF
000835 C8          1850                   RET	Z		;REJECT LD (HL),(HL)
000836 CD 5E 08    1851                   CALL	BYTE
000839 14          1852                   INC	D
00083A F0          1853                   RET	P
00083B 7B          1854                   LD	A,E
00083C 18 20       1855                   JR	BYTE
00083E             1856   ;
00083E E5          1857   OPND:           PUSH	HL
00083F 21 80 0A    1858                   LD	HL,OPRNDS
000842 CD C6 08    1859                   CALL	FIND
000845 E1          1860                   POP	HL
000846 D8          1861                   RET	C
000847 CB 78       1862                   BIT	7,B
000849 C8          1863                   RET	Z
00084A CB 58       1864                   BIT	3,B
00084C E5          1865                   PUSH	HL
00084D CC 65 08    1866                   CALL	Z,OFFSETasm
000850 5D          1867                   LD	E,L
000851 E1          1868                   POP	HL
000852 3E DD       1869                   LD	A,0DDH
000854 CB 70       1870                   BIT	6,B
000856 28 02       1871                   JR	Z,OP1
000858 3E FD       1872                   LD	A,0FDH
00085A B7          1873   OP1:            OR	A
00085B 14          1874                   INC	D
00085C 57          1875                   LD	D,A
00085D F8          1876                   RET	M
00085E DD 77 00    1877   BYTE:           LD	(IX),A
000861 DD 23       1878                   INC	IX
000863 B7          1879                   OR	A
000864 C9          1880                   RET
000865             1881   ;
000865 FD 7E 00    1882   OFFSETasm:         LD	A,(IY)
000868 FE 29       1883                   CP	')'
00086A 21 00 00    1884                   LD	HL,0
00086D C8          1885                   RET	Z
00086E CD 0F 09    1886   NUMBER:         CALL	SKIP
000871 C5          1887                   PUSH	BC
000872 D5          1888                   PUSH	DE
000873 DD E5       1889                   PUSH	IX
000875 CD 33 18    1890                   CALL	EXPRI
000878 DD E1       1891                   POP	IX
00087A D9          1892                   EXX
00087B D1          1893                   POP	DE
00087C C1          1894                   POP	BC
00087D 7D          1895                   LD	A,L
00087E B7          1896                   OR	A
00087F C9          1897                   RET
000880             1898   ;
000880 CD 3E 08    1899   REG:            CALL	OPND
000883 D8          1900                   RET	C
000884 78          1901                   LD	A,B
000885 E6 3F       1902                   AND	3FH
000887 FE 08       1903                   CP	8
000889 3F          1904                   CCF
00088A C9          1905                   RET
00088B             1906   ;
00088B CD 80 08    1907   REGLO:          CALL	REG
00088E D8          1908                   RET	C
00088F 18 2F       1909                   JR	ORC
000891             1910   ;
000891 CD 80 08    1911   REGHI:          CALL	REG
000894 D8          1912                   RET	C
000895 18 26       1913                   JR	SHL3
000897             1914   ;
000897 CD 3E 08    1915   COND_:          CALL	OPND
00089A D8          1916                   RET	C
00089B 78          1917                   LD	A,B
00089C E6 1F       1918                   AND	1FH
00089E D6 10       1919                   SUB	16
0008A0 30 1B       1920                   JR	NC,SHL3
0008A2 FE F1       1921                   CP	-15
0008A4 37          1922                   SCF
0008A5 C0          1923                   RET	NZ
0008A6 3E 03       1924                   LD	A,3
0008A8 18 13       1925                   JR	SHL3
0008AA             1926   ;
0008AA CD 3E 08    1927   PAIRasm:           CALL	OPND
0008AD D8          1928                   RET	C
0008AE 78          1929   PAIR1asm:          LD	A,B
0008AF E6 0F       1930                   AND	0FH
0008B1 D6 08       1931                   SUB	8
0008B3 D8          1932                   RET	C
0008B4 18 07       1933                   JR	SHL3
0008B6             1934   ;
0008B6 CD 6E 08    1935   BIT:            CALL	NUMBER
0008B9 FE 08       1936                   CP	8
0008BB 3F          1937                   CCF
0008BC D8          1938                   RET	C
0008BD 07          1939   SHL3:           RLCA
0008BE 07          1940                   RLCA
0008BF 07          1941                   RLCA
0008C0 B1          1942   ORC:            OR	C
0008C1 4F          1943                   LD	C,A
0008C2 C9          1944                   RET
0008C3             1945   ;
0008C3 21 C5 0A    1946   LDOP:           LD	HL,LDOPS
0008C6 CD 0F 09    1947   FIND:           CALL	SKIP
0008C9 06 00       1948   EXIT:           LD	B,0
0008CB 37          1949                   SCF
0008CC C8          1950                   RET	Z
0008CD FE DD       1951                   CP	TDEF
0008CF 28 04       1952                   JR	Z,FIND0
0008D1 FE 85       1953                   CP	TOR+1
0008D3 3F          1954                   CCF
0008D4 D8          1955                   RET	C
0008D5 7E          1956   FIND0:          LD	A,(HL)
0008D6 B7          1957                   OR	A
0008D7 28 F0       1958                   JR	Z,EXIT
0008D9 FD AE 00    1959                   XOR	(IY)
0008DC E6 5F       1960                   AND	01011111B
0008DE 28 09       1961                   JR	Z,FIND2
0008E0 CB 7E       1962   FIND1:          BIT	7,(HL)
0008E2 23          1963                   INC	HL
0008E3 28 FB       1964                   JR	Z,FIND1
0008E5 23          1965                   INC	HL
0008E6 04          1966                   INC	B
0008E7 18 EC       1967                   JR	FIND0
0008E9             1968   ;
0008E9 FD E5       1969   FIND2:          PUSH	IY
0008EB CB 7E       1970   FIND3:          BIT	7,(HL)
0008ED FD 23       1971                   INC	IY
0008EF 23          1972                   INC	HL
0008F0 20 10       1973                   JR	NZ,FIND5
0008F2 BE          1974                   CP	(HL)
0008F3 CC 0E 09    1975                   CALL	Z,SKIP0
0008F6 7E          1976                   LD	A,(HL)
0008F7 FD AE 00    1977                   XOR	(IY)
0008FA E6 5F       1978                   AND	01011111B
0008FC 28 ED       1979                   JR	Z,FIND3
0008FE FD E1       1980   FIND4:          POP	IY
000900 18 DE       1981                   JR	FIND1
000902             1982   ;
000902 CD 21 09    1983   FIND5:          CALL	DELIM
000905 C4 1B 09    1984                   CALL	NZ,SIGN
000908 20 F4       1985                   JR	NZ,FIND4
00090A 78          1986   FIND6:          LD	A,B
00090B 46          1987                   LD	B,(HL)
00090C E1          1988                   POP	HL
00090D C9          1989                   RET
00090E             1990   ;
00090E 23          1991   SKIP0:          INC	HL
00090F CD 21 09    1992   SKIP:           CALL	DELIM
000912 C0          1993                   RET	NZ
000913 CD 2D 09    1994                   CALL	TERM
000916 C8          1995                   RET	Z
000917 FD 23       1996                   INC	IY
000919 18 F4       1997                   JR	SKIP
00091B             1998   ;
00091B FE 2B       1999   SIGN:           CP	'+'
00091D C8          2000                   RET	Z
00091E FE 2D       2001                   CP	'-'
000920 C9          2002                   RET
000921             2003   ;
000921 FD 7E 00    2004   DELIM:          LD	A,(IY)		;ASSEMBLER DELIMITER
000924 FE 20       2005                   CP	' '
000926 C8          2006                   RET	Z
000927 FE 2C       2007                   CP	','
000929 C8          2008                   RET	Z
00092A FE 29       2009                   CP	')'
00092C C8          2010                   RET	Z
00092D FE 3B       2011   TERM:           CP	';'		;ASSEMBLER TERMINATOR
00092F C8          2012                   RET	Z
000930 FE 5C       2013                   CP	'\'
000932 C8          2014                   RET	Z
000933 FE 3A       2015   TERM0:          CP	':'		;ASSEMBLER SEPARATOR
000935 D0          2016                   RET	NC
000936 FE 0D       2017                   CP	CR
000938 C9          2018                   RET
000939             2019   ;
000939 4E 4F       2020   OPCODS:         DB	"NO"
00093B D0          2021                   DB	'P'+80H
00093C 00          2022                   DB	0
00093D 52 4C 43    2023                   DB	"RLC"
000940 C1          2024                   DB	'A'+80H
000941 07          2025                   DB	7
000942 45 58       2026                   DB	"EX"
000944 00          2027                   DB	0
000945 41 46       2028                   DB	"AF"
000947 00          2029                   DB	0
000948 41 46       2030                   DB	"AF"
00094A 27          2031                   DB	"'"+80H
00094B 08          2032                   DB	8
00094C 52 52 43    2033                   DB	"RRC"
00094F C1          2034                   DB	'A'+80H
000950 0F          2035                   DB	0FH
000951 52 4C       2036                   DB	"RL"
000953 C1          2037                   DB	'A'+80H
000954 17          2038                   DB	17H
000955 52 52       2039                   DB	"RR"
000957 C1          2040                   DB	'A'+80H
000958 1F          2041                   DB	1FH
000959 44 41       2042                   DB	"DA"
00095B C1          2043                   DB	'A'+80H
00095C 27          2044                   DB	27H
00095D 43 50       2045                   DB	"CP"
00095F CC          2046                   DB	'L'+80H
000960 2F          2047                   DB	2FH
000961 53 43       2048                   DB	"SC"
000963 C6          2049                   DB	'F'+80H
000964 37          2050                   DB	37H
000965 43 43       2051                   DB	"CC"
000967 C6          2052                   DB	'F'+80H
000968 3F          2053                   DB	3FH
000969 48 41 4C    2054                   DB	"HAL"
00096C D4          2055                   DB	'T'+80H
00096D 76          2056                   DB	76H
00096E 45 58       2057                   DB	"EX"
000970 D8          2058                   DB	'X'+80H
000971 D9          2059                   DB	0D9H
000972 45 58       2060                   DB	"EX"
000974 00          2061                   DB	0
000975 44 45       2062                   DB	"DE"
000977 00          2063                   DB	0
000978 48          2064                   DB	'H'
000979 CC          2065                   DB	'L'+80H
00097A EB          2066                   DB	0EBH
00097B 44          2067                   DB	'D'
00097C C9          2068                   DB	'I'+80H
00097D F3          2069                   DB	0F3H
00097E 45          2070                   DB	'E'
00097F C9          2071                   DB	'I'+80H
000980 FB          2072                   DB	0FBH
000981             2073   ;
000981 4E 45       2074                   DB	"NE"
000983 C7          2075                   DB	'G'+80H
000984 44          2076                   DB	44H
000985 49 4D       2077                   DB	"IM"
000987 00          2078                   DB	0
000988 B0          2079                   DB	'0'+80H
000989 46          2080                   DB	46H
00098A 52 45 54    2081                   DB	"RET"
00098D CE          2082                   DB	'N'+80H
00098E 45          2083                   DB	45H
00098F 52 45 54    2084                   DB	"RET"
000992 C9          2085                   DB	'I'+80H
000993 4D          2086                   DB	4DH
000994 49 4D       2087                   DB	"IM"
000996 00          2088                   DB	0
000997 B1          2089                   DB	'1'+80H
000998 56          2090                   DB	56H
000999 49 4D       2091                   DB	"IM"
00099B 00          2092                   DB	0
00099C B2          2093                   DB	'2'+80H
00099D 5E          2094                   DB	5EH
00099E 52 52       2095                   DB	"RR"
0009A0 C4          2096                   DB	'D'+80H
0009A1 67          2097                   DB	67H
0009A2 52 4C       2098                   DB	"RL"
0009A4 C4          2099                   DB	'D'+80H
0009A5 6F          2100                   DB	6FH
0009A6 4C 44       2101                   DB	"LD"
0009A8 C9          2102                   DB	'I'+80H
0009A9 A0          2103                   DB	0A0H
0009AA 43 50       2104                   DB	"CP"
0009AC C9          2105                   DB	'I'+80H
0009AD A1          2106                   DB	0A1H
0009AE 49 4E       2107                   DB	"IN"
0009B0 C9          2108                   DB	'I'+80H
0009B1 A2          2109                   DB	0A2H
0009B2 4F 55 54    2110                   DB	"OUT"
0009B5 C9          2111                   DB	'I'+80H
0009B6 A3          2112                   DB	0A3H
0009B7 4C 44       2113                   DB	"LD"
0009B9 C4          2114                   DB	'D'+80H
0009BA A8          2115                   DB	0A8H
0009BB 43 50       2116                   DB	"CP"
0009BD C4          2117                   DB	'D'+80H
0009BE A9          2118                   DB	0A9H
0009BF 49 4E       2119                   DB	"IN"
0009C1 C4          2120                   DB	'D'+80H
0009C2 AA          2121                   DB	0AAH
0009C3 4F 55 54    2122                   DB	"OUT"
0009C6 C4          2123                   DB	'D'+80H
0009C7 AB          2124                   DB	0ABH
0009C8 4C 44 49    2125                   DB	"LDI"
0009CB D2          2126                   DB	'R'+80H
0009CC B0          2127                   DB	0B0H
0009CD 43 50 49    2128                   DB	"CPI"
0009D0 D2          2129                   DB	'R'+80H
0009D1 B1          2130                   DB	0B1H
0009D2 49 4E 49    2131                   DB	"INI"
0009D5 D2          2132                   DB	'R'+80H
0009D6 B2          2133                   DB	0B2H
0009D7 4F 54 49    2134                   DB	"OTI"
0009DA D2          2135                   DB	'R'+80H
0009DB B3          2136                   DB	0B3H
0009DC 4C 44 44    2137                   DB	"LDD"
0009DF D2          2138                   DB	'R'+80H
0009E0 B8          2139                   DB	0B8H
0009E1 43 50 44    2140                   DB	"CPD"
0009E4 D2          2141                   DB	'R'+80H
0009E5 B9          2142                   DB	0B9H
0009E6 49 4E 44    2143                   DB	"IND"
0009E9 D2          2144                   DB	'R'+80H
0009EA BA          2145                   DB	0BAH
0009EB 4F 54 44    2146                   DB	"OTD"
0009EE D2          2147                   DB	'R'+80H
0009EF BB          2148                   DB	0BBH
0009F0             2149   ;
0009F0 42 49       2150                   DB	"BI"
0009F2 D4          2151                   DB	'T'+80H
0009F3 40          2152                   DB	40H
0009F4 52 45       2153                   DB	"RE"
0009F6 D3          2154                   DB	'S'+80H
0009F7 80          2155                   DB	80H
0009F8 53 45       2156                   DB	"SE"
0009FA D4          2157                   DB	'T'+80H
0009FB C0          2158                   DB	0C0H
0009FC             2159   ;
0009FC 52 4C       2160                   DB	"RL"
0009FE C3          2161                   DB	'C'+80H
0009FF 00          2162                   DB	0
000A00 52 52       2163                   DB	"RR"
000A02 C3          2164                   DB	'C'+80H
000A03 08          2165                   DB	8
000A04 52          2166                   DB	'R'
000A05 CC          2167                   DB	'L'+80H
000A06 10          2168                   DB	10H
000A07 52          2169                   DB	'R'
000A08 D2          2170                   DB	'R'+80H
000A09 18          2171                   DB	18H
000A0A 53 4C       2172                   DB	"SL"
000A0C C1          2173                   DB	'A'+80H
000A0D 20          2174                   DB	20H
000A0E 53 52       2175                   DB	"SR"
000A10 C1          2176                   DB	'A'+80H
000A11 28          2177                   DB	28H
000A12 53 52       2178                   DB	"SR"
000A14 CC          2179                   DB	'L'+80H
000A15 38          2180                   DB	38H
000A16             2181   ;
000A16 50 4F       2182                   DB	"PO"
000A18 D0          2183                   DB	'P'+80H
000A19 C1          2184                   DB	0C1H
000A1A 50 55 53    2185                   DB	"PUS"
000A1D C8          2186                   DB	'H'+80H
000A1E C5          2187                   DB	0C5H
000A1F 45 58       2188                   DB	"EX"
000A21 00          2189                   DB	0
000A22 28 53       2190                   DB	"(S"
000A24 D0          2191                   DB	'P'+80H
000A25 E3          2192                   DB	0E3H
000A26             2193   ;
000A26 53 55       2194                   DB	"SU"
000A28 C2          2195                   DB	'B'+80H
000A29 90          2196                   DB	90H
000A2A 41 4E       2197                   DB	"AN"
000A2C C4          2198                   DB	'D'+80H
000A2D A0          2199                   DB	0A0H
000A2E 58 4F       2200                   DB	"XO"
000A30 D2          2201                   DB	'R'+80H
000A31 A8          2202                   DB	0A8H
000A32 4F          2203                   DB	'O'
000A33 D2          2204                   DB	'R'+80H
000A34 B0          2205                   DB	0B0H
000A35 43          2206                   DB	'C'
000A36 D0          2207                   DB	'P'+80H
000A37 B8          2208                   DB	0B8H
000A38 80          2209                   DB	TAND
000A39 A0          2210                   DB	0A0H
000A3A 84          2211                   DB	TOR
000A3B B0          2212                   DB	0B0H
000A3C             2213   ;
000A3C 41 44       2214                   DB	"AD"
000A3E C4          2215                   DB	'D'+80H
000A3F 80          2216                   DB	80H
000A40 41 44       2217                   DB	"AD"
000A42 C3          2218                   DB	'C'+80H
000A43 88          2219                   DB	88H
000A44 53 42       2220                   DB	"SB"
000A46 C3          2221                   DB	'C'+80H
000A47 98          2222                   DB	98H
000A48             2223   ;
000A48 49 4E       2224                   DB	"IN"
000A4A C3          2225                   DB	'C'+80H
000A4B 04          2226                   DB	4
000A4C 44 45       2227                   DB	"DE"
000A4E C3          2228                   DB	'C'+80H
000A4F 05          2229                   DB	5
000A50             2230   ;
000A50 49          2231                   DB	'I'
000A51 CE          2232                   DB	'N'+80H
000A52 40          2233                   DB	40H
000A53 4F 55       2234                   DB	"OU"
000A55 D4          2235                   DB	'T'+80H
000A56 41          2236                   DB	41H
000A57             2237   ;
000A57 4A          2238                   DB	'J'
000A58 D2          2239                   DB	'R'+80H
000A59 20          2240                   DB	20H
000A5A 44 4A 4E    2241                   DB	"DJN"
000A5D DA          2242                   DB	'Z'+80H
000A5E 10          2243                   DB	10H
000A5F             2244   ;
000A5F 4A          2245                   DB	'J'
000A60 D0          2246                   DB	'P'+80H
000A61 C2          2247                   DB	0C2H
000A62             2248   ;
000A62 43 41 4C    2249                   DB	"CAL"
000A65 CC          2250                   DB	'L'+80H
000A66 C4          2251                   DB	0C4H
000A67             2252   ;
000A67 52 53       2253                   DB	"RS"
000A69 D4          2254                   DB	'T'+80H
000A6A C7          2255                   DB	0C7H
000A6B             2256   ;
000A6B 52 45       2257                   DB	"RE"
000A6D D4          2258                   DB	'T'+80H
000A6E C0          2259                   DB	0C0H
000A6F             2260   ;
000A6F 4C          2261                   DB	'L'
000A70 C4          2262                   DB	'D'+80H
000A71 40          2263                   DB	40H
000A72             2264   ;
000A72 5D          2265                   DB	TDEF & 7FH
000A73 CD          2266                   DB	'M'+80H
000A74 00          2267                   DB	0
000A75             2268   ;
000A75 5D          2269                   DB	TDEF & 7FH
000A76 C2          2270                   DB	'B'+80H
000A77 00          2271                   DB	0
000A78             2272   ;
000A78 4F 50       2273                   DB	"OP"
000A7A D4          2274                   DB	'T'+80H
000A7B 00          2275                   DB	0
000A7C             2276   ;
000A7C 5D          2277                   DB	TDEF & 7FH
000A7D D7          2278                   DB	'W'+80H
000A7E 00          2279                   DB	0
000A7F             2280   ;
000A7F 00          2281                   DB	0
000A80             2282   ;
000A80 C2          2283   OPRNDS:         DB	'B'+80H
000A81 00          2284                   DB	0
000A82 C3          2285                   DB	'C'+80H
000A83 01          2286                   DB	1
000A84 C4          2287                   DB	'D'+80H
000A85 02          2288                   DB	2
000A86 C5          2289                   DB	'E'+80H
000A87 03          2290                   DB	3
000A88 C8          2291                   DB	'H'+80H
000A89 04          2292                   DB	4
000A8A CC          2293                   DB	'L'+80H
000A8B 05          2294                   DB	5
000A8C 28 48       2295                   DB	"(H"
000A8E CC          2296                   DB	'L'+80H
000A8F 06          2297                   DB	6
000A90 C1          2298                   DB	'A'+80H
000A91 07          2299                   DB	7
000A92 28 49       2300                   DB	"(I"
000A94 D8          2301                   DB	'X'+80H
000A95 86          2302                   DB	86H
000A96 28 49       2303                   DB	"(I"
000A98 D9          2304                   DB	'Y'+80H
000A99 C6          2305                   DB	0C6H
000A9A             2306   ;
000A9A 42          2307                   DB	'B'
000A9B C3          2308                   DB	'C'+80H
000A9C 08          2309                   DB	8
000A9D 44          2310                   DB	'D'
000A9E C5          2311                   DB	'E'+80H
000A9F 0A          2312                   DB	10
000AA0 48          2313                   DB	'H'
000AA1 CC          2314                   DB	'L'+80H
000AA2 0C          2315                   DB	12
000AA3 49          2316                   DB	'I'
000AA4 D8          2317                   DB	'X'+80H
000AA5 8C          2318                   DB	8CH
000AA6 49          2319                   DB	'I'
000AA7 D9          2320                   DB	'Y'+80H
000AA8 CC          2321                   DB	0CCH
000AA9 41          2322                   DB	'A'
000AAA C6          2323                   DB	'F'+80H
000AAB 0E          2324                   DB	14
000AAC 53          2325                   DB	'S'
000AAD D0          2326                   DB	'P'+80H
000AAE 0E          2327                   DB	14
000AAF             2328   ;
000AAF 4E          2329                   DB	'N'
000AB0 DA          2330                   DB	'Z'+80H
000AB1 10          2331                   DB	16
000AB2 DA          2332                   DB	'Z'+80H
000AB3 11          2333                   DB	17
000AB4 4E          2334                   DB	'N'
000AB5 C3          2335                   DB	'C'+80H
000AB6 12          2336                   DB	18
000AB7 50          2337                   DB	'P'
000AB8 CF          2338                   DB	'O'+80H
000AB9 14          2339                   DB	20
000ABA 50          2340                   DB	'P'
000ABB C5          2341                   DB	'E'+80H
000ABC 15          2342                   DB	21
000ABD D0          2343                   DB	'P'+80H
000ABE 16          2344                   DB	22
000ABF CD          2345                   DB	'M'+80H
000AC0 17          2346                   DB	23
000AC1             2347   ;
000AC1 28          2348                   DB	'('
000AC2 C3          2349                   DB	'C'+80H
000AC3 20          2350                   DB	20H
000AC4             2351   ;
000AC4 00          2352                   DB	0
000AC5             2353   ;
000AC5 49          2354   LDOPS:          DB	'I'
000AC6 00          2355                   DB	0
000AC7 C1          2356                   DB	'A'+80H
000AC8 47          2357                   DB	47H
000AC9 52          2358                   DB	'R'
000ACA 00          2359                   DB	0
000ACB C1          2360                   DB	'A'+80H
000ACC 4F          2361                   DB	4FH
000ACD 41          2362                   DB	'A'
000ACE 00          2363                   DB	0
000ACF C9          2364                   DB	'I'+80H
000AD0 57          2365                   DB	57H
000AD1 41          2366                   DB	'A'
000AD2 00          2367                   DB	0
000AD3 D2          2368                   DB	'R'+80H
000AD4 5F          2369                   DB	5FH
000AD5 28 42 43    2370                   DB	"(BC"
000AD8 00          2371                   DB	0
000AD9 C1          2372                   DB	'A'+80H
000ADA 02          2373                   DB	2
000ADB 28 44 45    2374                   DB	"(DE"
000ADE 00          2375                   DB	0
000ADF C1          2376                   DB	'A'+80H
000AE0 12          2377                   DB	12H
000AE1 41          2378                   DB	'A'
000AE2 00          2379                   DB	0
000AE3 28 42       2380                   DB	"(B"
000AE5 C3          2381                   DB	'C'+80H
000AE6 0A          2382                   DB	0AH
000AE7 41          2383                   DB	'A'
000AE8 00          2384                   DB	0
000AE9 28 44       2385                   DB	"(D"
000AEB C5          2386                   DB	'E'+80H
000AEC 1A          2387                   DB	1AH
000AED             2388   ;
000AED 00          2389                   DB	0
000AEE             2390   ;
000AEE             2391   FIN:            ; END
000AEE             2392   ; --- End asmb.asm ---
000AEE             2393   
000AEE             2394   ; --- Begin agon_gpio.asm ---
000AEE             2395   ;
000AEE             2396   ; Title:	BBC Basic for AGON - GPIO functions
000AEE             2397   ; Author:	Dean Belfield
000AEE             2398   ; Created:	04/12/2024
000AEE             2399   ; Last Updated:	04/12/2024
000AEE             2400   ;
000AEE             2401   ; Modinfo:
000AEE             2402   
000AEE             2403   			; INCLUDE	"macros.inc"
000AEE             2404   			; INCLUDE	"equs.inc"
000AEE             2405   
000AEE             2406   			.ASSUME	ADL = 0
000AEE             2407   ;	.ORG 0x0000
000AEE             2408   
000AEE             2409   ;			SEGMENT CODE
000AEE             2410   
000AEE             2411   ;			XDEF	GPIOB_SETMODE
000AEE             2412   
000AEE             2413   ;			XREF	SWITCH_A
000AEE             2414   
000AEE             2415   ;  A: Mode
000AEE             2416   ;  B: Pins
000AEE             2417   ;
000AEE CD 8F 0E    2418   GPIOB_SETMODE:		CALL	SWITCH_A
000AF1 05 0B       2419   			DW	GPIOB_M0	; Output
000AF3 2A 0B       2420   			DW	GPIOB_M1	; Input
000AF5 4A 0B       2421   			DW	GPIOB_M2	; Open Drain IO
000AF7 6A 0B       2422   			DW	GPIOB_M3	; Open Source IO
000AF9 85 0B       2423   			DW	GPIOB_M4	; Interrupt, Dual Edge
000AFB B1 0B       2424   			DW	GPIOB_M5	; Alt Function
000AFD CC 0B       2425   			DW	GPIOB_M6	; Interrupt, Active Low
000AFF F3 0B       2426   			DW	GPIOB_M7	; Interrupt, Active High
000B01 15 0C       2427   			DW	GPIOB_M8	; Interrupt, Falling Edge
000B03 37 0C       2428   			DW	GPIOB_M9	; Interrupt, Rising Edge
000B05             2429   
000B05             2430   ; Output
000B05             2431   ;
000B05             2432   GPIOB_M0:		RES_GPIO PB_DDR,  B
000B05 C5          0001M1         PUSH    BC
000B06 78          0002M1         LD      A, VAL
000B07 2F          0003M1         CPL
000B08 4F          0004M1         LD      C, A
000B09 ED 38 9B    0005M1         IN0     A, (REG)
000B0C A1          0006M1         AND     C
000B0D ED 39 9B    0007M1         OUT0    (REG), A
000B10 C1          0008M1         POP     BC
000B11             2433   			RES_GPIO PB_ALT1, B
000B11 C5          0001M1         PUSH    BC
000B12 78          0002M1         LD      A, VAL
000B13 2F          0003M1         CPL
000B14 4F          0004M1         LD      C, A
000B15 ED 38 9C    0005M1         IN0     A, (REG)
000B18 A1          0006M1         AND     C
000B19 ED 39 9C    0007M1         OUT0    (REG), A
000B1C C1          0008M1         POP     BC
000B1D             2434   			RES_GPIO PB_ALT2, B
000B1D C5          0001M1         PUSH    BC
000B1E 78          0002M1         LD      A, VAL
000B1F 2F          0003M1         CPL
000B20 4F          0004M1         LD      C, A
000B21 ED 38 9D    0005M1         IN0     A, (REG)
000B24 A1          0006M1         AND     C
000B25 ED 39 9D    0007M1         OUT0    (REG), A
000B28 C1          0008M1         POP     BC
000B29 C9          2435   			RET
000B2A             2436   
000B2A             2437   ; Input
000B2A             2438   ;
000B2A             2439   GPIOB_M1:		SET_GPIO PB_DDR,  B
000B2A ED 38 9B    0001M1         IN0     A, (REG)
000B2D B0          0002M1         OR      VAL
000B2E ED 39 9B    0003M1         OUT0    (REG), A
000B31             2440   			RES_GPIO PB_ALT1, B
000B31 C5          0001M1         PUSH    BC
000B32 78          0002M1         LD      A, VAL
000B33 2F          0003M1         CPL
000B34 4F          0004M1         LD      C, A
000B35 ED 38 9C    0005M1         IN0     A, (REG)
000B38 A1          0006M1         AND     C
000B39 ED 39 9C    0007M1         OUT0    (REG), A
000B3C C1          0008M1         POP     BC
000B3D             2441   			RES_GPIO PB_ALT2, B
000B3D C5          0001M1         PUSH    BC
000B3E 78          0002M1         LD      A, VAL
000B3F 2F          0003M1         CPL
000B40 4F          0004M1         LD      C, A
000B41 ED 38 9D    0005M1         IN0     A, (REG)
000B44 A1          0006M1         AND     C
000B45 ED 39 9D    0007M1         OUT0    (REG), A
000B48 C1          0008M1         POP     BC
000B49 C9          2442   			RET
000B4A             2443   
000B4A             2444   ; Open Drain IO
000B4A             2445   ;
000B4A             2446   GPIOB_M2:		RES_GPIO PB_DDR,  B
000B4A C5          0001M1         PUSH    BC
000B4B 78          0002M1         LD      A, VAL
000B4C 2F          0003M1         CPL
000B4D 4F          0004M1         LD      C, A
000B4E ED 38 9B    0005M1         IN0     A, (REG)
000B51 A1          0006M1         AND     C
000B52 ED 39 9B    0007M1         OUT0    (REG), A
000B55 C1          0008M1         POP     BC
000B56             2447   			SET_GPIO PB_ALT1, B
000B56 ED 38 9C    0001M1         IN0     A, (REG)
000B59 B0          0002M1         OR      VAL
000B5A ED 39 9C    0003M1         OUT0    (REG), A
000B5D             2448   			RES_GPIO PB_ALT2, B
000B5D C5          0001M1         PUSH    BC
000B5E 78          0002M1         LD      A, VAL
000B5F 2F          0003M1         CPL
000B60 4F          0004M1         LD      C, A
000B61 ED 38 9D    0005M1         IN0     A, (REG)
000B64 A1          0006M1         AND     C
000B65 ED 39 9D    0007M1         OUT0    (REG), A
000B68 C1          0008M1         POP     BC
000B69 C9          2449   			RET
000B6A             2450   
000B6A             2451   ; Open Source IO
000B6A             2452   ;
000B6A             2453   GPIOB_M3:		SET_GPIO PB_DDR,  B
000B6A ED 38 9B    0001M1         IN0     A, (REG)
000B6D B0          0002M1         OR      VAL
000B6E ED 39 9B    0003M1         OUT0    (REG), A
000B71             2454   			SET_GPIO PB_ALT1, B
000B71 ED 38 9C    0001M1         IN0     A, (REG)
000B74 B0          0002M1         OR      VAL
000B75 ED 39 9C    0003M1         OUT0    (REG), A
000B78             2455   			RES_GPIO PB_ALT2, B
000B78 C5          0001M1         PUSH    BC
000B79 78          0002M1         LD      A, VAL
000B7A 2F          0003M1         CPL
000B7B 4F          0004M1         LD      C, A
000B7C ED 38 9D    0005M1         IN0     A, (REG)
000B7F A1          0006M1         AND     C
000B80 ED 39 9D    0007M1         OUT0    (REG), A
000B83 C1          0008M1         POP     BC
000B84 C9          2456   			RET
000B85             2457   
000B85             2458   ; Interrupt, Dual Edge
000B85             2459   ;
000B85             2460   GPIOB_M4:		SET_GPIO PB_DR,   B
000B85 ED 38 9A    0001M1         IN0     A, (REG)
000B88 B0          0002M1         OR      VAL
000B89 ED 39 9A    0003M1         OUT0    (REG), A
000B8C             2461   			RES_GPIO PB_DDR,  B
000B8C C5          0001M1         PUSH    BC
000B8D 78          0002M1         LD      A, VAL
000B8E 2F          0003M1         CPL
000B8F 4F          0004M1         LD      C, A
000B90 ED 38 9B    0005M1         IN0     A, (REG)
000B93 A1          0006M1         AND     C
000B94 ED 39 9B    0007M1         OUT0    (REG), A
000B97 C1          0008M1         POP     BC
000B98             2462   			RES_GPIO PB_ALT1, B
000B98 C5          0001M1         PUSH    BC
000B99 78          0002M1         LD      A, VAL
000B9A 2F          0003M1         CPL
000B9B 4F          0004M1         LD      C, A
000B9C ED 38 9C    0005M1         IN0     A, (REG)
000B9F A1          0006M1         AND     C
000BA0 ED 39 9C    0007M1         OUT0    (REG), A
000BA3 C1          0008M1         POP     BC
000BA4             2463   			RES_GPIO PB_ALT2, B
000BA4 C5          0001M1         PUSH    BC
000BA5 78          0002M1         LD      A, VAL
000BA6 2F          0003M1         CPL
000BA7 4F          0004M1         LD      C, A
000BA8 ED 38 9D    0005M1         IN0     A, (REG)
000BAB A1          0006M1         AND     C
000BAC ED 39 9D    0007M1         OUT0    (REG), A
000BAF C1          0008M1         POP     BC
000BB0 C9          2464   			RET
000BB1             2465   
000BB1             2466   ; Alt Function
000BB1             2467   ;
000BB1             2468   GPIOB_M5:		SET_GPIO PB_DDR,  B
000BB1 ED 38 9B    0001M1         IN0     A, (REG)
000BB4 B0          0002M1         OR      VAL
000BB5 ED 39 9B    0003M1         OUT0    (REG), A
000BB8             2469   			RES_GPIO PB_ALT1, B
000BB8 C5          0001M1         PUSH    BC
000BB9 78          0002M1         LD      A, VAL
000BBA 2F          0003M1         CPL
000BBB 4F          0004M1         LD      C, A
000BBC ED 38 9C    0005M1         IN0     A, (REG)
000BBF A1          0006M1         AND     C
000BC0 ED 39 9C    0007M1         OUT0    (REG), A
000BC3 C1          0008M1         POP     BC
000BC4             2470   			SET_GPIO PB_ALT2, B
000BC4 ED 38 9D    0001M1         IN0     A, (REG)
000BC7 B0          0002M1         OR      VAL
000BC8 ED 39 9D    0003M1         OUT0    (REG), A
000BCB C9          2471   			RET
000BCC             2472   
000BCC             2473   ; Interrupt, Active Low
000BCC             2474   ;
000BCC             2475   GPIOB_M6:		RES_GPIO PB_DR,   B
000BCC C5          0001M1         PUSH    BC
000BCD 78          0002M1         LD      A, VAL
000BCE 2F          0003M1         CPL
000BCF 4F          0004M1         LD      C, A
000BD0 ED 38 9A    0005M1         IN0     A, (REG)
000BD3 A1          0006M1         AND     C
000BD4 ED 39 9A    0007M1         OUT0    (REG), A
000BD7 C1          0008M1         POP     BC
000BD8             2476   			RES_GPIO PB_DDR,  B
000BD8 C5          0001M1         PUSH    BC
000BD9 78          0002M1         LD      A, VAL
000BDA 2F          0003M1         CPL
000BDB 4F          0004M1         LD      C, A
000BDC ED 38 9B    0005M1         IN0     A, (REG)
000BDF A1          0006M1         AND     C
000BE0 ED 39 9B    0007M1         OUT0    (REG), A
000BE3 C1          0008M1         POP     BC
000BE4             2477   			SET_GPIO PB_ALT1, B
000BE4 ED 38 9C    0001M1         IN0     A, (REG)
000BE7 B0          0002M1         OR      VAL
000BE8 ED 39 9C    0003M1         OUT0    (REG), A
000BEB             2478   			SET_GPIO PB_ALT2, B
000BEB ED 38 9D    0001M1         IN0     A, (REG)
000BEE B0          0002M1         OR      VAL
000BEF ED 39 9D    0003M1         OUT0    (REG), A
000BF2 C9          2479   			RET
000BF3             2480   
000BF3             2481   
000BF3             2482   ; Interrupt, Active High
000BF3             2483   ;
000BF3             2484   GPIOB_M7:		SET_GPIO PB_DR,   B
000BF3 ED 38 9A    0001M1         IN0     A, (REG)
000BF6 B0          0002M1         OR      VAL
000BF7 ED 39 9A    0003M1         OUT0    (REG), A
000BFA             2485   			RES_GPIO PB_DDR,  B
000BFA C5          0001M1         PUSH    BC
000BFB 78          0002M1         LD      A, VAL
000BFC 2F          0003M1         CPL
000BFD 4F          0004M1         LD      C, A
000BFE ED 38 9B    0005M1         IN0     A, (REG)
000C01 A1          0006M1         AND     C
000C02 ED 39 9B    0007M1         OUT0    (REG), A
000C05 C1          0008M1         POP     BC
000C06             2486   			SET_GPIO PB_ALT1, B
000C06 ED 38 9C    0001M1         IN0     A, (REG)
000C09 B0          0002M1         OR      VAL
000C0A ED 39 9C    0003M1         OUT0    (REG), A
000C0D             2487   			SET_GPIO PB_ALT2, B
000C0D ED 38 9D    0001M1         IN0     A, (REG)
000C10 B0          0002M1         OR      VAL
000C11 ED 39 9D    0003M1         OUT0    (REG), A
000C14 C9          2488   			RET
000C15             2489   
000C15             2490   
000C15             2491   ; Interrupt, Falling Edge
000C15             2492   ;
000C15             2493   GPIOB_M8:		RES_GPIO PB_DR,   B
000C15 C5          0001M1         PUSH    BC
000C16 78          0002M1         LD      A, VAL
000C17 2F          0003M1         CPL
000C18 4F          0004M1         LD      C, A
000C19 ED 38 9A    0005M1         IN0     A, (REG)
000C1C A1          0006M1         AND     C
000C1D ED 39 9A    0007M1         OUT0    (REG), A
000C20 C1          0008M1         POP     BC
000C21             2494   			SET_GPIO PB_DDR,  B
000C21 ED 38 9B    0001M1         IN0     A, (REG)
000C24 B0          0002M1         OR      VAL
000C25 ED 39 9B    0003M1         OUT0    (REG), A
000C28             2495   			SET_GPIO PB_ALT1, B
000C28 ED 38 9C    0001M1         IN0     A, (REG)
000C2B B0          0002M1         OR      VAL
000C2C ED 39 9C    0003M1         OUT0    (REG), A
000C2F             2496   			SET_GPIO PB_ALT2, B
000C2F ED 38 9D    0001M1         IN0     A, (REG)
000C32 B0          0002M1         OR      VAL
000C33 ED 39 9D    0003M1         OUT0    (REG), A
000C36 C9          2497   			RET
000C37             2498   
000C37             2499   ; Interrupt, Rising Edge
000C37             2500   ;
000C37             2501   GPIOB_M9:		SET_GPIO PB_DR,   B
000C37 ED 38 9A    0001M1         IN0     A, (REG)
000C3A B0          0002M1         OR      VAL
000C3B ED 39 9A    0003M1         OUT0    (REG), A
000C3E             2502   			SET_GPIO PB_DDR,  B
000C3E ED 38 9B    0001M1         IN0     A, (REG)
000C41 B0          0002M1         OR      VAL
000C42 ED 39 9B    0003M1         OUT0    (REG), A
000C45             2503   			SET_GPIO PB_ALT1, B
000C45 ED 38 9C    0001M1         IN0     A, (REG)
000C48 B0          0002M1         OR      VAL
000C49 ED 39 9C    0003M1         OUT0    (REG), A
000C4C             2504   			SET_GPIO PB_ALT2, B
000C4C ED 38 9D    0001M1         IN0     A, (REG)
000C4F B0          0002M1         OR      VAL
000C50 ED 39 9D    0003M1         OUT0    (REG), A
000C53 C9          2505   			RET
000C54             2506   ; --- End agon_gpio.asm ---
000C54             2507   
000C54             2508   ; --- Begin agon_graphics.asm ---
000C54             2509   ;
000C54             2510   ; Title:	BBC Basic for AGON - Graphics stuff
000C54             2511   ; Author:	Dean Belfield
000C54             2512   ; Created:	04/12/2024
000C54             2513   ; Last Updated:	11/12/2024
000C54             2514   ;
000C54             2515   ; Modinfo:
000C54             2516   ; 11/12/2024:	Modified POINT_ to work with OSWORD
000C54             2517   
000C54             2518   			.ASSUME	ADL = 0
000C54             2519   ;	.ORG 0x0000
000C54             2520   
000C54             2521   			; INCLUDE	"equs.inc"
000C54             2522   			; INCLUDE "macros.inc"
000C54             2523   			; INCLUDE "mos_api.inc"	; In MOS/src
000C54             2524   
000C54             2525   ;			SEGMENT CODE
000C54             2526   
000C54             2527   ;			XDEF	MODE_
000C54             2528   ;			XDEF	COLOUR_
000C54             2529   ;			XDEF	POINT_
000C54             2530   ;			XDEF	GETSCHR
000C54             2531   ;			XDEF	GETSCHR_1
000C54             2532   
000C54             2533   ;			XREF	ACCS
000C54             2534   ;			XREF	OSWRCH
000C54             2535   ;			XREF	ASC_TO_NUMBER
000C54             2536   ;			XREF	EXTERR
000C54             2537   ;			XREF	EXPRI
000C54             2538   ;			XREF	COMMA
000C54             2539   ;			XREF	XEQ
000C54             2540   ;			XREF	NXT
000C54             2541   ;			XREF	BRAKET
000C54             2542   ;			XREF	CRTONULL
000C54             2543   ;			XREF	NULLTOCR
000C54             2544   ;			XREF	CRLF
000C54             2545   ;			XREF	EXPR_W2
000C54             2546   ;			XREF	INKEY1
000C54             2547   
000C54             2548   ; MODE n: Set video mode
000C54             2549   ;
000C54 DD E5       2550   MODE_:			PUSH	IX			; Get the system vars in IX
000C56             2551   			MOSCALL	mos_sysvars		; Reset the semaphore
000C56 3E 08       0001M1 			LD	A, function
000C58 49 CF       0002M1 			RST.LIS	08h
000C5A 5B DD CB 04 2552   			RES.LIL	4, (IX+sysvar_vpd_pflags)
       A6          
000C5F CD 33 18    2553   			CALL    EXPRI
000C62 D9          2554   			EXX
000C63             2555   			VDU	16H			; Mode change
000C63 3E 16       0001M1         LD      A, VAL
000C65 CD 95 11    0002M1         CALL    OSWRCH
000C68             2556   			VDU	L
000C68 7D          0001M1         LD      A, VAL
000C69 CD 95 11    0002M1         CALL    OSWRCH
000C6C             2557   			MOSCALL	mos_sysvars
000C6C 3E 08       0001M1 			LD	A, function
000C6E 49 CF       0002M1 			RST.LIS	08h
000C70 5B DD CB 04 2558   @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
       66          
000C75 28 F9       2559   			JR	Z, @B			; Wait for the result
000C77 DD E1       2560   			POP	IX
000C79 C3 99 24    2561   			JP	XEQ
000C7C             2562   
000C7C             2563   ; GET(x,y): Get the ASCII code of a character on screen
000C7C             2564   ;
000C7C FD 23       2565   GETSCHR:		INC	IY
000C7E CD 33 18    2566   			CALL    EXPRI      		; Get X coordinate
000C81 D9          2567   			EXX
000C82 E5          2568   			PUSH	HL			; Stack X
000C83 CD A2 20    2569   			CALL	COMMA
000C86 CD 33 18    2570   			CALL	EXPRI			; Get Y coordinate
000C89 D9          2571   			EXX
000C8A CD AE 20    2572   			CALL	BRAKET			; Closing bracket
000C8D D1          2573   			POP	DE			; Pop X back into DE
000C8E CD 9A 0C    2574   			CALL	GETSCHR_1
000C91             2575   ;			JP	INKEY1
000C91 11 00 52    2576   	        	LD	DE,ACCS
000C94 12          2577   	                LD	(DE),A
000C95 3E 80       2578   	                LD	A,80H
000C97 D0          2579           	        RET	NC
000C98 1C          2580   	                INC	E
000C99 C9          2581                   	RET
000C9A             2582   ;
000C9A             2583   ; Fetch a character from the screen
000C9A             2584   ; - DE: X coordinate
000C9A             2585   ; - HL: Y coordinate
000C9A             2586   ; Returns
000C9A             2587   ; - A: The character or FFh if no match
000C9A             2588   ; - F: C if match, otherwise NC
000C9A             2589   ;
000C9A DD E5       2590   GETSCHR_1:		PUSH	IX			; Get the system vars in IX
000C9C             2591   			MOSCALL	mos_sysvars		; Reset the semaphore
000C9C 3E 08       0001M1 			LD	A, function
000C9E 49 CF       0002M1 			RST.LIS	08h
000CA0 5B DD CB 04 2592   			RES.LIL	1, (IX+sysvar_vpd_pflags)
       8E          
000CA5             2593   			VDU	23
000CA5 3E 17       0001M1         LD      A, VAL
000CA7 CD 95 11    0002M1         CALL    OSWRCH
000CAA             2594   			VDU	0
000CAA 3E 00       0001M1         LD      A, VAL
000CAC CD 95 11    0002M1         CALL    OSWRCH
000CAF             2595   			VDU	vdp_scrchar
000CAF 3E 83       0001M1         LD      A, VAL
000CB1 CD 95 11    0002M1         CALL    OSWRCH
000CB4             2596   			VDU	E
000CB4 7B          0001M1         LD      A, VAL
000CB5 CD 95 11    0002M1         CALL    OSWRCH
000CB8             2597   			VDU	D
000CB8 7A          0001M1         LD      A, VAL
000CB9 CD 95 11    0002M1         CALL    OSWRCH
000CBC             2598   			VDU	L
000CBC 7D          0001M1         LD      A, VAL
000CBD CD 95 11    0002M1         CALL    OSWRCH
000CC0             2599   			VDU	H
000CC0 7C          0001M1         LD      A, VAL
000CC1 CD 95 11    0002M1         CALL    OSWRCH
000CC4 5B DD CB 04 2600   @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
       4E          
000CC9 28 F9       2601   			JR	Z, @B			; Wait for the result
000CCB 5B DD 7E 09 2602   			LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
000CCF B7          2603   			OR	A			; Check for 00h
000CD0 37          2604   			SCF				; C = character map
000CD1 20 01       2605   			JR	NZ, @F			; We have a character, so skip next bit
000CD3 AF          2606   			XOR	A			; Clear carry
000CD4 DD E1       2607   @@:			POP	IX
000CD6 C9          2608   			RET
000CD7             2609   
000CD7             2610   ; POINT(x,y): Get the pixel colour of a point on screen
000CD7             2611   ; Parameters:
000CD7             2612   ; - DE: X-coordinate
000CD7             2613   ; - HL: Y-coordinate
000CD7             2614   ; Returns:
000CD7             2615   ; -  A: Pixel colour
000CD7             2616   ;
000CD7 DD E5       2617   POINT_:			PUSH	IX			; Get the system vars in IX
000CD9             2618   			MOSCALL	mos_sysvars		; Reset the semaphore
000CD9 3E 08       0001M1 			LD	A, function
000CDB 49 CF       0002M1 			RST.LIS	08h
000CDD 5B DD CB 04 2619   			RES.LIL	2, (IX+sysvar_vpd_pflags)
       96          
000CE2             2620   			VDU	23
000CE2 3E 17       0001M1         LD      A, VAL
000CE4 CD 95 11    0002M1         CALL    OSWRCH
000CE7             2621   			VDU	0
000CE7 3E 00       0001M1         LD      A, VAL
000CE9 CD 95 11    0002M1         CALL    OSWRCH
000CEC             2622   			VDU	vdp_scrpixel
000CEC 3E 84       0001M1         LD      A, VAL
000CEE CD 95 11    0002M1         CALL    OSWRCH
000CF1             2623   			VDU	E
000CF1 7B          0001M1         LD      A, VAL
000CF2 CD 95 11    0002M1         CALL    OSWRCH
000CF5             2624   			VDU	D
000CF5 7A          0001M1         LD      A, VAL
000CF6 CD 95 11    0002M1         CALL    OSWRCH
000CF9             2625   			VDU	L
000CF9 7D          0001M1         LD      A, VAL
000CFA CD 95 11    0002M1         CALL    OSWRCH
000CFD             2626   			VDU	H
000CFD 7C          0001M1         LD      A, VAL
000CFE CD 95 11    0002M1         CALL    OSWRCH
000D01 5B DD CB 04 2627   @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
       56          
000D06 28 F9       2628   			JR	Z, @B			; Wait for the result
000D08             2629   ;
000D08             2630   ; Return the data as a 1 byte index
000D08             2631   ;
000D08 5B DD 7E 16 2632   			LD.LIL	A, (IX+sysvar_scrpixelIndex)
000D0C DD E1       2633   			POP	IX
000D0E C9          2634   			RET
000D0F             2635   
000D0F             2636   ; COLOUR colour
000D0F             2637   ; COLOUR L,P
000D0F             2638   ; COLOUR L,R,G,B
000D0F             2639   ;
000D0F CD 33 18    2640   COLOUR_:		CALL	EXPRI			; The colour / mode
000D12 D9          2641   			EXX
000D13 7D          2642   			LD	A, L
000D14 32 00 52    2643   			LD	(VDU_BUFFER+0), A	; Store first parameter
000D17 CD 0B 45    2644   			CALL	NXT			; Are there any more parameters?
000D1A FE 2C       2645   			CP	','
000D1C 28 0E       2646   			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
000D1E             2647   ;
000D1E             2648   			VDU	11h			; Just set the colour
000D1E 3E 11       0001M1         LD      A, VAL
000D20 CD 95 11    0002M1         CALL    OSWRCH
000D23             2649   			VDU	(VDU_BUFFER+0)
000D23 3A 00 52    0001M1         LD      A, VAL
000D26 CD 95 11    0002M1         CALL    OSWRCH
000D29 C3 99 24    2650   			JP	XEQ
000D2C             2651   ;
000D2C CD A2 20    2652   COLOUR_1:		CALL	COMMA
000D2F CD 33 18    2653   			CALL	EXPRI			; Parse R (OR P)
000D32 D9          2654   			EXX
000D33 7D          2655   			LD	A, L
000D34 32 01 52    2656   			LD	(VDU_BUFFER+1), A
000D37 CD 0B 45    2657   			CALL	NXT			; Are there any more parameters?
000D3A FE 2C       2658   			CP	','
000D3C 28 23       2659   			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
000D3E             2660   ;
000D3E             2661   			VDU	13h			; VDU:COLOUR
000D3E 3E 13       0001M1         LD      A, VAL
000D40 CD 95 11    0002M1         CALL    OSWRCH
000D43             2662   			VDU	(VDU_BUFFER+0)		; Logical Colour
000D43 3A 00 52    0001M1         LD      A, VAL
000D46 CD 95 11    0002M1         CALL    OSWRCH
000D49             2663   			VDU	(VDU_BUFFER+1)		; Palette Colour
000D49 3A 01 52    0001M1         LD      A, VAL
000D4C CD 95 11    0002M1         CALL    OSWRCH
000D4F             2664   			VDU	0			; RGB set to 0
000D4F 3E 00       0001M1         LD      A, VAL
000D51 CD 95 11    0002M1         CALL    OSWRCH
000D54             2665   			VDU	0
000D54 3E 00       0001M1         LD      A, VAL
000D56 CD 95 11    0002M1         CALL    OSWRCH
000D59             2666   			VDU	0
000D59 3E 00       0001M1         LD      A, VAL
000D5B CD 95 11    0002M1         CALL    OSWRCH
000D5E C3 99 24    2667   			JP	XEQ
000D61             2668   ;
000D61 CD A2 20    2669   COLOUR_2:		CALL	COMMA
000D64 CD 33 18    2670   			CALL	EXPRI			; Parse G
000D67 D9          2671   			EXX
000D68 7D          2672   			LD	A, L
000D69 32 02 52    2673   			LD	(VDU_BUFFER+2), A
000D6C CD A2 20    2674   			CALL	COMMA
000D6F CD 33 18    2675   			CALL	EXPRI			; Parse B
000D72 D9          2676   			EXX
000D73 7D          2677   			LD	A, L
000D74 32 03 52    2678   			LD	(VDU_BUFFER+3), A
000D77             2679   			VDU	13h			; VDU:COLOUR
000D77 3E 13       0001M1         LD      A, VAL
000D79 CD 95 11    0002M1         CALL    OSWRCH
000D7C             2680   			VDU	(VDU_BUFFER+0)		; Logical Colour
000D7C 3A 00 52    0001M1         LD      A, VAL
000D7F CD 95 11    0002M1         CALL    OSWRCH
000D82             2681   			VDU	FFh			; Physical Colour (-1 for RGB mode)
000D82 3E FF       0001M1         LD      A, VAL
000D84 CD 95 11    0002M1         CALL    OSWRCH
000D87             2682   			VDU	(VDU_BUFFER+1)		; R
000D87 3A 01 52    0001M1         LD      A, VAL
000D8A CD 95 11    0002M1         CALL    OSWRCH
000D8D             2683   			VDU	(VDU_BUFFER+2)		; G
000D8D 3A 02 52    0001M1         LD      A, VAL
000D90 CD 95 11    0002M1         CALL    OSWRCH
000D93             2684   			VDU	(VDU_BUFFER+3)		; B
000D93 3A 03 52    0001M1         LD      A, VAL
000D96 CD 95 11    0002M1         CALL    OSWRCH
000D99 C3 99 24    2685   			JP	XEQ
000D9C             2686   ; --- End agon_graphics.asm ---
000D9C             2687   
000D9C             2688   ; --- Begin agon_interrupt.asm ---
000D9C             2689   ;
000D9C             2690   ; Title:	BBC Basic for AGON - Interrupts
000D9C             2691   ; Author:	Dean Belfield
000D9C             2692   ; Created:	04/12/2024
000D9C             2693   ; Last Updated:	04/12/2024
000D9C             2694   ;
000D9C             2695   ; Modinfo:
000D9C             2696   
000D9C             2697   			.ASSUME	ADL = 0
000D9C             2698   ;	.ORG 0x0000
000D9C             2699   
000D9C             2700   			; INCLUDE	"macros.inc"
000D9C             2701   			; INCLUDE	"equs.inc"
000D9C             2702   			; INCLUDE "mos_api.inc"	; In MOS/src
000D9C             2703   
000D9C             2704   ;			SEGMENT CODE
000D9C             2705   
000D9C             2706   ;			XDEF	VBLANK_INIT
000D9C             2707   ;			XDEF	VBLANK_STOP
000D9C             2708   ;			XDEF	VBLANK_HANDLER
000D9C             2709   
000D9C             2710   ;			XREF	ESCSET
000D9C             2711   ;			XREF	KEYDOWN		; In ram.asm
000D9C             2712   ;			XREF	KEYASCII 	; In ram.asm
000D9C             2713   ;			XREF	KEYCOUNT	; In ram.asm
000D9C             2714   
000D9C             2715   ; Hook into the MOS VBLANK interrupt
000D9C             2716   ;
000D9C F3          2717   VBLANK_INIT:		DI
000D9D             2718   
000D9D ED 6E       2719   			LD		A, MB 				; Get a 24-bit pointer to
000D9F 21 1A 0E    2720   			LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
000DA2 CD DC 0D    2721   			CALL		SET_AHL16 			; address is a 16-bit pointer in BBC BASIC's segment
000DA5             2722   
000DA5 1E 32       2723   			LD		E, 32h				; Set up the VBlank Interrupt Vector
000DA7             2724   			MOSCALL		mos_setintvector
000DA7 3E 14       0001M1 			LD	A, function
000DA9 49 CF       0002M1 			RST.LIS	08h
000DAB             2725   
000DAB 5B E5       2726   			PUSH.LIL	HL				; HLU: Pointer to the MOS interrupt vector
000DAD 5B D1       2727   			POP.LIL		DE 				; DEU: Pointer to the MOS interrupt vector
000DAF             2728   
000DAF 21 32 0E    2729   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DB2 ED 6E       2730   			LD		A, MB	 			; Get the segment BBC BASIC is running in
000DB4 32 23 0E    2731   			LD		(VBLANK_HANDLER_MB + 1), A 	; Store in the interrupt handler
000DB7 CD DC 0D    2732   			CALL		SET_AHL16 			; Convert pointer to an absolute 24-bit address
000DBA 5B ED 1F    2733   			LD.LIL		(HL), DE			; Self-modify the code
000DBD FB          2734   			EI
000DBE C9          2735   			RET
000DBF             2736   
000DBF             2737   ; Unhook the custom VBLANK interrupt
000DBF             2738   ;
000DBF F3          2739   VBLANK_STOP:		DI
000DC0 21 32 0E    2740   			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DC3 3A 23 0E    2741   			LD		A, (VBLANK_HANDLER_MB + 1)	; The stored MB of the segment BBC BASIC is running in
000DC6 F5          2742   			PUSH		AF 				; Stack the MB for later
000DC7 CD DC 0D    2743   			CALL		SET_AHL16			; Convert pointer to an absolute 24-bit address
000DCA 5B ED 17    2744   			LD.LIL		DE, (HL)			; DEU: Address of MOS interrupt vector
000DCD 5B D5       2745   			PUSH.LIL	DE				; Transfer to HL
000DCF 5B E1       2746   			POP.LIL		HL
000DD1 1E 32       2747   			LD		E, 32h
000DD3             2748   			MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
000DD3 3E 14       0001M1 			LD	A, function
000DD5 49 CF       0002M1 			RST.LIS	08h
000DD7 F1          2749   			POP		AF 				; Restore MB to this segment
000DD8 ED 6D       2750   			LD		MB, A
000DDA FB          2751   			EI
000DDB C9          2752   			RET
000DDC             2753   
000DDC             2754   ; Set the MSB of HL (U) to A
000DDC             2755   ;
000DDC 5B E5       2756   SET_AHL16:		PUSH.LIL	HL
000DDE 5B 21 02 00 2757   			LD.LIL		HL, 2
       00          
000DE3 5B 39       2758   			ADD.LIL		HL, SP
000DE5 5B 77       2759   			LD.LIL		(HL), A
000DE7 5B E1       2760   			POP.LIL		HL
000DE9 C9          2761   			RET
000DEA             2762   
000DEA             2763   ; A safe LIS call to ESCSET
000DEA             2764   ;
000DEA             2765   DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
000DEA 3E 08       0001M1 			LD	A, function
000DEC 49 CF       0002M1 			RST.LIS	08h
000DEE 21 16 51    2766   			LD		HL, KEYCOUNT 			; Check whether the keycount has changed
000DF1 5B DD 7E 19 2767   			LD.LIL		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
000DF5 BE          2768   			CP 		(HL)				; with our local copy
000DF6 20 09       2769   			JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
000DF8             2770   ;
000DF8 AF          2771   DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
000DF9 32 15 51    2772   			LD		(KEYASCII), A
000DFC 32 14 51    2773   			LD		(KEYDOWN), A
000DFF 5B C9       2774   			RET.LIL 					; And return
000E01             2775   ;
000E01 77          2776   DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
000E02 5B DD 7E 18 2777   			LD.LIL		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
000E06 B7          2778   			OR		A
000E07 28 EF       2779   			JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
000E09             2780   ;
000E09 32 14 51    2781   			LD		(KEYDOWN), A 			; Store the keydown value
000E0C 5B DD 7E 05 2782   			LD.LIL		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
000E10 32 15 51    2783   			LD		(KEYASCII), A 			; Store locally
000E13 FE 1B       2784   			CP		1Bh				; Is it escape?
000E15 CC FA 11    2785   			CALL		Z, ESCSET			; Yes, so set the escape flags
000E18 49 C9       2786   			RET.LIS						; Return to the interrupt handler
000E1A             2787   
000E1A             2788   ;
000E1A             2789   ; Interrupts in mixed mode always run in ADL mode
000E1A             2790   ;
000E1A             2791   			.ASSUME	ADL = 1
000E1A             2792   
000E1A F3          2793   VBLANK_HANDLER:		DI
000E1B F5          2794   			PUSH		AF
000E1C E5          2795   			PUSH		HL
000E1D DD E5       2796   			PUSH		IX
000E1F ED 6E       2797   			LD		A, MB
000E21 F5          2798   			PUSH		AF
000E22 3E 00       2799   VBLANK_HANDLER_MB:	LD		A, 0				; This is self-modified by VBLANK_INIT
000E24 ED 6D       2800   			LD		MB, A
000E26 49 CD EA 0D 2801   			CALL.LIS	DO_KEYBOARD
000E2A F1          2802   			POP		AF
000E2B ED 6D       2803   			LD		MB, A
000E2D DD E1       2804   			POP		IX
000E2F E1          2805   			POP		HL
000E30 F1          2806   			POP		AF
000E31             2807   ;
000E31             2808   ; Finally jump to the MOS interrupt
000E31             2809   ;
000E31 C3 00 00 00 2810   VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
000E35             2811   ; --- End agon_interrupt.asm ---
000E35             2812   
000E35             2813   ; --- Begin agon_misc.asm ---
000E35             2814   ;
000E35             2815   ; Title:	BBC Basic for AGON - Miscellaneous helper functions
000E35             2816   ; Author:	Dean Belfield
000E35             2817   ; Created:	04/12/2024
000E35             2818   ; Last Updated:	04/12/2024
000E35             2819   ;
000E35             2820   ; Modinfo:
000E35             2821   
000E35             2822   			; INCLUDE	"equs.inc"
000E35             2823   			; INCLUDE	"macros.inc"
000E35             2824   
000E35             2825   			.ASSUME	ADL = 0
000E35             2826   ;	.ORG 0x0000
000E35             2827   
000E35             2828   ;			SEGMENT CODE
000E35             2829   
000E35             2830   ;			XDEF	ASC_TO_NUMBER
000E35             2831   ;			XDEF	SWITCH_A
000E35             2832   ;			XDEF	NULLTOCR
000E35             2833   ;			XDEF	CRTONULL
000E35             2834   ;			XDEF	CSTR_FNAME
000E35             2835   ;			XDEF	CSTR_LINE
000E35             2836   ;			XDEF	CSTR_FINDCH
000E35             2837   ;			XDEF	CSTR_ENDSWITH
000E35             2838   ;			XDEF	CSTR_CAT
000E35             2839   
000E35             2840   ;			XREF	OSWRCH
000E35             2841   ;			XREF	KEYWDS
000E35             2842   ;			XREF	KEYWDL
000E35             2843   
000E35             2844   ; Read a number and convert to binary
000E35             2845   ; If prefixed with &, will read as hex, otherwise decimal
000E35             2846   ;   Inputs: HL: Pointer in string buffer
000E35             2847   ;  Outputs: HL: Updated text pointer
000E35             2848   ;           DE: Value
000E35             2849   ;            A: Terminator (spaces skipped)
000E35             2850   ; Destroys: A,D,E,H,L,F
000E35             2851   ;
000E35 C5          2852   ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
000E36 11 00 00    2853   			LD	DE, 0			; Initialise DE
000E39 CD 79 0E    2854   			CALL	SKIPSPmisc			; Skip whitespace
000E3C 7E          2855   			LD	A, (HL)			; Read first character
000E3D FE 26       2856   			CP	'&'			; Is it prefixed with '&' (HEX number)?
000E3F 20 1E       2857   			JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
000E41 23          2858   			INC	HL			; Otherwise fall through to ASC_TO_HEX
000E42             2859   ;
000E42 7E          2860   ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
000E43 CD 87 0E    2861   			CALL    UPPRCmisc			; Convert to uppercase
000E46 D6 30       2862   			SUB	'0'			; Normalise to 0
000E48 38 2E       2863   			JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E4A FE 0A       2864   			CP 	10			; Check if >= 10
000E4C 38 06       2865   			JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
000E4E D6 07       2866   			SUB 	7			; Adjust ASCII A-F to nibble
000E50 FE 10       2867   			CP 	16			; Check for > F
000E52 30 24       2868   			JR 	NC, ASC_TO_NUMBER4	; Return if out of range
000E54 EB          2869   ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
000E55 29          2870   			ADD	HL, HL
000E56 29          2871   			ADD	HL, HL
000E57 29          2872   			ADD	HL, HL
000E58 29          2873   			ADD	HL, HL
000E59 EB          2874   			EX	DE, HL
000E5A B3          2875   			OR      E			; OR the new digit in to the least significant nibble
000E5B 5F          2876   			LD      E, A
000E5C 23          2877   			INC     HL			; Onto the next character
000E5D 18 E3       2878   			JR      ASC_TO_NUMBER1		; And loop
000E5F             2879   ;
000E5F 7E          2880   ASC_TO_NUMBER3:		LD	A, (HL)
000E60 D6 30       2881   			SUB	'0'			; Normalise to 0
000E62 38 14       2882   			JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E64 FE 0A       2883   			CP	10			; Check if >= 10
000E66 30 10       2884   			JR	NC, ASC_TO_NUMBER4	; Return if >= 10
000E68 EB          2885   			EX 	DE, HL 			; Stick DE in HL
000E69 44          2886   			LD	B, H 			; And copy HL into BC
000E6A 4D          2887   			LD	C, L
000E6B 29          2888   			ADD	HL, HL 			; x 2
000E6C 29          2889   			ADD	HL, HL 			; x 4
000E6D 09          2890   			ADD	HL, BC 			; x 5
000E6E 29          2891   			ADD	HL, HL 			; x 10
000E6F EB          2892   			EX	DE, HL
000E70             2893   			ADD8U_DE 			; Add A to DE (macro)
000E70 83          0001M1         ADD     A, E
000E71 5F          0002M1         LD      E, A
000E72 8A          0003M1         ADC     A, D
000E73 93          0004M1         SUB     E
000E74 57          0005M1         LD      D, A
000E75 23          2894   			INC	HL
000E76 18 E7       2895   			JR	ASC_TO_NUMBER3
000E78 C1          2896   ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSP here
000E79             2897   
000E79             2898   ; Skip a space
000E79             2899   ; HL: Pointer in string buffer
000E79             2900   ;
000E79 7E          2901   SKIPSPmisc:			LD      A, (HL)
000E7A FE 20       2902   			CP      ' '
000E7C C0          2903   			RET     NZ
000E7D 23          2904   			INC     HL
000E7E 18 F9       2905   			JR      SKIPSPmisc
000E80             2906   
000E80             2907   ; Skip a string
000E80             2908   ; HL: Pointer in string buffer
000E80             2909   ;
000E80 7E          2910   SKIPNOTSP:		LD	A, (HL)
000E81 FE 20       2911   			CP	' '
000E83 C8          2912   			RET	Z
000E84 23          2913   			INC	HL
000E85 18 F9       2914   			JR	SKIPNOTSP
000E87             2915   
000E87             2916   ; Convert a character to upper case
000E87             2917   ;  A: Character to convert
000E87             2918   ;
000E87 E6 7F       2919   UPPRCmisc:  		AND     7FH
000E89 FE 60       2920   			CP      '`'
000E8B D8          2921   			RET     C
000E8C E6 5F       2922   			AND     5FH			; Convert to upper case
000E8E C9          2923   			RET
000E8F             2924   
000E8F             2925   ; Switch on A - lookup table immediately after call
000E8F             2926   ;  A: Index into lookup table
000E8F             2927   ;
000E8F E3          2928   SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
000E90 87          2929   			ADD	A, A			; Multiply A by two
000E91             2930   			ADD8U_HL 			; Add to HL (macro)
000E91 85          0001M1         ADD     A, L
000E92 6F          0002M1         LD      L, A
000E93 8C          0003M1         ADC     A, H
000E94 95          0004M1         SUB     L
000E95 67          0005M1         LD      H, A
000E96 7E          2931   			LD	A, (HL)			; follow the call. Fetch an address from the
000E97 23          2932   			INC	HL 			; table.
000E98 66          2933   			LD	H, (HL)
000E99 6F          2934   			LD	L, A
000E9A E3          2935   			EX	(SP), HL		; Swap this new address back, restores HL
000E9B C9          2936   			RET				; Return program control to this new address
000E9C             2937   
000E9C             2938   ; Convert the buffer to a null terminated string and back
000E9C             2939   ; HL: Buffer address
000E9C             2940   ;
000E9C C5          2941   NULLTOCR:		PUSH 	BC
000E9D 06 00       2942   			LD	B, 0
000E9F 0E 0D       2943   			LD	C, CR
000EA1 18 05       2944   			JR	CRTONULL0
000EA3             2945   ;
000EA3 C5          2946   CRTONULL:		PUSH	BC
000EA4 06 0D       2947   			LD	B, CR
000EA6 0E 00       2948   			LD	C, 0
000EA8             2949   ;
000EA8 E5          2950   CRTONULL0:		PUSH	HL
000EA9 7E          2951   CRTONULL1:		LD	A, (HL)
000EAA B8          2952   			CP 	B
000EAB 28 03       2953   			JR	Z, CRTONULL2
000EAD 23          2954   			INC	HL
000EAE 18 F9       2955   			JR	CRTONULL1
000EB0 71          2956   CRTONULL2:		LD	(HL), C
000EB1 E1          2957   			POP 	HL
000EB2 C1          2958   			POP	BC
000EB3 C9          2959   			RET
000EB4             2960   
000EB4             2961   ; Copy a filename to DE and zero terminate it
000EB4             2962   ; HL: Source
000EB4             2963   ; DE: Destination (ACCS)
000EB4             2964   ;
000EB4 7E          2965   CSTR_FNAME:		LD	A, (HL)			; Get source
000EB5 FE 20       2966   			CP	32			; Is it space
000EB7 28 09       2967   			JR	Z, @F
000EB9 FE 0D       2968   			CP	CR			; Or is it CR
000EBB 28 05       2969   			JR	Z, @F
000EBD 12          2970   			LD	(DE), A			; No, so store
000EBE 23          2971   			INC	HL			; Increment
000EBF 13          2972   			INC	DE
000EC0 18 F2       2973   			JR	CSTR_FNAME		; And loop
000EC2 AF          2974   @@:			XOR	A			; Zero terminate the target string
000EC3 12          2975   			LD	(DE), A
000EC4 13          2976   			INC	DE			; And point to next free address
000EC5 C9          2977   			RET
000EC6             2978   
000EC6             2979   ; Copy a CR terminated line to DE and zero terminate it
000EC6             2980   ; HL: Source
000EC6             2981   ; DE: Destination (ACCS)
000EC6             2982   ;
000EC6 7E          2983   CSTR_LINE:		LD	A, (HL)			; Get source
000EC7 FE 0D       2984   			CP	CR			; Is it CR
000EC9 28 05       2985   			JR	Z, @F
000ECB 12          2986   			LD	(DE), A			; No, so store
000ECC 23          2987   			INC	HL			; Increment
000ECD 13          2988   			INC	DE
000ECE 18 F6       2989   			JR	CSTR_LINE		; And loop
000ED0 AF          2990   @@:			XOR	A			; Zero terminate the target string
000ED1 12          2991   			LD	(DE), A
000ED2 13          2992   			INC	DE			; And point to next free address
000ED3 C9          2993   			RET
000ED4             2994   
000ED4             2995   ; Find the first occurrence of a character (case sensitive)
000ED4             2996   ; HL: Source
000ED4             2997   ;  C: Character to find
000ED4             2998   ; Returns:
000ED4             2999   ; HL: Pointer to character, or end of string marker
000ED4             3000   ;
000ED4 7E          3001   CSTR_FINDCH:		LD	A, (HL)			; Get source
000ED5 B9          3002   			CP	C			; Is it our character?
000ED6 C8          3003   			RET	Z			; Yes, so exit
000ED7 B7          3004   			OR	A			; Is it the end of string?
000ED8 C8          3005   			RET	Z			; Yes, so exit
000ED9 23          3006   			INC	HL
000EDA 18 F8       3007   			JR	CSTR_FINDCH
000EDC             3008   
000EDC             3009   ; Check whether a string ends with another string (case insensitive)
000EDC             3010   ; HL: Source
000EDC             3011   ; DE: The substring we want to test with
000EDC             3012   ; Returns:
000EDC             3013   ;  F: Z if HL ends with DE, otherwise NZ
000EDC             3014   ;
000EDC 7E          3015   CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
000EDD CD 87 0E    3016   			CALL	UPPRCmisc			; Convert to upper case
000EE0 4F          3017   			LD	C, A
000EE1 1A          3018   			LD	A, (DE)			; Get the substring byte
000EE2 B9          3019   			CP	C
000EE3 C0          3020   			RET	NZ			; Return NZ if at any point the strings don't match
000EE4 B1          3021   			OR	C			; Check whether both bytes are zero
000EE5 C8          3022   			RET	Z			; If so, return, as we have reached the end of both strings
000EE6 23          3023   			INC	HL
000EE7 13          3024   			INC	DE
000EE8 18 F2       3025   			JR	CSTR_ENDSWITH		; And loop
000EEA             3026   
000EEA             3027   ; Concatenate a string onto the end of another string
000EEA             3028   ; HL: Source
000EEA             3029   ; DE: Second string
000EEA             3030   ;
000EEA 7E          3031   CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
000EEB B7          3032   			OR	A
000EEC 28 03       3033   			JR	Z, CSTR_CAT_1
000EEE 23          3034   			INC	HL
000EEF 18 F9       3035   			JR	CSTR_CAT
000EF1             3036   ;
000EF1 1A          3037   CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
000EF2 77          3038   			LD	(HL), A
000EF3 B7          3039   			OR	A			; Check for end of string
000EF4 C8          3040   			RET	Z			; And return
000EF5 23          3041   			INC	HL
000EF6 13          3042   			INC	DE
000EF7 18 F8       3043   			JR	CSTR_CAT_1		; Loop until finished
000EF9             3044   ; --- End agon_misc.asm ---
000EF9             3045   
000EF9             3046   ; --- Begin agon_sound.asm ---
000EF9             3047   ;
000EF9             3048   ; Title:	BBC Basic for AGON - Audio stuff
000EF9             3049   ; Author:	Dean Belfield
000EF9             3050   ; Created:	04/12/2024
000EF9             3051   ; Last Updated:	11/12/2024
000EF9             3052   ;
000EF9             3053   ; Modinfo:
000EF9             3054   ; 11/12/2024:	Modified SOUND_ to work with OSWORD
000EF9             3055   
000EF9             3056   			.ASSUME	ADL = 0
000EF9             3057   ;	.ORG 0x0000
000EF9             3058   
000EF9             3059   			; INCLUDE	"equs.inc"
000EF9             3060   			; INCLUDE "macros.inc"
000EF9             3061   			; INCLUDE "mos_api.inc"	; In MOS/src
000EF9             3062   
000EF9             3063   ;			SEGMENT CODE
000EF9             3064   
000EF9             3065   ;			XDEF	SOUND_
000EF9             3066   
000EF9             3067   ;			XREF	OSWRCH
000EF9             3068   ;			XREF	VDU_BUFFER
000EF9             3069   ;			XREF	LTRAP
000EF9             3070   
000EF9             3071   ; SOUND channel,volume,pitch,duration
000EF9             3072   ; Parameters:
000EF9             3073   ; - HL: Pointer to data
000EF9             3074   ;   - 0,1: Channel
000EF9             3075   ;   - 2,3: Volume 0 (off) to 15 (full volume)
000EF9             3076   ;   - 4,5: Pitch 0 - 255
000EF9             3077   ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000EF9             3078   ;
000EF9 7E          3079   SOUND_:			LD	A, (HL)			; Channel
000EFA 32 00 52    3080   			LD	(VDU_BUFFER+0), A
000EFD AF          3081   			XOR	A			; Waveform
000EFE 32 01 52    3082   			LD	(VDU_BUFFER+1), A
000F01 23          3083   			INC	HL
000F02 23          3084   			INC	HL
000F03             3085   ;
000F03             3086   ; Calculate the volume
000F03             3087   ;
000F03 4E          3088   			LD	C, (HL)			; Volume
000F04 06 06       3089   			LD	B, 6			; C already contains the volume
000F06 ED 4C       3090   			MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
000F08 79          3091   			LD	A, C
000F09 32 02 52    3092   			LD	(VDU_BUFFER+2), A
000F0C 23          3093   			INC	HL
000F0D 23          3094   			INC	HL
000F0E             3095   ;
000F0E             3096   ; And the frequency
000F0E             3097   ;
000F0E E5          3098   			PUSH	HL
000F0F 6E          3099   			LD	L, (HL)
000F10 26 00       3100   			LD	H, 0
000F12 11 84 0F    3101   			LD	DE, SOUND_FREQ_LOOKUP
000F15 29          3102   			ADD	HL, HL
000F16 19          3103   			ADD	HL, DE
000F17 7E          3104   			LD	A, (HL)
000F18 32 03 52    3105   			LD	(VDU_BUFFER+3), A
000F1B 23          3106   			INC	HL
000F1C 7E          3107   			LD	A, (HL)
000F1D 32 04 52    3108   			LD	(VDU_BUFFER+4), A
000F20 E1          3109   			POP	HL
000F21 23          3110   			INC	HL
000F22 23          3111   			INC	HL
000F23             3112   ;
000F23             3113   ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
000F23             3114   ;
000F23 4E          3115   			LD	C, (HL)
000F24 06 32       3116   			LD	B, 50			; C contains the duration, so MLT by 50
000F26 ED 4C       3117   			MLT	BC
000F28 ED 43 05 52 3118   			LD	(VDU_BUFFER+5), BC
000F2C             3119   ;
000F2C DD E5       3120   			PUSH	IX			; Get the system vars in IX
000F2E             3121   			MOSCALL	mos_sysvars		; Reset the semaphore
000F2E 3E 08       0001M1 			LD	A, function
000F30 49 CF       0002M1 			RST.LIS	08h
000F32 5B DD CB 04 3122   SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
       9E          
000F37             3123   ;
000F37             3124   			VDU	23			; Send the sound command
000F37 3E 17       0001M1         LD      A, VAL
000F39 CD 95 11    0002M1         CALL    OSWRCH
000F3C             3125   			VDU	0
000F3C 3E 00       0001M1         LD      A, VAL
000F3E CD 95 11    0002M1         CALL    OSWRCH
000F41             3126   			VDU	vdp_audio
000F41 3E 85       0001M1         LD      A, VAL
000F43 CD 95 11    0002M1         CALL    OSWRCH
000F46             3127   			VDU	(VDU_BUFFER+0)		; 0: Channel
000F46 3A 00 52    0001M1         LD      A, VAL
000F49 CD 95 11    0002M1         CALL    OSWRCH
000F4C             3128   			VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
000F4C 3A 01 52    0001M1         LD      A, VAL
000F4F CD 95 11    0002M1         CALL    OSWRCH
000F52             3129   			VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
000F52 3A 02 52    0001M1         LD      A, VAL
000F55 CD 95 11    0002M1         CALL    OSWRCH
000F58             3130   			VDU	(VDU_BUFFER+3)		; 3: Frequency L
000F58 3A 03 52    0001M1         LD      A, VAL
000F5B CD 95 11    0002M1         CALL    OSWRCH
000F5E             3131   			VDU	(VDU_BUFFER+4)		; 4: Frequency H
000F5E 3A 04 52    0001M1         LD      A, VAL
000F61 CD 95 11    0002M1         CALL    OSWRCH
000F64             3132   			VDU	(VDU_BUFFER+5)		; 5: Duration L
000F64 3A 05 52    0001M1         LD      A, VAL
000F67 CD 95 11    0002M1         CALL    OSWRCH
000F6A             3133   			VDU	(VDU_BUFFER+6)		; 6: Duration H
000F6A 3A 06 52    0001M1         LD      A, VAL
000F6D CD 95 11    0002M1         CALL    OSWRCH
000F70             3134   ;
000F70             3135   ; Wait for acknowledgement
000F70             3136   ;
000F70 5B DD CB 04 3137   @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
       5E          
000F75 28 F9       3138   			JR	Z, @B			; Wait for the result
000F77 CD 1A 12    3139   			CALL	LTRAP			; Check for ESC
000F7A 5B DD 7E 0E 3140   			LD.LIL	A, (IX+sysvar_audioSuccess)
000F7E A7          3141   			AND	A			; Check if VDP has queued the note
000F7F 28 B1       3142   			JR	Z, SOUND0		; No, so loop back and send again
000F81             3143   ;
000F81 DD E1       3144   			POP	IX
000F83 C9          3145   			RET
000F84             3146   
000F84             3147   ; Frequency Lookup Table
000F84             3148   ; Set up to replicate the BBC Micro audio frequencies
000F84             3149   ;
000F84             3150   ; Split over 5 complete octaves, with 53 being middle C
000F84             3151   ; * C4: 262hz
000F84             3152   ; + A4: 440hz
000F84             3153   ;
000F84             3154   ;	2	3	4	5	6	7	8
000F84             3155   ;
000F84             3156   ; B	1	49	97	145	193	241
000F84             3157   ; A#	0	45	93	141	189	237
000F84             3158   ; A		41	89+	137	185	233
000F84             3159   ; G#		37	85	133	181	229
000F84             3160   ; G		33	81	129	177	225
000F84             3161   ; F#		29	77	125	173	221
000F84             3162   ; F		25	73	121	169	217
000F84             3163   ; E		21	69	117	165	213
000F84             3164   ; D#		17	65	113	161	209
000F84             3165   ; D		13	61	109	157	205	253
000F84             3166   ; C#		9	57	105	153	201	249
000F84             3167   ; C		5	53*	101	149	197	245
000F84             3168   ;
000F84 75 00 76 00 3169   SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
       78 00 7A 00 
       7B 00 83 00 
       85 00 87 00 
000F94 89 00 8B 00 3170   			DW	 137,  139,  141,  143,  145,  147,  149,  151
       8D 00 8F 00 
       91 00 93 00 
       95 00 97 00 
000FA4 99 00 9C 00 3171   			DW	 153,  156,  158,  160,  162,  165,  167,  170
       9E 00 A0 00 
       A2 00 A5 00 
       A7 00 AA 00 
000FB4 AC 00 AF 00 3172   			DW	 172,  175,  177,  180,  182,  185,  188,  190
       B1 00 B4 00 
       B6 00 B9 00 
       BC 00 BE 00 
000FC4 C1 00 C4 00 3173   			DW	 193,  196,  199,  202,  205,  208,  211,  214
       C7 00 CA 00 
       CD 00 D0 00 
       D3 00 D6 00 
000FD4 D9 00 DC 00 3174   			DW	 217,  220,  223,  226,  230,  233,  236,  240
       DF 00 E2 00 
       E6 00 E9 00 
       EC 00 F0 00 
000FE4 F3 00 F7 00 3175   			DW	 243,  247,  251,  254,  258,  262,  265,  269
       FB 00 FE 00 
       02 01 06 01 
       09 01 0D 01 
000FF4 11 01 15 01 3176   			DW	 273,  277,  281,  285,  289,  294,  298,  302
       19 01 1D 01 
       21 01 26 01 
       2A 01 2E 01 
001004 33 01 37 01 3177   			DW	 307,  311,  316,  320,  325,  330,  334,  339
       3C 01 40 01 
       45 01 4A 01 
       4E 01 53 01 
001014 58 01 5D 01 3178   			DW	 344,  349,  354,  359,  365,  370,  375,  381
       62 01 67 01 
       6D 01 72 01 
       77 01 7D 01 
001024 82 01 88 01 3179   			DW	 386,  392,  398,  403,  409,  415,  421,  427
       8E 01 93 01 
       99 01 9F 01 
       A5 01 AB 01 
001034 B2 01 B8 01 3180   			DW	 434,  440,  446,  453,  459,  466,  473,  480
       BE 01 C5 01 
       CB 01 D2 01 
       D9 01 E0 01 
001044 E7 01 EE 01 3181   			DW	 487,  494,  501,  508,  516,  523,  531,  539
       F5 01 FC 01 
       04 02 0B 02 
       13 02 1B 02 
001054 22 02 2A 02 3182   			DW	 546,  554,  562,  571,  579,  587,  596,  605
       32 02 3B 02 
       43 02 4B 02 
       54 02 5D 02 
001064 65 02 6E 02 3183   			DW	 613,  622,  631,  641,  650,  659,  669,  679
       77 02 81 02 
       8A 02 93 02 
       9D 02 A7 02 
001074 B1 02 BB 02 3184   			DW	 689,  699,  709,  719,  729,  740,  751,  762
       C5 02 CF 02 
       D9 02 E4 02 
       EF 02 FA 02 
001084 05 03 10 03 3185   			DW	 773,  784,  795,  807,  819,  831,  843,  855
       1B 03 27 03 
       33 03 3F 03 
       4B 03 57 03 
001094 63 03 70 03 3186   			DW	 867,  880,  893,  906,  919,  932,  946,  960
       7D 03 8A 03 
       97 03 A4 03 
       B2 03 C0 03 
0010A4 CE 03 DC 03 3187   			DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
       EA 03 F9 03 
       08 04 17 04 
       26 04 36 04 
0010B4 45 04 55 04 3188   			DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
       65 04 76 04 
       86 04 97 04 
       A8 04 BA 04 
0010C4 CB 04 DD 04 3189   			DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
       EF 04 02 05 
       14 05 27 05 
       3A 05 4E 05 
0010D4 62 05 76 05 3190   			DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
       8A 05 9F 05 
       B3 05 C9 05 
       DE 05 F4 05 
0010E4 0A 06 21 06 3191   			DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
       38 06 4F 06 
       66 06 7E 06 
       96 06 AF 06 
0010F4 C8 06 E1 06 3192   			DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
       FA 06 14 07 
       2F 07 4A 07 
       65 07 80 07 
001104 9C 07 B8 07 3193   			DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
       D5 07 F2 07 
       10 08 2D 08 
       4B 08 6A 08 
001114 8A 08 A9 08 3194   			DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
       CA 08 EA 08 
       0C 09 2D 09 
       4F 09 72 09 
001124 95 09 B9 09 3195   			DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
       DD 09 02 0A 
       27 0A 4D 0A 
       73 0A 9A 0A 
001134 C2 0A EA 0A 3196   			DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
       12 0B 3C 0B 
       66 0B 90 0B 
       BB 0B E7 0B 
001144 13 0C 40 0C 3197   			DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
       6E 0C 9C 0C 
       CB 0C FA 0C 
       2B 0D 5C 0D 
001154 8E 0D C0 0D 3198   			DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
       F3 0D 27 0E 
       5C 0E 91 0E 
       C8 0E FF 0E 
001164 36 0F 6F 0F 3199   			DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
       A9 0F E3 0F 
       1E 10 5A 10 
       97 10 D5 10 
001174 13 11 53 11 3200   			DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
       93 11 D5 11 
       17 12 5B 12 
       9F 12 E4 12 
001184             3201   ; --- End agon_sound.asm ---
001184             3202   
001184             3203   ; --- Begin agon_os.asm ---
001184             3204   ;
001184             3205   ; Title:	BBC Basic for AGON - MOS stuff
001184             3206   ; Author:	Dean Belfield
001184             3207   ; Created:	04/12/2024
001184             3208   ; Last Updated:	12/12/2024
001184             3209   ;
001184             3210   ; Modinfo:
001184             3211   ; 08/12/2024:	Added OSCLI and file I/O
001184             3212   ; 11/12/2024:	Added ESC key handling
001184             3213   ; 		Added OSWORD
001184             3214   ; 12/12/2024:	Added OSRDCH, OSBYTE_81 and fixed *EDIT
001184             3215   
001184             3216   			.ASSUME	ADL = 0
001184             3217   ;			.ORG 0x0000
001184             3218   
001184             3219   			; INCLUDE	"equs.inc"
001184             3220   			; INCLUDE "macros.inc"
001184             3221   			; INCLUDE "mos_api.inc"	; In MOS/src
001184             3222   
001184             3223   ;			SEGMENT CODE
001184             3224   
001184             3225   ;			XDEF	OSWORD
001184             3226   ;			XDEF	OSBYTE
001184             3227   ;			XDEF	OSINIT
001184             3228   ;			XDEF	OSOPEN
001184             3229   ;			XDEF	OSSHUT
001184             3230   ;			XDEF	OSLOAD
001184             3231   ;			XDEF	OSSAVE
001184             3232   ;			XDEF	OSLINE
001184             3233   ;			XDEF	OSSTAT
001184             3234   ;			XDEF	OSWRCH
001184             3235   ;			XDEF	OSRDCH
001184             3236   ;			XDEF	OSBGET
001184             3237   ;			XDEF	OSBPUT
001184             3238   ;			XDEF	OSCLI
001184             3239   ;			XDEF	PROMPT
001184             3240   ;			XDEF	GETPTR
001184             3241   ;			XDEF	PUTPTR
001184             3242   ;			XDEF	GETEXT
001184             3243   ;			XDEF	TRAP
001184             3244   ;			XDEF	LTRAP
001184             3245   ;			XDEF	BYE
001184             3246   ;			XDEF	RESET
001184             3247   ;			XDEF	ESCSET
001184             3248   
001184             3249   ;			XREF	EXTERR
001184             3250   ;			XREF	VBLANK_INIT
001184             3251   ;			XREF	VBLANK_STOP
001184             3252   ;			XREF	USER
001184             3253   ;			XREF	COUNT
001184             3254   ;			XREF	COUNT0
001184             3255   ;			XREF	COUNT1
001184             3256   ;			XREF	GETCSR
001184             3257   ;			XREF	GETSCHR_1
001184             3258   ;			XREF	NULLTOCR
001184             3259   ;			XREF	CRLF
001184             3260   ;			XREF	FLAGS
001184             3261   ;			XREF	OSWRCHPT
001184             3262   ;			XREF	OSWRCHCH
001184             3263   ;			XREF	OSWRCHFH
001184             3264   ;			XREF	KEYASCII
001184             3265   ;			XREF	KEYDOWN
001184             3266   ;			XREF	LISTON
001184             3267   ;			XREF	PAGE_
001184             3268   ;			XREF	CSTR_FNAME
001184             3269   ;			XREF	CSTR_FINDCH
001184             3270   ;			XREF	CSTR_CAT
001184             3271   ;			XREF	CSTR_ENDSWITH
001184             3272   ;			XREF	CSTR_LINE
001184             3273   ;			XREF	NEWIT
001184             3274   ;			XREF	BAD
001184             3275   ;			XREF	CLEAN
001184             3276   ;			XREF	LINNUM
001184             3277   ;			XREF	BUFFER
001184             3278   ;			XREF	NXT
001184             3279   ;			XREF	ERROR_
001184             3280   ;			XREF	XEQ
001184             3281   ;			XREF	LEXAN2
001184             3282   ;			XREF	GETTOP
001184             3283   ;			XREF	FINDL
001184             3284   ;			XREF	DEL
001184             3285   ;			XREF	LISTIT
001184             3286   ;			XREF	ESCAPE
001184             3287   ;			XREF	ASC_TO_NUMBER
001184             3288   ;			XREF	CLOOP
001184             3289   ;			XREF	SCRAP
001184             3290   ;			XREF	POINT_
001184             3291   ;			XREF	SOUND_
001184             3292   
001184             3293   ;OSINIT - Initialise RAM mapping etc.
001184             3294   ;If BASIC is entered by BBCBASIC FILENAME then file
001184             3295   ;FILENAME.BBC is automatically CHAINed.
001184             3296   ;   Outputs: DE = initial value of HIMEM (top of RAM)
001184             3297   ;            HL = initial value of PAGE (user program)
001184             3298   ;            Z-flag reset indicates AUTO-RUN.
001184             3299   ;  Destroys: A,D,E,H,L,F
001184             3300   ;
001184 CD 9C 0D    3301   OSINIT:			CALL	VBLANK_INIT
001187 AF          3302   			XOR	A
001188 32 0F 51    3303   			LD	(FLAGS), A		; Clear flags and set F = Z
00118B 21 00 55    3304   			LD 	HL, USER
00118E 11 00 FF    3305   			LD	DE, RAM_Top
001191 5F          3306   			LD	E, A			; Page boundary
001192 C9          3307   			RET
001193             3308   
001193             3309   ; PROMPT: output the input prompt
001193             3310   ;
001193 3E 3E       3311   PROMPT: 		LD	A,'>'			; Falls through to OSWRCH
001195             3312   
001195             3313   ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
001195             3314   ; Parameters:
001195             3315   ; - A: Character to write
001195             3316   ;
001195 E5          3317   OSWRCH:			PUSH	HL
001196 21 FE 54    3318   			LD	HL, LISTON		; Fetch the LISTON variable
001199 CB 5E       3319   			BIT	3, (HL)			; Check whether we are in *EDIT mode
00119B 20 0A       3320   			JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
00119D             3321   ;
00119D 2A 12 51    3322   			LD	HL, (OSWRCHCH)		; L: Channel #
0011A0 2D          3323   			DEC	L			; If it is 1
0011A1 28 17       3324   			JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0011A3             3325   ;
0011A3 E1          3326   			POP	HL			; Otherwise
0011A4 49 D7       3327   			RST.LIS	10h			; Output the character to MOS
0011A6 C9          3328   			RET
0011A7             3329   ;
0011A7 2A 10 51    3330   OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0011AA FE 0A       3331   			CP	0AH			; Just ignore this
0011AC 28 0A       3332   			JR	Z, OSWRCH_BUFFER2
0011AE FE 0D       3333   			CP	0DH			; Is it the end of line?
0011B0 20 01       3334   			JR	NZ, OSWRCH_BUFFER1	; No, so carry on
0011B2 AF          3335   			XOR	A			; Turn it into a NUL character
0011B3 77          3336   OSWRCH_BUFFER1:		LD	(HL), A			; Echo the character into the buffer
0011B4 23          3337   			INC	HL			; Increment pointer
0011B5 22 10 51    3338   			LD	(OSWRCHPT), HL		; Write pointer back
0011B8 E1          3339   OSWRCH_BUFFER2:		POP	HL
0011B9 C9          3340   			RET
0011BA             3341   ;
0011BA D5          3342   OSWRCH_FILE:		PUSH	DE
0011BB 5C          3343   			LD	E, H			; Filehandle to E
0011BC CD 47 12    3344   			CALL	OSBPUT			; Write the byte out
0011BF D1          3345   			POP	DE
0011C0 E1          3346   			POP	HL
0011C1 C9          3347   			RET
0011C2             3348   
0011C2             3349   ; OSRDCH
0011C2             3350   ;
0011C2             3351   OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0011C2 3E 00       0001M1 			LD	A, function
0011C4 49 CF       0002M1 			RST.LIS	08h
0011C6 FE 1B       3352   			CP	1Bh
0011C8 28 55       3353   			JR	Z, LTRAP1
0011CA C9          3354   			RET
0011CB             3355   
0011CB             3356   ; OSLINE: Invoke the line editor
0011CB             3357   ;
0011CB 1E 01       3358   OSLINE:			LD 	E, 1			; Default is to clear the buffer
0011CD             3359   
0011CD             3360   ; Entry point to line editor that does not clear the buffer
0011CD             3361   ; Parameters:
0011CD             3362   ; - HL: addresses destination buffer (on page boundary)
0011CD             3363   ; Returns:
0011CD             3364   ; -  A: 0
0011CD             3365   ; NB: Buffer filled, terminated by CR
0011CD             3366   ;
0011CD FD E5       3367   OSLINE1:		PUSH	IY
0011CF E5          3368   			PUSH	HL			; Buffer address
0011D0 01 00 01    3369   			LD	BC, 256			; Buffer length
0011D3             3370   			MOSCALL	mos_editline		; Call the MOS line editor
0011D3 3E 09       0001M1 			LD	A, function
0011D5 49 CF       0002M1 			RST.LIS	08h
0011D7 E1          3371   			POP	HL			; Pop the address
0011D8 FD E1       3372   			POP	IY
0011DA F5          3373   			PUSH	AF			; Stack the return value (key pressed)
0011DB CD 9C 0E    3374   			CALL	NULLTOCR		; Turn the 0 character to a CR
0011DE CD FB 40    3375   			CALL	CRLF			; Display CRLF
0011E1 F1          3376   			POP	AF
0011E2 FE 1B       3377   			CP	1Bh 			; Check if ESC terminated the input
0011E4 CA 1F 12    3378   			JP	Z, LTRAP1 		; Yes, so do the ESC thing
0011E7 3A 0F 51    3379   			LD	A, (FLAGS)		; Otherwise
0011EA CB BF       3380   			RES	7, A 			; Clear the escape flag
0011EC 32 0F 51    3381   			LD	(FLAGS), A
0011EF CD 6F 16    3382   			CALL	WAIT_VBLANK 		; Wait a frame
0011F2 AF          3383    			XOR	A			; Return A = 0
0011F3 32 14 51    3384   			LD	(KEYDOWN), A
0011F6 32 15 51    3385   			LD	(KEYASCII), A
0011F9 C9          3386   			RET
0011FA             3387   
0011FA             3388   ;
0011FA             3389   ; ESCSET
0011FA             3390   ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
0011FA             3391   ;
0011FA E5          3392   ESCSET: 		PUSH    HL
0011FB 21 0F 51    3393           		LD      HL,FLAGS		; Pointer to FLAGS
0011FE CB 76       3394           		BIT     6,(HL)			; If bit 6 is set, then
001200 20 02       3395           		JR      NZ,ESCDIS		; escape is disabled, so skip
001202 CB FE       3396           		SET     7,(HL)			; Set bit 7, the escape flag
001204 E1          3397   ESCDIS: 		POP     HL
001205 C9          3398           		RET
001206             3399   
001206             3400   ;
001206             3401   ; ESCTEST
001206             3402   ; Test for ESC key
001206             3403   ;
001206 CD 0F 12    3404   ESCTEST:		CALL	READKEY			; Read the keyboard
001209 C0          3405   			RET	NZ			; Skip if no key is pressed
00120A FE 1B       3406   			CP	1BH			; If ESC pressed then
00120C 28 EC       3407   			JR	Z,ESCSET		; jump to the escape set routine
00120E C9          3408   			RET
00120F             3409   
00120F             3410   ; Read the keyboard
00120F             3411   ; Returns:
00120F             3412   ; - A: ASCII of the pressed key
00120F             3413   ; - F: Z if the key is pressed, otherwise NZ
00120F             3414   ;
00120F 3A 14 51    3415   READKEY:		LD	A, (KEYDOWN)		; Get key down
001212 3D          3416   			DEC	A 			; Set Z flag if keydown is 1
001213 3A 15 51    3417   			LD	A, (KEYASCII)		; Get key ASCII value
001216 C9          3418   			RET
001217             3419   ;
001217             3420   ; TRAP
001217             3421   ; This is called whenever BASIC needs to check for ESC
001217             3422   ;
001217 CD 06 12    3423   TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
00121A             3424   ;
00121A 3A 0F 51    3425   LTRAP:			LD	A,(FLAGS)		; Get FLAGS
00121D B7          3426   			OR	A			; This checks for bit 7; if it is not set then the result will
00121E F0          3427   			RET	P			; be positive (bit 7 is the sign bit in Z80), so return
00121F 21 0F 51    3428   LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
001222 CB BE       3429   			RES	7,(HL)			; Clear the escape pressed flag and
001224 C3 E3 25    3430   			JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
001227             3431   
001227             3432   ; RESET
001227             3433   ;
001227 C9          3434   RESET:			RET				; Yes this is fine
001228             3435   
001228             3436   ; OSOPEN
001228             3437   ; HL: Pointer to path
001228             3438   ;  F: C Z
001228             3439   ;     x x OPENIN
001228             3440   ; 	  OPENOUT
001228             3441   ;     x	  OPENUP
001228             3442   ; Returns:
001228             3443   ;  A: Filehandle, 0 if cannot open
001228             3444   ;
001228 0E 01       3445   OSOPEN:			LD	C, fa_read
00122A 28 06       3446   			JR	Z, @F
00122C 0E 32       3447   			LD	C, fa_write | fa_open_append
00122E 38 02       3448   			JR	C, @F
001230 0E 0A       3449   			LD	C, fa_write | fa_create_always
001232             3450   @@:			MOSCALL	mos_fopen
001232 3E 0A       0001M1 			LD	A, function
001234 49 CF       0002M1 			RST.LIS	08h
001236 C9          3451   			RET
001237             3452   
001237             3453   ;OSSHUT - Close disk file(s).
001237             3454   ; E = file channel
001237             3455   ;  If E=0 all files are closed (except SPOOL)
001237             3456   ; Destroys: A,B,C,D,E,H,L,F
001237             3457   ;
001237 C5          3458   OSSHUT:			PUSH	BC
001238 4B          3459   			LD	C, E
001239             3460   			MOSCALL	mos_fclose
001239 3E 0B       0001M1 			LD	A, function
00123B 49 CF       0002M1 			RST.LIS	08h
00123D C1          3461   			POP	BC
00123E C9          3462   			RET
00123F             3463   
00123F             3464   ; OSBGET - Read a byte from a random disk file.
00123F             3465   ;  E = file channel
00123F             3466   ; Returns
00123F             3467   ;  A = byte read
00123F             3468   ;  Carry set if LAST BYTE of file
00123F             3469   ; Destroys: A,B,C,F
00123F             3470   ;
00123F C5          3471   OSBGET:			PUSH	BC
001240 4B          3472   			LD	C, E
001241             3473   			MOSCALL	mos_fgetc
001241 3E 0C       0001M1 			LD	A, function
001243 49 CF       0002M1 			RST.LIS	08h
001245 C1          3474   			POP	BC
001246 C9          3475   			RET
001247             3476   
001247             3477   ; OSBPUT - Write a byte to a random disk file.
001247             3478   ;  E = file channel
001247             3479   ;  A = byte to write
001247             3480   ; Destroys: A,B,C,F
001247             3481   ;
001247 C5          3482   OSBPUT:			PUSH	BC
001248 4B          3483   			LD	C, E
001249 47          3484   			LD	B, A
00124A             3485   			MOSCALL	mos_fputc
00124A 3E 0D       0001M1 			LD	A, function
00124C 49 CF       0002M1 			RST.LIS	08h
00124E C1          3486   			POP	BC
00124F C9          3487   			RET
001250             3488   
001250             3489   ; OSSTAT - Read file status
001250             3490   ;  E = file channel
001250             3491   ; Returns
001250             3492   ;  F: Z flag set - EOF
001250             3493   ;  A: If Z then A = 0
001250             3494   ; Destroys: A,D,E,H,L,F
001250             3495   ;
001250 C5          3496   OSSTAT:			PUSH	BC
001251 4B          3497   			LD	C, E
001252             3498   			MOSCALL	mos_feof
001252 3E 0E       0001M1 			LD	A, function
001254 49 CF       0002M1 			RST.LIS	08h
001256 C1          3499   			POP	BC
001257 FE 01       3500   			CP	1
001259 C9          3501   			RET
00125A             3502   
00125A             3503   ; GETPTR - Return file pointer.
00125A             3504   ;    E = file channel
00125A             3505   ; Returns:
00125A             3506   ; DEHL = pointer (0-&7FFFFF)
00125A             3507   ; Destroys: A,B,C,D,E,H,L,F
00125A             3508   ;
00125A FD E5       3509   GETPTR:			PUSH		IY
00125C 4B          3510   			LD		C, E
00125D             3511   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
00125D 3E 19       0001M1 			LD	A, function
00125F 49 CF       0002M1 			RST.LIS	08h
001261 5B E5       3512   			PUSH.LIL	HL
001263 5B FD E1    3513   			POP.LIL		IY		; IYU: Pointer to FIL structure
001266 5B FD 6E 11 3514   			LD.LIL		L, (IY + FIL.fptr + 0)
00126A 5B FD 66 12 3515   			LD.LIL		H, (IY + FIL.fptr + 1)
00126E 5B FD 5E 13 3516   			LD.LIL		E, (IY + FIL.fptr + 2)
001272 5B FD 56 14 3517   			LD.LIL		D, (IY + FIL.fptr + 3)
001276 FD E1       3518   			POP		IY
001278 C9          3519   			RET
001279             3520   
001279             3521   ; PUTPTR - Update file pointer.
001279             3522   ;    A = file channel
001279             3523   ; DEHL = new pointer (0-&7FFFFF)
001279             3524   ; Destroys: A,B,C,D,E,H,L,F
001279             3525   ;
001279 FD E5       3526   PUTPTR:			PUSH		IY
00127B 4F          3527   			LD		C, A  		; C: Filehandle
00127C 5B E5       3528   			PUSH.LIL	HL
00127E 5B 21 02 00 3529   			LD.LIL		HL, 2
       00          
001283 5B 39       3530   			ADD.LIL		HL, SP
001285 5B 73       3531   			LD.LIL		(HL), E 	; 3rd byte of DWORD set to E
001287 5B E1       3532   			POP.LIL		HL
001289 5A          3533   			LD		E, D  		; 4th byte passed as E
00128A             3534   			MOSCALL		mos_flseek
00128A 3E 1C       0001M1 			LD	A, function
00128C 49 CF       0002M1 			RST.LIS	08h
00128E FD E1       3535   			POP		IY
001290 C9          3536   			RET
001291             3537   
001291             3538   ; GETEXT - Find file size.
001291             3539   ;    E = file channel
001291             3540   ; Returns:
001291             3541   ; DEHL = file size (0-&800000)
001291             3542   ; Destroys: A,B,C,D,E,H,L,F
001291             3543   ;
001291 FD E5       3544   GETEXT:			PUSH		IY
001293 4B          3545   			LD		C, E
001294             3546   			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
001294 3E 19       0001M1 			LD	A, function
001296 49 CF       0002M1 			RST.LIS	08h
001298 5B E5       3547   			PUSH.LIL	HL
00129A 5B FD E1    3548   			POP.LIL		IY		; IYU: Pointer to FIL structure
00129D 5B FD 6E 24 3549   			LD.LIL		L, (IY + FIL.obj.objsize + 0)
0012A1 5B FD 66 25 3550   			LD.LIL		H, (IY + FIL.obj.objsize + 1)
0012A5 5B FD 5E 26 3551   			LD.LIL		E, (IY + FIL.obj.objsize + 2)
0012A9 5B FD 56 27 3552   			LD.LIL		D, (IY + FIL.obj.objsize + 3)
0012AD FD E1       3553   			POP		IY
0012AF C9          3554   			RET
0012B0             3555   
0012B0             3556   ;OSLOAD - Load an area of memory from a file.
0012B0             3557   ;   Inputs: HL addresses filename (CR terminated)
0012B0             3558   ;           DE = address at which to load
0012B0             3559   ;           BC = maximum allowed size (bytes)
0012B0             3560   ;  Outputs: Carry reset indicates no room for file.
0012B0             3561   ; Destroys: A,B,C,D,E,H,L,F
0012B0             3562   ;
0012B0 C5          3563   OSLOAD:			PUSH	BC			; Stack the size
0012B1 D5          3564   			PUSH	DE			; Stack the load address
0012B2 11 00 52    3565   			LD	DE, ACCS		; Buffer address for filename
0012B5 CD B4 0E    3566   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0012B8 21 00 52    3567   			LD	HL, ACCS		; HL: Filename
0012BB CD F9 13    3568   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0012BE CD 0A 14    3569   			CALL	EXT_HANDLER		; Get the default handler
0012C1 D1          3570   			POP	DE			; Restore the load address
0012C2 C1          3571   			POP	BC			; Restore the size
0012C3 B7          3572   			OR	A
0012C4 CA 8B 13    3573   			JP 	Z, OSLOAD_BBC
0012C7             3574   ;
0012C7             3575   ; Load the file in as a text file
0012C7             3576   ;
0012C7 AF          3577   OSLOAD_TXT:		XOR	A			; Set file attributes to read
0012C8 CD 28 12    3578   			CALL	OSOPEN			; Open the file
0012CB 5F          3579   			LD 	E, A 			; The filehandle
0012CC B7          3580   			OR	A
0012CD 3E 04       3581   			LD	A, 4			; File not found error
0012CF CA 93 13    3582   			JP	Z, OSERROR		; Jump to error handler
0012D2 CD 3E 40    3583   			CALL	NEWIT			; Call NEW to clear the program space
0012D5             3584   ;
0012D5 21 00 52    3585   OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0012D8             3586   ;
0012D8             3587   ; First skip any whitespace (indents) at the beginning of the input
0012D8             3588   ;
0012D8 CD 3F 12    3589   @@:			CALL	OSBGET			; Read the byte into A
0012DB 38 1C       3590   			JR	C, OSLOAD_TXT3		; Is it EOF?
0012DD FE 0A       3591   			CP	LF 			; Is it LF?
0012DF 28 18       3592   			JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0012E1 FE 21       3593   			CP	21h			; Is it less than or equal to ASCII space?
0012E3 38 F3       3594   			JR	C, @B 			; Yes, so keep looping
0012E5 77          3595   			LD	(HL), A 		; Store the first character
0012E6 2C          3596   			INC	L
0012E7             3597   ;
0012E7             3598   ; Now read the rest of the line in
0012E7             3599   ;
0012E7 CD 3F 12    3600   OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
0012EA 38 26       3601   			JR	C, OSLOAD_TXT4		; Is it EOF?
0012EC FE 20       3602   			CP	20h			; Skip if not an ASCII character
0012EE 38 05       3603   			JR	C, @F
0012F0 77          3604   			LD	(HL), A 		; Store in the input buffer
0012F1 2C          3605   			INC	L			; Increment the buffer pointer
0012F2 CA EF 3E    3606   			JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
0012F5 FE 0A       3607   @@:			CP	LF			; Check for LF
0012F7 20 EE       3608   			JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
0012F9             3609   ;
0012F9             3610   ; Finally, handle EOL/EOF
0012F9             3611   ;
0012F9 36 0D       3612   OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
0012FB 7D          3613   			LD	A, L			; Check for minimum line length
0012FC FE 02       3614   			CP	2			; If it is 2 characters or less (including CR)
0012FE 38 08       3615   			JR	C, @F			; Then don't bother entering it
001300 D5          3616   			PUSH	DE			; Preserve the filehandle
001301 CD 1D 13    3617   			CALL	OSEDIT			; Enter the line in memory
001304 DC 1A 40    3618   			CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
001307 D1          3619   			POP	DE
001308 CD 50 12    3620   @@:			CALL	OSSTAT			; End of file?
00130B 20 C8       3621   			JR	NZ, OSLOAD_TXT1		; No, so loop
00130D CD 37 12    3622   			CALL	OSSHUT			; Close the file
001310 37          3623   			SCF				; Flag to BASIC that we're good
001311 C9          3624   			RET
001312             3625   ;
001312             3626   ; Special case for BASIC programs with no blank line at the end
001312             3627   ;
001312 FE 20       3628   OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
001314 38 05       3629   			JR	C, @F
001316 77          3630   			LD	(HL), A			; Store the character
001317 2C          3631   			INC	L
001318 CA EF 3E    3632   			JP	Z, BAD
00131B 18 DC       3633   @@:			JR	OSLOAD_TXT3
00131D             3634   ;
00131D             3635   ; This bit enters the line into memory
00131D             3636   ; Also called from OSLOAD_TXT
00131D             3637   ; Returns:
00131D             3638   ; F: C if a new line has been entered (CLEAN will need to be called)
00131D             3639   ;
00131D AF          3640   OSEDIT:			XOR	A			; Entry point after *EDIT
00131E 32 FB 54    3641   			LD      (COUNT),A
001321 FD 21 00 52 3642   			LD      IY,ACCS
001325 CD 8A 43    3643   			CALL    LINNUM			; HL: The line number from the input buffer
001328 CD 0B 45    3644   			CALL    NXT			; Skip spaces
00132B 7C          3645   			LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
00132C B5          3646   			OR      L
00132D 28 00       3647   			JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
00132F             3648   ;
00132F             3649   ; This bit does the lexical analysis and tokenisation
00132F             3650   ;
00132F 11 00 53    3651   LNZERO:			LD	DE,BUFFER
001332 0E 01       3652                   	LD	C,1			; LEFT MODE
001334 E5          3653                   	PUSH	HL
001335 CD 18 44    3654                   	CALL	LEXAN2			; LEXICAL ANALYSIS
001338 E1          3655                   	POP	HL
001339 12          3656                   	LD	(DE),A			; TERMINATOR
00133A AF          3657                   	XOR	A
00133B 47          3658                   	LD	B,A
00133C 4B          3659                   	LD	C,E			; BC=LINE LENGTH
00133D 13          3660                   	INC	DE
00133E 12          3661                   	LD	(DE),A			; ZERO NEXT
00133F 7C          3662                   	LD	A,H
001340 B5          3663                   	OR	L
001341 FD 21 00 53 3664                   	LD	IY,BUFFER		; FOR XEQ
001345 CA 99 24    3665                   	JP	Z,XEQ			; DIRECT MODE
001348 C5          3666                   	PUSH	BC
001349 CD 43 41    3667                   	CALL	FINDL
00134C CC E9 3F    3668                   	CALL	Z,DEL
00134F C1          3669                   	POP	BC
001350 79          3670                   	LD	A,C
001351 B7          3671                   	OR	A
001352 C8          3672                   	RET	Z
001353 C6 04       3673                   	ADD	A,4
001355 4F          3674                   	LD	C,A			; LENGTH INCLUSIVE
001356 D5          3675                   	PUSH	DE			; LINE NUMBER
001357 C5          3676                   	PUSH	BC			; SAVE LINE LENGTH
001358 EB          3677                   	EX	DE,HL
001359 C5          3678                   	PUSH	BC
00135A CD 25 40    3679                   	CALL	GETTOP
00135D C1          3680                   	POP	BC
00135E E5          3681                   	PUSH	HL
00135F 09          3682                   	ADD	HL,BC
001360 E5          3683                   	PUSH	HL
001361 24          3684                   	INC	H
001362 AF          3685                   	XOR	A
001363 ED 72       3686                   	SBC	HL,SP
001365 E1          3687                   	POP	HL
001366 D2 44 3F    3688                   	JP	NC,ERROR_		; "No room"
001369 E3          3689                   	EX	(SP),HL
00136A E5          3690                   	PUSH	HL
00136B 23          3691                   	INC	HL
00136C B7          3692                   	OR	A
00136D ED 52       3693                   	SBC	HL,DE
00136F 44          3694                   	LD	B,H			; BC=AMOUNT TO MOVE
001370 4D          3695                   	LD	C,L
001371 E1          3696                   	POP	HL
001372 D1          3697                   	POP	DE
001373 28 02       3698                   	JR	Z,ATENDos
001375 ED B8       3699                   	LDDR				; MAKE SPACE
001377 C1          3700   ATENDos:          	POP	BC			; LINE LENGTH
001378 D1          3701                   	POP	DE			; LINE NUMBER
001379 23          3702                   	INC	HL
00137A 71          3703                   	LD	(HL),C			; STORE LENGTH
00137B 23          3704                   	INC	HL
00137C 73          3705                   	LD	(HL),E			; STORE LINE NUMBER
00137D 23          3706                   	INC	HL
00137E 72          3707                   	LD	(HL),D
00137F 23          3708                   	INC	HL
001380 11 00 53    3709                   	LD	DE,BUFFER
001383 EB          3710                   	EX	DE,HL
001384 0D          3711                   	DEC	C
001385 0D          3712                   	DEC	C
001386 0D          3713                   	DEC	C
001387 ED B0       3714                   	LDIR				; ADD LINE
001389 37          3715   			SCF
00138A C9          3716   			RET
00138B             3717   ;
00138B             3718   ; Load the file in as a tokenised binary blob
00138B             3719   ;
00138B             3720   OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
00138B 3E 01       0001M1 			LD	A, function
00138D 49 CF       0002M1 			RST.LIS	08h
00138F D0          3721   			RET	NC			; If load returns with carry reset - NO ROOM
001390 B7          3722   			OR	A			; If there is no error (A=0)
001391 37          3723   			SCF				; Need to set carry indicating there was room
001392 C8          3724   			RET	Z			; Return
001393             3725   ;
001393 F5          3726   OSERROR:		PUSH	AF			; Handle the MOS error
001394 21 00 52    3727   			LD	HL, ACCS		; Address of the buffer
001397 01 00 01    3728   			LD	BC, 256			; Length of the buffer
00139A 5F          3729   			LD	E, A			; The error code
00139B             3730   			MOSCALL	mos_getError		; Copy the error message into the buffer
00139B 3E 0F       0001M1 			LD	A, function
00139D 49 CF       0002M1 			RST.LIS	08h
00139F F1          3731   			POP	AF
0013A0 E5          3732   			PUSH	HL			; Stack the address of the error (now in ACCS)
0013A1 C6 7F       3733   			ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0013A3 C3 55 3F    3734   			JP	EXTERR			; Trigger an external error
0013A6             3735   
0013A6             3736   ;OSSAVE - Save an area of memory to a file.
0013A6             3737   ;   Inputs: HL addresses filename (term CR)
0013A6             3738   ;           DE = start address of data to save
0013A6             3739   ;           BC = length of data to save (bytes)
0013A6             3740   ; Destroys: A,B,C,D,E,H,L,F
0013A6             3741   ;
0013A6 C5          3742   OSSAVE:			PUSH	BC			; Stack the size
0013A7 D5          3743   			PUSH	DE			; Stack the save address
0013A8 11 00 52    3744   			LD	DE, ACCS		; Buffer address for filename
0013AB CD B4 0E    3745   			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0013AE 21 00 52    3746   			LD	HL, ACCS		; HL: Filename
0013B1 CD F9 13    3747   			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0013B4 CD 0A 14    3748   			CALL	EXT_HANDLER		; Get the default handler
0013B7 D1          3749   			POP	DE			; Restore the save address
0013B8 C1          3750   			POP	BC			; Restore the size
0013B9 B7          3751   			OR	A			; Is the extension .BBC
0013BA 28 35       3752   			JR	Z, OSSAVE_BBC		; Yes, so use that
0013BC             3753   ;
0013BC             3754   ; Save the file out as a text file
0013BC             3755   ;
0013BC 3A 12 51    3756   OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0013BF F5          3757   			PUSH	AF
0013C0 AF          3758   			XOR	A
0013C1 3C          3759   			INC	A			; Make sure C is clear, A is 1, for OPENOUT
0013C2 32 12 51    3760   			LD	(OSWRCHCH), A
0013C5 CD 28 12    3761   			CALL	OSOPEN			; Open the file
0013C8 32 13 51    3762   			LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0013CB DD 21 FE 54 3763   			LD	IX, LISTON		; Required for LISTIT
0013CF 2A DC 54    3764   			LD	HL, (PAGE_)		; Get start of program area
0013D2 D9          3765   			EXX
0013D3 01 00 00    3766   			LD	BC, 0			; Set the initial indent counters
0013D6 D9          3767   			EXX
0013D7 7E          3768   OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0013D8 B7          3769   			OR	A
0013D9 28 0A       3770   			JR	Z, OSSAVE_TXT2
0013DB 23          3771   			INC	HL			; Skip the length byte
0013DC 5E          3772   			LD	E, (HL)			; Get the line number
0013DD 23          3773   			INC	HL
0013DE 56          3774   			LD	D, (HL)
0013DF 23          3775   			INC	HL
0013E0 CD 5D 40    3776   			CALL	LISTIT			; List the line
0013E3 18 F2       3777   			JR	OSSAVE_TXT1
0013E5 3A 13 51    3778   OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
0013E8 5F          3779   			LD	E, A
0013E9 CD 37 12    3780   			CALL	OSSHUT			; Close it
0013EC F1          3781   			POP	AF			; Restore the channel
0013ED 32 12 51    3782   			LD	(OSWRCHCH), A
0013F0 C9          3783   			RET
0013F1             3784   ;
0013F1             3785   ; Save the file out as a tokenised binary blob
0013F1             3786   ;
0013F1             3787   OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
0013F1 3E 02       0001M1 			LD	A, function
0013F3 49 CF       0002M1 			RST.LIS	08h
0013F5 B7          3788   			OR	A			; If there is no error (A=0)
0013F6 C8          3789   			RET	Z			; Just return
0013F7 18 9A       3790   			JR	OSERROR			; Trip an error
0013F9             3791   
0013F9             3792   ; Check if an extension is specified in the filename
0013F9             3793   ; Add a default if not specified
0013F9             3794   ; HL: Filename (CSTR format)
0013F9             3795   ;
0013F9 E5          3796   EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
0013FA 0E 2E       3797   			LD	C, '.'			; Search for dot (marks start of extension)
0013FC CD D4 0E    3798   			CALL	CSTR_FINDCH
0013FF B7          3799   			OR	A			; Check for end of string marker
001400 20 06       3800   			JR	NZ, @F			; No, so skip as we have an extension at this point
001402 11 36 14    3801   			LD	DE, EXT_LOOKUP		; Get the first (default extension)
001405 CD EA 0E    3802   			CALL	CSTR_CAT		; Concat it to string pointed to by HL
001408 E1          3803   @@:			POP	HL			; Restore the filename pointer
001409 C9          3804   			RET
00140A             3805   
00140A             3806   ; Check if an extension is valid and, if so, provide a pointer to a handler
00140A             3807   ; HL: Filename (CSTR format)
00140A             3808   ; Returns:
00140A             3809   ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
00140A             3810   ;
00140A E5          3811   EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
00140B 0E 2E       3812   			LD	C, '.'			; Find the '.'
00140D CD D4 0E    3813   			CALL	CSTR_FINDCH
001410 11 36 14    3814   			LD	DE, EXT_LOOKUP		; The lookup table
001413             3815   ;
001413 E5          3816   EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
001414 CD DC 0E    3817   			CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
001417 E1          3818   			POP	HL			; Restore the pointer to the extension
001418 28 18       3819   			JR	Z, EXT_HANDLER_2	; We have a match!
00141A             3820   ;
00141A 1A          3821   @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
00141B 13          3822   			INC	DE
00141C B7          3823   			OR	A
00141D 20 FB       3824   			JR	NZ, @B
00141F 13          3825   			INC	DE			; Skip the file extension # byte
001420             3826   ;
001420 1A          3827   			LD	A, (DE)			; Are we at the end of the table?
001421 B7          3828   			OR	A
001422 20 EF       3829   			JR	NZ, EXT_HANDLER_1	; No, so loop
001424             3830   ;
001424 3E CC       3831   			LD      A,204			; Throw a "Bad name" error
001426 CD 55 3F    3832           		CALL    EXTERR
001429 42 61 64 20 3833           		DB    	"Bad name", 0
       6E 61 6D 65 
       00          
001432             3834   ;
001432 13          3835   EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
001433 1A          3836   			LD	A, (DE)
001434 E1          3837   			POP	HL			; Restore the filename pointer
001435 C9          3838   			RET
001436             3839   
001436             3840   ; Extension lookup table
001436             3841   ; CSTR, TYPE
001436             3842   ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
001436             3843   ; 	- 1: Human readable plain text
001436             3844   ;
001436 2E 42 42 43 3845   EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
       00 00       
00143C 2E 54 58 54 3846   			DB	".TXT", 0, 1
       00 01       
001442 2E 41 53 43 3847   			DB	".ASC", 0, 1
       00 01       
001448 2E 42 41 53 3848   			DB	".BAS", 0, 1
       00 01       
00144E 00          3849   			DB	0			; End of table
00144F             3850   
00144F             3851   ; OSWORD
00144F             3852   ;
00144F FE 07       3853   OSWORD:			CP	07H			; SOUND
001451             3854   			; JR	Z, OSWORD_07
001451 CA F9 0E    3855   			JP	Z, OSWORD_07 ; JR WAS TOO LARGE
001454 FE 08       3856   			CP	08H			; ENVELOPE
001456 28 14       3857   			JR	Z, OSWORD_08
001458 FE 09       3858   			CP	09H			; POINT
00145A 28 03       3859   			JR	Z, OSWORD_09
00145C C3 91 14    3860   			JP	HUH			; Anything else trips an error
00145F             3861   
00145F             3862   ; SOUND channel,volume,pitch,duration
00145F             3863   ; Parameters:
00145F             3864   ; - HL: Pointer to data
00145F             3865   ;   - 0,1: Channel
00145F             3866   ;   - 2,3: Volume 0 (off) to 15 (full volume)
00145F             3867   ;   - 4,5: Pitch 0 - 255
00145F             3868   ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
00145F             3869   ;
00145F             3870   OSWORD_07:		EQU	SOUND_
00145F             3871   
00145F             3872   ; OSWORD 0x09: POINT
00145F             3873   ; Parameters:
00145F             3874   ; - HL: Address of data
00145F             3875   ;   - 0,1: X coordinate
00145F             3876   ;   - 2,3: Y coordinate
00145F             3877   ;
00145F ED 5B 17 51 3878   OSWORD_09:		LD	DE,(SCRAP+0)
001463 2A 19 51    3879   			LD	HL,(SCRAP+2)
001466 CD D7 0C    3880   			CALL	POINT_
001469 32 1B 51    3881   			LD	(SCRAP+4),A
00146C C9          3882   OSWORD_08:		RET				; Envelope not currently implemented
00146D             3883   
00146D             3884   ;
00146D             3885   ; OSBYTE
00146D             3886   ; Parameters:
00146D             3887   ; - A: FX #
00146D             3888   ; - L: First parameter
00146D             3889   ; - H: Second parameter
00146D             3890   ;
00146D FE 0B       3891   OSBYTE:			CP	0BH			; Keyboard auto-repeat delay
00146F 28 31       3892   			JR	Z, OSBYTE_0B
001471 FE 0C       3893   			CP	0CH			; Keyboard auto-repeat rate
001473 28 54       3894   			JR	Z, OSBYTE_0C
001475 FE 13       3895   			CP	13H			; Wait for vblank
001477 28 77       3896   			JR	Z, OSBYTE_13
001479 FE 76       3897   			CP	76H			; Set keyboard LED
00147B 28 7B       3898   			JR	Z, OSBYTE_76
00147D FE 81       3899   			CP	81H			; Read the keyboard
00147F CA 20 15    3900   			JP	Z, OSBYTE_81
001482 FE 86       3901   			CP	86H			; Get cursor coordinates
001484 CA 3A 15    3902   			JP	Z, OSBYTE_86
001487 FE 87       3903   			CP	87H			; Fetch current mode and character under cursor
001489 CA 69 15    3904   			JP	Z, OSBYTE_87
00148C FE A0       3905   			CP	A0H			; Fetch system variable
00148E CA 7F 15    3906   			JP	Z, OSBYTE_A0
001491             3907   ;
001491             3908   ; Anything else trips an error
001491             3909   ;
001491 3E FE       3910   HUH:    		LD      A,254			; Bad command error
001493 CD 55 3F    3911           		CALL    EXTERR
001496 42 61 64 20 3912           		DB    	"Bad command"
       63 6F 6D 6D 
       61 6E 64    
0014A1 00          3913           		DEFB    0
0014A2             3914   
0014A2             3915   ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
0014A2             3916   ; Parameters:
0014A2             3917   ; - HL: Repeat delay
0014A2             3918   ;
0014A2             3919   OSBYTE_0B:		VDU	23
0014A2 3E 17       0001M1         LD      A, VAL
0014A4 CD 95 11    0002M1         CALL    OSWRCH
0014A7             3920   			VDU	0
0014A7 3E 00       0001M1         LD      A, VAL
0014A9 CD 95 11    0002M1         CALL    OSWRCH
0014AC             3921   			VDU	vdp_keystate
0014AC 3E 88       0001M1         LD      A, VAL
0014AE CD 95 11    0002M1         CALL    OSWRCH
0014B1             3922   			VDU	L
0014B1 7D          0001M1         LD      A, VAL
0014B2 CD 95 11    0002M1         CALL    OSWRCH
0014B5             3923   			VDU	H
0014B5 7C          0001M1         LD      A, VAL
0014B6 CD 95 11    0002M1         CALL    OSWRCH
0014B9             3924   			VDU	0
0014B9 3E 00       0001M1         LD      A, VAL
0014BB CD 95 11    0002M1         CALL    OSWRCH
0014BE             3925   			VDU 	0
0014BE 3E 00       0001M1         LD      A, VAL
0014C0 CD 95 11    0002M1         CALL    OSWRCH
0014C3             3926   			VDU	255
0014C3 3E FF       0001M1         LD      A, VAL
0014C5 CD 95 11    0002M1         CALL    OSWRCH
0014C8 C9          3927   			RET
0014C9             3928   
0014C9             3929   ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
0014C9             3930   ; Parameters:
0014C9             3931   ; - HL: Repeat rate
0014C9             3932   ;
0014C9             3933   OSBYTE_0C:		VDU	23
0014C9 3E 17       0001M1         LD      A, VAL
0014CB CD 95 11    0002M1         CALL    OSWRCH
0014CE             3934   			VDU	0
0014CE 3E 00       0001M1         LD      A, VAL
0014D0 CD 95 11    0002M1         CALL    OSWRCH
0014D3             3935   			VDU	vdp_keystate
0014D3 3E 88       0001M1         LD      A, VAL
0014D5 CD 95 11    0002M1         CALL    OSWRCH
0014D8             3936   			VDU	0
0014D8 3E 00       0001M1         LD      A, VAL
0014DA CD 95 11    0002M1         CALL    OSWRCH
0014DD             3937   			VDU 	0
0014DD 3E 00       0001M1         LD      A, VAL
0014DF CD 95 11    0002M1         CALL    OSWRCH
0014E2             3938   			VDU	L
0014E2 7D          0001M1         LD      A, VAL
0014E3 CD 95 11    0002M1         CALL    OSWRCH
0014E6             3939   			VDU	H
0014E6 7C          0001M1         LD      A, VAL
0014E7 CD 95 11    0002M1         CALL    OSWRCH
0014EA             3940   			VDU	255
0014EA 3E FF       0001M1         LD      A, VAL
0014EC CD 95 11    0002M1         CALL    OSWRCH
0014EF C9          3941   			RET
0014F0             3942   
0014F0             3943   ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
0014F0             3944   ;
0014F0 CD 6F 16    3945   OSBYTE_13:		CALL	WAIT_VBLANK
0014F3 2E 00       3946   			LD	L, 0			; Returns 0
0014F5 C3 4E 1B    3947   			JP	COUNT0
0014F8             3948   ;
0014F8             3949   ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
0014F8             3950   ; Parameters:
0014F8             3951   ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
0014F8             3952   ;
0014F8             3953   OSBYTE_76:		VDU	23
0014F8 3E 17       0001M1         LD      A, VAL
0014FA CD 95 11    0002M1         CALL    OSWRCH
0014FD             3954   			VDU	0
0014FD 3E 00       0001M1         LD      A, VAL
0014FF CD 95 11    0002M1         CALL    OSWRCH
001502             3955   			VDU	vdp_keystate
001502 3E 88       0001M1         LD      A, VAL
001504 CD 95 11    0002M1         CALL    OSWRCH
001507             3956   			VDU	0
001507 3E 00       0001M1         LD      A, VAL
001509 CD 95 11    0002M1         CALL    OSWRCH
00150C             3957   			VDU 	0
00150C 3E 00       0001M1         LD      A, VAL
00150E CD 95 11    0002M1         CALL    OSWRCH
001511             3958   			VDU	0
001511 3E 00       0001M1         LD      A, VAL
001513 CD 95 11    0002M1         CALL    OSWRCH
001516             3959   			VDU	0
001516 3E 00       0001M1         LD      A, VAL
001518 CD 95 11    0002M1         CALL    OSWRCH
00151B             3960   			VDU	L
00151B 7D          0001M1         LD      A, VAL
00151C CD 95 11    0002M1         CALL    OSWRCH
00151F C9          3961   			RET
001520             3962   
001520             3963   ; OSBYTE 0x81: Read the keyboard
001520             3964   ; Parameters:
001520             3965   ; - HL = Time to wait (centiseconds)
001520             3966   ; Returns:
001520             3967   ; - F: Carry reset indicates time-out
001520             3968   ; - A: If carry set, A = character typed
001520             3969   ; Destroys: A,D,E,H,L,F
001520             3970   ;
001520 CD 0F 12    3971   OSBYTE_81:		CALL	READKEY			; Read the keyboard
001523 28 09       3972   			JR	Z, @F 			; Skip if we have a key
001525 7C          3973   			LD	A, H 			; Check loop counter
001526 B5          3974   			OR 	L
001527 C8          3975   			RET 	Z 			; Return, we've not got a key at this point
001528 CD 6F 16    3976   			CALL	WAIT_VBLANK 		; Wait a frame
00152B 2B          3977   			DEC 	HL			; Decrement
00152C 18 F2       3978   			JR	OSBYTE_81		; And loop
00152E             3979   ;
00152E 21 14 51    3980   @@:			LD	HL, KEYDOWN		; We have a key, so
001531 36 00       3981   			LD	(HL), 0			; clear the keydown flag
001533 FE 1B       3982   			CP	1BH			; If we are not pressing ESC,
001535 37          3983   			SCF 				; then flag we've got a character
001536 C0          3984   			RET	NZ
001537 C3 FA 11    3985   			JP	ESCSET			; Handle ESC
00153A             3986   
00153A             3987   ; OSBYTE 0x86: Fetch cursor coordinates
00153A             3988   ; Returns:
00153A             3989   ; - DE: X Coordinate (POS)
00153A             3990   ; - HL: Y Coordinate (VPOS)
00153A             3991   ;
00153A DD E5       3992   OSBYTE_86:		PUSH	IX			; Get the system vars in IX
00153C             3993   			MOSCALL	mos_sysvars		; Reset the semaphore
00153C 3E 08       0001M1 			LD	A, function
00153E 49 CF       0002M1 			RST.LIS	08h
001540 5B DD CB 04 3994   			RES.LIL	0, (IX+sysvar_vpd_pflags)
       86          
001545             3995   			VDU	23
001545 3E 17       0001M1         LD      A, VAL
001547 CD 95 11    0002M1         CALL    OSWRCH
00154A             3996   			VDU	0
00154A 3E 00       0001M1         LD      A, VAL
00154C CD 95 11    0002M1         CALL    OSWRCH
00154F             3997   			VDU	vdp_cursor
00154F 3E 82       0001M1         LD      A, VAL
001551 CD 95 11    0002M1         CALL    OSWRCH
001554 5B DD CB 04 3998   @@:			BIT.LIL	0, (IX+sysvar_vpd_pflags)
       46          
001559 28 F9       3999   			JR	Z, @B			; Wait for the result
00155B 16 00       4000   			LD 	D, 0
00155D 62          4001   			LD	H, D
00155E 5B DD 5E 07 4002   			LD.LIL	E, (IX + sysvar_cursorX)
001562 5B DD 6E 08 4003   			LD.LIL	L, (IX + sysvar_cursorY)
001566 DD E1       4004   			POP	IX
001568 C9          4005   			RET
001569             4006   
001569             4007   ; OSBYTE 0x87: Fetch current mode and character under cursor
001569             4008   ;
001569 DD E5       4009   OSBYTE_87:		PUSH	IX
00156B CD 15 02    4010   			CALL	GETCSR			; Get the current screen position
00156E CD 9A 0C    4011   			CALL	GETSCHR_1		; Read character from screen
001571 6F          4012   			LD	L, A
001572             4013   			MOSCALL	mos_sysvars
001572 3E 08       0001M1 			LD	A, function
001574 49 CF       0002M1 			RST.LIS	08h
001576 5B DD 66 27 4014   			LD.LIL	H, (IX+sysvar_scrMode)	; H: Screen mode
00157A DD E1       4015   			POP	IX
00157C C3 50 1B    4016   			JP	COUNT1
00157F             4017   
00157F             4018   ; OSBYTE 0xA0: Fetch system variable
00157F             4019   ; Parameters:
00157F             4020   ; - L: The system variable to fetch
00157F             4021   ;
00157F DD E5       4022   OSBYTE_A0:		PUSH	IX
001581             4023   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
001581 3E 08       0001M1 			LD	A, function
001583 49 CF       0002M1 			RST.LIS	08h
001585 5B 01 00 00 4024   			LD.LIL	BC, 0
       00          
00158A 4D          4025   			LD	C, L			; BCU = L
00158B 5B DD 09    4026   			ADD.LIL	IX, BC			; Add to IX
00158E 5B DD 6E 00 4027   			LD.LIL	L, (IX + 0)		; Fetch the return value
001592 DD E1       4028   			POP	IX
001594 C3 4E 1B    4029   			JP 	COUNT0
001597             4030   
001597             4031   ; OSCLI
001597             4032   ;
001597             4033   ;
001597             4034   ;OSCLI - Process a MOS command
001597             4035   ;
001597 CD F1 15    4036   OSCLI: 			CALL    SKIPSP
00159A FE 0D       4037   			CP      CR
00159C C8          4038   			RET     Z
00159D FE 7C       4039   			CP      '|'
00159F C8          4040   			RET     Z
0015A0 EB          4041   			EX      DE,HL
0015A1 21 00 16    4042   			LD      HL,COMDS
0015A4 1A          4043   OSCLI0:			LD      A,(DE)
0015A5 CD F8 15    4044   			CALL    UPPRC
0015A8 BE          4045   			CP      (HL)
0015A9 28 0B       4046   			JR      Z,OSCLI2
0015AB 38 2E       4047   			JR      C,OSCLI6
0015AD CB 7E       4048   OSCLI1:			BIT     7,(HL)
0015AF 23          4049   			INC     HL
0015B0 28 FB       4050   			JR      Z,OSCLI1
0015B2 23          4051   			INC     HL
0015B3 23          4052   			INC     HL
0015B4 18 EE       4053   			JR      OSCLI0
0015B6             4054   ;
0015B6 D5          4055   OSCLI2:			PUSH    DE
0015B7 13          4056   OSCLI3:			INC     DE
0015B8 23          4057   			INC     HL
0015B9 1A          4058   			LD      A,(DE)
0015BA CD F8 15    4059   			CALL    UPPRC
0015BD FE 2E       4060   			CP      '.'			; ABBREVIATED?
0015BF 28 0A       4061   			JR      Z,OSCLI4
0015C1 AE          4062   			XOR     (HL)
0015C2 28 F3       4063   			JR      Z,OSCLI3
0015C4 FE 80       4064   			CP      80H
0015C6 28 03       4065   			JR      Z,OSCLI4
0015C8 D1          4066   			POP     DE
0015C9 18 E2       4067   			JR      OSCLI1
0015CB             4068   ;
0015CB F1          4069   OSCLI4:			POP     AF
0015CC 13          4070   		        INC     DE
0015CD CB 7E       4071   OSCLI5:			BIT     7,(HL)
0015CF 23          4072   			INC     HL
0015D0 28 FB       4073   			JR      Z,OSCLI5
0015D2 7E          4074   			LD      A,(HL)
0015D3 23          4075   			INC     HL
0015D4 66          4076   			LD      H,(HL)
0015D5 6F          4077   			LD      L,A
0015D6 E5          4078   			PUSH    HL
0015D7 EB          4079   			EX      DE,HL
0015D8 C3 F1 15    4080   			JP      SKIPSP
0015DB             4081   ;
0015DB EB          4082   OSCLI6:			EX	DE, HL			; HL: Buffer for command
0015DC 11 00 52    4083   			LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0015DF D5          4084   			PUSH	DE			; Store buffer address
0015E0 CD C6 0E    4085   			CALL	CSTR_LINE		; Fetch the line
0015E3 E1          4086   			POP	HL			; HL: Pointer to command string in ACCS
0015E4 FD E5       4087   			PUSH	IY
0015E6             4088   			MOSCALL	mos_oscli		; Returns OSCLI error in A
0015E6 3E 10       0001M1 			LD	A, function
0015E8 49 CF       0002M1 			RST.LIS	08h
0015EA FD E1       4089   			POP	IY
0015EC B7          4090   			OR	A			; 0 means MOS returned OK
0015ED C8          4091   			RET	Z			; So don't do anything
0015EE C3 93 13    4092   			JP 	OSERROR			; Otherwise it's a MOS error
0015F1             4093   
0015F1 7E          4094   SKIPSP:			LD      A,(HL)
0015F2 FE 20       4095           		CP      ' '
0015F4 C0          4096           		RET     NZ
0015F5 23          4097           		INC     HL
0015F6 18 F9       4098           		JR      SKIPSP
0015F8             4099   
0015F8 E6 7F       4100   UPPRC:  		AND     7FH
0015FA FE 60       4101   			CP      '`'
0015FC D8          4102   			RET     C
0015FD E6 5F       4103   			AND     5FH			; CONVERT TO UPPER CASE
0015FF C9          4104   			RET
001600             4105   
001600             4106   ; Each command has bit 7 of the last character set, and is followed by the address of the handler
001600             4107   ; These must be in alphabetical order
001600             4108   ;
001600 42 59 45    4109   COMDS:  		DB	"BY","E"+80h		; BYE
001603 10 16       4110   			DW	BYE
001605 45 44 49 54 4111   			DB	"EDI","T"+80h		; EDIT
001609 1B 16       4112   			DW	STAR_EDIT
00160B 46 58       4113   			DB	"F","X"+80h		; FX
00160D 57 16       4114   			DW	STAR_FX
00160F             4115   ;			DB	'VERSIO','N'+80h	; VERSION
00160F             4116   ;			DW	STAR_VERSION
00160F FF          4117   			DB	FFh
001610             4118   
001610             4119   ; *BYE
001610             4120   ;
001610 CD BF 0D    4121   BYE:			CALL	VBLANK_STOP		; Restore MOS interrupts
001613 5B DD E1    4122   			POP.LIL	IX 			; The return address to init
001616 21 00 00    4123   			LD	HL, 0			; The return code
001619 DD E9       4124   			JP	(IX)
00161B             4125   
00161B             4126   ; *EDIT linenum
00161B             4127   ;
00161B CD 35 0E    4128   STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
00161E EB          4129   			EX	DE, HL			; HL: Line number
00161F CD 43 41    4130   			CALL	FINDL			; HL: Address in RAM of tokenised line
001622 3E 29       4131   			LD	A, 41			; F:NZ If the line is not found
001624 C2 44 3F    4132   			JP	NZ, ERROR_		; Do error 41: No such line in that case
001627             4133   ;
001627             4134   ; Use LISTIT to output the line to the ACCS buffer
001627             4135   ;
001627 23          4136   			INC	HL			; Skip the length byte
001628 5E          4137   			LD	E, (HL)			; Fetch the line number
001629 23          4138   			INC	HL
00162A 56          4139   			LD	D, (HL)
00162B 23          4140   			INC	HL
00162C DD 21 00 52 4141   			LD	IX, ACCS		; Pointer to where the copy is to be stored
001630 DD 22 10 51 4142   			LD	(OSWRCHPT), IX
001634 DD 21 FE 54 4143   			LD	IX, LISTON		; Pointer to LISTON variable in RAM
001638 DD 7E 00    4144   			LD	A, (IX)			; Store that variable
00163B F5          4145   			PUSH	AF
00163C DD 36 00 09 4146   			LD	(IX), 09h		; Set to echo to buffer
001640 CD 5D 40    4147   			CALL	LISTIT
001643 F1          4148   			POP	AF
001644 DD 77 00    4149   			LD	(IX), A			; Restore the original LISTON variable
001647 21 00 52    4150   			LD	HL, ACCS		; HL: ACCS
00164A 5D          4151   			LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
00164B CD CD 11    4152   			CALL	OSLINE1			; Invoke the editor
00164E CD 1D 13    4153   			CALL	OSEDIT
001651 DC 1A 40    4154   			CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
001654 C3 B0 37    4155   			JP      CLOOP			; Jump back to immediate mode
001657             4156   
001657             4157   ; OSCLI FX n
001657             4158   ;
001657 CD 35 0E    4159   STAR_FX:		CALL	ASC_TO_NUMBER
00165A 4B          4160   			LD	C, E			; C: Save FX #
00165B CD 35 0E    4161   			CALL	ASC_TO_NUMBER
00165E 7A          4162   			LD	A, D  			; Is first parameter > 255?
00165F B7          4163   			OR 	A
001660 28 03       4164   			JR	Z, STAR_FX1		; Yes, so skip next bit
001662 EB          4165   			EX	DE, HL 			; Parameter is 16-bit
001663 18 06       4166   			JR	STAR_FX2
001665             4167   ;
001665 43          4168   STAR_FX1:		LD	B, E 			; B: Save First parameter
001666 CD 35 0E    4169   			CALL	ASC_TO_NUMBER		; Fetch second parameter
001669 68          4170   			LD	L, B 			; L: First parameter
00166A 63          4171   			LD	H, E 			; H: Second parameter
00166B             4172   ;
00166B 79          4173   STAR_FX2:		LD	A, C 			; A: FX #
00166C C3 6D 14    4174   			JP	OSBYTE
00166F             4175   
00166F             4176   ; Helper Functions
00166F             4177   ;
00166F DD E5       4178   WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
001671             4179   			MOSCALL	mos_sysvars		; Fetch pointer to system variables
001671 3E 08       0001M1 			LD	A, function
001673 49 CF       0002M1 			RST.LIS	08h
001675 5B DD 7E 00 4180   			LD.LIL	A, (IX + sysvar_time + 0)
001679 5B DD BE 00 4181   @@:			CP.LIL 	A, (IX + sysvar_time + 0)
00167D 28 FA       4182   			JR	Z, @B
00167F DD E1       4183   			POP	IX
001681 C9          4184   			RET
001682             4185   			; --- End agon_os.asm ---
001682             4186   
001682             4187   ; --- Begin eval.asm ---
001682             4188   ;
001682             4189   ;Automatically created from original source on 2024-12-15 15:29:12
001682             4190   ;
001682             4191                   .ASSUME ADL = 0
001682             4192   ;	.ORG 0x0000
001682             4193   ;                SEGMENT CODE
001682             4194   ;
001682             4195   ;                XDEF	COUNT0
001682             4196   ;                XDEF	COUNT1
001682             4197   ;
001682             4198   ;BBC BASIC INTERPRETER - Z80 VERSION
001682             4199   ;EVALUATE EXPRESSION MODULE - "EVAL"
001682             4200   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
001682             4201   ;
001682             4202   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
001682             4203   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
001682             4204   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
001682             4205   ;
001682             4206   ;VERSION 2.3, 07-05-1984
001682             4207   ;VERSION 3.0, 08-03-1987
001682             4208   ;VERSION 5.0, 31-05-2024
001682             4209   ;
001682             4210   ;BINARY FLOATING POINT REPRESENTATION:
001682             4211   ; 32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
001682             4212   ; 8 BIT EXCESS-128 SIGNED EXPONENT
001682             4213   ; SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
001682             4214   ; MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
001682             4215   ;
001682             4216   ;BINARY INTEGER REPRESENTATION:
001682             4217   ; 32 BIT 2'S-COMPLEMENT SIGNED INTEGER
001682             4218   ; "EXPONENT" BYTE = 0 (WHEN PRESENT)
001682             4219   ;
001682             4220   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
001682             4221   ;                            EXPONENT - C
001682             4222   ;
001682             4223   ;                XDEF	EXPR
001682             4224   ;                XDEF	EXPRN
001682             4225   ;                XDEF	EXPRI
001682             4226   ;                XDEF	EXPRS
001682             4227   ;                XDEF	ITEMI
001682             4228   ;                XDEF	CONS
001682             4229   ;                XDEF	LOADS
001682             4230   ;                XDEF	VAL0
001682             4231   ;                XDEF	SFIX
001682             4232   ;                XDEF	STR
001682             4233   ;                XDEF	HEXSTR
001682             4234   ;                XDEF	LOAD4
001682             4235   ;                XDEF	LOADN
001682             4236   ;                XDEF	DLOAD5
001682             4237   ;                XDEF	TEST
001682             4238   ;                XDEF	ZERO
001682             4239   ;                XDEF	COMMA
001682             4240   ;                XDEF	BRAKET
001682             4241   ;                XDEF	DECODE
001682             4242   ;                XDEF	PUSHS
001682             4243   ;                XDEF	POPS
001682             4244   ;                XDEF	SEARCH
001682             4245   ;                XDEF	SCP
001682             4246   ;                XDEF	LETARR
001682             4247   ;
001682             4248   ;                XREF	MUL16
001682             4249   ;                XREF	ERROR_
001682             4250   ;                XREF	SYNTAX
001682             4251   ;                XREF	CHANEL
001682             4252   ;                XREF	CHNL
001682             4253   ;                XREF	STOREN
001682             4254   ;                XREF	STORE4
001682             4255   ;                XREF	STORE5
001682             4256   ;                XREF	STACCS
001682             4257   ;                XREF	CHECK
001682             4258   ;                XREF	USR
001682             4259   ;                XREF	VAR_
001682             4260   ;                XREF	FN
001682             4261   ;                XREF	XEQ
001682             4262   ;                XREF	NXT
001682             4263   ;                XREF	X14OR5
001682             4264   ;                XREF	MODIFY
001682             4265   ;                XREF	MODIFS
001682             4266   ;                XREF	TERMQ
001682             4267   ;
001682             4268   ;                XREF	GETVAR
001682             4269   ;                XREF	LEXAN2
001682             4270   ;                XREF	RANGE
001682             4271   ;                XREF	GETTOP
001682             4272   ;
001682             4273   ;                XREF	STAVAR
001682             4274   ;                XREF	PAGE_
001682             4275   ;                XREF	LOMEM
001682             4276   ;                XREF	HIMEM
001682             4277   ;                XREF	RANDOM
001682             4278   ;                XREF	COUNT
001682             4279   ;                XREF	LISTON
001682             4280   ;                XREF	PC
001682             4281   ;                XREF	ERL
001682             4282   ;                XREF	ERR
001682             4283   ;                XREF	ACCS
001682             4284   ;                XREF	ERRTXT
001682             4285   ;                XREF	KEYWDS
001682             4286   ;                XREF	KEYWDL
001682             4287   ;                XREF	FREE
001682             4288   ;                XREF	BUFFER
001682             4289   ;
001682             4290   ;                XREF	OSRDCH
001682             4291   ;                XREF	OSOPEN
001682             4292   ;                XREF	OSBGET
001682             4293   ;                XREF	OSSTAT
001682             4294   ;                XREF	GETCSR
001682             4295   ;                XREF	GETIME
001682             4296   ;                XREF	GETIMS
001682             4297   ;                XREF	GETEXT
001682             4298   ;                XREF	GETPTR
001682             4299   ;                XREF	OSKEY
001682             4300   ;
001682             4301   ;                XREF	POINT
001682             4302   ;                XREF	ADVAL
001682             4303   ;                XREF	TINTFN
001682             4304   ;                XREF	MODEFN
001682             4305   ;                XREF	WIDFN
001682             4306   ;
001682             4307   ;                XREF	FPP
001682             4308   ;
001682             4309   FUNTOK:         EQU	8DH		;1st FUNCTION TOKEN
001682             4310   TMOD:           EQU	83H
001682             4311   TLEN:           EQU	0A9H
001682             4312   ; TTO:            EQU	0B8H	; IN main.asm
001682             4313   ; TDIM:           EQU	0DEH	; IN main.asm
001682             4314   TEND:           EQU	0E0H
001682             4315   TMODE:          EQU	0EBH
001682             4316   TREPORT:        EQU	0F6H
001682             4317   TWIDTH:         EQU	0FEH
001682             4318   TTINT:          EQU	0AH
001682             4319   ; TBY:            EQU	0FH	; IN main.asm
001682             4320   ;
001682             4321   ;TABLE OF ADDRESSES FOR FUNCTIONS:
001682             4322   ;
001682 60 1F       4323   FUNTBL:         DW	DECODE		;Line number
001684 5B 1B       4324                   DW	OPENIN		;OPENIN
001686 78 1B       4325                   DW	PTRev		;PTR
001688 2D 1B       4326                   DW	PAGEVev		;PAGE
00168A 80 1B       4327                   DW	TIMEVev		;TIME
00168C 23 1B       4328                   DW	LOMEMVev		;LOMEM
00168E 28 1B       4329                   DW	HIMEMVev		;HIMEM
001690 CC 1B       4330                   DW	ABSev		;ABS
001692 08 1C       4331                   DW	ACSev		;ACS
001694 53 02       4332                   DW	ADVAL		;ADVAL
001696 10 1B       4333                   DW	ASC		;ASC
001698 00 1C       4334                   DW	ASNev		;ASN
00169A 04 1C       4335                   DW	ATNev		;ATN
00169C EC 1A       4336                   DW	BGET		;BGET
00169E EC 1B       4337                   DW	COSev		;COS
0016A0 4B 1B       4338                   DW	COUNTV		;COUNT
0016A2 D4 1B       4339                   DW	DEGev		;DEG
0016A4 41 1B       4340                   DW	ERLV		;ERL
0016A6 46 1B       4341                   DW	ERRV		;ERR
0016A8 2C 1C       4342                   DW	EVAL_		;EVAL_
0016AA F4 1B       4343                   DW	EXPev		;EXP
0016AC 70 1B       4344                   DW	EXTev		;EXT
0016AE F8 1F       4345                   DW	ZERO		;FALSE
0016B0 E3 29       4346                   DW	FN		;FN
0016B2 FA 1A       4347                   DW	GET		;GET
0016B4 F5 1A       4348                   DW	INKEY		;INKEY
0016B6 A5 1D       4349                   DW	INSTR		;INSTR(
0016B8 E0 1B       4350                   DW	INT_ev		;INT_
0016BA 1D 1B       4351                   DW	LEN		;LEN
0016BC F8 1B       4352                   DW	LNev		;LN
0016BE FC 1B       4353                   DW	LOGev		;LOG
0016C0 D0 1B       4354                   DW	CPL_ev		;NOT
0016C2 58 1B       4355                   DW	OPENUP		;OPENUP
0016C4 56 1B       4356                   DW	OPENOT		;OPENOUT
0016C6 C8 1B       4357                   DW	PIev		;PI
0016C8 20 02       4358                   DW	POINT		;POINT(
0016CA D5 1A       4359                   DW	POS		;POS
0016CC D8 1B       4360                   DW	RADev		;RAD
0016CE 59 1C       4361                   DW	RND		;RND
0016D0 DC 1B       4362                   DW	SGNev		;SGN
0016D2 F0 1B       4363                   DW	SINev		;SIN
0016D4 E4 1B       4364                   DW	SQRev		;SQR
0016D6 E8 1B       4365                   DW	TANev		;TAN
0016D8 32 1B       4366                   DW	TOPV		;TO(P)
0016DA BD 1B       4367                   DW	TRUEev		;TRUE
0016DC 3F 30       4368                   DW	USR		;USR
0016DE 1F 1C       4369                   DW	VALev		;VAL
0016E0 DB 1A       4370                   DW	VPOS		;VPOS
0016E2 26 1E       4371                   DW	CHRS		;CHR$
0016E4 2D 1E       4372                   DW	GETS		;GET$
0016E6 8E 1E       4373                   DW	INKEYS		;INKEY$
0016E8 CE 1E       4374                   DW	LEFTS		;LEFT$(
0016EA 9E 1E       4375                   DW	MIDS		;MID$(
0016EC FC 1E       4376                   DW	RIGHTS		;RIGHT$(
0016EE B8 1F       4377                   DW	STRS		;STR$
0016F0 26 1F       4378                   DW	STRING_		;STRING_$(
0016F2 E0 1A       4379                   DW	EOF		;EOF
0016F4 E9 1C       4380                   DW	SUM		;SUM
0016F6             4381   ;
0016F6             4382   FUNTBL_END:     EQU	$
0016F6             4383   ; TCMD:           EQU	FUNTOK+(FUNTBL_END-FUNTBL)/2
0016F6             4384   TCMD:           EQU	FUNTBL_END-FUNTBL/2+FUNTOK
0016F6             4385   ;
0016F6             4386   ; CR             EQU	0DH
0016F6             4387   ; LF             EQU	0AH
0016F6             4388   AND_:           EQU	80H
0016F6             4389   DIV_:           EQU	81H
0016F6             4390   EOR:            EQU	82H
0016F6             4391   MOD_:           EQU	83H
0016F6             4392   OR_:            EQU	84H
0016F6             4393   ;
0016F6 AB 1B       4394   SOPTBL:         DW	SLE		;<= (STRING)
0016F8 B3 1B       4395                   DW	SNE		;<>
0016FA A5 1B       4396                   DW	SGE		;>=
0016FC 98 1B       4397                   DW	SLT		;<
0016FE B9 1B       4398                   DW	SEQ		;=
001700 9E 1B       4399                   DW	SGT		;>
001702             4400   ;
001702             4401   ;EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
001702             4402   ; Expression type is returned in A'F':
001702             4403   ; Numeric - A' bit 7=0, F' sign bit cleared.
001702             4404   ; String - A' bit 7=1, F' sign bit set.
001702             4405   ;Floating-point or integer result returned in HLH'L'C
001702             4406   ; Integer result denoted by C=0 and HLH'L' non-zero.
001702             4407   ;String result returned in string accumulator, DE set.
001702             4408   ;
001702             4409   ;Hierarchy is: (1) Variables, functions,
001702             4410   ; constants, bracketed expressions.
001702             4411   ; (2) ^
001702             4412   ; (3) * / MOD DIV
001702             4413   ; (4) + -
001702             4414   ; (5) = <> <= >= > <
001702             4415   ; (6) AND
001702             4416   ; (7) EOR OR
001702             4417   ;
001702 CD 17 17    4418   EXPR:           CALL	EXPR1		;GET FIRST OPERAND
001705 FE 82       4419   EXPR0A:         CP	EOR		;CHECK OPERATOR
001707 28 03       4420                   JR	Z,EXPR0B
001709 FE 84       4421                   CP	OR_
00170B C0          4422                   RET	NZ
00170C CD 73 20    4423   EXPR0B:         CALL	SAVEev		;SAVE FIRST OPERAND
00170F CD 17 17    4424                   CALL	EXPR1		;GET SECOND OPERAND
001712 CD 83 20    4425                   CALL	DOIT		;DO OPERATION
001715 18 EE       4426                   JR	EXPR0A		;CONTINUE
001717             4427   ;
001717 CD 28 17    4428   EXPR1:          CALL	EXPR2
00171A FE 80       4429   EXPR1A:         CP	AND_
00171C C0          4430                   RET	NZ
00171D CD 73 20    4431                   CALL	SAVEev
001720 CD 28 17    4432                   CALL	EXPR2
001723 CD 83 20    4433                   CALL	DOIT
001726 18 F2       4434                   JR	EXPR1A
001728             4435   ;
001728 CD A0 17    4436   EXPR2:          CALL	EXPR3ev
00172B CD 6A 20    4437                   CALL	RELOPQ
00172E C0          4438                   RET	NZ
00172F 47          4439                   LD	B,A
001730 FD 23       4440                   INC	IY		;BUMP OVER OPERATOR
001732 CD 0B 45    4441                   CALL	NXT
001735 CD 6A 20    4442                   CALL	RELOPQ		;COMPOUND OPERATOR?
001738 20 07       4443                   JR	NZ,EXPR2B
00173A FD 23       4444                   INC	IY
00173C B8          4445                   CP	B
00173D 28 1C       4446                   JR	Z,SHIFT		;SHIFT | ==
00173F 80          4447                   ADD	A,B
001740 47          4448                   LD	B,A
001741 78          4449   EXPR2B:         LD	A,B
001742 08          4450                   EX	AF,AF'
001743 FA 73 17    4451                   JP	M,EXPR2S
001746 08          4452                   EX	AF,AF'
001747 D6 04       4453                   SUB	4
001749 FE 3A       4454                   CP	'>'-4
00174B 20 02       4455                   JR	NZ,EXPR2C
00174D C6 02       4456                   ADD	A,2
00174F E6 0F       4457   EXPR2C:         AND	0FH
001751 CD 77 20    4458   EXPR2D:         CALL	SAVE1
001754 CD A0 17    4459                   CALL	EXPR3ev
001757 CD 83 20    4460                   CALL	DOIT		;Must NOT be "JP DOIT"
00175A C9          4461                   RET
00175B             4462   ;
00175B FE 3D       4463   SHIFT:          CP	'='
00175D 28 E2       4464                   JR	Z,EXPR2B	;==
00175F CD 0B 45    4465                   CALL	NXT
001762 CD 6A 20    4466                   CALL	RELOPQ
001765 20 07       4467                   JR	NZ,SHIFT1
001767 B8          4468                   CP	B
001768 C2 E0 25    4469                   JP	NZ,SYNTAX
00176B FD 23       4470                   INC	IY
00176D 04          4471                   INC	B
00176E 78          4472   SHIFT1:         LD	A,B
00176F D6 12       4473                   SUB	18
001771 18 DE       4474                   JR	EXPR2D
001773             4475   ;
001773 08          4476   EXPR2S:         EX	AF,AF'
001774 3D          4477                   DEC	A
001775 E6 07       4478                   AND	7
001777 CD 19 20    4479                   CALL	PUSHS		;SAVE STRING ON STACK
00177A F5          4480                   PUSH	AF		;SAVE OPERATOR
00177B CD A0 17    4481                   CALL	EXPR3ev		;SECOND STRING
00177E 08          4482                   EX	AF,AF'
00177F F2 6E 18    4483                   JP	P,MISMATev
001782 F1          4484                   POP	AF
001783 4B          4485                   LD	C,E		;LENGTH OF STRING #2
001784 D1          4486                   POP	DE
001785 21 00 00    4487                   LD	HL,0
001788 39          4488                   ADD	HL,SP
001789 43          4489                   LD	B,E		;LENGTH OF STRING #1
00178A D5          4490                   PUSH	DE
00178B 11 00 52    4491                   LD	DE,ACCS
00178E EB          4492                   EX	DE,HL
00178F CD BB 20    4493                   CALL	DISPT2
001792 D1          4494                   POP	DE
001793 EB          4495                   EX	DE,HL
001794 26 00       4496                   LD	H,0
001796 39          4497                   ADD	HL,SP
001797 F9          4498                   LD	SP,HL
001798 EB          4499                   EX	DE,HL
001799 AF          4500                   XOR	A		;NUMERIC MARKER
00179A 4F          4501                   LD	C,A		;INTEGER MARKER
00179B 08          4502                   EX	AF,AF'
00179C FD 7E 00    4503                   LD	A,(IY)
00179F C9          4504                   RET
0017A0             4505   ;
0017A0 CD EE 17    4506   EXPR3ev:          CALL	EXPR4
0017A3 FE 2D       4507   EXPR3A:         CP	'-'
0017A5 28 08       4508                   JR	Z,EXPR3B
0017A7 FE 2B       4509                   CP	'+'
0017A9 C0          4510                   RET	NZ
0017AA 08          4511                   EX	AF,AF'
0017AB FA BA 17    4512                   JP	M,EXPR3S
0017AE 08          4513                   EX	AF,AF'
0017AF CD 73 20    4514   EXPR3B:         CALL	SAVEev
0017B2 CD EE 17    4515                   CALL	EXPR4
0017B5 CD 83 20    4516                   CALL	DOIT
0017B8 18 E9       4517                   JR	EXPR3A
0017BA             4518   ;
0017BA 08          4519   EXPR3S:         EX	AF,AF'
0017BB FD 23       4520                   INC	IY		;BUMP PAST '+'
0017BD CD 19 20    4521                   CALL	PUSHS		;SAVE STRING ON STACK
0017C0 CD EE 17    4522                   CALL	EXPR4		;SECOND STRING
0017C3 08          4523                   EX	AF,AF'
0017C4 F2 6E 18    4524                   JP	P,MISMATev
0017C7 4B          4525                   LD	C,E		;C=LENGTH
0017C8 D1          4526                   POP	DE
0017C9 D5          4527                   PUSH	DE
0017CA 21 00 52    4528                   LD	HL,ACCS
0017CD 54          4529                   LD	D,H
0017CE 79          4530                   LD	A,C
0017CF B7          4531                   OR	A
0017D0 28 0E       4532                   JR	Z,EXP3S3
0017D2 45          4533                   LD	B,L
0017D3 6F          4534                   LD	L,A		;SOURCE
0017D4 83          4535                   ADD	A,E
0017D5 5F          4536                   LD	E,A		;DESTINATION
0017D6 3E 13       4537                   LD	A,19
0017D8 38 6B       4538                   JR	C,ERROR2ev	;"String too long"
0017DA D5          4539                   PUSH	DE
0017DB 1D          4540                   DEC	E
0017DC 2D          4541                   DEC	L
0017DD ED B8       4542                   LDDR			;COPY
0017DF D1          4543                   POP	DE
0017E0 D9          4544   EXP3S3:         EXX
0017E1 C1          4545                   POP	BC
0017E2 CD 37 20    4546                   CALL	POPS		;RESTORE FROM STACK
0017E5 D9          4547                   EXX
0017E6 F6 80       4548                   OR	80H		;FLAG STRING
0017E8 08          4549                   EX	AF,AF'
0017E9 FD 7E 00    4550                   LD	A,(IY)
0017EC 18 B5       4551                   JR	EXPR3A
0017EE             4552   ;
0017EE CD 14 18    4553   EXPR4:          CALL	EXPR5
0017F1 FE 2A       4554   EXPR4A:         CP	'*'
0017F3 28 0B       4555                   JR	Z,EXPR4B
0017F5 FE 2F       4556                   CP	'/'
0017F7 28 07       4557                   JR	Z,EXPR4B
0017F9 FE 83       4558                   CP	MOD_
0017FB 28 03       4559                   JR	Z,EXPR4B
0017FD FE 81       4560                   CP	DIV_
0017FF C0          4561                   RET	NZ
001800 CD 73 20    4562   EXPR4B:         CALL	SAVEev
001803 CD 14 18    4563                   CALL	EXPR5
001806 CD 83 20    4564                   CALL	DOIT
001809 18 E6       4565                   JR	EXPR4A
00180B             4566   ;
00180B 7B          4567   EXPR45:         LD	A,E
00180C FE 2B       4568                   CP	'+'
00180E 28 DE       4569                   JR	Z,EXPR4
001810 FE 2D       4570                   CP	'-'
001812 28 DA       4571                   JR	Z,EXPR4
001814 CD D0 18    4572   EXPR5:          CALL	ITEM
001817 B7          4573                   OR	A		;TEST TYPE
001818 08          4574                   EX	AF,AF'		;SAVE TYPE
001819 CD 0B 45    4575   EXPR5A:         CALL	NXT
00181C FE 5E       4576                   CP	'^'
00181E C0          4577                   RET	NZ
00181F CD 73 20    4578                   CALL	SAVEev
001822 CD D0 18    4579                   CALL	ITEM
001825 B7          4580                   OR	A
001826 08          4581                   EX	AF,AF'
001827 CD 83 20    4582                   CALL	DOIT
00182A 18 ED       4583                   JR	EXPR5A
00182C             4584   ;
00182C CD 02 17    4585   EXPRN:          CALL	EXPR
00182F 08          4586                   EX	AF,AF'
001830 F0          4587                   RET	P
001831 18 3B       4588                   JR	MISMATev
001833             4589   ;
001833 CD 02 17    4590   EXPRI:          CALL	EXPR
001836 08          4591                   EX	AF,AF'
001837 F2 17 1C    4592                   JP	P,SFIX
00183A 18 32       4593                   JR	MISMATev
00183C             4594   ;
00183C CD 02 17    4595   EXPRS:          CALL	EXPR
00183F 08          4596                   EX	AF,AF'
001840 F8          4597                   RET	M
001841 18 2B       4598                   JR	MISMATev
001843             4599   ;
001843 3E 1C       4600   BADHEX:         LD	A,28
001845 C3 44 3F    4601   ERROR2ev:         JP	ERROR_		;"Bad HEX or binary"
001848             4602   ;
001848 D9          4603   NEGATEev:         EXX
001849 7C          4604                   LD	A,H
00184A 2F          4605                   CPL
00184B 67          4606                   LD	H,A
00184C 7D          4607                   LD	A,L
00184D 2F          4608                   CPL
00184E 6F          4609                   LD	L,A
00184F D9          4610                   EXX
001850 7C          4611                   LD	A,H
001851 2F          4612                   CPL
001852 67          4613                   LD	H,A
001853 7D          4614                   LD	A,L
001854 2F          4615                   CPL
001855 6F          4616                   LD	L,A
001856 D9          4617   ADD1ev:           EXX
001857 23          4618                   INC	HL
001858 7C          4619                   LD	A,H
001859 B5          4620                   OR	L
00185A D9          4621                   EXX
00185B 3E 00       4622                   LD	A,0		;NUMERIC MARKER
00185D C0          4623                   RET	NZ
00185E 23          4624                   INC	HL
00185F C9          4625                   RET
001860             4626   ;
001860 CD D0 18    4627   ITEMI:          CALL	ITEM
001863 B7          4628                   OR	A
001864 F2 17 1C    4629                   JP	P,SFIX
001867 18 05       4630                   JR	MISMATev
001869             4631   ;
001869 CD D0 18    4632   ITEMS:          CALL	ITEM
00186C B7          4633                   OR	A
00186D F8          4634                   RET	M
00186E 3E 06       4635   MISMATev:         LD	A,6
001870 18 D3       4636                   JR	ERROR2ev		;"Type mismatch"
001872             4637   ;
001872 CD 02 17    4638   ITEM1:          CALL	EXPR		;BRACKETED EXPR
001875 CD AE 20    4639                   CALL	BRAKET
001878 08          4640                   EX	AF,AF'
001879 C9          4641                   RET
00187A             4642   ;
00187A CD D0 18    4643   ITEMN:          CALL	ITEM
00187D B7          4644                   OR	A
00187E F0          4645                   RET	P
00187F 18 ED       4646                   JR	MISMATev
001881             4647   ;
001881             4648   ;HEX - Get hexadecimal constant.
001881             4649   ;   Inputs: ASCII string at (IY)
001881             4650   ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
001881             4651   ;           IY updated (points to delimiter)
001881             4652   ;
001881 CD F8 1F    4653   HEXev:            CALL	ZERO
001884 CD 57 20    4654                   CALL	HEXDIG
001887 38 BA       4655                   JR	C,BADHEX
001889 FD 23       4656   HEX1:           INC	IY
00188B E6 0F       4657                   AND	0FH
00188D 06 04       4658                   LD	B,4
00188F D9          4659   HEX2:           EXX
001890 29          4660                   ADD	HL,HL
001891 D9          4661                   EXX
001892 ED 6A       4662                   ADC	HL,HL
001894 10 F9       4663                   DJNZ	HEX2
001896 D9          4664                   EXX
001897 B5          4665                   OR	L
001898 6F          4666                   LD	L,A
001899 D9          4667                   EXX
00189A CD 57 20    4668                   CALL	HEXDIG
00189D 30 EA       4669                   JR	NC,HEX1
00189F AF          4670                   XOR	A
0018A0 C9          4671                   RET
0018A1             4672   ;
0018A1             4673   ;BIN - Get binary constant.
0018A1             4674   ;   Inputs: ASCII string at (IY)
0018A1             4675   ;  Outputs: Integer result in H'L'HL, C=0, A=0.
0018A1             4676   ;           IY updated (points to delimiter)
0018A1             4677   ;
0018A1 CD F8 1F    4678   BIN:            CALL	ZERO
0018A4 CD 4A 20    4679                   CALL	BINDIG
0018A7 38 9A       4680                   JR	C,BADHEX
0018A9 FD 23       4681   BIN1:           INC	IY
0018AB CB 1F       4682                   RR	A
0018AD D9          4683                   EXX
0018AE ED 6A       4684                   ADC	HL,HL
0018B0 D9          4685                   EXX
0018B1 ED 6A       4686                   ADC	HL,HL
0018B3 CD 4A 20    4687                   CALL	BINDIG
0018B6 30 F1       4688                   JR	NC,BIN1
0018B8 AF          4689                   XOR	A
0018B9 C9          4690                   RET
0018BA             4691   ;
0018BA             4692   ;MINUS - Unary minus.
0018BA             4693   ;   Inputs: IY = text pointer
0018BA             4694   ;  Outputs: Numeric result, same type as argument.
0018BA             4695   ;           Result in H'L'HLC
0018BA             4696   ;
0018BA CD 7A 18    4697   MINUS:          CALL	ITEMN
0018BD 0D          4698   MINUS0:         DEC	C
0018BE 0C          4699                   INC	C
0018BF 28 87       4700                   JR	Z,NEGATEev	;ZERO/INTEGER
0018C1 7C          4701                   LD	A,H
0018C2 EE 80       4702                   XOR	80H		;CHANGE SIGN (FP)
0018C4 67          4703                   LD	H,A
0018C5 AF          4704                   XOR	A		;NUMERIC MARKER
0018C6 C9          4705                   RET
0018C7             4706   ;
0018C7 CD D6 25    4707   ADDROF:         CALL	VAR_
0018CA E5          4708                   PUSH	HL
0018CB D9          4709                   EXX
0018CC E1          4710                   POP	HL
0018CD C3 50 1B    4711                   JP	COUNT1
0018D0             4712   ;
0018D0             4713   ;ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
0018D0             4714   ;Item type is returned in A: Bit 7=0 numeric.
0018D0             4715   ; Bit 7=1 string.
0018D0             4716   ;Numeric item returned in HLH'L'C.
0018D0             4717   ;String item returned in string accumulator,
0018D0             4718   ; DE addresses byte after last (E=length).
0018D0             4719   ;
0018D0 CD 86 32    4720   ITEM:           CALL	CHECK
0018D3 CD 0B 45    4721                   CALL	NXT
0018D6 FD 23       4722                   INC	IY
0018D8 FE 8D       4723                   CP	FUNTOK
0018DA 38 08       4724                   JR	C,ITEM0
0018DC FE C7       4725                   CP	TCMD
0018DE DA C1 20    4726                   JP	C,DISPATev	;FUNCTIONS
0018E1 C3 30 1A    4727                   JP	EXTRASev		;DIM, END, MODE, REPORT$, WIDTH
0018E4             4728   ;
0018E4 FE 3A       4729   ITEM0:          CP	':'
0018E6 30 25       4730                   JR	NC,ITEM2	;VARIABLES
0018E8 FE 30       4731                   CP	'0'
0018EA 30 7B       4732                   JR	NC,CONev		;NUMERIC CONSTANT
0018EC FE 28       4733                   CP	'('
0018EE 28 82       4734                   JR	Z,ITEM1		;EXPRESSION
0018F0 FE 2D       4735                   CP	'-'
0018F2 28 C6       4736                   JR	Z,MINUS		;UNARY MINUS
0018F4 FE 2B       4737                   CP	'+'
0018F6 28 82       4738                   JR	Z,ITEMN		;UNARY PLUS
0018F8 FE 2E       4739                   CP	'.'
0018FA 28 6B       4740                   JR	Z,CONev		;NUMERIC CONSTANT
0018FC FE 26       4741                   CP	'&'
0018FE 28 81       4742                   JR	Z,HEXev		;HEX CONSTANT
001900 FE 25       4743                   CP	'%'
001902 28 9D       4744                   JR	Z,BIN		;BINARY CONSTANT
001904 FE 22       4745                   CP	'"'
001906 28 72       4746                   JR	Z,CONS		;STRING CONSTANT
001908 FE 0A       4747                   CP	TTINT
00190A CA D0 1A    4748                   JP	Z,TINTev		;TINT FUNCTION
00190D FE 83       4749   ITEM2:          CP	TMOD
00190F CA 4D 1D    4750                   JP	Z,MODFUN	;MOD
001912 FE 5E       4751                   CP	'^'
001914 28 B1       4752                   JR	Z,ADDROF	;^ OPERATOR
001916 FD 2B       4753                   DEC	IY
001918 CD E3 41    4754                   CALL	GETVAR		;VARIABLE
00191B 20 2F       4755                   JR	NZ,NOSUCHev
00191D CB 77       4756                   BIT	6,A
00191F 20 7E       4757                   JR	NZ,ARRAYev
001921 B7          4758                   OR	A
001922 FA 0E 1A    4759                   JP	M,LOADS		;STRING VARIABLE
001925 CB 57       4760   LOADN:          BIT	2,A
001927 0E 00       4761                   LD	C,0
001929 28 16       4762                   JR	Z,LOAD1		;BYTE VARIABLE
00192B CB 47       4763                   BIT	0,A
00192D 28 03       4764                   JR	Z,LOAD4		;INTEGER VARIABLE
00192F DD 4E 04    4765   LOAD5:          LD	C,(IX+4)
001932 D9          4766   LOAD4:          EXX
001933 DD 6E 00    4767                   LD	L,(IX+0)
001936 DD 66 01    4768                   LD	H,(IX+1)
001939 D9          4769                   EXX
00193A DD 6E 02    4770                   LD	L,(IX+2)
00193D DD 66 03    4771                   LD	H,(IX+3)
001940 C9          4772                   RET
001941             4773   ;
001941 21 00 00    4774   LOAD1:          LD	HL,0
001944 D9          4775                   EXX
001945 26 00       4776                   LD	H,0
001947 DD 6E 00    4777                   LD	L,(IX+0)
00194A D9          4778                   EXX
00194B C9          4779                   RET
00194C             4780   ;
00194C DA E0 25    4781   NOSUCHev:         JP	C,SYNTAX
00194F 3A FE 54    4782                   LD	A,(LISTON)
001952 CB 6F       4783                   BIT	5,A
001954 3E 1A       4784                   LD	A,26
001956 20 36       4785                   JR	NZ,ERROR0ev	;"No such variable"
001958 FD 23       4786   NOS1:           INC	IY
00195A CD EF 43    4787                   CALL	RANGE
00195D 30 F9       4788                   JR	NC,NOS1
00195F DD 21 40 54 4789                   LD	IX,PC
001963 AF          4790                   XOR	A
001964 4F          4791                   LD	C,A
001965 18 CB       4792                   JR	LOAD4
001967             4793   ;
001967             4794   ;CON - Get unsigned numeric constant from ASCII string.
001967             4795   ;   Inputs: ASCII string at (IY-1)
001967             4796   ;  Outputs: Variable-type result in HLH'L'C
001967             4797   ;           IY updated (points to delimiter)
001967             4798   ;           A7 = 0 (numeric marker)
001967             4799   ;
001967 FD 2B       4800   CONev:            DEC	IY
001969 FD E5       4801                   PUSH	IY
00196B DD E1       4802                   POP	IX
00196D 3E 24       4803                   LD	A,36
00196F CD 15 45    4804                   CALL	FPP
001972 38 1A       4805                   JR	C,ERROR0ev
001974 DD E5       4806                   PUSH	IX
001976 FD E1       4807                   POP	IY
001978 AF          4808                   XOR	A
001979 C9          4809                   RET
00197A             4810   ;
00197A             4811   ;CONS - Get string constant from ASCII string.
00197A             4812   ;   Inputs: ASCII string at (IY)
00197A             4813   ;  Outputs: Result in string accumulator.
00197A             4814   ;           D = MS byte of ACCS, E = string length
00197A             4815   ;           A7 = 1 (string marker)
00197A             4816   ;           IY updated
00197A             4817   ;
00197A 11 00 52    4818   CONS:           LD	DE,ACCS
00197D FD 7E 00    4819   CONS3:          LD	A,(IY)
001980 FD 23       4820                   INC	IY
001982 FE 22       4821                   CP	'"'
001984 28 0B       4822                   JR	Z,CONS2
001986 12          4823   CONS1:          LD	(DE),A
001987 1C          4824                   INC	E
001988 FE 0D       4825                   CP	CR
00198A 20 F1       4826                   JR	NZ,CONS3
00198C 3E 09       4827                   LD	A,9
00198E C3 44 3F    4828   ERROR0ev:         JP	ERROR_		;"Missing """
001991             4829   ;
001991 FD 7E 00    4830   CONS2:          LD	A,(IY)
001994 FE 22       4831                   CP	'"'
001996 FD 23       4832                   INC	IY
001998 28 EC       4833                   JR	Z,CONS1
00199A FD 2B       4834                   DEC	IY
00199C 3E 80       4835                   LD	A,80H		;STRING MARKER
00199E C9          4836                   RET
00199F             4837   ;
00199F 3E 0E       4838   ARRAYev:          LD	A,14		;'Bad use of array'
0019A1 C3 44 3F    4839                   JP	ERROR_
0019A4             4840   ;
0019A4             4841   ; ARRLEN - Get start address and number of elements of an array
0019A4             4842   ;   Inputs: HL addresses array descriptor
0019A4             4843   ;  Outputs: HL = address of first element
0019A4             4844   ;           DE = total number of elements
0019A4             4845   ;           A = 0
0019A4             4846   ; Destroys: A,B,C,D,E,H,L,flags
0019A4             4847   ;
0019A4 7E          4848   ARRLEN:         LD	A,(HL)		;Number of dimensions
0019A5 23          4849                   INC	HL
0019A6 B7          4850                   OR	A
0019A7 28 F6       4851                   JR	Z,ARRAYev
0019A9 11 01 00    4852                   LD	DE,1
0019AC 4E          4853   ARLOOP:         LD	C,(HL)
0019AD 23          4854                   INC	HL
0019AE 46          4855                   LD	B,(HL)		;BC = size of this dimension
0019AF 23          4856                   INC	HL
0019B0 EB          4857                   EX	DE,HL
0019B1 F5          4858                   PUSH	AF
0019B2 D5          4859                   PUSH	DE
0019B3 CD BD 36    4860                   CALL	MUL16		;HL=HL*BC
0019B6 D1          4861                   POP	DE
0019B7 F1          4862                   POP	AF
0019B8 EB          4863                   EX	DE,HL
0019B9 3D          4864                   DEC	A
0019BA 20 F0       4865                   JR	NZ,ARLOOP
0019BC C9          4866                   RET
0019BD             4867   ;
0019BD CD 0B 45    4868   GETARR:         CALL	NXT
0019C0 CD E3 41    4869                   CALL	GETVAR
0019C3 20 87       4870                   JR	NZ,NOSUCHev
0019C5 CB 77       4871                   BIT	6,A
0019C7 37          4872                   SCF
0019C8 28 82       4873                   JR	Z,NOSUCHev
0019CA E6 8F       4874                   AND	8FH
0019CC 47          4875                   LD	B,A		;Type + size
0019CD 7E          4876   GETAR1:         LD	A,(HL)
0019CE 23          4877                   INC	HL
0019CF 66          4878                   LD	H,(HL)
0019D0 6F          4879                   LD	L,A
0019D1 E6 FE       4880                   AND	0FEH
0019D3 B4          4881                   OR	H
0019D4 28 C9       4882                   JR	Z,ARRAYev		;Bad use of array
0019D6 C9          4883                   RET
0019D7             4884   ;
0019D7 CD 0B 45    4885   GETARB:         CALL	NXT
0019DA FE 28       4886                   CP	'('
0019DC 20 DF       4887                   JR	NZ,GETARR
0019DE FD 23       4888                   INC	IY
0019E0 CD BD 19    4889                   CALL	GETARR
0019E3 CD AE 20    4890                   CALL	BRAKET
0019E6 C9          4891                   RET
0019E7             4892   ;
0019E7 CB 57       4893   DLOADN:         BIT	2,A
0019E9 06 00       4894                   LD	B,0
0019EB 28 16       4895                   JR	Z,DLOAD1	;BYTE VARIABLE
0019ED CB 47       4896                   BIT	0,A
0019EF 28 03       4897                   JR	Z,DLOAD4	;INTEGER VARIABLE
0019F1 DD 46 04    4898   DLOAD5:         LD	B,(IX+4)
0019F4 D9          4899   DLOAD4:         EXX
0019F5 DD 5E 00    4900                   LD	E,(IX+0)
0019F8 DD 56 01    4901                   LD	D,(IX+1)
0019FB D9          4902                   EXX
0019FC DD 5E 02    4903                   LD	E,(IX+2)
0019FF DD 56 03    4904                   LD	D,(IX+3)
001A02 C9          4905                   RET
001A03             4906   ;
001A03 11 00 00    4907   DLOAD1:         LD	DE,0
001A06 D9          4908                   EXX
001A07 16 00       4909                   LD	D,0
001A09 DD 5E 00    4910                   LD	E,(IX+0)
001A0C D9          4911                   EXX
001A0D C9          4912                   RET
001A0E             4913   ;
001A0E 11 00 52    4914   LOADS:          LD	DE,ACCS
001A11 1F          4915                   RRA
001A12 30 10       4916                   JR	NC,LOADS2	;FIXED STRING
001A14 CD 32 19    4917                   CALL	LOAD4
001A17 D9          4918                   EXX
001A18 7D          4919                   LD	A,L
001A19 D9          4920                   EXX
001A1A B7          4921                   OR	A
001A1B 4F          4922                   LD	C,A
001A1C 3E 80       4923                   LD	A,80H		;STRING MARKER
001A1E C8          4924                   RET	Z
001A1F 06 00       4925                   LD	B,0
001A21 ED B0       4926                   LDIR
001A23 C9          4927                   RET
001A24             4928   ;
001A24 7E          4929   LOADS2:         LD	A,(HL)
001A25 12          4930                   LD	(DE),A
001A26 23          4931                   INC	HL
001A27 FE 0D       4932                   CP	CR
001A29 3E 80       4933   REPDUN:         LD	A,80H		;STRING MARKER
001A2B C8          4934                   RET	Z
001A2C 1C          4935                   INC	E
001A2D 20 F5       4936                   JR	NZ,LOADS2
001A2F C9          4937                   RET			;RETURN NULL STRING
001A30             4938   ;
001A30             4939   ; Version 5 extensions:
001A30             4940   ;
001A30 FE EB       4941   EXTRASev:         CP	TMODE
001A32 CA 5F 02    4942                   JP	Z,MODEFN	;MODE
001A35 FE FE       4943                   CP	TWIDTH
001A37 CA 69 02    4944                   JP	Z,WIDFN		;WIDTH
001A3A FE F6       4945                   CP	TREPORT
001A3C 28 11       4946                   JR	Z,REPORS	;REPORT$
001A3E FE E0       4947                   CP	TEND
001A40 28 07       4948                   JR	Z,ENDFUN	;END
001A42 FE DE       4949                   CP	TDIM
001A44 28 44       4950                   JR	Z,DIMFUN	;DIM
001A46 C3 E0 25    4951   SYNERR:         JP	SYNTAX		; 'Syntax error'
001A49             4952   ;
001A49             4953   ; END (function)
001A49             4954   ;
001A49 2A E0 54    4955   ENDFUN:         LD	HL,(FREE)
001A4C C3 50 1B    4956                   JP	COUNT1
001A4F             4957   ;
001A4F             4958   ; REPORT$
001A4F             4959   ;
001A4F FD 7E 00    4960   REPORS:         LD	A,(IY)
001A52 FE 24       4961                   CP	'$'
001A54 20 F0       4962                   JR	NZ,SYNERR
001A56 FD 23       4963                   INC	IY
001A58 2A EE 54    4964                   LD	HL,(ERRTXT)
001A5B 11 00 52    4965                   LD	DE,ACCS
001A5E 7E          4966   REPCPY:         LD	A,(HL)
001A5F B7          4967                   OR	A
001A60 28 C7       4968                   JR	Z,REPDUN
001A62 ED A0       4969                   LDI
001A64 FE A0       4970                   CP	160
001A66 EA 5E 1A    4971                   JP	PE,REPCPY
001A69 FE 0A       4972                   CP	LF
001A6B 28 F1       4973                   JR	Z,REPCPY
001A6D 1D          4974                   DEC	E
001A6E E5          4975                   PUSH	HL
001A6F 21 84 38    4976                   LD	HL,KEYWDS
001A72 01 5B 03    4977                   LD	BC,KEYWDL
001A75 ED B1       4978                   CPIR
001A77 06 A0       4979                   LD	B,160
001A79 FE 91       4980                   CP	145
001A7B EA 7F 1A    4981                   JP	PE,REPTOK
001A7E 04          4982                   INC	B
001A7F 7E          4983   REPTOK:         LD	A,(HL)
001A80 ED A0       4984                   LDI
001A82 B8          4985                   CP	B
001A83 EA 7F 1A    4986                   JP	PE,REPTOK
001A86 E1          4987                   POP	HL
001A87 1D          4988                   DEC	E
001A88 18 D4       4989                   JR	REPCPY
001A8A             4990   ;
001A8A             4991   ; DIM(array()[,sub])
001A8A             4992   ;
001A8A CD 0B 45    4993   DIMFUN:         CALL	NXT
001A8D FE 28       4994                   CP	'('
001A8F 20 09       4995                   JR	NZ,DIMF0
001A91 FD 23       4996                   INC	IY
001A93 CD 9A 1A    4997                   CALL	DIMF0
001A96 CD AE 20    4998                   CALL	BRAKET
001A99 C9          4999                   RET
001A9A             5000   ;
001A9A CD BD 19    5001   DIMF0:          CALL	GETARR
001A9D E5          5002                   PUSH	HL
001A9E CD 0B 45    5003                   CALL	NXT
001AA1 1E 00       5004                   LD	E,0
001AA3 FE 2C       5005                   CP	','
001AA5 20 0B       5006                   JR	NZ,DIMF1
001AA7 FD 23       5007                   INC	IY
001AA9 CD 33 18    5008                   CALL	EXPRI
001AAC D9          5009                   EXX
001AAD EB          5010                   EX	DE,HL
001AAE 1C          5011                   INC	E
001AAF 1D          5012                   DEC	E
001AB0 28 19       5013                   JR	Z,BADSUB
001AB2 E1          5014   DIMF1:          POP	HL
001AB3 7E          5015                   LD	A,(HL)
001AB4 23          5016                   INC	HL
001AB5 BB          5017                   CP	E
001AB6 38 13       5018                   JR	C,BADSUB
001AB8 1D          5019                   DEC	E
001AB9 FA C6 1A    5020                   JP	M,DIMF3
001ABC 19          5021                   ADD	HL,DE
001ABD 19          5022                   ADD	HL,DE
001ABE 7E          5023                   LD	A,(HL)
001ABF 23          5024                   INC	HL
001AC0 66          5025                   LD	H,(HL)
001AC1 6F          5026                   LD	L,A
001AC2 2B          5027                   DEC	HL
001AC3 C3 50 1B    5028   DIMF2:          JP	COUNT1
001AC6 6F          5029   DIMF3:          LD	L,A
001AC7 26 00       5030                   LD	H,0
001AC9 18 F8       5031                   JR	DIMF2
001ACB             5032   ;
001ACB 3E 0F       5033   BADSUB:         LD	A,15
001ACD C3 44 3F    5034                   JP	ERROR_			;"Bad subscript"
001AD0             5035   ;
001AD0             5036   ;VARIABLE-TYPE FUNCTIONS:
001AD0             5037   ;
001AD0             5038   ;Result returned in HLH'L'C (floating point)
001AD0             5039   ;Result returned in HLH'L' (C=0) (integer)
001AD0             5040   ;Result returned in string accumulator & DE (string)
001AD0             5041   ;All registers destroyed.
001AD0             5042   ;IY (text pointer) updated.
001AD0             5043   ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
001AD0             5044   ;
001AD0             5045   ;
001AD0             5046   ;POS - horizontal cursor position.
001AD0             5047   ;VPOS - vertical cursor position.
001AD0             5048   ;EOF - return status of file.
001AD0             5049   ;BGET - read byte from file.
001AD0             5050   ;INKEY - as GET but wait only n centiseconds.
001AD0             5051   ;GET - wait for keypress and return ASCII value.
001AD0             5052   ;GET(n) - input from Z80 port n.
001AD0             5053   ;ASC - ASCII value of string.
001AD0             5054   ;LEN - length of string.
001AD0             5055   ;LOMEM - location of dynamic variables.
001AD0             5056   ;HIMEM - top of available RAM.
001AD0             5057   ;PAGE - start of current text page.
001AD0             5058   ;TOP - address of first free byte after program.
001AD0             5059   ;ERL - line number where last error occurred.
001AD0             5060   ;ERR - number of last error.
001AD0             5061   ;COUNT - number of printing characters since CR.
001AD0             5062   ;Results are integer numeric.
001AD0             5063   ;
001AD0 CD 7D 05    5064   TINTev:           CALL	TINTFN
001AD3 18 7B       5065                   JR	COUNT1
001AD5 CD 15 02    5066   POS:            CALL	GETCSR
001AD8 EB          5067                   EX	DE,HL
001AD9 18 75       5068                   JR	COUNT1
001ADB CD 15 02    5069   VPOS:           CALL	GETCSR
001ADE 18 70       5070                   JR	COUNT1
001AE0 CD D1 36    5071   EOF:            CALL	CHANEL
001AE3 CD 50 12    5072                   CALL	OSSTAT
001AE6 CA BD 1B    5073                   JP	Z,TRUEev
001AE9 C3 F8 1F    5074                   JP	ZERO
001AEC CD D1 36    5075   BGET:           CALL	CHANEL		;CHANNEL NUMBER
001AEF CD 3F 12    5076                   CALL	OSBGET
001AF2 6F          5077                   LD	L,A
001AF3 18 59       5078                   JR	COUNT0
001AF5 CD 8E 1E    5079   INKEY:          CALL	INKEYS
001AF8 18 19       5080                   JR	ASC0
001AFA CD 0B 45    5081   GET:            CALL	NXT
001AFD FE 28       5082                   CP	'('
001AFF 20 0A       5083                   JR	NZ,GET0
001B01 CD 60 18    5084                   CALL	ITEMI		;PORT ADDRESS
001B04 D9          5085                   EXX
001B05 44          5086                   LD	B,H
001B06 4D          5087                   LD	C,L
001B07 ED 68       5088                   IN	L,(C)		;INPUT FROM PORT BC
001B09 18 43       5089                   JR	COUNT0
001B0B CD 2D 1E    5090   GET0:           CALL	GETS
001B0E 18 08       5091                   JR	ASC1
001B10 CD 69 18    5092   ASC:            CALL	ITEMS
001B13 AF          5093   ASC0:           XOR	A
001B14 BB          5094                   CP	E
001B15 CA BD 1B    5095                   JP	Z,TRUEev		;NULL STRING
001B18 2A 00 52    5096   ASC1:           LD	HL,(ACCS)
001B1B 18 31       5097                   JR	COUNT0
001B1D CD 69 18    5098   LEN:            CALL	ITEMS
001B20 EB          5099                   EX	DE,HL
001B21 18 2B       5100                   JR	COUNT0
001B23 2A DE 54    5101   LOMEMVev:         LD	HL,(LOMEM)
001B26 18 28       5102                   JR	COUNT1
001B28 2A E2 54    5103   HIMEMVev:         LD	HL,(HIMEM)
001B2B 18 23       5104                   JR	COUNT1
001B2D 2A DC 54    5105   PAGEVev:          LD	HL,(PAGE_)
001B30 18 1E       5106                   JR	COUNT1
001B32 FD 7E 00    5107   TOPV:           LD	A,(IY)
001B35 FD 23       5108                   INC	IY		;SKIP "P"
001B37 FE 50       5109                   CP	'P'
001B39 C2 E0 25    5110                   JP	NZ,SYNTAX	;"Syntax Error"
001B3C CD 25 40    5111                   CALL	GETTOP
001B3F 18 0F       5112                   JR	COUNT1
001B41 2A F2 54    5113   ERLV:           LD	HL,(ERL)
001B44 18 0A       5114                   JR	COUNT1
001B46 2A FD 54    5115   ERRV:           LD	HL,(ERR)
001B49 18 03       5116                   JR	COUNT0
001B4B 2A FB 54    5117   COUNTV:         LD	HL,(COUNT)
001B4E 26 00       5118   COUNT0:         LD	H,0
001B50 D9          5119   COUNT1:         EXX
001B51 AF          5120                   XOR	A
001B52 4F          5121                   LD	C,A		;INTEGER MARKER
001B53 67          5122                   LD	H,A
001B54 6F          5123                   LD	L,A
001B55 C9          5124                   RET
001B56             5125   ;
001B56             5126   ;OPENIN - Open a file for reading.
001B56             5127   ;OPENOUT - Open a file for writing.
001B56             5128   ;OPENUP - Open a file for reading or writing.
001B56             5129   ;Result is integer channel number (0 if error)
001B56             5130   ;
001B56 AF          5131   OPENOT:         XOR	A
001B57 21          5132                   DB	21H		;SKIP NEXT 2 BYTES
001B58 3E 02       5133   OPENUP:         LD	A,2
001B5A 21          5134                   DB	21H		;SKIP NEXT 2 BYTES
001B5B 3E 01       5135   OPENIN:         LD	A,1
001B5D F5          5136                   PUSH	AF		;SAVE OPEN TYPE
001B5E CD 69 18    5137                   CALL	ITEMS		;FILENAME
001B61 3E 0D       5138                   LD	A,CR
001B63 12          5139                   LD	(DE),A
001B64 F1          5140                   POP	AF		;RESTORE OPEN TYPE
001B65 C6 FF       5141                   ADD	A,-1		;AFFECT FLAGS
001B67 21 00 52    5142                   LD	HL,ACCS
001B6A CD 28 12    5143                   CALL	OSOPEN
001B6D 6F          5144                   LD	L,A
001B6E 18 DE       5145                   JR	COUNT0
001B70             5146   ;
001B70             5147   ;EXT - Return length of file.
001B70             5148   ;PTR - Return current file pointer.
001B70             5149   ;Results are integer numeric.
001B70             5150   ;
001B70 CD D1 36    5151   EXTev:            CALL	CHANEL
001B73 CD 91 12    5152                   CALL	GETEXT
001B76 18 12       5153                   JR	TIME0
001B78             5154   ;
001B78 CD D1 36    5155   PTRev:            CALL	CHANEL
001B7B CD 5A 12    5156                   CALL	GETPTR
001B7E 18 0A       5157                   JR	TIME0
001B80             5158   ;
001B80             5159   ;TIME - Return current value of elapsed time.
001B80             5160   ;Result is integer numeric.
001B80             5161   ;
001B80 FD 7E 00    5162   TIMEVev:          LD	A,(IY)
001B83 FE 24       5163                   CP	'$'
001B85 28 09       5164                   JR	Z,TIMEVSev
001B87 CD 95 01    5165                   CALL	GETIME
001B8A D5          5166   TIME0:          PUSH	DE
001B8B D9          5167                   EXX
001B8C E1          5168                   POP	HL
001B8D AF          5169                   XOR	A
001B8E 4F          5170                   LD	C,A
001B8F C9          5171                   RET
001B90             5172   ;
001B90             5173   ;TIME$ - Return date/time string.
001B90             5174   ;Result is string
001B90             5175   ;
001B90 FD 23       5176   TIMEVSev:         INC	IY		;SKIP $
001B92 CD AA 01    5177                   CALL	GETIMS
001B95 3E 80       5178                   LD	A,80H		;MARK STRING
001B97 C9          5179                   RET
001B98             5180   ;
001B98             5181   ;String comparison:
001B98             5182   ;
001B98 CD F5 1F    5183   SLT:            CALL	SCP
001B9B D0          5184                   RET	NC
001B9C 18 1F       5185                   JR	TRUEev
001B9E             5186   ;
001B9E CD F5 1F    5187   SGT:            CALL	SCP
001BA1 C8          5188                   RET	Z
001BA2 D8          5189                   RET	C
001BA3 18 18       5190                   JR	TRUEev
001BA5             5191   ;
001BA5 CD F5 1F    5192   SGE:            CALL	SCP
001BA8 D8          5193                   RET	C
001BA9 18 12       5194                   JR	TRUEev
001BAB             5195   ;
001BAB CD F5 1F    5196   SLE:            CALL	SCP
001BAE 28 0D       5197                   JR	Z,TRUEev
001BB0 D0          5198                   RET	NC
001BB1 18 0A       5199                   JR	TRUEev
001BB3             5200   ;
001BB3 CD F5 1F    5201   SNE:            CALL	SCP
001BB6 C8          5202                   RET	Z
001BB7 18 04       5203                   JR	TRUEev
001BB9             5204   ;
001BB9 CD F5 1F    5205   SEQ:            CALL	SCP
001BBC C0          5206                   RET	NZ
001BBD 3E FF       5207   TRUEev:           LD	A,-1
001BBF D9          5208                   EXX
001BC0 67          5209                   LD	H,A
001BC1 6F          5210                   LD	L,A
001BC2 D9          5211                   EXX
001BC3 67          5212                   LD	H,A
001BC4 6F          5213                   LD	L,A
001BC5 3C          5214                   INC	A
001BC6 4F          5215                   LD	C,A
001BC7 C9          5216                   RET
001BC8             5217   ;
001BC8             5218   ;PI - Return PI (3.141592654)
001BC8             5219   ;Result is floating-point numeric.
001BC8             5220   ;
001BC8 3E 23       5221   PIev:             LD	A,35
001BCA 18 43       5222                   JR	FPP1
001BCC             5223   ;
001BCC             5224   ;ABS - Absolute value
001BCC             5225   ;Result is numeric, variable type.
001BCC             5226   ;
001BCC 3E 10       5227   ABSev:            LD	A,16
001BCE 18 3A       5228                   JR	FPPN
001BD0             5229   ;
001BD0             5230   ;NOT - Complement integer.
001BD0             5231   ;Result is integer numeric.
001BD0             5232   ;
001BD0 3E 1A       5233   CPL_ev:           LD	A,26
001BD2 18 36       5234                   JR	FPPN
001BD4             5235   ;
001BD4             5236   ;DEG - Convert radians to degrees
001BD4             5237   ;Result is floating-point numeric.
001BD4             5238   ;
001BD4 3E 15       5239   DEGev:            LD	A,21
001BD6 18 32       5240                   JR	FPPN
001BD8             5241   ;
001BD8             5242   ;RAD - Convert degrees to radians
001BD8             5243   ;Result is floating-point numeric.
001BD8             5244   ;
001BD8 3E 1B       5245   RADev:            LD	A,27
001BDA 18 2E       5246                   JR	FPPN
001BDC             5247   ;
001BDC             5248   ;SGN - Return -1, 0 or +1
001BDC             5249   ;Result is integer numeric.
001BDC             5250   ;
001BDC 3E 1C       5251   SGNev:            LD	A,28
001BDE 18 2A       5252                   JR	FPPN
001BE0             5253   ;
001BE0             5254   ;INT - Floor function
001BE0             5255   ;Result is integer numeric.
001BE0             5256   ;
001BE0 3E 17       5257   INT_ev:           LD	A,23
001BE2 18 26       5258                   JR	FPPN
001BE4             5259   ;
001BE4             5260   ;SQR - square root
001BE4             5261   ;Result is floating-point numeric.
001BE4             5262   ;
001BE4 3E 1E       5263   SQRev:            LD	A,30
001BE6 18 22       5264                   JR	FPPN
001BE8             5265   ;
001BE8             5266   ;TAN - Tangent function
001BE8             5267   ;Result is floating-point numeric.
001BE8             5268   ;
001BE8 3E 1F       5269   TANev:            LD	A,31
001BEA 18 1E       5270                   JR	FPPN
001BEC             5271   ;
001BEC             5272   ;COS - Cosine function
001BEC             5273   ;Result is floating-point numeric.
001BEC             5274   ;
001BEC 3E 14       5275   COSev:            LD	A,20
001BEE 18 1A       5276                   JR	FPPN
001BF0             5277   ;
001BF0             5278   ;SIN - Sine function
001BF0             5279   ;Result is floating-point numeric.
001BF0             5280   ;
001BF0 3E 1D       5281   SINev:            LD	A,29
001BF2 18 16       5282                   JR	FPPN
001BF4             5283   ;
001BF4             5284   ;EXP - Exponential function
001BF4             5285   ;Result is floating-point numeric.
001BF4             5286   ;
001BF4 3E 16       5287   EXPev:            LD	A,22
001BF6 18 12       5288                   JR	FPPN
001BF8             5289   ;
001BF8             5290   ;LN - Natural log.
001BF8             5291   ;Result is floating-point numeric.
001BF8             5292   ;
001BF8 3E 18       5293   LNev:             LD	A,24
001BFA 18 0E       5294                   JR	FPPN
001BFC             5295   ;
001BFC             5296   ;LOG - base-10 logarithm.
001BFC             5297   ;Result is floating-point numeric.
001BFC             5298   ;
001BFC 3E 19       5299   LOGev:            LD	A,25
001BFE 18 0A       5300                   JR	FPPN
001C00             5301   ;
001C00             5302   ;ASN - Arc-sine
001C00             5303   ;Result is floating-point numeric.
001C00             5304   ;
001C00 3E 12       5305   ASNev:            LD	A,18
001C02 18 06       5306                   JR	FPPN
001C04             5307   ;
001C04             5308   ;ATN - arc-tangent
001C04             5309   ;Result is floating-point numeric.
001C04             5310   ;
001C04 3E 13       5311   ATNev:            LD	A,19
001C06 18 02       5312                   JR	FPPN
001C08             5313   ;
001C08             5314   ;ACS - arc-cosine
001C08             5315   ;Result is floating point numeric.
001C08             5316   ;
001C08 3E 11       5317   ACSev:            LD	A,17
001C0A F5          5318   FPPN:           PUSH	AF
001C0B CD 7A 18    5319                   CALL	ITEMN
001C0E F1          5320                   POP	AF
001C0F CD 15 45    5321   FPP1:           CALL	FPP
001C12 DA 44 3F    5322                   JP	C,ERROR_
001C15 AF          5323                   XOR	A
001C16 C9          5324                   RET
001C17             5325   ;
001C17             5326   ;SFIX - Convert to fixed-point notation
001C17             5327   ;
001C17 3E 26       5328   SFIX:           LD	A,38
001C19 18 F4       5329                   JR	FPP1
001C1B             5330   ;
001C1B             5331   ;SFLOAT - Convert to floating-point notation
001C1B             5332   ;
001C1B 3E 27       5333   SFLOATev:         LD	A,39
001C1D 18 F0       5334                   JR	FPP1
001C1F             5335   ;
001C1F             5336   ;VAL - Return numeric value of string.
001C1F             5337   ;Result is variable type numeric.
001C1F             5338   ;
001C1F CD 69 18    5339   VALev:            CALL	ITEMS
001C22 AF          5340   VAL0:           XOR	A
001C23 12          5341                   LD	(DE),A
001C24 DD 21 00 52 5342                   LD	IX,ACCS
001C28 3E 24       5343                   LD	A,36
001C2A 18 E3       5344                   JR	FPP1
001C2C             5345   ;
001C2C             5346   ;EVAL - Pass string to expression evaluator.
001C2C             5347   ;Result is variable type (numeric or string).
001C2C             5348   ;
001C2C CD 69 18    5349   EVAL_:          CALL	ITEMS
001C2F 3E 0D       5350                   LD	A,CR
001C31 12          5351                   LD	(DE),A
001C32 FD E5       5352                   PUSH	IY
001C34 11 00 52    5353                   LD	DE,ACCS
001C37 FD 21 00 52 5354                   LD	IY,ACCS
001C3B 0E 00       5355                   LD	C,0
001C3D CD 18 44    5356                   CALL	LEXAN2		;TOKENISE
001C40 12          5357                   LD	(DE),A
001C41 13          5358                   INC	DE
001C42 AF          5359                   XOR	A
001C43 CD 19 20    5360                   CALL	PUSHS		;PUT ON STACK
001C46 FD 21 02 00 5361                   LD	IY,2
001C4A FD 39       5362                   ADD	IY,SP
001C4C CD 02 17    5363                   CALL	EXPR
001C4F FD E1       5364                   POP	IY
001C51 FD 39       5365                   ADD	IY,SP
001C53 FD F9       5366                   LD	SP,IY		;ADJUST STACK POINTER
001C55 FD E1       5367                   POP	IY
001C57 08          5368                   EX	AF,AF'
001C58 C9          5369                   RET
001C59             5370   ;
001C59             5371   ;RND - Random number function.
001C59             5372   ; RND gives random integer 0-&FFFFFFFF
001C59             5373   ; RND(-n) seeds random number & returns -n.
001C59             5374   ; RND(0) returns last value in RND(1) form.
001C59             5375   ; RND(1) returns floating-point 0-0.99999999.
001C59             5376   ; RND(n) returns random integer 1-n.
001C59             5377   ;
001C59 DD 21 F6 54 5378   RND:            LD	IX,RANDOM
001C5D CD 0B 45    5379                   CALL	NXT
001C60 FE 28       5380                   CP	'('
001C62 28 1C       5381                   JR	Z,RND5		;ARGUMENT FOLLOWS
001C64 CD 2F 19    5382                   CALL	LOAD5
001C67 CB 19       5383   RND1:           RR	C
001C69 06 20       5384                   LD	B,32
001C6B D9          5385   RND2:           EXX			;CALCULATE NEXT
001C6C ED 6A       5386                   ADC	HL,HL
001C6E D9          5387                   EXX
001C6F ED 6A       5388                   ADC	HL,HL
001C71 CB 5D       5389                   BIT	3,L
001C73 28 01       5390                   JR	Z,RND3
001C75 3F          5391                   CCF
001C76 10 F3       5392   RND3:           DJNZ	RND2
001C78 CB 11       5393   RND4:           RL	C		;SAVE CARRY
001C7A CD 06 32    5394                   CALL	STORE5		;STORE NEW NUMBER
001C7D AF          5395                   XOR	A
001C7E 4F          5396                   LD	C,A
001C7F C9          5397                   RET
001C80 CD 60 18    5398   RND5:           CALL	ITEMI
001C83 DD 21 F6 54 5399                   LD	IX,RANDOM
001C87 CB 7C       5400                   BIT	7,H		;NEGATIVE?
001C89 37          5401                   SCF
001C8A 20 EC       5402                   JR	NZ,RND4		;SEED
001C8C CD 59 1F    5403                   CALL	TEST
001C8F F5          5404                   PUSH	AF
001C90 41          5405                   LD	B,C
001C91 EB          5406                   EX	DE,HL
001C92 D9          5407                   EXX
001C93 EB          5408                   EX	DE,HL
001C94 CD 2F 19    5409                   CALL	LOAD5
001C97 C4 67 1C    5410                   CALL	NZ,RND1		;NEXT IF NON-ZERO
001C9A D9          5411                   EXX			;SCRAMBLE (CARE!)
001C9B 0E 7F       5412                   LD	C,7FH
001C9D CB 7C       5413   RND6:           BIT	7,H		;FLOAT
001C9F 20 08       5414                   JR	NZ,RND7
001CA1 D9          5415                   EXX
001CA2 29          5416                   ADD	HL,HL
001CA3 D9          5417                   EXX
001CA4 ED 6A       5418                   ADC	HL,HL
001CA6 0D          5419                   DEC	C
001CA7 20 F4       5420                   JR	NZ,RND6
001CA9 CB BC       5421   RND7:           RES	7,H		;POSITIVE 0-0.999999
001CAB F1          5422                   POP	AF
001CAC C8          5423                   RET	Z		;ZERO ARGUMENT
001CAD D9          5424                   EXX
001CAE 7B          5425                   LD	A,E
001CAF 3D          5426                   DEC	A
001CB0 B2          5427                   OR	D
001CB1 D9          5428                   EXX
001CB2 B3          5429                   OR	E
001CB3 B2          5430                   OR	D
001CB4 C8          5431                   RET	Z		;ARGUMENT=1
001CB5 06 00       5432                   LD	B,0		;INTEGER MARKER
001CB7 3E 0A       5433                   LD	A,10
001CB9 CD 15 45    5434                   CALL	FPP		;MULTIPLY
001CBC DA 44 3F    5435                   JP	C,ERROR_
001CBF CD 17 1C    5436                   CALL	SFIX
001CC2 C3 56 18    5437                   JP	ADD1ev
001CC5             5438   ;
001CC5             5439   ;SUMLEN(array())
001CC5             5440   ;
001CC5 FD 23       5441   SUMLEN:         INC	IY		;Skip LEN
001CC7 CD D7 19    5442                   CALL	GETARB
001CCA CB 78       5443                   BIT	7,B
001CCC CA 6E 18    5444                   JP	Z,MISMATev	;Type mismatch
001CCF CD A4 19    5445                   CALL	ARRLEN
001CD2 E5          5446                   PUSH	HL
001CD3 DD E1       5447                   POP	IX		;IX addresses array
001CD5 AF          5448                   XOR	A
001CD6 67          5449                   LD	H,A
001CD7 6F          5450                   LD	L,A
001CD8 47          5451                   LD	B,A
001CD9 DD 4E 00    5452   SUMLN1:         LD	C,(IX)
001CDC 09          5453                   ADD	HL,BC
001CDD 0E 04       5454                   LD	C,4
001CDF DD 09       5455                   ADD	IX,BC
001CE1 1B          5456                   DEC	DE		;Count elements
001CE2 7A          5457                   LD	A,D
001CE3 B3          5458                   OR	E
001CE4 20 F3       5459                   JR	NZ,SUMLN1
001CE6 C3 50 1B    5460                   JP	COUNT1
001CE9             5461   ;
001CE9             5462   ;SUM(array())
001CE9             5463   ;
001CE9 CD 0B 45    5464   SUM:            CALL	NXT
001CEC FE A9       5465                   CP	TLEN
001CEE 28 D5       5466                   JR	Z,SUMLEN
001CF0 CD D7 19    5467                   CALL	GETARB
001CF3 CB 78       5468                   BIT	7,B
001CF5 20 27       5469                   JR	NZ,SUMSTR
001CF7 C5          5470                   PUSH	BC
001CF8 CD A4 19    5471                   CALL	ARRLEN
001CFB E5          5472                   PUSH	HL
001CFC DD E1       5473                   POP	IX		;IX addresses array
001CFE CD F8 1F    5474                   CALL	ZERO
001D01 F1          5475                   POP	AF		;A = element size
001D02 D5          5476   SUMUP:          PUSH	DE
001D03 F5          5477                   PUSH	AF
001D04 CD E7 19    5478                   CALL	DLOADN
001D07 3E 0B       5479                   LD	A,11
001D09 CD 15 45    5480                   CALL	FPP
001D0C DA 44 3F    5481                   JP	C,ERROR_
001D0F F1          5482                   POP	AF
001D10 16 00       5483                   LD	D,0
001D12 5F          5484                   LD	E,A
001D13 DD 19       5485                   ADD	IX,DE		;Bump to next element
001D15 D1          5486                   POP	DE
001D16 1B          5487                   DEC	DE		;Count elements
001D17 47          5488                   LD	B,A
001D18 7A          5489                   LD	A,D
001D19 B3          5490                   OR	E
001D1A 78          5491                   LD	A,B
001D1B 20 E5       5492                   JR	NZ,SUMUP
001D1D C9          5493                   RET
001D1E             5494   ;
001D1E             5495   ;SUM(string array)
001D1E             5496   ;
001D1E CD A4 19    5497   SUMSTR:         CALL	ARRLEN
001D21 E5          5498                   PUSH	HL
001D22 DD E1       5499                   POP	IX		;IX addresses array
001D24 EB          5500                   EX	DE,HL
001D25 11 00 52    5501                   LD	DE,ACCS
001D28 06 00       5502                   LD	B,0
001D2A E5          5503   SUMST1:         PUSH	HL
001D2B DD 4E 00    5504                   LD	C,(IX)
001D2E 79          5505                   LD	A,C
001D2F B7          5506                   OR	A
001D30 28 0E       5507                   JR	Z,SUMST2
001D32 83          5508                   ADD	A,E
001D33 3E 13       5509                   LD	A,19
001D35 DA 44 3F    5510                   JP	C,ERROR_		;"String too long"
001D38 DD 6E 02    5511                   LD	L,(IX+2)
001D3B DD 66 03    5512                   LD	H,(IX+3)
001D3E ED B0       5513                   LDIR
001D40 E1          5514   SUMST2:         POP	HL
001D41 0E 04       5515                   LD	C,4
001D43 DD 09       5516                   ADD	IX,BC
001D45 2B          5517                   DEC	HL		;Count elements
001D46 7C          5518                   LD	A,H
001D47 B5          5519                   OR	L
001D48 20 E0       5520                   JR	NZ,SUMST1
001D4A F6 80       5521                   OR	80H
001D4C C9          5522                   RET
001D4D             5523   ;
001D4D             5524   ;MOD(array())
001D4D             5525   ;
001D4D CD D7 19    5526   MODFUN:         CALL	GETARB
001D50 CB 78       5527                   BIT	7,B
001D52 C2 6E 18    5528                   JP	NZ,MISMATev
001D55 C5          5529                   PUSH	BC
001D56 CD A4 19    5530                   CALL	ARRLEN
001D59 E5          5531                   PUSH	HL
001D5A DD E1       5532                   POP	IX		;IX addresses array
001D5C CD F8 1F    5533                   CALL	ZERO
001D5F F1          5534                   POP	AF		;A = element size
001D60 D5          5535   MODUP:          PUSH	DE
001D61 F5          5536                   PUSH	AF
001D62 C5          5537                   PUSH	BC
001D63 E5          5538                   PUSH	HL
001D64 D9          5539                   EXX
001D65 E5          5540                   PUSH	HL
001D66 D9          5541                   EXX
001D67 CD 25 19    5542                   CALL	LOADN
001D6A AF          5543                   XOR	A
001D6B 47          5544                   LD	B,A
001D6C 57          5545                   LD	D,A
001D6D 5F          5546                   LD	E,A
001D6E D9          5547                   EXX
001D6F 57          5548                   LD	D,A
001D70 1E 02       5549                   LD	E,2
001D72 D9          5550                   EXX
001D73 3E 0E       5551                   LD	A,14
001D75 DD E5       5552                   PUSH	IX
001D77 CD 15 45    5553                   CALL	FPP		;Square
001D7A DD E1       5554                   POP	IX
001D7C DA 44 3F    5555                   JP	C,ERROR_
001D7F D9          5556                   EXX
001D80 EB          5557                   EX	DE,HL
001D81 E1          5558                   POP	HL
001D82 D9          5559                   EXX
001D83 EB          5560                   EX	DE,HL
001D84 E1          5561                   POP	HL
001D85 79          5562                   LD	A,C
001D86 C1          5563                   POP	BC
001D87 47          5564                   LD	B,A
001D88 3E 0B       5565                   LD	A,11
001D8A CD 15 45    5566                   CALL	FPP		;Accumulate
001D8D DA 44 3F    5567                   JP	C,ERROR_
001D90 F1          5568                   POP	AF
001D91 16 00       5569                   LD	D,0
001D93 5F          5570                   LD	E,A
001D94 DD 19       5571                   ADD	IX,DE		;Bump to next element
001D96 D1          5572                   POP	DE
001D97 1B          5573                   DEC	DE		;Count elements
001D98 47          5574                   LD	B,A
001D99 7A          5575                   LD	A,D
001D9A B3          5576                   OR	E
001D9B 78          5577                   LD	A,B
001D9C 20 C2       5578                   JR	NZ,MODUP
001D9E 3E 1E       5579                   LD	A,30
001DA0 CD 15 45    5580                   CALL	FPP		;Square root
001DA3 AF          5581                   XOR	A
001DA4 C9          5582                   RET
001DA5             5583   ;
001DA5             5584   ;INSTR - String search.
001DA5             5585   ;Result is integer numeric.
001DA5             5586   ;
001DA5 CD 3C 18    5587   INSTR:          CALL	EXPRS		;STRING TO SEARCH
001DA8 CD A2 20    5588                   CALL	COMMA
001DAB CD 19 20    5589                   CALL	PUSHS		;SAVE STRING ON STACK
001DAE CD 3C 18    5590                   CALL	EXPRS		;SUB-STRING
001DB1 C1          5591                   POP	BC
001DB2 21 00 00    5592                   LD	HL,0
001DB5 39          5593                   ADD	HL,SP		;HL ADDRESSES MAIN
001DB6 C5          5594                   PUSH	BC		;C = MAIN STRING LENGTH
001DB7 43          5595                   LD	B,E		;B = SUB-STRING LENGTH
001DB8 CD 0B 45    5596                   CALL	NXT
001DBB FE 2C       5597                   CP	','
001DBD 3E 00       5598                   LD	A,0
001DBF 20 17       5599                   JR	NZ,INSTR1
001DC1 FD 23       5600                   INC	IY		;SKIP COMMA
001DC3 C5          5601                   PUSH	BC		;SAVE LENGTHS
001DC4 E5          5602                   PUSH	HL		;SAVE MAIN ADDRESS
001DC5 CD 19 20    5603                   CALL	PUSHS
001DC8 CD 33 18    5604                   CALL	EXPRI
001DCB C1          5605                   POP	BC
001DCC CD 37 20    5606                   CALL	POPS
001DCF E1          5607                   POP	HL		;RESTORE MAIN ADDRESS
001DD0 C1          5608                   POP	BC		;RESTORE LENGTHS
001DD1 D9          5609                   EXX
001DD2 7D          5610                   LD	A,L
001DD3 D9          5611                   EXX
001DD4 B7          5612                   OR	A
001DD5 28 01       5613                   JR	Z,INSTR1
001DD7 3D          5614                   DEC	A
001DD8 11 00 52    5615   INSTR1:         LD	DE,ACCS		;DE ADDRESSES SUB
001DDB CD F2 1D    5616                   CALL	SEARCH
001DDE D1          5617                   POP	DE
001DDF 28 03       5618                   JR	Z,INSTR2	;N.B. CARRY CLEARED
001DE1 ED 62       5619                   SBC	HL,HL
001DE3 39          5620                   ADD	HL,SP
001DE4 ED 72       5621   INSTR2:         SBC	HL,SP
001DE6 EB          5622                   EX	DE,HL
001DE7 26 00       5623                   LD	H,0
001DE9 39          5624                   ADD	HL,SP
001DEA F9          5625                   LD	SP,HL
001DEB EB          5626                   EX	DE,HL
001DEC CD AE 20    5627                   CALL	BRAKET
001DEF C3 50 1B    5628                   JP	COUNT1
001DF2             5629   ;
001DF2             5630   ;SEARCH - Search string for sub-string
001DF2             5631   ;   Inputs: Main string at HL length C
001DF2             5632   ;           Sub-string at DE length B
001DF2             5633   ;           Starting offset A
001DF2             5634   ;  Outputs: NZ - not found
001DF2             5635   ;           Z - found at location HL-1
001DF2             5636   ;           Carry always cleared
001DF2             5637   ;
001DF2 C5          5638   SEARCH:         PUSH	BC
001DF3 06 00       5639                   LD	B,0
001DF5 4F          5640                   LD	C,A
001DF6 09          5641                   ADD	HL,BC		;NEW START ADDRESS
001DF7 C1          5642                   POP	BC
001DF8 91          5643                   SUB	C
001DF9 30 28       5644                   JR	NC,SRCH4
001DFB ED 44       5645                   NEG
001DFD 4F          5646                   LD	C,A		;REMAINING LENGTH
001DFE 1A          5647   SRCH1ev:          LD	A,(DE)
001DFF C5          5648                   PUSH	BC
001E00 06 00       5649                   LD	B,0
001E02 ED B1       5650                   CPIR			;FIND FIRST CHARACTER
001E04 79          5651                   LD	A,C
001E05 C1          5652                   POP	BC
001E06 20 1B       5653                   JR	NZ,SRCH4
001E08 4F          5654                   LD	C,A
001E09 05          5655                   DEC	B		;Bug fix
001E0A B8          5656                   CP	B		;Bug fix
001E0B 04          5657                   INC	B		;Bug fix
001E0C 38 15       5658                   JR	C,SRCH4		;Bug fix
001E0E C5          5659                   PUSH	BC
001E0F D5          5660                   PUSH	DE
001E10 E5          5661                   PUSH	HL
001E11 05          5662                   DEC	B
001E12 28 08       5663                   JR	Z,SRCH3		;FOUND !
001E14 13          5664   SRCH2ev:          INC	DE
001E15 1A          5665                   LD	A,(DE)
001E16 BE          5666                   CP	(HL)
001E17 20 03       5667                   JR	NZ,SRCH3
001E19 23          5668                   INC	HL
001E1A 10 F8       5669                   DJNZ	SRCH2ev
001E1C E1          5670   SRCH3:          POP	HL
001E1D D1          5671                   POP	DE
001E1E C1          5672                   POP	BC
001E1F 20 DD       5673                   JR	NZ,SRCH1ev
001E21 AF          5674                   XOR	A		;Z, NC
001E22 C9          5675                   RET			;FOUND
001E23             5676   ;
001E23 F6 FF       5677   SRCH4:          OR	0FFH		;NZ, NC
001E25 C9          5678                   RET			;NOT FOUND
001E26             5679   ;
001E26             5680   ;CHR$ - Return character with given ASCII value.
001E26             5681   ;Result is string.
001E26             5682   ;
001E26 CD 60 18    5683   CHRS:           CALL	ITEMI
001E29 D9          5684                   EXX
001E2A 7D          5685                   LD	A,L
001E2B 18 0A       5686                   JR	GET1
001E2D             5687   ;
001E2D             5688   ;GET$ - Return key pressed as string, or read from file
001E2D             5689   ;Result is string.
001E2D             5690   ;
001E2D CD 0B 45    5691   GETS:           CALL	NXT
001E30 FE 23       5692                   CP	'#'
001E32 28 06       5693                   JR	Z,GET2
001E34 CD C2 11    5694                   CALL	OSRDCH
001E37 37          5695   GET1:           SCF
001E38 18 5B       5696                   JR	INKEY1
001E3A             5697   ;
001E3A CD DB 36    5698   GET2:           CALL	CHNL		;File channel
001E3D CD 0B 45    5699                   CALL	NXT
001E40 FE 0F       5700                   CP	TBY
001E42 28 04       5701                   JR	Z,GET3
001E44 FE B8       5702                   CP	TTO
001E46 20 0C       5703                   JR	NZ,GET4
001E48 FD 23       5704   GET3:           INC	IY
001E4A F5          5705                   PUSH	AF
001E4B D5          5706                   PUSH	DE
001E4C CD 60 18    5707                   CALL	ITEMI		;Get BY or TO qualifier
001E4F D9          5708                   EXX
001E50 44          5709                   LD	B,H
001E51 4D          5710                   LD	C,L
001E52 D1          5711                   POP	DE
001E53 F1          5712                   POP	AF
001E54 21 00 52    5713   GET4:           LD	HL,ACCS
001E57 FE B8       5714                   CP	TTO
001E59 28 08       5715                   JR	Z,GET5
001E5B 51          5716                   LD	D,C		;Maximum count
001E5C 01 00 01    5717                   LD	BC,100H		;Default
001E5F FE 0F       5718                   CP	TBY
001E61 28 04       5719                   JR	Z,GET6
001E63 16 00       5720   GET5:           LD	D,0
001E65 CB C8       5721                   SET	1,B		;Flag no count
001E67 C5          5722   GET6:           PUSH	BC
001E68 CD 3F 12    5723                   CALL	OSBGET
001E6B C1          5724                   POP	BC
001E6C 38 1C       5725                   JR	C,GET9		;EOF
001E6E CB 48       5726                   BIT	1,B
001E70 28 13       5727                   JR	Z,GET8
001E72 B9          5728                   CP	C
001E73 28 15       5729                   JR	Z,GET9		;NUL (or supplied term)
001E75 CB 78       5730                   BIT	7,B
001E77 20 08       5731                   JR	NZ,GET7
001E79 CB 40       5732                   BIT	0,B
001E7B 28 08       5733                   JR	Z,GET8
001E7D FE 0A       5734                   CP	LF
001E7F 28 09       5735                   JR	Z,GET9		;LF
001E81 FE 0D       5736   GET7:           CP	CR
001E83 28 05       5737                   JR	Z,GET9		;CR
001E85 77          5738   GET8:           LD	(HL),A
001E86 2C          5739                   INC	L
001E87 15          5740                   DEC	D
001E88 20 DD       5741                   JR	NZ,GET6
001E8A EB          5742   GET9:           EX	DE,HL
001E8B 3E 80       5743                   LD	A,80H
001E8D C9          5744                   RET
001E8E             5745   ;
001E8E             5746   ;INKEY$ - Wait up to n centiseconds for keypress.
001E8E             5747   ; Return key pressed as string or null
001E8E             5748   ; string if time elapsed.
001E8E             5749   ;Result is string.
001E8E             5750   ;
001E8E CD 60 18    5751   INKEYS:         CALL	ITEMI
001E91 D9          5752                   EXX
001E92 CD FD 01    5753                   CALL	OSKEY
001E95 11 00 52    5754   INKEY1:         LD	DE,ACCS
001E98 12          5755                   LD	(DE),A
001E99 3E 80       5756                   LD	A,80H
001E9B D0          5757                   RET	NC
001E9C 1C          5758                   INC	E
001E9D C9          5759                   RET
001E9E             5760   ;
001E9E             5761   ;MID$ - Return sub-string.
001E9E             5762   ;Result is string.
001E9E             5763   ;
001E9E CD 3C 18    5764   MIDS:           CALL	EXPRS
001EA1 CD A2 20    5765                   CALL	COMMA
001EA4 CD 19 20    5766                   CALL	PUSHS		;SAVE STRING ON STACK
001EA7 CD 33 18    5767                   CALL	EXPRI
001EAA C1          5768                   POP	BC
001EAB CD 37 20    5769                   CALL	POPS
001EAE D9          5770                   EXX
001EAF 7D          5771                   LD	A,L
001EB0 D9          5772                   EXX
001EB1 B7          5773                   OR	A
001EB2 28 0D       5774                   JR	Z,MIDS1
001EB4 3D          5775                   DEC	A
001EB5 6F          5776                   LD	L,A
001EB6 93          5777                   SUB	E
001EB7 1E 00       5778                   LD	E,0
001EB9 30 06       5779                   JR	NC,MIDS1
001EBB ED 44       5780                   NEG
001EBD 4F          5781                   LD	C,A
001EBE CD 1D 1F    5782                   CALL	RIGHT1
001EC1 CD 0B 45    5783   MIDS1:          CALL	NXT
001EC4 FE 2C       5784                   CP	','
001EC6 28 1A       5785                   JR	Z,LEFT1
001EC8 CD AE 20    5786                   CALL	BRAKET
001ECB 3E 80       5787                   LD	A,80H
001ECD C9          5788                   RET
001ECE             5789   ;
001ECE             5790   ;LEFT$ - Return left part of string.
001ECE             5791   ;Carry cleared if entire string returned.
001ECE             5792   ;Result is string.
001ECE             5793   ;
001ECE CD 3C 18    5794   LEFTS:          CALL	EXPRS
001ED1 CD 0B 45    5795                   CALL	NXT
001ED4 FE 2C       5796                   CP	','
001ED6 28 0A       5797                   JR	Z,LEFT1
001ED8 CD AE 20    5798                   CALL	BRAKET
001EDB 7B          5799                   LD	A,E
001EDC B7          5800                   OR	A
001EDD 28 1A       5801                   JR	Z,LEFT3
001EDF 1D          5802                   DEC	E
001EE0 18 17       5803                   JR	LEFT3
001EE2             5804   ;
001EE2 FD 23       5805   LEFT1:          INC	IY
001EE4 CD 19 20    5806                   CALL	PUSHS		;SAVE STRING ON STACK
001EE7 CD 33 18    5807                   CALL	EXPRI
001EEA C1          5808                   POP	BC
001EEB CD 37 20    5809                   CALL	POPS
001EEE CD AE 20    5810                   CALL	BRAKET
001EF1 D9          5811                   EXX
001EF2 7D          5812                   LD	A,L
001EF3 D9          5813                   EXX
001EF4 BB          5814                   CP	E
001EF5 30 02       5815                   JR	NC,LEFT3
001EF7 6B          5816                   LD	L,E		;FOR RIGHT$
001EF8 5F          5817   LEFT2:          LD	E,A
001EF9 3E 80       5818   LEFT3:          LD	A,80H		;STRING MARKER
001EFB C9          5819                   RET
001EFC             5820   ;
001EFC             5821   ;RIGHT$ - Return right part of string.
001EFC             5822   ;Result is string.
001EFC             5823   ;
001EFC CD 3C 18    5824   RIGHTS:         CALL	EXPRS
001EFF CD 0B 45    5825                   CALL	NXT
001F02 FE 2C       5826                   CP	','
001F04 28 0C       5827                   JR	Z,RIGHT0
001F06 CD AE 20    5828                   CALL	BRAKET
001F09 7B          5829                   LD	A,E
001F0A B7          5830                   OR	A
001F0B 28 EC       5831                   JR	Z,LEFT3
001F0D 3D          5832                   DEC	A
001F0E 0E 01       5833                   LD	C,1
001F10 18 0A       5834                   JR	RIGHT2
001F12             5835   ;
001F12 CD E2 1E    5836   RIGHT0:         CALL	LEFT1
001F15 D0          5837                   RET	NC
001F16 1C          5838                   INC	E
001F17 1D          5839                   DEC	E
001F18 C8          5840                   RET	Z
001F19 4B          5841                   LD	C,E
001F1A 7D          5842                   LD	A,L
001F1B 93          5843                   SUB	E
001F1C 6F          5844   RIGHT2:         LD	L,A
001F1D 06 00       5845   RIGHT1:         LD	B,0
001F1F 62          5846                   LD	H,D
001F20 58          5847                   LD	E,B
001F21 ED B0       5848                   LDIR			;MOVE
001F23 3E 80       5849                   LD	A,80H
001F25 C9          5850                   RET
001F26             5851   ;
001F26             5852   ;STRING$ - Return n concatenations of a string.
001F26             5853   ;Result is string.
001F26             5854   ;
001F26 CD 33 18    5855   STRING_:        CALL	EXPRI
001F29 CD A2 20    5856                   CALL	COMMA
001F2C D9          5857                   EXX
001F2D 7D          5858                   LD	A,L
001F2E D9          5859                   EXX
001F2F F5          5860                   PUSH	AF
001F30 CD 3C 18    5861                   CALL	EXPRS
001F33 CD AE 20    5862                   CALL	BRAKET
001F36 F1          5863                   POP	AF
001F37 B7          5864                   OR	A
001F38 28 BE       5865                   JR	Z,LEFT2		;N=0
001F3A 3D          5866                   DEC	A
001F3B 4F          5867                   LD	C,A
001F3C 3E 80       5868                   LD	A,80H		;STRING MARKER
001F3E C8          5869                   RET	Z
001F3F 1C          5870                   INC	E
001F40 1D          5871                   DEC	E
001F41 C8          5872                   RET	Z		;NULL STRING
001F42 43          5873                   LD	B,E
001F43 62          5874                   LD	H,D
001F44 2E 00       5875                   LD	L,0
001F46 C5          5876   STRIN1:         PUSH	BC
001F47 7E          5877   STRIN2:         LD	A,(HL)
001F48 23          5878                   INC	HL
001F49 12          5879                   LD	(DE),A
001F4A 1C          5880                   INC	E
001F4B 3E 13       5881                   LD	A,19
001F4D CA 44 3F    5882                   JP	Z,ERROR_		;"String too long"
001F50 10 F5       5883                   DJNZ	STRIN2
001F52 C1          5884                   POP	BC
001F53 0D          5885                   DEC	C
001F54 20 F0       5886                   JR	NZ,STRIN1
001F56 3E 80       5887                   LD	A,80H
001F58 C9          5888                   RET
001F59             5889   ;
001F59             5890   ;SUBROUTINES
001F59             5891   ;
001F59             5892   ;TEST - Test HLH'L' for zero
001F59             5893   ;  Outputs: Z-flag set & A=0 if zero
001F59             5894   ; Destroys: A,F
001F59             5895   ;
001F59 7C          5896   TEST:           LD	A,H
001F5A B5          5897                   OR	L
001F5B D9          5898                   EXX
001F5C B4          5899                   OR	H
001F5D B5          5900                   OR	L
001F5E D9          5901                   EXX
001F5F C9          5902                   RET
001F60             5903   ;
001F60             5904   ;DECODE - Decode line number in pseudo-binary.
001F60             5905   ;   Inputs: IY = Text pointer.
001F60             5906   ;  Outputs: HL=0, H'L'=line number, C=0.
001F60             5907   ; Destroys: A,C,H,L,H',L',IY,F
001F60             5908   ;
001F60 D9          5909   DECODE:         EXX
001F61 FD 7E 00    5910                   LD	A,(IY)
001F64 FD 23       5911                   INC	IY
001F66 17          5912                   RLA
001F67 17          5913                   RLA
001F68 67          5914                   LD	H,A
001F69 E6 C0       5915                   AND	0C0H
001F6B FD AE 00    5916                   XOR	(IY)
001F6E FD 23       5917                   INC	IY
001F70 6F          5918                   LD	L,A
001F71 7C          5919                   LD	A,H
001F72 17          5920                   RLA
001F73 17          5921                   RLA
001F74 E6 C0       5922                   AND	0C0H
001F76 FD AE 00    5923                   XOR	(IY)
001F79 FD 23       5924                   INC	IY
001F7B 67          5925                   LD	H,A
001F7C D9          5926                   EXX
001F7D AF          5927                   XOR	A
001F7E 4F          5928                   LD	C,A
001F7F 67          5929                   LD	H,A
001F80 6F          5930                   LD	L,A
001F81 C9          5931                   RET
001F82             5932   ;
001F82             5933   ;HEXSTR - convert numeric value to HEX string.
001F82             5934   ;   Inputs: HLH'L'C = integer or floating-point number
001F82             5935   ;  Outputs: String in string accumulator.
001F82             5936   ;           E = string length. D = ACCS/256
001F82             5937   ;
001F82 FD 23       5938   HEXSTS:         INC	IY		;SKIP TILDE
001F84 CD 7A 18    5939                   CALL	ITEMN
001F87 CD 8D 1F    5940                   CALL	HEXSTR
001F8A 3E 80       5941                   LD	A,80H
001F8C C9          5942                   RET
001F8D             5943   ;
001F8D CD 17 1C    5944   HEXSTR:         CALL	SFIX
001F90 01 08 00    5945                   LD	BC,8
001F93 11 00 52    5946                   LD	DE,ACCS
001F96 C5          5947   HEXST1:         PUSH	BC
001F97 06 04       5948                   LD	B,4
001F99 AF          5949                   XOR	A
001F9A D9          5950   HEXST2:         EXX
001F9B 29          5951                   ADD	HL,HL
001F9C D9          5952                   EXX
001F9D ED 6A       5953                   ADC	HL,HL
001F9F 17          5954                   RLA
001FA0 10 F8       5955                   DJNZ	HEXST2
001FA2 C1          5956                   POP	BC
001FA3 0D          5957                   DEC	C
001FA4 F8          5958                   RET	M
001FA5 28 06       5959                   JR	Z,HEXST3
001FA7 B7          5960                   OR	A
001FA8 20 03       5961                   JR	NZ,HEXST3
001FAA B8          5962                   CP	B
001FAB 28 E9       5963                   JR	Z,HEXST1
001FAD C6 90       5964   HEXST3:         ADD	A,90H
001FAF 27          5965                   DAA
001FB0 CE 40       5966                   ADC	A,40H
001FB2 27          5967                   DAA
001FB3 12          5968                   LD	(DE),A
001FB4 13          5969                   INC	DE
001FB5 47          5970                   LD	B,A
001FB6 18 DE       5971                   JR	HEXST1
001FB8             5972   ;
001FB8             5973   ;Function STR - convert numeric value to ASCII string.
001FB8             5974   ;   Inputs: HLH'L'C = integer or floating-point number.
001FB8             5975   ;  Outputs: String in string accumulator.
001FB8             5976   ;           E = length, D = ACCS/256
001FB8             5977   ;           A = 80H (type=string)
001FB8             5978   ;
001FB8             5979   ;First normalise for decimal output:
001FB8             5980   ;
001FB8 CD 0B 45    5981   STRS:           CALL	NXT
001FBB FE 7E       5982                   CP	'~'
001FBD 28 C3       5983                   JR	Z,HEXSTS
001FBF CD 7A 18    5984                   CALL	ITEMN
001FC2 DD 21 00 54 5985                   LD	IX,STAVAR
001FC6 DD 7E 03    5986                   LD	A,(IX+3)
001FC9 B7          5987                   OR	A
001FCA DD 21 F2 1F 5988                   LD	IX,G9-1		;G9 FORMAT
001FCE 28 04       5989                   JR	Z,STR0
001FD0 DD 21 00 54 5990   STR:            LD	IX,STAVAR
001FD4 11 00 52    5991   STR0:           LD	DE,ACCS
001FD7 3E 25       5992                   LD	A,37
001FD9 CD 15 45    5993                   CALL	FPP
001FDC DA 44 3F    5994                   JP	C,ERROR_
001FDF DD CB 02 46 5995                   BIT	0,(IX+2)
001FE3 3E 80       5996   STR1:           LD	A,80H		;STRING MARKER
001FE5 C8          5997                   RET	Z
001FE6 79          5998                   LD	A,C
001FE7 C6 04       5999                   ADD	A,4
001FE9 BB          6000   STR2:           CP	E
001FEA 28 F7       6001                   JR	Z,STR1
001FEC EB          6002                   EX	DE,HL
001FED 36 20       6003                   LD	(HL),' '	;TRAILING SPACE
001FEF 23          6004                   INC	HL
001FF0 EB          6005                   EX	DE,HL
001FF1 18 F6       6006                   JR	STR2
001FF3             6007   ;
001FF3 09 00       6008   G9:             DW	9
001FF5             6009   ;
001FF5             6010   ;STRING COMPARE
001FF5             6011   ;Compare string (DE) length B with string (HL) length C.
001FF5             6012   ;Result preset to false.
001FF5             6013   ;
001FF5 CD 02 20    6014   SCP:            CALL	SCP0
001FF8 3E 00       6015   ZERO:           LD	A,0
001FFA D9          6016                   EXX
001FFB 67          6017                   LD	H,A
001FFC 6F          6018                   LD	L,A
001FFD D9          6019                   EXX
001FFE 67          6020                   LD	H,A
001FFF 6F          6021                   LD	L,A
002000 4F          6022                   LD	C,A
002001 C9          6023                   RET
002002             6024   ;
002002 04          6025   SCP0:           INC	B
002003 0C          6026                   INC	C
002004 05          6027   SCP1:           DEC	B
002005 28 0A       6028                   JR	Z,SCP2
002007 0D          6029                   DEC	C
002008 28 0C       6030                   JR	Z,SCP3
00200A 1A          6031                   LD	A,(DE)
00200B BE          6032                   CP	(HL)
00200C C0          6033                   RET	NZ
00200D 13          6034                   INC	DE
00200E 23          6035                   INC	HL
00200F 18 F3       6036                   JR	SCP1
002011 B7          6037   SCP2:           OR	A
002012 0D          6038                   DEC	C
002013 C8          6039                   RET	Z
002014 37          6040                   SCF
002015 C9          6041                   RET
002016 B7          6042   SCP3:           OR	A
002017 0C          6043                   INC	C
002018 C9          6044                   RET
002019             6045   ;
002019             6046   ;PUSH$ - SAVE STRING ON STACK.
002019             6047   ;   Inputs: String in string accumulator.
002019             6048   ;           E = string length.
002019             6049   ;           A - saved on stack.
002019             6050   ; Destroys: B,C,D,E,H,L,IX,SP,F
002019             6051   ;
002019 21 00 52    6052   PUSHS:          LD	HL,ACCS
00201C CD 86 32    6053                   CALL	CHECK
00201F DD E1       6054                   POP	IX		;RETURN ADDRESS
002021 B7          6055                   OR	A		;CLEAR CARRY
002022 54          6056                   LD	D,H
002023 4B          6057                   LD	C,E
002024 ED 52       6058                   SBC	HL,DE
002026 39          6059                   ADD	HL,SP
002027 F9          6060                   LD	SP,HL
002028 47          6061                   LD	B,A
002029 C5          6062                   PUSH	BC
00202A 28 09       6063                   JR	Z,PUSHS1	;ZERO LENGTH
00202C EB          6064                   EX	DE,HL
00202D 06 00       6065                   LD	B,0
00202F 68          6066                   LD	L,B		;L=0
002030 ED B0       6067                   LDIR			;COPY TO STACK
002032 CD 86 32    6068                   CALL	CHECK
002035 DD E9       6069   PUSHS1:         JP	(IX)		;"RETURN"
002037             6070   ;
002037             6071   ;POP$ - RESTORE STRING FROM STACK.
002037             6072   ;   Inputs: C = string length.
002037             6073   ;  Outputs: String in string accumulator.
002037             6074   ;           E = string length.
002037             6075   ; Destroys: B,C,D,E,H,L,IX,SP,F
002037             6076   ;
002037 DD E1       6077   POPS:           POP	IX		;RETURN ADDRESS
002039 21 00 00    6078                   LD	HL,0
00203C 44          6079                   LD	B,H		;B=0
00203D 39          6080                   ADD	HL,SP
00203E 11 00 52    6081                   LD	DE,ACCS
002041 0C          6082                   INC	C
002042 0D          6083                   DEC	C
002043 28 02       6084                   JR	Z,POPS1		;ZERO LENGTH
002045 ED B0       6085                   LDIR			;COPY FROM STACK
002047 F9          6086   POPS1:          LD	SP,HL
002048 DD E9       6087                   JP	(IX)		;"RETURN"
00204A             6088   ;
00204A FD 7E 00    6089   BINDIG:         LD	A,(IY)
00204D FE 30       6090                   CP	'0'
00204F D8          6091                   RET	C
002050 FE 32       6092                   CP	'1'+1
002052 3F          6093                   CCF
002053 D8          6094                   RET	C
002054 D6 30       6095                   SUB	'0'
002056 C9          6096                   RET
002057             6097   ;
002057 FD 7E 00    6098   HEXDIG:         LD	A,(IY)
00205A FE 30       6099                   CP	'0'
00205C D8          6100                   RET	C
00205D FE 3A       6101                   CP	'9'+1
00205F 3F          6102                   CCF
002060 D0          6103                   RET	NC
002061 FE 41       6104                   CP	'A'
002063 D8          6105                   RET	C
002064 D6 37       6106                   SUB	'A'-10
002066 FE 10       6107                   CP	16
002068 3F          6108                   CCF
002069 C9          6109                   RET
00206A             6110   ;
00206A FE 3E       6111   RELOPQ:         CP	'>'
00206C D0          6112                   RET	NC
00206D FE 3D       6113                   CP	'='
00206F D0          6114                   RET	NC
002070 FE 3C       6115                   CP	'<'
002072 C9          6116                   RET
002073             6117   ;
002073 FD 23       6118   SAVEev:           INC	IY
002075 E6 0F       6119                   AND	0FH
002077 08          6120   SAVE1:          EX	AF,AF'
002078 FA 6E 18    6121                   JP	M,MISMATev
00207B 08          6122                   EX	AF,AF'
00207C E3          6123                   EX	(SP),HL
00207D D9          6124                   EXX
00207E E5          6125                   PUSH	HL
00207F D9          6126                   EXX
002080 F5          6127                   PUSH	AF
002081 C5          6128                   PUSH	BC
002082 E9          6129                   JP	(HL)
002083             6130   ;
002083 08          6131   DOIT:           EX	AF,AF'
002084 FA 6E 18    6132                   JP	M,MISMATev
002087 D9          6133                   EXX
002088 C1          6134                   POP	BC		;RETURN ADDRESS
002089 D9          6135                   EXX
00208A 79          6136                   LD	A,C
00208B C1          6137                   POP	BC
00208C 47          6138                   LD	B,A
00208D F1          6139                   POP	AF		;OPERATOR
00208E D9          6140                   EXX
00208F EB          6141                   EX	DE,HL
002090 E1          6142                   POP	HL
002091 D9          6143                   EXX
002092 EB          6144                   EX	DE,HL
002093 E1          6145                   POP	HL
002094 D9          6146                   EXX
002095 C5          6147                   PUSH	BC
002096 D9          6148                   EXX
002097 CD 15 45    6149                   CALL	FPP
00209A 38 1C       6150                   JR	C,ERROR1ev
00209C AF          6151                   XOR	A
00209D 08          6152                   EX	AF,AF'		;TYPE
00209E FD 7E 00    6153                   LD	A,(IY)
0020A1 C9          6154                   RET
0020A2             6155   ;
0020A2 CD 0B 45    6156   COMMA:          CALL	NXT
0020A5 FD 23       6157                   INC	IY
0020A7 FE 2C       6158                   CP	','
0020A9 C8          6159                   RET	Z
0020AA 3E 05       6160                   LD	A,5
0020AC 18 0A       6161                   JR	ERROR1ev		;"Missing ,"
0020AE             6162   ;
0020AE CD 0B 45    6163   BRAKET:         CALL	NXT
0020B1 FD 23       6164                   INC	IY
0020B3 FE 29       6165                   CP	')'
0020B5 C8          6166                   RET	Z
0020B6 3E 1B       6167                   LD	A,27
0020B8 C3 44 3F    6168   ERROR1ev:         JP	ERROR_		;"Missing )"
0020BB             6169   ;
0020BB E5          6170   DISPT2:         PUSH	HL
0020BC 21 F6 16    6171                   LD	HL,SOPTBL
0020BF 18 06       6172                   JR	DISPT0
0020C1             6173   ;
0020C1 E5          6174   DISPATev:         PUSH	HL
0020C2 D6 8D       6175                   SUB	FUNTOK
0020C4 21 82 16    6176                   LD	HL,FUNTBL
0020C7 C5          6177   DISPT0:         PUSH	BC
0020C8 87          6178                   ADD	A,A
0020C9 4F          6179                   LD	C,A
0020CA 06 00       6180                   LD	B,0
0020CC 09          6181                   ADD	HL,BC
0020CD 7E          6182                   LD	A,(HL)
0020CE 23          6183                   INC	HL
0020CF 66          6184                   LD	H,(HL)
0020D0 6F          6185                   LD	L,A
0020D1 C1          6186                   POP	BC
0020D2 E3          6187                   EX	(SP),HL
0020D3 C9          6188                   RET			;OFF TO ROUTINE
0020D4             6189   ;
0020D4 7A          6190   STOREA:         LD	A,D
0020D5 D5          6191                   PUSH	DE
0020D6 E5          6192                   PUSH	HL
0020D7 DD E3       6193                   EX	(SP),IX
0020D9 B7          6194                   OR	A
0020DA FA EB 20    6195                   JP	M,STORA1
0020DD CD 25 19    6196                   CALL	LOADN
0020E0 DD E3       6197                   EX	(SP),IX
0020E2 CD CE 31    6198                   CALL	MODIFY
0020E5 E1          6199                   POP	HL
0020E6 D1          6200                   POP	DE
0020E7 4A          6201                   LD	C,D
0020E8 06 00       6202                   LD	B,0
0020EA C9          6203                   RET
0020EB             6204   ;
0020EB D5          6205   STORA1:         PUSH	DE
0020EC CD 0E 1A    6206                   CALL	LOADS
0020EF E1          6207                   POP	HL
0020F0 DD E3       6208                   EX	(SP),IX
0020F2 CD 18 32    6209                   CALL	MODIFS
0020F5 E1          6210                   POP	HL
0020F6 D1          6211                   POP	DE
0020F7 01 04 00    6212                   LD	BC,4
0020FA C9          6213                   RET
0020FB             6214   ;
0020FB             6215   ; Assign to whole array:
0020FB             6216   ; array1() = array expression
0020FB             6217   ; array1() = n1,n2,n3,n4...
0020FB             6218   ; array1() = n (n copied into all elements)
0020FB             6219   ;
0020FB             6220   ; Inputs: D = type (65, 68, 69, 193)
0020FB             6221   ;         E = opcode ('=' for store, '+','-' etc. for modify)
0020FB             6222   ;         HL = IX = VARPTR
0020FB             6223   ;         IY = text pointer
0020FB             6224   ;
0020FB CB B2       6225   LETARR:         RES	6,D		;Lose array marker
0020FD D5          6226                   PUSH	DE		;Save type & opcode
0020FE CD CD 19    6227                   CALL	GETAR1		;Get and check indirect link
002101 CD A4 19    6228                   CALL	ARRLEN		;DE = elements, HL addresses first
002104 C1          6229                   POP	BC
002105 78          6230                   LD	A,B		;A = type
002106 D5          6231                   PUSH	DE
002107 C5          6232                   PUSH	BC
002108 E5          6233                   PUSH	HL
002109 CD AD 36    6234                   CALL	X14OR5		;DE = size in bytes
00210C 42          6235                   LD	B,D
00210D 4B          6236                   LD	C,E
00210E DD E1       6237                   POP	IX
002110 D1          6238                   POP	DE
002111             6239   ;
002111             6240   ; (SP) = number of elements
002111             6241   ; BC = size in bytes
002111             6242   ; DE = type & opcode
002111             6243   ; IX = address of first element
002111             6244   ;
002111             6245   ; allocate space on stack and zero it:
002111             6246   ;
002111 AF          6247                   XOR	A		;Clear carry and zero error code
002112 ED 62       6248                   SBC	HL,HL
002114 39          6249                   ADD	HL,SP		;HL = SP
002115 ED 42       6250                   SBC	HL,BC
002117 38 9F       6251                   JR	C,ERROR1ev	;'No room'
002119 C5          6252                   PUSH	BC
00211A ED 4B E0 54 6253                   LD	BC,(FREE)
00211E 04          6254                   INC	B		;Safety margin
00211F ED 42       6255                   SBC	HL,BC
002121 09          6256                   ADD	HL,BC
002122 C1          6257                   POP	BC
002123 38 93       6258                   JR	C,ERROR1ev	;'No room'
002125 F9          6259                   LD	SP,HL
002126 36 00       6260   LETA0:          LD	(HL),0
002128 23          6261                   INC	HL
002129 0B          6262                   DEC	BC
00212A 78          6263                   LD	A,B
00212B B1          6264                   OR	C
00212C 20 F8       6265                   JR	NZ,LETA0	;Clear allocated stack
00212E 4E          6266                   LD	C,(HL)
00212F 23          6267                   INC	HL
002130 46          6268                   LD	B,(HL)
002131 67          6269                   LD	H,A
002132 6F          6270                   LD	L,A
002133 39          6271                   ADD	HL,SP
002134             6272   ;
002134             6273   ;	CALL	NXT
002134             6274   ;	CP	TEVAL		;;EVAL not currently supported
002134             6275   ;
002134 CD 3C 21    6276                   CALL	EXPRA
002137 F9          6277                   LD	SP,HL		;Update stack pointer
002138 C1          6278                   POP	BC		;Level stack
002139 C3 99 24    6279                   JP	XEQ
00213C             6280   ;
00213C             6281   ; EXPRA - Evaluate array expression, strictly left-to-right;
00213C             6282   ; Note: String array arithmetic (concatenation) is not supported
00213C             6283   ; because it would require a way of recovering freed string space.
00213C             6284   ;
00213C             6285   ;   Inputs: BC = number of elements
00213C             6286   ;           DE = type & opcode
00213C             6287   ;           HL = address of temporary stack space
00213C             6288   ;           IX = address of first element of array
00213C             6289   ;  Outputs: HL = value to set stack pointer to
00213C             6290   ;
00213C 3E 3D       6291   EXPRA:          LD	A,'='
00213E FD 2B       6292                   DEC	IY
002140 FD 23       6293   EXPRA1:         INC	IY
002142 D5          6294                   PUSH	DE
002143 C5          6295                   PUSH	BC
002144 E5          6296                   PUSH	HL
002145 DD E5       6297                   PUSH	IX
002147 5F          6298                   LD	E,A		;Operator
002148 CD B6 21    6299                   CALL	ITEMA
00214B DD E1       6300                   POP	IX
00214D E1          6301                   POP	HL
00214E C1          6302                   POP	BC
00214F D1          6303                   POP	DE
002150 CD 0B 45    6304                   CALL	NXT
002153 FE 2C       6305                   CP	','		;List?
002155 28 13       6306                   JR	Z,EXPRA3
002157 CD 36 35    6307                   CALL	TERMQ
00215A 20 E4       6308                   JR	NZ,EXPRA1
00215C             6309   ;
00215C             6310   ; Update destination array from stack:
00215C             6311   ;
00215C C5          6312   EXPRA2:         PUSH	BC
00215D CD D4 20    6313                   CALL	STOREA		;(IX) <- (HL)
002160 09          6314                   ADD	HL,BC
002161 DD 09       6315                   ADD	IX,BC
002163 C1          6316                   POP	BC
002164 0B          6317                   DEC	BC
002165 78          6318                   LD	A,B
002166 B1          6319                   OR	C
002167 20 F3       6320                   JR	NZ,EXPRA2
002169 C9          6321                   RET
00216A             6322   ;
00216A             6323   ; Update destination array from list (n.b. not transferred via stack):
00216A             6324   ;
00216A C5          6325   EXPRA3:         PUSH	BC
00216B CD D4 20    6326                   CALL	STOREA		;(IX) <- (HL)
00216E FD 23       6327   EXPRA4:         INC	IY		;Bump past comma
002170 09          6328                   ADD	HL,BC
002171 DD 09       6329                   ADD	IX,BC
002173 C1          6330                   POP	BC
002174 0B          6331                   DEC	BC
002175 78          6332                   LD	A,B
002176 B1          6333                   OR	C
002177 C8          6334                   RET	Z
002178 C5          6335                   PUSH	BC
002179 D5          6336                   PUSH	DE
00217A E5          6337                   PUSH	HL
00217B DD E5       6338                   PUSH	IX
00217D CB 7A       6339                   BIT	7,D
00217F 20 0E       6340                   JR	NZ,EXPRA5
002181 D5          6341                   PUSH	DE
002182 CD 2C 18    6342                   CALL	EXPRN
002185 D1          6343                   POP	DE
002186 DD E1       6344                   POP	IX
002188 DD E5       6345                   PUSH	IX
00218A CD CE 31    6346                   CALL	MODIFY
00218D 18 0C       6347                   JR	EXPRA6
00218F             6348   ;
00218F D5          6349   EXPRA5:         PUSH	DE
002190 CD 3C 18    6350                   CALL	EXPRS
002193 E1          6351                   POP	HL
002194 DD E1       6352                   POP	IX
002196 DD E5       6353                   PUSH	IX
002198 CD 18 32    6354                   CALL	MODIFS
00219B DD E1       6355   EXPRA6:         POP	IX
00219D E1          6356                   POP	HL
00219E D1          6357                   POP	DE
00219F 01 04 00    6358                   LD	BC,4
0021A2 CB 7A       6359                   BIT	7,D
0021A4 20 01       6360                   JR	NZ,EXPRA7
0021A6 4A          6361                   LD	C,D
0021A7 CD 0B 45    6362   EXPRA7:         CALL	NXT
0021AA FE 2C       6363                   CP	','
0021AC 28 C0       6364                   JR	Z,EXPRA4
0021AE D1          6365                   POP	DE
0021AF 09          6366   EXPRA8:         ADD	HL,BC		;Skip remaining elements
0021B0 1B          6367                   DEC	DE
0021B1 7A          6368                   LD	A,D
0021B2 B3          6369                   OR	E
0021B3 20 FA       6370                   JR	NZ,EXPRA8
0021B5 C9          6371                   RET
0021B6             6372   ;
0021B6             6373   ; ITEMA: evaluate and operate on array item
0021B6             6374   ;   Inputs: D = type
0021B6             6375   ;           E = operator ('=' for first item)
0021B6             6376   ;           BC = number of elements
0021B6             6377   ;           HL = pointer to destination on stack
0021B6             6378   ;           IY = text pointer
0021B6             6379   ;  Outputs: IY updated
0021B6             6380   ; Destroys: Everything except SP
0021B6             6381   ;
0021B6 CD 0B 45    6382   ITEMA:          CALL	NXT
0021B9 E5          6383                   PUSH	HL		;Pointer to destination
0021BA C5          6384                   PUSH	BC		;Number of elements
0021BB FD E5       6385                   PUSH	IY		;In case normal expression
0021BD D5          6386                   PUSH	DE		;Ditto
0021BE FE 2D       6387                   CP	'-'
0021C0 20 0C       6388                   JR	NZ,ITEMA1	;Not unary minus
0021C2 7B          6389                   LD	A,E
0021C3 FE 3D       6390                   CP	'='
0021C5 20 07       6391                   JR	NZ,ITEMA1	;Not unary minus
0021C7 FD 23       6392                   INC	IY		;Bump past '-'
0021C9 CD 0B 45    6393                   CALL	NXT
0021CC 1E 2D       6394                   LD	E,'-'		;Unary minus
0021CE D5          6395   ITEMA1:         PUSH	DE		;Type and operator
0021CF CD E3 41    6396                   CALL	GETVAR
0021D2 D1          6397                   POP	DE		;Type & operator
0021D3 20 56       6398                   JR	NZ,ITEMA4	;Non-array expression
0021D5 CB 77       6399                   BIT	6,A
0021D7 28 52       6400                   JR	Z,ITEMA4	;Not a whole array
0021D9 C1          6401                   POP	BC		;Junk saved original op
0021DA C1          6402                   POP	BC		;Junk saved text pointer
0021DB CB B7       6403                   RES	6,A
0021DD BA          6404                   CP	D
0021DE C2 6E 18    6405                   JP	NZ,MISMATev	;'Type mismatch'
0021E1 D5          6406                   PUSH	DE		;Save type & operator again
0021E2 CD CD 19    6407                   CALL	GETAR1
0021E5 CD A4 19    6408                   CALL	ARRLEN
0021E8 42          6409                   LD	B,D		;BC = number of elements
0021E9 4B          6410                   LD	C,E
0021EA D1          6411                   POP	DE		;Restore type & operator
0021EB E3          6412                   EX	(SP),HL
0021EC CD 0B 45    6413                   CALL	NXT
0021EF DD E1       6414                   POP	IX		;Pointer to source
0021F1 FE 2E       6415                   CP	'.'
0021F3 CA 83 22    6416                   JP	Z,ARRDOT	;Dot product
0021F6 B7          6417                   OR	A
0021F7 ED 42       6418                   SBC	HL,BC		;Same number of elements?
0021F9 C2 6E 18    6419                   JP	NZ,MISMATev	;'Type mismatch'
0021FC E1          6420                   POP	HL		;Pointer to destination
0021FD CB 7A       6421                   BIT	7,D
0021FF 20 1D       6422                   JR	NZ,ITEMA3
002201             6423   ;
002201             6424   ; Process numeric array item:
002201             6425   ;
002201 C5          6426   ITEMA2:         PUSH	BC
002202 E5          6427                   PUSH	HL
002203 7A          6428                   LD	A,D
002204 CD 25 19    6429                   CALL	LOADN
002207 DD E3       6430                   EX	(SP),IX
002209 D5          6431                   PUSH	DE
00220A CD CE 31    6432                   CALL	MODIFY
00220D D1          6433                   POP	DE
00220E DD E3       6434                   EX	(SP),IX
002210 E1          6435                   POP	HL
002211 4A          6436                   LD	C,D
002212 06 00       6437                   LD	B,0
002214 DD 09       6438                   ADD	IX,BC
002216 09          6439                   ADD	HL,BC
002217 C1          6440                   POP	BC
002218 0B          6441                   DEC	BC
002219 78          6442                   LD	A,B
00221A B1          6443                   OR	C
00221B 20 E4       6444                   JR	NZ,ITEMA2
00221D C9          6445                   RET
00221E             6446   ;
00221E             6447   ; Process string array item (just copy descriptors):
00221E             6448   ;
00221E EB          6449   ITEMA3:         EX	DE,HL		;DE = destination
00221F 60          6450                   LD	H,B
002220 69          6451                   LD	L,C
002221 29          6452                   ADD	HL,HL
002222 29          6453                   ADD	HL,HL
002223 44          6454                   LD	B,H
002224 4D          6455                   LD	C,L
002225 DD E5       6456                   PUSH	IX
002227 E1          6457                   POP	HL		;HL = source
002228 ED B0       6458                   LDIR
00222A C9          6459                   RET
00222B             6460   ;
00222B             6461   ; Process numeric non-array item:
00222B             6462   ;
00222B D1          6463   ITEMA4:         POP	DE		;Restore original operator
00222C FD E1       6464                   POP	IY		;Restore original text pointer
00222E CB 7A       6465                   BIT	7,D
002230 20 28       6466                   JR	NZ,ITEMA5
002232 D5          6467                   PUSH	DE
002233 CD 0B 18    6468                   CALL	EXPR45		;; should be EXP345
002236 79          6469                   LD	A,C		;Exponent
002237 D1          6470                   POP	DE		;Type / operator
002238 C1          6471                   POP	BC		;Count
002239 DD E1       6472                   POP	IX
00223B E5          6473   ITEMA7:         PUSH	HL
00223C C5          6474                   PUSH	BC
00223D D5          6475                   PUSH	DE
00223E D9          6476                   EXX
00223F E5          6477                   PUSH	HL
002240 D9          6478                   EXX
002241 F5          6479                   PUSH	AF
002242 4F          6480                   LD	C,A
002243 CD CE 31    6481                   CALL	MODIFY
002246 F1          6482                   POP	AF
002247 D9          6483                   EXX
002248 E1          6484                   POP	HL
002249 D9          6485                   EXX
00224A D1          6486                   POP	DE
00224B 4A          6487                   LD	C,D
00224C 06 00       6488                   LD	B,0
00224E DD 09       6489                   ADD	IX,BC
002250 C1          6490                   POP	BC
002251 0B          6491                   DEC	BC
002252 ED 62       6492                   SBC	HL,HL
002254 ED 42       6493                   SBC	HL,BC
002256 E1          6494                   POP	HL
002257 20 E2       6495                   JR	NZ,ITEMA7	;Copy into every element!
002259 C9          6496                   RET
00225A             6497   ;
00225A             6498   ; Process string non-array item:
00225A             6499   ;
00225A CD 3C 18    6500   ITEMA5:         CALL	EXPRS
00225D 7B          6501                   LD	A,E
00225E B7          6502                   OR	A
00225F 28 0B       6503                   JR	Z,ITEMA0
002261 21 00 52    6504                   LD	HL,ACCS
002264 11 00 53    6505                   LD	DE,BUFFER
002267 4F          6506                   LD	C,A
002268 06 00       6507                   LD	B,0
00226A ED B0       6508                   LDIR
00226C C1          6509   ITEMA0:         POP	BC
00226D DD E1       6510                   POP	IX
00226F D9          6511                   EXX
002270 6F          6512                   LD	L,A
002271 D9          6513                   EXX
002272 11 04 00    6514                   LD	DE,4
002275 21 00 53    6515                   LD	HL,BUFFER
002278 CD 09 32    6516   ITEMA6:         CALL	STORE4
00227B DD 19       6517                   ADD	IX,DE
00227D 0B          6518                   DEC	BC
00227E 78          6519                   LD	A,B
00227F B1          6520                   OR	C
002280 20 F6       6521                   JR	NZ,ITEMA6	;Copy into every element!
002282 C9          6522                   RET
002283             6523   ;
002283             6524   ; Array dot-product:
002283             6525   ;
002283 FD 23       6526   ARRDOT:         INC	IY		;Bump past dot
002285 7A          6527                   LD	A,D		;Type
002286 B7          6528                   OR	A
002287 FA 6E 18    6529                   JP	M,MISMATev	;'Type mismatch'
00228A EB          6530                   EX	DE,HL
00228B E1          6531                   POP	HL
00228C             6532   ;
00228C             6533   ; A = type
00228C             6534   ; DE = no. of elements in destination array (outer loop counter)
00228C             6535   ; IX = pointer to first source array data
00228C             6536   ; HL = pointer to destination data
00228C             6537   ; IY = text pointer
00228C             6538   ;
00228C D5          6539                   PUSH	DE
00228D E5          6540                   PUSH	HL
00228E DD E5       6541                   PUSH	IX
002290 F5          6542                   PUSH	AF
002291 CD BD 19    6543                   CALL	GETARR
002294 CD A4 19    6544                   CALL	ARRLEN
002297 F1          6545                   POP	AF
002298 EB          6546                   EX	DE,HL
002299 DD 6E 00    6547                   LD	L,(IX)
00229C DD 66 01    6548                   LD	H,(IX+1)	;Indirect pointer
00229F 6E          6549                   LD	L,(HL)		;No. of dimensions
0022A0 2D          6550                   DEC	L
0022A1 EB          6551                   EX	DE,HL
0022A2 DD E1       6552                   POP	IX
0022A4 C1          6553                   POP	BC
0022A5 D1          6554                   POP	DE
0022A6             6555   ;
0022A6 FD E5       6556                   PUSH	IY		;Save text pointer
0022A8 C5          6557                   PUSH	BC		;Save destination pointer
0022A9 E5          6558                   PUSH	HL
0022AA FD E1       6559                   POP	IY
0022AC             6560   ;
0022AC             6561   ; Get row counts:
0022AC             6562   ;
0022AC 21 01 00    6563                   LD	HL,1
0022AF 28 06       6564                   JR	Z,ARR1D
0022B1 FD 66 FF    6565                   LD	H,(IY-1)
0022B4 FD 6E FE    6566                   LD	L,(IY-2)
0022B7 D5          6567   ARR1D:          PUSH	DE
0022B8 EB          6568                   EX	DE,HL
0022B9 CD AD 36    6569                   CALL	X14OR5
0022BC EB          6570                   EX	DE,HL
0022BD D1          6571                   POP	DE
0022BE DD 46 FF    6572                   LD	B,(IX-1)
0022C1 DD 4E FE    6573                   LD	C,(IX-2)
0022C4             6574   ;
0022C4             6575   ; A = type, Z-flag set if first array is one-dimensional
0022C4             6576   ; BC = no. of rows of first source array (inner loop counter)
0022C4             6577   ; DE = no. of elements in destination array (outer loop counter)
0022C4             6578   ; HL = no. of rows of second source array * size of each element
0022C4             6579   ; IX = pointer to first source array
0022C4             6580   ; IY = pointer to second source array
0022C4             6581   ; (SP) = pointer to destination data
0022C4             6582   ;
0022C4             6583   ; Dot-product outer loop:
0022C4             6584   ;
0022C4 C5          6585   OUTER:          PUSH	BC		;1
0022C5 D5          6586                   PUSH	DE		;2
0022C6 E5          6587                   PUSH	HL		;3
0022C7 DD E5       6588                   PUSH	IX		;4
0022C9 FD E5       6589                   PUSH	IY		;5
0022CB 50          6590                   LD	D,B
0022CC 59          6591                   LD	E,C
0022CD F5          6592                   PUSH	AF
0022CE CD F8 1F    6593                   CALL	ZERO		;Zero accumulator
0022D1 F1          6594                   POP	AF
0022D2 D5          6595   INNER:          PUSH	DE		;6
0022D3 C5          6596                   PUSH	BC		;Save accumulator
0022D4 E5          6597                   PUSH	HL
0022D5 D9          6598                   EXX
0022D6 E5          6599                   PUSH	HL
0022D7 D9          6600                   EXX
0022D8             6601   ;
0022D8 CD 25 19    6602                   CALL	LOADN		;Load from (IX)
0022DB DD E5       6603                   PUSH	IX
0022DD FD E3       6604                   EX	(SP),IY
0022DF DD E1       6605                   POP	IX
0022E1             6606   ;
0022E1 CD E7 19    6607                   CALL	DLOADN		;Load from (IY)
0022E4 DD E5       6608                   PUSH	IX
0022E6 FD E3       6609                   EX	(SP),IY
0022E8 DD E1       6610                   POP	IX
0022EA             6611   ;
0022EA F5          6612                   PUSH	AF
0022EB 3E 0A       6613                   LD	A,10
0022ED CD 15 45    6614                   CALL	FPP		;Multiply
0022F0 DA 44 3F    6615                   JP	C,ERROR_
0022F3 F1          6616                   POP	AF
0022F4             6617   ;
0022F4 D9          6618                   EXX			;Restore accumulator
0022F5 EB          6619                   EX	DE,HL
0022F6 E1          6620                   POP	HL
0022F7 D9          6621                   EXX
0022F8 EB          6622                   EX	DE,HL
0022F9 E1          6623                   POP	HL
0022FA 08          6624                   EX	AF,AF'
0022FB 79          6625                   LD	A,C
0022FC C1          6626                   POP	BC
0022FD 47          6627                   LD	B,A
0022FE 08          6628                   EX	AF,AF'
0022FF             6629   ;
0022FF F5          6630                   PUSH	AF
002300 3E 0B       6631                   LD	A,11
002302 CD 15 45    6632                   CALL	FPP		;Accumulate
002305 DA 44 3F    6633                   JP	C,ERROR_
002308 F1          6634                   POP	AF
002309             6635   ;
002309             6636   ; Bump pointers:
002309             6637   ;
002309 D1          6638                   POP	DE		;5
00230A             6639   ;
00230A D9          6640                   EXX
00230B 4F          6641                   LD	C,A
00230C 06 00       6642                   LD	B,0
00230E DD 09       6643                   ADD	IX,BC
002310 D1          6644                   POP	DE
002311 C1          6645                   POP	BC
002312 E3          6646                   EX	(SP),HL
002313 EB          6647                   EX	DE,HL
002314 FD 19       6648                   ADD	IY,DE
002316 EB          6649                   EX	DE,HL
002317 E3          6650                   EX	(SP),HL
002318 C5          6651                   PUSH	BC
002319 D5          6652                   PUSH	DE
00231A D9          6653                   EXX
00231B             6654   ;
00231B             6655   ; Count inner loops:
00231B             6656   ;
00231B 1B          6657                   DEC	DE		;Inner loop counter
00231C 1C          6658                   INC	E
00231D 1D          6659                   DEC	E
00231E 20 B2       6660                   JR	NZ,INNER
002320 14          6661                   INC	D
002321 15          6662                   DEC	D
002322 20 AE       6663                   JR	NZ,INNER
002324             6664   ;
002324 FD E1       6665                   POP	IY		;4
002326 DD E1       6666                   POP	IX		;3
002328             6667   ;
002328             6668   ; Swap pointers:
002328             6669   ;
002328 D9          6670                   EXX
002329 08          6671                   EX	AF,AF'
00232A F1          6672                   POP	AF
00232B C1          6673                   POP	BC
00232C D1          6674                   POP	DE
00232D DD E3       6675                   EX	(SP),IX
00232F D5          6676                   PUSH	DE
002330 C5          6677                   PUSH	BC
002331 F5          6678                   PUSH	AF
002332 08          6679                   EX	AF,AF'
002333 D9          6680                   EXX
002334             6681   ;
002334             6682   ; Save to destination array and bump pointer:
002334             6683   ;
002334 F5          6684                   PUSH	AF
002335 D5          6685                   PUSH	DE
002336 CD F0 31    6686                   CALL	STOREN
002339 D1          6687                   POP	DE
00233A F1          6688                   POP	AF
00233B 4F          6689                   LD	C,A
00233C 06 00       6690                   LD	B,0
00233E DD 09       6691                   ADD	IX,BC
002340             6692   ;
002340             6693   ; Swap pointers:
002340             6694   ;
002340 D9          6695                   EXX
002341 08          6696                   EX	AF,AF'
002342 F1          6697                   POP	AF
002343 C1          6698                   POP	BC
002344 D1          6699                   POP	DE
002345 DD E3       6700                   EX	(SP),IX
002347 D5          6701                   PUSH	DE
002348 C5          6702                   PUSH	BC
002349 F5          6703                   PUSH	AF
00234A 08          6704                   EX	AF,AF'
00234B D9          6705                   EXX
00234C             6706   ;
00234C E1          6707                   POP	HL		;2
00234D D1          6708                   POP	DE		;1 Outer loop counter
00234E C1          6709                   POP	BC		;0
00234F 1B          6710                   DEC	DE		;Count outer loops
002350             6711   ;
002350             6712   ; Adjust IX & IY
002350             6713   ;
002350 C5          6714                   PUSH	BC
002351 D5          6715                   PUSH	DE
002352 E5          6716                   PUSH	HL
002353 4F          6717                   LD	C,A
002354 06 00       6718                   LD	B,0
002356 FD 09       6719                   ADD	IY,BC
002358 F5          6720                   PUSH	AF
002359 E5          6721                   PUSH	HL
00235A CD AD 36    6722                   CALL	X14OR5
00235D C1          6723                   POP	BC
00235E CD 90 23    6724                   CALL	MOD16
002361 F1          6725                   POP	AF
002362 B7          6726                   OR	A
002363 01 00 00    6727                   LD	BC,0
002366 ED 42       6728                   SBC	HL,BC
002368 E1          6729                   POP	HL
002369 D1          6730                   POP	DE
00236A C1          6731                   POP	BC
00236B 20 15       6732                   JR	NZ,MODNZ
00236D D5          6733                   PUSH	DE
00236E E5          6734                   PUSH	HL
00236F EB          6735                   EX	DE,HL
002370 FD E5       6736                   PUSH	IY
002372 E1          6737                   POP	HL
002373 B7          6738                   OR	A
002374 ED 52       6739                   SBC	HL,DE
002376 E5          6740                   PUSH	HL
002377 FD E1       6741                   POP	IY
002379 50          6742                   LD	D,B
00237A 59          6743                   LD	E,C
00237B CD AD 36    6744                   CALL	X14OR5
00237E DD 19       6745                   ADD	IX,DE
002380 E1          6746                   POP	HL
002381 D1          6747                   POP	DE
002382             6748   MODNZ:
002382             6749   ;
002382             6750   ; Count outer loops:
002382             6751   ;
002382 1C          6752                   INC	E
002383 1D          6753                   DEC	E
002384 C2 C4 22    6754                   JP	NZ,OUTER
002387 14          6755                   INC	D
002388 15          6756                   DEC	D
002389 C2 C4 22    6757                   JP	NZ,OUTER
00238C             6758   ;
00238C             6759   ; Exit:
00238C             6760   ;
00238C E1          6761                   POP	HL
00238D FD E1       6762                   POP	IY
00238F C9          6763                   RET
002390             6764   ;
002390             6765   ; HL = DE MOD BC
002390             6766   ;
002390 AF          6767   MOD16:          XOR	A
002391 67          6768                   LD	H,A
002392 6F          6769                   LD	L,A
002393 3E 11       6770                   LD	A,17
002395 ED 42       6771   MOD160:         SBC	HL,BC
002397 30 01       6772                   JR	NC,MOD161
002399 09          6773                   ADD	HL,BC
00239A 3F          6774   MOD161:         CCF
00239B CB 13       6775                   RL	E
00239D CB 12       6776                   RL	D
00239F 3D          6777                   DEC	A
0023A0 C8          6778                   RET	Z
0023A1 ED 6A       6779                   ADC	HL,HL
0023A3 18 F0       6780                   JR	MOD160
0023A5             6781   ;
0023A5             6782   ;                END
0023A5             6783   ; --- End eval.asm ---
0023A5             6784   
0023A5             6785   ; --- Begin exec.asm ---
0023A5             6786   ;
0023A5             6787   ;Automatically created from original source on 2024-12-15 15:29:12
0023A5             6788   ;
0023A5             6789                   .ASSUME ADL = 0
0023A5             6790   ;	.ORG 0x0000
0023A5             6791   ;                SEGMENT CODE
0023A5             6792   ;
0023A5             6793   ;BBC BASIC INTERPRETER - Z80 VERSION
0023A5             6794   ;STATEMENT EXECUTION MODULE - "EXEC"
0023A5             6795   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0023A5             6796   ;
0023A5             6797   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0023A5             6798   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0023A5             6799   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0023A5             6800   ;
0023A5             6801   ;VERSION 2.1, 22-01-1984
0023A5             6802   ;VERSION 3.1, 11-06-1987
0023A5             6803   ;VERSION 5.0, 12-07-2024
0023A5             6804   ;
0023A5             6805   ;                XDEF	XEQ
0023A5             6806   ;                XDEF	RUN0
0023A5             6807   ;                XDEF	CHAIN0
0023A5             6808   ;                XDEF	CHECK
0023A5             6809   ;                XDEF	MUL16
0023A5             6810   ;                XDEF	X14OR5
0023A5             6811   ;                XDEF	TERMQ
0023A5             6812   ;                XDEF	STOREN
0023A5             6813   ;                XDEF	STORE4
0023A5             6814   ;                XDEF	STORE5
0023A5             6815   ;                XDEF	STACCS
0023A5             6816   ;                XDEF	SPACES
0023A5             6817   ;                XDEF	FN
0023A5             6818   ;                XDEF	USR
0023A5             6819   ;                XDEF	ESCAPE
0023A5             6820   ;                XDEF	SYNTAX
0023A5             6821   ;                XDEF	CHANEL
0023A5             6822   ;                XDEF	CHNL
0023A5             6823   ;                XDEF	VAR_
0023A5             6824   ;                XDEF	TABIT
0023A5             6825   ;                XDEF	MODIFY
0023A5             6826   ;                XDEF	MODIFS
0023A5             6827   ;
0023A5             6828   ;                XREF	ASSEM
0023A5             6829   ;                XREF	ERROR_
0023A5             6830   ;                XREF	REPORT
0023A5             6831   ;                XREF	WARM
0023A5             6832   ;                XREF	CLOOP
0023A5             6833   ;                XREF	SAYLN
0023A5             6834   ;                XREF	LOAD0
0023A5             6835   ;                XREF	CRLF
0023A5             6836   ;                XREF	PBCDL
0023A5             6837   ;                XREF	TELL
0023A5             6838   ;                XREF	FINDL
0023A5             6839   ;                XREF	SETLIN
0023A5             6840   ;                XREF	CLEAR
0023A5             6841   ;                XREF	GETVAR
0023A5             6842   ;                XREF	PUTVAR
0023A5             6843   ;                XREF	GETDEF
0023A5             6844   ;                XREF	LOCATE
0023A5             6845   ;                XREF	CREATE
0023A5             6846   ;                XREF	OUTCHR
0023A5             6847   ;                XREF	EXTERR
0023A5             6848   ;                XREF	BYE
0023A5             6849   ;                XREF	NXT
0023A5             6850   ;                XREF	NLIST
0023A5             6851   ;                XREF	CSRON
0023A5             6852   ;                XREF	CSROFF
0023A5             6853   ;
0023A5             6854   ;                XREF	OSWRCH
0023A5             6855   ;                XREF	OSLINE
0023A5             6856   ;                XREF	OSSHUT
0023A5             6857   ;                XREF	OSBPUT
0023A5             6858   ;                XREF	OSBGET
0023A5             6859   ;                XREF	CLRSCN
0023A5             6860   ;                XREF	PUTCSR
0023A5             6861   ;                XREF	PUTIME
0023A5             6862   ;                XREF	PUTIMS
0023A5             6863   ;                XREF	PUTPTR
0023A5             6864   ;                XREF	OSCALL
0023A5             6865   ;                XREF	OSCLI
0023A5             6866   ;                XREF	TRAP
0023A5             6867   ;
0023A5             6868   ;                XREF	SOUND
0023A5             6869   ;                XREF	CLG
0023A5             6870   ;                XREF	DRAW
0023A5             6871   ;                XREF	ENVEL
0023A5             6872   ;                XREF	GCOL
0023A5             6873   ;                XREF	MODE
0023A5             6874   ;                XREF	MOVE
0023A5             6875   ;                XREF	PLOT
0023A5             6876   ;                XREF	COLOUR
0023A5             6877   ;                XREF	CIRCLE
0023A5             6878   ;                XREF	ELLIPS
0023A5             6879   ;                XREF	FILL
0023A5             6880   ;                XREF	MOUSE
0023A5             6881   ;                XREF	ORIGIN
0023A5             6882   ;                XREF	RECTAN
0023A5             6883   ;                XREF	LINE
0023A5             6884   ;                XREF	WAIT
0023A5             6885   ;                XREF	TINT
0023A5             6886   ;                XREF	SYS
0023A5             6887   ;
0023A5             6888   ;                XREF	STR
0023A5             6889   ;                XREF	HEXSTR
0023A5             6890   ;                XREF	EXPR
0023A5             6891   ;                XREF	EXPRN
0023A5             6892   ;                XREF	EXPRI
0023A5             6893   ;                XREF	EXPRS
0023A5             6894   ;                XREF	ITEMI
0023A5             6895   ;                XREF	CONS
0023A5             6896   ;                XREF	LOADS
0023A5             6897   ;                XREF	VAL0
0023A5             6898   ;                XREF	SFIX
0023A5             6899   ;                XREF	TEST
0023A5             6900   ;                XREF	LOAD4
0023A5             6901   ;                XREF	LOADN
0023A5             6902   ;                XREF	DLOAD5
0023A5             6903   ;                XREF	FPP
0023A5             6904   ;                XREF	COMMA
0023A5             6905   ;                XREF	BRAKET
0023A5             6906   ;                XREF	PUSHS
0023A5             6907   ;                XREF	POPS
0023A5             6908   ;                XREF	ZERO
0023A5             6909   ;                XREF	SCP
0023A5             6910   ;                XREF	LETARR
0023A5             6911   ;
0023A5             6912   ;                XREF	ACCS
0023A5             6913   ;                XREF	PAGE_
0023A5             6914   ;                XREF	LOMEM
0023A5             6915   ;                XREF	HIMEM
0023A5             6916   ;                XREF	FREE
0023A5             6917   ;                XREF	BUFFER
0023A5             6918   ;                XREF	ERRTRP
0023A5             6919   ;                XREF	ONERSP
0023A5             6920   ;                XREF	CURLIN
0023A5             6921   ;                XREF	COUNT
0023A5             6922   ;                XREF	WIDTH
0023A5             6923   ;                XREF	STAVAR
0023A5             6924   ;                XREF	DATPTR
0023A5             6925   ;                XREF	RANDOM
0023A5             6926   ;                XREF	TRACEN
0023A5             6927   ;                XREF	LISTON
0023A5             6928   ;                XREF	PC
0023A5             6929   ;                XREF	OC
0023A5             6930   ;
0023A5             6931   ; LF             EQU	0AH	; in equs.inc
0023A5             6932   ; CR             EQU	0DH	; in equs.inc
0023A5             6933   ; IN main.asm
0023A5             6934   ; TAND:           EQU	80H
0023A5             6935   ; TOR:            EQU	84H
0023A5             6936   ; TERROR:         EQU	85H
0023A5             6937   ; TLINE:          EQU	86H
0023A5             6938   TOFF:           EQU	87H
0023A5             6939   TSTEP:          EQU	88H
0023A5             6940   TSPC:           EQU	89H
0023A5             6941   TTAB:           EQU	8AH
0023A5             6942   ; TELSE:          EQU	8BH
0023A5             6943   ; TTHEN:          EQU	8CH
0023A5             6944   ; TLINO:          EQU	8DH
0023A5             6945   ; TTO:            EQU	0B8H
0023A5             6946   ; TBY:           EQU	0C0H
0023A5             6947   ; TWHILE:         EQU	0C7H
0023A5             6948   ; TWHEN:          EQU	0C9H
0023A5             6949   ; TOF:            EQU	0CAH
0023A5             6950   ; TENDCASE:       EQU	0CBH
0023A5             6951   ; TOTHERWISE:     EQU	0CCH
0023A5             6952   ; TENDIF:         EQU	0CDH
0023A5             6953   ; TENDWHILE:      EQU	0CEH
0023A5             6954   ; TCALL:          EQU	0D6H
0023A5             6955   ; TDATA:          EQU	0DCH
0023A5             6956   ; TDEF:           EQU	0DDH
0023A5             6957   ; TFOR:           EQU	0E3H
0023A5             6958   ; TGOSUB:         EQU	0E4H
0023A5             6959   ; TGOTO:          EQU	0E5H
0023A5             6960   ; TLOCAL:         EQU	0EAH
0023A5             6961   ; TNEXT:          EQU	0EDH
0023A5             6962   ; TON:            EQU	0EEH
0023A5             6963   ; TPROC:          EQU	0F2H
0023A5             6964   ; TREM:           EQU	0F4H
0023A5             6965   ; TREPEAT:        EQU	0F5H
0023A5             6966   TRETURN:        EQU	0F8H
0023A5             6967   TSTOP:          EQU	0FAH
0023A5             6968   ; TUNTIL:         EQU	0FDH
0023A5             6969   ; TEXIT:          EQU	10H
0023A5             6970   ; END in main.asm
0023A5             6971   ;
0023A5 77 30       6972   CMDTAB:         DW	LEFTSL
0023A7 8B 30       6973                   DW	MIDSL
0023A9 81 30       6974                   DW	RITESL
0023AB E0 25       6975                   DW	SYNTAX	;STR$
0023AD E0 25       6976                   DW	SYNTAX	;STRING$
0023AF E0 25       6977                   DW	SYNTAX	;EOF
0023B1 E0 25       6978                   DW	SYNTAX	;SUM
0023B3 26 2E       6979                   DW	WHILE
0023B5 57 2D       6980                   DW	CASE
0023B7 E0 25       6981                   DW	SYNTAX	;WHEN
0023B9 E0 25       6982                   DW	SYNTAX	;OF
0023BB 99 24       6983                   DW	XEQ	;ENDCASE
0023BD E0 25       6984                   DW	SYNTAX	;OTHERWISE
0023BF 99 24       6985                   DW	XEQ	;ENDIF
0023C1 43 2E       6986                   DW	ENDWHI	;ENDWHILE
0023C3 01 2F       6987                   DW	PTR
0023C5 15 2F       6988                   DW	PAGEV
0023C7 23 2F       6989                   DW	TIMEV
0023C9 42 2F       6990                   DW	LOMEMV
0023CB 54 2F       6991                   DW	HIMEMV
0023CD 9D 02       6992                   DW	SOUND
0023CF D3 2F       6993                   DW	BPUT
0023D1 0C 30       6994                   DW	CALL
0023D3 4C 24       6995                   DW	CHAIN
0023D5 96 2E       6996                   DW	CLR
0023D7 CB 2F       6997                   DW	CLOSE
0023D9 E1 02       6998                   DW	CLG
0023DB 75 2E       6999                   DW	CLS
0023DD 31 25       7000                   DW	REM		;DATA
0023DF 31 25       7001                   DW	REM		;DEF
0023E1 3E 26       7002                   DW	DIM
0023E3 E8 03       7003                   DW	DRAW
0023E5 D3 24       7004                   DW	END
0023E7 7D 2B       7005                   DW	ENDPRO
0023E9 6F 02       7006                   DW	ENVEL
0023EB 14 29       7007                   DW	FORex
0023ED CB 28       7008                   DW	GOSUB
0023EF B4 28       7009                   DW	GOTO
0023F1 39 03       7010                   DW	GCOL
0023F3 C9 2C       7011                   DW	IF_
0023F5 E2 2B       7012                   DW	INPUT
0023F7 A1 25       7013                   DW	LET
0023F9 13 2B       7014                   DW	LOCAL
0023FB D1 02       7015                   DW	MODE
0023FD E4 03       7016                   DW	MOVE
0023FF 61 29       7017                   DW	NEXT
002401 3A 28       7018                   DW	ON
002403 9C 2F       7019                   DW	VDU
002405 F0 03       7020                   DW	PLOT
002407 46 27       7021                   DW	PRINT
002409 E7 29       7022                   DW	PROC
00240B 80 2C       7023                   DW	READ
00240D 31 25       7024                   DW	REM
00240F E5 28       7025                   DW	REPEAT
002411 91 2E       7026                   DW	REPOR
002413 BC 2E       7027                   DW	RESTOR
002415 D6 28       7028                   DW	RETURN
002417 47 24       7029                   DW	RUN
002419 7E 2E       7030                   DW	STOP
00241B F9 02       7031                   DW	COLOUR
00241D 83 2F       7032                   DW	TRACE
00241F ED 28       7033                   DW	UNTIL
002421 79 2F       7034                   DW	WIDTHV
002423 08 25       7035                   DW	CLI		;OSCLI
002425 31 25       7036                   DW	REM		;NUL
002427 87 03       7037                   DW	CIRCLE
002429 B3 03       7038                   DW	ELLIPS
00242B EC 03       7039                   DW	FILL
00242D A6 04       7040                   DW	MOUSE
00242F E8 02       7041                   DW	ORIGIN
002431 10 16       7042                   DW	BYE		;QUIT
002433 25 04       7043                   DW	RECTAN
002435 5E 25       7044                   DW	SWAPex
002437 7D 05       7045                   DW	SYS
002439 7D 05       7046                   DW	TINT
00243B E5 04       7047                   DW	WAIT
00243D E0 25       7048                   DW	SYNTAX		;INSTALL
00243F 31 25       7049                   DW	REM		;CR
002441 9D 31       7050                   DW	PUT		;Token changed
002443 E0 25       7051                   DW	SYNTAX		;BY
002445 23 31       7052                   DW	EXITex
002447             7053   ;
002447             7054   CMDTAB_END:     EQU	$
002447             7055   ; TLAST:          EQU	TCMD-128+(CMDTAB_END-CMDTAB)/2
002447             7056   TLAST:          EQU	CMDTAB_END-CMDTAB/2+TCMD-128
002447             7057   ;
002447 CD 36 35    7058   RUN:            CALL	TERMQ
00244A 28 0D       7059                   JR	Z,RUN0
00244C CD 3C 18    7060   CHAIN:          CALL	EXPRS
00244F 3E 0D       7061                   LD	A,CR
002451 12          7062                   LD	(DE),A
002452 ED 7B E2 54 7063   CHAIN0:         LD	SP,(HIMEM)
002456 CD 00 40    7064                   CALL	LOAD0
002459 ED 7B E2 54 7065   RUN0:           LD	SP,(HIMEM)	;PREPARE FOR RUN
00245D DD 21 F6 54 7066                   LD	IX,RANDOM
002461 ED 5F       7067   RAND:           LD	A,R		;RANDOMISE (CARE!)
002463 28 FC       7068                   JR	Z,RAND
002465 07          7069                   RLCA
002466 07          7070                   RLCA
002467 DD 77 03    7071                   LD	(IX+3),A
00246A 9F          7072                   SBC	A,A
00246B DD 77 04    7073                   LD	(IX+4),A
00246E CD 43 40    7074                   CALL	CLEAR
002471 21 00 00    7075                   LD	HL,0
002474 22 EA 54    7076                   LD	(ERRTRP),HL
002477 2A DC 54    7077                   LD	HL,(PAGE_)
00247A CD F9 35    7078                   CALL	DSRCH		;LOOK FOR "DATA"
00247D 22 F0 54    7079                   LD	(DATPTR),HL	;SET DATA POINTER
002480 FD 2A DC 54 7080                   LD	IY,(PAGE_)
002484 CD DB 24    7081   XEQ0:           CALL	NEWLIN
002487 FD 7E 00    7082                   LD	A,(IY)
00248A FE 8B       7083                   CP	TELSE
00248C CA 30 2D    7084                   JP	Z,MELSE		;ELSE
00248F FE C9       7085                   CP	TWHEN
002491 CA 43 2D    7086                   JP	Z,WHEN		;WHEN
002494 FE CC       7087                   CP	TOTHERWISE
002496 CA 43 2D    7088                   JP	Z,WHEN
002499 FD 22 F4 54 7089   XEQ:            LD	(CURLIN),IY	;ERROR POINTER
00249D CD 17 12    7090                   CALL	TRAP		;CHECK KEYBOARD
0024A0 CD 0B 45    7091   XEQ1:           CALL	NXT
0024A3 FD 23       7092                   INC	IY
0024A5 FE 3A       7093                   CP	':'		;SEPARATOR
0024A7 28 F7       7094                   JR	Z,XEQ1
0024A9 FE 0D       7095                   CP	CR
0024AB 28 D7       7096                   JR	Z,XEQ0		;NEW PROGRAM LINE
0024AD FE 98       7097                   CP	TLAST
0024AF EA 93 25    7098                   JP	PE,LET0		;IMPLIED LET
0024B2 D6 C7       7099                   SUB	TCMD
0024B4 FA 16 25    7100                   JP	M,EXTRAS
0024B7 87          7101                   ADD	A,A
0024B8 4F          7102                   LD	C,A
0024B9 06 00       7103                   LD	B,0
0024BB 21 A5 23    7104                   LD	HL,CMDTAB
0024BE 09          7105                   ADD	HL,BC
0024BF 7E          7106                   LD	A,(HL)		;TABLE ENTRY
0024C0 23          7107                   INC	HL
0024C1 66          7108                   LD	H,(HL)
0024C2 6F          7109                   LD	L,A
0024C3 CD 0B 45    7110                   CALL	NXT
0024C6 E9          7111                   JP	(HL)		;EXECUTE STATEMENT
0024C7             7112   ;
0024C7             7113   ;END
0024C7             7114   ;
0024C7 FD E5       7115   ENDIM:          PUSH	IY
0024C9 E1          7116                   POP	HL
0024CA ED 4B DC 54 7117                   LD	BC,(PAGE_)
0024CE ED 42       7118                   SBC	HL,BC		;IMMEDIATE MODE ?
0024D0 DA B0 37    7119                   JP	C,CLOOP
0024D3 1E 00       7120   END:            LD	E,0
0024D5 CD 37 12    7121                   CALL	OSSHUT		;CLOSE ALL FILES
0024D8 C3 AF 37    7122                   JP	WARM		;"Ready"
0024DB             7123   ;
0024DB FD 7E 00    7124   NEWLIN:         LD	A,(IY+0)	;A=LINE LENGTH
0024DE 01 03 00    7125                   LD	BC,3
0024E1 FD 09       7126                   ADD	IY,BC
0024E3 B7          7127                   OR	A
0024E4 28 E1       7128                   JR	Z,ENDIM		;LENGTH=0, EXITex
0024E6 2A E6 54    7129                   LD	HL,(TRACEN)
0024E9 7C          7130                   LD	A,H
0024EA B5          7131                   OR	L
0024EB C8          7132                   RET	Z
0024EC FD 56 FF    7133                   LD	D,(IY-1)	;DE = LINE NUMBER
0024EF FD 5E FE    7134                   LD	E,(IY-2)
0024F2 ED 52       7135                   SBC	HL,DE
0024F4 D8          7136                   RET	C
0024F5 EB          7137                   EX	DE,HL
0024F6 3E 5B       7138                   LD	A,'['		;TRACE
0024F8 CD 02 41    7139                   CALL	OUTCHR
0024FB CD 92 41    7140                   CALL	PBCDL
0024FE 3E 5D       7141                   LD	A,']'
002500 CD 02 41    7142                   CALL	OUTCHR
002503 3E 20       7143                   LD	A,' '
002505 C3 02 41    7144                   JP	OUTCHR
002508             7145   ;
002508             7146   ;ROUTINES FOR EACH STATEMENT:
002508             7147   ;
002508             7148   ;OSCLI
002508             7149   ;
002508 CD 3C 18    7150   CLI:            CALL	EXPRS
00250B 3E 0D       7151                   LD	A,CR
00250D 12          7152                   LD	(DE),A
00250E 21 00 52    7153                   LD	HL,ACCS
002511 CD 97 15    7154                   CALL	OSCLI
002514 18 83       7155                   JR	XEQ
002516             7156   ;
002516 FE C4       7157   EXTRAS:         CP	TELSE-TCMD
002518 28 17       7158                   JR	Z,REM		;ELSE
00251A FE BE       7159                   CP	TERROR-TCMD
00251C 28 21       7160                   JR	Z,THROW		;ERROR
00251E FE BF       7161                   CP	TLINE-TCMD
002520 CA 71 03    7162                   JP	Z,LINE		;LINE
002523 FE C0       7163                   CP	TOFF-TCMD
002525 CA 5A 03    7164                   JP	Z,CSROFF	;OFF
002528 C3 E0 25    7165                   JP	SYNTAX
00252B             7166   ;
00252B             7167   ;REM, *
00252B             7168   ;
00252B FD E5       7169   EXT:            PUSH	IY
00252D E1          7170                   POP	HL
00252E CD 97 15    7171                   CALL	OSCLI
002531 FD E5       7172   REM:            PUSH	IY
002533 E1          7173                   POP	HL
002534 3E 0D       7174                   LD	A,CR
002536 47          7175                   LD	B,A
002537 ED B1       7176                   CPIR			;FIND LINE END
002539 E5          7177                   PUSH	HL
00253A FD E1       7178                   POP	IY
00253C C3 84 24    7179                   JP	XEQ0
00253F             7180   ;
00253F             7181   ;ERROR num,string$
00253F             7182   ;
00253F CD 33 18    7183   THROW:          CALL	EXPRI
002542 D9          7184                   EXX
002543 E5          7185                   PUSH	HL
002544 D9          7186                   EXX
002545 CD A2 20    7187                   CALL	COMMA
002548 CD 3C 18    7188                   CALL	EXPRS
00254B E1          7189                   POP	HL
00254C AF          7190                   XOR	A
00254D 12          7191                   LD	(DE),A
00254E 7D          7192                   LD	A,L
00254F 21 00 52    7193                   LD	HL,ACCS
002552 11 00 53    7194                   LD	DE,BUFFER
002555 D5          7195                   PUSH	DE
002556 01 00 01    7196                   LD	BC,256
002559 ED B0       7197                   LDIR
00255B C3 55 3F    7198                   JP	EXTERR
00255E             7199   ;
00255E             7200   ; SWAP
00255E             7201   ;
00255E CD E3 41    7202   SWAPex:           CALL	GETVAR
002561 20 0B       7203                   JR	NZ,SWAPNZ
002563 F5          7204                   PUSH	AF
002564 E5          7205                   PUSH	HL
002565 CD A2 20    7206                   CALL	COMMA
002568 CD 0B 45    7207                   CALL	NXT
00256B CD E3 41    7208                   CALL	GETVAR
00256E 20 6D       7209   SWAPNZ:         JR	NZ,NOSUCH
002570 D1          7210                   POP	DE
002571 C1          7211                   POP	BC
002572 B8          7212                   CP	B
002573 20 74       7213                   JR	NZ,MISMAT
002575 E6 0F       7214                   AND	00001111B
002577 28 70       7215                   JR	Z,MISMAT
002579 78          7216                   LD	A,B
00257A E6 C0       7217                   AND	11000000B
00257C 28 0A       7218                   JR	Z,SWAP1ex
00257E 06 02       7219                   LD	B,2
002580 F2 88 25    7220                   JP	P,SWAP1ex
002583 EA 88 25    7221                   JP	PE,SWAP1ex
002586 06 04       7222                   LD	B,4
002588 4E          7223   SWAP1ex:          LD	C,(HL)
002589 1A          7224                   LD	A,(DE)
00258A 77          7225                   LD	(HL),A
00258B 79          7226                   LD	A,C
00258C 12          7227                   LD	(DE),A
00258D 13          7228                   INC	DE
00258E 23          7229                   INC	HL
00258F 10 F7       7230                   DJNZ	SWAP1ex
002591 18 28       7231                   JR	XEQGO4
002593             7232   ;
002593             7233   ;[LET] var = expr
002593             7234   ;
002593 FE 2A       7235   LET0:           CP	'*'
002595 28 94       7236                   JR	Z,EXT
002597 FE 3D       7237                   CP	'='
002599 28 71       7238                   JR	Z,FNEND
00259B FE 5B       7239                   CP	'['
00259D 28 52       7240                   JR	Z,ASM
00259F FD 2B       7241                   DEC	IY
0025A1 CD AF 31    7242   LET:            CALL	ASSIGN
0025A4 CA 99 24    7243                   JP	Z,XEQ
0025A7 38 37       7244                   JR	C,SYNTAX	;"Syntax error"
0025A9 F2 FB 20    7245                   JP	P,LETARR	;Numeric array
0025AC EA FB 20    7246                   JP	PE,LETARR	;String array
0025AF 7A          7247                   LD	A,D		;Type
0025B0 D5          7248                   PUSH	DE
0025B1 E5          7249                   PUSH	HL
0025B2 CD 3C 18    7250                   CALL	EXPRS
0025B5 DD E1       7251                   POP	IX
0025B7 E1          7252                   POP	HL
0025B8 CD 18 32    7253                   CALL	MODIFS
0025BB C3 99 24    7254   XEQGO4:         JP	XEQ
0025BE             7255   ;
0025BE             7256   ; GETSTR - Get string variable
0025BE             7257   ;   Inputs: IY = text pointer
0025BE             7258   ;  Outputs: B = type
0025BE             7259   ;           Z-flag set if comma
0025BE             7260   ;
0025BE CD E3 41    7261   GETSTR:         CALL	GETVAR
0025C1 20 1A       7262                   JR	NZ,NOSUCH
0025C3 47          7263                   LD	B,A
0025C4 E6 C0       7264                   AND	11000000B
0025C6 F2 E9 25    7265                   JP	P,MISMAT
0025C9 EA E6 25    7266                   JP	PE,BADUSE
0025CC CB 40       7267                   BIT	0,B
0025CE 28 19       7268                   JR	Z,MISMAT
0025D0 CD 0B 45    7269                   CALL	NXT
0025D3 FE 2C       7270                   CP	','
0025D5 C9          7271                   RET
0025D6             7272   ;
0025D6 CD E3 41    7273   VAR_:           CALL	GETVAR
0025D9 C8          7274                   RET	Z
0025DA D2 CD 41    7275                   JP	NC,PUTVAR
0025DD 3E 1A       7276   NOSUCH:         LD	A,26		;'No such variable'
0025DF 21          7277                   DB	21H
0025E0 3E 10       7278   SYNTAX:         LD	A,16		;"Syntax error"
0025E2 21          7279                   DB	21H
0025E3 3E 11       7280   ESCAPE:         LD	A,17		;"Escape"
0025E5 21          7281                   DB	21H
0025E6 3E 0E       7282   BADUSE:         LD	A,14		;'Bad use of array'
0025E8 21          7283                   DB	21H
0025E9 3E 06       7284   MISMAT:         LD	A,6		;'Type mismatch'
0025EB C3 44 3F    7285   ERROR0ex:         JP	ERROR_
0025EE             7286   ;
0025EE CD DB 24    7287   ASM0:           CALL	NEWLIN
0025F1 FD 22 F4 54 7288   ASM:            LD	(CURLIN),IY
0025F5 CD 17 12    7289                   CALL	TRAP
0025F8 CD 87 05    7290                   CALL	ASSEM
0025FB 38 E3       7291                   JR	C,SYNTAX
0025FD FE 0D       7292                   CP	CR
0025FF 28 ED       7293                   JR	Z,ASM0
002601 21 FE 54    7294                   LD	HL,LISTON
002604 7E          7295                   LD	A,(HL)
002605 E6 0F       7296                   AND	0FH
002607 F6 30       7297                   OR	30H
002609 77          7298                   LD	(HL),A
00260A 18 AF       7299                   JR	XEQGO4
00260C             7300   ;
00260C             7301   ;=
00260C             7302   ;
00260C CD 02 17    7303   FNEND:          CALL	EXPR		;FUNCTION RESULT
00260F 08          7304                   EX	AF,AF'
002610 87          7305                   ADD	A,A
002611 7B          7306                   LD	A,E
002612 38 01       7307                   JR	C,FNEND1
002614 79          7308                   LD	A,C
002615 08          7309   FNEND1:         EX	AF,AF'
002616 E5          7310                   PUSH	HL
002617 D9          7311                   EXX
002618 C1          7312                   POP	BC
002619 EB          7313                   EX	DE,HL		;SAVE RESULT IN A'B'C'D'E'
00261A D9          7314                   EXX
00261B C1          7315   FNEND2:         POP	BC
00261C 21 E7 29    7316                   LD	HL,FNCHK
00261F AF          7317                   XOR	A
002620 ED 42       7318                   SBC	HL,BC
002622 28 0A       7319                   JR	Z,FNEND3
002624 C5          7320                   PUSH	BC
002625 CD 31 34    7321                   CALL	RESLOC
002628 20 F1       7322                   JR	NZ,FNEND2
00262A 3E 07       7323                   LD	A,7
00262C 18 BD       7324                   JR	ERROR0ex		;"No FN"
00262E             7325   ;
00262E FD E1       7326   FNEND3:         POP	IY
002630 FD 22 F4 54 7327                   LD	(CURLIN),IY	;IN CASE OF ERROR
002634 D9          7328                   EXX
002635 EB          7329                   EX	DE,HL
002636 C5          7330                   PUSH	BC
002637 D9          7331                   EXX
002638 E1          7332                   POP	HL
002639 08          7333                   EX	AF,AF'
00263A 5F          7334                   LD	E,A
00263B 4F          7335                   LD	C,A
00263C 1F          7336                   RRA
00263D C9          7337                   RET
00263E             7338   ;
00263E             7339   ;DIM var(dim1[,dim2[,...]])[,var(...]
00263E             7340   ;DIM var expr[,var expr...]
00263E             7341   ;
00263E FD E5       7342   DIM:            PUSH	IY
002640 FE 21       7343                   CP	'!'
002642 CA 0F 27    7344                   JP	Z,DIM4
002645 CD B0 42    7345                   CALL	LOCATE		;VARIABLE
002648 DA F9 26    7346                   JP	C,BADDIM
00264B C4 3C 43    7347                   CALL	NZ,CREATE
00264E FD 7E 00    7348                   LD	A,(IY)
002651 FE 28       7349                   CP	'('
002653 C2 0F 27    7350                   JP	NZ,DIM4
002656 E5          7351                   PUSH	HL
002657 DD E1       7352                   POP	IX
002659 7E          7353                   LD	A,(HL)
00265A E6 FE       7354                   AND	0FEH
00265C 23          7355                   INC	HL
00265D B6          7356                   OR	(HL)
00265E C2 0F 27    7357                   JP	NZ,DIM4
002661 C1          7358                   POP	BC		;LEVEL STACK
002662 7A          7359                   LD	A,D
002663 2A E0 54    7360                   LD	HL,(FREE)
002666 E5          7361                   PUSH	HL
002667 DD E3       7362                   EX	(SP),IX
002669 E5          7363                   PUSH	HL
00266A F5          7364                   PUSH	AF		;SAVE TYPE
00266B 11 01 00    7365                   LD	DE,1
00266E 42          7366                   LD	B,D		;DIMENSION COUNTER
00266F FD 23       7367   DIM1:           INC	IY
002671 C5          7368                   PUSH	BC
002672 D5          7369                   PUSH	DE
002673 DD E5       7370                   PUSH	IX
002675 CD 33 18    7371                   CALL	EXPRI		;DIMENSION SIZE
002678 CB 7C       7372                   BIT	7,H
00267A 20 7D       7373                   JR	NZ,BADDIM
00267C D9          7374                   EXX
00267D 23          7375                   INC	HL
00267E DD E1       7376                   POP	IX
002680 DD 23       7377                   INC	IX
002682 DD 75 00    7378                   LD	(IX),L		;SAVE SIZE
002685 DD 23       7379                   INC	IX
002687 DD 74 00    7380                   LD	(IX),H
00268A C1          7381                   POP	BC
00268B CD BD 36    7382                   CALL	MUL16		;HL=HL*BC
00268E 38 6C       7383                   JR	C,NOROOM	;TOO LARGE
002690 EB          7384                   EX	DE,HL		;DE=PRODUCT
002691 C1          7385                   POP	BC
002692 04          7386                   INC	B		;DIMENSION COUNTER
002693 FD 7E 00    7387                   LD	A,(IY)
002696 FE 2C       7388                   CP	','		;ANOTHER
002698 28 D5       7389                   JR	Z,DIM1
00269A DD 23       7390                   INC	IX
00269C CD AE 20    7391                   CALL	BRAKET		;CLOSING BRACKET
00269F F1          7392                   POP	AF		;RESTORE TYPE
0026A0 CD AD 36    7393                   CALL	X14OR5		;DE=DE*n
0026A3 38 57       7394                   JR	C,NOROOM
0026A5 E1          7395                   POP	HL
0026A6 70          7396                   LD	(HL),B		;NO. OF DIMENSIONS
0026A7 DD E3       7397                   EX	(SP),IX
0026A9 E1          7398                   POP	HL
0026AA E6 80       7399                   AND	80H
0026AC DD B6 00    7400                   OR	(IX)		;FLAGS
0026AF             7401   ;
0026AF             7402   ;  A = flags: bit 7 = string, bit 0 = LOCAL
0026AF             7403   ; DE = amount to allocate
0026AF             7404   ; HL = where to allocate (if not LOCAL)
0026AF             7405   ; (HL - FREE is size of 'descriptor')
0026AF             7406   ; IX = where to store pointer
0026AF             7407   ;
0026AF E5          7408   DIM3:           PUSH	HL
0026B0 24          7409                   INC	H		;Safety margin
0026B1 19          7410                   ADD	HL,DE
0026B2 38 48       7411                   JR	C,NOROOM
0026B4 ED 72       7412                   SBC	HL,SP
0026B6 30 44       7413                   JR	NC,NOROOM
0026B8 E1          7414                   POP	HL
0026B9 E5          7415                   PUSH	HL
0026BA ED 4B E0 54 7416                   LD	BC,(FREE)
0026BE B7          7417                   OR	A
0026BF ED 42       7418                   SBC	HL,BC
0026C1 44          7419                   LD	B,H
0026C2 4D          7420                   LD	C,L
0026C3 E1          7421                   POP	HL
0026C4 ED 42       7422                   SBC	HL,BC
0026C6 CB 47       7423                   BIT	0,A
0026C8 28 12       7424                   JR	Z,ARRCHK	;NOT LOCAL
0026CA 21 00 00    7425                   LD	HL,0
0026CD ED 52       7426                   SBC	HL,DE
0026CF B7          7427                   OR	A
0026D0 ED 42       7428                   SBC	HL,BC
0026D2 39          7429                   ADD	HL,SP
0026D3 28 07       7430                   JR	Z,ARRCHK	;RESERVE NOTHING
0026D5 F9          7431                   LD	SP,HL
0026D6 D5          7432                   PUSH	DE
0026D7 C5          7433                   PUSH	BC
0026D8 F5          7434                   PUSH	AF
0026D9 CD DC 26    7435                   CALL	ARRCHK
0026DC DD 75 00    7436   ARRCHK:         LD	(IX+0),L	;SAVE POINTER
0026DF DD 74 01    7437                   LD	(IX+1),H
0026E2 78          7438                   LD	A,B
0026E3 B1          7439                   OR	C
0026E4 28 09       7440                   JR	Z,DIM2
0026E6 D5          7441                   PUSH	DE
0026E7 EB          7442                   EX	DE,HL
0026E8 2A E0 54    7443                   LD	HL,(FREE)
0026EB ED B0       7444                   LDIR			;COPY DESCRIPTOR
0026ED EB          7445                   EX	DE,HL
0026EE D1          7446                   POP	DE
0026EF 7A          7447   DIM2:           LD	A,D
0026F0 B3          7448                   OR	E
0026F1 28 0E       7449                   JR	Z,DIM5
0026F3 36 00       7450                   LD	(HL),0		;INITIALISE ARRAY
0026F5 23          7451                   INC	HL
0026F6 1B          7452                   DEC	DE
0026F7 18 F6       7453                   JR	DIM2
0026F9             7454   ;
0026F9 3E 0A       7455   BADDIM:         LD	A,10		;"Bad DIM"
0026FB 21          7456                   DB	21H
0026FC 3E 0B       7457   NOROOM:         LD	A,11		;"DIM space"
0026FE C3 44 3F    7458   ERROR1ex:         JP	ERROR_
002701             7459   ;
002701 ED 72       7460   DIM5:           SBC	HL,SP
002703 30 04       7461                   JR	NC,DIM7		;LOCAL
002705 39          7462                   ADD	HL,SP
002706 22 E0 54    7463                   LD	(FREE),HL
002709 CD 00 45    7464   DIM7:           CALL	NLIST		;ANOTHER VARIABLE?
00270C C3 3E 26    7465                   JP	DIM
00270F             7466   ;
00270F FD E1       7467   DIM4:           POP	IY
002711 CD D6 25    7468                   CALL	VAR_
002714 B7          7469                   OR	A
002715 28 E2       7470                   JR	Z,BADDIM
002717 FA F9 26    7471                   JP	M,BADDIM
00271A CB 77       7472                   BIT	6,A
00271C 20 DB       7473                   JR	NZ,BADDIM
00271E 47          7474                   LD	B,A		;TYPE
00271F CD 0B 45    7475                   CALL	NXT
002722 FE EA       7476                   CP	TLOCAL
002724 3E 00       7477                   LD	A,0		;PRESET TO NOT LOCAL
002726 20 03       7478                   JR	NZ,DIM8
002728 FD 23       7479                   INC	IY
00272A 3C          7480                   INC	A		;FLAG LOCAL
00272B F5          7481   DIM8:           PUSH	AF
00272C 78          7482                   LD	A,B		;TYPE
00272D D9          7483                   EXX
00272E 21 00 00    7484                   LD	HL,0
002731 4C          7485                   LD	C,H
002732 CD F0 31    7486                   CALL	STOREN		;RESERVED AREA
002735 DD E5       7487                   PUSH	IX
002737 CD 33 18    7488                   CALL	EXPRI
00273A DD E1       7489                   POP	IX
00273C D9          7490                   EXX
00273D 23          7491                   INC	HL
00273E EB          7492                   EX	DE,HL
00273F 2A E0 54    7493                   LD	HL,(FREE)
002742 F1          7494                   POP	AF		;LOCAL FLAG
002743 C3 AF 26    7495                   JP	DIM3
002746             7496   ;
002746             7497   ;PRINT list...
002746             7498   ;PRINT #channel,list...
002746             7499   ;
002746 FE 23       7500   PRINT:          CP	'#'
002748 20 64       7501                   JR	NZ,PRINT0
00274A CD DB 36    7502                   CALL	CHNL		;CHANNEL NO. = E
00274D CD 00 45    7503   PRNTN1:         CALL	NLIST
002750 D5          7504                   PUSH	DE
002751 CD 02 17    7505                   CALL	EXPR		;ITEM TO PRINT
002754 08          7506                   EX	AF,AF'
002755 FA 75 27    7507                   JP	M,PRNTN2	;STRING
002758 D1          7508                   POP	DE
002759 C5          7509                   PUSH	BC
00275A D9          7510                   EXX
00275B 7D          7511                   LD	A,L
00275C D9          7512                   EXX
00275D CD 47 12    7513                   CALL	OSBPUT
002760 D9          7514                   EXX
002761 7C          7515                   LD	A,H
002762 D9          7516                   EXX
002763 CD 47 12    7517                   CALL	OSBPUT
002766 7D          7518                   LD	A,L
002767 CD 47 12    7519                   CALL	OSBPUT
00276A 7C          7520                   LD	A,H
00276B CD 47 12    7521                   CALL	OSBPUT
00276E C1          7522                   POP	BC
00276F 79          7523                   LD	A,C
002770 CD 47 12    7524                   CALL	OSBPUT
002773 18 D8       7525                   JR	PRNTN1
002775 4B          7526   PRNTN2:         LD	C,E
002776 D1          7527                   POP	DE
002777 21 00 52    7528                   LD	HL,ACCS
00277A 0C          7529                   INC	C
00277B 0D          7530   PRNTN3:         DEC	C
00277C 28 09       7531                   JR	Z,PRNTN4
00277E 7E          7532                   LD	A,(HL)
00277F 23          7533                   INC	HL
002780 C5          7534                   PUSH	BC
002781 CD 47 12    7535                   CALL	OSBPUT
002784 C1          7536                   POP	BC
002785 18 F4       7537                   JR	PRNTN3
002787 3E 0D       7538   PRNTN4:         LD	A,CR
002789 CD 47 12    7539                   CALL	OSBPUT
00278C 18 BF       7540                   JR	PRNTN1
00278E             7541   ;
00278E 06 02       7542   PRINT6:         LD	B,2
002790 18 22       7543                   JR	PRINTC
002792 01 00 01    7544   PRINT8:         LD	BC,100H
002795 18 1D       7545                   JR	PRINTC
002797 21 00 54    7546   PRINT9:         LD	HL,STAVAR
00279A AF          7547                   XOR	A
00279B BE          7548                   CP	(HL)
00279C 28 10       7549                   JR	Z,PRINT0
00279E 3A FB 54    7550                   LD	A,(COUNT)
0027A1 B7          7551                   OR	A
0027A2 28 0A       7552                   JR	Z,PRINT0
0027A4 96          7553   PRINTA:         SUB	(HL)
0027A5 28 07       7554                   JR	Z,PRINT0
0027A7 30 FB       7555                   JR	NC,PRINTA
0027A9 ED 44       7556                   NEG
0027AB CD A3 35    7557                   CALL	SPACES
0027AE 3A 00 54    7558   PRINT0:         LD	A,(STAVAR)
0027B1 4F          7559                   LD	C,A		;PRINTS
0027B2 06 00       7560                   LD	B,0		;PRINTF
0027B4 CD 36 35    7561   PRINTC:         CALL	TERMQ
0027B7 28 38       7562                   JR	Z,PRINT4
0027B9 CB 80       7563                   RES	0,B
0027BB FD 23       7564                   INC	IY
0027BD FE 7E       7565                   CP	'~'
0027BF 28 CD       7566                   JR	Z,PRINT6
0027C1 FE 3B       7567                   CP	';'
0027C3 28 CD       7568                   JR	Z,PRINT8
0027C5 FE 2C       7569                   CP	','
0027C7 28 CE       7570                   JR	Z,PRINT9
0027C9 CD 5C 35    7571                   CALL	FORMAT		;SPC, TAB, '
0027CC 28 E6       7572                   JR	Z,PRINTC
0027CE FD 2B       7573                   DEC	IY
0027D0 C5          7574                   PUSH	BC
0027D1 CD 02 17    7575                   CALL	EXPR		;VARIABLE TYPE
0027D4 08          7576                   EX	AF,AF'
0027D5 FA EB 27    7577                   JP	M,PRINT3	;STRING
0027D8 D1          7578                   POP	DE
0027D9 D5          7579                   PUSH	DE
0027DA CB 4A       7580                   BIT	1,D
0027DC F5          7581                   PUSH	AF
0027DD CC D0 1F    7582                   CALL	Z,STR		;DECIMAL
0027E0 F1          7583                   POP	AF
0027E1 C4 8D 1F    7584                   CALL	NZ,HEXSTR	;HEX
0027E4 C1          7585                   POP	BC
0027E5 C5          7586                   PUSH	BC
0027E6 79          7587                   LD	A,C
0027E7 93          7588                   SUB	E
0027E8 D4 A3 35    7589                   CALL	NC,SPACES		;RIGHT JUSTIFY
0027EB C1          7590   PRINT3:         POP	BC
0027EC CD B1 35    7591                   CALL	PTEXT		;PRINT
0027EF 18 C3       7592                   JR	PRINTC
0027F1 CB 40       7593   PRINT4:         BIT	0,B
0027F3 CC FB 40    7594                   CALL	Z,CRLF
0027F6 18 3F       7595                   JR	XEQGO3
0027F8             7596   ;
0027F8 FD 23       7597   ONERR:          INC	IY		;SKIP "ERROR"
0027FA CD 0B 45    7598                   CALL	NXT
0027FD 21 00 00    7599                   LD	HL,0		;FLAG NOT LOCAL
002800 FE EA       7600                   CP	TLOCAL
002802 20 1D       7601                   JR	NZ,ONERR1
002804 FD 23       7602                   INC	IY		;SKIP "LOCAL"
002806 2A EA 54    7603                   LD	HL,(ERRTRP)
002809 E5          7604                   PUSH	HL
00280A 2A EC 54    7605                   LD	HL,(ONERSP)
00280D E5          7606                   PUSH	HL
00280E 21 00 04    7607                   LD	HL,400H		;TYPE = 4, 'EXPONENT' = 0
002811 E5          7608                   PUSH	HL
002812 21 EA 54    7609                   LD	HL,ERRTRP
002815 E5          7610                   PUSH	HL
002816 21 2A 35    7611                   LD	HL,LOCCHK
002819 E5          7612                   PUSH	HL
00281A 21 00 00    7613                   LD	HL,0
00281D 39          7614                   ADD	HL,SP
00281E CD 0B 45    7615                   CALL	NXT
002821 22 EC 54    7616   ONERR1:         LD	(ONERSP),HL
002824 FD 22 EA 54 7617                   LD	(ERRTRP),IY
002828 FE 87       7618                   CP	TOFF
00282A C2 31 25    7619                   JP	NZ,REM
00282D FD 23       7620                   INC	IY		;SKIP "OFF"
00282F ED 62       7621                   SBC	HL,HL
002831 22 EC 54    7622                   LD	(ONERSP),HL
002834 22 EA 54    7623                   LD	(ERRTRP),HL
002837 C3 99 24    7624   XEQGO3:         JP	XEQ
00283A             7625   ;
00283A             7626   ;ON expr GOTO line[,line...] [ELSE statement]
00283A             7627   ;ON expr GOTO line[,line...] [ELSE line]
00283A             7628   ;ON expr GOSUB line[,line...] [ELSE statement]
00283A             7629   ;ON expr GOSUB line[,line...] [ELSE line]
00283A             7630   ;ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
00283A             7631   ;ON ERROR [LOCAL] statement [:statement...]
00283A             7632   ;ON ERROR [LOCAL] OFF
00283A             7633   ;
00283A CD 36 35    7634   ON:             CALL	TERMQ
00283D CA 56 03    7635                   JP	Z,CSRON
002840 FE 85       7636                   CP	TERROR
002842 28 B4       7637                   JR	Z,ONERR		;"ON ERROR"
002844 CD 33 18    7638                   CALL	EXPRI
002847 FD 7E 00    7639                   LD	A,(IY)
00284A FD 23       7640                   INC	IY
00284C 1E 2C       7641                   LD	E,','		;SEPARATOR
00284E FE E5       7642                   CP	TGOTO
002850 28 0B       7643                   JR	Z,ON1
002852 FE E4       7644                   CP	TGOSUB
002854 28 07       7645                   JR	Z,ON1
002856 1E F2       7646                   LD	E,TPROC
002858 BB          7647                   CP	E
002859 3E 27       7648                   LD	A,39
00285B 20 4F       7649                   JR	NZ,ERROR2ex	;"ON syntax"
00285D 57          7650   ON1:            LD	D,A
00285E D9          7651                   EXX
00285F E5          7652                   PUSH	HL
002860 D9          7653                   EXX
002861 C1          7654                   POP	BC		;ON INDEX
002862 78          7655                   LD	A,B
002863 B4          7656                   OR	H
002864 B5          7657                   OR	L
002865 20 32       7658                   JR	NZ,ON4		;OUT OF RANGE
002867 B1          7659                   OR	C
002868 28 2F       7660                   JR	Z,ON4
00286A 0D          7661                   DEC	C
00286B 28 11       7662                   JR	Z,ON3		;INDEX=1
00286D CD 36 35    7663   ON2:            CALL	TERMQ
002870 28 27       7664                   JR	Z,ON4		;OUT OF RANGE
002872 FD 23       7665                   INC	IY		;SKIP DELIMITER
002874 FE 22       7666                   CP	'"'
002876 28 1A       7667                   JR	Z,ON5
002878 BB          7668                   CP	E
002879 20 F2       7669                   JR	NZ,ON2
00287B 0D          7670                   DEC	C
00287C 20 EF       7671                   JR	NZ,ON2
00287E 7B          7672   ON3:            LD	A,E
00287F FE F2       7673                   CP	TPROC
002881 28 2C       7674                   JR	Z,ONPROC
002883 D5          7675                   PUSH	DE
002884 CD 60 18    7676                   CALL	ITEMI		;LINE NUMBER
002887 D1          7677                   POP	DE
002888 7A          7678                   LD	A,D
002889 FE E5       7679                   CP	TGOTO
00288B 28 30       7680                   JR	Z,GOTO2
00288D CD 42 35    7681                   CALL	SPAN		;SKIP REST OF LIST
002890 18 3C       7682                   JR	GOSUB1
002892             7683   ;
002892 CD 99 36    7684   ON5:            CALL	QUOTE
002895 FD 23       7685                   INC	IY
002897 18 D4       7686                   JR	ON2
002899             7687   ;
002899 FD 7E 00    7688   ON4:            LD	A,(IY)
00289C FD 23       7689                   INC	IY
00289E FE 8B       7690                   CP	TELSE
0028A0 CA E2 2C    7691                   JP	Z,IF1		;ELSE CLAUSE
0028A3 FE 0D       7692                   CP	CR
0028A5 20 F2       7693                   JR	NZ,ON4
0028A7 3E 28       7694                   LD	A,40		;'ON range'
0028A9 21          7695                   DB	21H
0028AA 3E 22       7696   FORVAR:         LD	A,34		;'FOR variable'
0028AC C3 44 3F    7697   ERROR2ex:         JP	ERROR_
0028AF             7698   ;
0028AF 3E EE       7699   ONPROC:         LD	A,TON
0028B1 C3 E7 29    7700                   JP	PROC
0028B4             7701   ;
0028B4             7702   ;GOTO line
0028B4             7703   ;
0028B4 CD 60 18    7704   GOTO:           CALL	ITEMI		;LINE NUMBER
0028B7 CD 36 35    7705   GOTO1:          CALL	TERMQ
0028BA C2 E0 25    7706                   JP	NZ,SYNTAX
0028BD D9          7707   GOTO2:          EXX
0028BE CD 43 41    7708                   CALL	FINDL
0028C1 E5          7709                   PUSH	HL
0028C2 FD E1       7710                   POP	IY
0028C4 CA 84 24    7711                   JP	Z,XEQ0
0028C7 3E 29       7712                   LD	A,41
0028C9 18 E1       7713                   JR	ERROR2ex		;"No such line"
0028CB             7714   ;
0028CB             7715   ;GOSUB line
0028CB             7716   ;
0028CB CD 60 18    7717   GOSUB:          CALL	ITEMI		;LINE NUMBER
0028CE FD E5       7718   GOSUB1:         PUSH	IY		;TEXT POINTER
0028D0 CD 86 32    7719                   CALL	CHECK		;CHECK ROOM
0028D3 CD B7 28    7720                   CALL	GOTO1		;SAVE MARKER
0028D6             7721   GOSCHK:         EQU	$
0028D6             7722   ;
0028D6             7723   ;RETURN
0028D6             7724   ;
0028D6 D1          7725   RETURN:         POP	DE		;MARKER
0028D7 21 D6 28    7726                   LD	HL,GOSCHK
0028DA B7          7727                   OR	A
0028DB ED 52       7728                   SBC	HL,DE
0028DD FD E1       7729                   POP	IY
0028DF 28 30       7730                   JR	Z,XEQGO2ex
0028E1 3E 26       7731                   LD	A,38
0028E3 18 C7       7732                   JR	ERROR2ex		;"No GOSUB"
0028E5             7733   ;
0028E5             7734   ;REPEAT
0028E5             7735   ;
0028E5 FD E5       7736   REPEAT:         PUSH	IY
0028E7 CD 86 32    7737                   CALL	CHECK
0028EA CD 99 24    7738                   CALL	XEQ
0028ED             7739   REPCHK:         EQU	$
0028ED             7740   ;
0028ED             7741   ;UNTIL expr
0028ED             7742   ;
0028ED C1          7743   UNTIL:          POP	BC
0028EE C5          7744                   PUSH	BC
0028EF 21 ED 28    7745                   LD	HL,REPCHK
0028F2 B7          7746                   OR	A
0028F3 ED 42       7747                   SBC	HL,BC
0028F5 28 0B       7748                   JR	Z,UNTIL1
0028F7 3E 03       7749                   LD	A,3
0028F9 CD 31 34    7750                   CALL	RESLOC
0028FC 20 EF       7751                   JR	NZ,UNTIL
0028FE 3E 2B       7752                   LD	A,43
002900 18 AA       7753                   JR	ERROR2ex		;"Not in a REPEAT loop"
002902             7754   ;
002902 CD 33 18    7755   UNTIL1:         CALL	EXPRI
002905 CD 59 1F    7756                   CALL	TEST
002908 C1          7757                   POP	BC
002909 D1          7758                   POP	DE
00290A 20 05       7759                   JR	NZ,XEQGO2ex		;TRUE
00290C D5          7760                   PUSH	DE
00290D C5          7761                   PUSH	BC
00290E D5          7762                   PUSH	DE
00290F FD E1       7763                   POP	IY
002911 C3 99 24    7764   XEQGO2ex:         JP	XEQ
002914             7765   ;
002914             7766   ;FOR var = expr TO expr [STEP expr]
002914             7767   ;
002914 CD AF 31    7768   FORex:            CALL	ASSIGN
002917 20 91       7769                   JR	NZ,FORVAR	;"FOR variable"
002919 F5          7770                   PUSH	AF		;SAVE TYPE
00291A FD 7E 00    7771                   LD	A,(IY)
00291D FE B8       7772                   CP	TTO
00291F 3E 24       7773                   LD	A,36
002921 20 89       7774                   JR	NZ,ERROR2ex	;"No TO"
002923 FD 23       7775                   INC	IY
002925 DD E5       7776                   PUSH	IX
002927 CD 2C 18    7777                   CALL	EXPRN		;LIMIT
00292A DD E1       7778                   POP	IX
00292C F1          7779                   POP	AF
00292D 47          7780                   LD	B,A		;TYPE
00292E C5          7781                   PUSH	BC		;SAVE ON STACK
00292F E5          7782                   PUSH	HL
002930 21 00 00    7783                   LD	HL,0
002933 4C          7784                   LD	C,H
002934 D9          7785                   EXX
002935 E5          7786                   PUSH	HL
002936 21 01 00    7787                   LD	HL,1		;PRESET STEP
002939 D9          7788                   EXX
00293A FD 7E 00    7789                   LD	A,(IY)
00293D FE 88       7790                   CP	TSTEP
00293F 20 09       7791                   JR	NZ,FOR1
002941 FD 23       7792                   INC	IY
002943 DD E5       7793                   PUSH	IX
002945 CD 2C 18    7794                   CALL	EXPRN		;STEP
002948 DD E1       7795                   POP	IX
00294A 06 08       7796   FOR1:           LD	B,8		;FPP '>'
00294C CB 7C       7797                   BIT	7,H
00294E 20 02       7798                   JR	NZ,FOR2		;STEP SIGN
002950 06 0C       7799                   LD	B,12		;FPP '<'
002952 C5          7800   FOR2:           PUSH	BC
002953 E5          7801                   PUSH	HL
002954 D9          7802                   EXX
002955 E5          7803                   PUSH	HL
002956 D9          7804                   EXX
002957 FD E5       7805                   PUSH	IY		;SAVE TEXT POINTER
002959 DD E5       7806                   PUSH	IX		;LOOP VARIABLE
00295B CD 86 32    7807                   CALL	CHECK
00295E CD 99 24    7808                   CALL	XEQ
002961             7809   FORCHK:         EQU	$
002961             7810   ;
002961             7811   ;NEXT [var[,var...]]
002961             7812   ;
002961 C1          7813   NEXT:           POP	BC		;MARKER
002962 21 61 29    7814                   LD	HL,FORCHK
002965 B7          7815                   OR	A
002966 ED 42       7816                   SBC	HL,BC
002968 28 0C       7817                   JR	Z,NEXT2
00296A C5          7818                   PUSH	BC
00296B 3E 03       7819                   LD	A,3
00296D CD 31 34    7820                   CALL	RESLOC
002970 20 EF       7821                   JR	NZ,NEXT
002972 3E 20       7822                   LD	A,32
002974 18 6A       7823                   JR	ERROR3ex		;"Not in a FOR loop"
002976             7824   ;
002976 CD 36 35    7825   NEXT2:          CALL	TERMQ
002979 E1          7826                   POP	HL
00297A E5          7827                   PUSH	HL
00297B C5          7828                   PUSH	BC
00297C E5          7829                   PUSH	HL
00297D C4 E3 41    7830                   CALL	NZ,GETVAR	;VARIABLE
002980 D1          7831                   POP	DE
002981 EB          7832                   EX	DE,HL
002982 B7          7833                   OR	A
002983 ED 52       7834   NEXT0:          SBC	HL,DE
002985 20 47       7835                   JR	NZ,NEXT1
002987 D5          7836                   PUSH	DE
002988 DD 21 08 00 7837                   LD	IX,6+2
00298C DD 39       7838                   ADD	IX,SP
00298E CD F1 19    7839                   CALL	DLOAD5		;STEP
002991 DD 7E 0B    7840                   LD	A,(IX+11)	;TYPE
002994 DD E1       7841                   POP	IX
002996 CD 25 19    7842                   CALL	LOADN		;LOOP VARIABLE
002999 F5          7843                   PUSH	AF
00299A 3E 0B       7844                   LD	A,'+' & 0FH
00299C CD 15 45    7845                   CALL	FPP		;ADD STEP
00299F 38 3F       7846                   JR	C,ERROR3ex
0029A1 F1          7847                   POP	AF		;RESTORE TYPE
0029A2 CD F0 31    7848                   CALL	STOREN		;UPDATE VARIABLE
0029A5 DD 21 0C 00 7849                   LD	IX,12
0029A9 DD 39       7850                   ADD	IX,SP
0029AB CD F1 19    7851                   CALL	DLOAD5		;LIMIT
0029AE DD 7E FF    7852                   LD	A,(IX-1)
0029B1 CD 15 45    7853                   CALL	FPP		;TEST AGAINST LIMIT
0029B4 38 2A       7854                   JR	C,ERROR3ex
0029B6 24          7855                   INC	H
0029B7 20 0A       7856                   JR	NZ,LOOP		;KEEP LOOPING
0029B9 21 12 00    7857                   LD	HL,18
0029BC 39          7858                   ADD	HL,SP
0029BD F9          7859                   LD	SP,HL
0029BE CD 00 45    7860                   CALL	NLIST
0029C1 18 9E       7861                   JR	NEXT
0029C3             7862   ;
0029C3 C1          7863   LOOP:           POP	BC
0029C4 D1          7864                   POP	DE
0029C5 FD E1       7865                   POP	IY
0029C7 FD E5       7866                   PUSH	IY
0029C9 D5          7867                   PUSH	DE
0029CA C5          7868                   PUSH	BC
0029CB C3 99 24    7869                   JP	XEQ
0029CE             7870   ;
0029CE 21 12 00    7871   NEXT1:          LD	HL,18
0029D1 39          7872                   ADD	HL,SP
0029D2 F9          7873                   LD	SP,HL		;"POP" THE STACK
0029D3 C1          7874                   POP	BC
0029D4 21 61 29    7875                   LD	HL,FORCHK
0029D7 ED 42       7876                   SBC	HL,BC
0029D9 E1          7877                   POP	HL		;VARIABLE POINTER
0029DA E5          7878                   PUSH	HL
0029DB C5          7879                   PUSH	BC
0029DC 28 A5       7880                   JR	Z,NEXT0
0029DE 3E 21       7881                   LD	A,33
0029E0 C3 44 3F    7882   ERROR3ex:         JP	ERROR_		;"Can't match FOR"
0029E3             7883   ;
0029E3             7884   ;FNname
0029E3             7885   ;N.B. ENTERED WITH A <> TON
0029E3             7886   ;
0029E3 F5          7887   FN:             PUSH	AF		;MAKE SPACE ON STACK
0029E4 CD EB 29    7888                   CALL	PROC1
0029E7             7889   FNCHK:          EQU	$
0029E7             7890   ;
0029E7             7891   ;PROCname
0029E7             7892   ;N.B. ENTERED WITH A = ON PROC FLAG
0029E7             7893   ;
0029E7 F5          7894   PROC:           PUSH	AF		;MAKE SPACE ON STACK
0029E8 CD EB 29    7895                   CALL	PROC1
0029EB             7896   PROCHK:         EQU	$
0029EB CD 86 32    7897   PROC1:          CALL	CHECK
0029EE FD 2B       7898                   DEC	IY
0029F0 FD E5       7899                   PUSH	IY
0029F2 CD 96 42    7900                   CALL	GETDEF
0029F5 C1          7901                   POP	BC
0029F6 28 39       7902                   JR	Z,PROC4
0029F8 3E 1E       7903                   LD	A,30
0029FA 38 E4       7904                   JR	C,ERROR3ex	;"Bad call"
0029FC C5          7905                   PUSH	BC
0029FD 2A DC 54    7906                   LD	HL,(PAGE_)
002A00 3E DD       7907   PROC2:          LD	A,TDEF
002A02 CD FB 35    7908                   CALL	SEARCHex		;LOOK FOR "DEF"
002A05 38 21       7909                   JR	C,PROC3
002A07 E5          7910                   PUSH	HL
002A08 FD E1       7911                   POP	IY
002A0A FD 23       7912                   INC	IY		;SKIP DEF
002A0C CD 0B 45    7913                   CALL	NXT
002A0F CD 96 42    7914                   CALL	GETDEF
002A12 FD E5       7915                   PUSH	IY
002A14 D1          7916                   POP	DE
002A15 38 09       7917                   JR	C,PROC6
002A17 C4 3C 43    7918                   CALL	NZ,CREATE
002A1A FD E5       7919                   PUSH	IY
002A1C D1          7920                   POP	DE
002A1D 73          7921                   LD	(HL),E
002A1E 23          7922                   INC	HL
002A1F 72          7923                   LD	(HL),D		;SAVE ADDRESS
002A20 EB          7924   PROC6:          EX	DE,HL
002A21 3E 0D       7925                   LD	A,CR
002A23 47          7926                   LD	B,A
002A24 ED B1       7927                   CPIR			;SKIP TO END OF LINE
002A26 18 D8       7928                   JR	PROC2
002A28 FD E1       7929   PROC3:          POP	IY		;RESTORE TEXT POINTER
002A2A CD 96 42    7930                   CALL	GETDEF
002A2D 3E 1D       7931                   LD	A,29
002A2F 20 AF       7932                   JR	NZ,ERROR3ex	;"No such FN/PROC"
002A31 5E          7933   PROC4:          LD	E,(HL)
002A32 23          7934                   INC	HL
002A33 56          7935                   LD	D,(HL)		;GET ADDRESS
002A34 21 02 00    7936                   LD	HL,2
002A37 39          7937                   ADD	HL,SP
002A38 CD 0B 45    7938                   CALL	NXT		;ALLOW SPACE BEFORE (
002A3B D5          7939                   PUSH	DE		;EXCHANGE DE,IY
002A3C FD E3       7940                   EX	(SP),IY
002A3E D1          7941                   POP	DE
002A3F FE 28       7942                   CP	'('		;ARGUMENTS?
002A41 C2 E5 2A    7943                   JP	NZ,PROC5
002A44 CD 0B 45    7944                   CALL	NXT		;ALLOW SPACE BEFORE (
002A47 FE 28       7945                   CP	'('
002A49 C2 E0 25    7946                   JP	NZ,SYNTAX	;"Syntax error"
002A4C FD E5       7947                   PUSH	IY
002A4E C1          7948                   POP	BC		;SAVE IY IN BC
002A4F D9          7949                   EXX
002A50 08          7950                   EX	AF,AF'
002A51 AF          7951                   XOR	A		;INITIALISE RETURN COUNT
002A52 08          7952                   EX	AF,AF'
002A53 CD BE 34    7953                   CALL	SAVLOC		;SAVE DUMMY VARIABLES
002A56 08          7954                   EX	AF,AF'
002A57 B7          7955                   OR	A
002A58 28 16       7956                   JR	Z,RETCHK	;NO RETURNS
002A5A E5          7957                   PUSH	HL
002A5B ED 44       7958                   NEG
002A5D 6F          7959                   LD	L,A
002A5E ED 44       7960                   NEG
002A60 26 FF       7961                   LD	H,-1		;HL = -RETURNS
002A62 29          7962                   ADD	HL,HL
002A63 29          7963                   ADD	HL,HL
002A64 29          7964                   ADD	HL,HL		;-RETURNS * 8
002A65 E3          7965                   EX	(SP),HL
002A66 DD E1       7966                   POP	IX
002A68 DD 39       7967                   ADD	IX,SP
002A6A DD F9       7968                   LD	SP,IX
002A6C F5          7969                   PUSH	AF		;PUSH RETURN COUNT
002A6D CD 70 2A    7970                   CALL	RETCHK		;PUSH MARKER
002A70 08          7971   RETCHK:         EX	AF,AF'
002A71 CD AE 20    7972                   CALL	BRAKET		;CLOSING BRACKET
002A74 D9          7973                   EXX
002A75 C5          7974                   PUSH	BC
002A76 FD E1       7975                   POP	IY		;RESTORE IY
002A78 E5          7976                   PUSH	HL
002A79 CD CD 32    7977                   CALL	ARGUE		;TRANSFER ARGUMENTS
002A7C E1          7978                   POP	HL
002A7D             7979   ;
002A7D             7980   ; If any of the dummy arguments is the same as a passed-by-reference
002A7D             7981   ; variable, then it must not be restored on exit (it would overwrite
002A7D             7982   ; the wanted returned values), therefore search the saved values on
002A7D             7983   ; the stack and if a match is found set bit 4 of the type.  On exit
002A7D             7984   ; from the FN/PROC this will prevent the dummies from being restored.
002A7D             7985   ;
002A7D E3          7986                   EX	(SP),HL
002A7E B7          7987                   OR	A
002A7F 01 70 2A    7988                   LD	BC,RETCHK
002A82 ED 42       7989                   SBC	HL,BC
002A84 09          7990                   ADD	HL,BC
002A85 E3          7991                   EX	(SP),HL
002A86 20 5D       7992                   JR	NZ,PROC5	;No RETURNs
002A88             7993   ;
002A88 D5          7994                   PUSH	DE
002A89 E5          7995                   PUSH	HL
002A8A 21 07 00    7996                   LD	HL,7		;Skip two PUSHes and RETCHK
002A8D 39          7997                   ADD	HL,SP
002A8E 7E          7998                   LD	A,(HL)		;RETURN count
002A8F 23          7999                   INC	HL
002A90 E5          8000                   PUSH	HL
002A91 DD E1       8001                   POP	IX		;Address RETURNs table
002A93 5F          8002   PROC0:          LD	E,A
002A94 16 00       8003                   LD	D,0
002A96 EB          8004                   EX	DE,HL
002A97 29          8005                   ADD	HL,HL
002A98 29          8006                   ADD	HL,HL
002A99 29          8007                   ADD	HL,HL
002A9A 19          8008                   ADD	HL,DE		;HL addresses SAVLOC stack
002A9B 23          8009                   INC	HL
002A9C 23          8010                   INC	HL		;Bump past LOCCHK
002A9D 5E          8011   PROC7:          LD	E,(HL)
002A9E 23          8012                   INC	HL
002A9F 56          8013                   LD	D,(HL)		;DE = SAVLOC VARPTR
002AA0 23          8014                   INC	HL
002AA1 4E          8015                   LD	C,(HL)		;Length (if string)
002AA2 23          8016                   INC	HL
002AA3 46          8017                   LD	B,(HL)		;Variable type
002AA4             8018   ;
002AA4             8019   ; Scan RETURNs table for VARPTR match
002AA4             8020   ;
002AA4 C5          8021                   PUSH	BC		;Save type
002AA5 E5          8022                   PUSH	HL
002AA6 DD E5       8023                   PUSH	IX
002AA8 47          8024                   LD	B,A		;B = RETURN count
002AA9 DD 6E 04    8025   PROC8:          LD	L,(IX+4)
002AAC DD 66 05    8026                   LD	H,(IX+5)	;HL = RETURNed VARPTR
002AAF B7          8027                   OR	A
002AB0 ED 52       8028                   SBC	HL,DE
002AB2 28 09       8029                   JR	Z,PROC9
002AB4 EB          8030                   EX	DE,HL
002AB5 11 08 00    8031                   LD	DE,8
002AB8 DD 19       8032                   ADD	IX,DE
002ABA EB          8033                   EX	DE,HL
002ABB 10 EC       8034                   DJNZ	PROC8
002ABD DD E1       8035   PROC9:          POP	IX
002ABF E1          8036                   POP	HL
002AC0 C1          8037                   POP	BC		;Restore type
002AC1             8038   ;
002AC1             8039   ; If match, set bit 4 of type:
002AC1             8040   ;
002AC1 20 02       8041                   JR	NZ,PROCA
002AC3 CB E6       8042                   SET	4,(HL)		;Flag don't restore
002AC5             8043   ;
002AC5             8044   ; Increment past stacked data:
002AC5             8045   ;
002AC5 11 03 00    8046   PROCA:          LD	DE,3
002AC8 CB 70       8047                   BIT	6,B
002ACA 20 08       8048                   JR	NZ,PROCB	;Whole array
002ACC 1E 05       8049                   LD	E,5
002ACE CB 78       8050                   BIT	7,B
002AD0 28 02       8051                   JR	Z,PROCB		;Numeric
002AD2 59          8052                   LD	E,C
002AD3 13          8053                   INC	DE
002AD4 19          8054   PROCB:          ADD	HL,DE
002AD5 4E          8055                   LD	C,(HL)
002AD6 23          8056                   INC	HL
002AD7 46          8057                   LD	B,(HL)
002AD8 23          8058                   INC	HL		; BC = marker ?
002AD9 EB          8059                   EX	DE,HL
002ADA 21 2A 35    8060                   LD	HL,LOCCHK
002ADD B7          8061                   OR	A
002ADE ED 42       8062                   SBC	HL,BC
002AE0 EB          8063                   EX	DE,HL
002AE1 28 BA       8064                   JR	Z,PROC7		;Another
002AE3 E1          8065                   POP	HL
002AE4 D1          8066                   POP	DE
002AE5             8067   ;
002AE5 73          8068   PROC5:          LD	(HL),E		;SAVE "RETURN ADDRESS"
002AE6 23          8069                   INC	HL
002AE7 7E          8070                   LD	A,(HL)
002AE8 72          8071                   LD	(HL),D
002AE9 FE EE       8072                   CP	TON		;WAS IT "ON PROC" ?
002AEB 20 0C       8073                   JR	NZ,XEQGO
002AED D5          8074                   PUSH	DE
002AEE FD E3       8075                   EX	(SP),IY
002AF0 CD 42 35    8076                   CALL	SPAN		;SKIP REST OF ON LIST
002AF3 FD E3       8077                   EX	(SP),IY
002AF5 D1          8078                   POP	DE
002AF6 72          8079                   LD	(HL),D
002AF7 2B          8080                   DEC	HL
002AF8 73          8081                   LD	(HL),E
002AF9 C3 99 24    8082   XEQGO:          JP	XEQ
002AFC             8083   ;
002AFC FD 23       8084   LOCERR:         INC	IY
002AFE 18 F9       8085                   JR	XEQGO
002B00             8086   ;
002B00             8087   ;LOCAL DATA
002B00             8088   ;
002B00 FD 23       8089   LOCDAT:         INC	IY
002B02 2A F0 54    8090                   LD	HL,(DATPTR)
002B05 E5          8091                   PUSH	HL
002B06 3E 40       8092                   LD	A,40H
002B08 F5          8093                   PUSH	AF
002B09 21 F0 54    8094                   LD	HL,DATPTR
002B0C E5          8095                   PUSH	HL
002B0D 21 2A 35    8096                   LD	HL,LOCCHK
002B10 E5          8097                   PUSH	HL
002B11 18 E6       8098                   JR	XEQGO
002B13             8099   ;
002B13             8100   ;LOCAL var[,var...]
002B13             8101   ;
002B13 FE 85       8102   LOCAL:          CP	TERROR
002B15 28 E5       8103                   JR	Z,LOCERR
002B17 FE DC       8104                   CP	TDATA
002B19 28 E5       8105                   JR	Z,LOCDAT
002B1B C1          8106                   POP	BC
002B1C C5          8107                   PUSH	BC
002B1D 21 E7 29    8108                   LD	HL,FNCHK
002B20 B7          8109                   OR	A
002B21 ED 42       8110                   SBC	HL,BC
002B23 28 23       8111                   JR	Z,LOCAL1
002B25 21 EB 29    8112                   LD	HL,PROCHK
002B28 B7          8113                   OR	A
002B29 ED 42       8114                   SBC	HL,BC
002B2B 28 1B       8115                   JR	Z,LOCAL1
002B2D 21 2A 35    8116                   LD	HL,LOCCHK
002B30 B7          8117                   OR	A
002B31 ED 42       8118                   SBC	HL,BC
002B33 28 13       8119                   JR	Z,LOCAL1
002B35 21 DC 26    8120                   LD	HL,ARRCHK
002B38 B7          8121                   OR	A
002B39 ED 42       8122                   SBC	HL,BC
002B3B 28 0B       8123                   JR	Z,LOCAL1
002B3D 21 70 2A    8124                   LD	HL,RETCHK
002B40 B7          8125                   OR	A
002B41 ED 42       8126                   SBC	HL,BC
002B43 3E 0C       8127                   LD	A,12
002B45 C2 44 3F    8128                   JP	NZ,ERROR_	;"Not LOCAL"
002B48 FD E5       8129   LOCAL1:         PUSH	IY
002B4A C1          8130                   POP	BC
002B4B D9          8131                   EXX
002B4C FD 2B       8132                   DEC	IY
002B4E CD BE 34    8133                   CALL	SAVLOC
002B51 D9          8134                   EXX
002B52 C5          8135                   PUSH	BC
002B53 FD E1       8136                   POP	IY
002B55 CD E3 41    8137   LOCAL2:         CALL	GETVAR
002B58 C2 E0 25    8138                   JP	NZ,SYNTAX
002B5B CB 77       8139                   BIT	6,A		;ARRAY?
002B5D 20 14       8140                   JR	NZ,LOCAL4
002B5F B7          8141                   OR	A		;TYPE
002B60 08          8142                   EX	AF,AF'
002B61 CD F8 1F    8143                   CALL	ZERO
002B64 08          8144                   EX	AF,AF'
002B65 F5          8145                   PUSH	AF
002B66 F4 F0 31    8146                   CALL	P,STOREN	;ZERO
002B69 F1          8147                   POP	AF
002B6A 59          8148                   LD	E,C
002B6B FC 41 32    8149                   CALL	M,STORES
002B6E CD 00 45    8150   LOCAL3:         CALL	NLIST
002B71 18 E2       8151                   JR	LOCAL2
002B73             8152   ;
002B73 DD 36 00 01 8153   LOCAL4:         LD	(IX+0),1	;FLAG LOCAL ARRAY
002B77 DD 36 01 00 8154                   LD	(IX+1),0
002B7B 18 F1       8155                   JR	LOCAL3
002B7D             8156   ;
002B7D             8157   ;ENDPROC
002B7D             8158   ;
002B7D C1          8159   ENDPRO:         POP	BC
002B7E 21 EB 29    8160                   LD	HL,PROCHK	;PROC MARKER
002B81 AF          8161                   XOR	A
002B82 ED 42       8162                   SBC	HL,BC
002B84 28 0B       8163                   JR	Z,ENDPR1
002B86 C5          8164                   PUSH	BC		;PUT BACK
002B87 CD 31 34    8165                   CALL	RESLOC
002B8A 20 F1       8166                   JR	NZ,ENDPRO
002B8C 3E 0D       8167                   LD	A,13
002B8E C3 44 3F    8168                   JP	ERROR_		;"No PROC"
002B91             8169   ;
002B91 FD E1       8170   ENDPR1:         POP	IY
002B93 C3 99 24    8171   XEQGO6:         JP	XEQ
002B96             8172   ;
002B96             8173   ;INPUT #channel,var,var...
002B96             8174   ;
002B96 CD DB 36    8175   INPUTN:         CALL	CHNL		;E = CHANNEL NUMBER
002B99 CD 00 45    8176   INPN1:          CALL	NLIST
002B9C D5          8177                   PUSH	DE
002B9D CD D6 25    8178                   CALL	VAR_
002BA0 D1          8179                   POP	DE
002BA1 F5          8180                   PUSH	AF		;SAVE TYPE
002BA2 E5          8181                   PUSH	HL		;VARPTR
002BA3 B7          8182                   OR	A
002BA4 FA C9 2B    8183                   JP	M,INPN2		;STRING
002BA7 CD 3F 12    8184                   CALL	OSBGET
002BAA D9          8185                   EXX
002BAB 6F          8186                   LD	L,A
002BAC D9          8187                   EXX
002BAD CD 3F 12    8188                   CALL	OSBGET
002BB0 D9          8189                   EXX
002BB1 67          8190                   LD	H,A
002BB2 D9          8191                   EXX
002BB3 CD 3F 12    8192                   CALL	OSBGET
002BB6 6F          8193                   LD	L,A
002BB7 CD 3F 12    8194                   CALL	OSBGET
002BBA 67          8195                   LD	H,A
002BBB CD 3F 12    8196                   CALL	OSBGET
002BBE 4F          8197                   LD	C,A
002BBF DD E1       8198                   POP	IX
002BC1 F1          8199                   POP	AF		;RESTORE TYPE
002BC2 D5          8200                   PUSH	DE		;SAVE CHANNEL
002BC3 CD F0 31    8201                   CALL	STOREN
002BC6 D1          8202                   POP	DE
002BC7 18 D0       8203                   JR	INPN1
002BC9 21 00 52    8204   INPN2:          LD	HL,ACCS
002BCC CD 3F 12    8205   INPN3:          CALL	OSBGET
002BCF FE 0D       8206                   CP	CR
002BD1 28 04       8207                   JR	Z,INPN4
002BD3 77          8208                   LD	(HL),A
002BD4 2C          8209                   INC	L
002BD5 20 F5       8210                   JR	NZ,INPN3
002BD7 DD E1       8211   INPN4:          POP	IX
002BD9 F1          8212                   POP	AF
002BDA D5          8213                   PUSH	DE
002BDB EB          8214                   EX	DE,HL
002BDC CD 3E 32    8215                   CALL	STACCS
002BDF D1          8216                   POP	DE
002BE0 18 B7       8217                   JR	INPN1
002BE2             8218   ;
002BE2             8219   ;INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BE2             8220   ;INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BE2             8221   ;
002BE2 FE 23       8222   INPUT:          CP	'#'
002BE4 28 B0       8223                   JR	Z,INPUTN
002BE6 0E 00       8224                   LD	C,0		;FLAG PROMPT
002BE8 FE 86       8225                   CP	TLINE
002BEA 20 04       8226                   JR	NZ,INPUT0
002BEC FD 23       8227                   INC	IY		;SKIP "LINE"
002BEE 0E 80       8228                   LD	C,80H
002BF0 21 00 53    8229   INPUT0:         LD	HL,BUFFER
002BF3 36 0D       8230                   LD	(HL),CR		;INITIALISE EMPTY
002BF5 CD 36 35    8231   INPUT1:         CALL	TERMQ
002BF8 28 99       8232                   JR	Z,XEQGO6	;DONE
002BFA FD 23       8233                   INC	IY
002BFC FE 2C       8234                   CP	','
002BFE 28 51       8235                   JR	Z,INPUT3	;SKIP COMMA
002C00 FE 3B       8236                   CP	';'
002C02 28 4D       8237                   JR	Z,INPUT3
002C04 E5          8238                   PUSH	HL		;SAVE BUFFER POINTER
002C05 FE 22       8239                   CP	'"'
002C07 20 0A       8240                   JR	NZ,INPUT6
002C09 C5          8241                   PUSH	BC
002C0A CD 7A 19    8242                   CALL	CONS
002C0D C1          8243                   POP	BC
002C0E CD B1 35    8244                   CALL	PTEXT		;PRINT PROMPT
002C11 18 05       8245                   JR	INPUT9
002C13 CD 5C 35    8246   INPUT6:         CALL	FORMAT		;SPC, TAB, '
002C16 20 05       8247                   JR	NZ,INPUT2
002C18 E1          8248   INPUT9:         POP	HL
002C19 CB C1       8249                   SET	0,C		;FLAG NO PROMPT
002C1B 18 D3       8250                   JR	INPUT0
002C1D FD 2B       8251   INPUT2:         DEC	IY
002C1F C5          8252                   PUSH	BC
002C20 CD D6 25    8253                   CALL	VAR_
002C23 C1          8254                   POP	BC
002C24 E1          8255                   POP	HL
002C25 F5          8256                   PUSH	AF		;SAVE TYPE
002C26 7E          8257                   LD	A,(HL)
002C27 23          8258                   INC	HL
002C28 FE 0D       8259                   CP	CR		;BUFFER EMPTY?
002C2A CC 55 2C    8260                   CALL	Z,REFILL
002C2D CB 79       8261                   BIT	7,C
002C2F F5          8262                   PUSH	AF
002C30 C4 CF 35    8263                   CALL	NZ,LINES
002C33 F1          8264                   POP	AF
002C34 CC BE 35    8265                   CALL	Z,FETCHS
002C37 F1          8266                   POP	AF		;RESTORE TYPE
002C38 C5          8267                   PUSH	BC
002C39 E5          8268                   PUSH	HL
002C3A B7          8269                   OR	A
002C3B FA 4C 2C    8270                   JP	M,INPUT4	;STRING
002C3E F5          8271                   PUSH	AF
002C3F DD E5       8272                   PUSH	IX
002C41 CD 22 1C    8273                   CALL	VAL0
002C44 DD E1       8274                   POP	IX
002C46 F1          8275                   POP	AF
002C47 CD F0 31    8276                   CALL	STOREN
002C4A 18 03       8277                   JR	INPUT5
002C4C CD 3E 32    8278   INPUT4:         CALL	STACCS
002C4F E1          8279   INPUT5:         POP	HL
002C50 C1          8280                   POP	BC
002C51 CB 81       8281   INPUT3:         RES	0,C
002C53 18 A0       8282                   JR	INPUT1
002C55             8283   ;
002C55 CB 41       8284   REFILL:         BIT	0,C
002C57 20 0A       8285                   JR	NZ,REFIL0	;NO PROMPT
002C59 3E 3F       8286                   LD	A,'?'
002C5B CD 02 41    8287                   CALL	OUTCHR		;PROMPT
002C5E 3E 20       8288                   LD	A,' '
002C60 CD 02 41    8289                   CALL	OUTCHR
002C63 21 00 53    8290   REFIL0:         LD	HL,BUFFER
002C66 C5          8291                   PUSH	BC
002C67 E5          8292                   PUSH	HL
002C68 DD E5       8293                   PUSH	IX
002C6A CD CB 11    8294                   CALL	OSLINE
002C6D DD E1       8295                   POP	IX
002C6F E1          8296                   POP	HL
002C70 C1          8297                   POP	BC
002C71 47          8298                   LD	B,A		;POS AT ENTRY
002C72 AF          8299                   XOR	A
002C73 32 FB 54    8300                   LD	(COUNT),A
002C76 B8          8301                   CP	B
002C77 C8          8302                   RET	Z
002C78 7E          8303   REFIL1:         LD	A,(HL)
002C79 FE 0D       8304                   CP	CR
002C7B C8          8305                   RET	Z
002C7C 23          8306                   INC	HL
002C7D 10 F9       8307                   DJNZ	REFIL1
002C7F C9          8308                   RET
002C80             8309   ;
002C80             8310   ;READ var[,var...]
002C80             8311   ;
002C80 FE 23       8312   READ:           CP	'#'
002C82 CA 96 2B    8313                   JP	Z,INPUTN
002C85 2A F0 54    8314                   LD	HL,(DATPTR)
002C88 7E          8315   READ0:          LD	A,(HL)
002C89 FE 3A       8316                   CP	':'
002C8B CC 78 2C    8317                   CALL	Z,REFIL1
002C8E 23          8318                   INC	HL		;SKIP COMMA | "DATA"
002C8F FE 0D       8319                   CP	CR		;END OF DATA STMT?
002C91 CC C0 2C    8320                   CALL	Z,GETDAT
002C94 E5          8321                   PUSH	HL
002C95 CD D6 25    8322                   CALL	VAR_
002C98 E1          8323                   POP	HL
002C99 B7          8324                   OR	A
002C9A FA B0 2C    8325                   JP	M,READ1		;STRING
002C9D E5          8326                   PUSH	HL
002C9E FD E3       8327                   EX	(SP),IY
002CA0 F5          8328                   PUSH	AF		;SAVE TYPE
002CA1 DD E5       8329                   PUSH	IX
002CA3 CD 2C 18    8330                   CALL	EXPRN
002CA6 DD E1       8331                   POP	IX
002CA8 F1          8332                   POP	AF
002CA9 CD F0 31    8333                   CALL	STOREN
002CAC FD E3       8334                   EX	(SP),IY
002CAE 18 07       8335                   JR	READ2
002CB0 CD BE 35    8336   READ1:          CALL	FETCHS
002CB3 E5          8337                   PUSH	HL
002CB4 CD 3E 32    8338                   CALL	STACCS
002CB7 E1          8339   READ2:          POP	HL
002CB8 22 F0 54    8340                   LD	(DATPTR),HL
002CBB CD 00 45    8341                   CALL	NLIST
002CBE 18 C8       8342                   JR	READ0
002CC0             8343   ;
002CC0 CD F9 35    8344   GETDAT:         CALL	DSRCH
002CC3 23          8345                   INC	HL
002CC4 D0          8346                   RET	NC
002CC5 3E 2A       8347                   LD	A,42
002CC7 18 64       8348                   JR	ERROR4ex		;"Out of DATA"
002CC9             8349   ;
002CC9             8350   ;IF expr statement
002CC9             8351   ;IF expr THEN statement [ELSE statement]
002CC9             8352   ;IF expr THEN line [ELSE line]
002CC9             8353   ;IF expr THEN
002CC9             8354   ;
002CC9 CD 33 18    8355   IF_:            CALL	EXPRI
002CCC CD 59 1F    8356                   CALL	TEST
002CCF 28 2A       8357                   JR	Z,IFNOT		;FALSE
002CD1 FD 7E 00    8358                   LD	A,(IY)
002CD4 FE 8C       8359                   CP	TTHEN
002CD6 C2 99 24    8360                   JP	NZ,XEQ
002CD9 FD 23       8361   IF0:            INC	IY		;SKIP "THEN"
002CDB FD 7E 00    8362                   LD	A,(IY)
002CDE FE 3B       8363                   CP	';'
002CE0 28 F7       8364                   JR	Z,IF0
002CE2 CD 0B 45    8365   IF1:            CALL	NXT
002CE5 FE 8D       8366                   CP	TLINO
002CE7 C2 99 24    8367                   JP	NZ,XEQ		;STATEMENT FOLLOWS
002CEA C3 B4 28    8368                   JP	GOTO		;LINE NO. FOLLOWS
002CED             8369   ;
002CED FD 7E 00    8370   IFELSE:         LD	A,(IY)
002CF0 FD 23       8371                   INC	IY
002CF2 FE 3B       8372                   CP	';'
002CF4 20 0A       8373                   JR	NZ,IFNEXT
002CF6 18 1E       8374                   JR	IFTHEN
002CF8             8375   ;
002CF8 CD 99 36    8376   IF2:            CALL	QUOTE		;SKIP STRING
002CFB FD 7E 00    8377   IFNOT:          LD	A,(IY)
002CFE FD 23       8378                   INC	IY
002D00 FE 22       8379   IFNEXT:         CP	'"'
002D02 28 F4       8380                   JR	Z,IF2		;QUOTED STRING
002D04 FE F4       8381                   CP	TREM
002D06 CA 31 25    8382                   JP	Z,REM		;REM
002D09 FE 0D       8383                   CP	CR
002D0B CA 84 24    8384                   JP	Z,XEQ0		;END OF LINE
002D0E FE 8B       8385                   CP	TELSE
002D10 28 D0       8386                   JR	Z,IF1		;ELSE CLAUSE
002D12 FE 8C       8387                   CP	TTHEN
002D14 20 E5       8388                   JR	NZ,IFNOT	;TRY FOR END AGAIN
002D16 FD 7E 00    8389   IFTHEN:         LD	A,(IY)
002D19 FE 0D       8390                   CP	CR
002D1B 20 D0       8391                   JR	NZ,IFELSE
002D1D 01 8B 00    8392                   LD	BC,TELSE
002D20 11 8C CD    8393                   LD	DE,TENDIF*256+TTHEN
002D23 FD 23       8394                   INC	IY
002D25 CD 11 36    8395                   CALL	NSCAN
002D28 CA A0 24    8396                   JP	Z,XEQ1
002D2B 3E 31       8397   NENDIF:         LD	A,49
002D2D C3 44 3F    8398   ERROR4ex:         JP	ERROR_		;"Missing ENDIF"
002D30             8399   ;
002D30             8400   ; ELSE (multi-line)
002D30             8401   ;
002D30 01 FD FF    8402   MELSE:          LD	BC,-3
002D33 FD 09       8403                   ADD	IY,BC
002D35 01 CD 00    8404                   LD	BC,TENDIF
002D38 11 8C CD    8405                   LD	DE,TENDIF*256+TTHEN
002D3B CD 11 36    8406                   CALL	NSCAN
002D3E 20 EB       8407                   JR	NZ,NENDIF
002D40 C3 99 24    8408   XEQGO7:         JP	XEQ
002D43             8409   ;
002D43             8410   ; WHEN and OTHERWISE:
002D43             8411   ;
002D43 01 FD FF    8412   WHEN:           LD	BC,-3
002D46 FD 09       8413                   ADD	IY,BC
002D48 01 CB 00    8414                   LD	BC,TENDCASE
002D4B 11 CA CB    8415                   LD	DE,TENDCASE*256+TOF
002D4E CD 11 36    8416                   CALL	NSCAN
002D51 28 ED       8417                   JR	Z,XEQGO7
002D53 3E 2F       8418                   LD	A,47
002D55 18 D6       8419                   JR	ERROR4ex		;"Missing ENDCASE"
002D57             8420   ;
002D57             8421   ; CASE
002D57             8422   ;
002D57 CD 02 17    8423   CASE:           CALL	EXPR		;String or numeric
002D5A 08          8424                   EX	AF,AF'
002D5B 06 00       8425                   LD	B,0		;Flag numeric
002D5D F2 66 2D    8426                   JP	P,CASE6		;numeric
002D60 CD 19 20    8427                   CALL	PUSHS		;put string on stack
002D63 C1          8428                   POP	BC		;C = length
002D64 06 01       8429                   LD	B,1		;Flag string
002D66 FD 7E 00    8430   CASE6:          LD	A,(IY)
002D69 FD 23       8431                   INC	IY
002D6B FE CA       8432                   CP	TOF
002D6D 3E 25       8433                   LD	A,37
002D6F 20 BC       8434                   JR	NZ,ERROR4ex	;"Missing OF"
002D71 FD 7E 00    8435                   LD	A,(IY)
002D74 FD 23       8436                   INC	IY		;Address line-length byte
002D76 FE 0D       8437                   CP	CR
002D78 3E 30       8438                   LD	A,48
002D7A 20 B1       8439                   JR	NZ,ERROR4ex	;"OF not last"
002D7C AF          8440   CASE1:          XOR	A		;Level
002D7D D9          8441   CASE0:          EXX
002D7E E5          8442                   PUSH	HL		;Push to stack
002D7F D9          8443                   EXX
002D80 E5          8444                   PUSH	HL
002D81 C5          8445                   PUSH	BC
002D82 6F          8446                   LD	L,A		;Level
002D83 01 C9 CC    8447                   LD	BC,TOTHERWISE*256+TWHEN
002D86 11 CA CB    8448                   LD	DE,TENDCASE*256+TOF
002D89 CD 13 36    8449                   CALL	NSCAN1
002D8C C1          8450                   POP	BC		;Restore from stack
002D8D E1          8451                   POP	HL
002D8E D9          8452                   EXX
002D8F E1          8453                   POP	HL
002D90 D9          8454                   EXX
002D91 3E 2F       8455                   LD	A,47
002D93 C2 44 3F    8456                   JP	NZ,ERROR_	;Missing ENDCASE
002D96 FD 7E FF    8457                   LD	A,(IY-1)
002D99 FE CB       8458                   CP	TENDCASE
002D9B 28 56       8459                   JR	Z,CASE9
002D9D FE CC       8460                   CP	TOTHERWISE
002D9F 28 52       8461                   JR	Z,CASE9
002DA1 CB 40       8462   CASE4:          BIT	0,B		;Numeric or string?
002DA3 20 69       8463                   JR	NZ,CASE3
002DA5 C5          8464                   PUSH	BC		;Type/exponent/length
002DA6 E5          8465                   PUSH	HL		;MS 32 bits
002DA7 D9          8466                   EXX
002DA8 E5          8467                   PUSH	HL		;LS 32 bits
002DA9 D9          8468                   EXX
002DAA CD 2C 18    8469                   CALL	EXPRN
002DAD DD 21 00 00 8470                   LD	IX,0
002DB1 DD 39       8471                   ADD	IX,SP		;Address stack
002DB3 D9          8472                   EXX
002DB4 DD 5E 00    8473                   LD	E,(IX+0)	;Get LS 32-bits
002DB7 DD 56 01    8474                   LD	D,(IX+1)
002DBA D9          8475                   EXX
002DBB DD 5E 02    8476                   LD	E,(IX+2)
002DBE DD 56 03    8477                   LD	D,(IX+3)	;Get MS 32-bits
002DC1 DD 46 04    8478                   LD	B,(IX+4)	;Get exponent
002DC4 3E 09       8479                   LD	A,9
002DC6 CD 15 45    8480                   CALL	FPP		;In case integer vs float
002DC9 7D          8481                   LD	A,L
002DCA B7          8482                   OR	A		;NZ if equal
002DCB D9          8483                   EXX
002DCC E1          8484                   POP	HL
002DCD D9          8485                   EXX
002DCE E1          8486                   POP	HL
002DCF C1          8487                   POP	BC
002DD0 20 2C       8488                   JR	NZ,CASE5	;Match found
002DD2 FD 7E 00    8489   CASE2:          LD	A,(IY)
002DD5 FD 23       8490                   INC	IY
002DD7 FE 2C       8491                   CP	','
002DD9 28 C6       8492                   JR	Z,CASE4		;Not found, try another
002DDB D9          8493                   EXX
002DDC FD E5       8494                   PUSH	IY
002DDE E3          8495                   EX	(SP),HL
002DDF 3E 0D       8496                   LD	A,CR
002DE1 47          8497                   LD	B,A
002DE2 ED B1       8498                   CPIR			;Find CR
002DE4 E3          8499                   EX	(SP),HL
002DE5 FD E1       8500                   POP	IY
002DE7 D9          8501                   EXX
002DE8 FD 7E FE    8502                   LD	A,(IY-2)	;Last token in previous line
002DEB FE CA       8503                   CP	TOF		;CASE statement in WHEN line
002DED 20 8D       8504                   JR	NZ,CASE1
002DEF 3E 01       8505                   LD	A,1
002DF1 18 8A       8506                   JR	CASE0
002DF3             8507   ;
002DF3             8508   ;Finished, level stack if string:
002DF3             8509   ;
002DF3 CB 40       8510   CASE9:          BIT	0,B
002DF5 28 49       8511                   JR	Z,XEQGO5
002DF7 26 00       8512                   LD	H,0
002DF9 69          8513                   LD	L,C
002DFA 39          8514                   ADD	HL,SP
002DFB F9          8515                   LD	SP,HL
002DFC 18 42       8516                   JR	XEQGO5
002DFE             8517   ;
002DFE             8518   ;Matched, so skip any more expressions:
002DFE             8519   ;
002DFE CD 0B 45    8520   CASE5:          CALL	NXT
002E01 FE 2C       8521                   CP	','
002E03 20 EE       8522                   JR	NZ,CASE9	;End of list
002E05 FD 23       8523                   INC	IY
002E07 C5          8524                   PUSH	BC		;Save type and string length
002E08 CD 02 17    8525                   CALL	EXPR		;Evaluate but discard
002E0B C1          8526                   POP	BC
002E0C 18 F0       8527                   JR	CASE5
002E0E             8528   ;
002E0E             8529   ;String compare:
002E0E             8530   ;
002E0E C5          8531   CASE3:          PUSH	BC
002E0F CD 3C 18    8532                   CALL	EXPRS
002E12 C1          8533                   POP	BC
002E13 21 00 00    8534                   LD	HL,0
002E16 39          8535                   ADD	HL,SP
002E17 43          8536                   LD	B,E
002E18 11 00 52    8537                   LD	DE,ACCS
002E1B C5          8538                   PUSH	BC
002E1C CD F5 1F    8539                   CALL	SCP		;String compare
002E1F C1          8540                   POP	BC
002E20 06 01       8541                   LD	B,1
002E22 20 AE       8542                   JR	NZ,CASE2
002E24 18 D8       8543                   JR	CASE5
002E26             8544   ;
002E26             8545   ; WHILE
002E26             8546   ;
002E26 FD E5       8547   WHILE:          PUSH	IY		;Save current position
002E28 CD 86 32    8548                   CALL	CHECK
002E2B CD 2E 2E    8549                   CALL	WHICHK		;Push marker
002E2E CD 33 18    8550   WHICHK:         CALL	EXPRI
002E31 CD 59 1F    8551                   CALL	TEST
002E34 20 0A       8552                   JR	NZ,XEQGO5
002E36 C1          8553                   POP	BC		;Pop marker
002E37 C1          8554                   POP	BC		;Level stack
002E38 01 00 95    8555                   LD	BC,TWHILE+TENDWHILE*256
002E3B 16 01       8556                   LD	D,1
002E3D CD 50 36    8557                   CALL	WSRCH
002E40 C3 99 24    8558   XEQGO5:         JP	XEQ
002E43             8559   ;
002E43             8560   ; ENDWHILE
002E43             8561   ;
002E43 C1          8562   ENDWHI:         POP	BC		;Marker
002E44 D1          8563                   POP	DE		;Saved text pointer
002E45 D5          8564                   PUSH	DE
002E46 C5          8565                   PUSH	BC
002E47 B7          8566                   OR	A
002E48 21 2E 2E    8567                   LD	HL,WHICHK
002E4B ED 42       8568                   SBC	HL,BC
002E4D 28 0B       8569                   JR	Z,ENDWH1
002E4F 3E 03       8570                   LD	A,3
002E51 CD 31 34    8571                   CALL	RESLOC
002E54 20 ED       8572                   JR	NZ,ENDWHI
002E56 3E 2E       8573                   LD	A,46
002E58 18 4F       8574                   JR	ERROR5		;"Not in a WHILE loop"
002E5A             8575   ;
002E5A FD E5       8576   ENDWH1:         PUSH	IY
002E5C FD 21 00 00 8577                   LD	IY,0
002E60 FD 19       8578                   ADD	IY,DE
002E62 CD 33 18    8579                   CALL	EXPRI
002E65 CD 59 1F    8580                   CALL	TEST
002E68 D1          8581                   POP	DE		;Text pointer
002E69 20 D5       8582                   JR	NZ,XEQGO5
002E6B C1          8583                   POP	BC		;Junk marker
002E6C C1          8584                   POP	BC		;Junk pointer
002E6D FD 21 00 00 8585                   LD	IY,0
002E71 FD 19       8586                   ADD	IY,DE
002E73 18 CB       8587                   JR	XEQGO5
002E75             8588   ;
002E75             8589   ;CLS
002E75             8590   ;
002E75 CD F8 01    8591   CLS:            CALL	CLRSCN
002E78 AF          8592                   XOR	A
002E79 32 FB 54    8593                   LD	(COUNT),A
002E7C 18 C2       8594                   JR	XEQGO5
002E7E             8595   ;
002E7E             8596   ;STOP
002E7E             8597   ;
002E7E CD FA 44    8598   STOP:           CALL	TELL
002E81 0D          8599                   DB	CR
002E82 0A          8600                   DB	LF
002E83 FA          8601                   DB	TSTOP
002E84 00          8602                   DB	0
002E85 CD 5B 41    8603                   CALL	SETLIN		;FIND CURRENT LINE
002E88 CD 82 41    8604                   CALL	SAYLN
002E8B CD FB 40    8605                   CALL	CRLF
002E8E C3 B0 37    8606                   JP	CLOOP
002E91             8607   ;
002E91             8608   ;REPORT
002E91             8609   ;
002E91 CD E5 44    8610   REPOR:          CALL	REPORT
002E94 18 AA       8611                   JR	XEQGO5
002E96             8612   ;
002E96             8613   ;CLEAR
002E96             8614   ;
002E96 CD 43 40    8615   CLR:            CALL	CLEAR
002E99 2A DC 54    8616                   LD	HL,(PAGE_)
002E9C 18 3B       8617                   JR	RESTR1
002E9E             8618   ;
002E9E             8619   ;RESTORE ERROR
002E9E             8620   ;
002E9E FD 23       8621   RESERR:         INC	IY
002EA0 3E 02       8622                   LD	A,2
002EA2 CD 31 34    8623                   CALL	RESLOC
002EA5 20 99       8624                   JR	NZ,XEQGO5
002EA7 3E 35       8625                   LD	A,53		;ON ERROR not LOCAL
002EA9 C3 44 3F    8626   ERROR5:         JP	ERROR_
002EAC             8627   ;
002EAC             8628   ;RESTORE DATA
002EAC             8629   ;
002EAC FD 23       8630   RESDAT:         INC	IY
002EAE 3E 01       8631                   LD	A,1
002EB0 CD 31 34    8632                   CALL	RESLOC
002EB3 20 8B       8633                   JR	NZ,XEQGO5
002EB5 3E 36       8634                   LD	A,54		;'DATA not LOCAL'
002EB7 21          8635                   DB	21H
002EB8 3E 29       8636   NOLINE:         LD	A,41		;'No such line'
002EBA 18 ED       8637                   JR	ERROR5
002EBC             8638   ;
002EBC             8639   ;RESTORE [line]
002EBC             8640   ;
002EBC FE 85       8641   RESTOR:         CP	TERROR
002EBE 28 DE       8642                   JR	Z,RESERR
002EC0 FE DC       8643                   CP	TDATA
002EC2 28 E8       8644                   JR	Z,RESDAT
002EC4 FE 2B       8645                   CP	'+'
002EC6 28 1A       8646                   JR	Z,RESREL
002EC8 2A DC 54    8647                   LD	HL,(PAGE_)
002ECB CD 36 35    8648                   CALL	TERMQ
002ECE 28 09       8649                   JR	Z,RESTR1
002ED0 CD 60 18    8650                   CALL	ITEMI
002ED3 D9          8651                   EXX
002ED4 CD 43 41    8652                   CALL	FINDL		;SEARCH FOR LINE
002ED7 20 DF       8653                   JR	NZ,NOLINE
002ED9 CD F9 35    8654   RESTR1:         CALL	DSRCH
002EDC 22 F0 54    8655                   LD	(DATPTR),HL
002EDF C3 99 24    8656                   JP	XEQ
002EE2             8657   ;
002EE2 CD 33 18    8658   RESREL:         CALL	EXPRI
002EE5 D9          8659                   EXX
002EE6 EB          8660                   EX	DE,HL
002EE7 FD E5       8661                   PUSH	IY
002EE9 E1          8662                   POP	HL
002EEA 3E 0D       8663                   LD	A,CR
002EEC 47          8664                   LD	B,A
002EED ED B1       8665                   CPIR			;FIND LINE END
002EEF 1D          8666                   DEC	E
002EF0 28 E7       8667                   JR	Z,RESTR1
002EF2 FA D9 2E    8668                   JP	M,RESTR1
002EF5 AF          8669                   XOR	A
002EF6 47          8670                   LD	B,A
002EF7 4E          8671   RESTR2:         LD	C,(HL)
002EF8 B9          8672                   CP	C
002EF9 28 BD       8673                   JR	Z,NOLINE
002EFB 09          8674                   ADD	HL,BC
002EFC 1D          8675                   DEC	E
002EFD 20 F8       8676                   JR	NZ,RESTR2
002EFF 18 D8       8677                   JR	RESTR1
002F01             8678   ;
002F01             8679   ;PTR#channel=expr
002F01             8680   ;PAGE=expr
002F01             8681   ;TIME=expr
002F01             8682   ;LOMEM=expr
002F01             8683   ;HIMEM=expr
002F01             8684   ;
002F01 CD D1 36    8685   PTR:            CALL	CHANEL
002F04 CD 4F 35    8686                   CALL	EQUALS
002F07 7B          8687                   LD	A,E
002F08 F5          8688                   PUSH	AF
002F09 CD 33 18    8689                   CALL	EXPRI
002F0C E5          8690                   PUSH	HL
002F0D D9          8691                   EXX
002F0E D1          8692                   POP	DE
002F0F F1          8693                   POP	AF
002F10 CD 79 12    8694                   CALL	PUTPTR
002F13 18 61       8695                   JR	XEQGO1ex
002F15             8696   ;
002F15 CD 4F 35    8697   PAGEV:          CALL	EQUALS
002F18 CD 33 18    8698                   CALL	EXPRI
002F1B D9          8699                   EXX
002F1C 2E 00       8700                   LD	L,0
002F1E 22 DC 54    8701                   LD	(PAGE_),HL
002F21 18 53       8702                   JR	XEQGO1ex
002F23             8703   ;
002F23 FE 24       8704   TIMEV:          CP	'$'
002F25 28 0E       8705                   JR	Z,TIMEVS
002F27 CD 4F 35    8706                   CALL	EQUALS
002F2A CD 33 18    8707                   CALL	EXPRI
002F2D E5          8708                   PUSH	HL
002F2E D9          8709                   EXX
002F2F D1          8710                   POP	DE
002F30 CD C3 01    8711                   CALL	PUTIME
002F33 18 41       8712                   JR	XEQGO1ex
002F35             8713   ;
002F35 FD 23       8714   TIMEVS:         INC	IY		;SKIP '$'
002F37 CD 4F 35    8715                   CALL	EQUALS
002F3A CD 3C 18    8716                   CALL	EXPRS
002F3D CD E0 01    8717                   CALL	PUTIMS
002F40 18 34       8718                   JR	XEQGO1ex
002F42             8719   ;
002F42 CD 4F 35    8720   LOMEMV:         CALL	EQUALS
002F45 CD 33 18    8721                   CALL	EXPRI
002F48 CD 43 40    8722                   CALL	CLEAR
002F4B D9          8723                   EXX
002F4C 22 DE 54    8724                   LD	(LOMEM),HL
002F4F 22 E0 54    8725                   LD	(FREE),HL
002F52 18 22       8726                   JR	XEQGO1ex
002F54             8727   ;
002F54 CD 4F 35    8728   HIMEMV:         CALL	EQUALS
002F57 CD 33 18    8729                   CALL	EXPRI
002F5A D9          8730                   EXX
002F5B ED 5B E0 54 8731                   LD	DE,(FREE)
002F5F 14          8732                   INC	D
002F60 AF          8733                   XOR	A
002F61 ED 52       8734                   SBC	HL,DE
002F63 19          8735                   ADD	HL,DE
002F64 DA 44 3F    8736                   JP	C,ERROR_		;"No room"
002F67 ED 5B E2 54 8737                   LD	DE,(HIMEM)
002F6B 22 E2 54    8738                   LD	(HIMEM),HL
002F6E EB          8739                   EX	DE,HL
002F6F ED 72       8740                   SBC	HL,SP
002F71 C2 99 24    8741                   JP	NZ,XEQ
002F74 EB          8742                   EX	DE,HL
002F75 F9          8743                   LD	SP,HL		;LOAD STACK POINTER
002F76 C3 99 24    8744   XEQGO1ex:         JP	XEQ
002F79             8745   ;
002F79             8746   ;WIDTH expr
002F79             8747   ;
002F79 CD 33 18    8748   WIDTHV:         CALL	EXPRI
002F7C D9          8749                   EXX
002F7D 7D          8750                   LD	A,L
002F7E 32 FC 54    8751                   LD	(WIDTH),A
002F81 18 F3       8752                   JR	XEQGO1ex
002F83             8753   ;
002F83             8754   ;TRACE ON
002F83             8755   ;TRACE OFF
002F83             8756   ;TRACE line
002F83             8757   ;
002F83 FD 23       8758   TRACE:          INC	IY
002F85 21 00 00    8759                   LD	HL,0
002F88 FE EE       8760                   CP	TON
002F8A 28 0A       8761                   JR	Z,TRACE0
002F8C FE 87       8762                   CP	TOFF
002F8E 28 07       8763                   JR	Z,TRACE1
002F90 FD 2B       8764                   DEC	IY
002F92 CD 33 18    8765                   CALL	EXPRI
002F95 D9          8766                   EXX
002F96 2B          8767   TRACE0:         DEC	HL
002F97 22 E6 54    8768   TRACE1:         LD	(TRACEN),HL
002F9A 18 DA       8769                   JR	XEQGO1ex
002F9C             8770   ;
002F9C             8771   ;VDU expr,expr;....[|]
002F9C             8772   ;
002F9C CD 33 18    8773   VDU:            CALL	EXPRI
002F9F D9          8774                   EXX
002FA0 7D          8775                   LD	A,L
002FA1 06 01       8776                   LD	B,1
002FA3 CD 95 11    8777   VDU1:           CALL	OSWRCH
002FA6 10 FB       8778                   DJNZ	VDU1
002FA8 FD 7E 00    8779                   LD	A,(IY)
002FAB FE 7C       8780                   CP	'|'
002FAD 28 15       8781                   JR	Z,VDU4
002FAF FE 2C       8782                   CP	','
002FB1 28 08       8783                   JR	Z,VDU2
002FB3 FE 3B       8784                   CP	';'
002FB5 20 06       8785                   JR	NZ,VDU3
002FB7 7C          8786                   LD	A,H
002FB8 CD 95 11    8787                   CALL	OSWRCH
002FBB FD 23       8788   VDU2:           INC	IY
002FBD CD 36 35    8789   VDU3:           CALL	TERMQ
002FC0 20 DA       8790                   JR	NZ,VDU
002FC2 18 B2       8791                   JR	XEQGO1ex
002FC4             8792   ;
002FC4 FD 23       8793   VDU4:           INC	IY
002FC6 AF          8794                   XOR	A
002FC7 06 09       8795                   LD	B,9
002FC9 18 D8       8796                   JR	VDU1
002FCB             8797   ;
002FCB             8798   ;CLOSE channel number
002FCB             8799   ;
002FCB CD D1 36    8800   CLOSE:          CALL	CHANEL
002FCE CD 37 12    8801                   CALL	OSSHUT
002FD1 18 A3       8802                   JR	XEQGO1ex
002FD3             8803   ;
002FD3             8804   ;BPUT #channel,byte
002FD3             8805   ;BPUT #channel,string[;]
002FD3             8806   ;
002FD3 CD D1 36    8807   BPUT:           CALL	CHANEL		;CHANNEL NUMBER
002FD6 D5          8808                   PUSH	DE
002FD7 CD A2 20    8809                   CALL	COMMA
002FDA CD 02 17    8810                   CALL	EXPR
002FDD 08          8811                   EX	AF,AF'
002FDE FA EC 2F    8812                   JP	M,BPUTS
002FE1 CD 17 1C    8813                   CALL	SFIX
002FE4 D9          8814                   EXX
002FE5 7D          8815                   LD	A,L
002FE6 D1          8816                   POP	DE
002FE7 CD 47 12    8817                   CALL	OSBPUT
002FEA 18 8A       8818   BPUTX:          JR	XEQGO1ex
002FEC             8819   ;
002FEC 7B          8820   BPUTS:          LD	A,E
002FED D1          8821                   POP	DE
002FEE 57          8822                   LD	D,A
002FEF 21 00 52    8823                   LD	HL,ACCS
002FF2 7E          8824   BPUTS1:         LD	A,(HL)
002FF3 23          8825                   INC	HL
002FF4 CD 47 12    8826                   CALL	OSBPUT
002FF7 15          8827                   DEC	D
002FF8 20 F8       8828                   JR	NZ,BPUTS1
002FFA CD 0B 45    8829                   CALL	NXT
002FFD FE 3B       8830                   CP	';'
002FFF FD 23       8831                   INC	IY
003001 28 E7       8832                   JR	Z,BPUTX
003003 3E 0A       8833                   LD	A,LF
003005 CD 47 12    8834                   CALL	OSBPUT
003008 FD 2B       8835                   DEC	IY
00300A 18 DE       8836                   JR	BPUTX
00300C             8837   ;
00300C             8838   ;CALL address[,var[,var...]]
00300C             8839   ;
00300C CD 33 18    8840   CALL:           CALL	EXPRI		;ADDRESS
00300F D9          8841                   EXX
003010 E5          8842                   PUSH	HL		;SAVE IT
003011 06 00       8843                   LD	B,0		;PARAMETER COUNTER
003013 11 00 53    8844                   LD	DE,BUFFER	;VECTOR
003016 CD 0B 45    8845   CALL1:          CALL	NXT
003019 FE 2C       8846                   CP	','
00301B 20 17       8847                   JR	NZ,CALL2
00301D FD 23       8848                   INC	IY
00301F 04          8849                   INC	B
003020 CD 0B 45    8850                   CALL	NXT
003023 C5          8851                   PUSH	BC
003024 D5          8852                   PUSH	DE
003025 CD D6 25    8853                   CALL	VAR_
003028 D1          8854                   POP	DE
003029 C1          8855                   POP	BC
00302A 13          8856                   INC	DE
00302B 12          8857                   LD	(DE),A		;PARAMETER TYPE
00302C 13          8858                   INC	DE
00302D EB          8859                   EX	DE,HL
00302E 73          8860                   LD	(HL),E		;PARAMETER ADDRESS
00302F 23          8861                   INC	HL
003030 72          8862                   LD	(HL),D
003031 EB          8863                   EX	DE,HL
003032 18 E2       8864                   JR	CALL1
003034 78          8865   CALL2:          LD	A,B
003035 32 00 53    8866                   LD	(BUFFER),A	;PARAMETER COUNT
003038 E1          8867                   POP	HL		;RESTORE ADDRESS
003039 CD 43 30    8868                   CALL	USR1
00303C C3 99 24    8869                   JP	XEQ
00303F             8870   ;
00303F             8871   ;USR(address)
00303F             8872   ;
00303F CD 60 18    8873   USR:            CALL	ITEMI
003042 D9          8874                   EXX
003043 E5          8875   USR1:           PUSH	HL		;ADDRESS ON STACK
003044 FD E3       8876                   EX	(SP),IY
003046 24          8877                   INC	H		;PAGE &FF?
003047 21 72 30    8878                   LD	HL,USR2		;RETURN ADDRESS
00304A E5          8879                   PUSH	HL
00304B DD 21 00 54 8880                   LD	IX,STAVAR
00304F CC 14 05    8881                   CALL	Z,OSCALL	;INTERCEPT PAGE &FF
003052 DD 4E 18    8882                   LD	C,(IX+24)
003055 C5          8883                   PUSH	BC
003056 F1          8884                   POP	AF		;LOAD FLAGS
003057 DD 7E 04    8885                   LD	A,(IX+4)	;LOAD Z80 REGISTERS
00305A DD 46 08    8886                   LD	B,(IX+8)
00305D DD 4E 0C    8887                   LD	C,(IX+12)
003060 DD 56 10    8888                   LD	D,(IX+16)
003063 DD 5E 14    8889                   LD	E,(IX+20)
003066 DD 66 20    8890                   LD	H,(IX+32)
003069 DD 6E 30    8891                   LD	L,(IX+48)
00306C DD 21 00 53 8892                   LD	IX,BUFFER
003070 FD E9       8893                   JP	(IY)		;OFF TO USER ROUTINE
003072 FD E1       8894   USR2:           POP	IY
003074 AF          8895                   XOR	A
003075 4F          8896                   LD	C,A
003076 C9          8897                   RET
003077             8898   ;
003077             8899   ; LEFT$(A$[,N]) = string
003077             8900   ; MID$(A$,N[,M]) = string
003077             8901   ; RIGHT$(A$[,N]) = string
003077             8902   ;
003077 CD BE 25    8903   LEFTSL:         CALL    GETSTR
00307A 21 00 FF    8904                   LD	HL,0FF00H	;Default all but last
00307D 20 48       8905                   JR	NZ,MIDSL1
00307F 18 26       8906                   JR	MIDSL0
003081             8907   ;
003081 CD BE 25    8908   RITESL:         CALL	GETSTR
003084 21 FF FF    8909                   LD	HL,0FFFFH	;Default last char only
003087 20 3E       8910                   JR	NZ,MIDSL1
003089 18 1C       8911                   JR	MIDSL0
00308B             8912   ;
00308B CD BE 25    8913   MIDSL:          CALL	GETSTR
00308E 3E 05       8914                   LD	A,5
003090 C2 44 3F    8915                   JP	NZ,ERROR_	;'Missing comma'
003093 FD 23       8916                   INC	IY
003095 DD E5       8917                   PUSH	IX
003097 CD 33 18    8918                   CALL	EXPRI
00309A DD E1       8919                   POP	IX
00309C D9          8920                   EXX
00309D CD 0B 45    8921                   CALL	NXT
0030A0 2D          8922                   DEC	L
0030A1 26 FE       8923                   LD	H,254		;Default rest of string
0030A3 FE 2C       8924                   CP	','
0030A5 20 20       8925                   JR	NZ,MIDSL1
0030A7 FD 23       8926   MIDSL0:         INC	IY
0030A9 E5          8927                   PUSH	HL
0030AA DD E5       8928                   PUSH	IX
0030AC CD 33 18    8929                   CALL	EXPRI
0030AF DD E1       8930                   POP	IX
0030B1 D9          8931                   EXX
0030B2 7D          8932                   LD	A,L
0030B3 E1          8933                   POP	HL
0030B4 B7          8934                   OR	A
0030B5 28 0D       8935                   JR	Z,MIDSL2	;Zero length
0030B7 3D          8936                   DEC	A
0030B8 85          8937                   ADD	A,L
0030B9 67          8938                   LD	H,A
0030BA 30 0B       8939                   JR	NC,MIDSL1
0030BC 7D          8940                   LD	A,L
0030BD 3C          8941                   INC	A
0030BE 28 07       8942                   JR	Z,MIDSL1
0030C0 26 FE       8943                   LD	H,254
0030C2 18 03       8944                   JR	MIDSL1
0030C4             8945   ;
0030C4 21 01 00    8946   MIDSL2:         LD	HL,1
0030C7 CD AE 20    8947   MIDSL1:         CALL	BRAKET
0030CA CD 4F 35    8948                   CALL	EQUALS
0030CD E5          8949                   PUSH	HL
0030CE DD E5       8950                   PUSH	IX
0030D0 CD 3C 18    8951                   CALL	EXPRS
0030D3 DD E1       8952                   POP	IX
0030D5 E1          8953                   POP	HL
0030D6 4B          8954                   LD	C,E
0030D7 DD 46 00    8955                   LD	B,(IX+0)
0030DA DD 5E 02    8956                   LD	E,(IX+2)
0030DD DD 56 03    8957                   LD	D,(IX+3)
0030E0             8958   ;
0030E0             8959   ; Source string at ACCS, length C
0030E0             8960   ; Destination string at DE, length B
0030E0             8961   ; L = first character to modify 0-254
0030E0             8962   ; H =  last character to modify 0-254
0030E0             8963   ; IF L=255 THEN modify rightmost H + 2 chars
0030E0             8964   ; ELSE IF H=255 modify all but last character
0030E0             8965   ; ELSE IF L > H do nothing
0030E0             8966   ; IX = destination VARPTR
0030E0             8967   ;
0030E0 7D          8968                   LD	A,L
0030E1 3C          8969                   INC	A
0030E2 20 0F       8970                   JR	NZ,SUBSL1
0030E4 24          8971                   INC	H
0030E5 24          8972                   INC	H
0030E6 79          8973                   LD	A,C
0030E7 BC          8974                   CP	H
0030E8 30 01       8975                   JR	NC,SUBSL0
0030EA 67          8976                   LD	H,A
0030EB 78          8977   SUBSL0:         LD	A,B
0030EC 94          8978                   SUB	H
0030ED 30 01       8979                   JR	NC,SUBSL6
0030EF AF          8980                   XOR	A
0030F0 6F          8981   SUBSL6:         LD	L,A
0030F1 18 12       8982                   JR	SUBSL5
0030F3             8983   ;
0030F3 7C          8984   SUBSL1:         LD	A,H
0030F4 3C          8985                   INC	A
0030F5 20 06       8986                   JR	NZ,SUBSL2
0030F7 78          8987                   LD	A,B
0030F8 D6 02       8988                   SUB	2
0030FA 38 24       8989                   JR	C,SUBSL9
0030FC 67          8990                   LD	H,A
0030FD 7D          8991   SUBSL2:         LD	A,L
0030FE B8          8992                   CP	B
0030FF 30 1F       8993                   JR	NC,SUBSL9
003101 7C          8994                   LD	A,H
003102 B8          8995                   CP	B
003103 38 03       8996                   JR	C,SUBSL3
003105 78          8997   SUBSL5:         LD	A,B
003106 3D          8998                   DEC	A
003107 67          8999                   LD	H,A
003108 7C          9000   SUBSL3:         LD	A,H
003109 95          9001                   SUB	L
00310A 38 14       9002                   JR	C,SUBSL9
00310C 3C          9003                   INC	A
00310D B9          9004                   CP	C
00310E 38 01       9005                   JR	C,SUBSL4
003110 79          9006                   LD	A,C
003111 06 00       9007   SUBSL4:         LD	B,0
003113 60          9008                   LD	H,B
003114 4F          9009                   LD	C,A
003115 B7          9010                   OR	A
003116 28 08       9011                   JR	Z,SUBSL9
003118 EB          9012                   EX	DE,HL
003119 19          9013                   ADD	HL,DE
00311A EB          9014                   EX	DE,HL
00311B 21 00 52    9015                   LD	HL,ACCS
00311E ED B0       9016                   LDIR
003120 C3 99 24    9017   SUBSL9:         JP	XEQ
003123             9018   ;
003123             9019   ; EXITex FOR [var]
003123             9020   ; EXITex REPEAT
003123             9021   ; EXITex WHILE
003123             9022   ;
003123 FD 23       9023   EXITex:           INC	IY		;Skip FOR/REPEAT/WHILE
003125 FE E3       9024                   CP	TFOR
003127 20 0C       9025                   JR	NZ,EXIT0
003129 DD 21 00 00 9026                   LD	IX,0		;For EXITex FOR <var>
00312D CD 36 35    9027                   CALL	TERMQ
003130 C4 E3 41    9028                   CALL	NZ,GETVAR
003133 3E E3       9029                   LD	A,TFOR
003135 16 01       9030   EXIT0:          LD	D,1		;Level for WSRCH
003137 5F          9031                   LD	E,A
003138 7B          9032   EXIT1:          LD	A,E
003139 C1          9033                   POP	BC		;Marker
00313A 21 61 29    9034                   LD	HL,FORCHK
00313D B7          9035                   OR	A
00313E ED 42       9036                   SBC	HL,BC
003140 28 25       9037                   JR	Z,EXIT4
003142 21 ED 28    9038                   LD	HL,REPCHK
003145 B7          9039                   OR	A
003146 ED 42       9040                   SBC	HL,BC
003148 28 38       9041                   JR	Z,EXIT6
00314A 21 2E 2E    9042                   LD	HL,WHICHK
00314D B7          9043                   OR	A
00314E ED 42       9044                   SBC	HL,BC
003150 28 3A       9045                   JR	Z,EXIT7
003152 C5          9046                   PUSH	BC		;Put back marker
003153 DD E5       9047                   PUSH	IX
003155 C1          9048                   POP	BC
003156 D9          9049                   EXX
003157 3E 03       9050                   LD	A,3
003159 CD 31 34    9051                   CALL	RESLOC
00315C D9          9052                   EXX
00315D C5          9053                   PUSH	BC
00315E DD E1       9054                   POP	IX
003160 20 D6       9055                   JR	NZ,EXIT1
003162 3E 2C       9056                   LD	A,44
003164 C3 44 3F    9057                   JP	ERROR_		;'Bad EXITex'
003167             9058   ;
003167 C1          9059   EXIT4:          POP	BC		;VARPTR
003168 21 0E 00    9060                   LD	HL,14		;Skip text pointer, limit & step
00316B 39          9061                   ADD	HL,SP
00316C F9          9062                   LD	SP,HL		;Pop FOR record
00316D FE E3       9063                   CP	TFOR
00316F 20 C7       9064                   JR	NZ,EXIT1
003171 DD E5       9065                   PUSH	IX
003173 E1          9066                   POP	HL
003174 7C          9067                   LD	A,H
003175 B5          9068                   OR	L
003176 28 02       9069                   JR	Z,EXIT5
003178 ED 42       9070                   SBC	HL,BC
00317A 01 00 D0    9071   EXIT5:          LD	BC,TFOR+TNEXT*256
00317D 28 15       9072                   JR	Z,EXIT8
00317F 14          9073                   INC	D		;Count nested FOR loops
003180 18 B6       9074                   JR	EXIT1
003182             9075   ;
003182 C1          9076   EXIT6:          POP	BC		;Text pointer
003183 FE F5       9077                   CP	TREPEAT
003185 20 B1       9078                   JR	NZ,EXIT1
003187 01 00 F2    9079                   LD	BC,TREPEAT+TUNTIL*256
00318A 18 08       9080                   JR	EXIT8
00318C             9081   ;
00318C C1          9082   EXIT7:          POP	BC		;Text pointer
00318D FE C7       9083                   CP	TWHILE
00318F 20 A7       9084                   JR	NZ,EXIT1
003191 01 00 95    9085                   LD	BC,TWHILE+TENDWHILE*256
003194 CD 50 36    9086   EXIT8:          CALL	WSRCH
003197 CD 42 35    9087                   CALL	SPAN		;Skip UNTIL expression
00319A C3 99 24    9088                   JP	XEQ
00319D             9089   ;
00319D             9090   ;PUT port,data
00319D             9091   ;
00319D CD 33 18    9092   PUT:            CALL	EXPRI		;PORT ADDRESS
0031A0 D9          9093                   EXX
0031A1 E5          9094                   PUSH	HL
0031A2 CD A2 20    9095                   CALL	COMMA
0031A5 CD 33 18    9096                   CALL	EXPRI		;DATA
0031A8 D9          9097                   EXX
0031A9 C1          9098                   POP	BC
0031AA ED 69       9099                   OUT	(C),L		;OUTPUT TO PORT BC
0031AC C3 99 24    9100                   JP	XEQ
0031AF             9101   ;
0031AF             9102   ;SUBROUTINES:
0031AF             9103   ;
0031AF             9104   ;ASSIGN - Assign a numeric value to a variable.
0031AF             9105   ;Outputs: NC,  Z     - OK, numeric scalar
0031AF             9106   ;         NC, NZ, PE - OK, string array  (D = type, E = operator)
0031AF             9107   ; else if NC, NZ, P  - OK, numeric array (D = type, E = operator)
0031AF             9108   ; else if NC, NZ     - OK, string scalar
0031AF             9109   ;          C, NZ     - illegal / invalid
0031AF             9110   ;
0031AF CD E3 41    9111   ASSIGN:         CALL	GETVAR		;VARIABLE
0031B2 D8          9112                   RET	C		;ILLEGAL VARIABLE
0031B3 C4 CD 41    9113                   CALL	NZ,PUTVAR
0031B6 57          9114                   LD	D,A		;Type
0031B7 CD 0B 45    9115                   CALL	NXT
0031BA FD 23       9116                   INC	IY
0031BC 5F          9117                   LD	E,A		;Operator (or =)
0031BD FE 3D       9118                   CP	'='
0031BF C4 4F 35    9119                   CALL	NZ,EQUALS
0031C2 7A          9120                   LD	A,D
0031C3 E6 C0       9121                   AND	11000000B
0031C5 C0          9122                   RET	NZ		;String or array
0031C6 D5          9123                   PUSH	DE
0031C7 E5          9124                   PUSH	HL
0031C8 CD 2C 18    9125                   CALL	EXPRN
0031CB DD E1       9126                   POP	IX
0031CD D1          9127                   POP	DE
0031CE             9128   ;
0031CE             9129   ; Falls through to...
0031CE             9130   ;
0031CE             9131   ; MODIFY - Update numeric variable according to operator:
0031CE             9132   ;   Inputs: D = type
0031CE             9133   ;           E = operator
0031CE             9134   ;           HLH'L'C = value
0031CE             9135   ;           IX = destination VARPTR
0031CE             9136   ; Destroys: Everything except IX,IY,SP
0031CE             9137   ;
0031CE 7B          9138   MODIFY:         LD	A,E
0031CF FE 3D       9139                   CP	'='
0031D1 28 1C       9140                   JR	Z,STORE0	;Simple assignment
0031D3 D5          9141                   PUSH	DE
0031D4 D9          9142                   EXX
0031D5 EB          9143                   EX	DE,HL
0031D6 D9          9144                   EXX
0031D7 EB          9145                   EX	DE,HL
0031D8 41          9146                   LD	B,C
0031D9 E3          9147                   EX	(SP),HL
0031DA 7C          9148                   LD	A,H
0031DB E3          9149                   EX	(SP),HL
0031DC CD 25 19    9150                   CALL	LOADN
0031DF E3          9151                   EX	(SP),HL
0031E0 7D          9152                   LD	A,L
0031E1 E3          9153                   EX	(SP),HL
0031E2 E6 0F       9154                   AND	15
0031E4 DD E5       9155                   PUSH	IX
0031E6 CD 15 45    9156                   CALL	FPP
0031E9 DD E1       9157                   POP	IX
0031EB D1          9158                   POP	DE
0031EC DA 44 3F    9159                   JP	C,ERROR_
0031EF 7A          9160   STORE0:         LD	A,D		;Type
0031F0 FE 05       9161   STOREN:         CP	5
0031F2 28 12       9162                   JR	Z,STORE5
0031F4 F5          9163                   PUSH	AF
0031F5 0C          9164                   INC	C		;SPEED - & PRESERVE F'
0031F6 0D          9165                   DEC	C		; WHEN CALLED BY FNEND0
0031F7 C4 17 1C    9166                   CALL	NZ,SFIX		;CONVERT TO INTEGER
0031FA F1          9167                   POP	AF
0031FB FE 04       9168                   CP	4
0031FD 28 0A       9169                   JR	Z,STORE4
0031FF BF          9170                   CP	A		;SET ZERO
003200 D9          9171   STORE1:         EXX
003201 DD 75 00    9172                   LD	(IX+0),L
003204 D9          9173                   EXX
003205 C9          9174                   RET
003206             9175   ;
003206 DD 71 04    9176   STORE5:         LD	(IX+4),C
003209 D9          9177   STORE4:         EXX
00320A DD 75 00    9178                   LD	(IX+0),L
00320D DD 74 01    9179                   LD	(IX+1),H
003210 D9          9180                   EXX
003211 DD 75 02    9181                   LD	(IX+2),L
003214 DD 74 03    9182                   LD	(IX+3),H
003217 C9          9183                   RET
003218             9184   ;
003218             9185   ; MODIFS - Update string variable according to operator:
003218             9186   ;   Inputs: H = type
003218             9187   ;           L = operator (= or +)
003218             9188   ;           E = string length (string in accumulator)
003218             9189   ;           IX = destination VARPTR
003218             9190   ; Destroys: Everything except SP, IY
003218             9191   ;
003218 7D          9192   MODIFS:         LD	A,L		;Operator
003219 FE 2B       9193                   CP	'+'
00321B 7C          9194                   LD	A,H		;Type
00321C 20 20       9195                   JR	NZ,STACCS
00321E FD E5       9196                   PUSH	IY
003220 DD E5       9197                   PUSH	IX
003222 FD E1       9198                   POP	IY
003224 CD 19 20    9199                   CALL	PUSHS
003227 FD E5       9200                   PUSH	IY
003229 DD E1       9201                   POP	IX
00322B CD 0E 1A    9202                   CALL	LOADS
00322E C1          9203                   POP	BC
00322F 78          9204                   LD	A,B		;Type
003230 0C          9205                   INC	C
003231 0D          9206                   DEC	C
003232 28 08       9207                   JR	Z,MODFS1	;Zero length
003234 21 00 00    9208                   LD	HL,0
003237 44          9209                   LD	B,H
003238 39          9210                   ADD	HL,SP
003239 ED B0       9211                   LDIR
00323B F9          9212                   LD	SP,HL
00323C FD E1       9213   MODFS1:         POP	IY
00323E             9214   ;
00323E             9215   ; Falls through to:
00323E             9216   ;
00323E 21 00 52    9217   STACCS:         LD	HL,ACCS
003241 1F          9218   STORES:         RRA
003242 30 4F       9219                   JR	NC,STORS3	;FIXED STRING
003244 E5          9220                   PUSH	HL
003245 CD 32 19    9221                   CALL	LOAD4
003248 7B          9222                   LD	A,E		;LENGTH OF STRING
003249 D9          9223                   EXX
00324A 6F          9224                   LD	L,A
00324B 7C          9225                   LD	A,H		;LENGTH ALLOCATED
00324C D9          9226                   EXX
00324D BB          9227                   CP	E
00324E 30 24       9228                   JR	NC,STORS1	;ENOUGH ROOM
003250 D9          9229                   EXX
003251 65          9230                   LD	H,L
003252 D9          9231                   EXX
003253 E5          9232                   PUSH	HL
003254 06 00       9233                   LD	B,0
003256 4F          9234                   LD	C,A
003257 09          9235                   ADD	HL,BC
003258 ED 4B E0 54 9236                   LD	BC,(FREE)
00325C ED 42       9237                   SBC	HL,BC		;IS STRING LAST?
00325E E1          9238                   POP	HL
00325F 28 12       9239                   JR	Z,STORS0
003261 60          9240                   LD	H,B
003262 69          9241                   LD	L,C		;DESTINATION
003263             9242   ;
003263 B7          9243                   OR	A		;V5 optimisation
003264 28 0D       9244                   JR	Z,STORS0
003266 7B          9245                   LD	A,E
003267 5F          9246   STORS2:         LD	E,A
003268 1D          9247                   DEC	E
003269 A3          9248                   AND	E
00326A 20 FB       9249                   JR	NZ,STORS2
00326C 37          9250                   SCF
00326D CB 13       9251                   RL	E
00326F 7B          9252                   LD	A,E
003270 D9          9253                   EXX
003271 67          9254                   LD	H,A
003272 D9          9255                   EXX
003273             9256   ;
003273 37          9257   STORS0:         SCF
003274 CD 09 32    9258   STORS1:         CALL	STORE4		;PRESERVES CARRY!
003277 06 00       9259                   LD	B,0
003279 4B          9260                   LD	C,E
00327A EB          9261                   EX	DE,HL
00327B E1          9262                   POP	HL
00327C 0D          9263                   DEC	C
00327D 0C          9264                   INC	C
00327E C8          9265                   RET	Z		;NULL STRING
00327F ED B0       9266                   LDIR
003281 D0          9267                   RET	NC		;STRING REPLACED
003282 ED 53 E0 54 9268                   LD	(FREE),DE
003286 E5          9269   CHECK:          PUSH	HL
003287 2A E0 54    9270                   LD	HL,(FREE)
00328A 24          9271                   INC	H
00328B ED 72       9272                   SBC	HL,SP
00328D E1          9273                   POP	HL
00328E D8          9274                   RET	C
00328F AF          9275                   XOR	A
003290 C3 44 3F    9276                   JP	ERROR_		;"No room"
003293             9277   ;
003293 4B          9278   STORS3:         LD	C,E
003294 DD E5       9279                   PUSH	IX
003296 D1          9280                   POP	DE
003297 AF          9281                   XOR	A
003298 47          9282                   LD	B,A
003299 B9          9283                   CP	C
00329A 28 02       9284                   JR	Z,STORS5
00329C ED B0       9285                   LDIR
00329E 3E 0D       9286   STORS5:         LD	A,CR
0032A0 12          9287                   LD	(DE),A
0032A1 C9          9288                   RET
0032A2             9289   ;
0032A2             9290   ; SAVRET - SAVE 'RETURNed' PARAMETER INFO
0032A2             9291   ;
0032A2 DD 75 00    9292   SAVRET:         LD	(IX+0),L		;Formal VARPTR
0032A5 DD 74 01    9293                   LD	(IX+1),H
0032A8 DD 77 02    9294                   LD	(IX+2),A
0032AB FD E3       9295                   EX	(SP),IY
0032AD F5          9296                   PUSH	AF
0032AE FD E5       9297                   PUSH	IY
0032B0 DD E5       9298                   PUSH	IX
0032B2 CD 0B 45    9299                   CALL	NXT
0032B5 CD D6 25    9300                   CALL	VAR_
0032B8 DD E1       9301                   POP	IX
0032BA DD 75 04    9302                   LD	(IX+4),L		;Actual VARPTR
0032BD DD 74 05    9303                   LD	(IX+5),H
0032C0 DD 77 06    9304                   LD	(IX+6),A
0032C3 FD E1       9305                   POP	IY
0032C5 F1          9306                   POP	AF
0032C6 01 08 00    9307                   LD	BC,8
0032C9 DD 09       9308                   ADD	IX,BC
0032CB 18 2D       9309                   JR	ARGUE0
0032CD             9310   ;
0032CD             9311   ;ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
0032CD             9312   ; CALLING STATEMENT TO THE DUMMY VARIABLES VIA
0032CD             9313   ; THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
0032CD             9314   ; PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
0032CD             9315   ;   Inputs: DE addresses parameter list
0032CD             9316   ;           IY addresses dummy variable list
0032CD             9317   ;           IX addresses RETURNed parameter data block
0032CD             9318   ;  Outputs: DE,IY updated
0032CD             9319   ; Destroys: Everything
0032CD             9320   ;
0032CD 3E FF       9321   ARGUE:          LD	A,-1
0032CF F5          9322                   PUSH	AF		;PUT MARKER ON STACK
0032D0 FD 23       9323   ARGUE1:         INC	IY		;BUMP PAST ( | ,
0032D2 13          9324                   INC	DE
0032D3 D5          9325                   PUSH	DE
0032D4 06 00       9326                   LD	B,0
0032D6 CD 0B 45    9327                   CALL	NXT
0032D9 FE F8       9328                   CP	TRETURN
0032DB 20 06       9329                   JR	NZ,ARGUE9
0032DD FD 23       9330                   INC	IY		;SKIP 'RETURN'
0032DF CD 0B 45    9331                   CALL	NXT
0032E2 04          9332                   INC	B		;FLAG 'RETURN'
0032E3 C5          9333   ARGUE9:         PUSH	BC
0032E4 DD E5       9334                   PUSH	IX
0032E6 CD E3 41    9335                   CALL	GETVAR		;FORMAL PARAMETER
0032E9 38 49       9336                   JR	C,ARGERR
0032EB C4 CD 41    9337                   CALL	NZ,PUTVAR
0032EE DD E1       9338                   POP	IX
0032F0 C1          9339                   POP	BC
0032F1 D1          9340                   POP	DE
0032F2 E5          9341                   PUSH	HL		;VARPTR
0032F3 F5          9342                   PUSH	AF
0032F4 D5          9343                   PUSH	DE
0032F5 05          9344                   DEC	B
0032F6 28 AA       9345                   JR	Z,SAVRET
0032F8 FD E3       9346                   EX	(SP),IY
0032FA CB 77       9347   ARGUE0:         BIT	6,A		;ARRAY?
0032FC 20 3B       9348                   JR	NZ,ARGUE3
0032FE B7          9349                   OR	A		;TYPE
0032FF FA 15 33    9350                   JP	M,ARGUE2	;STRING
003302 DD E5       9351                   PUSH	IX
003304 CD 2C 18    9352                   CALL	EXPRN		;ACTUAL PARAMETER
003307 DD E1       9353                   POP	IX
003309 FD E3       9354                   EX	(SP),IY
00330B D1          9355                   POP	DE
00330C F1          9356                   POP	AF
00330D D9          9357                   EXX
00330E E5          9358                   PUSH	HL
00330F D9          9359                   EXX
003310 E5          9360                   PUSH	HL
003311 47          9361                   LD	B,A
003312 C5          9362                   PUSH	BC
003313 18 13       9363                   JR	ARGUE4
003315             9364   ;
003315 DD E5       9365   ARGUE2:         PUSH	IX
003317 CD 3C 18    9366                   CALL	EXPRS
00331A D9          9367                   EXX
00331B C1          9368                   POP	BC
00331C FD E3       9369                   EX	(SP),IY
00331E D1          9370                   POP	DE
00331F D9          9371                   EXX
003320 F1          9372                   POP	AF
003321 CD 19 20    9373                   CALL	PUSHS
003324 D9          9374                   EXX
003325 C5          9375                   PUSH	BC
003326 DD E1       9376                   POP	IX
003328 CD 0B 45    9377   ARGUE4:         CALL	NXT
00332B FE 2C       9378                   CP	','
00332D 20 27       9379                   JR	NZ,ARGUE5
00332F 1A          9380                   LD	A,(DE)
003330 FE 2C       9381                   CP	','
003332 28 9C       9382                   JR	Z,ARGUE1	;ANOTHER
003334 3E 1F       9383   ARGERR:         LD	A,31
003336 C3 44 3F    9384                   JP	ERROR_		;"Bad arguments"
003339             9385   ;
003339 DD E5       9386   ARGUE3:         PUSH	IX
00333B CD 0B 45    9387                   CALL	NXT
00333E CD E3 41    9388                   CALL	GETVAR
003341 38 F1       9389                   JR	C,ARGERR
003343 DD 4E 00    9390                   LD	C,(IX+0)
003346 DD 46 01    9391                   LD	B,(IX+1)
003349 DD E1       9392                   POP	IX
00334B CD 0B 45    9393                   CALL	NXT
00334E FD E3       9394                   EX	(SP),IY
003350 D1          9395                   POP	DE
003351 F1          9396                   POP	AF
003352 C5          9397                   PUSH	BC		;STACK ARRAY POINTER
003353 F5          9398                   PUSH	AF		;STACK TYPE
003354 18 D2       9399                   JR	ARGUE4
003356             9400   ;
003356 CD AE 20    9401   ARGUE5:         CALL	BRAKET
003359 1A          9402                   LD	A,(DE)
00335A FE 29       9403                   CP	')'
00335C 20 D6       9404                   JR	NZ,ARGERR
00335E 13          9405                   INC	DE
00335F D9          9406   UNSTAK:         EXX
003360 C1          9407   ARGUE6:         POP	BC
003361 78          9408                   LD	A,B
003362 3C          9409                   INC	A
003363 D9          9410                   EXX
003364 C8          9411                   RET	Z		;MARKER POPPED
003365 D9          9412                   EXX
003366 3D          9413                   DEC	A
003367 CB 77       9414                   BIT	6,A		;ARRAY
003369 20 19       9415                   JR	NZ,ARGUE8
00336B B7          9416                   OR	A
00336C FA 7A 33    9417                   JP	M,ARGUE7	;STRING
00336F E1          9418                   POP	HL
003370 D9          9419                   EXX
003371 E1          9420                   POP	HL
003372 D9          9421                   EXX
003373 DD E1       9422                   POP	IX
003375 CD F0 31    9423                   CALL	STOREN		;WRITE TO DUMMY
003378 18 E6       9424                   JR	ARGUE6
00337A             9425   ;
00337A CD 37 20    9426   ARGUE7:         CALL	POPS
00337D DD E1       9427                   POP	IX
00337F CD 3E 32    9428                   CALL	STACCS
003382 18 DC       9429                   JR	ARGUE6
003384             9430   ;
003384 C1          9431   ARGUE8:         POP	BC		;ARRAY POINTER
003385 DD E1       9432                   POP	IX
003387 DD 71 00    9433                   LD	(IX+0),C
00338A DD 70 01    9434                   LD	(IX+1),B
00338D 18 D1       9435                   JR	ARGUE6
00338F             9436   ;
00338F             9437   ;Restore RETURNed parameters, via the stack to ensure that
00338F             9438   ; PROCFRED(A,B)    DEF PROCFRED(RETURN B,RETURN A)  works.
00338F             9439   ;
00338F 3E FF       9440   RETXFR:         LD	A,-1
003391 F5          9441                   PUSH	AF		;PUT MARKER ON STACK
003392 D9          9442   RETXF1:         EXX
003393 DD 6E 04    9443                   LD	L,(IX+4)	;Actual parameter (destination)
003396 DD 66 05    9444                   LD	H,(IX+5)
003399 E5          9445                   PUSH	HL		;STACK VARPTR
00339A DD 6E 00    9446                   LD	L,(IX+0)	;Formal parameter (source)
00339D DD 66 01    9447                   LD	H,(IX+1)
0033A0 DD 7E 02    9448                   LD	A,(IX+2)
0033A3 CB 77       9449                   BIT	6,A		;ARRAY?
0033A5 20 19       9450                   JR	NZ,RETXF3
0033A7 B7          9451                   OR	A		;TYPE
0033A8 FA C6 33    9452                   JP	M,RETXF2	;STRING
0033AB E5          9453                   PUSH	HL
0033AC DD E3       9454                   EX	(SP),IX
0033AE CD 25 19    9455                   CALL	LOADN
0033B1 DD E1       9456                   POP	IX
0033B3 D9          9457                   EXX			;STACK VALUE
0033B4 E5          9458                   PUSH	HL
0033B5 D9          9459                   EXX
0033B6 E5          9460                   PUSH	HL
0033B7 DD 46 06    9461   RETXF6:         LD	B,(IX+6)
0033BA C5          9462                   PUSH	BC		;TYPE & EXPONENT
0033BB CD 86 32    9463   RETXF5:         CALL	CHECK		;CHECK ROOM
0033BE 18 1E       9464                   JR	RETXF4
0033C0             9465   ;
0033C0 5E          9466   RETXF3:         LD	E,(HL)
0033C1 23          9467                   INC	HL
0033C2 56          9468                   LD	D,(HL)
0033C3 D5          9469                   PUSH	DE		;STACK ARRAY POINTER
0033C4 18 F1       9470                   JR	RETXF6
0033C6             9471   ;
0033C6 E5          9472   RETXF2:         PUSH	HL
0033C7 DD E3       9473                   EX	(SP),IX
0033C9 CD 0E 1A    9474                   CALL	LOADS
0033CC DD E1       9475                   POP	IX
0033CE DD 7E 06    9476                   LD	A,(IX+6)
0033D1 D9          9477                   EXX
0033D2 DD E5       9478                   PUSH	IX
0033D4 E1          9479                   POP	HL
0033D5 D9          9480                   EXX
0033D6 CD 19 20    9481                   CALL	PUSHS
0033D9 D9          9482                   EXX
0033DA E5          9483                   PUSH	HL
0033DB DD E1       9484                   POP	IX
0033DD D9          9485                   EXX
0033DE 11 08 00    9486   RETXF4:         LD	DE,8
0033E1 DD 19       9487                   ADD	IX,DE
0033E3 D9          9488                   EXX
0033E4 10 AC       9489                   DJNZ	RETXF1
0033E6 C3 5F 33    9490                   JP	UNSTAK
0033E9             9491   ;
0033E9             9492   ;Restore 'RETURNed' parameters,
0033E9             9493   ;
0033E9 C1          9494   RESRET:         POP	BC		;B = 'RETURN' COUNT
0033EA 26 00       9495                   LD	H,0
0033EC 68          9496                   LD	L,B
0033ED 29          9497                   ADD	HL,HL
0033EE 29          9498                   ADD	HL,HL
0033EF 29          9499                   ADD	HL,HL		;RETURN COUNT * 8
0033F0 39          9500                   ADD	HL,SP
0033F1 DD 21 00 00 9501                   LD	IX,0
0033F5 DD 39       9502                   ADD	IX,SP		;ADDRESS PARAMETER LIST
0033F7 F5          9503                   PUSH	AF
0033F8 D5          9504                   PUSH	DE
0033F9 E5          9505                   PUSH	HL
0033FA D9          9506                   EXX
0033FB C5          9507                   PUSH	BC
0033FC D5          9508                   PUSH	DE
0033FD D9          9509                   EXX
0033FE 78          9510                   LD	A,B
0033FF 21 00 52    9511                   LD	HL,ACCS
003402 11 00 53    9512                   LD	DE,BUFFER
003405 01 FF 00    9513                   LD	BC,255
003408 ED B0       9514                   LDIR
00340A 47          9515                   LD	B,A
00340B CD 8F 33    9516                   CALL	RETXFR		;TRANSFER VIA STACK
00340E 21 00 53    9517                   LD	HL,BUFFER
003411 11 00 52    9518                   LD	DE,ACCS
003414 01 FF 00    9519                   LD	BC,255
003417 ED B0       9520                   LDIR
003419 D9          9521                   EXX
00341A D1          9522                   POP	DE
00341B C1          9523                   POP	BC
00341C D9          9524                   EXX
00341D E1          9525                   POP	HL
00341E D1          9526                   POP	DE
00341F F1          9527                   POP	AF
003420 18 0A       9528                   JR	RESAR1
003422             9529   ;
003422             9530   ; Restore LOCAL array or memory block:
003422             9531   ;
003422 C1          9532   RESARR:         POP	BC
003423 CB 78       9533                   BIT	7,B		;String array?
003425 E1          9534                   POP	HL
003426 C1          9535                   POP	BC
003427 09          9536                   ADD	HL,BC
003428 39          9537                   ADD	HL,SP
003429 C4 E3 36    9538                   CALL	NZ,FREESA	;Free string array
00342C F9          9539   RESAR1:         LD	SP,HL
00342D DD 23       9540                   INC	IX		;Flag something restored
00342F 18 05       9541                   JR	RESLO1
003431             9542   ;
003431             9543   ; RESLOC - Restore local variables/arrays or DATA/ERROR status from stack
003431             9544   ;   Inputs: A = 0 if everything OK, bit0 set if DATPTR, bit1 set if ERRTRP
003431             9545   ;  Outputs: Z if nothing was restored, NZ if something was restored
003431             9546   ; Destroys: A,B,C,D,E,H,L,H',L',IX,SP,flags
003431             9547   ;
003431 D1          9548   RESLOC:         POP	DE		;Return address
003432 DD 21 00 00 9549                   LD	IX,0		;To flag nothing was restored
003436 C1          9550   RESLO1:         POP	BC		;Marker ?
003437 21 2A 35    9551                   LD	HL,LOCCHK
00343A B7          9552                   OR	A
00343B ED 42       9553                   SBC	HL,BC
00343D 28 1A       9554                   JR	Z,RESLO2	;Something to restore
00343F B7          9555                   OR	A
003440 20 0F       9556                   JR	NZ,RESLO8
003442 21 70 2A    9557                   LD	HL,RETCHK
003445 ED 42       9558                   SBC	HL,BC
003447 28 A0       9559                   JR	Z,RESRET
003449 21 DC 26    9560                   LD	HL,ARRCHK
00344C B7          9561                   OR	A
00344D ED 42       9562                   SBC	HL,BC
00344F 28 D1       9563                   JR	Z,RESARR
003451 DD E5       9564   RESLO8:         PUSH	IX
003453 E1          9565                   POP	HL
003454 7C          9566                   LD	A,H
003455 B5          9567                   OR	L
003456 C5          9568   RESLO0:         PUSH	BC		;Put back marker
003457 EB          9569                   EX	DE,HL
003458 E9          9570                   JP	(HL)		;Return
003459             9571   ;
003459 DD E1       9572   RESLO2:         POP	IX		;Variable pointer
00345B B7          9573                   OR	A
00345C 28 20       9574                   JR	Z,RESLO3	;Everything allowed
00345E DD E5       9575                   PUSH	IX
003460 C1          9576                   POP	BC
003461 CB 47       9577                   BIT	0,A
003463 28 07       9578                   JR	Z,RESLO6	;Bit 0 set, so
003465 21 F0 54    9579                   LD	HL,DATPTR	;test for DATPTR
003468 ED 42       9580                   SBC	HL,BC
00346A 28 12       9581                   JR	Z,RESLO3
00346C B7          9582   RESLO6:         OR	A
00346D CB 4F       9583                   BIT	1,A
00346F 28 07       9584                   JR	Z,RESLO7	;Bit 1 set, so
003471 21 EA 54    9585                   LD	HL,ERRTRP	;test for ERRPTR
003474 ED 42       9586                   SBC	HL,BC
003476 28 06       9587                   JR	Z,RESLO3
003478 C5          9588   RESLO7:         PUSH	BC		;Put back pointer
003479 01 2A 35    9589                   LD	BC,LOCCHK
00347C 18 D8       9590                   JR	RESLO0
00347E             9591   ;
00347E C1          9592   RESLO3:         POP	BC		;Type / exponent
00347F CB 70       9593                   BIT	6,B
003481 20 14       9594                   JR	NZ,RESLO4	;Array?
003483 CB 78       9595                   BIT	7,B
003485 20 23       9596                   JR	NZ,RESLO5	;String?
003487 E1          9597                   POP	HL
003488 D9          9598                   EXX
003489 E1          9599                   POP	HL
00348A D9          9600                   EXX
00348B CB 60       9601                   BIT	4,B
00348D 20 A7       9602                   JR	NZ,RESLO1
00348F F5          9603                   PUSH	AF
003490 78          9604                   LD	A,B
003491 CD F0 31    9605                   CALL	STOREN		;Numeric
003494 F1          9606                   POP	AF
003495 18 9F       9607                   JR	RESLO1
003497             9608   ;
003497 E1          9609   RESLO4:         POP	HL
003498 CB 60       9610                   BIT	4,B
00349A 20 9A       9611                   JR	NZ,RESLO1
00349C DD 75 00    9612                   LD	(IX+0),L	;Array
00349F DD 74 01    9613                   LD	(IX+1),H
0034A2 18 92       9614                   JR	RESLO1
0034A4             9615   ;
0034A4 06 00       9616   RESLO9:         LD	B,0
0034A6 09          9617                   ADD	HL,BC
0034A7 F9          9618                   LD	SP,HL
0034A8 18 8C       9619   RESLGO:         JR	RESLO1
0034AA             9620   ;
0034AA 21 00 00    9621   RESLO5:         LD	HL,0
0034AD 39          9622                   ADD	HL,SP
0034AE CB 60       9623                   BIT	4,B
0034B0 20 F2       9624                   JR	NZ,RESLO9
0034B2 F5          9625                   PUSH	AF
0034B3 D5          9626                   PUSH	DE
0034B4 59          9627                   LD	E,C
0034B5 78          9628                   LD	A,B
0034B6 CD 41 32    9629                   CALL	STORES		;String
0034B9 D1          9630                   POP	DE
0034BA F1          9631                   POP	AF
0034BB F9          9632                   LD	SP,HL
0034BC 18 EA       9633                   JR	RESLGO
0034BE             9634   ;
0034BE             9635   ;SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
0034BE             9636   ;  OF A FUNCTION OR PROCEDURE.
0034BE             9637   ;THERE IS A LOT OF STACK MANIPULATION - CARE!!
0034BE             9638   ;   Inputs: IY is parameters pointer
0034BE             9639   ;  Outputs: IY updated
0034BE             9640   ;           A' incremented for each RETURN
0034BE             9641   ; Destroys: A',A,B,C,D,E,H,L,IX,IY,F,SP
0034BE             9642   ;
0034BE D1          9643   SAVLOC:         POP	DE		;RETURN ADDRESS
0034BF FD 23       9644   SAVLO1:         INC	IY		;BUMP PAST ( | ,
0034C1 CD 0B 45    9645                   CALL	NXT
0034C4 FE F8       9646                   CP	TRETURN
0034C6 20 08       9647                   JR	NZ,SAVLO6
0034C8 08          9648                   EX	AF,AF'
0034C9 3C          9649                   INC	A		;RETURN counter
0034CA 08          9650                   EX	AF,AF'
0034CB FD 23       9651                   INC	IY		;Bump past RETURN
0034CD CD 0B 45    9652                   CALL	NXT
0034D0 D5          9653   SAVLO6:         PUSH	DE
0034D1 D9          9654                   EXX
0034D2 C5          9655                   PUSH	BC
0034D3 D5          9656                   PUSH	DE
0034D4 E5          9657                   PUSH	HL
0034D5 D9          9658                   EXX
0034D6 CD D6 25    9659                   CALL	VAR_		;DUMMY VARIABLE
0034D9 D9          9660                   EXX
0034DA E1          9661                   POP	HL
0034DB D1          9662                   POP	DE
0034DC C1          9663                   POP	BC
0034DD D9          9664                   EXX
0034DE D1          9665                   POP	DE
0034DF CB 77       9666                   BIT	6,A		;ARRAY?
0034E1 20 12       9667                   JR	NZ,SAVLO3
0034E3 B7          9668                   OR	A		;TYPE
0034E4 FA FF 34    9669                   JP	M,SAVLO2	;STRING
0034E7 D9          9670                   EXX
0034E8 E5          9671                   PUSH	HL		;SAVE H'L'
0034E9 D9          9672                   EXX
0034EA 47          9673                   LD	B,A		;TYPE
0034EB CD 25 19    9674                   CALL	LOADN
0034EE D9          9675                   EXX
0034EF E3          9676                   EX	(SP),HL
0034F0 D9          9677                   EXX
0034F1 E5          9678                   PUSH	HL
0034F2 C5          9679                   PUSH	BC
0034F3 18 30       9680                   JR	SAVLO4
0034F5             9681   ;
0034F5 DD 4E 00    9682   SAVLO3:         LD	C,(IX+0)	;ARRAY POINTER
0034F8 DD 46 01    9683                   LD	B,(IX+1)
0034FB C5          9684                   PUSH	BC		;SAVE TO STACK
0034FC F5          9685                   PUSH	AF		;SAVE TYPE
0034FD 18 26       9686                   JR	SAVLO4
0034FF             9687   ;
0034FF F5          9688   SAVLO2:         PUSH	AF		;STRING TYPE
003500 D5          9689                   PUSH	DE
003501 D9          9690                   EXX
003502 E5          9691                   PUSH	HL
003503 D9          9692                   EXX
003504 CD 0E 1A    9693                   CALL	LOADS
003507 D9          9694                   EXX
003508 E1          9695                   POP	HL
003509 D9          9696                   EXX
00350A 4B          9697                   LD	C,E
00350B D1          9698                   POP	DE
00350C CD 86 32    9699                   CALL	CHECK
00350F F1          9700                   POP	AF		;LEVEL STACK
003510 21 00 00    9701                   LD	HL,0
003513 45          9702                   LD	B,L
003514 ED 42       9703                   SBC	HL,BC
003516 39          9704                   ADD	HL,SP
003517 F9          9705                   LD	SP,HL
003518 47          9706                   LD	B,A		;TYPE
003519 C5          9707                   PUSH	BC
00351A 28 09       9708                   JR	Z,SAVLO4
00351C D5          9709                   PUSH	DE
00351D 11 00 52    9710                   LD	DE,ACCS
003520 EB          9711                   EX	DE,HL
003521 45          9712                   LD	B,L
003522 ED B0       9713                   LDIR			;SAVE STRING ON STACK
003524 D1          9714                   POP	DE
003525 DD E5       9715   SAVLO4:         PUSH	IX		;VARPTR
003527 CD 2A 35    9716                   CALL	SAVLO5
00352A             9717   LOCCHK:         EQU	$
00352A CD 86 32    9718   SAVLO5:         CALL	CHECK
00352D CD 0B 45    9719                   CALL	NXT
003530 FE 2C       9720                   CP	','		;MORE?
003532 28 8B       9721                   JR	Z,SAVLO1
003534 EB          9722                   EX	DE,HL
003535 E9          9723                   JP	(HL)		;"RETURN"
003536             9724   ;
003536 CD 0B 45    9725   TERMQ:          CALL	NXT
003539 FE 8B       9726                   CP	TELSE
00353B D0          9727                   RET	NC
00353C FE 3A       9728                   CP	':'		;ASSEMBLER SEPARATOR
00353E D0          9729                   RET	NC
00353F FE 0D       9730                   CP	CR
003541 C9          9731                   RET
003542             9732   ;
003542 CD 36 35    9733   SPAN:           CALL	TERMQ
003545 C8          9734                   RET	Z
003546 FD 23       9735                   INC	IY
003548 FE 22       9736                   CP	'"'
00354A CC 99 36    9737                   CALL	Z,QUOTE
00354D 18 F3       9738                   JR	SPAN
00354F             9739   ;
00354F CD 0B 45    9740   EQUALS:         CALL	NXT
003552 FD 23       9741                   INC	IY
003554 FE 3D       9742                   CP	'='
003556 C8          9743                   RET	Z
003557 3E 04       9744                   LD	A,4
003559 C3 44 3F    9745                   JP	ERROR_		;"Mistake"
00355C             9746   ;
00355C FE 8A       9747   FORMAT:         CP	TTAB
00355E 28 0C       9748                   JR	Z,DOTAB
003560 FE 89       9749                   CP	TSPC
003562 28 38       9750                   JR	Z,DOSPC
003564             9751                   ; CP	'''
003564 FE 27       9752                   CP	39	; apostrophe
003566 C0          9753                   RET	NZ
003567 CD FB 40    9754                   CALL	CRLF
00356A AF          9755                   XOR	A
00356B C9          9756                   RET
00356C             9757   ;
00356C C5          9758   DOTAB:          PUSH	BC
00356D CD 33 18    9759                   CALL	EXPRI
003570 D9          9760                   EXX
003571 C1          9761                   POP	BC
003572 FD 7E 00    9762                   LD	A,(IY)
003575 FE 2C       9763                   CP	','
003577 28 11       9764                   JR	Z,DOTAB1
003579 CD AE 20    9765                   CALL	BRAKET
00357C 7D          9766                   LD	A,L
00357D 21 FB 54    9767   TABIT:          LD	HL,COUNT
003580 BE          9768                   CP	(HL)
003581 C8          9769                   RET	Z
003582 F5          9770                   PUSH	AF
003583 DC FB 40    9771                   CALL	C,CRLF
003586 F1          9772                   POP	AF
003587 96          9773                   SUB	(HL)
003588 18 19       9774                   JR	SPACES
00358A FD 23       9775   DOTAB1:         INC	IY
00358C C5          9776                   PUSH	BC
00358D E5          9777                   PUSH	HL
00358E CD 33 18    9778                   CALL	EXPRI
003591 D9          9779                   EXX
003592 D1          9780                   POP	DE
003593 C1          9781                   POP	BC
003594 CD AE 20    9782                   CALL	BRAKET
003597 CD 08 02    9783                   CALL	PUTCSR
00359A AF          9784                   XOR	A
00359B C9          9785                   RET
00359C             9786   ;
00359C C5          9787   DOSPC:          PUSH	BC
00359D CD 60 18    9788                   CALL	ITEMI
0035A0 D9          9789                   EXX
0035A1 7D          9790                   LD	A,L
0035A2 C1          9791                   POP	BC
0035A3 B7          9792   SPACES:         OR	A
0035A4 C8          9793                   RET	Z
0035A5 C5          9794                   PUSH	BC
0035A6 47          9795                   LD	B,A
0035A7 3E 20       9796   FILL1:          LD	A,' '
0035A9 CD 02 41    9797                   CALL	OUTCHR
0035AC 10 F9       9798                   DJNZ	FILL1
0035AE C1          9799                   POP	BC
0035AF AF          9800                   XOR	A
0035B0 C9          9801                   RET
0035B1             9802   ;
0035B1 21 00 52    9803   PTEXT:          LD	HL,ACCS
0035B4 1C          9804                   INC	E
0035B5 1D          9805   PTEXT1:         DEC	E
0035B6 C8          9806                   RET	Z
0035B7 7E          9807                   LD	A,(HL)
0035B8 23          9808                   INC	HL
0035B9 CD 02 41    9809                   CALL	OUTCHR
0035BC 18 F7       9810                   JR	PTEXT1
0035BE             9811   ;
0035BE F5          9812   FETCHS:         PUSH	AF
0035BF C5          9813                   PUSH	BC
0035C0 E5          9814                   PUSH	HL
0035C1 FD E3       9815                   EX	(SP),IY
0035C3 CD DB 35    9816                   CALL	XTRACT
0035C6 CD 0B 45    9817                   CALL	NXT
0035C9 FD E3       9818                   EX	(SP),IY
0035CB E1          9819                   POP	HL
0035CC C1          9820                   POP	BC
0035CD F1          9821                   POP	AF
0035CE C9          9822                   RET
0035CF             9823   ;
0035CF 11 00 52    9824   LINES:          LD	DE,ACCS
0035D2 7E          9825   LINE1S:         LD	A,(HL)
0035D3 12          9826                   LD	(DE),A
0035D4 FE 0D       9827                   CP	CR
0035D6 C8          9828                   RET	Z
0035D7 23          9829                   INC	HL
0035D8 1C          9830                   INC	E
0035D9 18 F7       9831                   JR	LINE1S
0035DB             9832   ;
0035DB CD 0B 45    9833   XTRACT:         CALL	NXT
0035DE FE 22       9834                   CP	'"'
0035E0 FD 23       9835                   INC	IY
0035E2 CA 7A 19    9836                   JP	Z,CONS
0035E5 FD 2B       9837                   DEC	IY
0035E7 11 00 52    9838                   LD	DE,ACCS
0035EA FD 7E 00    9839   XTRAC1:         LD	A,(IY)
0035ED 12          9840                   LD	(DE),A
0035EE FE 2C       9841                   CP	','
0035F0 C8          9842                   RET	Z
0035F1 FE 0D       9843                   CP	CR
0035F3 C8          9844                   RET	Z
0035F4 FD 23       9845                   INC	IY
0035F6 1C          9846                   INC	E
0035F7 18 F1       9847                   JR	XTRAC1
0035F9             9848   ;
0035F9 3E DC       9849   DSRCH:          LD	A,TDATA
0035FB 06 00       9850   SEARCHex:         LD	B,0
0035FD 4E          9851   SRCH1:          LD	C,(HL)
0035FE 0C          9852                   INC	C
0035FF 0D          9853                   DEC	C
003600 28 0C       9854                   JR	Z,SRCH2		;FAIL
003602 23          9855                   INC	HL
003603 23          9856                   INC	HL
003604 23          9857                   INC	HL
003605 BE          9858                   CP	(HL)
003606 C8          9859                   RET	Z
003607 0D          9860                   DEC	C
003608 0D          9861                   DEC	C
003609 0D          9862                   DEC	C
00360A 09          9863                   ADD	HL,BC
00360B C3 FD 35    9864                   JP	SRCH1
00360E 2B          9865   SRCH2:          DEC	HL		;POINT TO CR
00360F 37          9866                   SCF
003610 C9          9867                   RET
003611             9868   ;
003611             9869   ; NSCAN - scan for token at start of line, with nesting of inner structures
003611             9870   ; Alternative entry at NSCAN1 with L = level (used by CASE)
003611             9871   ;
003611             9872   ;   Inputs: B = token to find (1, start of line)
003611             9873   ;           C = token to find (2, start of line)
003611             9874   ;           E = token to nest (end of line)
003611             9875   ;           D = token to unnest (start of line)
003611             9876   ;           IY = start search area (line length byte)
003611             9877   ;  Outputs: NZ if not found
003611             9878   ;           Z if found, IY points to byte after token
003611             9879   ; Destroys: A,B,C,L,IY,F
003611             9880   ;
003611 2E 00       9881   NSCAN:          LD	L,0		;nest level
003613 FD 7E 00    9882   NSCAN1:         LD	A,(IY)		;get line length
003616 B7          9883                   OR	A		;test zero = end of prog
003617 28 34       9884                   JR	Z,NSCAN6
003619 FD 7E 03    9885                   LD	A,(IY+3)	;initial token
00361C B8          9886                   CP	B		;test value reqd
00361D 28 1D       9887                   JR	Z,NSCAN3	;found (1)
00361F B9          9888                   CP	C
003620 28 1A       9889                   JR	Z,NSCAN3	;found (2)
003622 BA          9890   NSCAN7:         CP	D		;unnest?
003623 28 22       9891                   JR	Z,NSCAN5
003625 C5          9892   NSCAN2:         PUSH	BC
003626 06 00       9893                   LD	B,0
003628 FD 4E 00    9894                   LD	C,(IY)
00362B FD 09       9895                   ADD	IY,BC		;go to next line
00362D FD 7E FE    9896                   LD	A,(IY-2)
003630 BB          9897                   CP	E		;nest?
003631 79          9898                   LD	A,C
003632 C1          9899                   POP	BC
003633 20 DE       9900                   JR	NZ,NSCAN1	;continue
003635 FE 05       9901                   CP	5		;empty line ?
003637 38 DA       9902                   JR	C,NSCAN1	;continue
003639 2C          9903                   INC	L		;increment nest level
00363A 18 D7       9904                   JR	NSCAN1		;continue
00363C             9905   ;
00363C 2C          9906   NSCAN3:         INC	L
00363D 2D          9907                   DEC	L
00363E 20 E2       9908                   JR	NZ,NSCAN7
003640 01 04 00    9909   NSCAN4:         LD	BC,4
003643 FD 09       9910                   ADD	IY,BC
003645 AF          9911                   XOR	A		;Z
003646 C9          9912                   RET
003647             9913   ;
003647 2D          9914   NSCAN5:         DEC	L		;decrement nest level
003648 F2 25 36    9915                   JP	P,NSCAN2
00364B 18 F3       9916                   JR	NSCAN4
00364D             9917   ;
00364D F6 01       9918   NSCAN6:         OR	1		;NZ
00364F C9          9919                   RET
003650             9920   ;
003650             9921   ; WSRCH - search for token, with nesting of inner structures
003650             9922   ;
003650             9923   ;   Inputs: B = token to find or unnest (anywhere)
003650             9924   ;           C = token to nest (anywhere), ignore after EXITex
003650             9925   ;           D = ordinal (1 = find first token, 2 = second)
003650             9926   ;           IY = address to start looking
003650             9927   ;  Outputs: IY points to byte after that found
003650             9928   ;           if not found abort to END
003650             9929   ; Destroys: A,D,IY,F
003650             9930   ;
003650 FD 7E 00    9931   WSRCH:          LD	A,(IY)
003653 FD 23       9932                   INC	IY
003655 FE 22       9933                   CP	'"'
003657 CC 99 36    9934                   CALL	Z,QUOTE
00365A FE F4       9935                   CP	TREM
00365C 28 22       9936                   JR	Z,WSRCHM
00365E FE 10       9937                   CP	TEXIT
003660 28 30       9938                   JR	Z,WSRCHE
003662 B8          9939                   CP	B
003663 28 29       9940                   JR	Z,WSRCHX
003665 B9          9941                   CP	C
003666 28 23       9942                   JR	Z,WSRCHP
003668 FE 0D       9943                   CP	CR
00366A 20 E4       9944                   JR	NZ,WSRCH
00366C FD 7E 00    9945   WSRCH1:         LD	A,(IY)			;Line length
00366F FD 23       9946                   INC	IY
003671 B7          9947                   OR	A
003672 CA D3 24    9948                   JP	Z,END
003675 FD 23       9949                   INC	IY
003677 FD 23       9950                   INC	IY			;Skip line number
003679 FD 7E 00    9951                   LD	A,(IY)
00367C FE DC       9952                   CP	TDATA
00367E 20 D0       9953                   JR	NZ,WSRCH
003680 FD 7E 00    9954   WSRCHM:         LD	A,(IY)
003683 FD 23       9955                   INC	IY
003685 FE 0D       9956                   CP	CR
003687 20 F7       9957                   JR	NZ,WSRCHM		;Skip to end of line
003689 18 E1       9958                   JR	WSRCH1
00368B             9959   ;
00368B 14          9960   WSRCHP:         INC	D
00368C 18 C2       9961                   JR	WSRCH
00368E             9962   ;
00368E 15          9963   WSRCHX:         DEC	D
00368F 20 BF       9964                   JR	NZ,WSRCH
003691 C9          9965                   RET
003692             9966   ;
003692 CD 0B 45    9967   WSRCHE:         CALL	NXT
003695 FD 23       9968                   INC	IY
003697 18 B7       9969                   JR	WSRCH
003699             9970   ;
003699             9971   ; QUOTE - skip quoted string
003699             9972   ;
003699 FD 7E 00    9973   QUOTE:          LD	A,(IY)
00369C FD 23       9974                   INC	IY
00369E FE 0D       9975                   CP	CR
0036A0 CA A8 36    9976                   JP	Z,MISQUO
0036A3 FE 22       9977                   CP	'"'
0036A5 20 F2       9978                   JR	NZ,QUOTE
0036A7 C9          9979                   RET
0036A8             9980   ;
0036A8 3E 09       9981   MISQUO:         LD	A,9
0036AA C3 44 3F    9982                   JP	ERROR_		;"Missing quote"
0036AD             9983   ;
0036AD             9984   ; X14OR5 - multiply by 1, 4 or 5
0036AD             9985   ;   Inputs: DE = number to be multiplied
0036AD             9986   ;           A = 1, 4 or 5 (else multiply by 4)
0036AD             9987   ;  Outputs: DE = DE * A
0036AD             9988   ;           Carry set if overflow
0036AD             9989   ; Destroys: D,E,H,L,F
0036AD             9990   ;
0036AD 62          9991   X14OR5:         LD	H,D
0036AE 6B          9992                   LD	L,E
0036AF FE 01       9993                   CP	1
0036B1 C8          9994                   RET	Z
0036B2 FE 05       9995                   CP	5
0036B4 29          9996                   ADD	HL,HL
0036B5 D8          9997                   RET	C
0036B6 29          9998                   ADD	HL,HL
0036B7 D8          9999                   RET	C
0036B8 EB          10000                   EX	DE,HL
0036B9 C0          10001                   RET	NZ
0036BA 19          10002                   ADD	HL,DE
0036BB EB          10003                   EX	DE,HL
0036BC C9          10004                   RET
0036BD             10005   ;
0036BD             10006   ; MUL16 - 16-bit multiply
0036BD             10007   ;   Inputs: HL = number to be multiplied
0036BD             10008   ;           BC = multiplier
0036BD             10009   ;  Outputs: HL = HL * BC
0036BD             10010   ;           Carry set if overflow
0036BD             10011   ; Destroys: A,D,E,H,L,F
0036BD             10012   ;
0036BD EB          10013   MUL16:          EX	DE,HL
0036BE 21 00 00    10014                   LD	HL,0
0036C1 3E 10       10015                   LD	A,16
0036C3 29          10016   MUL161:         ADD	HL,HL
0036C4 D8          10017                   RET	C		;OVERFLOW
0036C5 CB 23       10018                   SLA	E
0036C7 CB 12       10019                   RL	D
0036C9 30 02       10020                   JR	NC,MUL162
0036CB 09          10021                   ADD	HL,BC
0036CC D8          10022                   RET	C
0036CD 3D          10023   MUL162:         DEC	A
0036CE 20 F3       10024                   JR	NZ,MUL161
0036D0 C9          10025                   RET
0036D1             10026   ;
0036D1 CD 0B 45    10027   CHANEL:         CALL	NXT
0036D4 FE 23       10028                   CP	'#'
0036D6 3E 2D       10029                   LD	A,45
0036D8 C2 44 3F    10030                   JP	NZ,ERROR_	;"Missing #"
0036DB FD 23       10031   CHNL:           INC	IY		;SKIP '#'
0036DD CD 60 18    10032                   CALL	ITEMI
0036E0 D9          10033                   EXX
0036E1 EB          10034                   EX	DE,HL
0036E2 C9          10035                   RET
0036E3             10036   ;
0036E3             10037   ; FREESA - Free members of a string array if adjacent to the top of heap
0036E3             10038   ;   Inputs: BC = length of array (= 4 * number of elements)
0036E3             10039   ;           HL addresses array first byte *above* array
0036E3             10040   ;  Outputs: NZ if any array element freed, Z if none
0036E3             10041   ; Destroys: nothing
0036E3             10042   ;
0036E3 F5          10043   FREESA:         PUSH	AF
0036E4 C5          10044   FREES0:         PUSH	BC
0036E5 D5          10045                   PUSH	DE
0036E6 E5          10046                   PUSH	HL
0036E7 AF          10047                   XOR	A
0036E8 50          10048                   LD	D,B
0036E9 59          10049                   LD	E,C
0036EA 47          10050                   LD	B,A
0036EB D5          10051   FREES1:         PUSH	DE
0036EC 2B          10052                   DEC	HL
0036ED 56          10053                   LD	D,(HL)
0036EE 2B          10054                   DEC	HL
0036EF 5E          10055                   LD	E,(HL)
0036F0 2B          10056                   DEC	HL
0036F1 4E          10057                   LD	C,(HL)
0036F2 2B          10058                   DEC	HL
0036F3 E5          10059                   PUSH	HL
0036F4 2A E0 54    10060                   LD	HL,(FREE)
0036F7 EB          10061                   EX	DE,HL
0036F8 09          10062                   ADD	HL,BC
0036F9 ED 52       10063                   SBC	HL,DE
0036FB 20 07       10064                   JR	NZ,FREES2
0036FD 19          10065                   ADD	HL,DE
0036FE ED 42       10066                   SBC	HL,BC
003700 22 E0 54    10067                   LD	(FREE),HL
003703 B4          10068                   OR	H
003704 D1          10069   FREES2:         POP	DE
003705 E1          10070                   POP	HL
003706 0E 04       10071                   LD	C,4
003708 B7          10072                   OR	A
003709 ED 42       10073                   SBC	HL,BC
00370B EB          10074                   EX	DE,HL
00370C 20 DD       10075                   JR	NZ,FREES1
00370E B7          10076                   OR	A
00370F E1          10077                   POP	HL
003710 D1          10078                   POP	DE
003711 C1          10079                   POP	BC
003712 B7          10080                   OR	A
003713 20 CF       10081                   JR	NZ,FREES0
003715 F1          10082                   POP	AF
003716 C9          10083                   RET
003717             10084   ;
003717             10085   ;                END
003717             10086   ; --- End exec.asm ---
003717             10087   
003717             10088   ; --- Begin main.asm ---
003717             10089   ;
003717             10090   ;Automatically created from original source on 2024-12-15 15:29:12
003717             10091   ;
003717             10092                   .ASSUME ADL = 0
003717             10093   ;	.ORG 0x0000
003717             10094   ;                SEGMENT CODE
003717             10095   ;
003717             10096   ;                XDEF	NEWIT
003717             10097   ;                XDEF	BAD
003717             10098   ;                XDEF	CLEAN
003717             10099   ;                XDEF	LINNUM
003717             10100   ;                XDEF	ERROR_
003717             10101   ;                XDEF	GETTOP
003717             10102   ;                XDEF	DEL
003717             10103   ;                XDEF	LISTIT
003717             10104   ;
003717             10105   ;BBC BASIC INTERPRETER - Z80 VERSION
003717             10106   ;COMMANDS AND COMMON MODULE - "MAIN"
003717             10107   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
003717             10108   ;
003717             10109   ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
003717             10110   ;OF THE BRITISH BROADCASTING CORPORATION AND IS
003717             10111   ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
003717             10112   ;
003717             10113   ;VERSION 2.3, 07-05-1984
003717             10114   ;VERSION 3.0, 01-03-1987
003717             10115   ;VERSION 5.0, 31-05-2024
003717             10116   ;VERSION 5.1, 10-08-2024
003717             10117   ;
003717             10118   ;                XREF	XEQ
003717             10119   ;                XREF	RUN0
003717             10120   ;                XREF	CHAIN0
003717             10121   ;                XREF	TERMQ
003717             10122   ;                XREF	MUL16
003717             10123   ;                XREF	X14OR5
003717             10124   ;                XREF	SPACES
003717             10125   ;                XREF	ESCAPE
003717             10126   ;                XREF	CHECK
003717             10127   ;                XREF	SEARCH
003717             10128   ;
003717             10129   ;                XREF	OSWRCH
003717             10130   ;                XREF	OSLINE
003717             10131   ;                XREF	OSINIT
003717             10132   ;                XREF	OSLOAD
003717             10133   ;                XREF	OSSAVE
003717             10134   ;                XREF	OSBGET
003717             10135   ;                XREF	OSBPUT
003717             10136   ;                XREF	OSSHUT
003717             10137   ;                XREF	OSSTAT
003717             10138   ;                XREF	PROMPT
003717             10139   ;                XREF	LTRAP
003717             10140   ;                XREF	OSCLI
003717             10141   ;                XREF	RESET
003717             10142   ;
003717             10143   ;                XREF	COMMA
003717             10144   ;                XREF	BRAKET
003717             10145   ;                XREF	ZERO
003717             10146   ;                XREF	ITEMI
003717             10147   ;                XREF	EXPRI
003717             10148   ;                XREF	EXPRS
003717             10149   ;                XREF	DECODE
003717             10150   ;                XREF	LOADN
003717             10151   ;                XREF	SFIX
003717             10152   ;
003717             10153   ;                XDEF	NXT
003717             10154   ;                XDEF	NLIST
003717             10155   ;                XDEF	START
003717             10156   ;                XDEF	OUTCHR
003717             10157   ;                XDEF	OUT
003717             10158   ;                XDEF	ERROR_
003717             10159   ;                XDEF	EXTERR
003717             10160   ;                XDEF	REPORT
003717             10161   ;                XDEF	CLOOP
003717             10162   ;                XDEF	WARM
003717             10163   ;                XDEF	CLEAR
003717             10164   ;                XDEF	CRLF
003717             10165   ;                XDEF	SAYLN
003717             10166   ;                XDEF	LOAD0
003717             10167   ;                XDEF	TELL
003717             10168   ;                XDEF	FINDL
003717             10169   ;                XDEF	GETTOP
003717             10170   ;                XDEF	SETLIN
003717             10171   ;                XDEF	GETVAR
003717             10172   ;                XDEF	PUTVAR
003717             10173   ;                XDEF	GETDEF
003717             10174   ;                XDEF	LOCATE
003717             10175   ;                XDEF	CREATE
003717             10176   ;                XDEF	PBCDL
003717             10177   ;                XDEF	LEXAN2
003717             10178   ;                XDEF	RANGE
003717             10179   ;                XDEF	VERMSG
003717             10180   ;                XDEF	KEYWDS
003717             10181   ;                XDEF	KEYWDL
003717             10182   ;
003717             10183   ;                XREF	PAGE_
003717             10184   ;                XREF	ACCS
003717             10185   ;                XREF	BUFFER
003717             10186   ;                XREF	LOMEM
003717             10187   ;                XREF	HIMEM
003717             10188   ;                XREF	COUNT
003717             10189   ;                XREF	WIDTH
003717             10190   ;                XREF	FREE
003717             10191   ;                XREF	STAVAR
003717             10192   ;                XREF	DYNVAR
003717             10193   ;                XREF	ERRTXT
003717             10194   ;                XREF	ERR
003717             10195   ;                XREF	ERL
003717             10196   ;                XREF	CURLIN
003717             10197   ;                XREF	ERRTRP
003717             10198   ;                XREF	ONERSP
003717             10199   ;                XREF	FNPTR
003717             10200   ;                XREF	PROPTR
003717             10201   ;                XREF	AUTONO
003717             10202   ;                XREF	INCREM
003717             10203   ;                XREF	LISTON
003717             10204   ;                XREF	TRACEN
003717             10205   ;
003717             10206   ; CR             EQU	0DH
003717             10207   ; LF             EQU	0AH
003717             10208   ; ESC            EQU	1BH
003717             10209   ;
003717             10210   TERROR:         EQU	85H
003717             10211   TLINE:          EQU	86H
003717             10212   TELSE:          EQU	8BH
003717             10213   TTHEN:          EQU	8CH
003717             10214   TLINO:          EQU	8DH
003717             10215   TFN:            EQU	0A4H
003717             10216   TTO:            EQU	0B8H
003717             10217   TWHILE:         EQU	0C7H
003717             10218   TCASE:          EQU	0C8H
003717             10219   TWHEN:          EQU	0C9H
003717             10220   TOF:            EQU	0CAH
003717             10221   TENDCASE:       EQU	0CBH
003717             10222   TOTHERWISE:     EQU	0CCH
003717             10223   TENDIF:         EQU	0CDH
003717             10224   TENDWHILE:      EQU	0CEH
003717             10225   TDATA:          EQU	0DCH
003717             10226   TDIM:           EQU	0DEH
003717             10227   TFOR:           EQU	0E3H
003717             10228   TGOSUB:         EQU	0E4H
003717             10229   TGOTO:          EQU	0E5H
003717             10230   TIF:            EQU	0E7H
003717             10231   TLOCAL:         EQU	0EAH
003717             10232   TNEXT:          EQU	0EDH
003717             10233   TON:            EQU	0EEH
003717             10234   TPROC:          EQU	0F2H
003717             10235   TREM:           EQU	0F4H
003717             10236   TREPEAT:        EQU	0F5H
003717             10237   TRESTORE:       EQU	0F7H
003717             10238   TTRACE:         EQU	0FCH
003717             10239   TUNTIL:         EQU	0FDH
003717             10240   TEXIT:          EQU	10H
003717             10241   ;
003717             10242   TOKLO:          EQU	8FH
003717             10243   TOKHI:          EQU	93H
003717             10244   OFFSET:         EQU	0CFH-TOKLO
003717             10245   ;
003717 C3 41 37    10246   START:          JP	COLD
00371A C3 AF 37    10247                   JP	WARM
00371D C3 E3 25    10248                   JP	ESCAPE
003720 C3 55 3F    10249                   JP	EXTERR
003723 C3 FA 44    10250                   JP	TELL
003726 C3 E8 44    10251                   JP	TEXT_
003729 C3 60 18    10252                   JP	ITEMI
00372C C3 33 18    10253                   JP	EXPRI
00372F C3 3C 18    10254                   JP	EXPRS
003732 C3 97 15    10255                   JP	OSCLI
003735 C3 3F 12    10256                   JP	OSBGET
003738 C3 47 12    10257                   JP	OSBPUT
00373B C3 50 12    10258                   JP	OSSTAT
00373E C3 37 12    10259                   JP	OSSHUT
003741 21 00 54    10260   COLD:           LD	HL,STAVAR	;COLD START
003744 F9          10261                   LD	SP,HL
003745 36 0A       10262                   LD	(HL),10
003747 2C          10263                   INC	L
003748 36 09       10264                   LD	(HL),9
00374A 2C          10265                   INC	L
00374B AF          10266                   XOR	A
00374C 77          10267   PURGE:          LD	(HL),A		;CLEAR SCRATCHPAD
00374D 2C          10268                   INC	L
00374E 20 FC       10269                   JR	NZ,PURGE
003750 3E 37       10270                   LD	A,37H		;V3.0
003752 32 FE 54    10271                   LD	(LISTON),A
003755 21 8E 37    10272                   LD	HL,NOTICE
003758 22 EE 54    10273                   LD	(ERRTXT),HL
00375B CD 84 11    10274                   CALL	OSINIT
00375E ED 53 E2 54 10275                   LD	(HIMEM),DE
003762 22 DC 54    10276                   LD	(PAGE_),HL
003765 CD 3E 40    10277                   CALL	NEWIT
003768 C2 52 24    10278                   JP	NZ,CHAIN0	;AUTO-RUN
00376B CD FA 44    10279                   CALL	TELL
00376E 42 42 43 20 10280   VERMSG:         DB	"BBC BASIC (Z80) Version 5.00  "
       42 41 53 49 
       43 20 28 5A 
       38 30 29 20 
       56 65 72 73 
       69 6F 6E 20 
       35 2E 30 30 
       20 20       
00378C 0D          10281                   DB	CR
00378D 0A          10282                   DB	LF
00378E 28 43 29 20 10283   NOTICE:         DB	"(C) Copyright R.T.Russell 2024"
       43 6F 70 79 
       72 69 67 68 
       74 20 52 2E 
       54 2E 52 75 
       73 73 65 6C 
       6C 20 32 30 
       32 34       
0037AC 0D          10284                   DB	CR
0037AD 0A          10285                   DB	LF
0037AE 00          10286                   DB	0
0037AF F6          10287   WARM:           DB	0F6H
0037B0 37          10288   CLOOP:          SCF
0037B1 ED 7B E2 54 10289                   LD	SP,(HIMEM)
0037B5 CD 93 11    10290                   CALL	PROMPT		;PROMPT USER
0037B8 21 FE 54    10291                   LD	HL,LISTON
0037BB 7E          10292                   LD	A,(HL)
0037BC E6 0F       10293                   AND	0FH		;LISTO
0037BE F6 30       10294                   OR	30H		;OPT 3
0037C0 77          10295                   LD	(HL),A
0037C1 ED 62       10296                   SBC	HL,HL		;HL <- 0 (V3.0)
0037C3 22 EA 54    10297                   LD	(ERRTRP),HL
0037C6 22 EC 54    10298                   LD	(ONERSP),HL
0037C9 22 F4 54    10299                   LD	(CURLIN),HL	;For CMOS EDIT->LIST
0037CC 2A E8 54    10300                   LD	HL,(AUTONO)
0037CF E5          10301                   PUSH	HL
0037D0 7C          10302                   LD	A,H
0037D1 B5          10303                   OR	L
0037D2 28 17       10304                   JR	Z,NOAUTO
0037D4 E5          10305                   PUSH	HL
0037D5 CD 96 41    10306                   CALL	PBCD		;AUTO NUMBER
0037D8 E1          10307                   POP	HL
0037D9 ED 4B FF 54 10308                   LD	BC,(INCREM)
0037DD 06 00       10309                   LD	B,0
0037DF 09          10310                   ADD	HL,BC
0037E0 DA AF 43    10311                   JP	C,TOOBIGmn
0037E3 22 E8 54    10312                   LD	(AUTONO),HL
0037E6 3E 20       10313                   LD	A,' '
0037E8 CD 02 41    10314                   CALL	OUTCHR
0037EB 21 00 52    10315   NOAUTO:         LD	HL,ACCS
0037EE CD CB 11    10316                   CALL	OSLINE		;GET CONSOLE INPUT
0037F1 AF          10317                   XOR	A
0037F2 32 FB 54    10318                   LD	(COUNT),A
0037F5 FD 21 00 52 10319                   LD	IY,ACCS
0037F9 21 E1 3B    10320                   LD	HL,COMNDS
0037FC CD A6 3F    10321                   CALL	LEX0
0037FF E1          10322                   POP	HL
003800 20 19       10323                   JR	NZ,NOTCMD
003802 87          10324                   ADD	A,A
003803 4F          10325                   LD	C,A
003804 7C          10326                   LD	A,H
003805 B5          10327                   OR	L
003806 20 0F       10328                   JR	NZ,INAUTO
003808 47          10329                   LD	B,A
003809 21 11 3C    10330                   LD	HL,CMDTABmn
00380C 09          10331                   ADD	HL,BC
00380D 7E          10332                   LD	A,(HL)		;TABLE ENTRY
00380E 23          10333                   INC	HL
00380F 66          10334                   LD	H,(HL)
003810 6F          10335                   LD	L,A
003811 FD 23       10336                   INC	IY
003813 CD 0B 45    10337                   CALL	NXT
003816 E9          10338                   JP	(HL)		;EXECUTE COMMAND
003817             10339   ;
003817 FD 21 00 52 10340   INAUTO:         LD	IY,ACCS
00381B 7C          10341   NOTCMD:         LD	A,H
00381C B5          10342                   OR	L
00381D CC 8A 43    10343                   CALL	Z,LINNUM
003820 CD 0B 45    10344                   CALL	NXT
003823 11 00 53    10345                   LD	DE,BUFFER
003826 0E 01       10346                   LD	C,1		;LEFT MODE
003828 E5          10347                   PUSH	HL
003829 CD 18 44    10348                   CALL	LEXAN2		;LEXICAL ANALYSIS
00382C E1          10349                   POP	HL
00382D 12          10350                   LD	(DE),A		;TERMINATOR
00382E AF          10351                   XOR	A
00382F 47          10352                   LD	B,A
003830 4B          10353                   LD	C,E		;BC=LINE LENGTH
003831 13          10354                   INC	DE
003832 12          10355                   LD	(DE),A		;ZERO NEXT
003833 7C          10356                   LD	A,H
003834 B5          10357                   OR	L
003835 FD 21 00 53 10358                   LD	IY,BUFFER	;FOR XEQ
003839 CA 99 24    10359                   JP	Z,XEQ		;DIRECT MODE
00383C C5          10360                   PUSH	BC
00383D CD 43 41    10361                   CALL	FINDL
003840 CC E9 3F    10362                   CALL	Z,DEL
003843 C1          10363                   POP	BC
003844 79          10364                   LD	A,C
003845 B7          10365                   OR	A
003846 28 39       10366                   JR	Z,CLOOP2	;DELETE LINE ONLY
003848 C6 04       10367                   ADD	A,4
00384A 4F          10368                   LD	C,A		;LENGTH INCLUSIVE
00384B D5          10369                   PUSH	DE		;LINE NUMBER
00384C C5          10370                   PUSH	BC		;SAVE LINE LENGTH
00384D EB          10371                   EX	DE,HL
00384E C5          10372                   PUSH	BC
00384F CD 25 40    10373                   CALL	GETTOP
003852 C1          10374                   POP	BC
003853 E5          10375                   PUSH	HL
003854 09          10376                   ADD	HL,BC
003855 E5          10377                   PUSH	HL
003856 24          10378                   INC	H
003857 AF          10379                   XOR	A
003858 ED 72       10380                   SBC	HL,SP
00385A E1          10381                   POP	HL
00385B D2 44 3F    10382                   JP	NC,ERROR_	;"No room"
00385E E3          10383                   EX	(SP),HL
00385F E5          10384                   PUSH	HL
003860 23          10385                   INC	HL
003861 B7          10386                   OR	A
003862 ED 52       10387                   SBC	HL,DE
003864 44          10388                   LD	B,H		;BC=AMOUNT TO MOVE
003865 4D          10389                   LD	C,L
003866 E1          10390                   POP	HL
003867 D1          10391                   POP	DE
003868 28 02       10392                   JR	Z,ATEND
00386A ED B8       10393                   LDDR			;MAKE SPACE
00386C C1          10394   ATEND:          POP	BC		;LINE LENGTH
00386D D1          10395                   POP	DE		;LINE NUMBER
00386E 23          10396                   INC	HL
00386F 71          10397                   LD	(HL),C		;STORE LENGTH
003870 23          10398                   INC	HL
003871 73          10399                   LD	(HL),E		;STORE LINE NUMBER
003872 23          10400                   INC	HL
003873 72          10401                   LD	(HL),D
003874 23          10402                   INC	HL
003875 11 00 53    10403                   LD	DE,BUFFER
003878 EB          10404                   EX	DE,HL
003879 0D          10405                   DEC	C
00387A 0D          10406                   DEC	C
00387B 0D          10407                   DEC	C
00387C ED B0       10408                   LDIR			;ADD LINE
00387E CD 1A 40    10409                   CALL	CLEAN
003881 C3 B0 37    10410   CLOOP2:         JP	CLOOP
003884             10411   ;
003884             10412   ;LIST OF TOKENS AND KEYWORDS.
003884             10413   ;IF A KEYWORD IS FOLLOWED BY NUL THEN IT WILL
003884             10414   ; ONLY MATCH WITH THE WORD FOLLOWED IMMEDIATELY
003884             10415   ; BY A DELIMITER.
003884             10416   ;
003884 80          10417   KEYWDS:         DB	80H
003885 41 4E 44    10418                   DB	"AND"
003888 94          10419                   DB	94H
003889 41 42 53    10420                   DB	"ABS"
00388C 95          10421                   DB	95H
00388D 41 43 53    10422                   DB	"ACS"
003890 96          10423                   DB	96H
003891 41 44 56 41 10424                   DB	"ADVAL"
       4C          
003896 97          10425                   DB	97H
003897 41 53 43    10426                   DB	"ASC"
00389A 98          10427                   DB	98H
00389B 41 53 4E    10428                   DB	"ASN"
00389E 99          10429                   DB	99H
00389F 41 54 4E    10430                   DB	"ATN"
0038A2 9A          10431                   DB	9AH
0038A3 42 47 45 54 10432                   DB	"BGET "
       20          
0038A8 D5          10433                   DB	0D5H
0038A9 42 50 55 54 10434                   DB	"BPUT "
       20          
0038AE 0F          10435                   DB	0FH
0038AF 42 59 20    10436                   DB	"BY "		; v5
0038B2 FB          10437                   DB	0FBH
0038B3 43 4F 4C 4F 10438                   DB	"COLOUR"
       55 52       
0038B9 FB          10439                   DB	0FBH
0038BA 43 4F 4C 4F 10440                   DB	"COLOR"
       52          
0038BF D6          10441                   DB	0D6H
0038C0 43 41 4C 4C 10442                   DB	"CALL"
0038C4 C8          10443                   DB	0C8H
0038C5 43 41 53 45 10444                   DB	"CASE"		; v5
0038C9 D7          10445                   DB	0D7H
0038CA 43 48 41 49 10446                   DB	"CHAIN"
       4E          
0038CF BD          10447                   DB	0BDH
0038D0 43 48 52 24 10448                   DB	"CHR$"
0038D4 D8          10449                   DB	0D8H
0038D5 43 4C 45 41 10450                   DB	"CLEAR "
       52 20       
0038DB D9          10451                   DB	0D9H
0038DC 43 4C 4F 53 10452                   DB	"CLOSE "
       45 20       
0038E2 DA          10453                   DB	0DAH
0038E3 43 4C 47 20 10454                   DB	"CLG "
0038E7 DB          10455                   DB	0DBH
0038E8 43 4C 53 20 10456                   DB	"CLS "
0038EC 9B          10457                   DB	9BH
0038ED 43 4F 53    10458                   DB	"COS"
0038F0 9C          10459                   DB	9CH
0038F1 43 4F 55 4E 10460                   DB	"COUNT "
       54 20       
0038F7 01          10461                   DB	01H
0038F8 43 49 52 43 10462                   DB	"CIRCLE"	; v5
       4C 45       
0038FE DC          10463                   DB	0DCH
0038FF 44 41 54 41 10464                   DB	"DATA"
003903 9D          10465                   DB	9DH
003904 44 45 47    10466                   DB	"DEG"
003907 DD          10467                   DB	0DDH
003908 44 45 46    10468                   DB	"DEF"
00390B 81          10469                   DB	81H
00390C 44 49 56    10470                   DB	"DIV"
00390F DE          10471                   DB	0DEH
003910 44 49 4D    10472                   DB	"DIM"
003913 DF          10473                   DB	0DFH
003914 44 52 41 57 10474                   DB	"DRAW"
003918 E1          10475                   DB	0E1H
003919 45 4E 44 50 10476                   DB	"ENDPROC "
       52 4F 43 20 
003921 CE          10477                   DB	0CEH
003922 45 4E 44 57 10478                   DB	"ENDWHILE "	; v5
       48 49 4C 45 
       20          
00392B CB          10479                   DB	0CBH
00392C 45 4E 44 43 10480                   DB	"ENDCASE "	; v5
       41 53 45 20 
003934 CD          10481                   DB	0CDH
003935 45 4E 44 49 10482                   DB	"ENDIF "	; v5
       46 20       
00393B E0          10483                   DB	0E0H
00393C 45 4E 44 20 10484                   DB	"END "
003940 E2          10485                   DB	0E2H
003941 45 4E 56 45 10486                   DB	"ENVELOPE"
       4C 4F 50 45 
003949 8B          10487                   DB	8BH
00394A 45 4C 53 45 10488                   DB	"ELSE"
00394E A0          10489                   DB	0A0H
00394F 45 56 41 4C 10490                   DB	"EVAL"
003953 9E          10491                   DB	9EH
003954 45 52 4C 20 10492                   DB	"ERL "
003958 85          10493                   DB	85H
003959 45 52 52 4F 10494                   DB	"ERROR"
       52          
00395E C5          10495                   DB	0C5H
00395F 45 4F 46 20 10496                   DB	"EOF "
003963 82          10497                   DB	82H
003964 45 4F 52    10498                   DB	"EOR"
003967 9F          10499                   DB	9FH
003968 45 52 52 20 10500                   DB	"ERR "
00396C 10          10501                   DB	10H
00396D 45 58 49 54 10502                   DB	"EXIT "		; v5
       20          
003972 A1          10503                   DB	0A1H
003973 45 58 50    10504                   DB	"EXP"
003976 A2          10505                   DB	0A2H
003977 45 58 54 20 10506                   DB	"EXT "
00397B 02          10507                   DB	02H
00397C 45 4C 4C 49 10508                   DB	"ELLIPSE"	; v5
       50 53 45    
003983 E3          10509                   DB	0E3H
003984 46 4F 52    10510                   DB	"FOR"
003987 A3          10511                   DB	0A3H
003988 46 41 4C 53 10512                   DB	"FALSE "
       45 20       
00398E 03          10513                   DB	03H
00398F 46 49 4C 4C 10514                   DB	"FILL"		; v5
003993 A4          10515                   DB	0A4H
003994 46 4E       10516                   DB	"FN"
003996 E5          10517                   DB	0E5H
003997 47 4F 54 4F 10518                   DB	"GOTO"
00399B BE          10519                   DB	0BEH
00399C 47 45 54 24 10520                   DB	"GET$"
0039A0 A5          10521                   DB	0A5H
0039A1 47 45 54    10522                   DB	"GET"
0039A4 E4          10523                   DB	0E4H
0039A5 47 4F 53 55 10524                   DB	"GOSUB"
       42          
0039AA E6          10525                   DB	0E6H
0039AB 47 43 4F 4C 10526                   DB	"GCOL"
0039AF 93          10527                   DB	93H
0039B0 48 49 4D 45 10528                   DB	"HIMEM "
       4D 20       
0039B6 E8          10529                   DB	0E8H
0039B7 49 4E 50 55 10530                   DB	"INPUT"
       54          
0039BC E7          10531                   DB	0E7H
0039BD 49 46       10532                   DB	"IF"
0039BF BF          10533                   DB	0BFH
0039C0 49 4E 4B 45 10534                   DB	"INKEY$"
       59 24       
0039C6 A6          10535                   DB	0A6H
0039C7 49 4E 4B 45 10536                   DB	"INKEY"
       59          
0039CC A8          10537                   DB	0A8H
0039CD 49 4E 54    10538                   DB	"INT"
0039D0 A7          10539                   DB	0A7H
0039D1 49 4E 53 54 10540                   DB	"INSTR("
       52 28       
0039D7 0C          10541                   DB	0CH
0039D8 49 4E 53 54 10542                   DB	"INSTALL"	; v5
       41 4C 4C    
0039DF 86          10543                   DB	86H
0039E0 4C 49 4E 45 10544                   DB	"LINE"
0039E4 92          10545                   DB	92H
0039E5 4C 4F 4D 45 10546                   DB	"LOMEM "
       4D 20       
0039EB EA          10547                   DB	0EAH
0039EC 4C 4F 43 41 10548                   DB	"LOCAL"
       4C          
0039F1 C0          10549                   DB	0C0H
0039F2 4C 45 46 54 10550                   DB	"LEFT$("
       24 28       
0039F8 A9          10551                   DB	0A9H
0039F9 4C 45 4E    10552                   DB	"LEN"
0039FC E9          10553                   DB	0E9H
0039FD 4C 45 54    10554                   DB	"LET"
003A00 AB          10555                   DB	0ABH
003A01 4C 4F 47    10556                   DB	"LOG"
003A04 AA          10557                   DB	0AAH
003A05 4C 4E       10558                   DB	"LN"
003A07 C1          10559                   DB	0C1H
003A08 4D 49 44 24 10560                   DB	"MID$("
       28          
003A0D EB          10561                   DB	0EBH
003A0E 4D 4F 44 45 10562                   DB	"MODE"
003A12 83          10563                   DB	83H
003A13 4D 4F 44    10564                   DB	"MOD"
003A16 EC          10565                   DB	0ECH
003A17 4D 4F 56 45 10566                   DB	"MOVE"
003A1B 04          10567                   DB	04H
003A1C 4D 4F 55 53 10568                   DB	"MOUSE"		; v5
       45          
003A21 ED          10569                   DB	0EDH
003A22 4E 45 58 54 10570                   DB	"NEXT"
003A26 AC          10571                   DB	0ACH
003A27 4E 4F 54    10572                   DB	"NOT"
003A2A EE          10573                   DB	0EEH
003A2B 4F 4E       10574                   DB	"ON"
003A2D 87          10575                   DB	87H
003A2E 4F 46 46 20 10576                   DB	"OFF "
003A32 CA          10577                   DB	0CAH
003A33 4F 46 20    10578                   DB	"OF "		; v5
003A36 05          10579                   DB	05H
003A37 4F 52 49 47 10580                   DB	"ORIGIN"	; v5
       49 4E       
003A3D 84          10581                   DB	84H
003A3E 4F 52       10582                   DB	"OR"
003A40 8E          10583                   DB	8EH
003A41 4F 50 45 4E 10584                   DB	"OPENIN"
       49 4E       
003A47 AE          10585                   DB	0AEH
003A48 4F 50 45 4E 10586                   DB	"OPENOUT"
       4F 55 54    
003A4F AD          10587                   DB	0ADH
003A50 4F 50 45 4E 10588                   DB	"OPENUP"
       55 50       
003A56 FF          10589                   DB	0FFH
003A57 4F 53 43 4C 10590                   DB	"OSCLI"
       49          
003A5C CC          10591                   DB	0CCH
003A5D 4F 54 48 45 10592                   DB	"OTHERWISE"	; v5
       52 57 49 53 
       45          
003A66 F1          10593                   DB	0F1H
003A67 50 52 49 4E 10594                   DB	"PRINT"
       54          
003A6C 90          10595                   DB	90H
003A6D 50 41 47 45 10596                   DB	"PAGE "
       20          
003A72 8F          10597                   DB	8FH
003A73 50 54 52 20 10598                   DB	"PTR "
003A77 AF          10599                   DB	0AFH
003A78 50 49 20    10600                   DB	"PI "
003A7B F0          10601                   DB	0F0H
003A7C 50 4C 4F 54 10602                   DB	"PLOT"
003A80 B0          10603                   DB	0B0H
003A81 50 4F 49 4E 10604                   DB	"POINT("
       54 28       
003A87 F2          10605                   DB	0F2H
003A88 50 52 4F 43 10606                   DB	"PROC"
003A8C B1          10607                   DB	0B1H
003A8D 50 4F 53 20 10608                   DB	"POS "
003A91 0E          10609                   DB	0EH
003A92 50 55 54    10610                   DB	"PUT"		; Token changed
003A95 06          10611                   DB	06H
003A96 51 55 49 54 10612                   DB	"QUIT "		; v5
       20          
003A9B F8          10613                   DB	0F8H
003A9C 52 45 54 55 10614                   DB	"RETURN "
       52 4E 20    
003AA3 F5          10615                   DB	0F5H
003AA4 52 45 50 45 10616                   DB	"REPEAT"
       41 54       
003AAA F6          10617                   DB	0F6H
003AAB 52 45 50 4F 10618                   DB	"REPORT "
       52 54 20    
003AB2 F3          10619                   DB	0F3H
003AB3 52 45 41 44 10620                   DB	"READ"
003AB7 F4          10621                   DB	0F4H
003AB8 52 45 4D    10622                   DB	"REM"
003ABB F9          10623                   DB	0F9H
003ABC 52 55 4E 20 10624                   DB	"RUN "
003AC0 B2          10625                   DB	0B2H
003AC1 52 41 44    10626                   DB	"RAD"
003AC4 F7          10627                   DB	0F7H
003AC5 52 45 53 54 10628                   DB	"RESTORE"
       4F 52 45    
003ACC C2          10629                   DB	0C2H
003ACD 52 49 47 48 10630                   DB	"RIGHT$("
       54 24 28    
003AD4 B3          10631                   DB	0B3H
003AD5 52 4E 44 20 10632                   DB	"RND "
003AD9 07          10633                   DB	07H
003ADA 52 45 43 54 10634                   DB	"RECTANGLE"	; v5
       41 4E 47 4C 
       45          
003AE3 88          10635                   DB	88H
003AE4 53 54 45 50 10636                   DB	"STEP"
003AE8 B4          10637                   DB	0B4H
003AE9 53 47 4E    10638                   DB	"SGN"
003AEC B5          10639                   DB	0B5H
003AED 53 49 4E    10640                   DB	"SIN"
003AF0 B6          10641                   DB	0B6H
003AF1 53 51 52    10642                   DB	"SQR"
003AF4 89          10643                   DB	89H
003AF5 53 50 43    10644                   DB	"SPC"
003AF8 C3          10645                   DB	0C3H
003AF9 53 54 52 24 10646                   DB	"STR$"
003AFD C4          10647                   DB	0C4H
003AFE 53 54 52 49 10648                   DB	"STRING$("
       4E 47 24 28 
003B06 D4          10649                   DB	0D4H
003B07 53 4F 55 4E 10650                   DB	"SOUND"
       44          
003B0C FA          10651                   DB	0FAH
003B0D 53 54 4F 50 10652                   DB	"STOP "
       20          
003B12 C6          10653                   DB	0C6H
003B13 53 55 4D    10654                   DB	"SUM"		; v5
003B16 08          10655                   DB	08H
003B17 53 57 41 50 10656                   DB	"SWAP"		; v5
003B1B 09          10657                   DB	09H
003B1C 53 59 53    10658                   DB	"SYS"		; v5
003B1F B7          10659                   DB	0B7H
003B20 54 41 4E    10660                   DB	"TAN"
003B23 8A          10661                   DB	8AH
003B24 54 41 42 28 10662                   DB	"TAB("
003B28 8C          10663                   DB	8CH
003B29 54 48 45 4E 10664                   DB	"THEN"
003B2D 91          10665                   DB	91H
003B2E 54 49 4D 45 10666                   DB	"TIME "
       20          
003B33 0A          10667                   DB	0AH
003B34 54 49 4E 54 10668                   DB	"TINT"
003B38 B8          10669                   DB	0B8H
003B39 54 4F       10670                   DB	"TO"
003B3B FC          10671                   DB	0FCH
003B3C 54 52 41 43 10672                   DB	"TRACE"
       45          
003B41 B9          10673                   DB	0B9H
003B42 54 52 55 45 10674                   DB	"TRUE "
       20          
003B47 FD          10675                   DB	0FDH
003B48 55 4E 54 49 10676                   DB	"UNTIL"
       4C          
003B4D BA          10677                   DB	0BAH
003B4E 55 53 52    10678                   DB	"USR"
003B51 EF          10679                   DB	0EFH
003B52 56 44 55    10680                   DB	"VDU"
003B55 BB          10681                   DB	0BBH
003B56 56 41 4C    10682                   DB	"VAL"
003B59 BC          10683                   DB	0BCH
003B5A 56 50 4F 53 10684                   DB	"VPOS "
       20          
003B5F C7          10685                   DB	0C7H
003B60 57 48 49 4C 10686                   DB	"WHILE"		; v5
       45          
003B65 C9          10687                   DB	0C9H
003B66 57 48 45 4E 10688                   DB	"WHEN"		; v5
003B6A 0B          10689                   DB	0BH
003B6B 57 41 49 54 10690                   DB	"WAIT "		; v5
       20          
003B70 FE          10691                   DB	0FEH
003B71 57 49 44 54 10692                   DB	"WIDTH"
       48          
003B76             10693   ;'LEFT' TOKENS:
003B76 CF          10694                   DB	0CFH
003B77 50 54 52    10695                   DB	"PTR"
003B7A D1          10696                   DB	0D1H
003B7B 54 49 4D 45 10697                   DB	"TIME"
003B7F D3          10698                   DB	0D3H
003B80 48 49 4D 45 10699                   DB	"HIMEM"
       4D          
003B85 D2          10700                   DB	0D2H
003B86 4C 4F 4D 45 10701                   DB	"LOMEM"
       4D          
003B8B D0          10702                   DB	0D0H
003B8C 50 41 47 45 10703                   DB	"PAGE"
003B90             10704   ;
003B90 11          10705                   DB	11H
003B91 4D 69 73 73 10706                   DB	"Missing "
       69 6E 67 20 
003B99 12          10707                   DB	12H
003B9A 4E 6F 20 73 10708                   DB	"No such "
       75 63 68 20 
003BA2 13          10709                   DB	13H
003BA3 42 61 64 20 10710                   DB	"Bad "
003BA7 14          10711                   DB	14H
003BA8 20 72 61 6E 10712                   DB	" range"
       67 65       
003BAE 15          10713                   DB	15H
003BAF 76 61 72 69 10714                   DB	"variable"
       61 62 6C 65 
003BB7 16          10715                   DB	16H
003BB8 4F 75 74 20 10716                   DB	"Out of"
       6F 66       
003BBE 17          10717                   DB	17H
003BBF 4E 6F 20    10718                   DB	"No "
003BC2 18          10719                   DB	18H
003BC3 20 73 70 61 10720                   DB	" space"
       63 65       
003BC9 19          10721                   DB	19H
003BCA 4E 6F 74 20 10722                   DB	"Not in a "
       69 6E 20 61 
       20          
003BD3 1A          10723                   DB	1AH
003BD4 20 6C 6F 6F 10724                   DB	" loop"
       70          
003BD9 1B          10725                   DB	1BH
003BDA 20 6E 6F 74 10726                   DB	" not "
       20          
003BDF             10727   KEYWDL:         EQU	$-KEYWDS
003BDF FF FF       10728                   DW	-1
003BE1             10729   ;
003BE1             10730   ;LIST OF IMMEDIATE MODE COMMANDS:
003BE1             10731   ;
003BE1 80          10732   COMNDS:         DB	80H
003BE2 41 55 54 4F 10733                   DB	"AUTO"
003BE6 81          10734                   DB	81H
003BE7 44 45 4C 45 10735                   DB	"DELETE"
       54 45       
003BED 82          10736                   DB	82H
003BEE 4C 49 53 54 10737                   DB	"LIST"
003BF2 83          10738                   DB	83H
003BF3 4C 4F 41 44 10739                   DB	"LOAD"
003BF7 84          10740                   DB	84H
003BF8 4E 45 57 20 10741                   DB	"NEW "
003BFC 85          10742                   DB	85H
003BFD 4F 4C 44 20 10743                   DB	"OLD "
003C01 86          10744                   DB	86H
003C02 52 45 4E 55 10745                   DB	"RENUMBER"
       4D 42 45 52 
003C0A 87          10746                   DB	87H
003C0B 53 41 56 45 10747                   DB	"SAVE"
003C0F FF FF       10748                   DW	-1
003C11             10749   ;
003C11             10750   ;IMMEDIATE MODE COMMANDS:
003C11             10751   ;
003C11 E3 3E       10752   CMDTABmn:         DW	AUTO
003C13 86 3D       10753                   DW	DELETE
003C15 AE 3D       10754                   DW	LIST
003C17 02 3F       10755                   DW	LOAD
003C19 FD 3E       10756                   DW	NEW
003C1B 10 3F       10757                   DW	OLD
003C1D 33 3E       10758                   DW	RENUM
003C1F 29 3F       10759                   DW	SAVE
003C21             10760   ;
003C21             10761   ;ERROR MESSAGES:
003C21             10762   ;
003C21 17          10763   ERRWDS:         DB	17H
003C22 72 6F 6F 6D 10764                   DB	"room"
003C26 00          10765                   DB	0
003C27 16          10766                   DB	16H
003C28 14          10767                   DB	14H
003C29 00 00       10768                   DW	0
003C2B 4D 75 6C 74 10769                   DB	"Multiple label"
       69 70 6C 65 
       20 6C 61 62 
       65 6C       
003C39 00          10770                   DB	0
003C3A 4D 69 73 74 10771                   DB	"Mistake"
       61 6B 65    
003C41 00          10772                   DB	0
003C42 11          10773                   DB	11H
003C43 2C          10774                   DB	','
003C44 00          10775                   DB	0
003C45 54 79 70 65 10776                   DB	"Type mismatch"
       20 6D 69 73 
       6D 61 74 63 
       68          
003C52 00          10777                   DB	0
003C53 19          10778                   DB	19H
003C54 A4          10779                   DB	TFN
003C55 00 00       10780                   DW	0
003C57 11          10781                   DB	11H
003C58 22          10782                   DB	'"'
003C59 00          10783                   DB	0
003C5A 13          10784                   DB	13H
003C5B DE          10785                   DB	TDIM
003C5C 00          10786                   DB	0
003C5D DE          10787                   DB	TDIM
003C5E 18          10788                   DB	18H
003C5F 00          10789                   DB	0
003C60 19          10790                   DB	19H
003C61 A4          10791                   DB	TFN
003C62 20 6F 72 20 10792                   DB	" or "
003C66 F2          10793                   DB	TPROC
003C67 00          10794                   DB	0
003C68 19          10795                   DB	19H
003C69 F2          10796                   DB	TPROC
003C6A 00          10797                   DB	0
003C6B 13          10798                   DB	13H
003C6C 75 73 65 20 10799                   DB	"use of array"
       6F 66 20 61 
       72 72 61 79 
003C78 00          10800                   DB	0
003C79 13          10801                   DB	13H
003C7A 73 75 62 73 10802                   DB	"subscript"
       63 72 69 70 
       74          
003C83 00          10803                   DB	0
003C84 53 79 6E 74 10804                   DB	"Syntax error"
       61 78 20 65 
       72 72 6F 72 
003C90 00          10805                   DB	0
003C91 45 73 63 61 10806                   DB	"Escape"
       70 65       
003C97 00          10807                   DB	0
003C98 44 69 76 69 10808                   DB	"Division by zero"
       73 69 6F 6E 
       20 62 79 20 
       7A 65 72 6F 
003CA8 00          10809                   DB	0
003CA9 53 74 72 69 10810                   DB	"String too long"
       6E 67 20 74 
       6F 6F 20 6C 
       6F 6E 67    
003CB8 00          10811                   DB	0
003CB9 4E 75 6D 62 10812                   DB	"Number too big"
       65 72 20 74 
       6F 6F 20 62 
       69 67       
003CC7 00          10813                   DB	0
003CC8 2D 76 65 20 10814                   DB	"-ve root"
       72 6F 6F 74 
003CD0 00          10815                   DB	0
003CD1 4C 6F 67    10816                   DB	"Log"
003CD4 14          10817                   DB	14H
003CD5 00          10818                   DB	0
003CD6 41 63 63 75 10819                   DB	"Accuracy lost"
       72 61 63 79 
       20 6C 6F 73 
       74          
003CE3 00          10820                   DB	0
003CE4 45 78 70 6F 10821                   DB	"Exponent"
       6E 65 6E 74 
003CEC 14          10822                   DB	14H
003CED 00 00       10823                   DW	0
003CEF 12          10824                   DB	12H
003CF0 15          10825                   DB	15H
003CF1 00          10826                   DB	0
003CF2 11          10827                   DB	11H
003CF3 29          10828                   DB	')'
003CF4 00          10829                   DB	0
003CF5 13          10830                   DB	13H
003CF6 68 65 78 20 10831                   DB	"hex or binary"
       6F 72 20 62 
       69 6E 61 72 
       79          
003D03 00          10832                   DB	0
003D04 12          10833                   DB	12H
003D05 A4          10834                   DB	TFN
003D06 2F          10835                   DB	'/'
003D07 F2          10836                   DB	TPROC
003D08 00          10837                   DB	0
003D09 13          10838                   DB	13H
003D0A 63 61 6C 6C 10839                   DB	"call"
003D0E 00          10840                   DB	0
003D0F 13          10841                   DB	13H
003D10 61 72 67 75 10842                   DB	"arguments"
       6D 65 6E 74 
       73          
003D19 00          10843                   DB	0
003D1A 19          10844                   DB	19H
003D1B E3          10845                   DB	TFOR
003D1C 1A          10846                   DB	1AH
003D1D 00          10847                   DB	0
003D1E 43 61 6E 27 10848                   DB	"Can't match "
       74 20 6D 61 
       74 63 68 20 
003D2A E3          10849                   DB	TFOR
003D2B 00          10850                   DB	0
003D2C 13          10851                   DB	13H
003D2D E3          10852                   DB	TFOR
003D2E 20          10853                   DB	' '
003D2F 15          10854                   DB	15H
003D30 00 00       10855                   DW	0
003D32 11          10856                   DB	11H
003D33 B8          10857                   DB	TTO
003D34 00 00       10858                   DW	0
003D36 17          10859                   DB	17H
003D37 E4          10860                   DB	TGOSUB
003D38 00          10861                   DB	0
003D39 EE          10862                   DB	TON
003D3A 20 73 79 6E 10863                   DB	" syntax"
       74 61 78    
003D41 00          10864                   DB	0
003D42 EE          10865                   DB	TON
003D43 14          10866                   DB	14H
003D44 00          10867                   DB	0
003D45 12          10868                   DB	12H
003D46 6C 69 6E 65 10869                   DB	"line"
003D4A 00          10870                   DB	0
003D4B 16          10871                   DB	16H
003D4C 20          10872                   DB	' '
003D4D DC          10873                   DB	TDATA
003D4E 00          10874                   DB	0
003D4F 19          10875                   DB	19H
003D50 F5          10876                   DB	TREPEAT
003D51 1A          10877                   DB	1AH
003D52 00          10878                   DB	0
003D53 13          10879                   DB	13H
003D54 10          10880                   DB	TEXIT
003D55 00          10881                   DB	0
003D56 11          10882                   DB	11H
003D57 23          10883                   DB	'#'
003D58 00          10884                   DB	0
003D59 19          10885                   DB	19H		;46 Not in a WHILE loop
003D5A C7          10886                   DB	TWHILE
003D5B 1A          10887                   DB	1AH
003D5C 00          10888                   DB	0
003D5D 11          10889                   DB	11H		;47 Missing ENDCASE
003D5E CB          10890                   DB	TENDCASE
003D5F 00          10891                   DB	0
003D60 CA          10892                   DB	TOF		;48 OF not last
003D61 1B          10893                   DB	1BH
003D62 6C 61 73 74 10894                   DB	"last"
003D66 00          10895                   DB	0
003D67 11          10896                   DB	11H		;49 Missing ENDIF
003D68 CD          10897                   DB	TENDIF
003D69 00          10898                   DB	0
003D6A 00 00       10899                   DW	0
003D6C 00          10900                   DB	0
003D6D EE          10901                   DB	TON		;53 ON ERROR not LOCAL
003D6E 20          10902                   DB	' '
003D6F 85          10903                   DB	TERROR
003D70 1B          10904                   DB	1BH
003D71 EA          10905                   DB	TLOCAL
003D72 00          10906                   DB	0
003D73 DC          10907                   DB	TDATA		;54 DATA not LOCAL
003D74 1B          10908                   DB	1BH
003D75 EA          10909                   DB	TLOCAL
003D76 00          10910                   DB	0
003D77             10911   ;
003D77             10912   ;Indent tokens (first four needn't be at start of line):
003D77             10913   ;
003D77 E3          10914   TOKADD:         DB	TFOR
003D78 F5          10915                   DB	TREPEAT
003D79 C7          10916                   DB	TWHILE
003D7A C8          10917                   DB	TCASE
003D7B 8B          10918                   DB	TELSE
003D7C C9          10919                   DB	TWHEN
003D7D CC          10920                   DB	TOTHERWISE
003D7E             10921   LENADD:         EQU	$-TOKADD
003D7E             10922   ;
003D7E             10923   ;Outdent tokens (first three needn't be at start of line):
003D7E             10924   ;
003D7E ED          10925   TOKSUB:         DB	TNEXT
003D7F FD          10926                   DB	TUNTIL
003D80 CE          10927                   DB	TENDWHILE
003D81 CB          10928                   DB	TENDCASE
003D82 CD          10929                   DB	TENDIF
003D83 8B          10930                   DB	TELSE
003D84 C9          10931                   DB	TWHEN
003D85 CC          10932                   DB	TOTHERWISE
003D86             10933   LENSUB:         EQU	$-TOKSUB
003D86             10934   ;
003D86             10935   ;COMMANDS:
003D86             10936   ;
003D86             10937   ;DELETE line,line
003D86             10938   ;
003D86 CD D7 43    10939   DELETE:         CALL	DLPAIR
003D89 7E          10940   DELET1:         LD	A,(HL)
003D8A B7          10941                   OR	A
003D8B 28 79       10942                   JR	Z,WARMNC
003D8D 23          10943                   INC	HL
003D8E 5E          10944                   LD	E,(HL)
003D8F 23          10945                   INC	HL
003D90 56          10946                   LD	D,(HL)
003D91 2B          10947                   DEC	HL
003D92 2B          10948                   DEC	HL
003D93 EB          10949                   EX	DE,HL
003D94 37          10950                   SCF
003D95 ED 42       10951                   SBC	HL,BC
003D97 EB          10952                   EX	DE,HL
003D98 30 6C       10953                   JR	NC,WARMNC
003D9A C5          10954                   PUSH	BC
003D9B CD E9 3F    10955                   CALL	DEL
003D9E C1          10956                   POP	BC
003D9F 18 E8       10957                   JR	DELET1
003DA1             10958   ;
003DA1             10959   ;LISTO expr
003DA1             10960   ;
003DA1 FD 23       10961   LISTO:          INC	IY		;SKIP "O"
003DA3 CD 33 18    10962                   CALL	EXPRI
003DA6 D9          10963                   EXX
003DA7 7D          10964                   LD	A,L
003DA8 32 FE 54    10965                   LD	(LISTON),A
003DAB C3 B0 37    10966                   JP	CLOOP
003DAE             10967   ;
003DAE             10968   ;LIST
003DAE             10969   ;LIST line
003DAE             10970   ;LIST line,line [IF string]
003DAE             10971   ;LIST ,line
003DAE             10972   ;LIST line,
003DAE             10973   ;
003DAE FE 4F       10974   LIST:           CP	'O'
003DB0 28 EF       10975                   JR	Z,LISTO
003DB2 0E 01       10976                   LD	C,1
003DB4 11 00 53    10977                   LD	DE,BUFFER
003DB7 CD 18 44    10978                   CALL	LEXAN2
003DBA 12          10979                   LD	(DE),A
003DBB FD 21 00 53 10980                   LD	IY,BUFFER
003DBF CD D7 43    10981                   CALL	DLPAIR
003DC2 CD 0B 45    10982                   CALL	NXT
003DC5 FE E7       10983                   CP	TIF		;IF CLAUSE ?
003DC7 3E 00       10984                   LD	A,0		;INIT IF-CLAUSE LENGTH
003DC9 20 15       10985                   JR	NZ,LISTB
003DCB FD 23       10986                   INC	IY		;SKIP IF
003DCD CD 0B 45    10987                   CALL	NXT		;SKIP SPACES (IF ANY)
003DD0 EB          10988                   EX	DE,HL
003DD1 FD E5       10989                   PUSH	IY
003DD3 E1          10990                   POP	HL		;HL ADDRESSES IF CLAUSE
003DD4 3E 0D       10991                   LD	A,CR
003DD6 C5          10992                   PUSH	BC
003DD7 01 00 01    10993                   LD	BC,256
003DDA ED B1       10994                   CPIR			;LOCATE CR
003DDC 79          10995                   LD	A,C
003DDD 2F          10996                   CPL			;A = SUBSTRING LENGTH
003DDE C1          10997                   POP	BC
003DDF EB          10998                   EX	DE,HL
003DE0 5F          10999   LISTB:          LD	E,A		;IF-CLAUSE LENGTH
003DE1 78          11000                   LD	A,B
003DE2 B1          11001                   OR	C
003DE3 20 01       11002                   JR	NZ,LISTA
003DE5 0B          11003                   DEC	BC
003DE6 D9          11004   LISTA:          EXX
003DE7 DD 21 FE 54 11005                   LD	IX,LISTON
003DEB 1E 00       11006                   LD	E,0		;INDENTATION COUNT
003DED D9          11007                   EXX
003DEE 3E 14       11008                   LD	A,20
003DF0             11009   ;
003DF0 C5          11010   LISTC:          PUSH	BC		;SAVE HIGH LINE NUMBER
003DF1 D5          11011                   PUSH	DE		;SAVE IF-CLAUSE LENGTH
003DF2 E5          11012                   PUSH	HL		;SAVE PROGRAM POINTER
003DF3 08          11013                   EX	AF,AF'
003DF4 7E          11014                   LD	A,(HL)
003DF5 B7          11015                   OR	A
003DF6 28 0E       11016                   JR	Z,WARMNC
003DF8             11017   ;
003DF8             11018   ;CHECK IF PAST TERMINATING LINE NUMBER:
003DF8             11019   ;
003DF8 7B          11020                   LD	A,E		;A = IF-CLAUSE LENGTH
003DF9 23          11021                   INC	HL
003DFA 5E          11022                   LD	E,(HL)
003DFB 23          11023                   INC	HL
003DFC 56          11024                   LD	D,(HL)		;DE = LINE NUMBER
003DFD 2B          11025                   DEC	HL
003DFE 2B          11026                   DEC	HL
003DFF D5          11027                   PUSH	DE		;SAVE LINE NUMBER
003E00 EB          11028                   EX	DE,HL
003E01 37          11029                   SCF
003E02 ED 42       11030                   SBC	HL,BC
003E04 EB          11031                   EX	DE,HL
003E05 D1          11032                   POP	DE		;RESTORE LINE NUMBER
003E06 D2 AF 37    11033   WARMNC:         JP	NC,WARM
003E09 4E          11034                   LD	C,(HL)		;C = LINE LENGTH + 4
003E0A 47          11035                   LD	B,A		;B = IF-CLAUSE LENGTH
003E0B             11036   ;
003E0B             11037   ;CHECK FOR IF CLAUSE:
003E0B             11038   ;
003E0B 23          11039                   INC	HL
003E0C 23          11040                   INC	HL
003E0D 23          11041                   INC	HL		;HL ADDRESSES LINE TEXT
003E0E 0D          11042                   DEC	C
003E0F 0D          11043                   DEC	C
003E10 0D          11044                   DEC	C
003E11 0D          11045                   DEC	C		;C = LINE LENGTH
003E12 D5          11046                   PUSH	DE		;SAVE LINE NUMBER
003E13 E5          11047                   PUSH	HL		;SAVE LINE ADDRESS
003E14 AF          11048                   XOR	A		;A <- 0
003E15 B8          11049                   CP	B		;WAS THERE AN IF-CLAUSE
003E16 FD E5       11050                   PUSH	IY
003E18 D1          11051                   POP	DE		;DE ADDRESSES IF-CLAUSE
003E19 C4 F2 1D    11052                   CALL	NZ,SEARCH	;SEARCH FOR IF CLAUSE
003E1C E1          11053                   POP	HL		;RESTORE LINE ADDRESS
003E1D D1          11054                   POP	DE		;RESTORE LINE NUMBER
003E1E FD E5       11055                   PUSH	IY
003E20 CC 5D 40    11056                   CALL	Z,LISTIT	;LIST IF MATCH
003E23 FD E1       11057                   POP	IY
003E25             11058   ;
003E25 08          11059                   EX	AF,AF'
003E26 3D          11060                   DEC	A
003E27 CD 1A 12    11061                   CALL	LTRAP
003E2A E1          11062                   POP	HL		;RESTORE POINTER
003E2B 5E          11063                   LD	E,(HL)
003E2C 16 00       11064                   LD	D,0
003E2E 19          11065                   ADD	HL,DE		;ADDRESS NEXT LINE
003E2F D1          11066                   POP	DE		;RESTORE IF-CLAUSE LEN
003E30 C1          11067                   POP	BC		;RESTORE HI LINE NUMBER
003E31 18 BD       11068                   JR	LISTC
003E33             11069   ;
003E33             11070   ;RENUMBER
003E33             11071   ;RENUMBER start
003E33             11072   ;RENUMBER start,increment
003E33             11073   ;RENUMBER ,increment
003E33             11074   ;
003E33 CD 43 40    11075   RENUM:          CALL	CLEAR		;USES DYNAMIC AREA
003E36 CD B4 43    11076                   CALL	PAIR		;LOAD HL,BC
003E39 D9          11077                   EXX
003E3A 2A DC 54    11078                   LD	HL,(PAGE_)
003E3D ED 5B DE 54 11079                   LD	DE,(LOMEM)
003E41 7E          11080   RENUM1:         LD	A,(HL)		;BUILD TABLE
003E42 B7          11081                   OR	A
003E43 28 28       11082                   JR	Z,RENUM2
003E45 23          11083                   INC	HL
003E46 4E          11084                   LD	C,(HL)		;OLD LINE NUMBER
003E47 23          11085                   INC	HL
003E48 46          11086                   LD	B,(HL)
003E49 EB          11087                   EX	DE,HL
003E4A 71          11088                   LD	(HL),C
003E4B 23          11089                   INC	HL
003E4C 70          11090                   LD	(HL),B
003E4D 23          11091                   INC	HL
003E4E D9          11092                   EXX
003E4F E5          11093                   PUSH	HL
003E50 09          11094                   ADD	HL,BC		;ADD INCREMENT
003E51 DA AF 43    11095                   JP	C,TOOBIGmn	;"Too big"
003E54 D9          11096                   EXX
003E55 C1          11097                   POP	BC
003E56 71          11098                   LD	(HL),C
003E57 23          11099                   INC	HL
003E58 70          11100                   LD	(HL),B
003E59 23          11101                   INC	HL
003E5A EB          11102                   EX	DE,HL
003E5B 2B          11103                   DEC	HL
003E5C 2B          11104                   DEC	HL
003E5D AF          11105                   XOR	A
003E5E 47          11106                   LD	B,A
003E5F 4E          11107                   LD	C,(HL)
003E60 09          11108                   ADD	HL,BC		;NEXT LINE
003E61 EB          11109                   EX	DE,HL
003E62 E5          11110                   PUSH	HL
003E63 24          11111                   INC	H
003E64 ED 72       11112                   SBC	HL,SP
003E66 E1          11113                   POP	HL
003E67 EB          11114                   EX	DE,HL
003E68 38 D7       11115                   JR	C,RENUM1	;CONTINUE
003E6A C3 44 3F    11116                   JP	ERROR_		;'No room' (A = 0)
003E6D             11117   ;
003E6D EB          11118   RENUM2:         EX	DE,HL
003E6E 36 FF       11119                   LD	(HL),-1
003E70 23          11120                   INC	HL
003E71 36 FF       11121                   LD	(HL),-1
003E73 ED 5B DE 54 11122                   LD	DE,(LOMEM)
003E77 D9          11123                   EXX
003E78 2A DC 54    11124                   LD	HL,(PAGE_)
003E7B 4E          11125   RENUM3:         LD	C,(HL)
003E7C 79          11126                   LD	A,C
003E7D B7          11127                   OR	A
003E7E 28 86       11128                   JR	Z,WARMNC
003E80 D9          11129                   EXX
003E81 EB          11130                   EX	DE,HL
003E82 23          11131                   INC	HL
003E83 23          11132                   INC	HL
003E84 5E          11133                   LD	E,(HL)
003E85 23          11134                   INC	HL
003E86 56          11135                   LD	D,(HL)
003E87 23          11136                   INC	HL
003E88 D5          11137                   PUSH	DE
003E89 EB          11138                   EX	DE,HL
003E8A D9          11139                   EXX
003E8B D1          11140                   POP	DE
003E8C 23          11141                   INC	HL
003E8D 73          11142                   LD	(HL),E		;NEW LINE NUMBER
003E8E 23          11143                   INC	HL
003E8F 72          11144                   LD	(HL),D
003E90 23          11145                   INC	HL
003E91 0D          11146                   DEC	C
003E92 0D          11147                   DEC	C
003E93 0D          11148                   DEC	C
003E94 06 00       11149                   LD	B,0
003E96 3E 8D       11150   RENUM7:         LD	A,TLINO
003E98 ED B1       11151                   CPIR			;SEARCH FOR LINE NUMBER
003E9A 20 DF       11152                   JR	NZ,RENUM3
003E9C C5          11153                   PUSH	BC
003E9D E5          11154                   PUSH	HL
003E9E E5          11155                   PUSH	HL
003E9F FD E1       11156                   POP	IY
003EA1 D9          11157                   EXX
003EA2 E5          11158                   PUSH	HL
003EA3 CD 60 1F    11159                   CALL	DECODE		;DECODE LINE NUMBER
003EA6 E1          11160                   POP	HL
003EA7 D9          11161                   EXX
003EA8 44          11162                   LD	B,H
003EA9 4D          11163                   LD	C,L
003EAA 2A DE 54    11164                   LD	HL,(LOMEM)
003EAD 5E          11165   RENUM4:         LD	E,(HL)		;CROSS-REFERENCE TABLE
003EAE 23          11166                   INC	HL
003EAF 56          11167                   LD	D,(HL)
003EB0 23          11168                   INC	HL
003EB1 EB          11169                   EX	DE,HL
003EB2 B7          11170                   OR	A		;CLEAR CARRY
003EB3 ED 42       11171                   SBC	HL,BC
003EB5 EB          11172                   EX	DE,HL
003EB6 5E          11173                   LD	E,(HL)		;NEW NUMBER
003EB7 23          11174                   INC	HL
003EB8 56          11175                   LD	D,(HL)
003EB9 23          11176                   INC	HL
003EBA 38 F1       11177                   JR	C,RENUM4
003EBC EB          11178                   EX	DE,HL
003EBD 28 1A       11179                   JR	Z,RENUM5	;FOUND
003EBF CD FA 44    11180                   CALL	TELL
003EC2 46 61 69 6C 11181                   DB	"Failed at "
       65 64 20 61 
       74 20       
003ECC 00          11182                   DB	0
003ECD D9          11183                   EXX
003ECE E5          11184                   PUSH	HL
003ECF D9          11185                   EXX
003ED0 E1          11186                   POP	HL
003ED1 CD 92 41    11187                   CALL	PBCDL
003ED4 CD FB 40    11188                   CALL	CRLF
003ED7 18 06       11189                   JR	RENUM6
003ED9 D1          11190   RENUM5:         POP	DE
003EDA D5          11191                   PUSH	DE
003EDB 1B          11192                   DEC	DE
003EDC CD BF 44    11193                   CALL	ENCODE		;RE-WRITE NUMBER
003EDF E1          11194   RENUM6:         POP	HL
003EE0 C1          11195                   POP	BC
003EE1 18 B3       11196                   JR	RENUM7
003EE3             11197   ;
003EE3             11198   ;AUTO
003EE3             11199   ;AUTO start,increment
003EE3             11200   ;AUTO start
003EE3             11201   ;AUTO ,increment
003EE3             11202   ;
003EE3 CD B4 43    11203   AUTO:           CALL	PAIR
003EE6 22 E8 54    11204                   LD	(AUTONO),HL
003EE9 79          11205                   LD	A,C
003EEA 32 FF 54    11206                   LD	(INCREM),A
003EED 18 37       11207                   JR	CLOOP0
003EEF             11208   ;
003EEF             11209   ;BAD
003EEF             11210   ;NEW
003EEF             11211   ;
003EEF CD FA 44    11212   BAD:            CALL	TELL		;"Bad program'
003EF2 13          11213                   DB	13H
003EF3 70 72 6F 67 11214                   DB	"program"
       72 61 6D    
003EFA 0D          11215                   DB	CR
003EFB 0A          11216                   DB	LF
003EFC 00          11217                   DB	0
003EFD CD 3E 40    11218   NEW:            CALL	NEWIT
003F00 18 24       11219                   JR	CLOOP0
003F02             11220   ;
003F02             11221   ;LOAD filename
003F02             11222   ;
003F02 CD 3C 18    11223   LOAD:           CALL	EXPRS		;GET FILENAME
003F05 3E 0D       11224                   LD	A,CR
003F07 12          11225                   LD	(DE),A
003F08 CD 00 40    11226                   CALL	LOAD0
003F0B CD 43 40    11227                   CALL	CLEAR
003F0E 18 31       11228                   JR	WARM0
003F10             11229   ;
003F10             11230   ;OLD
003F10             11231   ;
003F10 2A DC 54    11232   OLD:            LD	HL,(PAGE_)
003F13 E5          11233                   PUSH	HL
003F14 23          11234                   INC	HL
003F15 23          11235                   INC	HL
003F16 23          11236                   INC	HL
003F17 01 FC 00    11237                   LD	BC,252
003F1A 3E 0D       11238                   LD	A,CR
003F1C ED B1       11239                   CPIR
003F1E 20 CF       11240                   JR	NZ,BAD
003F20 7D          11241                   LD	A,L
003F21 E1          11242                   POP	HL
003F22 77          11243                   LD	(HL),A
003F23 CD 1A 40    11244                   CALL	CLEAN
003F26 C3 B0 37    11245   CLOOP0:         JP	CLOOP
003F29             11246   ;
003F29             11247   ;SAVE filename
003F29             11248   ;
003F29 CD 3C 18    11249   SAVE:           CALL	EXPRS		;FILENAME
003F2C 3E 0D       11250                   LD	A,CR
003F2E 12          11251                   LD	(DE),A
003F2F ED 5B DC 54 11252                   LD	DE,(PAGE_)
003F33 CD 25 40    11253                   CALL	GETTOP
003F36 B7          11254                   OR	A
003F37 ED 52       11255                   SBC	HL,DE
003F39 44          11256                   LD	B,H		;LENGTH OF PROGRAM
003F3A 4D          11257                   LD	C,L
003F3B 21 00 52    11258                   LD	HL,ACCS
003F3E CD A6 13    11259                   CALL	OSSAVE
003F41 C3 AF 37    11260   WARM0:          JP	WARM
003F44             11261   ;
003F44             11262   ;ERROR
003F44             11263   ;N.B. CARE NEEDED BECAUSE SP MAY NOT BE VALID (E.G. ABOVE HIMEM)
003F44             11264   ;
003F44 21 21 3C    11265   ERROR_:         LD	HL,ERRWDS
003F47 4F          11266                   LD	C,A
003F48 B7          11267                   OR	A
003F49 28 0C       11268                   JR	Z,ERROR1
003F4B 47          11269                   LD	B,A		;ERROR NUMBER
003F4C AF          11270                   XOR	A
003F4D BE          11271   ERROR0:         CP	(HL)
003F4E 23          11272                   INC	HL
003F4F 20 FC       11273                   JR	NZ,ERROR0
003F51 10 FA       11274                   DJNZ	ERROR0
003F53 18 02       11275                   JR	ERROR1		;MUST NOT PUSH HL HERE
003F55             11276   ;
003F55 E1          11277   EXTERR:         POP	HL
003F56 4F          11278                   LD	C,A
003F57 22 EE 54    11279   ERROR1:         LD	(ERRTXT),HL
003F5A 2A EC 54    11280                   LD	HL,(ONERSP)
003F5D 7C          11281                   LD	A,H
003F5E B5          11282                   OR	L
003F5F ED 7B E2 54 11283                   LD	SP,(HIMEM)	;MUST SET SP BEFORE 'CALL'
003F63 28 01       11284                   JR	Z,ERROR4
003F65 F9          11285                   LD	SP,HL
003F66 79          11286   ERROR4:         LD	A,C		;ERROR NUMBER
003F67 CD 5B 41    11287                   CALL	SETLIN		;SP IS SET NOW
003F6A 32 FD 54    11288                   LD	(ERR),A
003F6D 22 F2 54    11289                   LD	(ERL),HL
003F70 B7          11290                   OR	A
003F71 28 0B       11291                   JR	Z,ERROR2	;'FATAL' ERROR
003F73 2A EA 54    11292                   LD	HL,(ERRTRP)
003F76 7C          11293                   LD	A,H
003F77 B5          11294                   OR	L
003F78 E5          11295                   PUSH	HL
003F79 FD E1       11296                   POP	IY
003F7B C2 99 24    11297                   JP	NZ,XEQ		;ERROR TRAPPED
003F7E ED 7B E2 54 11298   ERROR2:         LD	SP,(HIMEM)
003F82 ED 62       11299                   SBC	HL,HL
003F84 22 E8 54    11300                   LD	(AUTONO),HL
003F87 22 E6 54    11301                   LD	(TRACEN),HL	;CANCEL TRACE
003F8A CD 27 12    11302                   CALL	RESET		;RESET OPSYS
003F8D CD FB 40    11303                   CALL	CRLF
003F90 CD E5 44    11304                   CALL	REPORT		;MESSAGE
003F93 2A F2 54    11305                   LD	HL,(ERL)
003F96 CD 82 41    11306                   CALL	SAYLN
003F99 1E 00       11307                   LD	E,0
003F9B DC 37 12    11308                   CALL	C,OSSHUT	;CLOSE ALL FILES
003F9E CD FB 40    11309                   CALL	CRLF
003FA1 18 83       11310                   JR	CLOOP0
003FA3             11311   ;
003FA3             11312   ;SUBROUTINES:
003FA3             11313   ;
003FA3             11314   ;
003FA3             11315   ;LEX - SEARCH FOR KEYWORDS
003FA3             11316   ;   Inputs: HL = start of keyword table
003FA3             11317   ;           IY = start of match text
003FA3             11318   ;  Outputs: If found, Z-flag set, A=token.
003FA3             11319   ;           If not found, Z-flag reset, A=(IY).
003FA3             11320   ;           IY updated (if NZ, IY unchanged).
003FA3             11321   ; Destroys: A,B,H,L,IY,F
003FA3             11322   ;
003FA3 21 84 38    11323   LEX:            LD	HL,KEYWDS
003FA6 FD 7E 00    11324   LEX0:           LD	A,(IY)
003FA9 46          11325                   LD	B,(HL)
003FAA 23          11326                   INC	HL
003FAB BE          11327                   CP	(HL)
003FAC 28 0A       11328                   JR	Z,LEX2
003FAE D8          11329                   RET	C		;FAIL EXIT
003FAF 23          11330   LEX1:           INC	HL
003FB0 7E          11331                   LD	A,(HL)
003FB1 FE A0       11332                   CP	160
003FB3 EA AF 3F    11333                   JP	PE,LEX1
003FB6 18 EE       11334                   JR	LEX0
003FB8             11335   ;
003FB8 FD E5       11336   LEX2:           PUSH	IY		;SAVE POINTER
003FBA 23          11337   LEX3:           INC	HL
003FBB 7E          11338                   LD	A,(HL)
003FBC FE A0       11339                   CP	160
003FBE E2 E5 3F    11340                   JP	PO,LEX6		;FOUND
003FC1 FD 23       11341                   INC	IY
003FC3 FD 7E 00    11342                   LD	A,(IY)
003FC6 BE          11343                   CP	(HL)
003FC7 20 05       11344                   JR	NZ,LEX7
003FC9 FE A1       11345                   CP	161
003FCB EA BA 3F    11346                   JP	PE,LEX3
003FCE FD 7E 00    11347   LEX7:           LD	A,(IY)
003FD1 FE 2E       11348                   CP	'.'
003FD3 28 10       11349                   JR	Z,LEX6		;FOUND (ABBREV.)
003FD5 CD FC 43    11350                   CALL	RANGE1
003FD8 38 04       11351                   JR	C,LEX5
003FDA FD E1       11352   LEX4:           POP	IY		;RESTORE POINTER
003FDC 18 D1       11353                   JR	LEX1
003FDE             11354   ;
003FDE 7E          11355   LEX5:           LD	A,(HL)
003FDF FE 20       11356                   CP	' '
003FE1 20 F7       11357                   JR	NZ,LEX4
003FE3 FD 2B       11358                   DEC	IY
003FE5 F1          11359   LEX6:           POP	AF
003FE6 AF          11360                   XOR	A
003FE7 78          11361                   LD	A,B
003FE8 C9          11362                   RET
003FE9             11363   ;
003FE9             11364   ;DEL - DELETE A PROGRAM LINE.
003FE9             11365   ;   Inputs: HL addresses program line.
003FE9             11366   ; Destroys: B,C,F
003FE9             11367   ;
003FE9 D5          11368   DEL:            PUSH	DE
003FEA E5          11369                   PUSH	HL
003FEB E5          11370                   PUSH	HL
003FEC 06 00       11371                   LD	B,0
003FEE 4E          11372                   LD	C,(HL)
003FEF 09          11373                   ADD	HL,BC
003FF0 E5          11374                   PUSH	HL
003FF1 EB          11375                   EX	DE,HL
003FF2 CD 25 40    11376                   CALL	GETTOP
003FF5 ED 52       11377                   SBC	HL,DE
003FF7 44          11378                   LD	B,H
003FF8 4D          11379                   LD	C,L
003FF9 E1          11380                   POP	HL
003FFA D1          11381                   POP	DE
003FFB ED B0       11382                   LDIR			;DELETE LINE
003FFD E1          11383                   POP	HL
003FFE D1          11384                   POP	DE
003FFF C9          11385                   RET
004000             11386   ;
004000             11387   ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
004000             11388   ;   Inputs: Filename in ACCS (term CR)
004000             11389   ; Destroys: A,B,C,D,E,H,L,F
004000             11390   ;
004000             11391   ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
004000             11392   ; AND WRITE FF FF.
004000             11393   ; Destroys: A,B,C,H,L,F
004000             11394   ;
004000 ED 5B DC 54 11395   LOAD0:          LD	DE,(PAGE_)
004004 21 00 FF    11396                   LD	HL,-256
004007 39          11397                   ADD	HL,SP
004008 ED 52       11398                   SBC	HL,DE		;FIND AVAILABLE SPACE
00400A 44          11399                   LD	B,H
00400B 4D          11400                   LD	C,L
00400C 21 00 52    11401                   LD	HL,ACCS
00400F CD B0 12    11402                   CALL	OSLOAD		;LOAD
004012 D4 3E 40    11403                   CALL	NC,NEWIT
004015 3E 00       11404                   LD	A,0
004017 D2 44 3F    11405                   JP	NC,ERROR_	;"No room"
00401A CD 25 40    11406   CLEAN:          CALL	GETTOP
00401D 2B          11407                   DEC	HL
00401E 36 FF       11408                   LD	(HL),-1		;WRITE &FFFF
004020 2B          11409                   DEC	HL
004021 36 FF       11410                   LD	(HL),-1
004023 18 1E       11411                   JR	CLEAR
004025             11412   ;
004025 2A DC 54    11413   GETTOP:         LD	HL,(PAGE_)
004028 06 00       11414                   LD	B,0
00402A 3E 0D       11415                   LD	A,CR
00402C 4E          11416   GETOP1:         LD	C,(HL)
00402D 0C          11417                   INC	C
00402E 0D          11418                   DEC	C
00402F 28 09       11419                   JR	Z,GETOP2
004031 09          11420                   ADD	HL,BC
004032 2B          11421                   DEC	HL
004033 BE          11422                   CP	(HL)
004034 23          11423                   INC	HL
004035 28 F5       11424                   JR	Z,GETOP1
004037 C3 EF 3E    11425                   JP	BAD
00403A 23          11426   GETOP2:         INC	HL		;N.B. CALLED FROM NEWIT
00403B 23          11427                   INC	HL
00403C 23          11428                   INC	HL
00403D C9          11429                   RET
00403E             11430   ;
00403E             11431   ;NEWIT - NEW PROGRAM THEN CLEAR
00403E             11432   ;   Destroys: H,L
00403E             11433   ;
00403E             11434   ;CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
00403E             11435   ; FUNCTION AND PROCEDURE POINTERS.
00403E             11436   ;   Destroys: Nothing
00403E             11437   ;
00403E 2A DC 54    11438   NEWIT:          LD	HL,(PAGE_)
004041 36 00       11439                   LD	(HL),0
004043 E5          11440   CLEAR:          PUSH	HL
004044 C5          11441                   PUSH	BC
004045 F5          11442                   PUSH	AF
004046 CD 25 40    11443                   CALL	GETTOP
004049 22 DE 54    11444                   LD	(LOMEM),HL
00404C 22 E0 54    11445                   LD	(FREE),HL
00404F 21 6C 54    11446                   LD	HL,DYNVAR
004052             11447                   ; LD	B,2*(54+2)
004052 06 70       11448                   LD	B,54+2*2
004054 36 00       11449   CLEAR1:         LD	(HL),0
004056 23          11450                   INC	HL
004057 10 FB       11451                   DJNZ	CLEAR1
004059 F1          11452                   POP	AF
00405A C1          11453                   POP	BC
00405B E1          11454                   POP	HL
00405C C9          11455                   RET
00405D             11456   ;
00405D             11457   ;LISTIT - LIST A PROGRAM LINE.
00405D             11458   ;    Inputs: HL addresses line
00405D             11459   ;            DE = line number (binary)
00405D             11460   ;	     E' = indentation count
00405D             11461   ;            IX addresses LISTON
00405D             11462   ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
00405D             11463   ;
00405D E5          11464   LISTIT:         PUSH	HL
00405E EB          11465                   EX	DE,HL
00405F C5          11466                   PUSH	BC
004060 CD 96 41    11467                   CALL	PBCD
004063 C1          11468                   POP	BC
004064 E1          11469                   POP	HL
004065 7E          11470                   LD	A,(HL)
004066 D9          11471                   EXX
004067 21 7E 3D    11472                   LD	HL,TOKSUB
00406A 01 08 00    11473                   LD	BC,LENSUB
00406D ED B1       11474                   CPIR
00406F CC F5 40    11475                   CALL	Z,INDSUB
004072 FE CB       11476                   CP	TENDCASE
004074 CC F5 40    11477                   CALL	Z,INDSUB
004077 3E 20       11478                   LD	A,' '
004079 DD CB 00 46 11479                   BIT	0,(IX)
00407D C4 02 41    11480                   CALL	NZ,OUTCHR
004080 7B          11481                   LD	A,E
004081 87          11482                   ADD	A,A
004082 DD CB 00 4E 11483                   BIT	1,(IX)
004086 C4 A3 35    11484                   CALL	NZ,SPACES
004089 D9          11485                   EXX
00408A 7E          11486                   LD	A,(HL)
00408B 1E 00       11487                   LD	E,0
00408D D9          11488                   EXX
00408E 01 07 00    11489                   LD	BC,LENADD
004091 21 77 3D    11490   LIST5:          LD	HL,TOKADD
004094 ED B1       11491                   CPIR
004096 CC F9 40    11492                   CALL	Z,INDADD
004099 FE C8       11493                   CP	TCASE
00409B CC F9 40    11494                   CALL	Z,INDADD
00409E D9          11495                   EXX
00409F 7E          11496   LIST8:          LD	A,(HL)
0040A0 23          11497                   INC	HL
0040A1 FE 0D       11498                   CP	CR
0040A3 28 25       11499                   JR	Z,LIST9
0040A5 57          11500                   LD	D,A
0040A6 FE 10       11501                   CP	TEXIT
0040A8 20 02       11502                   JR	NZ,LIST6
0040AA CB FB       11503                   SET	7,E
0040AC FE 22       11504   LIST6:          CP	'"'
0040AE 20 01       11505                   JR	NZ,LIST7
0040B0 1C          11506                   INC	E
0040B1 CD E9 40    11507   LIST7:          CALL	LOUT
0040B4 7B          11508                   LD	A,E
0040B5 E6 81       11509                   AND	81H
0040B7 20 E6       11510                   JR	NZ,LIST8
0040B9 7E          11511                   LD	A,(HL)
0040BA D9          11512                   EXX
0040BB 21 7E 3D    11513                   LD	HL,TOKSUB
0040BE 01 03 00    11514                   LD	BC,3
0040C1 ED B1       11515                   CPIR
0040C3 CC F5 40    11516                   CALL	Z,INDSUB
0040C6 0E 04       11517                   LD	C,4
0040C8 18 C7       11518                   JR	LIST5
0040CA             11519   ;
0040CA 7A          11520   LIST9:          LD	A,D
0040CB FE 8C       11521                   CP	TTHEN
0040CD D9          11522                   EXX
0040CE CC F9 40    11523                   CALL	Z,INDADD
0040D1 D9          11524                   EXX
0040D2 18 27       11525                   JR	CRLF
0040D4             11526   ;
0040D4 E5          11527   PRLINO:         PUSH	HL
0040D5 FD E1       11528                   POP	IY
0040D7 C5          11529                   PUSH	BC
0040D8 CD 60 1F    11530                   CALL	DECODE
0040DB C1          11531                   POP	BC
0040DC D9          11532                   EXX
0040DD C5          11533                   PUSH	BC
0040DE D5          11534                   PUSH	DE
0040DF CD 92 41    11535                   CALL	PBCDL
0040E2 D1          11536                   POP	DE
0040E3 C1          11537                   POP	BC
0040E4 D9          11538                   EXX
0040E5 FD E5       11539                   PUSH	IY
0040E7 E1          11540                   POP	HL
0040E8 C9          11541                   RET
0040E9             11542   ;
0040E9 CB 43       11543   LOUT:           BIT	0,E
0040EB 20 15       11544                   JR	NZ,OUTCHR
0040ED FE 8D       11545                   CP	TLINO
0040EF 28 E3       11546                   JR	Z,PRLINO
0040F1 CD 1B 41    11547                   CALL	OUT
0040F4 C9          11548                   RET
0040F5             11549   ;
0040F5 1D          11550   INDSUB:         DEC	E
0040F6 F2 FA 40    11551                   JP	P,INDRET
0040F9 1C          11552   INDADD:         INC	E
0040FA C9          11553   INDRET:         RET
0040FB             11554   ;
0040FB             11555   ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
0040FB             11556   ;  Destroys: A,F
0040FB             11557   ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
0040FB             11558   ;    Inputs: A = character
0040FB             11559   ;  Destroys: A,F
0040FB             11560   ;
0040FB 3E 0D       11561   CRLF:           LD	A,CR
0040FD CD 02 41    11562                   CALL	OUTCHR
004100 3E 0A       11563                   LD	A,LF
004102 CD 95 11    11564   OUTCHR:         CALL	OSWRCH
004105 D6 0D       11565                   SUB	CR
004107 28 05       11566                   JR	Z,CARRET
004109 D8          11567                   RET	C		;NON-PRINTING
00410A 3A FB 54    11568                   LD	A,(COUNT)
00410D 3C          11569                   INC	A
00410E 32 FB 54    11570   CARRET:         LD	(COUNT),A
004111 C8          11571                   RET	Z
004112 E5          11572                   PUSH	HL
004113 2A FC 54    11573                   LD	HL,(WIDTH)
004116 BD          11574                   CP	L
004117 E1          11575                   POP	HL
004118 C0          11576                   RET	NZ
004119 18 E0       11577                   JR	CRLF
00411B             11578   ;
00411B             11579   ;OUT - SEND CHARACTER OR KEYWORD
00411B             11580   ;   Inputs: A = character (>=10, <128)
00411B             11581   ;           A = Token (<10, >=128)
00411B             11582   ;  Destroys: A,F
00411B             11583   ;
00411B FE A0       11584   OUT:            CP	160
00411D EA 02 41    11585                   JP	PE,OUTCHR
004120 C5          11586                   PUSH	BC
004121 E5          11587                   PUSH	HL
004122 21 84 38    11588                   LD	HL,KEYWDS
004125 01 5B 03    11589                   LD	BC,KEYWDL
004128 ED B1       11590                   CPIR
00412A C4 02 41    11591                   CALL	NZ,OUTCHR
00412D 06 A0       11592                   LD	B,160
00412F FE 91       11593                   CP	145
004131 EA 35 41    11594                   JP	PE,TOKEN1
004134 04          11595                   INC	B
004135 7E          11596   TOKEN1:         LD	A,(HL)
004136 23          11597                   INC	HL
004137 B8          11598                   CP	B
004138 F5          11599                   PUSH	AF
004139 EC 02 41    11600                   CALL	PE,OUTCHR
00413C F1          11601                   POP	AF
00413D EA 35 41    11602                   JP	PE,TOKEN1
004140 E1          11603                   POP	HL
004141 C1          11604                   POP	BC
004142 C9          11605                   RET
004143             11606   ;
004143             11607   ;FINDL - FIND PROGRAM LINE.
004143             11608   ;   Inputs: HL = line number (binary)
004143             11609   ;  Outputs: HL addresses line (if found)
004143             11610   ;           DE = line number
004143             11611   ;           Z-flag set if found.
004143             11612   ; Destroys: A,B,C,D,E,H,L,F
004143             11613   ;
004143 EB          11614   FINDL:          EX	DE,HL
004144 2A DC 54    11615                   LD	HL,(PAGE_)
004147 AF          11616                   XOR	A		;A=0
004148 BE          11617                   CP	(HL)
004149 3C          11618                   INC	A
00414A D0          11619                   RET	NC
00414B AF          11620                   XOR	A		;CLEAR CARRY
00414C 47          11621                   LD	B,A
00414D 4E          11622   FINDL1:         LD	C,(HL)
00414E E5          11623                   PUSH	HL
00414F 23          11624                   INC	HL
004150 7E          11625                   LD	A,(HL)
004151 23          11626                   INC	HL
004152 66          11627                   LD	H,(HL)
004153 6F          11628                   LD	L,A
004154 ED 52       11629                   SBC	HL,DE
004156 E1          11630                   POP	HL
004157 D0          11631                   RET	NC		;FOUND | PAST
004158 09          11632                   ADD	HL,BC
004159 18 F2       11633                   JR	FINDL1
00415B             11634   ;
00415B             11635   ;SETLIN - Search program for line containing address.
00415B             11636   ;   Inputs: Address in (CURLIN)
00415B             11637   ;  Outputs: Line number in HL
00415B             11638   ; Destroys: B,C,D,E,H,L,F
00415B             11639   ;
00415B 06 00       11640   SETLIN:         LD	B,0
00415D ED 5B F4 54 11641                   LD	DE,(CURLIN)
004161 2A DC 54    11642                   LD	HL,(PAGE_)
004164 B7          11643                   OR	A
004165 ED 52       11644                   SBC	HL,DE
004167 19          11645                   ADD	HL,DE
004168 30 13       11646                   JR	NC,SET3
00416A 4E          11647   SET1:           LD	C,(HL)
00416B 0C          11648                   INC	C
00416C 0D          11649                   DEC	C
00416D 28 0E       11650                   JR	Z,SET3
00416F 09          11651                   ADD	HL,BC
004170 ED 52       11652                   SBC	HL,DE
004172 19          11653                   ADD	HL,DE
004173 38 F5       11654                   JR	C,SET1
004175 ED 42       11655                   SBC	HL,BC
004177 23          11656                   INC	HL
004178 5E          11657                   LD	E,(HL)		;LINE NUMBER
004179 23          11658                   INC	HL
00417A 56          11659                   LD	D,(HL)
00417B EB          11660                   EX	DE,HL
00417C C9          11661   SET2:           RET
00417D             11662   ;
00417D 21 00 00    11663   SET3:           LD	HL,0
004180 18 FA       11664                   JR	SET2
004182             11665   ;
004182             11666   ;SAYLN - PRINT " at line nnnn" MESSAGE.
004182             11667   ;   Inputs: HL = line number
004182             11668   ;  Outputs: Carry=0 if line number is zero.
004182             11669   ;           Carry=1 if line number is non-zero.
004182             11670   ; Destroys: A,B,C,D,E,H,L,F
004182             11671   ;
004182 7C          11672   SAYLN:          LD	A,H
004183 B5          11673                   OR	L
004184 C8          11674                   RET	Z
004185 CD FA 44    11675                   CALL	TELL
004188 20 61 74 20 11676                   DB	" at line "
       6C 69 6E 65 
       20          
004191 00          11677                   DB	0
004192 0E 00       11678   PBCDL:          LD	C,0
004194 18 02       11679                   JR	PBCD0
004196             11680   ;
004196             11681   ;PBCD - PRINT NUMBER AS DECIMAL INTEGER.
004196             11682   ;   Inputs: HL = number (binary).
004196             11683   ;  Outputs: Carry = 1
004196             11684   ; Destroys: A,B,C,D,E,H,L,F
004196             11685   ;
004196 0E 20       11686   PBCD:           LD	C,' '
004198 06 05       11687   PBCD0:          LD	B,5
00419A 11 10 27    11688                   LD	DE,10000
00419D AF          11689   PBCD1:          XOR	A
00419E ED 52       11690   PBCD2:          SBC	HL,DE
0041A0 3C          11691                   INC	A
0041A1 30 FB       11692                   JR	NC,PBCD2
0041A3 19          11693                   ADD	HL,DE
0041A4 3D          11694                   DEC	A
0041A5 28 04       11695                   JR	Z,PBCD3
0041A7 CB E1       11696                   SET	4,C
0041A9 CB E9       11697                   SET	5,C
0041AB B1          11698   PBCD3:          OR	C
0041AC C4 02 41    11699                   CALL	NZ,OUTCHR
0041AF 78          11700                   LD	A,B
0041B0 FE 05       11701                   CP	5
0041B2 28 06       11702                   JR	Z,PBCD4
0041B4 29          11703                   ADD	HL,HL
0041B5 54          11704                   LD	D,H
0041B6 5D          11705                   LD	E,L
0041B7 29          11706                   ADD	HL,HL
0041B8 29          11707                   ADD	HL,HL
0041B9 19          11708                   ADD	HL,DE
0041BA 11 E8 03    11709   PBCD4:          LD	DE,1000
0041BD 10 DE       11710                   DJNZ	PBCD1
0041BF 37          11711                   SCF
0041C0 C9          11712                   RET
0041C1             11713   ;
0041C1             11714   ;HANDLE WHOLE ARRAY:
0041C1             11715   ;
0041C1 FD 23       11716   GETV1:          INC	IY
0041C3 FD 23       11717                   INC	IY		;SKIP ()
0041C5 E5          11718                   PUSH	HL		;SET EXIT CONDITIONS
0041C6 DD E1       11719                   POP	IX
0041C8 7A          11720                   LD	A,D
0041C9 F6 40       11721                   OR	64		;FLAG ARRAY
0041CB BF          11722                   CP	A
0041CC C9          11723                   RET
0041CD             11724   ;
0041CD             11725   ;PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
0041CD             11726   ;   Inputs: HL, IY as returned from GETVAR (NZ).
0041CD             11727   ;  Outputs: As GETVAR.
0041CD             11728   ; Destroys: everything
0041CD             11729   ;
0041CD CD 3C 43    11730   PUTVAR:         CALL	CREATE
0041D0 FD 7E 00    11731                   LD	A,(IY)
0041D3 FE 28       11732                   CP	'('
0041D5 20 7D       11733                   JR	NZ,GETVZ	;SET EXIT CONDITIONS
0041D7 FD 7E 01    11734                   LD	A,(IY+1)
0041DA FE 29       11735                   CP	')'		;WHOLE ARRAY?
0041DC 28 E3       11736                   JR	Z,GETV1
0041DE 3E 0E       11737   ARRAY:          LD	A,14		;'Bad use of array'
0041E0 C3 44 3F    11738   ERROR3:         JP	ERROR_
0041E3             11739   ;
0041E3             11740   ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
0041E3             11741   ;   Inputs: IY addresses first character.
0041E3             11742   ;  Outputs: Carry set and NZ if illegal character.
0041E3             11743   ;           Z-flag set if variable found, then:
0041E3             11744   ;            A = variable type (0,4,5,128 or 129)
0041E3             11745   ;                (68,69 or 193 for whole array)
0041E3             11746   ;            HL = IX = variable pointer.
0041E3             11747   ;            IY updated
0041E3             11748   ;           If Z-flag & carry reset, then:
0041E3             11749   ;            HL, IY set for subsequent PUTVAR call.
0041E3             11750   ; Destroys: everything
0041E3             11751   ;
0041E3 FD 7E 00    11752   GETVAR:         LD	A,(IY)
0041E6 FE 21       11753                   CP	'!'
0041E8 28 76       11754                   JR	Z,GETV5
0041EA FE 3F       11755                   CP	'?'
0041EC 28 76       11756                   JR	Z,GETV6
0041EE FE 7C       11757                   CP	'|'
0041F0 28 75       11758                   JR	Z,GETVF
0041F2 FE 24       11759                   CP	'$'
0041F4 28 75       11760                   JR	Z,GETV4
0041F6 CD B0 42    11761                   CALL	LOCATE
0041F9 C0          11762                   RET	NZ
0041FA FD 7E 00    11763                   LD	A,(IY)
0041FD FE 28       11764                   CP	'('		;ARRAY?
0041FF 20 4B       11765                   JR	NZ,GETVX	;EXIT
004201 FD 7E 01    11766                   LD	A,(IY+1)
004204 FE 29       11767                   CP	')'		;WHOLE ARRAY?
004206 28 B9       11768                   JR	Z,GETV1
004208 D5          11769                   PUSH	DE		;SAVE TYPE
004209 7E          11770                   LD	A,(HL)
00420A 23          11771                   INC	HL
00420B 66          11772                   LD	H,(HL)
00420C 6F          11773                   LD	L,A		;INDIRECT LINK
00420D E6 FE       11774                   AND	0FEH
00420F B4          11775                   OR	H
004210 28 CC       11776                   JR	Z,ARRAY
004212 7E          11777                   LD	A,(HL)		;NO. OF DIMENSIONS
004213 B7          11778                   OR	A
004214 28 C8       11779                   JR	Z,ARRAY
004216 23          11780                   INC	HL
004217 11 00 00    11781                   LD	DE,0		;ACCUMULATOR
00421A F5          11782                   PUSH	AF
00421B FD 23       11783                   INC	IY		;SKIP (
00421D E5          11784   GETV3:          PUSH	HL
00421E D5          11785                   PUSH	DE
00421F CD 33 18    11786                   CALL	EXPRI		;SUBSCRIPT
004222 D9          11787                   EXX
004223 D1          11788                   POP	DE
004224 E3          11789                   EX	(SP),HL
004225 4E          11790                   LD	C,(HL)
004226 23          11791                   INC	HL
004227 46          11792                   LD	B,(HL)
004228 23          11793                   INC	HL
004229 E3          11794                   EX	(SP),HL
00422A EB          11795                   EX	DE,HL
00422B D5          11796                   PUSH	DE
00422C CD BD 36    11797                   CALL	MUL16		;HL=HL*BC
00422F D1          11798                   POP	DE
004230 19          11799                   ADD	HL,DE
004231 EB          11800                   EX	DE,HL
004232 B7          11801                   OR	A
004233 ED 42       11802                   SBC	HL,BC
004235 3E 0F       11803                   LD	A,15
004237 30 A7       11804                   JR	NC,ERROR3	;"Subscript"
004239 E1          11805                   POP	HL
00423A F1          11806                   POP	AF
00423B 3D          11807                   DEC	A		;DIMENSION COUNTER
00423C 20 1C       11808                   JR	NZ,GETV2
00423E CD AE 20    11809                   CALL	BRAKET		;CLOSING BRACKET
004241 F1          11810                   POP	AF		;RESTORE TYPE
004242 E5          11811                   PUSH	HL
004243 CD AD 36    11812                   CALL	X14OR5		;DE=DE*n
004246 E1          11813                   POP	HL
004247 19          11814                   ADD	HL,DE
004248 57          11815                   LD	D,A		;TYPE
004249 FD 7E 00    11816                   LD	A,(IY)
00424C FE 3F       11817   GETVX:          CP	'?'
00424E 28 26       11818                   JR	Z,GETV9
004250 FE 21       11819                   CP	'!'
004252 28 1E       11820                   JR	Z,GETV8
004254 E5          11821   GETVZ:          PUSH	HL		;SET EXIT CONDITIONS
004255 DD E1       11822                   POP	IX
004257 7A          11823                   LD	A,D
004258 BF          11824                   CP	A
004259 C9          11825                   RET
00425A             11826   ;
00425A F5          11827   GETV2:          PUSH	AF
00425B CD A2 20    11828                   CALL	COMMA
00425E 18 BD       11829                   JR	GETV3
004260             11830   ;
004260             11831   ;PROCESS UNARY & BINARY INDIRECTION:
004260             11832   ;
004260 3E 04       11833   GETV5:          LD	A,4		;UNARY 32-BIT INDIRN.
004262 18 09       11834                   JR	GETV7
004264 AF          11835   GETV6:          XOR	A		;UNARY 8-BIT INDIRECTION
004265 18 06       11836                   JR	GETV7
004267 3E 05       11837   GETVF:          LD	A,5		;VARIANT INDIRECTION
004269 18 02       11838                   JR	GETV7
00426B 3E 80       11839   GETV4:          LD	A,128		;STATIC STRING
00426D ED 62       11840   GETV7:          SBC	HL,HL
00426F F5          11841                   PUSH	AF
004270 18 15       11842                   JR	GETV0
004272             11843   ;
004272 06 04       11844   GETV8:          LD	B,4		;32-BIT BINARY INDIRN.
004274 18 02       11845                   JR	GETVA
004276 06 00       11846   GETV9:          LD	B,0		;8-BIT BINARY INDIRN.
004278 E5          11847   GETVA:          PUSH	HL
004279 DD E1       11848                   POP	IX
00427B 7A          11849                   LD	A,D		;TYPE
00427C FE 81       11850                   CP	129
00427E C8          11851                   RET	Z		;STRING!
00427F C5          11852                   PUSH	BC
004280 CD 25 19    11853                   CALL	LOADN		;LEFT OPERAND
004283 CD 17 1C    11854                   CALL	SFIX
004286 D9          11855                   EXX
004287 E5          11856   GETV0:          PUSH	HL
004288 FD 23       11857                   INC	IY
00428A CD 60 18    11858                   CALL	ITEMI
00428D D9          11859                   EXX
00428E D1          11860                   POP	DE
00428F F1          11861                   POP	AF
004290 19          11862                   ADD	HL,DE
004291 E5          11863                   PUSH	HL
004292 DD E1       11864                   POP	IX
004294 BF          11865                   CP	A
004295 C9          11866                   RET
004296             11867   ;
004296             11868   ;GETDEF - Find entry for FN or PROC in dynamic area.
004296             11869   ;   Inputs: IY addresses byte following "DEF" token.
004296             11870   ;  Outputs: Z flag set if found
004296             11871   ;           Carry set if neither FN or PROC first.
004296             11872   ;           If Z: HL points to entry
004296             11873   ;                 IY addresses delimiter
004296             11874   ; Destroys: A,D,E,H,L,IY,F
004296             11875   ;
004296 FD 7E 01    11876   GETDEF:         LD	A,(IY+1)
004299 CD FC 43    11877                   CALL	RANGE1
00429C D8          11878                   RET	C
00429D FD 7E 00    11879                   LD	A,(IY)
0042A0 21 D8 54    11880                   LD	HL,FNPTR
0042A3 FE A4       11881                   CP	TFN
0042A5 28 43       11882                   JR	Z,LOC2
0042A7 21 DA 54    11883                   LD	HL,PROPTR
0042AA FE F2       11884                   CP	TPROC
0042AC 28 3C       11885                   JR	Z,LOC2
0042AE 37          11886                   SCF
0042AF C9          11887                   RET
0042B0             11888   ;
0042B0             11889   ;LOCATE - Try to locate variable name in static or
0042B0             11890   ;dynamic variables.  If illegal first character return
0042B0             11891   ;carry, non-zero.  If found, return no-carry, zero.
0042B0             11892   ;If not found, return no-carry, non-zero.
0042B0             11893   ;   Inputs: IY addresses first character of name.
0042B0             11894   ;           A=(IY)
0042B0             11895   ;  Outputs: Z-flag set if found, then:
0042B0             11896   ;            IY addresses terminator
0042B0             11897   ;            HL addresses location of variable
0042B0             11898   ;            D=type of variable:  4 = integer
0042B0             11899   ;                                 5 = floating point
0042B0             11900   ;                               129 = string
0042B0             11901   ; Destroys: A,D,E,H,L,IY,F
0042B0             11902   ;
0042B0 D6 40       11903   LOCATE:         SUB	'@'
0042B2 D8          11904                   RET	C
0042B3 26 00       11905                   LD	H,0
0042B5 FE 1B       11906                   CP	'Z'-'@'+1
0042B7 30 1D       11907                   JR	NC,LOC0		;NOT STATIC
0042B9 87          11908                   ADD	A,A
0042BA 6F          11909                   LD	L,A
0042BB FD 7E 01    11910                   LD	A,(IY+1)	;2nd CHARACTER
0042BE FE 25       11911                   CP	'%'
0042C0 20 20       11912                   JR	NZ,LOC1		;NOT STATIC
0042C2 FD 7E 02    11913                   LD	A,(IY+2)
0042C5 FE 28       11914                   CP	'('
0042C7 28 19       11915                   JR	Z,LOC1		;NOT STATIC
0042C9 29          11916                   ADD	HL,HL
0042CA 11 00 54    11917                   LD	DE,STAVAR	;STATIC VARIABLES
0042CD 19          11918                   ADD	HL,DE
0042CE FD 23       11919                   INC	IY
0042D0 FD 23       11920                   INC	IY
0042D2 16 04       11921                   LD	D,4		;INTEGER TYPE
0042D4 AF          11922                   XOR	A
0042D5 C9          11923                   RET
0042D6             11924   ;
0042D6 FE 1F       11925   LOC0:           CP	'_'-'@'
0042D8 D8          11926                   RET	C
0042D9 FE 3B       11927                   CP	'z'-'@'+1
0042DB 3F          11928                   CCF
0042DC 3D          11929                   DEC	A		;SET NZ
0042DD D8          11930                   RET	C
0042DE D6 03       11931                   SUB	3
0042E0 87          11932                   ADD	A,A
0042E1 6F          11933                   LD	L,A
0042E2 11 6C 54    11934   LOC1:           LD	DE,DYNVAR	;DYNAMIC VARIABLES
0042E5 2D          11935                   DEC	L
0042E6 2D          11936                   DEC	L
0042E7 37          11937                   SCF
0042E8 F8          11938                   RET	M
0042E9 19          11939                   ADD	HL,DE
0042EA 5E          11940   LOC2:           LD	E,(HL)
0042EB 23          11941                   INC	HL
0042EC 56          11942                   LD	D,(HL)
0042ED 7A          11943                   LD	A,D
0042EE B3          11944                   OR	E
0042EF 28 49       11945                   JR	Z,LOC6		;UNDEFINED VARIABLE
0042F1 62          11946                   LD	H,D
0042F2 6B          11947                   LD	L,E
0042F3 23          11948                   INC	HL		;SKIP LINK
0042F4 23          11949                   INC	HL
0042F5 FD E5       11950                   PUSH	IY
0042F7 7E          11951   LOC3:           LD	A,(HL)		;COMPARE
0042F8 23          11952                   INC	HL
0042F9 FD 23       11953                   INC	IY
0042FB FD BE 00    11954                   CP	(IY)
0042FE 28 F7       11955                   JR	Z,LOC3
004300 B7          11956                   OR	A		;0=TERMINATOR
004301 28 05       11957                   JR	Z,LOC5		;FOUND (MAYBE)
004303 FD E1       11958   LOC4:           POP	IY
004305 EB          11959                   EX	DE,HL
004306 18 E2       11960                   JR	LOC2		;TRY NEXT ENTRY
004308             11961   ;
004308 FD 2B       11962   LOC5:           DEC	IY
00430A FD 7E 00    11963                   LD	A,(IY)
00430D FE 28       11964                   CP	'('
00430F 28 13       11965                   JR	Z,LOCX		;FOUND
004311 FD 23       11966                   INC	IY
004313 CD EF 43    11967                   CALL	RANGE
004316 38 0C       11968                   JR	C,LOCX		;FOUND
004318 FE 28       11969                   CP	'('
00431A 28 E7       11970                   JR	Z,LOC4		;KEEP LOOKING
00431C FD 7E FF    11971                   LD	A,(IY-1)
00431F CD FC 43    11972                   CALL	RANGE1
004322 30 DF       11973                   JR	NC,LOC4		;KEEP LOOKING
004324 D1          11974   LOCX:           POP	DE
004325 FD 7E FF    11975   TYPE:           LD	A,(IY-1)
004328 FE 24       11976                   CP	'$'
00432A 16 81       11977                   LD	D,129
00432C C8          11978                   RET	Z		;STRING
00432D FE 26       11979                   CP	'&'
00432F 16 01       11980                   LD	D,1
004331 C8          11981                   RET	Z		;BYTE
004332 FE 25       11982                   CP	'%'
004334 16 04       11983                   LD	D,4
004336 C8          11984                   RET	Z		;INTEGER
004337 14          11985                   INC	D
004338 BF          11986                   CP	A
004339 C9          11987                   RET
00433A             11988   ;
00433A 3C          11989   LOC6:           INC	A		;SET NZ
00433B C9          11990                   RET
00433C             11991   ;
00433C             11992   ;CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
00433C             11993   ;   Inputs: HL, IY as returned from LOCATE (NZ).
00433C             11994   ;  Outputs: As LOCATE, GETDEF.
00433C             11995   ; Destroys: As LOCATE, GETDEF.
00433C             11996   ;
00433C AF          11997   CREATE:         XOR	A
00433D ED 5B E0 54 11998                   LD	DE,(FREE)
004341 72          11999                   LD	(HL),D
004342 2B          12000                   DEC	HL
004343 73          12001                   LD	(HL),E
004344 EB          12002                   EX	DE,HL
004345 77          12003                   LD	(HL),A
004346 23          12004                   INC	HL
004347 77          12005                   LD	(HL),A
004348 23          12006                   INC	HL
004349 FD 23       12007   LOC7:           INC	IY
00434B CD EF 43    12008                   CALL	RANGE		;END OF VARIABLE?
00434E 38 14       12009                   JR	C,LOC8
004350 77          12010                   LD	(HL),A
004351 23          12011                   INC	HL
004352 CD FC 43    12012                   CALL	RANGE1
004355 30 F2       12013                   JR	NC,LOC7
004357 FE 28       12014                   CP	'('
004359 28 09       12015                   JR	Z,LOC8
00435B FD 7E 01    12016                   LD	A,(IY+1)
00435E FE 28       12017                   CP	'('
004360 28 E7       12018                   JR	Z,LOC7
004362 FD 23       12019                   INC	IY
004364 36 00       12020   LOC8:           LD	(HL),0		;TERMINATOR
004366 23          12021                   INC	HL
004367 E5          12022                   PUSH	HL
004368 CD 25 43    12023                   CALL	TYPE
00436B FD 7E 00    12024                   LD	A,(IY)
00436E FE 28       12025                   CP	'('
004370 3E 02       12026                   LD	A,2		;SIZE OF INDIRECT LINK
004372 28 07       12027                   JR	Z,LOC9
004374 7A          12028                   LD	A,D
004375 B7          12029                   OR	A		;STRING?
004376 F2 7B 43    12030                   JP	P,LOC9
004379 3E 04       12031                   LD	A,4
00437B 36 00       12032   LOC9:           LD	(HL),0		;INITIALISE TO ZERO
00437D 23          12033                   INC	HL
00437E 3D          12034                   DEC	A
00437F 20 FA       12035                   JR	NZ,LOC9
004381 22 E0 54    12036                   LD	(FREE),HL
004384 CD 86 32    12037                   CALL	CHECK
004387 E1          12038                   POP	HL
004388 AF          12039                   XOR	A
004389 C9          12040                   RET
00438A             12041   ;
00438A             12042   ;LINNUM - GET LINE NUMBER FROM TEXT STRING
00438A             12043   ;   Inputs: IY = Text Pointer
00438A             12044   ;  Outputs: HL = Line number (zero if none)
00438A             12045   ;           IY updated
00438A             12046   ; Destroys: A,D,E,H,L,IY,F
00438A             12047   ;
00438A CD 0B 45    12048   LINNUM:         CALL	NXT
00438D 21 00 00    12049                   LD	HL,0
004390 FD 7E 00    12050   LINNM1:         LD	A,(IY)
004393 D6 30       12051                   SUB	'0'
004395 D8          12052                   RET	C
004396 FE 0A       12053                   CP	10
004398 D0          12054                   RET	NC
004399 FD 23       12055                   INC	IY
00439B 54          12056                   LD	D,H
00439C 5D          12057                   LD	E,L
00439D 29          12058                   ADD	HL,HL		;*2
00439E 38 0F       12059                   JR	C,TOOBIGmn
0043A0 29          12060                   ADD	HL,HL		;*4
0043A1 38 0C       12061                   JR	C,TOOBIGmn
0043A3 19          12062                   ADD	HL,DE		;*5
0043A4 38 09       12063                   JR	C,TOOBIGmn
0043A6 29          12064                   ADD	HL,HL		;*10
0043A7 38 06       12065                   JR	C,TOOBIGmn
0043A9 5F          12066                   LD	E,A
0043AA 16 00       12067                   LD	D,0
0043AC 19          12068                   ADD	HL,DE		;ADD IN DIGIT
0043AD 30 E1       12069                   JR	NC,LINNM1
0043AF 3E 14       12070   TOOBIGmn:         LD	A,20
0043B1 C3 44 3F    12071                   JP	ERROR_		;"Too big"
0043B4             12072   ;
0043B4             12073   ;PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
0043B4             12074   ;   Inputs: IY = text pointer
0043B4             12075   ;  Outputs: HL = first number (10 by default)
0043B4             12076   ;           BC = second number (10 by default)
0043B4             12077   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
0043B4             12078   ;
0043B4 CD 8A 43    12079   PAIR:           CALL	LINNUM		;FIRST
0043B7 7C          12080                   LD	A,H
0043B8 B5          12081                   OR	L
0043B9 20 02       12082                   JR	NZ,PAIR1
0043BB 2E 0A       12083                   LD	L,10
0043BD CD 36 35    12084   PAIR1:          CALL	TERMQ
0043C0 FD 23       12085                   INC	IY
0043C2 E5          12086                   PUSH	HL
0043C3 21 0A 00    12087                   LD	HL,10
0043C6 C4 8A 43    12088                   CALL	NZ,LINNUM	;SECOND
0043C9 E3          12089                   EX	(SP),HL
0043CA C1          12090                   POP	BC
0043CB 78          12091                   LD	A,B
0043CC B1          12092                   OR	C
0043CD C0          12093                   RET	NZ
0043CE CD 55 3F    12094                   CALL	EXTERR
0043D1 53 69 6C 6C 12095                   DB	"Silly"
       79          
0043D6 00          12096                   DB	0
0043D7             12097   ;
0043D7             12098   ;DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
0043D7             12099   ;   Inputs: IY = text pointer
0043D7             12100   ;  Outputs: HL = points to program text
0043D7             12101   ;           BC = second number (0 by default)
0043D7             12102   ; Destroys: A,B,C,D,E,H,L,IY,F
0043D7             12103   ;
0043D7 CD 8A 43    12104   DLPAIR:         CALL	LINNUM
0043DA E5          12105                   PUSH	HL
0043DB CD 36 35    12106                   CALL	TERMQ
0043DE 28 09       12107                   JR	Z,DLP1
0043E0 FE E7       12108                   CP	TIF
0043E2 28 05       12109                   JR	Z,DLP1
0043E4 FD 23       12110                   INC	IY
0043E6 CD 8A 43    12111                   CALL	LINNUM
0043E9 E3          12112   DLP1:           EX	(SP),HL
0043EA CD 43 41    12113                   CALL	FINDL
0043ED C1          12114                   POP	BC
0043EE C9          12115                   RET
0043EF             12116   ;
0043EF             12117   ;TEST FOR VALID CHARACTER IN VARIABLE NAME:
0043EF             12118   ;   Inputs: IY addresses character
0043EF             12119   ;  Outputs: Carry set if out-of-range.
0043EF             12120   ; Destroys: A,F
0043EF             12121   ;
0043EF FD 7E 00    12122   RANGE:          LD	A,(IY)
0043F2 FE 24       12123                   CP	'$'
0043F4 D8          12124                   RET	C
0043F5 FE 27       12125                   CP	'&'+1
0043F7 3F          12126                   CCF
0043F8 D0          12127                   RET	NC
0043F9 FE 28       12128                   CP	'('
0043FB C8          12129                   RET	Z
0043FC FE 30       12130   RANGE1:         CP	'0'
0043FE D8          12131                   RET	C
0043FF FE 3A       12132                   CP	'9'+1
004401 3F          12133                   CCF
004402 D0          12134                   RET	NC
004403 FE 40       12135                   CP	'@'		;V2.4
004405 C8          12136                   RET	Z
004406 FE 41       12137   RANGE2:         CP	'A'
004408 D8          12138                   RET	C
004409 FE 5B       12139                   CP	'Z'+1
00440B 3F          12140                   CCF
00440C D0          12141                   RET	NC
00440D FE 5F       12142                   CP	'_'
00440F D8          12143                   RET	C
004410 FE 7B       12144                   CP	'z'+1
004412 3F          12145                   CCF
004413 C9          12146                   RET
004414             12147   ;
004414             12148   ;LEXAN - LEXICAL ANALYSIS.
004414             12149   ;  Bit 0,C: 1=left, 0=right
004414             12150   ;  Bit 3,C: 1=in HEX
004414             12151   ;  Bit 4,C: 1=accept line number
004414             12152   ;  Bit 5,C: 1=in variable, FN, PROC
004414             12153   ;  Bit 6,C: 1=in REM, DATA, *
004414             12154   ;  Bit 7,C: 1=in quotes
004414             12155   ;   Inputs: IY addresses source string
004414             12156   ;           DE addresses destination string
004414             12157   ;           (must be page boundary)
004414             12158   ;           C  sets initial mode
004414             12159   ;  Outputs: DE, IY updated
004414             12160   ;           A holds carriage return
004414             12161   ;
004414 12          12162   LEXAN1:         LD	(DE),A		;TRANSFER TO BUFFER
004415 13          12163                   INC	DE		;INCREMENT POINTERS
004416 FD 23       12164                   INC	IY
004418 7B          12165   LEXAN2:         LD	A,E		;MAIN ENTRY
004419 FE FC       12166                   CP	252		;TEST LENGTH
00441B 3E 13       12167                   LD	A,19
00441D D2 44 3F    12168                   JP	NC,ERROR_	;'String too long'
004420 FD 7E 00    12169                   LD	A,(IY)
004423 FE 0D       12170                   CP	CR
004425 C8          12171                   RET	Z		;END OF LINE
004426 CD FC 43    12172                   CALL	RANGE1
004429 30 04       12173                   JR	NC,LEXAN3
00442B CB A9       12174                   RES	5,C		;NOT IN VARIABLE
00442D CB 99       12175                   RES	3,C		;NOT IN HEX
00442F FE 20       12176   LEXAN3:         CP	' '
004431 28 E1       12177                   JR	Z,LEXAN1	;PASS SPACES
004433 FE 2C       12178                   CP	','
004435 28 DD       12179                   JR	Z,LEXAN1	;PASS COMMAS
004437 FE 47       12180                   CP	'G'
004439 38 02       12181                   JR	C,LEXAN4
00443B CB 99       12182                   RES	3,C		;NOT IN HEX
00443D FE 22       12183   LEXAN4:         CP	'"'
00443F 20 05       12184                   JR	NZ,LEXAN5
004441 CB 11       12185                   RL	C
004443 3F          12186                   CCF			;TOGGLE C7
004444 CB 19       12187                   RR	C
004446 CB 61       12188   LEXAN5:         BIT	4,C
004448 28 10       12189                   JR	Z,LEXAN6
00444A CB A1       12190                   RES	4,C
00444C C5          12191                   PUSH	BC
00444D D5          12192                   PUSH	DE
00444E CD 8A 43    12193                   CALL	LINNUM		;GET LINE NUMBER
004451 D1          12194                   POP	DE
004452 C1          12195                   POP	BC
004453 7C          12196                   LD	A,H
004454 B5          12197                   OR	L
004455 C4 BF 44    12198                   CALL	NZ,ENCODE	;ENCODE LINE NUMBER
004458 18 BE       12199                   JR	LEXAN2		;CONTINUE
00445A             12200   ;
00445A 0D          12201   LEXAN6:         DEC	C
00445B 28 09       12202                   JR	Z,LEXAN7	;C=1 (LEFT)
00445D 0C          12203                   INC	C
00445E 20 B4       12204                   JR	NZ,LEXAN1
004460 B7          12205                   OR	A
004461 F4 A3 3F    12206                   CALL	P,LEX		;TOKENISE IF POSS.
004464 18 12       12207                   JR	LEXAN8
004466             12208   ;
004466 FE 2A       12209   LEXAN7:         CP	'*'
004468 28 16       12210                   JR	Z,LEXAN9
00446A B7          12211                   OR	A
00446B F4 A3 3F    12212                   CALL	P,LEX		;TOKENISE IF POSS.
00446E FE 8F       12213                   CP	TOKLO
004470 38 06       12214                   JR	C,LEXAN8
004472 FE 94       12215                   CP	TOKHI+1
004474 30 02       12216                   JR	NC,LEXAN8
004476 C6 40       12217                   ADD	A,OFFSET	;LEFT VERSION
004478 FE F4       12218   LEXAN8:         CP	TREM
00447A 28 04       12219                   JR	Z,LEXAN9
00447C FE DC       12220                   CP	TDATA
00447E 20 02       12221                   JR	NZ,LEXANA
004480 CB F1       12222   LEXAN9:         SET	6,C		;QUIT TOKENISING
004482 FE A4       12223   LEXANA:         CP	TFN
004484 28 09       12224                   JR	Z,LEXANB
004486 FE F2       12225                   CP	TPROC
004488 28 05       12226                   JR	Z,LEXANB
00448A CD 06 44    12227                   CALL	RANGE2
00448D 38 02       12228                   JR	C,LEXANC
00448F CB E9       12229   LEXANB:         SET	5,C		;IN VARIABLE/FN/PROC
004491 FE 26       12230   LEXANC:         CP	'&'
004493 20 02       12231                   JR	NZ,LEXAND
004495 CB D9       12232                   SET	3,C		;IN HEX
004497 21 B6 44    12233   LEXAND:         LD	HL,LIST1
00449A C5          12234                   PUSH	BC
00449B 01 06 00    12235                   LD	BC,LIST1L
00449E ED B1       12236                   CPIR
0044A0 C1          12237                   POP	BC
0044A1 20 02       12238                   JR	NZ,LEXANE
0044A3 CB E1       12239                   SET	4,C		;ACCEPT LINE NUMBER
0044A5 21 BA 44    12240   LEXANE:         LD	HL,LIST2
0044A8 C5          12241                   PUSH	BC
0044A9 01 05 00    12242                   LD	BC,LIST2L
0044AC ED B1       12243                   CPIR
0044AE C1          12244                   POP	BC
0044AF 20 02       12245                   JR	NZ,LEXANF
0044B1 CB C1       12246                   SET	0,C		;ENTER LEFT MODE
0044B3 C3 14 44    12247   LEXANF:         JP	LEXAN1
0044B6             12248   ;
0044B6 E5          12249   LIST1:          DB	TGOTO
0044B7 E4          12250                   DB	TGOSUB
0044B8 F7          12251                   DB	TRESTORE
0044B9 FC          12252                   DB	TTRACE
0044BA 8C          12253   LIST2:          DB	TTHEN
0044BB 8B          12254                   DB	TELSE
0044BC             12255   LIST1L:         EQU	$-LIST1
0044BC F5          12256                   DB	TREPEAT
0044BD 85          12257                   DB	TERROR
0044BE 3A          12258                   DB	':'
0044BF             12259   LIST2L:         EQU	$-LIST2
0044BF             12260   ;
0044BF             12261   ;ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
0044BF             12262   ;   Inputs: HL=line number, DE=string pointer
0044BF             12263   ;  Outputs: DE updated, BIT 4,C set.
0044BF             12264   ; Destroys: A,B,C,D,E,H,L,F
0044BF             12265   ;
0044BF CB E1       12266   ENCODE:         SET	4,C
0044C1 EB          12267                   EX	DE,HL
0044C2 36 8D       12268                   LD	(HL),TLINO
0044C4 23          12269                   INC	HL
0044C5 7A          12270                   LD	A,D
0044C6 E6 C0       12271                   AND	0C0H
0044C8 0F          12272                   RRCA
0044C9 0F          12273                   RRCA
0044CA 47          12274                   LD	B,A
0044CB 7B          12275                   LD	A,E
0044CC E6 C0       12276                   AND	0C0H
0044CE B0          12277                   OR	B
0044CF 0F          12278                   RRCA
0044D0 0F          12279                   RRCA
0044D1 EE 54       12280                   XOR	01010100B
0044D3 77          12281                   LD	(HL),A
0044D4 23          12282                   INC	HL
0044D5 7B          12283                   LD	A,E
0044D6 E6 3F       12284                   AND	3FH
0044D8 F6 40       12285                   OR	'@'
0044DA 77          12286                   LD	(HL),A
0044DB 23          12287                   INC	HL
0044DC 7A          12288                   LD	A,D
0044DD E6 3F       12289                   AND	3FH
0044DF F6 40       12290                   OR	'@'
0044E1 77          12291                   LD	(HL),A
0044E2 23          12292                   INC	HL
0044E3 EB          12293                   EX	DE,HL
0044E4 C9          12294                   RET
0044E5             12295   ;
0044E5             12296   ;TEXT - OUTPUT MESSAGE.
0044E5             12297   ;   Inputs: HL addresses text (terminated by nul)
0044E5             12298   ;  Outputs: HL addresses character following nul.
0044E5             12299   ; Destroys: A,H,L,F
0044E5             12300   ;
0044E5 2A EE 54    12301   REPORT:         LD	HL,(ERRTXT)
0044E8 7E          12302   TEXT_:          LD	A,(HL)
0044E9 23          12303                   INC	HL
0044EA B7          12304                   OR	A
0044EB C8          12305                   RET	Z
0044EC FE 0A       12306                   CP	LF
0044EE 28 05       12307                   JR	Z,TEXTLF	;Token for TINT
0044F0 CD 1B 41    12308                   CALL	OUT
0044F3 18 F3       12309                   JR	TEXT_
0044F5             12310   ;
0044F5 CD 02 41    12311   TEXTLF:         CALL	OUTCHR
0044F8 18 EE       12312                   JR	TEXT_
0044FA             12313   ;
0044FA             12314   ;TELL - OUTPUT MESSAGE.
0044FA             12315   ;   Inputs: Text follows subroutine call (term=nul)
0044FA             12316   ; Destroys: A,F
0044FA             12317   ;
0044FA E3          12318   TELL:           EX	(SP),HL		;GET RETURN ADDRESS
0044FB CD E8 44    12319                   CALL	TEXT_
0044FE E3          12320                   EX	(SP),HL
0044FF C9          12321                   RET
004500             12322   ;
004500             12323   ; NLIST - Check for end of list
004500             12324   ;
004500 CD 0B 45    12325   NLIST:          CALL	NXT
004503 FE 2C       12326                   CP	','		;ANOTHER VARIABLE?
004505 28 0A       12327                   JR	Z,NXT1
004507 C1          12328                   POP	BC		;DITCH RETURN ADDRESS
004508 C3 99 24    12329                   JP	XEQ
00450B             12330   ;
00450B FD 7E 00    12331   NXT:            LD	A,(IY)
00450E FE 20       12332                   CP	' '
004510 C0          12333                   RET	NZ
004511 FD 23       12334   NXT1:           INC	IY
004513 18 F6       12335                   JR	NXT
004515             12336   ;
004515             12337   ;                END	START
004515             12338   ; --- End main.asm ---
004515             12339   
004515             12340   ; --- Begin math.asm ---
004515             12341   ;
004515             12342   ;Automatically created from original source on 2024-12-15 15:29:12
004515             12343   ;
004515             12344                   .ASSUME ADL = 0
004515             12345   ;	.ORG 0x0000
004515             12346   ;                SEGMENT CODE
004515             12347   ;
004515             12348   ;Z80 FLOATING POINT PACKAGE
004515             12349   ;(C) COPYRIGHT  R.T.RUSSELL  1986-2024
004515             12350   ;VERSION 0.0, 26-10-1986
004515             12351   ;VERSION 0.1, 14-12-1988 (BUG FIX)
004515             12352   ;VERSION 5.0, 16-06-2024 (SHIFTS ADDED)
004515             12353   ;
004515             12354   ;BINARY FLOATING POINT REPRESENTATION:
004515             12355   ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
004515             12356   ;    8 BIT EXCESS-128 SIGNED EXPONENT
004515             12357   ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
004515             12358   ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
004515             12359   ;
004515             12360   ;BINARY INTEGER REPRESENTATION:
004515             12361   ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
004515             12362   ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
004515             12363   ;
004515             12364   ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
004515             12365   ;                            EXPONENT - C
004515             12366   ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
004515             12367   ;                               EXPONENT - B
004515             12368   ;
004515             12369   ;Error codes:
004515             12370   ;
004515             12371   BADOP:          EQU	1		;Bad operation code
004515             12372   DIVBY0:         EQU	18		;Division by zero
004515             12373   TOOBIG:         EQU	20		;Too big
004515             12374   NGROOT:         EQU	21		;Negative root
004515             12375   LOGRNG:         EQU	22		;Log range
004515             12376   ACLOST:         EQU	23		;Accuracy lost
004515             12377   EXPRNG:         EQU	24		;Exp range
004515             12378   ;
004515             12379   ;                XDEF	FPP
004515             12380   ;                XREF	STORE5
004515             12381   ;                XREF	DLOAD5
004515             12382   ;
004515             12383   ;Call entry and despatch code:
004515             12384   ;
004515 FD E5       12385   FPP:            PUSH	IY		;Save IY
004517 FD 21 00 00 12386                   LD	IY,0
00451B FD 39       12387                   ADD	IY,SP		;Save SP in IY
00451D CD 2C 45    12388                   CALL	OP		;Perform operation
004520 BF          12389                   CP	A		;Good return (Z, NC)
004521 FD E1       12390   EXITmat:           POP	IY		;Restore IY
004523 C9          12391                   RET			;Return to caller
004524             12392   ;
004524             12393   ;Error exit:
004524             12394   ;
004524 3E 01       12395   BADmat:            LD	A,BADOP		;"Bad operation code"
004526 FD F9       12396   ERROR_mat:         LD	SP,IY		;Restore SP from IY
004528 B7          12397                   OR	A		;Set NZ
004529 37          12398                   SCF			;Set C
00452A 18 F5       12399                   JR	EXITmat
00452C             12400   ;
00452C             12401   ;Perform operation or function:
00452C             12402   ;
00452C             12403   ; OP:             CP	(RTABLE-DTABLE)/2
00452C FE 2E       12404   OP:             CP	RTABLE-DTABLE/2
00452E 30 F4       12405                   JR	NC,BADmat
004530             12406                   ; CP	(FTABLE-DTABLE)/2
004530 FE 10       12407                   CP	FTABLE-DTABLE/2
004532 30 07       12408                   JR	NC,DISPAT
004534 08          12409                   EX	AF,AF'
004535 78          12410                   LD	A,B
004536 B1          12411                   OR	C		;Both integer?
004537 C4 A5 4E    12412                   CALL	NZ,FLOATA	;No, so float both
00453A 08          12413                   EX	AF,AF'
00453B E5          12414   DISPAT:         PUSH	HL
00453C 21 4C 45    12415                   LD	HL,DTABLE
00453F C5          12416                   PUSH	BC
004540 87          12417                   ADD	A,A		;A = op-code * 2
004541 4F          12418                   LD	C,A
004542 06 00       12419                   LD	B,0		;BC = op-code * 2
004544 09          12420                   ADD	HL,BC
004545 7E          12421                   LD	A,(HL)		;Get low byte
004546 23          12422                   INC	HL
004547 66          12423                   LD	H,(HL)		;Get high byte
004548 6F          12424                   LD	L,A
004549 C1          12425                   POP	BC
00454A E3          12426                   EX	(SP),HL
00454B C9          12427                   RET			;Off to routine
00454C             12428   ;
00454C             12429   ;Despatch table:
00454C             12430   ;
00454C CB 45       12431   DTABLE:         DW	IAND		;0  & (INTEGER)
00454E 18 46       12432                   DW	IBDIV		;1  DIV
004550 DD 45       12433                   DW	IEOR		;2  EOR
004552 01 46       12434                   DW	IMOD		;3  MOD
004554 EF 45       12435                   DW	IOR		;4  |
004556 16 48       12436                   DW	ILE		;5  <=
004558 23 48       12437                   DW	INE		;6  <>
00455A 0B 48       12438                   DW	IGE		;7  >=
00455C F4 47       12439                   DW	ILT		;8  <
00455E 2E 48       12440                   DW	IEQ		;9  =
004560 E2 46       12441                   DW	IMUL		;10 *
004562 3B 46       12442                   DW	IADD		;11 +
004564 FF 47       12443                   DW	IGT		;12 >
004566 25 46       12444                   DW	ISUB		;13 -
004568 5D 47       12445                   DW	IPOW		;14 ^
00456A 9A 46       12446                   DW	IDIV		;15 /
00456C             12447   ;
00456C 7E 48       12448   FTABLE:         DW	ABS		;16 ABS
00456E DA 4B       12449                   DW	ACS		;17 ACS
004570 36 4B       12450                   DW	ASN		;18 ASN
004572 5B 4B       12451                   DW	ATN		;19 ATN
004574 74 49       12452                   DW	COS		;20 COS
004576 A8 48       12453                   DW	DEG		;21 DEG
004578 19 4A       12454                   DW	EXP		;22 EXP
00457A EE 48       12455                   DW	INT_		;23 INT_
00457C A4 4A       12456                   DW	LN		;24 LN
00457E 24 4B       12457                   DW	LOG		;25 LOG
004580 89 48       12458                   DW	CPL_		;26 NOT
004582 B0 48       12459                   DW	RAD		;27 RAD
004584 C6 48       12460                   DW	SGN		;28 SGN
004586 7F 49       12461                   DW	SIN		;29 SIN
004588 04 49       12462                   DW	SQR		;30 SQR
00458A 57 49       12463                   DW	TAN		;31 TAN
00458C             12464   ;
00458C 21 4F       12465                   DW	ZEROmat		;32 ZERO
00458E F8 49       12466                   DW	FONE		;33 FONE
004590 32 48       12467                   DW	TRUE		;34 TRUE
004592 9C 48       12468                   DW	PI		;35 PI
004594             12469   ;
004594 D6 48       12470                   DW	VAL		;36 VAL
004596 E2 4B       12471                   DW	STRmat		;37 STR$
004598             12472   ;
004598 F7 4D       12473                   DW	SFIXmat		;38 FIX
00459A B2 4E       12474                   DW	SFLOAT		;39 FLOAT
00459C             12475   ;
00459C F7 4E       12476                   DW	FTEST		;40 TEST
00459E 08 4F       12477                   DW	FCOMP		;41 COMPARE
0045A0             12478   ;
0045A0 3D 48       12479                   DW	ISHL		;42 <<
0045A2 3D 48       12480                   DW	ISHX		;43 <<<
0045A4 4A 48       12481                   DW	ISAR		;44 >>
0045A6 5C 48       12482                   DW	ISHR		;45 >>>
0045A8             12483   ;
0045A8 C8 45       12484   RTABLE:         DW	FAND		;& (FLOATING-POINT)
0045AA 15 46       12485                   DW	FBDIV		;DIV
0045AC DA 45       12486                   DW	FEOR		;EOR
0045AE FE 45       12487                   DW	FMOD		;MOD
0045B0 EC 45       12488                   DW	FOR		;|
0045B2 11 48       12489                   DW	FLE		;<=
0045B4 1E 48       12490                   DW	FNE		;<>
0045B6 06 48       12491                   DW	FGE		;>=
0045B8 EF 47       12492                   DW	FLT		;<
0045BA 29 48       12493                   DW	FEQ		;=
0045BC 0D 47       12494                   DW	FMUL		;*
0045BE 45 46       12495                   DW	FADD		;+
0045C0 FA 47       12496                   DW	FGT		;>
0045C2 2F 46       12497                   DW	FSUB		;-
0045C4 C5 47       12498                   DW	FPOW		;^
0045C6 9D 46       12499                   DW	FDIV		;/
0045C8             12500   ;
0045C8             12501   ;ARITHMETIC AND LOGICAL OPERATORS:
0045C8             12502   ;All take two arguments, in HLH'L'C & DED'E'B.
0045C8             12503   ;Output in HLH'L'C
0045C8             12504   ;All registers except IX, IY destroyed.
0045C8             12505   ; (N.B. FPOW destroys IX).
0045C8             12506   ;
0045C8             12507   ;FAND - Floating-point AND.
0045C8             12508   ;IAND - Integer AND.
0045C8             12509   ;
0045C8 CD EE 4D    12510   FAND:           CALL	FIX2
0045CB 7C          12511   IAND:           LD	A,H
0045CC A2          12512                   AND	D
0045CD 67          12513                   LD	H,A
0045CE 7D          12514                   LD	A,L
0045CF A3          12515                   AND	E
0045D0 6F          12516                   LD	L,A
0045D1 D9          12517                   EXX
0045D2 7C          12518                   LD	A,H
0045D3 A2          12519                   AND	D
0045D4 67          12520                   LD	H,A
0045D5 7D          12521                   LD	A,L
0045D6 A3          12522                   AND	E
0045D7 6F          12523                   LD	L,A
0045D8 D9          12524                   EXX
0045D9 C9          12525                   RET
0045DA             12526   ;
0045DA             12527   ;FEOR - Floating-point exclusive-OR.
0045DA             12528   ;IEOR - Integer exclusive-OR.
0045DA             12529   ;
0045DA CD EE 4D    12530   FEOR:           CALL	FIX2
0045DD 7C          12531   IEOR:           LD	A,H
0045DE AA          12532                   XOR	D
0045DF 67          12533                   LD	H,A
0045E0 7D          12534                   LD	A,L
0045E1 AB          12535                   XOR	E
0045E2 6F          12536                   LD	L,A
0045E3 D9          12537                   EXX
0045E4 7C          12538                   LD	A,H
0045E5 AA          12539                   XOR	D
0045E6 67          12540                   LD	H,A
0045E7 7D          12541                   LD	A,L
0045E8 AB          12542                   XOR	E
0045E9 6F          12543                   LD	L,A
0045EA D9          12544                   EXX
0045EB C9          12545                   RET
0045EC             12546   ;
0045EC             12547   ;FOR - Floating-point OR.
0045EC             12548   ;IOR - Integer OR.
0045EC             12549   ;
0045EC CD EE 4D    12550   FOR:            CALL	FIX2
0045EF 7C          12551   IOR:            LD	A,H
0045F0 B2          12552                   OR	D
0045F1 67          12553                   LD	H,A
0045F2 7D          12554                   LD	A,L
0045F3 B3          12555                   OR	E
0045F4 6F          12556                   LD	L,A
0045F5 D9          12557                   EXX
0045F6 7C          12558                   LD	A,H
0045F7 B2          12559                   OR	D
0045F8 67          12560                   LD	H,A
0045F9 7D          12561                   LD	A,L
0045FA B3          12562                   OR	E
0045FB 6F          12563                   LD	L,A
0045FC D9          12564                   EXX
0045FD C9          12565                   RET
0045FE             12566   ;
0045FE             12567   ;FMOD - Floating-point remainder.
0045FE             12568   ;IMOD - Integer remainder.
0045FE             12569   ;
0045FE CD EE 4D    12570   FMOD:           CALL	FIX2
004601 7C          12571   IMOD:           LD	A,H
004602 AA          12572                   XOR	D		;DIV RESULT SIGN
004603 CB 7C       12573                   BIT	7,H
004605 CD F5 50    12574                   CALL	ABS2		;MAKE BOTH POSITIVE
004608 3E DF       12575                   LD	A,-33
00460A CD 31 50    12576                   CALL	DIVA		;DIVIDE
00460D D9          12577                   EXX
00460E 0E 00       12578                   LD	C,0		;INTEGER MARKER
004610 08          12579                   EX	AF,AF'
004611 C8          12580                   RET	Z
004612 C3 06 4E    12581                   JP	NEGATE
004615             12582   ;
004615             12583   ;BDIV - Integer division.
004615             12584   ;
004615 CD EE 4D    12585   FBDIV:          CALL	FIX2
004618 CD 01 46    12586   IBDIV:          CALL	IMOD
00461B B7          12587                   OR	A
00461C CD DC 4E    12588                   CALL	SWAP
00461F 0E 00       12589                   LD	C,0
004621 F0          12590                   RET	P
004622 C3 06 4E    12591                   JP	NEGATE
004625             12592   ;
004625             12593   ;ISUB - Integer subtraction.
004625             12594   ;FSUB - Floating point subtraction with rounding.
004625             12595   ;
004625 CD 64 4F    12596   ISUB:           CALL	SUB
004628 E0          12597                   RET	PO
004629 CD 5E 4F    12598                   CALL	ADD
00462C CD A9 4E    12599                   CALL	FLOAT2
00462F 7A          12600   FSUB:           LD	A,D
004630 EE 80       12601                   XOR	80H		;CHANGE SIGN THEN ADD
004632 57          12602                   LD	D,A
004633 18 10       12603                   JR	FADD
004635             12604   ;
004635             12605   ;Reverse subtract.
004635             12606   ;
004635 7C          12607   RSUB:           LD	A,H
004636 EE 80       12608                   XOR	80H
004638 67          12609                   LD	H,A
004639 18 0A       12610                   JR	FADD
00463B             12611   ;
00463B             12612   ;IADD - Integer addition.
00463B             12613   ;FADD - Floating point addition with rounding.
00463B             12614   ;
00463B CD 5E 4F    12615   IADD:           CALL	ADD
00463E E0          12616                   RET	PO
00463F CD 64 4F    12617                   CALL	SUB
004642 CD A9 4E    12618                   CALL	FLOAT2
004645 05          12619   FADD:           DEC	B
004646 04          12620                   INC	B
004647 C8          12621                   RET	Z		;ARG 2 ZERO
004648 0D          12622                   DEC	C
004649 0C          12623                   INC	C
00464A CA DC 4E    12624                   JP	Z,SWAP		;ARG 1 ZERO
00464D D9          12625                   EXX
00464E 01 00 00    12626                   LD	BC,0		;INITIALISE
004651 D9          12627                   EXX
004652 7C          12628                   LD	A,H
004653 AA          12629                   XOR	D		;XOR SIGNS
004654 F5          12630                   PUSH	AF
004655 78          12631                   LD	A,B
004656 B9          12632                   CP	C		;COMPARE EXPONENTS
004657 DC DC 4E    12633                   CALL	C,SWAP		;MAKE DED'E'B LARGEST
00465A 78          12634                   LD	A,B
00465B CB FC       12635                   SET	7,H		;IMPLIED 1
00465D C4 DE 4D    12636                   CALL	NZ,FIX		;ALIGN
004660 F1          12637                   POP	AF
004661 7A          12638                   LD	A,D		;SIGN OF LARGER
004662 CB FA       12639                   SET	7,D		;IMPLIED 1
004664 FA 71 46    12640                   JP	M,FADD3		;SIGNS DIFFERENT
004667 CD 5E 4F    12641                   CALL	ADD		;HLH'L'=HLH'L'+DED'E'
00466A DC E4 4E    12642                   CALL	C,DIV2		;NORMALISE
00466D CB FC       12643                   SET	7,H
00466F 18 0A       12644                   JR	FADD4
004671             12645   ;
004671 CD 64 4F    12646   FADD3:          CALL	SUB		;HLH'L'=HLH'L'-DED'E'
004674 DC 1A 4E    12647                   CALL	C,NEG		;NEGATE HLH'L'B'C'
004677 CD 86 4E    12648                   CALL	FLO48
00467A 2F          12649                   CPL			;CHANGE RESULT SIGN
00467B D9          12650   FADD4:          EXX
00467C EB          12651                   EX	DE,HL
00467D 21 00 80    12652                   LD	HL,8000H
004680 B7          12653                   OR	A		;CLEAR CARRY
004681 ED 42       12654                   SBC	HL,BC
004683 EB          12655                   EX	DE,HL
004684 D9          12656                   EXX
004685 CC D6 4E    12657                   CALL	Z,ODD		;ROUND UNBIASSED
004688 DC C8 4E    12658                   CALL	C,ADD1		;ROUND UP
00468B DC F0 4E    12659                   CALL	C,INCC
00468E CB BC       12660                   RES	7,H
004690 0D          12661                   DEC	C
004691 0C          12662                   INC	C
004692 CA 21 4F    12663                   JP	Z,ZEROmat
004695 B7          12664                   OR	A		;RESULT SIGNQ
004696 F0          12665                   RET	P		;POSITIVE
004697 CB FC       12666                   SET	7,H		;NEGATIVE
004699 C9          12667                   RET
00469A             12668   ;
00469A             12669   ;IDIV - Integer division.
00469A             12670   ;FDIV - Floating point division with rounding.
00469A             12671   ;
00469A CD A9 4E    12672   IDIV:           CALL	FLOAT2
00469D 05          12673   FDIV:           DEC	B		;TEST FOR ZERO
00469E 04          12674                   INC	B
00469F 3E 12       12675                   LD	A,DIVBY0
0046A1 CA 26 45    12676                   JP	Z,ERROR_mat		;"Division by zero"
0046A4 0D          12677                   DEC	C		;TEST FOR ZERO
0046A5 0C          12678                   INC	C
0046A6 C8          12679                   RET	Z
0046A7 7C          12680                   LD	A,H
0046A8 AA          12681                   XOR	D		;CALC. RESULT SIGN
0046A9 08          12682                   EX	AF,AF'		;SAVE SIGN
0046AA CB FA       12683                   SET	7,D		;REPLACE IMPLIED 1's
0046AC CB FC       12684                   SET	7,H
0046AE C5          12685                   PUSH	BC		;SAVE EXPONENTS
0046AF 42          12686                   LD	B,D		;LOAD REGISTERS
0046B0 4B          12687                   LD	C,E
0046B1 11 00 00    12688                   LD	DE,0
0046B4 D9          12689                   EXX
0046B5 42          12690                   LD	B,D
0046B6 4B          12691                   LD	C,E
0046B7 11 00 00    12692                   LD	DE,0
0046BA 3E E0       12693                   LD	A,-32		;LOOP COUNTER
0046BC CD 31 50    12694                   CALL	DIVA		;DIVIDE
0046BF D9          12695                   EXX
0046C0 CB 7A       12696                   BIT	7,D
0046C2 D9          12697                   EXX
0046C3 CC 4C 50    12698                   CALL	Z,DIVB		;NORMALISE & INC A
0046C6 EB          12699                   EX	DE,HL
0046C7 D9          12700                   EXX
0046C8 CB 38       12701                   SRL	B		;DIVISOR/2
0046CA CB 19       12702                   RR	C
0046CC B7          12703                   OR	A		;CLEAR CARRY
0046CD ED 42       12704                   SBC	HL,BC		;REMAINDER-DIVISOR/2
0046CF 3F          12705                   CCF
0046D0 EB          12706                   EX	DE,HL		;RESULT IN HLH'L'
0046D1 CC D6 4E    12707                   CALL	Z,ODD		;ROUND UNBIASSED
0046D4 DC C8 4E    12708                   CALL	C,ADD1		;ROUND UP
0046D7 C1          12709                   POP	BC		;RESTORE EXPONENTS
0046D8 DC F0 4E    12710                   CALL	C,INCC
0046DB 1F          12711                   RRA			;LSB OF A TO CARRY
0046DC 79          12712                   LD	A,C		;COMPUTE NEW EXPONENT
0046DD 98          12713                   SBC	A,B
0046DE 3F          12714                   CCF
0046DF C3 46 47    12715                   JP	CHKOVF
0046E2             12716   ;
0046E2             12717   ;IMUL - Integer multiplication.
0046E2             12718   ;
0046E2 7C          12719   IMUL:           LD	A,H
0046E3 AA          12720                   XOR	D
0046E4 CD F5 50    12721                   CALL	ABS2		;MAKE BOTH POSITIVE
0046E7 3E DF       12722                   LD	A,-33
0046E9 CD 5F 50    12723                   CALL	MULA		;MULTIPLY
0046EC D9          12724                   EXX
0046ED 0E BF       12725                   LD	C,191		;PRESET EXPONENT
0046EF CD 01 4F    12726                   CALL	TESTmat		;TEST RANGE
0046F2 20 0D       12727                   JR	NZ,IMUL1	;TOO BIG
0046F4 CB 7A       12728                   BIT	7,D
0046F6 20 09       12729                   JR	NZ,IMUL1
0046F8 CD DC 4E    12730                   CALL	SWAP
0046FB 4A          12731                   LD	C,D		;INTEGER MARKER
0046FC 08          12732                   EX	AF,AF'
0046FD F0          12733                   RET	P
0046FE C3 06 4E    12734                   JP	NEGATE
004701             12735   ;
004701 0D          12736   IMUL1:          DEC	C
004702 CD C8 50    12737                   CALL	SLA8
004705 F2 01 47    12738                   JP	P,IMUL1		;NORMALISE
004708 08          12739                   EX	AF,AF'
004709 F8          12740                   RET	M
00470A CB BC       12741                   RES	7,H		;POSITIVE
00470C C9          12742                   RET
00470D             12743   ;
00470D             12744   ;FMUL - Floating point multiplication with rounding.
00470D             12745   ;
00470D 05          12746   FMUL:           DEC	B		;TEST FOR ZERO
00470E 04          12747                   INC	B
00470F CA 21 4F    12748                   JP	Z,ZEROmat
004712 0D          12749                   DEC	C		;TEST FOR ZERO
004713 0C          12750                   INC	C
004714 C8          12751                   RET	Z
004715 7C          12752                   LD	A,H
004716 AA          12753                   XOR	D		;CALC. RESULT SIGN
004717 08          12754                   EX	AF,AF'
004718 CB FA       12755                   SET	7,D		;REPLACE IMPLIED 1's
00471A CB FC       12756                   SET	7,H
00471C C5          12757                   PUSH	BC		;SAVE EXPONENTS
00471D 44          12758                   LD	B,H		;LOAD REGISTERS
00471E 4D          12759                   LD	C,L
00471F 21 00 00    12760                   LD	HL,0
004722 D9          12761                   EXX
004723 44          12762                   LD	B,H
004724 4D          12763                   LD	C,L
004725 21 00 00    12764                   LD	HL,0
004728 3E E0       12765                   LD	A,-32		;LOOP COUNTER
00472A CD 5F 50    12766                   CALL	MULA		;MULTIPLY
00472D DC 73 50    12767                   CALL	C,MULB		;NORMALISE & INC A
004730 D9          12768                   EXX
004731 E5          12769                   PUSH	HL
004732 21 00 80    12770                   LD	HL,8000H
004735 B7          12771                   OR	A		;CLEAR CARRY
004736 ED 52       12772                   SBC	HL,DE
004738 E1          12773                   POP	HL
004739 CC D6 4E    12774                   CALL	Z,ODD		;ROUND UNBIASSED
00473C DC C8 4E    12775                   CALL	C,ADD1		;ROUND UP
00473F C1          12776                   POP	BC		;RESTORE EXPONENTS
004740 DC F0 4E    12777                   CALL	C,INCC
004743 1F          12778                   RRA			;LSB OF A TO CARRY
004744 79          12779                   LD	A,C		;COMPUTE NEW EXPONENT
004745 88          12780                   ADC	A,B
004746 38 05       12781   CHKOVF:         JR	C,CHKO1
004748 F2 21 4F    12782                   JP	P,ZEROmat		;UNDERFLOW
00474B 18 03       12783                   JR	CHKO2
00474D FA F2 4E    12784   CHKO1:          JP	M,OFLOW		;OVERFLOW
004750 C6 80       12785   CHKO2:          ADD	A,80H
004752 4F          12786                   LD	C,A
004753 CA 21 4F    12787                   JP	Z,ZEROmat
004756 08          12788                   EX	AF,AF'		;RESTORE SIGN BIT
004757 CB BC       12789                   RES	7,H
004759 F0          12790                   RET	P
00475A CB FC       12791                   SET	7,H
00475C C9          12792                   RET
00475D             12793   ;
00475D             12794   ;IPOW - Integer involution.
00475D             12795   ;
00475D CD DC 4E    12796   IPOW:           CALL	SWAP
004760 CB 7C       12797                   BIT	7,H
004762 F5          12798                   PUSH	AF		;SAVE SIGN
004763 C4 06 4E    12799                   CALL	NZ,NEGATE
004766 48          12800   IPOW0:          LD	C,B
004767 06 20       12801                   LD	B,32		;LOOP COUNTER
004769 CD 7B 4F    12802   IPOW1:          CALL	X2
00476C 38 08       12803                   JR	C,IPOW2
00476E 10 F9       12804                   DJNZ	IPOW1
004770 F1          12805                   POP	AF
004771 D9          12806                   EXX
004772 2C          12807                   INC	L		;RESULT=1
004773 D9          12808                   EXX
004774 4C          12809                   LD	C,H
004775 C9          12810                   RET
004776             12811   ;
004776 F1          12812   IPOW2:          POP	AF
004777 C5          12813                   PUSH	BC
004778 EB          12814                   EX	DE,HL
004779 E5          12815                   PUSH	HL
00477A D9          12816                   EXX
00477B EB          12817                   EX	DE,HL
00477C E5          12818                   PUSH	HL
00477D D9          12819                   EXX
00477E DD 21 00 00 12820                   LD	IX,0
004782 DD 39       12821                   ADD	IX,SP
004784 28 34       12822                   JR	Z,IPOW4
004786 C5          12823                   PUSH	BC
004787 D9          12824                   EXX
004788 D5          12825                   PUSH	DE
004789 D9          12826                   EXX
00478A D5          12827                   PUSH	DE
00478B CD B2 4E    12828                   CALL	SFLOAT
00478E CD 90 4A    12829                   CALL	RECIP
004791 CD 06 32    12830                   CALL	STORE5
004794 18 1D       12831                   JR	IPOW5
004796             12832   ;
004796 C5          12833   IPOW3:          PUSH	BC
004797 D9          12834                   EXX
004798 CB 23       12835                   SLA	E
00479A CB 12       12836                   RL	D
00479C D5          12837                   PUSH	DE
00479D D9          12838                   EXX
00479E CB 13       12839                   RL	E
0047A0 CB 12       12840                   RL	D
0047A2 D5          12841                   PUSH	DE
0047A3 3E 0A       12842                   LD	A,'*' & 0FH
0047A5 F5          12843                   PUSH	AF
0047A6 CD 8D 4F    12844                   CALL	COPY
0047A9 CD 2C 45    12845                   CALL	OP		;SQUARE
0047AC F1          12846                   POP	AF
0047AD CD F1 19    12847                   CALL	DLOAD5
0047B0 DC 2C 45    12848                   CALL	C,OP		;MULTIPLY BY X
0047B3 D1          12849   IPOW5:          POP	DE
0047B4 D9          12850                   EXX
0047B5 D1          12851                   POP	DE
0047B6 D9          12852                   EXX
0047B7 79          12853                   LD	A,C
0047B8 C1          12854                   POP	BC
0047B9 4F          12855                   LD	C,A
0047BA 10 DA       12856   IPOW4:          DJNZ	IPOW3
0047BC F1          12857                   POP	AF
0047BD F1          12858                   POP	AF
0047BE F1          12859                   POP	AF
0047BF C9          12860                   RET
0047C0             12861   ;
0047C0 F1          12862   FPOW0:          POP	AF
0047C1 F1          12863                   POP	AF
0047C2 F1          12864                   POP	AF
0047C3 18 A1       12865                   JR	IPOW0
0047C5             12866   ;
0047C5             12867   ;FPOW - Floating-point involution.
0047C5             12868   ;
0047C5 CB 7A       12869   FPOW:           BIT	7,D
0047C7 F5          12870                   PUSH	AF
0047C8 CD DC 4E    12871                   CALL	SWAP
0047CB CD 9B 4F    12872                   CALL	PUSH5
0047CE 0D          12873                   DEC	C
0047CF 0C          12874                   INC	C
0047D0 28 EE       12875                   JR	Z,FPOW0
0047D2 3E 9E       12876                   LD	A,158
0047D4 B9          12877                   CP	C
0047D5 38 08       12878                   JR	C,FPOW1
0047D7 3C          12879                   INC	A
0047D8 CD DE 4D    12880                   CALL	FIX
0047DB 08          12881                   EX	AF,AF'
0047DC F2 C0 47    12882                   JP	P,FPOW0
0047DF CD DC 4E    12883   FPOW1:          CALL	SWAP
0047E2 CD A7 4A    12884                   CALL	LN0
0047E5 CD A4 4F    12885                   CALL	POP5
0047E8 F1          12886                   POP	AF
0047E9 CD 0D 47    12887                   CALL	FMUL
0047EC C3 1C 4A    12888                   JP	EXP0
0047EF             12889   ;
0047EF             12890   ;Integer and floating-point compare.
0047EF             12891   ;Result is TRUE (-1) or FALSE (0).
0047EF             12892   ;
0047EF CD 2B 4F    12893   FLT:            CALL	FCP
0047F2 18 03       12894                   JR	ILT1
0047F4 CD 1E 4F    12895   ILT:            CALL	ICP
0047F7 D0          12896   ILT1:           RET	NC
0047F8 18 38       12897                   JR	TRUE
0047FA             12898   ;
0047FA CD 2B 4F    12899   FGT:            CALL	FCP
0047FD 18 03       12900                   JR	IGT1
0047FF CD 1E 4F    12901   IGT:            CALL	ICP
004802 C8          12902   IGT1:           RET	Z
004803 D8          12903                   RET	C
004804 18 2C       12904                   JR	TRUE
004806             12905   ;
004806 CD 2B 4F    12906   FGE:            CALL	FCP
004809 18 03       12907                   JR	IGE1
00480B CD 1E 4F    12908   IGE:            CALL	ICP
00480E D8          12909   IGE1:           RET	C
00480F 18 21       12910                   JR	TRUE
004811             12911   ;
004811 CD 2B 4F    12912   FLE:            CALL	FCP
004814 18 03       12913                   JR	ILE1
004816 CD 1E 4F    12914   ILE:            CALL	ICP
004819 28 17       12915   ILE1:           JR	Z,TRUE
00481B D0          12916                   RET	NC
00481C 18 14       12917                   JR	TRUE
00481E             12918   ;
00481E CD 2B 4F    12919   FNE:            CALL	FCP
004821 18 03       12920                   JR	INE1
004823 CD 1E 4F    12921   INE:            CALL	ICP
004826 C8          12922   INE1:           RET	Z
004827 18 09       12923                   JR	TRUE
004829             12924   ;
004829 CD 2B 4F    12925   FEQ:            CALL	FCP
00482C 18 03       12926                   JR	IEQ1
00482E CD 1E 4F    12927   IEQ:            CALL	ICP
004831 C0          12928   IEQ1:           RET	NZ
004832 21 FF FF    12929   TRUE:           LD	HL,-1
004835 D9          12930                   EXX
004836 21 FF FF    12931                   LD	HL,-1
004839 D9          12932                   EXX
00483A AF          12933                   XOR	A
00483B 4F          12934                   LD	C,A
00483C C9          12935                   RET
00483D             12936   ;
00483D             12937   ;Integer shifts:
00483D             12938   ;
00483D             12939   ISHX:
00483D CD 6E 48    12940   ISHL:           CALL	SHIFTS
004840 28 07       12941                   JR	Z,SHRET
004842 D9          12942   ISHL1:          EXX
004843 29          12943                   ADD	HL,HL
004844 D9          12944                   EXX
004845 ED 6A       12945                   ADC	HL,HL
004847 10 F9       12946                   DJNZ	ISHL1
004849 C9          12947   SHRET:          RET
00484A             12948   ;
00484A CD 6E 48    12949   ISAR:           CALL	SHIFTS
00484D 28 FA       12950                   JR	Z,SHRET
00484F CB 2C       12951   ISAR1:          SRA	H
004851 CB 1D       12952                   RR	L
004853 D9          12953                   EXX
004854 CB 1C       12954                   RR	H
004856 CB 1D       12955                   RR	L
004858 D9          12956                   EXX
004859 10 F4       12957                   DJNZ	ISAR1
00485B C9          12958                   RET
00485C             12959   ;
00485C CD 6E 48    12960   ISHR:           CALL	SHIFTS
00485F 28 E8       12961                   JR	Z,SHRET
004861 CB 3C       12962   ISHR1:          SRL	H
004863 CB 1D       12963                   RR	L
004865 D9          12964                   EXX
004866 CB 1C       12965                   RR	H
004868 CB 1D       12966                   RR	L
00486A D9          12967                   EXX
00486B 10 F4       12968                   DJNZ	ISHR1
00486D C9          12969                   RET
00486E             12970   ;
00486E CD EE 4D    12971   SHIFTS:         CALL	FIX2
004871 7A          12972                   LD	A,D
004872 B3          12973                   OR	E
004873 D9          12974                   EXX
004874 B2          12975                   OR	D
004875 7B          12976                   LD	A,E
004876 D9          12977                   EXX
004877 06 20       12978                   LD	B,32
004879 20 02       12979                   JR	NZ,SHMAX
00487B 47          12980                   LD	B,A
00487C B7          12981                   OR	A
00487D C9          12982   SHMAX:          RET
00487E             12983   ;
00487E             12984   ;FUNCTIONS:
00487E             12985   ;
00487E             12986   ;Result returned in HLH'L'C (floating point)
00487E             12987   ;Result returned in HLH'L' (C=0) (integer)
00487E             12988   ;All registers except IY destroyed.
00487E             12989   ;
00487E             12990   ;ABS - Absolute value
00487E             12991   ;Result is numeric, variable type.
00487E             12992   ;
00487E CB 7C       12993   ABS:            BIT	7,H
004880 C8          12994                   RET	Z		;POSITIVE/ZERO
004881 0D          12995                   DEC	C
004882 0C          12996                   INC	C
004883 CA 06 4E    12997                   JP	Z,NEGATE	;INTEGER
004886 CB BC       12998                   RES	7,H
004888 C9          12999                   RET
004889             13000   ;
004889             13001   ;NOT - Complement integer.
004889             13002   ;Result is integer numeric.
004889             13003   ;
004889 CD F7 4D    13004   CPL_:           CALL	SFIXmat
00488C 7C          13005                   LD	A,H
00488D 2F          13006                   CPL
00488E 67          13007                   LD	H,A
00488F 7D          13008                   LD	A,L
004890 2F          13009                   CPL
004891 6F          13010                   LD	L,A
004892 D9          13011                   EXX
004893 7C          13012                   LD	A,H
004894 2F          13013                   CPL
004895 67          13014                   LD	H,A
004896 7D          13015                   LD	A,L
004897 2F          13016                   CPL
004898 6F          13017                   LD	L,A
004899 D9          13018                   EXX
00489A AF          13019                   XOR	A		;NUMERIC MARKER
00489B C9          13020                   RET
00489C             13021   ;
00489C             13022   ;PI - Return PI (3.141592654)
00489C             13023   ;Result is floating-point numeric.
00489C             13024   ;
00489C 21 0F 49    13025   PI:             LD	HL,490FH
00489F D9          13026                   EXX
0048A0 21 A2 DA    13027                   LD	HL,0DAA2H
0048A3 D9          13028                   EXX
0048A4 0E 81       13029                   LD	C,81H
0048A6 AF          13030                   XOR	A		;NUMERIC MARKER
0048A7 C9          13031                   RET
0048A8             13032   ;
0048A8             13033   ;DEG - Convert radians to degrees
0048A8             13034   ;Result is floating-point numeric.
0048A8             13035   ;
0048A8 CD B8 48    13036   DEG:            CALL	FPI180
0048AB CD 0D 47    13037                   CALL	FMUL
0048AE AF          13038                   XOR	A
0048AF C9          13039                   RET
0048B0             13040   ;
0048B0             13041   ;RAD - Convert degrees to radians
0048B0             13042   ;Result is floating-point numeric.
0048B0             13043   ;
0048B0 CD B8 48    13044   RAD:            CALL	FPI180
0048B3 CD 9D 46    13045                   CALL	FDIV
0048B6 AF          13046                   XOR	A
0048B7 C9          13047                   RET
0048B8             13048   ;
0048B8             13049   ;180/PI
0048B8             13050   ;
0048B8 CD B2 4E    13051   FPI180:         CALL	SFLOAT
0048BB 11 2E 65    13052                   LD	DE,652EH
0048BE D9          13053                   EXX
0048BF 11 D3 E0    13054                   LD	DE,0E0D3H
0048C2 D9          13055                   EXX
0048C3 06 85       13056                   LD	B,85H
0048C5 C9          13057                   RET
0048C6             13058   ;
0048C6             13059   ;SGN - Return -1, 0 or +1
0048C6             13060   ;Result is integer numeric.
0048C6             13061   ;
0048C6 CD 01 4F    13062   SGN:            CALL	TESTmat
0048C9 B1          13063                   OR	C
0048CA C8          13064                   RET	Z		;ZERO
0048CB CB 7C       13065                   BIT	7,H
0048CD C2 32 48    13066                   JP	NZ,TRUE		;-1
0048D0 CD 21 4F    13067                   CALL	ZEROmat
0048D3 C3 C8 4E    13068                   JP	ADD1		;1
0048D6             13069   ;
0048D6             13070   ;VAL - Return numeric value of string.
0048D6             13071   ;Input: ASCII string at IX
0048D6             13072   ;Result is variable type numeric.
0048D6             13073   ;
0048D6 CD E3 50    13074   VAL:            CALL	SIGNQ
0048D9 F5          13075                   PUSH	AF
0048DA CD 34 4D    13076                   CALL	CON
0048DD F1          13077                   POP	AF
0048DE FE 2D       13078                   CP	'-'
0048E0 3E 00       13079                   LD	A,0		;NUMERIC MARKER
0048E2 C0          13080                   RET	NZ
0048E3 0D          13081                   DEC	C
0048E4 0C          13082                   INC	C
0048E5 CA 06 4E    13083                   JP	Z,NEGATE	;ZERO/INTEGER
0048E8 7C          13084                   LD	A,H
0048E9 EE 80       13085                   XOR	80H		;CHANGE SIGN (FP)
0048EB 67          13086                   LD	H,A
0048EC AF          13087                   XOR	A
0048ED C9          13088                   RET
0048EE             13089   ;
0048EE             13090   ;INT - Floor function
0048EE             13091   ;Result is integer numeric.
0048EE             13092   ;
0048EE 0D          13093   INT_:           DEC	C
0048EF 0C          13094                   INC	C
0048F0 C8          13095                   RET	Z		;ZERO/INTEGER
0048F1 3E 9F       13096                   LD	A,159
0048F3 44          13097                   LD	B,H		;B7=SIGN BIT
0048F4 CD DE 4D    13098                   CALL	FIX
0048F7 08          13099                   EX	AF,AF'
0048F8 A0          13100                   AND	B
0048F9 FC C8 4E    13101                   CALL	M,ADD1		;NEGATIVE NON-INTEGER
0048FC 78          13102                   LD	A,B
0048FD B7          13103                   OR	A
0048FE FC 06 4E    13104                   CALL	M,NEGATE
004901 AF          13105                   XOR	A
004902 4F          13106                   LD	C,A
004903 C9          13107                   RET
004904             13108   ;
004904             13109   ;SQR - square root
004904             13110   ;Result is floating-point numeric.
004904             13111   ;
004904 CD B2 4E    13112   SQR:            CALL	SFLOAT
004907 CB 7C       13113   SQR0:           BIT	7,H
004909 3E 15       13114                   LD	A,NGROOT
00490B C2 26 45    13115                   JP	NZ,ERROR_mat	;"-ve root"
00490E 0D          13116                   DEC	C
00490F 0C          13117                   INC	C
004910 C8          13118                   RET	Z		;ZERO
004911 CB FC       13119                   SET	7,H		;IMPLIED 1
004913 CB 41       13120                   BIT	0,C
004915 CC E4 4E    13121                   CALL	Z,DIV2		;MAKE EXPONENT ODD
004918 79          13122                   LD	A,C
004919 D6 80       13123                   SUB	80H
00491B CB 2F       13124                   SRA	A		;HALVE EXPONENT
00491D C6 80       13125                   ADD	A,80H
00491F 4F          13126                   LD	C,A
004920 C5          13127                   PUSH	BC		;SAVE EXPONENT
004921 EB          13128                   EX	DE,HL
004922 21 00 00    13129                   LD	HL,0
004925 44          13130                   LD	B,H
004926 4D          13131                   LD	C,L
004927 D9          13132                   EXX
004928 EB          13133                   EX	DE,HL
004929 21 00 00    13134                   LD	HL,0
00492C 44          13135                   LD	B,H
00492D 4D          13136                   LD	C,L
00492E 3E E1       13137                   LD	A,-31
004930 CD 92 50    13138                   CALL	SQRA		;ROOT
004933 D9          13139                   EXX
004934 CB 78       13140                   BIT	7,B
004936 D9          13141                   EXX
004937 CC 92 50    13142                   CALL	Z,SQRA		;NORMALISE & INC A
00493A CD B1 50    13143                   CALL	SQRB
00493D B7          13144                   OR	A		;CLEAR CARRY
00493E CD 4C 50    13145                   CALL	DIVB
004941 CB 1B       13146                   RR	E		;LSB TO CARRY
004943 60          13147                   LD	H,B
004944 69          13148                   LD	L,C
004945 D9          13149                   EXX
004946 60          13150                   LD	H,B
004947 69          13151                   LD	L,C
004948 DC C8 4E    13152                   CALL	C,ADD1		;ROUND UP
00494B C1          13153                   POP	BC		;RESTORE EXPONENT
00494C DC F0 4E    13154                   CALL	C,INCC
00494F 1F          13155                   RRA
004950 9F          13156                   SBC	A,A
004951 81          13157                   ADD	A,C
004952 4F          13158                   LD	C,A
004953 CB BC       13159                   RES	7,H		;POSITIVE
004955 AF          13160                   XOR	A
004956 C9          13161                   RET
004957             13162   ;
004957             13163   ;TAN - Tangent function
004957             13164   ;Result is floating-point numeric.
004957             13165   ;
004957 CD B2 4E    13166   TAN:            CALL	SFLOAT
00495A CD 9B 4F    13167                   CALL	PUSH5
00495D CD 77 49    13168                   CALL	COS0
004960 CD A4 4F    13169                   CALL	POP5
004963 CD 9B 4F    13170                   CALL	PUSH5
004966 CD DC 4E    13171                   CALL	SWAP
004969 CD 82 49    13172                   CALL	SIN0
00496C CD A4 4F    13173                   CALL	POP5
00496F CD 9D 46    13174                   CALL	FDIV
004972 AF          13175                   XOR	A		;NUMERIC MARKER
004973 C9          13176                   RET
004974             13177   ;
004974             13178   ;COS - Cosine function
004974             13179   ;Result is floating-point numeric.
004974             13180   ;
004974 CD B2 4E    13181   COS:            CALL	SFLOAT
004977 CD 27 4E    13182   COS0:           CALL	SCALE
00497A 1C          13183                   INC	E
00497B 1C          13184                   INC	E
00497C 7B          13185                   LD	A,E
00497D 18 0E       13186                   JR	SIN1
00497F             13187   ;
00497F             13188   ;SIN - Sine function
00497F             13189   ;Result is floating-point numeric.
00497F             13190   ;
00497F CD B2 4E    13191   SIN:            CALL	SFLOAT
004982 E5          13192   SIN0:           PUSH	HL		;H7=SIGN
004983 CD 27 4E    13193                   CALL	SCALE
004986 F1          13194                   POP	AF
004987 07          13195                   RLCA
004988 07          13196                   RLCA
004989 07          13197                   RLCA
00498A E6 04       13198                   AND	4
00498C AB          13199                   XOR	E
00498D F5          13200   SIN1:           PUSH	AF		;OCTANT
00498E CB BC       13201                   RES	7,H
004990 1F          13202                   RRA
004991 CD 0E 4A    13203                   CALL	PIBY4
004994 DC 35 46    13204                   CALL	C,RSUB		;X=(PI/4)-X
004997 F1          13205                   POP	AF
004998 F5          13206                   PUSH	AF
004999 E6 03       13207                   AND	3
00499B E2 CC 49    13208                   JP	PO,SIN2		;USE COSINE APPROX.
00499E CD 9B 4F    13209                   CALL	PUSH5		;SAVE X
0049A1 CD 95 4F    13210                   CALL	SQUARE		;PUSH X*X
0049A4 CD CE 4F    13211                   CALL	POLY
0049A7 B7 A8       13212                   DW	0A8B7H		;a(8)
0049A9 11 36       13213                   DW	3611H
0049AB 6D          13214                   DB	6DH
0049AC 26 DE       13215                   DW	0DE26H		;a(6)
0049AE 05 D0       13216                   DW	0D005H
0049B0 73          13217                   DB	73H
0049B1 C0 80       13218                   DW	80C0H		;a(4)
0049B3 88 08       13219                   DW	888H
0049B5 79          13220                   DB	79H
0049B6 9D AA       13221                   DW	0AA9DH		;a(2)
0049B8 AA AA       13222                   DW	0AAAAH
0049BA 7D          13223                   DB	7DH
0049BB 00 00       13224                   DW	0		;a(0)
0049BD 00 00       13225                   DW	0
0049BF 80          13226                   DB	80H
0049C0 CD A4 4F    13227                   CALL	POP5
0049C3 CD A4 4F    13228                   CALL	POP5
0049C6 CD 0D 47    13229                   CALL	FMUL
0049C9 C3 EE 49    13230                   JP	SIN3
0049CC             13231   ;
0049CC CD 95 4F    13232   SIN2:           CALL	SQUARE		;PUSH X*X
0049CF CD CE 4F    13233                   CALL	POLY
0049D2 71 D5       13234                   DW	0D571H		;b(8)
0049D4 78 4C       13235                   DW	4C78H
0049D6 70          13236                   DB	70H
0049D7 AF 94       13237                   DW	94AFH		;b(6)
0049D9 03 B6       13238                   DW	0B603H
0049DB 76          13239                   DB	76H
0049DC C8 9C       13240                   DW	9CC8H		;b(4)
0049DE AA 2A       13241                   DW	2AAAH
0049E0 7B          13242                   DB	7BH
0049E1 DD FF       13243                   DW	0FFDDH		;b(2)
0049E3 FF FF       13244                   DW	0FFFFH
0049E5 7E          13245                   DB	7EH
0049E6 00 00       13246                   DW	0		;b(0)
0049E8 00 00       13247                   DW	0
0049EA 80          13248                   DB	80H
0049EB CD A4 4F    13249                   CALL	POP5
0049EE F1          13250   SIN3:           POP	AF
0049EF E6 04       13251                   AND	4
0049F1 C8          13252                   RET	Z
0049F2 0D          13253                   DEC	C
0049F3 0C          13254                   INC	C
0049F4 C8          13255                   RET	Z		;ZERO
0049F5 CB FC       13256                   SET	7,H		;MAKE NEGATIVE
0049F7 C9          13257                   RET
0049F8             13258   ;
0049F8             13259   ;Floating-point one:
0049F8             13260   ;
0049F8 21 00 00    13261   FONE:           LD	HL,0
0049FB D9          13262                   EXX
0049FC 21 00 00    13263                   LD	HL,0
0049FF D9          13264                   EXX
004A00 0E 80       13265                   LD	C,80H
004A02 C9          13266                   RET
004A03             13267   ;
004A03 11 00 00    13268   DONE:           LD	DE,0
004A06 D9          13269                   EXX
004A07 11 00 00    13270                   LD	DE,0
004A0A D9          13271                   EXX
004A0B 06 80       13272                   LD	B,80H
004A0D C9          13273                   RET
004A0E             13274   ;
004A0E 11 0F 49    13275   PIBY4:          LD	DE,490FH
004A11 D9          13276                   EXX
004A12 11 A2 DA    13277                   LD	DE,0DAA2H
004A15 D9          13278                   EXX
004A16 06 7F       13279                   LD	B,7FH
004A18 C9          13280                   RET
004A19             13281   ;
004A19             13282   ;EXP - Exponential function
004A19             13283   ;Result is floating-point numeric.
004A19             13284   ;
004A19 CD B2 4E    13285   EXP:            CALL	SFLOAT
004A1C CD 99 4A    13286   EXP0:           CALL	LN2		;LN(2)
004A1F D9          13287                   EXX
004A20 1D          13288                   DEC	E
004A21 01 CF D1    13289                   LD	BC,0D1CFH	;0.6931471805599453
004A24 D9          13290                   EXX
004A25 E5          13291                   PUSH	HL		;H7=SIGN
004A26 CD 37 4E    13292                   CALL	MOD48		;"MODULUS"
004A29 F1          13293                   POP	AF
004A2A CB 7B       13294                   BIT	7,E
004A2C 28 09       13295                   JR	Z,EXP1
004A2E 17          13296                   RLA
004A2F DA 21 4F    13297                   JP	C,ZEROmat
004A32 3E 18       13298                   LD	A,EXPRNG
004A34 C3 26 45    13299                   JP	ERROR_mat		;"Exp range"
004A37             13300   ;
004A37 E6 80       13301   EXP1:           AND	80H
004A39 B3          13302                   OR	E
004A3A F5          13303                   PUSH	AF		;INTEGER PART
004A3B CB BC       13304                   RES	7,H
004A3D CD 9B 4F    13305                   CALL	PUSH5		;PUSH X*LN(2)
004A40 CD CE 4F    13306                   CALL	POLY
004A43 72 40       13307                   DW	4072H		;a(7)
004A45 2E 94       13308                   DW	942EH
004A47 73          13309                   DB	73H
004A48 65 6F       13310                   DW	6F65H		;a(6)
004A4A 4F 2E       13311                   DW	2E4FH
004A4C 76          13312                   DB	76H
004A4D 37 6D       13313                   DW	6D37H		;a(5)
004A4F 02 88       13314                   DW	8802H
004A51 79          13315                   DB	79H
004A52 12 E5       13316                   DW	0E512H		;a(4)
004A54 A0 2A       13317                   DW	2AA0H
004A56 7B          13318                   DB	7BH
004A57 14 4F       13319                   DW	4F14H		;a(3)
004A59 AA AA       13320                   DW	0AAAAH
004A5B 7D          13321                   DB	7DH
004A5C 56 FD       13322                   DW	0FD56H		;a(2)
004A5E FF 7F       13323                   DW	7FFFH
004A60 7E          13324                   DB	7EH
004A61 FE FF       13325                   DW	0FFFEH		;a(1)
004A63 FF FF       13326                   DW	0FFFFH
004A65 7F          13327                   DB	7FH
004A66 00 00       13328                   DW	0		;a(0)
004A68 00 00       13329                   DW	0
004A6A 80          13330                   DB	80H
004A6B CD A4 4F    13331                   CALL	POP5
004A6E F1          13332                   POP	AF
004A6F F5          13333                   PUSH	AF
004A70 F4 90 4A    13334                   CALL	P,RECIP		;X=1/X
004A73 F1          13335                   POP	AF
004A74 F2 7B 4A    13336                   JP	P,EXP4
004A77 E6 7F       13337                   AND	7FH
004A79 ED 44       13338                   NEG
004A7B C6 80       13339   EXP4:           ADD	A,80H
004A7D 81          13340                   ADD	A,C
004A7E 38 05       13341                   JR	C,EXP2
004A80 F2 21 4F    13342                   JP	P,ZEROmat		;UNDERFLOW
004A83 18 03       13343                   JR	EXP3
004A85 FA F2 4E    13344   EXP2:           JP	M,OFLOW		;OVERFLOW
004A88 C6 80       13345   EXP3:           ADD	A,80H
004A8A CA 21 4F    13346                   JP	Z,ZEROmat
004A8D 4F          13347                   LD	C,A
004A8E AF          13348                   XOR	A		;NUMERIC MARKER
004A8F C9          13349                   RET
004A90             13350   ;
004A90 CD 03 4A    13351   RECIP:          CALL	DONE
004A93 CD DC 4E    13352   RDIV:           CALL	SWAP
004A96 C3 9D 46    13353                   JP	FDIV		;RECIPROCAL
004A99             13354   ;
004A99 11 72 31    13355   LN2:            LD	DE,3172H	;LN(2)
004A9C D9          13356                   EXX
004A9D 11 F8 17    13357                   LD	DE,17F8H
004AA0 D9          13358                   EXX
004AA1 06 7F       13359                   LD	B,7FH
004AA3 C9          13360                   RET
004AA4             13361   ;
004AA4             13362   ;LN - Natural log.
004AA4             13363   ;Result is floating-point numeric.
004AA4             13364   ;
004AA4 CD B2 4E    13365   LN:             CALL	SFLOAT
004AA7 3E 16       13366   LN0:            LD	A,LOGRNG
004AA9 CB 7C       13367                   BIT	7,H
004AAB C2 26 45    13368                   JP	NZ,ERROR_mat	;"Log range"
004AAE 0C          13369                   INC	C
004AAF 0D          13370                   DEC	C
004AB0 CA 26 45    13371                   JP	Z,ERROR_mat
004AB3 11 04 35    13372                   LD	DE,3504H	;SQR(2)
004AB6 D9          13373                   EXX
004AB7 11 33 F3    13374                   LD	DE,0F333H	;1.41421356237
004ABA D9          13375                   EXX
004ABB CD 33 4F    13376                   CALL	ICP0		;MANTISSA>SQR(2)?
004ABE 79          13377                   LD	A,C		;EXPONENT
004ABF 0E 80       13378                   LD	C,80H		;1 <= X < 2
004AC1 38 02       13379                   JR	C,LN4
004AC3 0D          13380                   DEC	C
004AC4 3C          13381                   INC	A
004AC5 F5          13382   LN4:            PUSH	AF		;SAVE EXPONENT
004AC6 CD B0 4F    13383                   CALL	RATIO		;X=(X-1)/(X+1)
004AC9 CD 9B 4F    13384                   CALL	PUSH5
004ACC CD 95 4F    13385                   CALL	SQUARE		;PUSH X*X
004ACF CD CE 4F    13386                   CALL	POLY
004AD2 48 CC       13387                   DW	0CC48H		;a(9)
004AD4 FB 74       13388                   DW	74FBH
004AD6 7D          13389                   DB	7DH
004AD7 AF AE       13390                   DW	0AEAFH		;a(7)
004AD9 FF 11       13391                   DW	11FFH
004ADB 7E          13392                   DB	7EH
004ADC 8C D9       13393                   DW	0D98CH		;a(5)
004ADE CD 4C       13394                   DW	4CCDH
004AE0 7E          13395                   DB	7EH
004AE1 E3 A9       13396                   DW	0A9E3H		;a(3)
004AE3 AA 2A       13397                   DW	2AAAH
004AE5 7F          13398                   DB	7FH
004AE6 00 00       13399                   DW	0		;a(1)
004AE8 00 00       13400                   DW	0
004AEA 81          13401                   DB	81H
004AEB CD A4 4F    13402                   CALL	POP5
004AEE CD A4 4F    13403                   CALL	POP5
004AF1 CD 0D 47    13404                   CALL	FMUL
004AF4 F1          13405                   POP	AF		;EXPONENT
004AF5 CD 9B 4F    13406                   CALL	PUSH5
004AF8 08          13407                   EX	AF,AF'
004AF9 CD 21 4F    13408                   CALL	ZEROmat
004AFC 08          13409                   EX	AF,AF'
004AFD D6 80       13410                   SUB	80H
004AFF 28 1B       13411                   JR	Z,LN3
004B01 30 02       13412                   JR	NC,LN1
004B03 2F          13413                   CPL
004B04 3C          13414                   INC	A
004B05 67          13415   LN1:            LD	H,A
004B06 0E 87       13416                   LD	C,87H
004B08 F5          13417                   PUSH	AF
004B09 CD 98 4E    13418                   CALL	FLOAT
004B0C CB BC       13419                   RES	7,H
004B0E CD 99 4A    13420                   CALL	LN2
004B11 CD 0D 47    13421                   CALL	FMUL
004B14 F1          13422                   POP	AF
004B15 30 05       13423                   JR	NC,LN3
004B17 FA 1C 4B    13424                   JP	M,LN3
004B1A CB FC       13425                   SET	7,H
004B1C CD A4 4F    13426   LN3:            CALL	POP5
004B1F CD 45 46    13427                   CALL	FADD
004B22 AF          13428                   XOR	A
004B23 C9          13429                   RET
004B24             13430   ;
004B24             13431   ;LOG - base-10 logarithm.
004B24             13432   ;Result is floating-point numeric.
004B24             13433   ;
004B24 CD A4 4A    13434   LOG:            CALL	LN
004B27 11 5B 5E    13435                   LD	DE,5E5BH	;LOG(e)
004B2A D9          13436                   EXX
004B2B 11 A9 D8    13437                   LD	DE,0D8A9H
004B2E D9          13438                   EXX
004B2F 06 7E       13439                   LD	B,7EH
004B31 CD 0D 47    13440                   CALL	FMUL
004B34 AF          13441                   XOR	A
004B35 C9          13442                   RET
004B36             13443   ;
004B36             13444   ;ASN - Arc-sine
004B36             13445   ;Result is floating-point numeric.
004B36             13446   ;
004B36 CD B2 4E    13447   ASN:            CALL	SFLOAT
004B39 CD 9B 4F    13448                   CALL	PUSH5
004B3C CD 8D 4F    13449                   CALL	COPY
004B3F CD 0D 47    13450                   CALL	FMUL
004B42 CD 03 4A    13451                   CALL	DONE
004B45 CD 35 46    13452                   CALL	RSUB
004B48 CD 07 49    13453                   CALL	SQR0
004B4B CD A4 4F    13454                   CALL	POP5
004B4E 0C          13455                   INC	C
004B4F 0D          13456                   DEC	C
004B50 3E 02       13457                   LD	A,2
004B52 D5          13458                   PUSH	DE
004B53 28 70       13459                   JR	Z,ACS1
004B55 D1          13460                   POP	DE
004B56 CD 93 4A    13461                   CALL	RDIV
004B59 18 03       13462                   JR	ATN0
004B5B             13463   ;
004B5B             13464   ;ATN - arc-tangent
004B5B             13465   ;Result is floating-point numeric.
004B5B             13466   ;
004B5B CD B2 4E    13467   ATN:            CALL	SFLOAT
004B5E E5          13468   ATN0:           PUSH	HL		;SAVE SIGN
004B5F CB BC       13469                   RES	7,H
004B61 11 13 54    13470                   LD	DE,5413H	;TAN(PI/8)=SQR(2)-1
004B64 D9          13471                   EXX
004B65 11 D0 CC    13472                   LD	DE,0CCD0H
004B68 D9          13473                   EXX
004B69 06 7E       13474                   LD	B,7EH
004B6B CD 30 4F    13475                   CALL	FCP0		;COMPARE
004B6E 06 00       13476                   LD	B,0
004B70 38 1C       13477                   JR	C,ATN2
004B72 11 82 1A    13478                   LD	DE,1A82H	;TAN(3*PI/8)=SQR(2)+1
004B75 D9          13479                   EXX
004B76 11 9A 79    13480                   LD	DE,799AH
004B79 D9          13481                   EXX
004B7A 06 81       13482                   LD	B,81H
004B7C CD 30 4F    13483                   CALL	FCP0		;COMPARE
004B7F 38 08       13484                   JR	C,ATN1
004B81 CD 90 4A    13485                   CALL	RECIP		;X=1/X
004B84 06 02       13486                   LD	B,2
004B86 C3 8E 4B    13487                   JP	ATN2
004B89 CD B0 4F    13488   ATN1:           CALL	RATIO		;X=(X-1)/(X+1)
004B8C 06 01       13489                   LD	B,1
004B8E C5          13490   ATN2:           PUSH	BC		;SAVE FLAG
004B8F CD 9B 4F    13491                   CALL	PUSH5
004B92 CD 95 4F    13492                   CALL	SQUARE		;PUSH X*X
004B95 CD CE 4F    13493                   CALL	POLY
004B98 35 F3       13494                   DW	0F335H		;a(13)
004B9A D8 37       13495                   DW	37D8H
004B9C 7B          13496                   DB	7BH
004B9D 91 6B       13497                   DW	6B91H		;a(11)
004B9F B9 AA       13498                   DW	0AAB9H
004BA1 7C          13499                   DB	7CH
004BA2 DE 41       13500                   DW	41DEH		;a(9)
004BA4 97 61       13501                   DW	6197H
004BA6 7C          13502                   DB	7CH
004BA7 7B 9D       13503                   DW	9D7BH		;a(7)
004BA9 37 92       13504                   DW	9237H
004BAB 7D          13505                   DB	7DH
004BAC 5A 2A       13506                   DW	2A5AH		;a(5)
004BAE CC 4C       13507                   DW	4CCCH
004BB0 7D          13508                   DB	7DH
004BB1 5C A9       13509                   DW	0A95CH		;a(3)
004BB3 AA AA       13510                   DW	0AAAAH
004BB5 7E          13511                   DB	7EH
004BB6 00 00       13512                   DW	0		;a(1)
004BB8 00 00       13513                   DW	0
004BBA 80          13514                   DB	80H
004BBB CD A4 4F    13515                   CALL	POP5
004BBE CD A4 4F    13516                   CALL	POP5
004BC1 CD 0D 47    13517                   CALL	FMUL
004BC4 F1          13518                   POP	AF
004BC5 CD 0E 4A    13519   ACS1:           CALL	PIBY4		;PI/4
004BC8 1F          13520                   RRA
004BC9 F5          13521                   PUSH	AF
004BCA DC 45 46    13522                   CALL	C,FADD
004BCD F1          13523                   POP	AF
004BCE 04          13524                   INC	B
004BCF 1F          13525                   RRA
004BD0 DC 35 46    13526                   CALL	C,RSUB
004BD3 F1          13527                   POP	AF
004BD4 B7          13528                   OR	A
004BD5 F0          13529                   RET	P
004BD6 CB FC       13530                   SET	7,H		;MAKE NEGATIVE
004BD8 AF          13531                   XOR	A
004BD9 C9          13532                   RET
004BDA             13533   ;
004BDA             13534   ;ACS - Arc cosine=PI/2-ASN.
004BDA             13535   ;Result is floating point numeric.
004BDA             13536   ;
004BDA CD 36 4B    13537   ACS:            CALL	ASN
004BDD 3E 02       13538                   LD	A,2
004BDF F5          13539                   PUSH	AF
004BE0 18 E3       13540                   JR	ACS1
004BE2             13541   ;
004BE2             13542   ;Function STR - convert numeric value to ASCII string.
004BE2             13543   ;   Inputs: HLH'L'C = integer or floating-point number
004BE2             13544   ;           DE = address at which to store string
004BE2             13545   ;           IX = address of @% format control
004BE2             13546   ;  Outputs: String stored, with NUL terminator
004BE2             13547   ;
004BE2             13548   ;First normalise for decimal output:
004BE2             13549   ;
004BE2 CD B2 4E    13550   STRmat:            CALL	SFLOAT
004BE5 06 00       13551                   LD	B,0		;DEFAULT PT. POSITION
004BE7 CB 7C       13552                   BIT	7,H		;NEGATIVE?
004BE9 28 06       13553                   JR	Z,STR10
004BEB CB BC       13554                   RES	7,H
004BED 3E 2D       13555                   LD	A,'-'
004BEF 12          13556                   LD	(DE),A		;STORE SIGN
004BF0 13          13557                   INC	DE
004BF1 AF          13558   STR10:          XOR	A		;CLEAR A
004BF2 B9          13559                   CP	C
004BF3 28 47       13560                   JR	Z,STR2mat		;ZERO
004BF5 D5          13561                   PUSH	DE		;SAVE TEXT POINTER
004BF6 78          13562                   LD	A,B
004BF7 F5          13563   STR11:          PUSH	AF		;SAVE DECIMAL COUNTER
004BF8 79          13564                   LD	A,C		;BINARY EXPONENT
004BF9 FE A1       13565                   CP	161
004BFB 30 1A       13566                   JR	NC,STR14
004BFD FE 9B       13567                   CP	155
004BFF 30 25       13568                   JR	NC,STR15
004C01 2F          13569                   CPL
004C02 FE E1       13570                   CP	225
004C04 38 02       13571                   JR	C,STR13
004C06 3E F8       13572                   LD	A,-8
004C08 C6 1C       13573   STR13:          ADD	A,28
004C0A CD F5 4F    13574                   CALL	POWR10
004C0D F5          13575                   PUSH	AF
004C0E CD 0D 47    13576                   CALL	FMUL
004C11 F1          13577                   POP	AF
004C12 47          13578                   LD	B,A
004C13 F1          13579                   POP	AF
004C14 90          13580                   SUB	B
004C15 18 E0       13581                   JR	STR11
004C17 D6 20       13582   STR14:          SUB	32
004C19 CD F5 4F    13583                   CALL	POWR10
004C1C F5          13584                   PUSH	AF
004C1D CD 9D 46    13585                   CALL	FDIV
004C20 F1          13586                   POP	AF
004C21 47          13587                   LD	B,A
004C22 F1          13588                   POP	AF
004C23 80          13589                   ADD	A,B
004C24 18 D1       13590                   JR	STR11
004C26 3E 09       13591   STR15:          LD	A,9
004C28 CD F5 4F    13592                   CALL	POWR10		;10^9
004C2B CD 30 4F    13593                   CALL	FCP0
004C2E 79          13594                   LD	A,C
004C2F C1          13595                   POP	BC
004C30 4F          13596                   LD	C,A
004C31 CB FC       13597                   SET	7,H		;IMPLIED 1
004C33 DC 52 4F    13598                   CALL	C,X10B		;X10, DEC B
004C36 D1          13599                   POP	DE		;RESTORE TEXT POINTER
004C37 CB B9       13600                   RES	7,C
004C39 3E 00       13601                   LD	A,0
004C3B 17          13602                   RLA			;PUT CARRY IN LSB
004C3C             13603   ;
004C3C             13604   ;At this point decimal normalisation has been done,
004C3C             13605   ;now convert to decimal digits:
004C3C             13606   ;      AHLH'L' = number in normalised integer form
004C3C             13607   ;            B = decimal place adjustment
004C3C             13608   ;            C = binary place adjustment (29-33)
004C3C             13609   ;
004C3C 0C          13610   STR2mat:           INC	C
004C3D 08          13611                   EX	AF,AF'		;SAVE A
004C3E 78          13612                   LD	A,B
004C3F DD CB 02 4E 13613                   BIT	1,(IX+2)
004C43 20 08       13614                   JR	NZ,STR20
004C45 AF          13615                   XOR	A
004C46 DD BE 01    13616                   CP	(IX+1)
004C49 28 0A       13617                   JR	Z,STR21
004C4B 3E F6       13618                   LD	A,-10
004C4D DD 86 01    13619   STR20:          ADD	A,(IX+1)	;SIG. FIG. COUNT
004C50 B7          13620                   OR	A		;CLEAR CARRY
004C51 FA 55 4C    13621                   JP	M,STR21
004C54 AF          13622                   XOR	A
004C55 F5          13623   STR21:          PUSH	AF
004C56 08          13624                   EX	AF,AF'		;RESTORE A
004C57 CD 7B 4F    13625   STR22:          CALL	X2		;RL AHLH'L'
004C5A 8F          13626                   ADC	A,A
004C5B FE 0A       13627                   CP	10
004C5D 38 05       13628                   JR	C,STR23
004C5F D6 0A       13629                   SUB	10
004C61 D9          13630                   EXX
004C62 2C          13631                   INC	L		;SET RESULT BIT
004C63 D9          13632                   EXX
004C64 0D          13633   STR23:          DEC	C
004C65 20 F0       13634                   JR	NZ,STR22	;32 TIMES
004C67 4F          13635                   LD	C,A		;REMAINDER
004C68 7C          13636                   LD	A,H
004C69 E6 3F       13637                   AND	3FH		;CLEAR OUT JUNK
004C6B 67          13638                   LD	H,A
004C6C F1          13639                   POP	AF
004C6D F2 7A 4C    13640                   JP	P,STR24
004C70 3C          13641                   INC	A
004C71 20 1C       13642                   JR	NZ,STR26
004C73 3E 04       13643                   LD	A,4
004C75 B9          13644                   CP	C		;ROUND UP?
004C76 3E 00       13645                   LD	A,0
004C78 18 15       13646                   JR	STR26
004C7A F5          13647   STR24:          PUSH	AF
004C7B 79          13648                   LD	A,C
004C7C CE 30       13649                   ADC	A,'0'		;ADD CARRY
004C7E FE 30       13650                   CP	'0'
004C80 28 05       13651                   JR	Z,STR25		;SUPPRESS ZERO
004C82 FE 3A       13652                   CP	'9'+1
004C84 3F          13653                   CCF
004C85 30 08       13654                   JR	NC,STR26
004C87 E3          13655   STR25:          EX	(SP),HL
004C88 CB 75       13656                   BIT	6,L		;ZERO FLAG
004C8A E3          13657                   EX	(SP),HL
004C8B 20 05       13658                   JR	NZ,STR27
004C8D 3E 30       13659                   LD	A,'0'
004C8F 3C          13660   STR26:          INC	A		;SET +VE
004C90 3D          13661                   DEC	A
004C91 F5          13662                   PUSH	AF		;PUT ON STACK + CARRY
004C92 04          13663   STR27:          INC	B
004C93 CD 01 4F    13664                   CALL	TESTmat		;IS HLH'L' ZERO?
004C96 0E 20       13665                   LD	C,32
004C98 3E 00       13666                   LD	A,0
004C9A 20 BB       13667                   JR	NZ,STR22
004C9C F1          13668                   POP	AF
004C9D F5          13669                   PUSH	AF
004C9E 3E 00       13670                   LD	A,0
004CA0 38 B5       13671                   JR	C,STR22
004CA2             13672   ;
004CA2             13673   ;At this point, the decimal character string is stored
004CA2             13674   ; on the stack. Trailing zeroes are suppressed and may
004CA2             13675   ; need to be replaced.
004CA2             13676   ;B register holds decimal point position.
004CA2             13677   ;Now format number and store as ASCII string:
004CA2             13678   ;
004CA2 EB          13679   STR3:           EX	DE,HL		;STRING POINTER
004CA3 0E FF       13680                   LD	C,-1		;FLAG "E"
004CA5 16 01       13681                   LD	D,1
004CA7 DD 5E 01    13682                   LD	E,(IX+1)	;f2
004CAA DD CB 02 46 13683                   BIT	0,(IX+2)
004CAE 20 32       13684                   JR	NZ,STR34	;E MODE
004CB0 DD CB 02 4E 13685                   BIT	1,(IX+2)
004CB4 28 11       13686                   JR	Z,STR31
004CB6 78          13687                   LD	A,B		;F MODE
004CB7 B7          13688                   OR	A
004CB8 28 04       13689                   JR	Z,STR30
004CBA FA BE 4C    13690                   JP	M,STR30
004CBD 50          13691                   LD	D,B
004CBE 7A          13692   STR30:          LD	A,D
004CBF DD 86 01    13693                   ADD	A,(IX+1)
004CC2 5F          13694                   LD	E,A
004CC3 FE 0B       13695                   CP	11
004CC5 38 17       13696                   JR	C,STR32
004CC7 78          13697   STR31:          LD	A,B		;G MODE
004CC8 11 01 01    13698                   LD	DE,101H
004CCB B7          13699                   OR	A
004CCC FA E2 4C    13700                   JP	M,STR34
004CCF 28 0D       13701                   JR	Z,STR32
004CD1 DD 7E 01    13702                   LD	A,(IX+1)
004CD4 B7          13703                   OR	A
004CD5 20 02       13704                   JR	NZ,STR3A
004CD7 3E 0A       13705                   LD	A,10
004CD9 B8          13706   STR3A:          CP	B
004CDA 38 06       13707                   JR	C,STR34
004CDC 50          13708                   LD	D,B
004CDD 58          13709                   LD	E,B
004CDE 78          13710   STR32:          LD	A,B
004CDF C6 81       13711                   ADD	A,129
004CE1 4F          13712                   LD	C,A
004CE2 CB FA       13713   STR34:          SET	7,D
004CE4 1D          13714                   DEC	E
004CE5 7A          13715   STR35:          LD	A,D
004CE6 B9          13716                   CP	C
004CE7 30 0C       13717                   JR	NC,STR33
004CE9 F1          13718   STR36:          POP	AF
004CEA 28 03       13719                   JR	Z,STR37
004CEC F2 F7 4C    13720                   JP	P,STR38
004CEF F5          13721   STR37:          PUSH	AF
004CF0 1C          13722                   INC	E
004CF1 1D          13723                   DEC	E
004CF2 FA 06 4D    13724                   JP	M,STR4
004CF5 3E 30       13725   STR33:          LD	A,'0'
004CF7 15          13726   STR38:          DEC	D
004CF8 E2 FE 4C    13727                   JP	PO,STR39
004CFB 36 2E       13728                   LD	(HL),'.'
004CFD 23          13729                   INC	HL
004CFE 77          13730   STR39:          LD	(HL),A
004CFF 23          13731                   INC	HL
004D00 1D          13732                   DEC	E
004D01 F2 E5 4C    13733                   JP	P,STR35
004D04 18 E3       13734                   JR	STR36
004D06             13735   ;
004D06 F1          13736   STR4:           POP	AF
004D07 0C          13737   STR40:          INC	C
004D08 4D          13738                   LD	C,L
004D09 20 27       13739                   JR	NZ,STR44
004D0B 36 45       13740                   LD	(HL),'E'	;EXPONENT
004D0D 23          13741                   INC	HL
004D0E 78          13742                   LD	A,B
004D0F 3D          13743                   DEC	A
004D10 F2 18 4D    13744                   JP	P,STR41
004D13 36 2D       13745                   LD	(HL),'-'
004D15 23          13746                   INC	HL
004D16 ED 44       13747                   NEG
004D18 36 30       13748   STR41:          LD	(HL),'0'
004D1A 28 15       13749                   JR	Z,STR47
004D1C FE 0A       13750                   CP	10
004D1E 47          13751                   LD	B,A
004D1F 3E 3A       13752                   LD	A,':'
004D21 38 03       13753                   JR	C,STR42
004D23 23          13754                   INC	HL
004D24 36 30       13755                   LD	(HL),'0'
004D26 34          13756   STR42:          INC	(HL)
004D27 BE          13757                   CP	(HL)
004D28 20 05       13758                   JR	NZ,STR43
004D2A 36 30       13759                   LD	(HL),'0'
004D2C 2B          13760                   DEC	HL
004D2D 34          13761                   INC	(HL)
004D2E 23          13762                   INC	HL
004D2F 10 F5       13763   STR43:          DJNZ	STR42
004D31 23          13764   STR47:          INC	HL
004D32 EB          13765   STR44:          EX	DE,HL
004D33 C9          13766                   RET
004D34             13767   ;
004D34             13768   ;Support subroutines:
004D34             13769   ;
004D34             13770   ;CON - Get unsigned numeric constant from ASCII string.
004D34             13771   ;   Inputs: ASCII string at (IX).
004D34             13772   ;  Outputs: Variable-type result in HLH'L'C
004D34             13773   ;           IX updated (points to delimiter)
004D34             13774   ;           A7 = 0 (numeric marker)
004D34             13775   ;
004D34 CD 21 4F    13776   CON:            CALL	ZEROmat		;INITIALISE TO ZERO
004D37 0E 00       13777                   LD	C,0		;TRUNCATION COUNTER
004D39 CD B9 4D    13778                   CALL	NUMBERmat		;GET INTEGER PART
004D3C FE 2E       13779                   CP	'.'
004D3E 06 00       13780                   LD	B,0		;DECL. PLACE COUNTER
004D40 CC B7 4D    13781                   CALL	Z,NUMBIX	;GET FRACTION PART
004D43 FE 45       13782                   CP	'E'
004D45 3E 00       13783                   LD	A,0		;INITIALISE EXPONENT
004D47 CC 88 4D    13784                   CALL	Z,GETEXP	;GET EXPONENT
004D4A CB 7C       13785                   BIT	7,H
004D4C 20 08       13786                   JR	NZ,CON0		;INTEGER OVERFLOW
004D4E B7          13787                   OR	A
004D4F 20 05       13788                   JR	NZ,CON0		;EXPONENT NON-ZERO
004D51 B8          13789                   CP	B
004D52 20 02       13790                   JR	NZ,CON0		;DECIMAL POINT
004D54 B9          13791                   CP	C
004D55 C8          13792                   RET	Z		;INTEGER
004D56 90          13793   CON0:           SUB	B
004D57 81          13794                   ADD	A,C
004D58 0E 9F       13795                   LD	C,159
004D5A CD 98 4E    13796                   CALL	FLOAT
004D5D CB BC       13797                   RES	7,H		;DITCH IMPLIED 1
004D5F B7          13798                   OR	A
004D60 C8          13799                   RET	Z		;DONE
004D61 FA 6C 4D    13800                   JP	M,CON2		;NEGATIVE EXPONENT
004D64 CD F5 4F    13801                   CALL	POWR10
004D67 CD 0D 47    13802                   CALL	FMUL		;SCALE
004D6A AF          13803                   XOR	A
004D6B C9          13804                   RET
004D6C FE DA       13805   CON2:           CP	-38
004D6E 38 0A       13806                   JR	C,CON3		;CAN'T SCALE IN ONE GO
004D70 ED 44       13807                   NEG
004D72 CD F5 4F    13808                   CALL	POWR10
004D75 CD 9D 46    13809                   CALL	FDIV		;SCALE
004D78 AF          13810                   XOR	A
004D79 C9          13811                   RET
004D7A F5          13812   CON3:           PUSH	AF
004D7B 3E 26       13813                   LD	A,38
004D7D CD F5 4F    13814                   CALL	POWR10
004D80 CD 9D 46    13815                   CALL	FDIV
004D83 F1          13816                   POP	AF
004D84 C6 26       13817                   ADD	A,38
004D86 18 E4       13818                   JR	CON2
004D88             13819   ;
004D88             13820   ;GETEXP - Get decimal exponent from string
004D88             13821   ;     Inputs: ASCII string at (IX)
004D88             13822   ;             (IX points at 'E')
004D88             13823   ;             A = initial value
004D88             13824   ;    Outputs: A = new exponent
004D88             13825   ;             IX updated.
004D88             13826   ;   Destroys: A,A',IX,F,F'
004D88             13827   ;
004D88 C5          13828   GETEXP:         PUSH	BC		;SAVE REGISTERS
004D89 47          13829                   LD	B,A		;INITIAL VALUE
004D8A 0E 02       13830                   LD	C,2		;2 DIGITS MAX
004D8C DD 23       13831                   INC	IX		;BUMP PAST 'E'
004D8E CD E3 50    13832                   CALL	SIGNQ
004D91 08          13833                   EX	AF,AF'		;SAVE EXPONENT SIGN
004D92 CD D9 50    13834   GETEX1:         CALL	DIGITQ
004D95 38 17       13835                   JR	C,GETEX2
004D97 78          13836                   LD	A,B		;B=B*10
004D98 87          13837                   ADD	A,A
004D99 87          13838                   ADD	A,A
004D9A 80          13839                   ADD	A,B
004D9B 87          13840                   ADD	A,A
004D9C 47          13841                   LD	B,A
004D9D DD 7E 00    13842                   LD	A,(IX)		;GET BACK DIGIT
004DA0 DD 23       13843                   INC	IX
004DA2 E6 0F       13844                   AND	0FH		;MASK UNWANTED BITS
004DA4 80          13845                   ADD	A,B		;ADD IN DIGIT
004DA5 47          13846                   LD	B,A
004DA6 0D          13847                   DEC	C
004DA7 F2 92 4D    13848                   JP	P,GETEX1
004DAA 06 64       13849                   LD	B,100		;FORCE OVERFLOW
004DAC 18 E4       13850                   JR	GETEX1
004DAE 08          13851   GETEX2:         EX	AF,AF'		;RESTORE SIGN
004DAF FE 2D       13852                   CP	'-'
004DB1 78          13853                   LD	A,B
004DB2 C1          13854                   POP	BC		;RESTORE
004DB3 C0          13855                   RET	NZ
004DB4 ED 44       13856                   NEG			;NEGATE EXPONENT
004DB6 C9          13857                   RET
004DB7             13858   ;
004DB7             13859   ;NUMBER: Get unsigned integer from string.
004DB7             13860   ;    Inputs: string at (IX)
004DB7             13861   ;            C = truncated digit count
004DB7             13862   ;                (initially zero)
004DB7             13863   ;            B = total digit count
004DB7             13864   ;            HLH'L' = initial value
004DB7             13865   ;   Outputs: HLH'L' = number (binary integer)
004DB7             13866   ;            A = delimiter.
004DB7             13867   ;            B, C & IX updated
004DB7             13868   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004DB7             13869   ;
004DB7 DD 23       13870   NUMBIX:         INC	IX
004DB9 CD D9 50    13871   NUMBERmat:         CALL	DIGITQ
004DBC D8          13872                   RET	C
004DBD 04          13873                   INC	B		;INCREMENT DIGIT COUNT
004DBE DD 23       13874                   INC	IX
004DC0 CD 6C 4F    13875                   CALL	X10		;*10 & COPY OLD VALUE
004DC3 38 13       13876                   JR	C,NUMB1		;OVERFLOW
004DC5 0D          13877                   DEC	C		;SEE IF TRUNCATED
004DC6 0C          13878                   INC	C
004DC7 20 0F       13879                   JR	NZ,NUMB1	;IMPORTANT!
004DC9 E6 0F       13880                   AND	0FH
004DCB D9          13881                   EXX
004DCC 06 00       13882                   LD	B,0
004DCE 4F          13883                   LD	C,A
004DCF 09          13884                   ADD	HL,BC		;ADD IN DIGIT
004DD0 D9          13885                   EXX
004DD1 30 E6       13886                   JR	NC,NUMBERmat
004DD3 23          13887                   INC	HL		;CARRY
004DD4 7C          13888                   LD	A,H
004DD5 B5          13889                   OR	L
004DD6 20 E1       13890                   JR	NZ,NUMBERmat
004DD8 0C          13891   NUMB1:          INC	C		;TRUNCATION COUNTER
004DD9 CD DF 4E    13892                   CALL	SWAP1		;RESTORE PREVIOUS VALUE
004DDC 18 DB       13893                   JR	NUMBERmat
004DDE             13894   ;
004DDE             13895   ;FIX - Fix number to specified exponent value.
004DDE             13896   ;    Inputs: HLH'L'C = +ve non-zero number (floated)
004DDE             13897   ;            A = desired exponent (A>C)
004DDE             13898   ;   Outputs: HLH'L'C = fixed number (unsigned)
004DDE             13899   ;            fraction shifted into B'C'
004DDE             13900   ;            A'F' positive if integer input
004DDE             13901   ;  Destroys: C,H,L,A',B',C',H',L',F,F'
004DDE             13902   ;
004DDE 08          13903   FIX:            EX	AF,AF'
004DDF AF          13904                   XOR	A
004DE0 08          13905                   EX	AF,AF'
004DE1 CB FC       13906                   SET	7,H		;IMPLIED 1
004DE3 CD E4 4E    13907   FIX1:           CALL	DIV2
004DE6 B9          13908                   CP	C
004DE7 C8          13909                   RET	Z
004DE8 D2 E3 4D    13910                   JP	NC,FIX1
004DEB C3 F2 4E    13911                   JP	OFLOW
004DEE             13912   ;
004DEE             13913   ;SFIXmat - Convert to integer if necessary.
004DEE             13914   ;    Input: Variable-type number in HLH'L'C
004DEE             13915   ;   Output: Integer in HLH'L', C=0
004DEE             13916   ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
004DEE             13917   ;
004DEE             13918   ;NEGATE - Negate HLH'L'
004DEE             13919   ;    Destroys: H,L,H',L',F
004DEE             13920   ;
004DEE CD DC 4E    13921   FIX2:           CALL	SWAP
004DF1 CD F7 4D    13922                   CALL	SFIXmat
004DF4 CD DC 4E    13923                   CALL	SWAP
004DF7 0D          13924   SFIXmat:           DEC	C
004DF8 0C          13925                   INC	C
004DF9 C8          13926                   RET	Z		;INTEGER/ZERO
004DFA CB 7C       13927                   BIT	7,H		;SIGN
004DFC F5          13928                   PUSH	AF
004DFD 3E 9F       13929                   LD	A,159
004DFF CD DE 4D    13930                   CALL	FIX
004E02 F1          13931                   POP	AF
004E03 0E 00       13932                   LD	C,0
004E05 C8          13933                   RET	Z
004E06 B7          13934   NEGATE:         OR	A		;CLEAR CARRY
004E07 D9          13935                   EXX
004E08 D5          13936   NEG0:           PUSH	DE
004E09 EB          13937                   EX	DE,HL
004E0A 21 00 00    13938                   LD	HL,0
004E0D ED 52       13939                   SBC	HL,DE
004E0F D1          13940                   POP	DE
004E10 D9          13941                   EXX
004E11 D5          13942                   PUSH	DE
004E12 EB          13943                   EX	DE,HL
004E13 21 00 00    13944                   LD	HL,0
004E16 ED 52       13945                   SBC	HL,DE
004E18 D1          13946                   POP	DE
004E19 C9          13947                   RET
004E1A             13948   ;
004E1A             13949   ;NEG - Negate HLH'L'B'C'
004E1A             13950   ;    Also complements A (used in FADD)
004E1A             13951   ;    Destroys: A,H,L,B',C',H',L',F
004E1A             13952   ;
004E1A D9          13953   NEG:            EXX
004E1B 2F          13954                   CPL
004E1C E5          13955                   PUSH	HL
004E1D B7          13956                   OR	A		;CLEAR CARRY
004E1E ED 62       13957                   SBC	HL,HL
004E20 ED 42       13958                   SBC	HL,BC
004E22 44          13959                   LD	B,H
004E23 4D          13960                   LD	C,L
004E24 E1          13961                   POP	HL
004E25 18 E1       13962                   JR	NEG0
004E27             13963   ;
004E27             13964   ;SCALE - Trig scaling.
004E27             13965   ;MOD48 - 48-bit floating-point "modulus" (remainder).
004E27             13966   ;   Inputs: HLH'L'C unsigned floating-point dividend
004E27             13967   ;           DED'E'B'C'B unsigned 48-bit FP divisor
004E27             13968   ;  Outputs: HLH'L'C floating point remainder (H7=1)
004E27             13969   ;           E = quotient (bit 7 is sticky)
004E27             13970   ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004E27             13971   ;FLO48 - Float unsigned number (48 bits)
004E27             13972   ;    Input/output in HLH'L'B'C'C
004E27             13973   ;   Destroys: C,H,L,B',C',H',L',F
004E27             13974   ;
004E27 3E 96       13975   SCALE:          LD	A,150
004E29 B9          13976                   CP	C
004E2A 3E 17       13977                   LD	A,ACLOST
004E2C DA 26 45    13978                   JP	C,ERROR_mat		;"Accuracy lost"
004E2F CD 0E 4A    13979                   CALL	PIBY4
004E32 D9          13980                   EXX
004E33 01 69 21    13981                   LD	BC,2169H	;3.141592653589793238
004E36 D9          13982                   EXX
004E37 CB FA       13983   MOD48:          SET	7,D		;IMPLIED 1
004E39 CB FC       13984                   SET	7,H
004E3B 79          13985                   LD	A,C
004E3C 0E 00       13986                   LD	C,0		;INIT QUOTIENT
004E3E DD 21 00 00 13987                   LD	IX,0
004E42 DD E5       13988                   PUSH	IX		;PUT ZERO ON STACK
004E44 B8          13989                   CP	B
004E45 38 3A       13990                   JR	C,MOD485	;DIVIDEND<DIVISOR
004E47 D9          13991   MOD481:         EXX			;CARRY=0 HERE
004E48 E3          13992                   EX	(SP),HL
004E49 ED 42       13993                   SBC	HL,BC
004E4B E3          13994                   EX	(SP),HL
004E4C ED 52       13995                   SBC	HL,DE
004E4E D9          13996                   EXX
004E4F ED 52       13997                   SBC	HL,DE
004E51 30 09       13998                   JR	NC,MOD482	;DIVIDEND>=DIVISOR
004E53 D9          13999                   EXX
004E54 E3          14000                   EX	(SP),HL
004E55 09          14001                   ADD	HL,BC
004E56 E3          14002                   EX	(SP),HL
004E57 ED 5A       14003                   ADC	HL,DE
004E59 D9          14004                   EXX
004E5A ED 5A       14005                   ADC	HL,DE
004E5C 3F          14006   MOD482:         CCF
004E5D CB 11       14007                   RL	C		;QUOTIENT
004E5F 30 02       14008                   JR	NC,MOD483
004E61 CB F9       14009                   SET	7,C		;STICKY BIT
004E63 3D          14010   MOD483:         DEC	A
004E64 B8          14011                   CP	B
004E65 38 19       14012                   JR	C,MOD484	;DIVIDEND<DIVISOR
004E67 E3          14013                   EX	(SP),HL
004E68 29          14014                   ADD	HL,HL		;DIVIDEND * 2
004E69 E3          14015                   EX	(SP),HL
004E6A D9          14016                   EXX
004E6B ED 6A       14017                   ADC	HL,HL
004E6D D9          14018                   EXX
004E6E ED 6A       14019                   ADC	HL,HL
004E70 30 D5       14020                   JR	NC,MOD481	;AGAIN
004E72 B7          14021                   OR	A
004E73 D9          14022                   EXX
004E74 E3          14023                   EX	(SP),HL
004E75 ED 42       14024                   SBC	HL,BC		;OVERFLOW, SO SUBTRACT
004E77 E3          14025                   EX	(SP),HL
004E78 ED 52       14026                   SBC	HL,DE
004E7A D9          14027                   EXX
004E7B ED 52       14028                   SBC	HL,DE
004E7D B7          14029                   OR	A
004E7E 18 DC       14030                   JR	MOD482
004E80             14031   ;
004E80 3C          14032   MOD484:         INC	A
004E81 59          14033   MOD485:         LD	E,C		;QUOTIENT
004E82 4F          14034                   LD	C,A		;REMAINDER EXPONENT
004E83 D9          14035                   EXX
004E84 C1          14036                   POP	BC
004E85 D9          14037                   EXX
004E86 CB 7C       14038   FLO48:          BIT	7,H
004E88 C0          14039                   RET	NZ
004E89 D9          14040                   EXX
004E8A CB 21       14041                   SLA	C
004E8C CB 10       14042                   RL	B
004E8E ED 6A       14043                   ADC	HL,HL
004E90 D9          14044                   EXX
004E91 ED 6A       14045                   ADC	HL,HL
004E93 0D          14046                   DEC	C
004E94 C2 86 4E    14047                   JP	NZ,FLO48
004E97 C9          14048                   RET
004E98             14049   ;
004E98             14050   ;Float unsigned number
004E98             14051   ;    Input/output in HLH'L'C
004E98             14052   ;   Destroys: C,H,L,H',L',F
004E98             14053   ;
004E98 CB 7C       14054   FLOAT:          BIT	7,H
004E9A C0          14055                   RET	NZ
004E9B D9          14056                   EXX			;SAME AS "X2"
004E9C 29          14057                   ADD	HL,HL		;TIME-CRITICAL
004E9D D9          14058                   EXX			;REGION
004E9E ED 6A       14059                   ADC	HL,HL		;(BENCHMARKS)
004EA0 0D          14060                   DEC	C
004EA1 C2 98 4E    14061                   JP	NZ,FLOAT
004EA4 C9          14062                   RET
004EA5             14063   ;
004EA5             14064   ;SFLOAT - Convert to floating-point if necessary.
004EA5             14065   ;    Input: Variable-type number in HLH'L'C
004EA5             14066   ;    Output: Floating-point in HLH'L'C
004EA5             14067   ;    Destroys: A,C,H,L,H',L',F
004EA5             14068   ;
004EA5 08          14069   FLOATA:         EX	AF,AF'
004EA6             14070                   ; ADD	A,(RTABLE-DTABLE)/2
004EA6 C6 2E       14071                   ADD	A,RTABLE-DTABLE/2
004EA8 08          14072                   EX	AF,AF'
004EA9 CD DC 4E    14073   FLOAT2:         CALL	SWAP
004EAC CD B2 4E    14074                   CALL	SFLOAT
004EAF CD DC 4E    14075                   CALL	SWAP
004EB2 0D          14076   SFLOAT:         DEC	C
004EB3 0C          14077                   INC	C
004EB4 C0          14078                   RET	NZ		;ALREADY FLOATING-POINT
004EB5 CD 01 4F    14079                   CALL	TESTmat
004EB8 C8          14080                   RET	Z		;ZERO
004EB9 7C          14081                   LD	A,H
004EBA B7          14082                   OR	A
004EBB FC 06 4E    14083                   CALL	M,NEGATE
004EBE 0E 9F       14084                   LD	C,159
004EC0 CD 98 4E    14085                   CALL	FLOAT
004EC3 B7          14086                   OR	A
004EC4 F8          14087                   RET	M		;NEGATIVE
004EC5 CB BC       14088                   RES	7,H
004EC7 C9          14089                   RET
004EC8             14090   ;
004EC8             14091   ;ROUND UP
004EC8             14092   ;Return with carry set if 32-bit overflow
004EC8             14093   ;   Destroys: H,L,B',C',H',L',F
004EC8             14094   ;
004EC8 D9          14095   ADD1:           EXX
004EC9 01 01 00    14096                   LD	BC,1
004ECC 09          14097                   ADD	HL,BC
004ECD D9          14098                   EXX
004ECE D0          14099                   RET	NC
004ECF C5          14100                   PUSH	BC
004ED0 01 01 00    14101                   LD	BC,1
004ED3 09          14102                   ADD	HL,BC
004ED4 C1          14103                   POP	BC
004ED5 C9          14104                   RET
004ED6             14105   ;
004ED6             14106   ;ODD - Add one if even, leave alone if odd.
004ED6             14107   ; (Used to perform unbiassed rounding, i.e.
004ED6             14108   ;  number is rounded up half the time)
004ED6             14109   ;    Destroys: L',F (carry cleared)
004ED6             14110   ;
004ED6 B7          14111   ODD:            OR	A		;CLEAR CARRY
004ED7 D9          14112                   EXX
004ED8 CB C5       14113                   SET	0,L		;MAKE ODD
004EDA D9          14114                   EXX
004EDB C9          14115                   RET
004EDC             14116   ;
004EDC             14117   ;SWAP - Swap arguments.
004EDC             14118   ;    Exchanges DE,HL D'E',H'L' and B,C
004EDC             14119   ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
004EDC             14120   ;SWAP1 - Swap DEHL with D'E'H'L'
004EDC             14121   ;    Destroys: D,E,H,L,D',E',H',L'
004EDC             14122   ;
004EDC 79          14123   SWAP:           LD	A,C
004EDD 48          14124                   LD	C,B
004EDE 47          14125                   LD	B,A
004EDF EB          14126   SWAP1:          EX	DE,HL
004EE0 D9          14127                   EXX
004EE1 EB          14128                   EX	DE,HL
004EE2 D9          14129                   EXX
004EE3 C9          14130                   RET
004EE4             14131   ;
004EE4             14132   ;DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
004EE4             14133   ;INCC - destroys C,F
004EE4             14134   ;OFLOW
004EE4             14135   ;
004EE4 CD 82 4F    14136   DIV2:           CALL	D2
004EE7 D9          14137                   EXX
004EE8 CB 18       14138                   RR	B
004EEA CB 19       14139                   RR	C
004EEC 08          14140                   EX	AF,AF'
004EED B0          14141                   OR	B
004EEE 08          14142                   EX	AF,AF'
004EEF D9          14143                   EXX
004EF0 0C          14144   INCC:           INC	C
004EF1 C0          14145                   RET	NZ
004EF2 3E 14       14146   OFLOW:          LD	A,TOOBIG
004EF4 C3 26 45    14147                   JP	ERROR_mat		;"Too big"
004EF7             14148   ;
004EF7             14149   ;FTEST - Test for zero & sign
004EF7             14150   ;    Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
004EF7             14151   ;
004EF7 CD 01 4F    14152   FTEST:          CALL	TESTmat
004EFA C8          14153                   RET	Z
004EFB 7C          14154                   LD	A,H
004EFC E6 80       14155                   AND	10000000B
004EFE F6 40       14156                   OR	01000000B
004F00 C9          14157                   RET
004F01             14158   ;
004F01             14159   ;TEST - Test HLH'L' for zero.
004F01             14160   ;    Output: Z-flag set & A=0 if HLH'L'=0
004F01             14161   ;    Destroys: A,F
004F01             14162   ;
004F01 7C          14163   TESTmat:           LD	A,H
004F02 B5          14164                   OR	L
004F03 D9          14165                   EXX
004F04 B4          14166                   OR	H
004F05 B5          14167                   OR	L
004F06 D9          14168                   EXX
004F07 C9          14169                   RET
004F08             14170   ;
004F08             14171   ;FCOMP - Compare two numbers
004F08             14172   ;    Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
004F08             14173   ;
004F08 78          14174   FCOMP:          LD	A,B
004F09 B1          14175                   OR	C		;Both integer?
004F0A 20 0A       14176                   JR	NZ,FCOMP1
004F0C CD 1E 4F    14177                   CALL	ICP
004F0F 3E 00       14178   FCOMP0:         LD	A,0
004F11 C8          14179                   RET	Z		;Equal
004F12 3E 80       14180                   LD	A,80H
004F14 1F          14181                   RRA
004F15 C9          14182                   RET
004F16             14183   ;
004F16 CD A9 4E    14184   FCOMP1:         CALL	FLOAT2		;Float both
004F19 CD 2B 4F    14185                   CALL	FCP
004F1C 18 F1       14186                   JR	FCOMP0
004F1E             14187   ;
004F1E             14188   ;Integer and floating point compare.
004F1E             14189   ;Sets carry & zero flags according to HLH'L'C-DED'E'B
004F1E             14190   ;Result pre-set to FALSE
004F1E             14191   ;ICP1, FCP1 destroy A,F
004F1E             14192   ;
004F1E             14193   ;ZERO - Return zero.
004F1E             14194   ; Destroys: A,C,H,L,H',L'
004F1E             14195   ;
004F1E CD 4A 4F    14196   ICP:            CALL	ICP1
004F21 3E 00       14197   ZEROmat:           LD	A,0
004F23 D9          14198                   EXX
004F24 67          14199                   LD	H,A
004F25 6F          14200                   LD	L,A
004F26 D9          14201                   EXX
004F27 67          14202                   LD	H,A
004F28 6F          14203                   LD	L,A
004F29 4F          14204                   LD	C,A
004F2A C9          14205                   RET
004F2B             14206   ;
004F2B CD 3D 4F    14207   FCP:            CALL	FCP1
004F2E 18 F1       14208                   JR	ZEROmat		;PRESET FALSE
004F30             14209   ;
004F30 79          14210   FCP0:           LD	A,C
004F31 B8          14211                   CP	B		;COMPARE EXPONENTS
004F32 C0          14212                   RET	NZ
004F33 ED 52       14213   ICP0:           SBC	HL,DE		;COMP MANTISSA MSB
004F35 19          14214                   ADD	HL,DE
004F36 C0          14215                   RET	NZ
004F37 D9          14216                   EXX
004F38 ED 52       14217                   SBC	HL,DE		;COMP MANTISSA LSB
004F3A 19          14218                   ADD	HL,DE
004F3B D9          14219                   EXX
004F3C C9          14220                   RET
004F3D             14221   ;
004F3D 7C          14222   FCP1:           LD	A,H
004F3E AA          14223                   XOR	D
004F3F 7C          14224                   LD	A,H
004F40 17          14225                   RLA
004F41 F8          14226                   RET	M
004F42 30 EC       14227                   JR	NC,FCP0
004F44 CD 30 4F    14228                   CALL	FCP0
004F47 C8          14229                   RET	Z		;** V0.1 BUG FIX
004F48 3F          14230                   CCF
004F49 C9          14231                   RET
004F4A             14232   ;
004F4A 7C          14233   ICP1:           LD	A,H
004F4B AA          14234                   XOR	D
004F4C F2 33 4F    14235                   JP	P,ICP0
004F4F 7C          14236                   LD	A,H
004F50 17          14237                   RLA
004F51 C9          14238                   RET
004F52             14239   ;
004F52             14240   ;ADD - Integer add.
004F52             14241   ;Carry, sign & zero flags valid on exit
004F52             14242   ;    Destroys: H,L,H',L',F
004F52             14243   ;
004F52 05          14244   X10B:           DEC	B
004F53 0C          14245                   INC	C
004F54 CD 8E 4F    14246   X5:             CALL	COPY0
004F57 CD 81 4F    14247                   CALL	D2C
004F5A CD 81 4F    14248                   CALL	D2C
004F5D 08          14249                   EX	AF,AF'		;SAVE CARRY
004F5E D9          14250   ADD:            EXX
004F5F 19          14251                   ADD	HL,DE
004F60 D9          14252                   EXX
004F61 ED 5A       14253                   ADC	HL,DE
004F63 C9          14254                   RET
004F64             14255   ;
004F64             14256   ;SUB - Integer subtract.
004F64             14257   ;Carry, sign & zero flags valid on exit
004F64             14258   ;    Destroys: H,L,H',L',F
004F64             14259   ;
004F64 D9          14260   SUB:            EXX
004F65 B7          14261                   OR	A
004F66 ED 52       14262                   SBC	HL,DE
004F68 D9          14263                   EXX
004F69 ED 52       14264                   SBC	HL,DE
004F6B C9          14265                   RET
004F6C             14266   ;
004F6C             14267   ;X10 - unsigned integer * 10
004F6C             14268   ;   Inputs: HLH'L' initial value
004F6C             14269   ;  Outputs: DED'E' = initial HLH'L'
004F6C             14270   ;           Carry bit set if overflow
004F6C             14271   ;           If carry not set HLH'L'=result
004F6C             14272   ; Destroys: D,E,H,L,D',E',H',L',F
004F6C             14273   ;X2 - Multiply HLH'L' by 2 as 32-bit integer.
004F6C             14274   ;    Carry set if MSB=1 before shift.
004F6C             14275   ;    Sign set if MSB=1 after shift.
004F6C             14276   ;    Destroys: H,L,H',L',F
004F6C             14277   ;
004F6C CD 8E 4F    14278   X10:            CALL	COPY0		;DED'E'=HLH'L'
004F6F CD 7B 4F    14279                   CALL	X2
004F72 D8          14280                   RET	C		;TOO BIG
004F73 CD 7B 4F    14281                   CALL	X2
004F76 D8          14282                   RET	C
004F77 CD 5E 4F    14283                   CALL	ADD
004F7A D8          14284                   RET	C
004F7B D9          14285   X2:             EXX
004F7C 29          14286                   ADD	HL,HL
004F7D D9          14287                   EXX
004F7E ED 6A       14288                   ADC	HL,HL
004F80 C9          14289                   RET
004F81             14290   ;
004F81             14291   ;D2 - Divide HLH'L' by 2 as 32-bit integer.
004F81             14292   ;    Carry set if LSB=1 before shift.
004F81             14293   ;    Destroys: H,L,H',L',F
004F81             14294   ;
004F81 0C          14295   D2C:            INC	C
004F82 CB 3C       14296   D2:             SRL	H
004F84 CB 1D       14297                   RR	L
004F86 D9          14298                   EXX
004F87 CB 1C       14299                   RR	H
004F89 CB 1D       14300                   RR	L
004F8B D9          14301                   EXX
004F8C C9          14302                   RET
004F8D             14303   ;
004F8D             14304   ;COPY - COPY HLH'L'C INTO DED'E'B
004F8D             14305   ;  Destroys: B,C,D,E,H,L,D',E',H',L'
004F8D             14306   ;
004F8D 41          14307   COPY:           LD	B,C
004F8E 54          14308   COPY0:          LD	D,H
004F8F 5D          14309                   LD	E,L
004F90 D9          14310                   EXX
004F91 54          14311                   LD	D,H
004F92 5D          14312                   LD	E,L
004F93 D9          14313                   EXX
004F94 C9          14314                   RET
004F95             14315   ;
004F95             14316   ;SQUARE - PUSH X*X
004F95             14317   ;PUSH5 - PUSH HLH'L'C ONTO STACK.
004F95             14318   ;  Destroys: SP,IX
004F95             14319   ;
004F95 CD 8D 4F    14320   SQUARE:         CALL	COPY
004F98 CD 0D 47    14321                   CALL	FMUL
004F9B DD E1       14322   PUSH5:          POP	IX		;RETURN ADDRESS
004F9D C5          14323                   PUSH	BC
004F9E E5          14324                   PUSH	HL
004F9F D9          14325                   EXX
004FA0 E5          14326                   PUSH	HL
004FA1 D9          14327                   EXX
004FA2 DD E9       14328                   JP	(IX)		;"RETURN"
004FA4             14329   ;
004FA4             14330   ;POP5 - POP DED'E'B OFF STACK.
004FA4             14331   ;  Destroys: A,B,D,E,D',E',SP,IX
004FA4             14332   ;
004FA4 DD E1       14333   POP5:           POP	IX		;RETURN ADDRESS
004FA6 D9          14334                   EXX
004FA7 D1          14335                   POP	DE
004FA8 D9          14336                   EXX
004FA9 D1          14337                   POP	DE
004FAA 79          14338                   LD	A,C
004FAB C1          14339                   POP	BC
004FAC 41          14340                   LD	B,C
004FAD 4F          14341                   LD	C,A
004FAE DD E9       14342                   JP	(IX)		;"RETURN"
004FB0             14343   ;
004FB0             14344   ;RATIO - Calculate (X-1)/(X+1)
004FB0             14345   ;    Inputs: X in HLH'L'C
004FB0             14346   ;   Outputs: (X-1)/(X+1) in HLH'L'C
004FB0             14347   ;  Destroys: Everything except IY,SP,I
004FB0             14348   ;
004FB0 CD 9B 4F    14349   RATIO:          CALL	PUSH5		;SAVE X
004FB3 CD 03 4A    14350                   CALL	DONE
004FB6 CD 45 46    14351                   CALL	FADD
004FB9 CD A4 4F    14352                   CALL	POP5		;RESTORE X
004FBC CD 9B 4F    14353                   CALL	PUSH5		;SAVE X+1
004FBF CD DC 4E    14354                   CALL	SWAP
004FC2 CD 03 4A    14355                   CALL	DONE
004FC5 CD 2F 46    14356                   CALL	FSUB
004FC8 CD A4 4F    14357                   CALL	POP5		;RESTORE X+1
004FCB C3 9D 46    14358                   JP	FDIV
004FCE             14359   ;
004FCE             14360   ;POLY - Evaluate a polynomial.
004FCE             14361   ;    Inputs: X in HLH'L'C and also stored at (SP+2)
004FCE             14362   ;            Polynomial coefficients follow call.
004FCE             14363   ;   Outputs: Result in HLH'L'C
004FCE             14364   ;  Destroys: Everything except IY,SP,I
004FCE             14365   ;Routine terminates on finding a coefficient >=1.
004FCE             14366   ;Note: The last coefficient is EXECUTED on return
004FCE             14367   ;      so must contain only innocuous bytes!
004FCE             14368   ;
004FCE DD 21 02 00 14369   POLY:           LD	IX,2
004FD2 DD 39       14370                   ADD	IX,SP
004FD4 DD E3       14371                   EX	(SP),IX
004FD6 CD F1 19    14372                   CALL	DLOAD5		;FIRST COEFFICIENT
004FD9 CD 0D 47    14373   POLY1:          CALL	FMUL
004FDC 11 05 00    14374                   LD	DE,5
004FDF DD 19       14375                   ADD	IX,DE
004FE1 CD F1 19    14376                   CALL	DLOAD5		;NEXT COEFFICIENT
004FE4 DD E3       14377                   EX	(SP),IX
004FE6 04          14378                   INC	B
004FE7 05          14379                   DEC	B		;TEST
004FE8 FA 45 46    14380                   JP	M,FADD
004FEB CD 45 46    14381                   CALL	FADD
004FEE CD F1 19    14382                   CALL	DLOAD5		;X
004FF1 DD E3       14383                   EX	(SP),IX
004FF3 18 E4       14384                   JR	POLY1
004FF5             14385   ;
004FF5             14386   ;POWR10 - Calculate power of ten.
004FF5             14387   ;    Inputs: A=power of 10 required (A<128)
004FF5             14388   ;            A=binary exponent to be exceeded (A>=128)
004FF5             14389   ;   Outputs: DED'E'B = result
004FF5             14390   ;            A = actual power of ten returned
004FF5             14391   ;  Destroys: A,B,D,E,A',D',E',F,F'
004FF5             14392   ;
004FF5 3C          14393   POWR10:         INC	A
004FF6 08          14394                   EX	AF,AF'
004FF7 E5          14395                   PUSH	HL
004FF8 D9          14396                   EXX
004FF9 E5          14397                   PUSH	HL
004FFA D9          14398                   EXX
004FFB CD 03 4A    14399                   CALL	DONE
004FFE CD DC 4E    14400                   CALL	SWAP
005001 AF          14401                   XOR	A
005002 08          14402   POWR11:         EX	AF,AF'
005003 3D          14403                   DEC	A
005004 28 20       14404                   JR	Z,POWR14	;EXITmat TYPE 1
005006 F2 0D 50    14405                   JP	P,POWR13
005009 B9          14406                   CP	C
00500A 38 1A       14407                   JR	C,POWR14	;EXITmat TYPE 2
00500C 3C          14408                   INC	A
00500D 08          14409   POWR13:         EX	AF,AF'
00500E 3C          14410                   INC	A
00500F CB FC       14411                   SET	7,H
005011 CD 54 4F    14412                   CALL	X5
005014 30 05       14413                   JR	NC,POWR12
005016 08          14414                   EX	AF,AF'
005017 CD 81 4F    14415                   CALL	D2C
00501A 08          14416                   EX	AF,AF'
00501B 08          14417   POWR12:         EX	AF,AF'
00501C DC C8 4E    14418                   CALL	C,ADD1		;ROUND UP
00501F 0C          14419                   INC	C
005020 FA 02 50    14420                   JP	M,POWR11
005023 C3 F2 4E    14421                   JP	OFLOW
005026 CD DC 4E    14422   POWR14:         CALL	SWAP
005029 CB BA       14423                   RES	7,D
00502B D9          14424                   EXX
00502C E1          14425                   POP	HL
00502D D9          14426                   EXX
00502E E1          14427                   POP	HL
00502F 08          14428                   EX	AF,AF'
005030 C9          14429                   RET
005031             14430   ;
005031             14431   ;DIVA, DIVB - DIVISION PRIMITIVE.
005031             14432   ;    Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
005031             14433   ;              Remainder in H'L'HL
005031             14434   ;    Inputs: A = loop counter (normally -32)
005031             14435   ;    Destroys: A,D,E,H,L,D',E',H',L',F
005031             14436   ;
005031 B7          14437   DIVA:           OR	A		;CLEAR CARRY
005032 ED 42       14438   DIV0:           SBC	HL,BC		;DIVIDEND-DIVISOR
005034 D9          14439                   EXX
005035 ED 42       14440                   SBC	HL,BC
005037 D9          14441                   EXX
005038 30 05       14442                   JR	NC,DIV1
00503A 09          14443                   ADD	HL,BC		;DIVIDEND+DIVISOR
00503B D9          14444                   EXX
00503C ED 4A       14445                   ADC	HL,BC
00503E D9          14446                   EXX
00503F 3F          14447   DIV1:           CCF
005040 CB 13       14448   DIVC:           RL	E		;SHIFT RESULT INTO DE
005042 CB 12       14449                   RL	D
005044 D9          14450                   EXX
005045 CB 13       14451                   RL	E
005047 CB 12       14452                   RL	D
005049 D9          14453                   EXX
00504A 3C          14454                   INC	A
00504B F0          14455                   RET	P
00504C ED 6A       14456   DIVB:           ADC	HL,HL		;DIVIDEND*2
00504E D9          14457                   EXX
00504F ED 6A       14458                   ADC	HL,HL
005051 D9          14459                   EXX
005052 30 DE       14460                   JR	NC,DIV0
005054 B7          14461                   OR	A
005055 ED 42       14462                   SBC	HL,BC		;DIVIDEND-DIVISOR
005057 D9          14463                   EXX
005058 ED 42       14464                   SBC	HL,BC
00505A D9          14465                   EXX
00505B 37          14466                   SCF
00505C C3 40 50    14467                   JP	DIVC
00505F             14468   ;
00505F             14469   ;MULA, MULB - MULTIPLICATION PRIMITIVE.
00505F             14470   ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
00505F             14471   ;    Inputs: A = loop counter (usually -32)
00505F             14472   ;            H'L'HL = 0
00505F             14473   ;    Destroys: D,E,H,L,D',E',H',L',A,F
00505F             14474   ;
00505F B7          14475   MULA:           OR	A		;CLEAR CARRY
005060 D9          14476   MUL0:           EXX
005061 CB 1A       14477                   RR	D		;MULTIPLIER/2
005063 CB 1B       14478                   RR	E
005065 D9          14479                   EXX
005066 CB 1A       14480                   RR	D
005068 CB 1B       14481                   RR	E
00506A 30 05       14482                   JR	NC,MUL1
00506C 09          14483                   ADD	HL,BC		;ADD IN MULTIPLICAND
00506D D9          14484                   EXX
00506E ED 4A       14485                   ADC	HL,BC
005070 D9          14486                   EXX
005071 3C          14487   MUL1:           INC	A
005072 F0          14488                   RET	P
005073 D9          14489   MULB:           EXX
005074 CB 1C       14490                   RR	H		;PRODUCT/2
005076 CB 1D       14491                   RR	L
005078 D9          14492                   EXX
005079 CB 1C       14493                   RR	H
00507B CB 1D       14494                   RR	L
00507D C3 60 50    14495                   JP	MUL0
005080             14496   ;
005080             14497   ;SQRA, SQRB - SQUARE ROOT PRIMITIVES
005080             14498   ;    Function: B'C'BC = SQR (D'E'DE)
005080             14499   ;    Inputs: A = loop counter (normally -31)
005080             14500   ;            B'C'BCH'L'HL initialised to 0
005080             14501   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
005080             14502   ;
005080 ED 42       14503   SQR1:           SBC	HL,BC
005082 D9          14504                   EXX
005083 ED 42       14505                   SBC	HL,BC
005085 D9          14506                   EXX
005086 0C          14507                   INC	C
005087 30 07       14508                   JR	NC,SQR2
005089 0D          14509                   DEC	C
00508A 09          14510                   ADD	HL,BC
00508B D9          14511                   EXX
00508C ED 4A       14512                   ADC	HL,BC
00508E D9          14513                   EXX
00508F 0D          14514                   DEC	C
005090 3C          14515   SQR2:           INC	A
005091 F0          14516                   RET	P
005092 CB 21       14517   SQRA:           SLA	C
005094 CB 10       14518                   RL	B
005096 0C          14519                   INC	C
005097 D9          14520                   EXX
005098 CB 11       14521                   RL	C
00509A CB 10       14522                   RL	B
00509C CD C8 50    14523                   CALL	SLA8
00509F CD C8 50    14524                   CALL	SLA8
0050A2 D9          14525                   EXX
0050A3 D2 80 50    14526                   JP	NC,SQR1
0050A6 B7          14527   SQR3:           OR	A
0050A7 ED 42       14528                   SBC	HL,BC
0050A9 D9          14529                   EXX
0050AA ED 42       14530                   SBC	HL,BC
0050AC D9          14531                   EXX
0050AD 0C          14532                   INC	C
0050AE C3 90 50    14533                   JP	SQR2
0050B1             14534   ;
0050B1 29          14535   SQRB:           ADD	HL,HL
0050B2 D9          14536                   EXX
0050B3 ED 6A       14537                   ADC	HL,HL
0050B5 D9          14538                   EXX
0050B6 38 EE       14539                   JR	C,SQR3
0050B8 3C          14540                   INC	A
0050B9 0C          14541                   INC	C
0050BA ED 42       14542                   SBC	HL,BC
0050BC D9          14543                   EXX
0050BD ED 42       14544                   SBC	HL,BC
0050BF D9          14545                   EXX
0050C0 D0          14546                   RET	NC
0050C1 09          14547                   ADD	HL,BC
0050C2 D9          14548                   EXX
0050C3 ED 4A       14549                   ADC	HL,BC
0050C5 D9          14550                   EXX
0050C6 0D          14551                   DEC	C
0050C7 C9          14552                   RET
0050C8             14553   ;
0050C8 D9          14554   SLA8:           EXX
0050C9 CB 23       14555                   SLA	E
0050CB CB 12       14556                   RL	D
0050CD D9          14557                   EXX
0050CE CB 13       14558                   RL	E
0050D0 CB 12       14559                   RL	D
0050D2 D9          14560                   EXX
0050D3 ED 6A       14561                   ADC	HL,HL
0050D5 D9          14562                   EXX
0050D6 ED 6A       14563                   ADC	HL,HL
0050D8 C9          14564                   RET
0050D9             14565   ;
0050D9 DD 7E 00    14566   DIGITQ:         LD	A,(IX)
0050DC FE 3A       14567                   CP	'9'+1
0050DE 3F          14568                   CCF
0050DF D8          14569                   RET	C
0050E0 FE 30       14570                   CP	'0'
0050E2 C9          14571                   RET
0050E3             14572   ;
0050E3 DD 7E 00    14573   SIGNQ:          LD	A,(IX)
0050E6 DD 23       14574                   INC	IX
0050E8 FE 20       14575                   CP	' '
0050EA 28 F7       14576                   JR	Z,SIGNQ
0050EC FE 2B       14577                   CP	'+'
0050EE C8          14578                   RET	Z
0050EF FE 2D       14579                   CP	'-'
0050F1 C8          14580                   RET	Z
0050F2 DD 2B       14581                   DEC	IX
0050F4 C9          14582                   RET
0050F5             14583   ;
0050F5 08          14584   ABS2:           EX	AF,AF'
0050F6 CB 7C       14585                   BIT	7,H
0050F8 C4 06 4E    14586                   CALL	NZ,NEGATE	;MAKE ARGUMENTS +VE
0050FB CD DC 4E    14587                   CALL	SWAP
0050FE CB 7C       14588                   BIT	7,H
005100 C4 06 4E    14589                   CALL	NZ,NEGATE
005103 44          14590                   LD	B,H
005104 4D          14591                   LD	C,L
005105 21 00 00    14592                   LD	HL,0
005108 D9          14593                   EXX
005109 44          14594                   LD	B,H
00510A 4D          14595                   LD	C,L
00510B 21 00 00    14596                   LD	HL,0
00510E C9          14597                   RET
00510F             14598   ;
00510F             14599   ;                END
00510F             14600   ; --- End math.asm ---
00510F             14601   
00510F             14602   ; --- Begin data.asm ---
00510F             14603   ;
00510F             14604   ;Automatically created from original source on 2024-12-15 15:29:12
00510F             14605   ;
00510F             14606                   .ASSUME ADL = 0
00510F             14607   ;	.ORG 0x0000
00510F             14608   ;                DEFINE LORAM, SPACE = ROM
00510F             14609   ;                SEGMENT LORAM
00510F             14610   ;
00510F             14611   ;                XDEF	FLAGS
00510F             14612   ;                XDEF	OSWRCHPT
00510F             14613   ;                XDEF	OSWRCHCH
00510F             14614   ;                XDEF	OSWRCHFH
00510F             14615   ;                XDEF	KEYDOWN
00510F             14616   ;                XDEF	KEYASCII
00510F             14617   ;                XDEF	KEYCOUNT
00510F             14618   ;                XDEF	SCRAP
00510F             14619   ;                XDEF	BUFFER
00510F             14620   ;                XDEF	LISTON
00510F             14621   ;                XDEF	PAGE_
00510F             14622   ;
00510F             14623   FLAGS:          DS	1
005110             14624   OSWRCHPT:       DS	2
005112             14625   OSWRCHCH:       DS	1
005113             14626   OSWRCHFH:       DS	1
005114             14627   KEYDOWN:        DS	1
005115             14628   KEYASCII:       DS	1
005116             14629   KEYCOUNT:       DS	1
005117             14630   SCRAP:          DS	31
005136             14631   ;
005136             14632   end_binary: ;  for 05_assemble.py to know where to truncate the binary file
005136             14633   
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 
005136 FF FF FF FF 14634                   ALIGN 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
005200             14635   ;
005200             14636   ;RAM MODULE FOR BBC BASIC INTERPRETER
005200             14637   ;FOR USE WITH VERSION 5.0 OF BBC BASIC
005200             14638   ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
005200             14639   ;
005200             14640   ;                XDEF	ACCS
005200             14641   ;                XDEF	BUFFER
005200             14642   ;                XDEF	ONERSP
005200             14643   ;                XDEF	LIBASE
005200             14644   ;                XDEF	PAGE_
005200             14645   ;                XDEF	LOMEM
005200             14646   ;                XDEF	FREE
005200             14647   ;                XDEF	HIMEM
005200             14648   ;                XDEF	RANDOM
005200             14649   ;                XDEF	COUNT
005200             14650   ;                XDEF	WIDTH
005200             14651   ;                XDEF	ERL
005200             14652   ;                XDEF	ERR
005200             14653   ;                XDEF	ERRTRP
005200             14654   ;                XDEF	ERRTXT
005200             14655   ;                XDEF	TRACEN
005200             14656   ;                XDEF	AUTONO
005200             14657   ;                XDEF	INCREM
005200             14658   ;                XDEF	LISTON
005200             14659   ;                XDEF	DATPTR
005200             14660   ;                XDEF	FNPTR
005200             14661   ;                XDEF	PROPTR
005200             14662   ;                XDEF	STAVAR
005200             14663   ;                XDEF	OC
005200             14664   ;                XDEF	PC
005200             14665   ;                XDEF	DYNVAR
005200             14666   ;                XDEF	CURLIN
005200             14667   ;                XDEF	USER
005200             14668   ;
005200             14669   ;n.b. ACCS, BUFFER & STAVAR must be on page boundaries.
005200             14670   ;
005200             14671   ACCS:           DS	256		;STRING ACCUMULATOR
005300             14672   BUFFER:         DS	256		;STRING INPUT BUFFER
005400             14673   
005400             14674   STAVAR:         DS	27*4		;STATIC VARIABLES
00546C             14675   ; OC:             EQU	STAVAR+15*4	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             14676   ; PC:             EQU	STAVAR+16*4	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             14677   OC:             EQU	15*4+STAVAR	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             14678   PC:             EQU	16*4+STAVAR	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             14679   DYNVAR:         DS	54*2		;DYN. VARIABLE POINTERS
0054D8             14680   FNPTR:          DS	2		;DYN. FUNCTION POINTER
0054DA             14681   PROPTR:         DS	2		;DYN. PROCEDURE POINTER
0054DC             14682   ;
0054DC             14683   PAGE_:          DS	2		;START OF USER PROGRAM
0054DE             14684   LOMEM:          DS	2		;START OF DYN. STORAGE
0054E0             14685   FREE:           DS	2		;FIRST FREE-SPACE BYTE
0054E2             14686   HIMEM:          DS	2		;FIRST BYTE ABOVE STACK
0054E4             14687   LIBASE:         DS	2		;START OF FIRST LIBRARY
0054E6             14688   ;
0054E6             14689   TRACEN:         DS	2		;TRACE FLAG & NUMBER
0054E8             14690   AUTONO:         DS	2		;AUTO FLAG & NUMBER
0054EA             14691   ERRTRP:         DS	2		;ON ERROR STMT POINTER \
0054EC             14692   ONERSP:         DS	2		;ON ERROR LOCAL STKPTR /
0054EE             14693   ERRTXT:         DS	2		;ERROR MESSAGE POINTER
0054F0             14694   DATPTR:         DS	2		;DATA POINTER
0054F2             14695   ERL:            DS	2		;LINE NO OF LAST ERROR
0054F4             14696   CURLIN:         DS	2		;POINTER TO CURRENT LINE
0054F6             14697   RANDOM:         DS	5		;RANDOM NUMBER
0054FB             14698   COUNT:          DS	1		;PRINT POSITION
0054FC             14699   WIDTH:          DS	1		;PRINT WIDTH
0054FD             14700   ERR:            DS	1		;ERROR NUMBER
0054FE             14701   LISTON:         DS	1		;LISTO & OPT FLAG
0054FF             14702   INCREM:         DS	1		;AUTO INCREMENT
005500             14703   VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; originally in equs.inc
005500             14704   ;
005500             14705   USER:           ; END
005500             14706   ; --- End data.asm ---
005500             14707   
