        Output     Line 
       
               0001 ; --- Begin mos_api.inc ---
               0002 ;
               0003 ; Title:	AGON MOS - API for user projects
               0004 ; Author:	Dean Belfield
               0005 ; Created:	03/08/2022
               0006 ; Last Updated:	11/11/2023
               0007 ;
               0008 ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
               0009 ;
               0010 ; Modinfo:
               0011 ; 05/08/2022:	Added mos_feof
               0012 ; 09/08/2022:	Added system variables: cursorX, cursorY
               0013 ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
               0014 ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
               0015 ; 24/09/2022:	Added mos_getError, mos_mkdir
               0016 ; 13/10/2022:	Added mos_oscli
               0017 ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
               0018 ; 04/03/2023:	Added sysvar_scrpixelIndex
               0019 ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
               0020 ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
               0021 ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
               0022 ; 22/03/2023:	The VDP commands are now indexed from 0x80
               0023 ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
               0024 ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
               0025 ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
               0026 ; 19/05/2023:	Added sysvar_scrMode
               0027 ; 05/06/2023:	Added sysvar_rtcEnable
               0028 ; 03/08/2023:	Added mos_setkbvector
               0029 ; 10/08/2023:	Added mos_getkbmap
               0030 ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
               0031 ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
               0032 ;
               0033 ; VDP control (VDU 23, 0, n)
               0034 ;
               0035 vdp_gp:			EQU 	80h
               0036 vdp_keycode:		EQU 	81h
               0037 vdp_cursor:		EQU	82h
               0038 vdp_scrchar:		EQU	83h
               0039 vdp_scrpixel:		EQU	84h
               0040 vdp_audio:		EQU	85h
               0041 vdp_mode:		EQU	86h
               0042 vdp_rtc:		EQU	87h
               0043 vdp_keystate:		EQU	88h
               0044 vdp_logicalcoords:	EQU	C0h
               0045 vdp_terminalmode:	EQU	FFh
               0046 
               0047 ; MOS high level functions
               0048 ;
               0049 mos_getkey:		EQU	00h
               0050 mos_load:		EQU	01h
               0051 mos_save:		EQU	02h
               0052 mos_cd:			EQU	03h
               0053 mos_dir:		EQU	04h
               0054 mos_del:		EQU	05h
               0055 mos_ren:		EQU	06h
               0056 mos_mkdir:		EQU	07h
               0057 mos_sysvars:		EQU	08h
               0058 mos_editline:		EQU	09h
               0059 mos_fopen:		EQU	0Ah
               0060 mos_fclose:		EQU	0Bh
               0061 mos_fgetc:		EQU	0Ch
               0062 mos_fputc:		EQU	0Dh
               0063 mos_feof:		EQU	0Eh
               0064 mos_getError:		EQU	0Fh
               0065 mos_oscli:		EQU	10h
               0066 mos_copy:		EQU	11h
               0067 mos_getrtc:		EQU	12h
               0068 mos_setrtc:		EQU	13h
               0069 mos_setintvector:	EQU	14h
               0070 mos_uopen:		EQU	15h
               0071 mos_uclose:		EQU	16h
               0072 mos_ugetc:		EQU	17h
               0073 mos_uputc:		EQU 	18h
               0074 mos_getfil:		EQU	19h
               0075 mos_fread:		EQU	1Ah
               0076 mos_fwrite:		EQU	1Bh
               0077 mos_flseek:		EQU	1Ch
               0078 mos_setkbvector:	EQU	1Dh
               0079 mos_getkbmap:		EQU	1Eh
               0080 mos_i2c_open:		EQU	1Fh
               0081 mos_i2c_close:		EQU	20h
               0082 mos_i2c_write:		EQU	21h
               0083 mos_i2c_read:		EQU	22h
               0084 
               0085 
               0086 ; FatFS file access functions
               0087 ;
               0088 ffs_fopen:		EQU	80h
               0089 ffs_fclose:		EQU	81h
               0090 ffs_fread:		EQU	82h
               0091 ffs_fwrite:		EQU	83h
               0092 ffs_flseek:		EQU	84h
               0093 ffs_ftruncate:		EQU	85h
               0094 ffs_fsync:		EQU	86h
               0095 ffs_fforward:		EQU	87h
               0096 ffs_fexpand:		EQU	88h
               0097 ffs_fgets:		EQU	89h
               0098 ffs_fputc:		EQU	8Ah
               0099 ffs_fputs:		EQU	8Bh
               0100 ffs_fprintf:		EQU	8Ch
               0101 ffs_ftell:		EQU	8Dh
               0102 ffs_feof:		EQU	8Eh
               0103 ffs_fsize:		EQU	8Fh
               0104 ffs_ferror:		EQU	90h
               0105 
               0106 ; FatFS directory access functions
               0107 ;
               0108 ffs_dopen:		EQU	91h
               0109 ffs_dclose:		EQU	92h
               0110 ffs_dread:		EQU	93h
               0111 ffs_dfindfirst:		EQU	94h
               0112 ffs_dfindnext:		EQU	95h
               0113 
               0114 ; FatFS file and directory management functions
               0115 ;
               0116 ffs_stat:		EQU	96h
               0117 ffs_unlink:		EQU	97h
               0118 ffs_rename:		EQU	98h
               0119 ffs_chmod:		EQU	99h
               0120 ffs_utime:		EQU	9Ah
               0121 ffs_mkdir:		EQU	9Bh
               0122 ffs_chdir:		EQU	9Ch
               0123 ffs_chdrive:		EQU	9Dh
               0124 ffs_getcwd:		EQU	9Eh
               0125 
               0126 ; FatFS volume management and system configuration functions
               0127 ;
               0128 ffs_mount:		EQU	9Fh
               0129 ffs_mkfs:		EQU	A0h
               0130 ffs_fdisk:		EQU	A1h
               0131 ffs_getfree:		EQU	A2h
               0132 ffs_getlabel:		EQU	A3h
               0133 ffs_setlabel:		EQU	A4h
               0134 ffs_setcp:		EQU	A5h
               0135 
               0136 ; File access modes
               0137 ;
               0138 fa_read:		EQU	01h
               0139 fa_write:		EQU	02h
               0140 fa_open_existing:	EQU	00h
               0141 fa_create_new:		EQU	04h
               0142 fa_create_always:	EQU	08h
               0143 fa_open_always:		EQU	10h
               0144 fa_open_append:		EQU	30h
               0145 
               0146 ; System variable indexes for api_sysvars
               0147 ; Index into _sysvars in globals.asm
               0148 ;
               0149 sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
               0150 sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
               0151 sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
               0152 sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
               0153 sysvar_cursorX:		EQU	07h	; 1: Cursor X position
               0154 sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
               0155 sysvar_scrchar:		EQU	09h	; 1: Character read from screen
               0156 sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
               0157 sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
               0158 sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
               0159 sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
               0160 sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
               0161 sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
               0162 sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
               0163 sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
               0164 sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
               0165 sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
               0166 sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
               0167 sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
               0168 sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
               0169 sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
               0170 sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
               0171 sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
               0172 sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
               0173 sysvar_scrMode:		EQU	27h	; 1: Screen mode
               0174 sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
               0175 sysvar_mouseX:		EQU	29h	; 2: Mouse X position
               0176 sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
               0177 sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
               0178 sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
               0179 sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
               0180 sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
               0181 ;
               0182 ; Flags for the VPD protocol
               0183 ;
               0184 vdp_pflag_cursor:	EQU	00000001b
               0185 vdp_pflag_scrchar:	EQU	00000010b
               0186 vdp_pflag_point:	EQU	00000100b
               0187 vdp_pflag_audio:	EQU	00001000b
               0188 vdp_pflag_mode:		EQU	00010000b
               0189 vdp_pflag_rtc:		EQU	00100000b
               0190 vdp_pflag_mouse:	EQU	01000000b
               0191 ; vdp_pflag_buffered:	EQU	10000000b
               0192 
               0193 
               0194 ; FatFS structures
               0195 ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
               0196 ;
               0197 ; Object ID and allocation information (FFOBJID)
               0198 FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
               0199 FFOBJID.id:       EQU 3    ; Hosting volume mount ID
               0200 FFOBJID.attr:     EQU 5    ; Object attribute
               0201 FFOBJID.stat:     EQU 6    ; Object chain status
               0202 FFOBJID.sclust:   EQU 7    ; Object data start cluster
               0203 FFOBJID.objsize:  EQU 11   ; Object size
               0204 FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
               0205 ;
               0206 ; File object structure (FIL)
               0207 ;
               0208 FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
               0209 FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
               0210 FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
               0211 FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
               0212 FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
               0213 FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
               0214 FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
               0215 FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
               0216 FIL.obj.objsize:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
               0217 ;
               0218 ; Directory object structure (DIR)
               0219 ;
               0220 DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
               0221 DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
               0222 DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
               0223 DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
               0224 DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
               0225 DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
               0226 DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
               0227 DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
               0228 ;
               0229 ; File information structure (FILINFO)
               0230 ;
               0231 FILINFO.fsize:    EQU 0    ; File size
               0232 FILINFO.fdate:    EQU 4    ; Modified date
               0233 FILINFO.ftime:    EQU 6    ; Modified time
               0234 FILINFO.fattrib:  EQU 8    ; File attribute
               0235 FILINFO.altname:  EQU 9    ; Alternative file name
               0236 FILINFO.fname:    EQU 22   ; Primary file name
               0237 FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
               0238 ;
               0239 ; Macro for calling the API
               0240 ; Parameters:
               0241 ; - function: One of the function numbers listed above
               0242 ;
               0243 MACRO MOSCALL	function
               0244 LD	A, function
               0245 RST.LIS	08h
               0246 ENDMACRO 	; --- End mos_api.inc ---
               0247 
               0248 ; --- Begin equs.inc ---
               0249 ; ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
               0250 ; STAVAR: EQU 0
               0251 ; ACCS: EQU 0
               0252 ; ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
               0253 
               0254 ;
               0255 ; Title:	BBC Basic for AGON - Equs
               0256 ; Author:	Dean Belfield
               0257 ; Created:	04/12/2024
               0258 ; Last Updated:	05/12/2024
               0259 ;
               0260 ; Modinfo:
               0261 ; 05/12/2024:	Removed Stack_Top
               0262 
               0263 ;			XREF		STAVAR
               0264 ;			XREF		ACCS
               0265 
               0266 RAM_Top:		EQU		0FF00h
               0267 
               0268 ; For GPIO
               0269 ; PA not available on eZ80L92
               0270 ;
               0271 PA_DR:			EQU		96h
               0272 PA_DDR:			EQU		97h
               0273 PA_ALT1:		EQU		98h
               0274 PA_ALT2:		EQU		99h
               0275 PB_DR:          	EQU		9Ah
               0276 PB_DDR:        	 	EQU		9Bh
               0277 PB_ALT1:        	EQU		9Ch
               0278 PB_ALT2:        	EQU		9Dh
               0279 PC_DR:          	EQU		9Eh
               0280 PC_DDR:         	EQU		9Fh
               0281 PC_ALT1:        	EQU		A0h
               0282 PC_ALT2:        	EQU		A1h
               0283 PD_DR:          	EQU		A2h
               0284 PD_DDR:			EQU		A3h
               0285 PD_ALT1:		EQU		A4h
               0286 PD_ALT2:		EQU		A5h
               0287 
               0288 GPIOMODE_OUT:		EQU		0	; Output
               0289 GPIOMODE_IN:		EQU		1	; Input
               0290 GPIOMODE_DIO:		EQU		2	; Open Drain IO
               0291 GPIOMODE_SIO:		EQU		3	; Open Source IO
               0292 GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
               0293 GPIOMODE_ALTF:		EQU		5;	; Alt Function
               0294 GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
               0295 GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
               0296 GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
               0297 GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
               0298 
               0299 ; Originally in ram.asm
               0300 ;
               0301 ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%) ; back to data.asm
               0302 ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%) ; back to data.asm
               0303 ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; moved to data.asm
               0304 
               0305 ; Originally in main.asm
               0306 ;
               0307 CR:			EQU     0DH
               0308 LF:			EQU     0AH
               0309 ESC:			EQU     1BH
               0310 ; --- End equs.inc ---
               0311 
               0312 ; --- Begin macros.inc ---
               0313 ;
               0314 ; Title:	BBC Basic Interpreter - Z80 version
               0315 ;		Useful macros
               0316 ; Author:	Dean Belfield
               0317 ; Created:	04/12/2024
               0318 ; Last Updated:	04/12/2024
               0319 ;
               0320 ; Modinfo:
               0321 
               0322 MACRO EXREG rp1, rp2
               0323 PUSH    rp1
               0324 POP     rp2
               0325 ENDMACRO
               0326 
               0327 MACRO ADD8U_DE ; reg
               0328 ADD     A, E
               0329 LD      E, A
               0330 ADC     A, D
               0331 SUB     E
               0332 LD      D, A
               0333 ENDMACRO
               0334 
               0335 MACRO ADD8U_HL ; reg
               0336 ADD     A, L
               0337 LD      L, A
               0338 ADC     A, H
               0339 SUB     L
               0340 LD      H, A
               0341 ENDMACRO
               0342 
               0343 MACRO VDU VAL
               0344 LD      A, VAL
               0345 CALL    OSWRCH
               0346 ENDMACRO
               0347 
               0348 MACRO SET_GPIO REG, VAL
               0349 IN0     A, (REG)
               0350 OR      VAL
               0351 OUT0    (REG), A
               0352 ENDMACRO
               0353 
               0354 MACRO RES_GPIO REG, VAL
               0355 PUSH    BC
               0356 LD      A, VAL
               0357 CPL
               0358 LD      C, A
               0359 IN0     A, (REG)
               0360 AND     C
               0361 OUT0    (REG), A
               0362 POP     BC
               0363 ENDMACRO
               0364 ; --- End macros.inc ---
               0365 
               0366 ; --- Begin agon_init.asm ---
               0367 ;
               0368 ; Title:	BBC Basic for AGON - Initialisation Code
               0369 ;		Initialisation Code
               0370 ; Author:	Dean Belfield
               0371 ; Created:	04/12/2024
               0372 ; Last Updated:	14/12/2024
               0373 ;
               0374 ; Modinfo:
               0375 ; 14/12/2024:	Fix for *BYE command
               0376 
               0377 ;			SEGMENT __VECTORS
               0378 
               0379 ;			XREF	START
               0380 ;			XREF	ACCS
               0381 ;			XREF	TELL
               0382 
               0383 .ASSUME	ADL = 0
               0384 .ORG 0x0000
               0385 
               0386 ; INCLUDE	"equs.inc"
               0387 
               0388 argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
               0389 
               0390 ;
               0391 ; Start in mixed mode. Assumes MBASE is set to correct segment
               0392 ;
000000 C3      0393 JP	_start				; Jump to start
000001 52 
000002 00 
               0394 DS	5
               0395 
000008 FF   
000009 FF 
00000A FF 
00000B FF 
00000B FF   
000008 49      0396 RST_08:			RST.LIS	08h				; API call
000009 CF 
00000A C9      0397 RET
               0398 DS 	5
               0399 
000010 FF   
000011 FF 
000012 FF 
000013 FF 
000013 FF   
000010 49      0400 RST_10:			RST.LIS 10h				; Output
000011 D7 
000012 C9      0401 RET
               0402 DS	5
               0403 
000018 FF   
000019 FF 
00001A FF 
00001B FF 
00001B FF   
000018 49      0404 RST_18:			RST.LIS	18h				; Block Output
000019 DF 
00001A C9      0405 RET
               0406 DS	5
               0407 
               0408 RST_20:			DS	8
               0409 RST_28:			DS	8
               0410 RST_30:			DS	8
               0411 
               0412 ;
               0413 ; The NMI interrupt vector (not currently used by AGON)
               0414 ;
000038 FF   
000039 FF 
00003A FF 
00003B FF 
00003B FF   
00003C FF 
00003D FF 
00003E FF 
00003E FF   
00003F FF 
000040 FF 
000041 FF 
000041 FF   
000042 FF 
000043 FF 
000044 FF 
000044 FF   
000045 FF 
000046 FF 
000047 FF 
000047 FF   
000048 FF 
000049 FF 
00004A FF 
00004A FF   
00004B FF 
00004C FF 
00004D FF 
00004D FF   
000038 FB      0415 RST_38:			EI
000039 ED      0416 RETI
00003A 4D 
               0417 ;
               0418 ; The header stuff is from byte 64 onwards
               0419 ;
00003B FF      0420 ALIGN	64
00003C FF 
00003D FF 
00003E FF 
00003E FF   
               0421 
000040 4D      0422 DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
000041 4F 
000042 53 
000043 00      0423 DB	00h				; MOS header version 0
000044 00      0424 DB	00h				; Flag for run mode (0: Z80, 1: ADL)
               0425 
000045 42      0426 _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
000046 42 
000047 43 
000048 42 
000048 41   
000049 53 
00004A 49 
00004B 43 
00004B 2E   
00004C 42 
00004D 49 
00004E 4E 
00004E 00   
               0427 
               0428 ;
               0429 ; And the code follows on immediately after the header
               0430 ;
000052 5B      0431 _start:			PUSH.LIL	IY			; Preserve IY
000053 FD 
000054 E5 
               0432 
000055 FD      0433 LD		IY, 0			; Preserve SPS
000056 21 
000057 00 
000058 00 
000059 FD      0434 ADD		IY, SP
00005A 39 
00005B 5B      0435 PUSH.LIL	IY
00005C FD 
00005D E5 
               0436 
00005E E3      0437 EX		(SP), HL		; Get the SPS part of the return address
00005F 5B      0438 PUSH.LIL	HL
000060 E5 
000061 E3      0439 EX		(SP), HL		; And restore it for BASIC
               0440 
000062 5B      0441 PUSH.LIL	AF			; Preserve the rest of the registers
000063 F5 
000064 5B      0442 PUSH.LIL	BC
000065 C5 
000066 5B      0443 PUSH.LIL	DE
000067 D5 
000068 5B      0444 PUSH.LIL	IX
000069 DD 
00006A E5 
               0445 
00006B ED      0446 LD		A, MB			; Segment base
00006C 6E 
00006D DD      0447 LD		IX, argv_ptrs		; The argv array pointer address
00006E 21 
00006F 65 
000070 01 
000071 CD      0448 CALL		_set_aix24		; Convert to a 24-bit address
000072 51 
000073 01 
000074 5B      0449 PUSH.LIL	IX
000075 DD 
000076 E5 
000077 CD      0450 CALL		_parse_params		; Parse the parameters
000078 E1 
000079 00 
00007A 5B      0451 POP.LIL		IX			; IX: argv
00007B DD 
00007C E1 
00007D 06      0452 LD		B, 0			;  C: argc
00007E 00 
00007F CD      0453 CALL		_main			; Start user code
000080 9A 
000081 00 
               0454 
000082 5B      0455 POP.LIL		IX			; Restore the registers
000083 DD 
000084 E1 
000085 5B      0456 POP.LIL		DE
000086 D1 
000087 5B      0457 POP.LIL		BC
000088 C1 
000089 5B      0458 POP.LIL		AF
00008A F1 
               0459 
00008B EB      0460 EX		DE, HL 			; DE: Return code from BASIC
00008C 5B      0461 POP.LIL		HL 			; The SPS part of the return address
00008D E1 
00008E 5B      0462 POP.LIL		IY			; Get the preserved SPS
00008F FD 
000090 E1 
000091 FD      0463 LD		SP, IY			; Restore SPS
000092 F9 
000093 E3      0464 EX		(SP), HL		; Store the SPS part of the return address on the stack
000094 EB      0465 EX		DE, HL 			; HL: Return code from BASIC
               0466 
000095 5B      0467 POP.LIL		IY			; Restore IY
000096 FD 
000097 E1 
000098 49      0468 RET.L					; Return to MOS
000099 C9 
               0469 
               0470 ; The main routine
               0471 ; IXU: argv - pointer to array of parameters
               0472 ;   C: argc - number of parameters
               0473 ; Returns:
               0474 ;  HL: Error code, or 0 if OK
               0475 ;
00009A 21      0476 _main:			LD	HL, ACCS		; Clear the ACCS
00009B 00 
00009C 52 
00009D 36      0477 LD	(HL), 0
00009E 00 
00009F 79      0478 LD	A, C
0000A0 FE      0479 CP	2
0000A1 02 
0000A2 28      0480 JR	Z, _autoload		; 2 parameters = autoload
0000A3 24 
0000A4 38      0481 JR	C, _startbasic		; 1 parameter = normal start
0000A5 35 
               0482 ;			CALL	STAR_VERSION		; Output the AGON version
0000A6 CD      0483 CALL	TELL
0000A7 FA 
0000A8 44 
0000A9 55      0484 DB	"Usage:\n\r"
0000AA 73 
0000AB 61 
0000AC 67 
0000AC 65   
0000AD 3A 
0000AE 0A 
0000AF 0D 
0000B1 52      0485 DB	"RUN . <filename>\n\r", 0
0000B2 55 
0000B3 4E 
0000B4 20 
0000B4 2E   
0000B5 20 
0000B6 3C 
0000B7 66 
0000B7 69   
0000B8 6C 
0000B9 65 
0000BA 6E 
0000BA 61   
0000BB 6D 
0000BC 65 
0000BD 3E 
0000BD 0A   
0000BE 0D 
0000BF 00 
0000C4 21      0486 LD	HL, 0			; The error code
0000C5 00 
0000C6 00 
0000C7 C9      0487 RET
               0488 ;
0000C8 5B      0489 _autoload:		LD.LIL	HL, (IX+3)		; HLU: Address of filename
0000C9 DD 
0000CA 27 
0000CB 03 
0000CC 11      0490 LD	DE, ACCS		;  DE: Destination address
0000CD 00 
0000CE 52 
0000CF 5B      0491 @@:			LD.LIL	A, (HL)			; Fetch the filename byte
0000D0 7E 
0000D1 12      0492 LD	(DE), A			;
0000D2 5B      0493 INC.LIL	HL			; Increase the source pointer
0000D3 23 
0000D4 1C      0494 INC	E			; We only need to increase E as ACCS is on a page boundary
0000D5 20      0495 JR	NZ, @B			; Loop until we hit a 0 byte
0000D6 F8 
0000D7 1D      0496 DEC	E
0000D8 3E      0497 LD	A, CR
0000D9 0D 
0000DA 12      0498 LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
               0499 ;
0000DB E1      0500 _startbasic:		POP	 HL			; Pop the return address to init off SPS
0000DC 5B      0501 PUSH.LIL HL 			; Stack it on SPL (*BYE will use this as the return address)
0000DD E5 
0000DE C3      0502 JP	 START			; And start BASIC
0000DF 17 
0000E0 37 
               0503 
               0504 ; Parse the parameter string into a C array
               0505 ; Parameters
               0506 ; -   A: Segment base
               0507 ; - HLU: Address of parameter string
               0508 ; - IXU: Address for array pointer storage
               0509 ; Returns:
               0510 ; -   C: Number of parameters parsed
               0511 ;
0000E1 01      0512 _parse_params:		LD		BC, _exec_name		; Get the address of the app name in this segment
0000E2 45 
0000E3 00 
0000E4 CD      0513 CALL		_set_abc24		; Convert it to a 24-bit address based upon segment base
0000E5 3F 
0000E6 01 
0000E7 5B      0514 LD.LIL		(IX+0), BC		; ARGV[0] = the executable name
0000E8 DD 
0000E9 0F 
0000EA 00 
0000EB 5B      0515 INC.LIL		IX
0000EC DD 
0000ED 23 
0000EE 5B      0516 INC.LIL		IX
0000EF DD 
0000F0 23 
0000F1 5B      0517 INC.LIL		IX
0000F2 DD 
0000F3 23 
0000F4 CD      0518 CALL		_skip_spaces		; Skip HL past any leading spaces
0000F5 36 
0000F6 01 
               0519 ;
0000F7 01      0520 LD		BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0000F8 01 
0000F9 00 
0000FA 06      0521 LD		B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0000FB 0F 
               0522 ;
0000FC C5      0523 _parse_params_1:	PUSH		BC			; Stack ARGC
0000FD 5B      0524 PUSH.LIL	HL			; Stack start address of token
0000FE E5 
0000FF CD      0525 CALL		_get_token		; Get the next token
000100 25 
000101 01 
000102 79      0526 LD		A, C			; A: Length of the token in characters
000103 5B      0527 POP.LIL		DE			; Start address of token (was in HL)
000104 D1 
000105 C1      0528 POP		BC			; ARGC
000106 B7      0529 OR		A			; Check for A=0 (no token found) OR at end of string
000107 C8      0530 RET		Z
               0531 ;
000108 5B      0532 LD.LIL		(IX+0), DE		; Store the pointer to the token
000109 DD 
00010A 1F 
00010B 00 
00010C 5B      0533 PUSH.LIL	HL			; DE=HL
00010D E5 
00010E 5B      0534 POP.LIL		DE
00010F D1 
000110 CD      0535 CALL		_skip_spaces		; And skip HL past any spaces onto the next character
000111 36 
000112 01 
000113 AF      0536 XOR		A
000114 5B      0537 LD.LIL		(DE), A			; Zero-terminate the token
000115 12 
000116 5B      0538 INC.LIL		IX
000117 DD 
000118 23 
000119 5B      0539 INC.LIL		IX
00011A DD 
00011B 23 
00011C 5B      0540 INC.LIL		IX			; Advance to next pointer position
00011D DD 
00011E 23 
00011F 0C      0541 INC		C			; Increment ARGC
000120 79      0542 LD		A, C			; Check for C >= A
000121 B8      0543 CP		B
000122 38      0544 JR		C, _parse_params_1	; And loop
000123 D8 
000124 C9      0545 RET
               0546 
               0547 ; Get the next token
               0548 ; Parameters:
               0549 ; - HL: Address of parameter string
               0550 ; Returns:
               0551 ; - HL: Address of first character after token
               0552 ; -  C: Length of token (in characters)
               0553 ;
000125 0E      0554 _get_token:		LD		C, 0			; Initialise length
000126 00 
000127 5B      0555 @@:			LD.LIL		A, (HL)			; Get the character from the parameter string
000128 7E 
000129 B7      0556 OR		A			; Exit if 0 (end of parameter string in MOS)
00012A C8      0557 RET 		Z
00012B FE      0558 CP		13			; Exit if CR (end of parameter string in BBC BASIC)
00012C 0D 
00012D C8      0559 RET		Z
00012E FE      0560 CP		' '			; Exit if space (end of token)
00012F 20 
000130 C8      0561 RET		Z
000131 5B      0562 INC.LIL		HL			; Advance to next character
000132 23 
000133 0C      0563 INC 		C			; Increment length
000134 18      0564 JR		@B
000135 F1 
               0565 
               0566 ; Skip spaces in the parameter string
               0567 ; Parameters:
               0568 ; - HL: Address of parameter string
               0569 ; Returns:
               0570 ; - HL: Address of next none-space character
               0571 ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
               0572 ;
000136 5B      0573 _skip_spaces:		LD.LIL		A, (HL)			; Get the character from the parameter string
000137 7E 
000138 FE      0574 CP		' '			; Exit if not space
000139 20 
00013A C0      0575 RET		NZ
00013B 5B      0576 INC.LIL		HL			; Advance to next character
00013C 23 
00013D 18      0577 JR		_skip_spaces		; Increment length
00013E F7 
               0578 
               0579 ; Set the MSB of BC (U) to A
               0580 ; Parameters:
               0581 ; - BC: 16-bit address
               0582 ; -  A: Value to stick in U of BC
               0583 ; Returns:
               0584 ; - BCU
               0585 ;
00013F 5B      0586 _set_abc24:		PUSH.LIL	HL			; Preserve HL
000140 E5 
000141 5B      0587 PUSH.LIL	BC			; Stick BC onto SPL
000142 C5 
000143 5B      0588 LD.LIL		HL, 2			; HL: SP+2
000144 21 
000145 02 
000146 00 
000146 00   
000148 5B      0589 ADD.LIL		HL, SP
000149 39 
00014A 5B      0590 LD.LIL		(HL), A			; Store A in it
00014B 77 
00014C 5B      0591 POP.LIL		BC			; Fetch ammended BC
00014D C1 
00014E 5B      0592 POP.LIL		HL			; Restore HL
00014F E1 
000150 C9      0593 RET
               0594 
               0595 ; Set the MSB of BC (U) to A
               0596 ; Parameters:
               0597 ; - IX: 16-bit address
               0598 ; -  A: Value to stick in U of BC
               0599 ; Returns:
               0600 ; - IXU
               0601 ;
000151 5B      0602 _set_aix24:		PUSH.LIL	IX			; Stick IX onto SPL
000152 DD 
000153 E5 
000154 5B      0603 LD.LIL		IX, 2			; IX: SP+2
000155 DD 
000156 21 
000157 02 
000157 00   
000158 00 
00015A 5B      0604 ADD.LIL		IX, SP
00015B DD 
00015C 39 
00015D 5B      0605 LD.LIL		(IX), A			; Store A in it
00015E DD 
00015F 77 
000160 00 
000161 5B      0606 POP.LIL		IX			; Fetch ammended IX
000162 DD 
000163 E1 
000164 C9      0607 RET
               0608 
               0609 ; Storage for the argv array pointers
               0610 ;
000165 00      0611 argv_ptrs:		BLKP	argv_ptrs_max, 0		; Storage for the argv array pointers
000166 00 
000167 00 
000168 00 
000168 00   
000169 00 
00016A 00 
00016B 00 
00016B 00   
00016C 00 
00016D 00 
00016E 00 
00016E 00   
00016F 00 
000170 00 
000171 00 
000171 00   
000172 00 
000173 00 
000174 00 
000174 00   
000175 00 
000176 00 
000177 00 
000177 00   
000178 00 
000179 00 
00017A 00 
00017A 00   
00017B 00 
00017C 00 
00017D 00 
00017D 00   
00017E 00 
00017F 00 
000180 00 
000180 00   
000181 00 
000182 00 
000183 00 
000183 00   
000184 00 
000185 00 
000186 00 
000186 00   
000187 00 
000188 00 
000189 00 
               0612 ; --- End agon_init.asm ---
               0613 
               0614 ; --- Begin acorn.asm ---
               0615 ;
               0616 ;Automatically created from original source on 2024-12-15 15:29:12
               0617 ;
               0618 .ASSUME ADL = 0
               0619 ;	.ORG 0x0000
               0620 ;                SEGMENT CODE
               0621 ;
               0622 ;PATCH FOR BBC BASIC TO CP/M 2.2 & 3.0
               0623 ;* ACORN COMPUTERS Z80 TUBE VERSION  *
               0624 ;(C) COPYRIGHT R.T.RUSSELL, 02-01-1984
               0625 ;VERSION 5.0, 12-07-2024
               0626 ;
               0627 ;                XREF	OSWRCH
               0628 ;                XREF	OSWORD
               0629 ;                XREF	OSBYTE
               0630 ;
               0631 ; ESC            EQU	1BH
               0632 TBY:            EQU	0FH
               0633 ; TTO:            EQU	0B8H in main.asm
               0634 TFILL:          EQU	03H
               0635 ;
               0636 ;                XREF	ITEMI
               0637 ;                XREF	EXPRI
               0638 ;                XREF	COMMA
               0639 ;                XREF	TERMQ
               0640 ;                XREF	BRAKET
               0641 ;                XREF	EXTERR
               0642 ;                XREF	STOREN
               0643 ;                XREF	TRAP
               0644 ;                XREF	VAR_
               0645 ;                XREF	NXT
               0646 ;                XREF	XEQ
               0647 ;
               0648 ;                XREF	ACCS
               0649 ;                XREF	COUNT
               0650 ;                XREF	WIDTH
               0651 ;                XREF	SCRAP
               0652 ;
               0653 ;                XDEF	OSCALL
               0654 ;                XDEF	CLRSCN
               0655 ;                XDEF	PUTCSR
               0656 ;                XDEF	GETCSR
               0657 ;                XDEF	PUTIME
               0658 ;                XDEF	GETIME
               0659 ;                XDEF	OSKEY
               0660 ;
               0661 ;                XDEF	CLG
               0662 ;                XDEF	MOVE
               0663 ;                XDEF	DRAW
               0664 ;                XDEF	PLOT
               0665 ;                XDEF	MODE
               0666 ;                XDEF	COLOUR
               0667 ;                XDEF	GCOL
               0668 ;                XDEF	ADVAL
               0669 ;                XDEF	SOUND
               0670 ;                XDEF	ENVEL
               0671 ;                XDEF	POINT
               0672 ;
               0673 ;                XDEF	CIRCLE
               0674 ;                XDEF	ELLIPS
               0675 ;                XDEF	FILL
               0676 ;                XDEF	MOUSE
               0677 ;                XDEF	ORIGIN
               0678 ;                XDEF	RECTAN
               0679 ;                XDEF	LINE
               0680 ;                XDEF	TINT
               0681 ;                XDEF	WAIT
               0682 ;                XDEF	SYS
               0683 ;                XDEF	CSRON
               0684 ;                XDEF	CSROFF
               0685 ;
               0686 ;                XDEF	PUTIMS
               0687 ;                XDEF	GETIMS
               0688 ;                XDEF	TINTFN
               0689 ;                XDEF	MODEFN
               0690 ;                XDEF	WIDFN
               0691 ;
               0692 ;GETIME	- Read elapsed-time clock.
               0693 ;  	  Outputs:  DEHL = elapsed time (centiseconds)
               0694 ; 	  Destroys: A,D,E,H,L,F
               0695 ;
000195 3E      0696 GETIME:         LD	A,1
000196 01 
000197 21      0697 LD	HL,SCRAP
000198 17 
000199 51 
00019A CD      0698 CALL	OSWORD
00019B 4F 
00019C 14 
00019D 21      0699 LD	HL,SCRAP
00019E 17 
00019F 51 
0001A0 5E      0700 LD	E,(HL)
0001A1 23      0701 INC	HL
0001A2 56      0702 LD	D,(HL)
0001A3 23      0703 INC	HL
0001A4 7E      0704 LD	A,(HL)
0001A5 23      0705 INC	HL
0001A6 66      0706 LD	H,(HL)
0001A7 6F      0707 LD	L,A
0001A8 EB      0708 EX	DE,HL
0001A9 C9      0709 RET
               0710 ;
               0711 ;GETIMS	- Read real-time clock as string.
               0712 ;  	  Outputs:  TIME$ in string accumulator
               0713 ;                   E = string length (25)
               0714 ; 	  Destroys: A,B,C,D,E,H,L,F
               0715 ;
0001AA 3E      0716 GETIMS:         LD	A,14
0001AB 0E 
0001AC 21      0717 LD	HL,SCRAP
0001AD 17 
0001AE 51 
0001AF 36      0718 LD	(HL),0
0001B0 00 
0001B1 CD      0719 CALL	OSWORD
0001B2 4F 
0001B3 14 
0001B4 21      0720 LD	HL,SCRAP
0001B5 17 
0001B6 51 
0001B7 11      0721 LD	DE,ACCS
0001B8 00 
0001B9 52 
0001BA 7E      0722 LD	A,(HL)
0001BB BB      0723 CP	E
0001BC C8      0724 RET	Z
0001BD 01      0725 LD	BC,25
0001BE 19 
0001BF 00 
0001C0 ED      0726 LDIR
0001C1 B0 
0001C2 C9      0727 RET
               0728 ;
               0729 ;
               0730 ;PUTIME	- Load elapsed-time clock.
               0731 ;   	  Inputs:   DEHL = time to load (centiseconds)
               0732 ; 	  Destroys: A,D,E,H,L,F
               0733 ;
0001C3 DD      0734 PUTIME:         PUSH	IX
0001C4 E5 
0001C5 DD      0735 LD	IX,SCRAP
0001C6 21 
0001C7 17 
0001C8 51 
0001C9 DD      0736 LD	(IX+0),L
0001CA 75 
0001CB 00 
0001CC DD      0737 LD	(IX+1),H
0001CD 74 
0001CE 01 
0001CF DD      0738 LD	(IX+2),E
0001D0 73 
0001D1 02 
0001D2 DD      0739 LD	(IX+3),D
0001D3 72 
0001D4 03 
0001D5 3E      0740 LD	A,2
0001D6 02 
0001D7 21      0741 LD	HL,SCRAP
0001D8 17 
0001D9 51 
0001DA CD      0742 CALL	OSWORD
0001DB 4F 
0001DC 14 
0001DD DD      0743 POP	IX
0001DE E1 
0001DF C9      0744 RET
               0745 ;
               0746 ;PUTIMS	- Wtite real-time clock as string.
               0747 ;  	  Inputs:   string in string accumulator
               0748 ;                   E = string length
               0749 ; 	  Destroys: A,B,C,D,E,H,L,F
               0750 ;
0001E0 7B      0751 PUTIMS:         LD	A,E		;Length
0001E1 FE      0752 CP	26
0001E2 1A 
0001E3 D0      0753 RET	NC
0001E4 06      0754 LD	B,0
0001E5 00 
0001E6 4F      0755 LD	C,A
0001E7 11      0756 LD	DE,SCRAP+1
0001E8 18 
0001E9 51 
0001EA 21      0757 LD	HL,ACCS
0001EB 00 
0001EC 52 
0001ED ED      0758 LDIR
0001EE B0 
0001EF 21      0759 LD	HL,SCRAP
0001F0 17 
0001F1 51 
0001F2 77      0760 LD	(HL),A
0001F3 3E      0761 LD	A,15
0001F4 0F 
0001F5 C3      0762 JP	OSWORD
0001F6 4F 
0001F7 14 
               0763 ;
               0764 ;
               0765 ;CLRSCN	- Clear screen.
               0766 ; 	  Destroys: A,D,E,H,L,F
               0767 ;
0001F8 3E      0768 CLRSCN:         LD	A,0CH
0001F9 0C 
0001FA C3      0769 JP	OSWRCH
0001FB 95 
0001FC 11 
               0770 ;
               0771 ;
               0772 ;OSKEY	- Sample keyboard with specified wait.
               0773 ;   	  Inputs:   HL = Time to wait (centiseconds)
               0774 ;  	  Outputs:  Carry reset indicates time-out.
               0775 ;                   If carry set, A = character typed.
               0776 ; 	  Destroys: A,D,E,H,L,F
               0777 ;
0001FD 3E      0778 OSKEY:          LD	A,129
0001FE 81 
0001FF CD      0779 CALL	OSBYTE
000200 6D 
000201 14 
000202 7C      0780 LD	A,H
000203 B7      0781 OR	A
000204 C0      0782 RET	NZ		;TIME-OUT, CARRY RESET
000205 7D      0783 LD	A,L
000206 37      0784 SCF
000207 C9      0785 RET			;NORMAL, CARRY SET
               0786 ;
               0787 ;PUTCSR	- Move cursor to specified position.
               0788 ;   	  Inputs:   DE = horizontal position (LHS=0)
               0789 ;                   HL = vertical position (TOP=0)
               0790 ; 	  Destroys: A,D,E,H,L,F
               0791 ;
000208 3E      0792 PUTCSR:         LD	A,1FH
000209 1F 
00020A CD      0793 CALL	OSWRCH
00020B 95 
00020C 11 
00020D 7B      0794 LD	A,E
00020E CD      0795 CALL	OSWRCH
00020F 95 
000210 11 
000211 7D      0796 LD	A,L
000212 C3      0797 JP	OSWRCH
000213 95 
000214 11 
               0798 ;
               0799 ;GETCSR	- Return cursor coordinates.
               0800 ;   	  Outputs:  DE = X coordinate (POS)
               0801 ;                   HL = Y coordinate (VPOS)
               0802 ;  	  Destroys: A,D,E,H,L,F
               0803 ;
000215 3E      0804 GETCSR:         LD	A,134
000216 86 
000217 CD      0805 CALL	OSBYTE
000218 6D 
000219 14 
00021A 5D      0806 LD	E,L
00021B 6C      0807 LD	L,H
00021C 16      0808 LD	D,0
00021D 00 
00021E 62      0809 LD	H,D
00021F C9      0810 RET
               0811 ;
               0812 ;POINT - var=POINT(x,y)
               0813 ;
000220 CD      0814 POINT:          CALL	EXPRI
000221 33 
000222 18 
000223 D9      0815 EXX
000224 E5      0816 PUSH	HL
000225 CD      0817 CALL	CEXPRI
000226 5D 
000227 05 
000228 D9      0818 EXX
000229 D1      0819 POP	DE
00022A CD      0820 CALL	BRAKET
00022B AE 
00022C 20 
00022D DD      0821 LD	IX,SCRAP
00022E 21 
00022F 17 
000230 51 
000231 DD      0822 LD	(IX+0),E
000232 73 
000233 00 
000234 DD      0823 LD	(IX+1),D
000235 72 
000236 01 
000237 DD      0824 LD	(IX+2),L
000238 75 
000239 02 
00023A DD      0825 LD	(IX+3),H
00023B 74 
00023C 03 
00023D 21      0826 LD	HL,SCRAP
00023E 17 
00023F 51 
000240 3E      0827 LD	A,9
000241 09 
000242 CD      0828 CALL	OSWORD
000243 4F 
000244 14 
000245 DD      0829 LD	A,(IX+4)
000246 7E 
000247 04 
000248 6F      0830 LD	L,A
000249 C6      0831 ADD	A,1
00024A 01 
00024B 9F      0832 SBC	A,A
00024C 67      0833 LD	H,A
00024D D9      0834 RETEXX:         EXX
00024E 67      0835 LD	H,A
00024F 6F      0836 LD	L,A
000250 AF      0837 XOR	A
000251 4F      0838 LD	C,A
000252 C9      0839 RET
               0840 ;
               0841 ;ADVAL - var=ADVAL(n)
               0842 ;
000253 CD      0843 ADVAL:          CALL	ITEMI
000254 60 
000255 18 
000256 D9      0844 EXX
000257 3E      0845 LD	A,128
000258 80 
000259 CD      0846 CALL	OSBYTE
00025A 6D 
00025B 14 
00025C AF      0847 XOR	A
00025D 18      0848 JR	RETEXX
00025E EE 
               0849 ;
               0850 ;MODEFN - var=MODE
               0851 ;
00025F 3E      0852 MODEFN:         LD	A,135
000260 87 
000261 CD      0853 CALL	OSBYTE
000262 6D 
000263 14 
000264 6C      0854 LD	L,H
000265 AF      0855 RETU8:          XOR	A
000266 67      0856 LD	H,A
000267 18      0857 JR	RETEXX
000268 E4 
               0858 ;
               0859 ;WIDFN - var=WIDTH
               0860 ;
000269 3A      0861 WIDFN:          LD	A,(WIDTH)
00026A FC 
00026B 54 
00026C 6F      0862 LD	L,A
00026D 18      0863 JR	RETU8
00026E F6 
               0864 ;
               0865 ;ENVEL - ENVELOPE var,var,var,var,var,var,var,
               0866 ;                 var,var,var,var,var,var,var
               0867 ;
00026F 06      0868 ENVEL:          LD	B,0
000270 00 
000271 DD      0869 LD	IX,SCRAP
000272 21 
000273 17 
000274 51 
000275 C5      0870 PUSH	BC
000276 DD      0871 PUSH	IX
000277 E5 
000278 CD      0872 ENVEL1:         CALL	EXPRI
000279 33 
00027A 18 
00027B D9      0873 EXX
00027C DD      0874 POP	IX
00027D E1 
00027E C1      0875 POP	BC
00027F DD      0876 LD	(IX),L
000280 75 
000281 00 
000282 78      0877 LD	A,B
000283 FE      0878 CP	13
000284 0D 
000285 28      0879 JR	Z,ENVEL2
000286 0B 
000287 04      0880 INC	B
000288 DD      0881 INC	IX
000289 23 
00028A C5      0882 PUSH	BC
00028B DD      0883 PUSH	IX
00028C E5 
00028D CD      0884 CALL	COMMA
00028E A2 
00028F 20 
000290 18      0885 JR	ENVEL1
000291 E6 
000292 21      0886 ENVEL2:         LD	HL,SCRAP
000293 17 
000294 51 
000295 3E      0887 LD	A,8
000296 08 
000297 CD      0888 CALL	OSWORD
000298 4F 
000299 14 
00029A C3      0889 JP	XEQ
00029B 99 
00029C 24 
               0890 ;
               0891 ;SOUND - SOUND var,var,var,var
               0892 ;
00029D 06      0893 SOUND:          LD	B,0
00029E 00 
00029F DD      0894 LD	IX,SCRAP
0002A0 21 
0002A1 17 
0002A2 51 
0002A3 C5      0895 PUSH	BC
0002A4 DD      0896 PUSH	IX
0002A5 E5 
0002A6 CD      0897 SOUND1:         CALL	EXPRI
0002A7 33 
0002A8 18 
0002A9 D9      0898 EXX
0002AA DD      0899 POP	IX
0002AB E1 
0002AC C1      0900 POP	BC
0002AD DD      0901 LD	(IX+0),L
0002AE 75 
0002AF 00 
0002B0 DD      0902 LD	(IX+1),H
0002B1 74 
0002B2 01 
0002B3 DD      0903 INC	IX
0002B4 23 
0002B5 DD      0904 INC	IX
0002B6 23 
0002B7 04      0905 INC	B
0002B8 04      0906 INC	B
0002B9 78      0907 LD	A,B
0002BA FE      0908 CP	8
0002BB 08 
0002BC 28      0909 JR	Z,SOUND2
0002BD 08 
0002BE C5      0910 PUSH	BC
0002BF DD      0911 PUSH	IX
0002C0 E5 
0002C1 CD      0912 CALL	COMMA
0002C2 A2 
0002C3 20 
0002C4 18      0913 JR	SOUND1
0002C5 E0 
0002C6 21      0914 SOUND2:         LD	HL,SCRAP
0002C7 17 
0002C8 51 
0002C9 3E      0915 LD	A,7
0002CA 07 
0002CB CD      0916 CALL	OSWORD
0002CC 4F 
0002CD 14 
0002CE C3      0917 JP	XEQ
0002CF 99 
0002D0 24 
               0918 ;
               0919 ;MODE - MODE n
               0920 ;
0002D1 CD      0921 MODE:           CALL	EXPRI
0002D2 33 
0002D3 18 
0002D4 AF      0922 XOR	A
0002D5 32      0923 LD	(COUNT),A
0002D6 FB 
0002D7 54 
0002D8 D9      0924 EXX
0002D9 65      0925 LD	H,L
0002DA 2E      0926 LD	L,22
0002DB 16 
0002DC CD      0927 CALL	WRCH2
0002DD 44 
0002DE 05 
0002DF 18      0928 JR	XEQGO1
0002E0 72 
               0929 ;
               0930 ;CLG
               0931 ;
0002E1 3E      0932 CLG:            LD	A,16
0002E2 10 
0002E3 CD      0933 CALL	OSWRCH
0002E4 95 
0002E5 11 
0002E6 18      0934 JR	XEQGO1
0002E7 6B 
               0935 ;
               0936 ;ORIGIN x,y
               0937 ;
0002E8 CD      0938 ORIGIN:         CALL    EXPRI
0002E9 33 
0002EA 18 
0002EB D9      0939 EXX
0002EC E5      0940 PUSH	HL
0002ED CD      0941 CALL    CEXPRI
0002EE 5D 
0002EF 05 
0002F0 D9      0942 EXX
0002F1 D1      0943 POP	DE
0002F2 0E      0944 LD	C,29
0002F3 1D 
0002F4 CD      0945 CALL	WRCH5
0002F5 38 
0002F6 05 
0002F7 18      0946 JR	XEQGO1
0002F8 5A 
               0947 ;
               0948 ;COLOUR n
               0949 ;COLOUR n,p
               0950 ;COLOUR n,r,g,b
               0951 ;
0002F9 CD      0952 COLOUR:         CALL	EXPRI		;n
0002FA 33 
0002FB 18 
0002FC D9      0953 EXX
0002FD FD      0954 LD	A,(IY)
0002FE 7E 
0002FF 00 
000300 FE      0955 CP	','
000301 2C 
000302 28      0956 JR      Z,PALCOL
000303 08 
000304 65      0957 LD	H,L
000305 2E      0958 LD	L,17
000306 11 
000307 CD      0959 CALL	WRCH2
000308 44 
000309 05 
00030A 18      0960 JR	XEQGO1
00030B 47 
               0961 ;
00030C E5      0962 PALCOL:         PUSH	HL
00030D CD      0963 CALL	CEXPRI		;p or r
00030E 5D 
00030F 05 
000310 D9      0964 EXX
000311 EB      0965 EX	DE,HL
000312 21      0966 LD	HL,0
000313 00 
000314 00 
000315 FD      0967 LD	A,(IY)
000316 7E 
000317 00 
000318 FE      0968 CP	','
000319 2C 
00031A 20      0969 JR	NZ,PALET1
00031B 15 
00031C D5      0970 PUSH	DE
00031D CD      0971 CALL	CEXPRI		;g
00031E 5D 
00031F 05 
000320 D9      0972 EXX
000321 E5      0973 PUSH	HL
000322 CD      0974 CALL	CEXPRI		;b
000323 5D 
000324 05 
000325 D9      0975 EXX
000326 D1      0976 POP	DE
000327 C1      0977 POP	BC
000328 7D      0978 LD	A,L
000329 E1      0979 POP	HL
00032A 51      0980 LD	D,C		;r
00032B 4D      0981 LD	C,L		;n
00032C 6B      0982 LD	L,E		;g
00032D 67      0983 LD	H,A		;b
00032E 1E      0984 LD	E,16
00032F 10 
000330 C5      0985 PUSH	BC
000331 C1      0986 PALET1:         POP	BC
000332 06      0987 LD	B,19
000333 13 
000334 CD      0988 CALL	WRCH6
000335 34 
000336 05 
000337 18      0989 JR	XEQGO1
000338 1A 
               0990 ;
               0991 ;GCOL [a,]b
               0992 ;
000339 CD      0993 GCOL:           CALL	EXPRI
00033A 33 
00033B 18 
00033C D9      0994 EXX
00033D 1E      0995 LD	E,0
00033E 00 
00033F FD      0996 LD	A,(IY)
000340 7E 
000341 00 
000342 FE      0997 CP	','
000343 2C 
000344 20      0998 JR	NZ,GCOL0
000345 06 
000346 E5      0999 PUSH	HL
000347 CD      1000 CALL	CEXPRI
000348 5D 
000349 05 
00034A D9      1001 EXX
00034B D1      1002 POP	DE
00034C 65      1003 GCOL0:          LD	H,L
00034D 6B      1004 LD	L,E
00034E 16      1005 LD	D,18
00034F 12 
000350 CD      1006 CALL	WRCH3		;DLH
000351 40 
000352 05 
000353 C3      1007 XEQGO1:         JP	XEQ
000354 99 
000355 24 
               1008 ;
               1009 ;CSRON  - Turn caret on
               1010 ;CSROFF - Turn caret off
               1011 ;
000356 0E      1012 CSRON:          LD	C,1
000357 01 
000358 18      1013 JR	CSRGO
000359 02 
               1014 ;
00035A 0E      1015 CSROFF:         LD	C,0
00035B 00 
00035C 3E      1016 CSRGO:          LD	A,23
00035D 17 
00035E CD      1017 CALL	OSWRCH
00035F 95 
000360 11 
000361 3E      1018 LD	A,1
000362 01 
000363 CD      1019 CALL	OSWRCH
000364 95 
000365 11 
000366 79      1020 LD	A,C
000367 06      1021 LD	B,8
000368 08 
000369 CD      1022 CSRGO1:         CALL	OSWRCH
00036A 95 
00036B 11 
00036C AF      1023 XOR	A
00036D 10      1024 DJNZ	CSRGO1
00036E FA 
00036F 18      1025 JR	XEQGO1
000370 E2 
               1026 ;
               1027 ;LINE x1,y1,x2,y2
               1028 ;
000371 CD      1029 LINE:           CALL	EXPRI
000372 33 
000373 18 
000374 D9      1030 EXX
000375 E5      1031 PUSH	HL
000376 CD      1032 CALL	EXPR3
000377 4C 
000378 05 
000379 E3      1033 EX	(SP),HL		;HL <- x1, (SP) <- y2
00037A C5      1034 PUSH	BC
00037B EB      1035 EX	DE,HL
00037C 0E      1036 LD	C,4
00037D 04 
00037E CD      1037 CALL	VDU25
00037F 32 
000380 05 
000381 D1      1038 POP	DE
000382 E1      1039 POP	HL
000383 0E      1040 LD	C,5
000384 05 
000385 18      1041 JR	PLOT4A
000386 2A 
               1042 ;
               1043 ;CIRCLE [FILL] x,y,r
               1044 ;
000387 FE      1045 CIRCLE:         CP	TFILL
000388 03 
000389 F5      1046 PUSH	AF
00038A 20      1047 JR	NZ,CIRCL0
00038B 02 
00038C FD      1048 INC	IY
00038D 23 
00038E CD      1049 CIRCL0:         CALL	EXPRI
00038F 33 
000390 18 
000391 D9      1050 EXX
000392 E5      1051 PUSH	HL
000393 CD      1052 CALL	CEXPRI
000394 5D 
000395 05 
000396 D9      1053 EXX
000397 E5      1054 PUSH	HL
000398 CD      1055 CALL	CEXPRI
000399 5D 
00039A 05 
00039B D9      1056 EXX
00039C C1      1057 POP	BC		;y
00039D D1      1058 POP	DE		;x
00039E E5      1059 PUSH	HL
00039F 69      1060 LD	L,C
0003A0 60      1061 LD	H,B
0003A1 0E      1062 LD	C,4		; PLOT 4 = MOVE
0003A2 04 
0003A3 CD      1063 CALL	VDU25
0003A4 32 
0003A5 05 
0003A6 D1      1064 POP	DE		;r
0003A7 21      1065 LD	HL,0
0003A8 00 
0003A9 00 
0003AA F1      1066 POP	AF
0003AB 0E      1067 LD	C,145		; PLOT 145 = outline circle
0003AC 91 
0003AD 20      1068 JR	NZ,PLOT4A
0003AE 02 
0003AF 0E      1069 LD	C,153		; PLOT 153 = filled circle
0003B0 99 
0003B1 18      1070 PLOT4A:         JR	PLOT4
0003B2 6C 
               1071 ;
               1072 ;ELLIPSE [FILL] x,y,a,b
               1073 ;
0003B3 FE      1074 ELLIPS:         CP	TFILL
0003B4 03 
0003B5 F5      1075 PUSH	AF
0003B6 20      1076 JR	NZ,ELLIP0
0003B7 02 
0003B8 FD      1077 INC	IY
0003B9 23 
0003BA CD      1078 ELLIP0:         CALL	EXPRI
0003BB 33 
0003BC 18 
0003BD D9      1079 EXX
0003BE E5      1080 PUSH	HL
0003BF CD      1081 CALL	EXPR3
0003C0 4C 
0003C1 05 
0003C2 E3      1082 EX	(SP),HL		;HL <- x, (SP) <- b
0003C3 C5      1083 PUSH	BC
0003C4 EB      1084 EX	DE,HL
0003C5 0E      1085 LD	C,4		; PLOT 4 = Move absolute
0003C6 04 
0003C7 CD      1086 CALL	VDU25
0003C8 32 
0003C9 05 
0003CA D1      1087 POP	DE		;a
0003CB D5      1088 PUSH	DE
0003CC 21      1089 LD	HL,0
0003CD 00 
0003CE 00 
0003CF 4D      1090 LD	C,L		; PLOT 0 - Move relative
0003D0 CD      1091 CALL	VDU25
0003D1 32 
0003D2 05 
0003D3 D1      1092 POP	DE		;a
0003D4 AF      1093 XOR	A
0003D5 6F      1094 LD	L,A
0003D6 67      1095 LD	H,A
0003D7 ED      1096 SBC	HL,DE
0003D8 52 
0003D9 EB      1097 EX	DE,HL
0003DA E1      1098 POP	HL		;b
0003DB F1      1099 POP	AF
0003DC 0E      1100 LD	C,193		; PLOT 193 = outline ellipse
0003DD C1 
0003DE 20      1101 JR	NZ,PLOT4
0003DF 3F 
0003E0 0E      1102 LD	C,201		; PLOT 201 = filled ellipse
0003E1 C9 
0003E2 18      1103 JR	PLOT4
0003E3 3B 
               1104 ;
               1105 ;MOVE [BY} x,y
               1106 ;DRAW [BY] x,y
               1107 ;PLOT [BY] [n,]x,y
               1108 ;FILL [BY] x,y
               1109 ;
0003E4 0E      1110 MOVE:           LD	C,4
0003E5 04 
0003E6 18      1111 JR	PLOT1
0003E7 23 
               1112 ;
0003E8 0E      1113 DRAW:           LD	C,5
0003E9 05 
0003EA 18      1114 JR	PLOT1
0003EB 1F 
               1115 ;
0003EC 0E      1116 FILL:           LD	C,133
0003ED 85 
0003EE 18      1117 JR	PLOT1
0003EF 1B 
               1118 ;
0003F0 0E      1119 PLOT:           LD	C,69
0003F1 45 
0003F2 FE      1120 CP	TBY
0003F3 0F 
0003F4 28      1121 JR	Z,PLOT1
0003F5 15 
0003F6 CD      1122 CALL	EXPRI
0003F7 33 
0003F8 18 
0003F9 D9      1123 EXX
0003FA E5      1124 PUSH	HL
0003FB CD      1125 CALL	CEXPRI
0003FC 5D 
0003FD 05 
0003FE D9      1126 EXX
0003FF FD      1127 LD	A,(IY)
000400 7E 
000401 00 
000402 FE      1128 CP	','
000403 2C 
000404 28      1129 JR	Z,PLOT3
000405 12 
000406 D1      1130 POP	DE
000407 0E      1131 LD	C,69
000408 45 
000409 18      1132 JR	PLOT4
00040A 14 
               1133 ;
00040B FE      1134 PLOT1:          CP	TBY
00040C 0F 
00040D 20      1135 JR	NZ,PLOT2
00040E 04 
00040F FD      1136 INC	IY
000410 23 
000411 CB      1137 RES	2,C		;Change absolute to relative
000412 91 
000413 C5      1138 PLOT2:          PUSH	BC
000414 CD      1139 CALL	EXPRI
000415 33 
000416 18 
000417 D9      1140 EXX
000418 E5      1141 PLOT3:          PUSH	HL
000419 CD      1142 CALL	CEXPRI
00041A 5D 
00041B 05 
00041C D9      1143 EXX
00041D D1      1144 POP	DE
00041E C1      1145 POP	BC
00041F CD      1146 PLOT4:          CALL	VDU25
000420 32 
000421 05 
000422 C3      1147 JP	XEQ
000423 99 
000424 24 
               1148 ;
               1149 ;RECTANGLE [FILL] x,y,w[,h] [TO xnew,ynew]
               1150 ;
000425 FE      1151 RECTAN:         CP	TFILL
000426 03 
000427 F5      1152 PUSH	AF
000428 20      1153 JR	NZ,RECT0
000429 02 
00042A FD      1154 INC	IY
00042B 23 
00042C CD      1155 RECT0:          CALL	EXPRI
00042D 33 
00042E 18 
00042F D9      1156 EXX
000430 E5      1157 PUSH	HL
000431 CD      1158 CALL	CEXPRI
000432 5D 
000433 05 
000434 D9      1159 EXX
000435 E5      1160 PUSH	HL
000436 CD      1161 CALL	CEXPRI
000437 5D 
000438 05 
000439 D9      1162 EXX
00043A E5      1163 PUSH	HL
00043B FD      1164 LD	A,(IY)
00043C 7E 
00043D 00 
00043E FE      1165 CP	','
00043F 2C 
000440 20      1166 JR	NZ,RECT1
000441 04 
000442 CD      1167 CALL	CEXPRI
000443 5D 
000444 05 
000445 D9      1168 EXX
000446 C1      1169 RECT1:          POP	BC		;w
000447 D1      1170 POP	DE		;y
000448 E3      1171 EX	(SP),HL		;HL <- x, (SP) <- h
000449 C5      1172 PUSH	BC
00044A EB      1173 EX	DE,HL
00044B 0E      1174 LD	C,4
00044C 04 
00044D CD      1175 CALL	VDU25
00044E 32 
00044F 05 
000450 FD      1176 LD	A,(IY)
000451 7E 
000452 00 
000453 FE      1177 CP	TTO
000454 B8 
000455 28      1178 JR	Z,RECTTO
000456 09 
000457 D1      1179 POP	DE		;w
000458 E1      1180 POP	HL		;h
000459 F1      1181 POP	AF
00045A 20      1182 JR	NZ,OUTLIN
00045B 22 
00045C 0E      1183 LD	C,97
00045D 61 
00045E 18      1184 JR	PLOT4
00045F BF 
               1185 ;
               1186 ;Block copy / move:
               1187 ;
000460 FD      1188 RECTTO:         INC	IY		; Bump over TO
000461 23 
000462 CD      1189 CALL	EXPRI
000463 33 
000464 18 
000465 D9      1190 EXX
000466 E5      1191 PUSH	HL
000467 CD      1192 CALL	CEXPRI
000468 5D 
000469 05 
00046A D9      1193 EXX
00046B C1      1194 POP	BC		;newx
00046C D1      1195 POP	DE		;w
00046D E3      1196 EX	(SP),HL		;HL <- h, (SP) <- newy
00046E C5      1197 PUSH	BC
00046F 0E      1198 LD	C,0
000470 00 
000471 CD      1199 CALL	VDU25
000472 32 
000473 05 
000474 D1      1200 POP	DE		;newx
000475 E1      1201 POP	HL		;newy
000476 F1      1202 POP	AF
000477 0E      1203 LD	C,190		; PLOT 190 - Block copy
000478 BE 
000479 20      1204 JR	NZ,PLOT4B
00047A 01 
00047B 0D      1205 DEC	C		; PLOT 189 - Block move
00047C 18      1206 PLOT4B:         JR	PLOT4
00047D A1 
               1207 ;
               1208 ;Outline rectangle:
               1209 ;
00047E 0E      1210 OUTLIN:         LD	C,9		; PLOT 9 - draw relative
00047F 09 
000480 E5      1211 PUSH	HL
000481 21      1212 LD	HL,0
000482 00 
000483 00 
000484 CD      1213 CALL	VDU25		; side 1
000485 32 
000486 05 
000487 E1      1214 POP	HL
000488 D5      1215 PUSH	DE
000489 11      1216 LD	DE,0
00048A 00 
00048B 00 
00048C CD      1217 CALL	VDU25		; side 2
00048D 32 
00048E 05 
00048F D1      1218 POP	DE
000490 E5      1219 PUSH	HL
000491 AF      1220 XOR	A
000492 6F      1221 LD	L,A
000493 67      1222 LD	H,A
000494 ED      1223 SBC	HL,DE
000495 52 
000496 EB      1224 EX	DE,HL
000497 6F      1225 LD	L,A
000498 67      1226 LD	H,A
000499 CD      1227 CALL 	VDU25		; side 3
00049A 32 
00049B 05 
00049C D1      1228 POP	DE
00049D AF      1229 XOR	A
00049E 6F      1230 LD	L,A
00049F 67      1231 LD	H,A
0004A0 ED      1232 SBC	HL,DE
0004A1 52 
0004A2 5F      1233 LD	E,A
0004A3 57      1234 LD	D,A
0004A4 18      1235 JR	PLOT4B
0004A5 D6 
               1236 ;
               1237 ;MOUSE x, y, b
               1238 ;
0004A6 3E      1239 MOUSE:          LD	A,128
0004A7 80 
0004A8 21      1240 LD	HL,9
0004A9 09 
0004AA 00 
0004AB CD      1241 CALL	OSBYTE
0004AC 6D 
0004AD 14 
0004AE E5      1242 PUSH	HL
0004AF 3E      1243 LD	A,128
0004B0 80 
0004B1 21      1244 LD	HL,8
0004B2 08 
0004B3 00 
0004B4 CD      1245 CALL	OSBYTE
0004B5 6D 
0004B6 14 
0004B7 E5      1246 PUSH	HL
0004B8 3E      1247 LD	A,128
0004B9 80 
0004BA 21      1248 LD	HL,7
0004BB 07 
0004BC 00 
0004BD CD      1249 CALL	OSBYTE
0004BE 6D 
0004BF 14 
0004C0 E5      1250 PUSH	HL
0004C1 CD      1251 CALL	VAR_
0004C2 D6 
0004C3 25 
0004C4 E1      1252 POP	HL
0004C5 CD      1253 CALL	STOREI
0004C6 63 
0004C7 05 
0004C8 CD      1254 CALL	COMMA
0004C9 A2 
0004CA 20 
0004CB CD      1255 CALL	NXT
0004CC 0B 
0004CD 45 
0004CE CD      1256 CALL	VAR_
0004CF D6 
0004D0 25 
0004D1 E1      1257 POP	HL
0004D2 CD      1258 CALL	STOREI
0004D3 63 
0004D4 05 
0004D5 CD      1259 CALL	COMMA
0004D6 A2 
0004D7 20 
0004D8 CD      1260 CALL	NXT
0004D9 0B 
0004DA 45 
0004DB CD      1261 CALL	VAR_
0004DC D6 
0004DD 25 
0004DE E1      1262 POP	HL
0004DF CD      1263 CALL	STOREI
0004E0 63 
0004E1 05 
0004E2 C3      1264 XEQGO2:         JP	XEQ
0004E3 99 
0004E4 24 
               1265 ;
               1266 ;WAIT [n]
               1267 ;
0004E5 CD      1268 WAIT:           CALL	TERMQ
0004E6 36 
0004E7 35 
0004E8 28      1269 JR	Z,XEQGO2
0004E9 F8 
0004EA CD      1270 CALL	EXPRI
0004EB 33 
0004EC 18 
0004ED D9      1271 EXX
0004EE 44      1272 LD	B,H
0004EF 4D      1273 LD	C,L
0004F0 CD      1274 CALL	GETIME
0004F1 95 
0004F2 01 
0004F3 09      1275 ADD	HL,BC
0004F4 01      1276 LD	BC,0
0004F5 00 
0004F6 00 
0004F7 EB      1277 EX	DE,HL
0004F8 ED      1278 ADC	HL,BC
0004F9 4A 
0004FA EB      1279 EX	DE,HL
0004FB CD      1280 WAIT1:          CALL	TRAP
0004FC 17 
0004FD 12 
0004FE D5      1281 PUSH	DE
0004FF E5      1282 PUSH	HL
000500 CD      1283 CALL	GETIME
000501 95 
000502 01 
000503 C1      1284 POP	BC
000504 B7      1285 OR	A
000505 ED      1286 SBC	HL,BC
000506 42 
000507 60      1287 LD	H,B
000508 69      1288 LD	L,C
000509 EB      1289 EX	DE,HL
00050A C1      1290 POP	BC
00050B ED      1291 SBC	HL,BC
00050C 42 
00050D 30      1292 JR	NC,XEQGO2
00050E D3 
00050F EB      1293 EX	DE,HL
000510 50      1294 LD	D,B
000511 59      1295 LD	E,C
000512 18      1296 JR	WAIT1
000513 E7 
               1297 ;
               1298 ;OSCALL - Trap call to FFxx
               1299 ;
000514 E1      1300 OSCALL:         POP	HL		;DITCH RETURN ADDRESS
000515 21      1301 LD	HL,OSRET
000516 27 
000517 05 
000518 E5      1302 PUSH	HL		;NEW RETURN ADDRESS
000519 DD      1303 LD	A,(IX+4)	;A%
00051A 7E 
00051B 04 
00051C DD      1304 LD	E,(IX+20)	;E%
00051D 5E 
00051E 14 
00051F DD      1305 LD	H,(IX+100)	;Y%
000520 66 
000521 64 
000522 DD      1306 LD	L,(IX+96)	;X%
000523 6E 
000524 60 
000525 FD      1307 JP	(IY)
000526 E9 
000527 F5      1308 OSRET:          PUSH	AF
000528 7D      1309 LD	A,L		;F  H  L  A
000529 6C      1310 LD	L,H		;|  |  |  |
00052A D9      1311 EXX			;|  |  |  |
00052B C1      1312 POP	BC		;|  |  |  |
00052C 67      1313 LD	H,A		;|  |  |  |
00052D 68      1314 LD	L,B		;H  L  H' L'
00052E 79      1315 LD	A,C
00052F D9      1316 EXX
000530 67      1317 LD	H,A
000531 C9      1318 RET
               1319 ;
000532 06      1320 VDU25:          LD	B,25
000533 19 
000534 78      1321 WRCH6:          LD	A,B
000535 CD      1322 CALL	OSWRCH
000536 95 
000537 11 
000538 79      1323 WRCH5:          LD	A,C
000539 CD      1324 CALL	OSWRCH
00053A 95 
00053B 11 
00053C 7B      1325 WRCH4:          LD	A,E
00053D CD      1326 CALL	OSWRCH
00053E 95 
00053F 11 
000540 7A      1327 WRCH3:          LD	A,D
000541 CD      1328 CALL	OSWRCH
000542 95 
000543 11 
000544 7D      1329 WRCH2:          LD	A,L
000545 CD      1330 CALL	OSWRCH
000546 95 
000547 11 
000548 7C      1331 LD	A,H
000549 C3      1332 JP	OSWRCH
00054A 95 
00054B 11 
               1333 ;
00054C CD      1334 EXPR3:          CALL	CEXPRI
00054D 5D 
00054E 05 
00054F D9      1335 EXX
000550 E5      1336 PUSH	HL
000551 CD      1337 CALL	CEXPRI
000552 5D 
000553 05 
000554 D9      1338 EXX
000555 E5      1339 PUSH	HL
000556 CD      1340 CALL	CEXPRI
000557 5D 
000558 05 
000559 D9      1341 EXX
00055A C1      1342 POP	BC		;x2
00055B D1      1343 POP	DE		;y1
00055C C9      1344 RET
               1345 ;
00055D CD      1346 CEXPRI:         CALL	COMMA
00055E A2 
00055F 20 
000560 C3      1347 JP	EXPRI
000561 33 
000562 18 
               1348 ;
000563 CB      1349 STOREI:         BIT	7,A
000564 7F 
000565 20      1350 JR	NZ,EEK
000566 0C 
000567 CB      1351 BIT	6,A
000568 77 
000569 20      1352 JR	NZ,EEK
00056A 08 
00056B D9      1353 EXX
00056C 21      1354 LD	HL,0
00056D 00 
00056E 00 
00056F 4D      1355 LD	C,L
000570 C3      1356 JP	STOREN
000571 F0 
000572 31 
               1357 ;
000573 3E      1358 EEK:            LD	A,50
000574 32 
000575 CD      1359 CALL	EXTERR
000576 55 
000577 3F 
000578 13      1360 DB	13H		;'Bad '
000579 04      1361 DB	04H		;'MOUSE'
00057A 20      1362 DB	20H
00057B 15      1363 DB	15H		;'variable'
00057C 00      1364 DB	0
               1365 ;
               1366 TINT:
               1367 TINTFN:
               1368 SYS:
00057D AF      1369 XOR	A
00057E CD      1370 CALL	EXTERR
00057F 55 
000580 3F 
000581 53      1371 DB	"Sorry"
000582 6F 
000583 72 
000584 72 
000584 79   
000586 00      1372 DB	0
               1373 ;
               1374 ;                END
               1375 ; --- End acorn.asm ---
               1376 
               1377 ; --- Begin asmb.asm ---
               1378 ;
               1379 ;Automatically created from original source on 2024-12-15 15:29:12
               1380 ;
               1381 .ASSUME ADL = 0
               1382 ;	.ORG 0x0000
               1383 ;                SEGMENT CODE
               1384 ;
               1385 ;BBC BASIC INTERPRETER - Z80 VERSION
               1386 ;Z80 CPU ASSEMBLER MODULE - "ASMB"
               1387 ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
               1388 ;
               1389 ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
               1390 ;OF THE BRITISH BROADCASTING CORPORATION AND IS
               1391 ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
               1392 ;
               1393 ;VERSION 5.0, 14-05-2024
               1394 ;
               1395 ;                XDEF	ASSEM
               1396 ;
               1397 ;                XREF	TABIT
               1398 ;                XREF	CRLF
               1399 ;                XREF	OUT
               1400 ;                XREF	VAR_
               1401 ;                XREF	ZERO
               1402 ;                XREF	STOREN
               1403 ;                XREF	ERROR_
               1404 ;                XREF	EXPRI
               1405 ;                XREF	EXPRS
               1406 ;
               1407 ;                XREF	LISTON
               1408 ;                XREF	COUNT
               1409 ;                XREF	ACCS
               1410 ;                XREF	OC
               1411 ;                XREF	PC
               1412 ;
               1413 ; CR             EQU	0DH	; in equs.inc
               1414 TAND:           EQU	80H
               1415 TOR:            EQU	84H
               1416 ; TERROR:         EQU	85H	; in exec.asm
               1417 TCALL:          EQU	0D6H
               1418 TDEF:           EQU	0DDH
               1419 ;
               1420 ;ASSEMBLER:
               1421 ;LANGUAGE-INDEPENDENT CONTROL SECTION:
               1422 ; Outputs: A=delimiter, carry set if syntax error.
               1423 ;
000587 CD      1424 ASSEM:          CALL	SKIP
000588 0F 
000589 09 
00058A FD      1425 INC	IY
00058B 23 
00058C FE      1426 CP	':'
00058D 3A 
00058E 28      1427 JR	Z,ASSEM
00058F F7 
000590 FE      1428 CP	']'
000591 5D 
000592 C8      1429 RET	Z
000593 FE      1430 CP	CR
000594 0D 
000595 C8      1431 RET	Z
000596 FD      1432 DEC	IY
000597 2B 
000598 DD      1433 LD	IX,(PC)		;PROGRAM COUNTER
000599 2A 
00059A 40 
00059B 54 
00059C 21      1434 LD	HL,LISTON
00059D FE 
00059E 54 
00059F CB      1435 BIT	6,(HL)
0005A0 76 
0005A1 28      1436 JR	Z,ASSEM0
0005A2 04 
0005A3 DD      1437 LD	IX,(OC)		;ORIGIN of CODE
0005A4 2A 
0005A5 3C 
0005A6 54 
0005A7 DD      1438 ASSEM0:         PUSH	IX
0005A8 E5 
0005A9 FD      1439 PUSH	IY
0005AA E5 
0005AB CD      1440 CALL	ASMB
0005AC 3B 
0005AD 06 
0005AE C1      1441 POP	BC
0005AF D1      1442 POP	DE
0005B0 D8      1443 RET	C
0005B1 CD      1444 CALL	SKIP
0005B2 0F 
0005B3 09 
0005B4 37      1445 SCF
0005B5 C0      1446 RET	NZ
0005B6 FD      1447 DEC	IY
0005B7 2B 
0005B8 FD      1448 ASSEM3:         INC	IY
0005B9 23 
0005BA FD      1449 LD	A,(IY)
0005BB 7E 
0005BC 00 
0005BD CD      1450 CALL	TERM0
0005BE 33 
0005BF 09 
0005C0 20      1451 JR	NZ,ASSEM3
0005C1 F6 
0005C2 3A      1452 LD	A,(LISTON)
0005C3 FE 
0005C4 54 
0005C5 DD      1453 PUSH	IX
0005C6 E5 
0005C7 E1      1454 POP	HL
0005C8 B7      1455 OR	A
0005C9 ED      1456 SBC	HL,DE
0005CA 52 
0005CB EB      1457 EX	DE,HL		;DE= NO. OF BYTES
0005CC E5      1458 PUSH	HL
0005CD 2A      1459 LD	HL,(PC)
0005CE 40 
0005CF 54 
0005D0 E5      1460 PUSH	HL
0005D1 19      1461 ADD	HL,DE
0005D2 22      1462 LD	(PC),HL		;UPDATE PC
0005D3 40 
0005D4 54 
0005D5 CB      1463 BIT	6,A
0005D6 77 
0005D7 28      1464 JR	Z,ASSEM5
0005D8 07 
0005D9 2A      1465 LD	HL,(OC)
0005DA 3C 
0005DB 54 
0005DC 19      1466 ADD	HL,DE
0005DD 22      1467 LD	(OC),HL		;UPDATE OC
0005DE 3C 
0005DF 54 
0005E0 E1      1468 ASSEM5:         POP	HL		;OLD PC
0005E1 DD      1469 POP	IX		;CODE HERE
0005E2 E1 
0005E3 CB      1470 BIT	4,A
0005E4 67 
0005E5 28      1471 JR	Z,ASSEM
0005E6 A0 
0005E7 7C      1472 LD	A,H
0005E8 CD      1473 CALL	HEX
0005E9 27 
0005EA 06 
0005EB 7D      1474 LD	A,L
0005EC CD      1475 CALL	HEXSP
0005ED 20 
0005EE 06 
0005EF AF      1476 XOR	A
0005F0 BB      1477 CP	E
0005F1 28      1478 JR	Z,ASSEM2
0005F2 15 
0005F3 3A      1479 ASSEM1:         LD	A,(COUNT)
0005F4 FB 
0005F5 54 
0005F6 FE      1480 CP	17
0005F7 11 
0005F8 3E      1481 LD	A,5
0005F9 05 
0005FA D4      1482 CALL	NC,TABIT	;NEXT LINE
0005FB 7D 
0005FC 35 
0005FD DD      1483 LD	A,(IX)
0005FE 7E 
0005FF 00 
000600 CD      1484 CALL	HEXSP
000601 20 
000602 06 
000603 DD      1485 INC	IX
000604 23 
000605 1D      1486 DEC	E
000606 20      1487 JR	NZ,ASSEM1
000607 EB 
000608 3E      1488 ASSEM2:         LD	A,18
000609 12 
00060A CD      1489 CALL	TABIT
00060B 7D 
00060C 35 
00060D FD      1490 PUSH	IY
00060E E5 
00060F E1      1491 POP	HL
000610 ED      1492 SBC	HL,BC
000611 42 
000612 0A      1493 ASSEM4:         LD	A,(BC)
000613 CD      1494 CALL	OUT
000614 1B 
000615 41 
000616 03      1495 INC	BC
000617 2D      1496 DEC	L
000618 20      1497 JR	NZ,ASSEM4
000619 F8 
00061A CD      1498 CALL	CRLF
00061B FB 
00061C 40 
00061D C3      1499 JP	ASSEM
00061E 87 
00061F 05 
               1500 ;
000620 CD      1501 HEXSP:          CALL	HEX
000621 27 
000622 06 
000623 3E      1502 LD	A,' '
000624 20 
000625 18      1503 JR	OUTCH1
000626 11 
000627 F5      1504 HEX:            PUSH	AF
000628 0F      1505 RRCA
000629 0F      1506 RRCA
00062A 0F      1507 RRCA
00062B 0F      1508 RRCA
00062C CD      1509 CALL	HEXOUT
00062D 30 
00062E 06 
00062F F1      1510 POP	AF
000630 E6      1511 HEXOUT:         AND	0FH
000631 0F 
000632 C6      1512 ADD	A,90H
000633 90 
000634 27      1513 DAA
000635 CE      1514 ADC	A,40H
000636 40 
000637 27      1515 DAA
000638 C3      1516 OUTCH1:         JP	OUT
000639 1B 
00063A 41 
               1517 ;
               1518 ;PROCESSOR-SPECIFIC TRANSLATION SECTION:
               1519 ;
               1520 ;REGISTER USAGE: B - TYPE OF MOST RECENT OPERAND
               1521 ;                C - OPCODE BEING BUILT
               1522 ;                D - (IX) OR (IY) FLAG
               1523 ;                E - OFFSET FROM IX OR IY
               1524 ;               HL - NUMERIC OPERAND VALUE
               1525 ;               IX - CODE DESTINATION
               1526 ;               IY - SOURCE TEXT POINTER
               1527 ;   Inputs: A = initial character
               1528 ;  Outputs: Carry set if syntax error.
               1529 ;
00063B FE      1530 ASMB:           CP	'.'
00063C 2E 
00063D 20      1531 JR	NZ,ASMB1
00063E 28 
00063F FD      1532 INC	IY
000640 23 
000641 DD      1533 PUSH	IX
000642 E5 
000643 CD      1534 CALL	VAR_
000644 D6 
000645 25 
000646 F5      1535 PUSH	AF
000647 CD      1536 CALL	ZERO
000648 F8 
000649 1F 
00064A D9      1537 EXX
00064B 2A      1538 LD	HL,(PC)
00064C 40 
00064D 54 
00064E D9      1539 EXX
00064F 3A      1540 LD	A,(LISTON)
000650 FE 
000651 54 
000652 E6      1541 AND	20H
000653 20 
000654 20      1542 JR	NZ,ASMB0
000655 0B 
000656 DD      1543 LD	A,(IX)
000657 7E 
000658 00 
000659 DD      1544 OR	(IX+1)
00065A B6 
00065B 01 
00065C 3E      1545 LD	A,3
00065D 03 
00065E C2      1546 JP	NZ,ERROR_	;Multiple label
00065F 44 
000660 3F 
000661 F1      1547 ASMB0:          POP	AF
000662 CD      1548 CALL	STOREN
000663 F0 
000664 31 
000665 DD      1549 POP	IX
000666 E1 
000667 CD      1550 ASMB1:          CALL	SKIP
000668 0F 
000669 09 
00066A C8      1551 RET	Z
00066B FE      1552 CP	TCALL
00066C D6 
00066D 0E      1553 LD	C,0C4H
00066E C4 
00066F FD      1554 INC	IY
000670 23 
000671 CA      1555 JP	Z,GRPC
000672 5E 
000673 07 
000674 FD      1556 DEC	IY
000675 2B 
000676 21      1557 LD	HL,OPCODS
000677 39 
000678 09 
000679 CD      1558 CALL	FIND
00067A C6 
00067B 08 
00067C D8      1559 RET	C
00067D 48      1560 LD	C,B	;ROOT OPCODE
00067E 16      1561 LD	D,0	;CLEAR IX/IY FLAG
00067F 00 
               1562 ;
               1563 ;GROUP 0 - TRIVIAL CASES REQUIRING NO COMPUTATION
               1564 ;GROUP 1 - AS GROUP 0 BUT WITH "ED" PREFIX
               1565 ;
000680 D6      1566 SUB	39
000681 27 
000682 30      1567 JR	NC,GROUP2
000683 07 
000684 FE      1568 CP	15-39
000685 E8 
000686 D4      1569 CALL	NC,ED
000687 2C 
000688 08 
000689 18      1570 JR	BYTE0
00068A 68 
               1571 ;
               1572 ;GROUP 2 - BIT, RES, SET
               1573 ;GROUP 3 - RLC, RRC, RL, RR, SLA, SRA, SRL
               1574 ;
00068B D6      1575 GROUP2:         SUB	10
00068C 0A 
00068D 30      1576 JR	NC,GROUP4
00068E 0F 
00068F FE      1577 CP	3-10
000690 F9 
000691 DC      1578 CALL	C,BIT
000692 B6 
000693 08 
000694 D8      1579 RET	C
000695 CD      1580 CALL	REGLO
000696 8B 
000697 08 
000698 D8      1581 RET	C
000699 CD      1582 CALL	CB
00069A 30 
00069B 08 
00069C 18      1583 JR	BYTE0
00069D 55 
               1584 ;
               1585 ;GROUP 4 - PUSH, POP, EX (SP)
               1586 ;
00069E D6      1587 GROUP4:         SUB	3
00069F 03 
0006A0 30      1588 JR	NC,GROUP5
0006A1 06 
0006A2 CD      1589 G4:             CALL	PAIRasm
0006A3 AA 
0006A4 08 
0006A5 D8      1590 RET	C
0006A6 18      1591 JR	BYTE0
0006A7 4B 
               1592 ;
               1593 ;GROUP 5 - SUB, AND, XOR, OR, CP
               1594 ;GROUP 6 - ADD, ADC, SBC
               1595 ;
0006A8 D6      1596 GROUP5:         SUB	8+2
0006A9 0A 
0006AA 30      1597 JR	NC,GROUP7
0006AB 32 
0006AC FE      1598 CP	5-8
0006AD FD 
0006AE 06      1599 LD	B,7
0006AF 07 
0006B0 D4      1600 CALL	NC,OPND
0006B1 3E 
0006B2 08 
0006B3 78      1601 LD	A,B
0006B4 FE      1602 CP	7
0006B5 07 
0006B6 20      1603 JR	NZ,G6HL
0006B7 10 
0006B8 CD      1604 G6:             CALL	REGLO
0006B9 8B 
0006BA 08 
0006BB 79      1605 LD	A,C
0006BC 30      1606 JR	NC,BIND1
0006BD 28 
0006BE EE      1607 XOR	46H
0006BF 46 
0006C0 CD      1608 CALL	BIND
0006C1 32 
0006C2 08 
0006C3 CD      1609 DB:             CALL	NUMBER
0006C4 6E 
0006C5 08 
0006C6 18      1610 JR	VAL8
0006C7 78 
               1611 ;
0006C8 E6      1612 G6HL:           AND	3FH
0006C9 3F 
0006CA FE      1613 CP	12
0006CB 0C 
0006CC 37      1614 SCF
0006CD C0      1615 RET	NZ
0006CE 79      1616 LD	A,C
0006CF FE      1617 CP	80H
0006D0 80 
0006D1 0E      1618 LD	C,9
0006D2 09 
0006D3 28      1619 JR	Z,G4
0006D4 CD 
0006D5 EE      1620 XOR	1CH
0006D6 1C 
0006D7 0F      1621 RRCA
0006D8 4F      1622 LD	C,A
0006D9 CD      1623 CALL	ED
0006DA 2C 
0006DB 08 
0006DC 18      1624 JR	G4
0006DD C4 
               1625 ;
               1626 ;GROUP 7 - INC, DEC
               1627 ;
0006DE D6      1628 GROUP7:         SUB	2
0006DF 02 
0006E0 30      1629 JR	NC,GROUP8
0006E1 14 
0006E2 CD      1630 CALL	REGHI
0006E3 91 
0006E4 08 
0006E5 79      1631 LD	A,C
0006E6 D2      1632 BIND1:          JP	NC,BIND
0006E7 32 
0006E8 08 
0006E9 EE      1633 XOR	64H
0006EA 64 
0006EB 07      1634 RLCA
0006EC 07      1635 RLCA
0006ED 07      1636 RLCA
0006EE 4F      1637 LD	C,A
0006EF CD      1638 CALL	PAIR1asm
0006F0 AE 
0006F1 08 
0006F2 D8      1639 RET	C
0006F3 79      1640 BYTE0:          LD	A,C
0006F4 18      1641 JR	BYTE2
0006F5 7F 
               1642 ;
               1643 ;GROUP 8 - IN
               1644 ;GROUP 9 - OUT
               1645 ;
0006F6 D6      1646 GROUP8:         SUB	2
0006F7 02 
0006F8 30      1647 JR	NC,GROUPA
0006F9 21 
0006FA FE      1648 CP	1-2
0006FB FF 
0006FC CC      1649 CALL	Z,CORN
0006FD 21 
0006FE 08 
0006FF 08      1650 EX	AF,AF'
000700 CD      1651 CALL	REGHI
000701 91 
000702 08 
000703 D8      1652 RET	C
000704 08      1653 EX	AF,AF'
000705 DC      1654 CALL	C,CORN
000706 21 
000707 08 
000708 24      1655 INC	H
000709 28      1656 JR	Z,BYTE0
00070A E8 
00070B 78      1657 LD	A,B
00070C FE      1658 CP	7
00070D 07 
00070E 37      1659 SCF
00070F C0      1660 RET	NZ
000710 79      1661 LD	A,C
000711 EE      1662 XOR	3
000712 03 
000713 07      1663 RLCA
000714 07      1664 RLCA
000715 07      1665 RLCA
000716 CD      1666 CALL	BYTE
000717 5E 
000718 08 
000719 18      1667 JR	VAL8
00071A 25 
               1668 ;
               1669 ;GROUP 10 - JR, DJNZ
               1670 ;
00071B D6      1671 GROUPA:         SUB	2
00071C 02 
00071D 30      1672 JR	NC,GROUPB
00071E 24 
00071F FE      1673 CP	1-2
000720 FF 
000721 C4      1674 CALL	NZ,COND_
000722 97 
000723 08 
000724 79      1675 LD	A,C
000725 30      1676 JR	NC,GRPA
000726 02 
000727 3E      1677 LD	A,18H
000728 18 
000729 CD      1678 GRPA:           CALL	BYTE
00072A 5E 
00072B 08 
00072C CD      1679 CALL	NUMBER
00072D 6E 
00072E 08 
00072F ED      1680 LD	DE,(PC)
000730 5B 
000731 40 
000732 54 
000733 13      1681 INC	DE
000734 37      1682 SCF
000735 ED      1683 SBC	HL,DE
000736 52 
000737 7D      1684 LD	A,L
000738 17      1685 RLA
000739 9F      1686 SBC	A,A
00073A BC      1687 CP	H
00073B 3E      1688 TOOFAR:         LD	A,1
00073C 01 
00073D C2      1689 JP	NZ,ERROR_	;"Out of range"
00073E 44 
00073F 3F 
000740 7D      1690 VAL8:           LD	A,L
000741 18      1691 JR	BYTE2
000742 32 
               1692 ;
               1693 ;GROUP 11 - JP
               1694 ;
000743 47      1695 GROUPB:         LD	B,A
000744 20      1696 JR	NZ,GROUPC
000745 16 
000746 CD      1697 CALL	COND_
000747 97 
000748 08 
000749 79      1698 LD	A,C
00074A 30      1699 JR	NC,GRPB
00074B 0B 
00074C 78      1700 LD	A,B
00074D E6      1701 AND	3FH
00074E 3F 
00074F FE      1702 CP	6
000750 06 
000751 3E      1703 LD	A,0E9H
000752 E9 
000753 28      1704 JR	Z,BYTE2
000754 20 
000755 3E      1705 LD	A,0C3H
000756 C3 
000757 CD      1706 GRPB:           CALL	BYTE
000758 5E 
000759 08 
00075A 18      1707 JR	ADDR_
00075B 05 
               1708 ;
               1709 ;GROUP 12 - CALL
               1710 ;
00075C 10      1711 GROUPC:         DJNZ	GROUPD
00075D 0C 
00075E CD      1712 GRPC:           CALL	GRPE
00075F 79 
000760 07 
000761 CD      1713 ADDR_:          CALL	NUMBER
000762 6E 
000763 08 
000764 CD      1714 VAL16:          CALL	VAL8
000765 40 
000766 07 
000767 7C      1715 LD	A,H
000768 18      1716 JR	BYTE2
000769 0B 
               1717 ;
               1718 ;GROUP 13 - RST
               1719 ;
00076A 10      1720 GROUPD:         DJNZ	GROUPE
00076B 0B 
00076C CD      1721 CALL	NUMBER
00076D 6E 
00076E 08 
00076F A1      1722 AND	C
000770 B4      1723 OR	H
000771 20      1724 JR	NZ,TOOFAR
000772 C8 
000773 7D      1725 LD	A,L
000774 B1      1726 OR	C
000775 18      1727 BYTE2:          JR	BYTE1
000776 78 
               1728 ;
               1729 ;GROUP 14 - RET
               1730 ;
000777 10      1731 GROUPE:         DJNZ	GROUPF
000778 0A 
000779 CD      1732 GRPE:           CALL	COND_
00077A 97 
00077B 08 
00077C 79      1733 LD	A,C
00077D 30      1734 JR	NC,BYTE1
00077E 70 
00077F F6      1735 OR	9
000780 09 
000781 18      1736 JR	BYTE1
000782 6C 
               1737 ;
               1738 ;GROUP 15 - LD
               1739 ;
000783 10      1740 GROUPF:         DJNZ	MISC
000784 6C 
000785 CD      1741 CALL	LDOP
000786 C3 
000787 08 
000788 30      1742 JR	NC,LDA
000789 5F 
00078A CD      1743 CALL	REGHI
00078B 91 
00078C 08 
00078D 08      1744 EX	AF,AF'
00078E CD      1745 CALL	SKIP
00078F 0F 
000790 09 
000791 FE      1746 CP	'('
000792 28 
000793 28      1747 JR	Z,LDIN
000794 1D 
000795 08      1748 EX	AF,AF'
000796 D2      1749 JP	NC,G6
000797 B8 
000798 06 
000799 0E      1750 LD	C,1
00079A 01 
00079B CD      1751 CALL	PAIR1asm
00079C AE 
00079D 08 
00079E D8      1752 RET	C
00079F 3E      1753 LD	A,14
0007A0 0E 
0007A1 B8      1754 CP	B
0007A2 47      1755 LD	B,A
0007A3 CC      1756 CALL	Z,PAIRasm
0007A4 AA 
0007A5 08 
0007A6 78      1757 LD	A,B
0007A7 E6      1758 AND	3FH
0007A8 3F 
0007A9 FE      1759 CP	12
0007AA 0C 
0007AB 79      1760 LD	A,C
0007AC 20      1761 JR	NZ,GRPB
0007AD A9 
0007AE 3E      1762 LD	A,0F9H
0007AF F9 
0007B0 18      1763 JR	BYTE1
0007B1 3D 
               1764 ;
0007B2 08      1765 LDIN:           EX	AF,AF'
0007B3 C5      1766 PUSH	BC
0007B4 D4      1767 CALL	NC,REGLO
0007B5 8B 
0007B6 08 
0007B7 79      1768 LD	A,C
0007B8 C1      1769 POP	BC
0007B9 30      1770 JR	NC,BIND
0007BA 77 
0007BB 0E      1771 LD	C,0AH
0007BC 0A 
0007BD CD      1772 CALL	PAIR1asm
0007BE AE 
0007BF 08 
0007C0 CD      1773 CALL	LD16
0007C1 08 
0007C2 08 
0007C3 30      1774 JR	NC,GRPB
0007C4 92 
0007C5 CD      1775 CALL	NUMBER
0007C6 6E 
0007C7 08 
0007C8 0E      1776 LD	C,2
0007C9 02 
0007CA CD      1777 CALL	PAIRasm
0007CB AA 
0007CC 08 
0007CD CD      1778 CALL	LD16
0007CE 08 
0007CF 08 
0007D0 D8      1779 RET	C
0007D1 CD      1780 CALL	BYTE
0007D2 5E 
0007D3 08 
0007D4 18      1781 JR	VAL16
0007D5 8E 
               1782 ;
               1783 ;OPT - SET OPTION
               1784 ;
0007D6 05      1785 OPT:            DEC	B
0007D7 CA      1786 JP	Z,DB
0007D8 C3 
0007D9 06 
0007DA 10      1787 DJNZ	ADDR_
0007DB 85 
0007DC CD      1788 CALL	NUMBER
0007DD 6E 
0007DE 08 
0007DF 21      1789 LD	HL,LISTON
0007E0 FE 
0007E1 54 
0007E2 4F      1790 LD	C,A
0007E3 ED      1791 RLD
0007E4 6F 
0007E5 79      1792 LD	A,C
0007E6 ED      1793 RRD
0007E7 67 
0007E8 C9      1794 RET
               1795 ;
0007E9 FE      1796 LDA:            CP	4
0007EA 04 
0007EB DC      1797 CALL	C,ED
0007EC 2C 
0007ED 08 
0007EE 78      1798 LD	A,B
0007EF 18      1799 BYTE1:          JR	BYTE
0007F0 6D 
               1800 ;
               1801 ;MISC - DEFB, DEFW, DEFM
               1802 ;
0007F1 10      1803 MISC:           DJNZ	OPT
0007F2 E3 
0007F3 DD      1804 PUSH	IX
0007F4 E5 
0007F5 CD      1805 CALL	EXPRS
0007F6 3C 
0007F7 18 
0007F8 DD      1806 POP	IX
0007F9 E1 
0007FA 21      1807 LD	HL,ACCS
0007FB 00 
0007FC 52 
0007FD AF      1808 DEFM1:          XOR	A
0007FE BB      1809 CP	E
0007FF C8      1810 RET	Z
000800 7E      1811 LD	A,(HL)
000801 23      1812 INC	HL
000802 CD      1813 CALL	BYTE
000803 5E 
000804 08 
000805 1D      1814 DEC	E
000806 18      1815 JR	DEFM1
000807 F5 
               1816 ;
               1817 ;SUBROUTINES:
               1818 ;
000808 78      1819 LD16:           LD	A,B
000809 38      1820 JR	C,LD8
00080A 0E 
00080B 78      1821 LD	A,B
00080C E6      1822 AND	3FH
00080D 3F 
00080E FE      1823 CP	12
00080F 0C 
000810 79      1824 LD	A,C
000811 C8      1825 RET	Z
000812 CD      1826 CALL	ED
000813 2C 
000814 08 
000815 79      1827 LD	A,C
000816 F6      1828 OR	43H
000817 43 
000818 C9      1829 RET
               1830 ;
000819 FE      1831 LD8:            CP	7
00081A 07 
00081B 37      1832 SCF
00081C C0      1833 RET	NZ
00081D 79      1834 LD	A,C
00081E F6      1835 OR	30H
00081F 30 
000820 C9      1836 RET
               1837 ;
000821 C5      1838 CORN:           PUSH	BC
000822 CD      1839 CALL	OPND
000823 3E 
000824 08 
000825 CB      1840 BIT	5,B
000826 68 
000827 C1      1841 POP	BC
000828 28      1842 JR	Z,NUMBER
000829 44 
00082A 26      1843 LD	H,-1
00082B FF 
00082C 3E      1844 ED:             LD	A,0EDH
00082D ED 
00082E 18      1845 JR	BYTE
00082F 2E 
               1846 ;
000830 3E      1847 CB:             LD	A,0CBH
000831 CB 
000832 FE      1848 BIND:           CP	76H
000833 76 
000834 37      1849 SCF
000835 C8      1850 RET	Z		;REJECT LD (HL),(HL)
000836 CD      1851 CALL	BYTE
000837 5E 
000838 08 
000839 14      1852 INC	D
00083A F0      1853 RET	P
00083B 7B      1854 LD	A,E
00083C 18      1855 JR	BYTE
00083D 20 
               1856 ;
00083E E5      1857 OPND:           PUSH	HL
00083F 21      1858 LD	HL,OPRNDS
000840 80 
000841 0A 
000842 CD      1859 CALL	FIND
000843 C6 
000844 08 
000845 E1      1860 POP	HL
000846 D8      1861 RET	C
000847 CB      1862 BIT	7,B
000848 78 
000849 C8      1863 RET	Z
00084A CB      1864 BIT	3,B
00084B 58 
00084C E5      1865 PUSH	HL
00084D CC      1866 CALL	Z,OFFSETasm
00084E 65 
00084F 08 
000850 5D      1867 LD	E,L
000851 E1      1868 POP	HL
000852 3E      1869 LD	A,0DDH
000853 DD 
000854 CB      1870 BIT	6,B
000855 70 
000856 28      1871 JR	Z,OP1
000857 02 
000858 3E      1872 LD	A,0FDH
000859 FD 
00085A B7      1873 OP1:            OR	A
00085B 14      1874 INC	D
00085C 57      1875 LD	D,A
00085D F8      1876 RET	M
00085E DD      1877 BYTE:           LD	(IX),A
00085F 77 
000860 00 
000861 DD      1878 INC	IX
000862 23 
000863 B7      1879 OR	A
000864 C9      1880 RET
               1881 ;
000865 FD      1882 OFFSETasm:         LD	A,(IY)
000866 7E 
000867 00 
000868 FE      1883 CP	')'
000869 29 
00086A 21      1884 LD	HL,0
00086B 00 
00086C 00 
00086D C8      1885 RET	Z
00086E CD      1886 NUMBER:         CALL	SKIP
00086F 0F 
000870 09 
000871 C5      1887 PUSH	BC
000872 D5      1888 PUSH	DE
000873 DD      1889 PUSH	IX
000874 E5 
000875 CD      1890 CALL	EXPRI
000876 33 
000877 18 
000878 DD      1891 POP	IX
000879 E1 
00087A D9      1892 EXX
00087B D1      1893 POP	DE
00087C C1      1894 POP	BC
00087D 7D      1895 LD	A,L
00087E B7      1896 OR	A
00087F C9      1897 RET
               1898 ;
000880 CD      1899 REG:            CALL	OPND
000881 3E 
000882 08 
000883 D8      1900 RET	C
000884 78      1901 LD	A,B
000885 E6      1902 AND	3FH
000886 3F 
000887 FE      1903 CP	8
000888 08 
000889 3F      1904 CCF
00088A C9      1905 RET
               1906 ;
00088B CD      1907 REGLO:          CALL	REG
00088C 80 
00088D 08 
00088E D8      1908 RET	C
00088F 18      1909 JR	ORC
000890 2F 
               1910 ;
000891 CD      1911 REGHI:          CALL	REG
000892 80 
000893 08 
000894 D8      1912 RET	C
000895 18      1913 JR	SHL3
000896 26 
               1914 ;
000897 CD      1915 COND_:          CALL	OPND
000898 3E 
000899 08 
00089A D8      1916 RET	C
00089B 78      1917 LD	A,B
00089C E6      1918 AND	1FH
00089D 1F 
00089E D6      1919 SUB	16
00089F 10 
0008A0 30      1920 JR	NC,SHL3
0008A1 1B 
0008A2 FE      1921 CP	-15
0008A3 F1 
0008A4 37      1922 SCF
0008A5 C0      1923 RET	NZ
0008A6 3E      1924 LD	A,3
0008A7 03 
0008A8 18      1925 JR	SHL3
0008A9 13 
               1926 ;
0008AA CD      1927 PAIRasm:           CALL	OPND
0008AB 3E 
0008AC 08 
0008AD D8      1928 RET	C
0008AE 78      1929 PAIR1asm:          LD	A,B
0008AF E6      1930 AND	0FH
0008B0 0F 
0008B1 D6      1931 SUB	8
0008B2 08 
0008B3 D8      1932 RET	C
0008B4 18      1933 JR	SHL3
0008B5 07 
               1934 ;
0008B6 CD      1935 BIT:            CALL	NUMBER
0008B7 6E 
0008B8 08 
0008B9 FE      1936 CP	8
0008BA 08 
0008BB 3F      1937 CCF
0008BC D8      1938 RET	C
0008BD 07      1939 SHL3:           RLCA
0008BE 07      1940 RLCA
0008BF 07      1941 RLCA
0008C0 B1      1942 ORC:            OR	C
0008C1 4F      1943 LD	C,A
0008C2 C9      1944 RET
               1945 ;
0008C3 21      1946 LDOP:           LD	HL,LDOPS
0008C4 C5 
0008C5 0A 
0008C6 CD      1947 FIND:           CALL	SKIP
0008C7 0F 
0008C8 09 
0008C9 06      1948 EXIT:           LD	B,0
0008CA 00 
0008CB 37      1949 SCF
0008CC C8      1950 RET	Z
0008CD FE      1951 CP	TDEF
0008CE DD 
0008CF 28      1952 JR	Z,FIND0
0008D0 04 
0008D1 FE      1953 CP	TOR+1
0008D2 85 
0008D3 3F      1954 CCF
0008D4 D8      1955 RET	C
0008D5 7E      1956 FIND0:          LD	A,(HL)
0008D6 B7      1957 OR	A
0008D7 28      1958 JR	Z,EXIT
0008D8 F0 
0008D9 FD      1959 XOR	(IY)
0008DA AE 
0008DB 00 
0008DC E6      1960 AND	01011111B
0008DD 5F 
0008DE 28      1961 JR	Z,FIND2
0008DF 09 
0008E0 CB      1962 FIND1:          BIT	7,(HL)
0008E1 7E 
0008E2 23      1963 INC	HL
0008E3 28      1964 JR	Z,FIND1
0008E4 FB 
0008E5 23      1965 INC	HL
0008E6 04      1966 INC	B
0008E7 18      1967 JR	FIND0
0008E8 EC 
               1968 ;
0008E9 FD      1969 FIND2:          PUSH	IY
0008EA E5 
0008EB CB      1970 FIND3:          BIT	7,(HL)
0008EC 7E 
0008ED FD      1971 INC	IY
0008EE 23 
0008EF 23      1972 INC	HL
0008F0 20      1973 JR	NZ,FIND5
0008F1 10 
0008F2 BE      1974 CP	(HL)
0008F3 CC      1975 CALL	Z,SKIP0
0008F4 0E 
0008F5 09 
0008F6 7E      1976 LD	A,(HL)
0008F7 FD      1977 XOR	(IY)
0008F8 AE 
0008F9 00 
0008FA E6      1978 AND	01011111B
0008FB 5F 
0008FC 28      1979 JR	Z,FIND3
0008FD ED 
0008FE FD      1980 FIND4:          POP	IY
0008FF E1 
000900 18      1981 JR	FIND1
000901 DE 
               1982 ;
000902 CD      1983 FIND5:          CALL	DELIM
000903 21 
000904 09 
000905 C4      1984 CALL	NZ,SIGN
000906 1B 
000907 09 
000908 20      1985 JR	NZ,FIND4
000909 F4 
00090A 78      1986 FIND6:          LD	A,B
00090B 46      1987 LD	B,(HL)
00090C E1      1988 POP	HL
00090D C9      1989 RET
               1990 ;
00090E 23      1991 SKIP0:          INC	HL
00090F CD      1992 SKIP:           CALL	DELIM
000910 21 
000911 09 
000912 C0      1993 RET	NZ
000913 CD      1994 CALL	TERM
000914 2D 
000915 09 
000916 C8      1995 RET	Z
000917 FD      1996 INC	IY
000918 23 
000919 18      1997 JR	SKIP
00091A F4 
               1998 ;
00091B FE      1999 SIGN:           CP	'+'
00091C 2B 
00091D C8      2000 RET	Z
00091E FE      2001 CP	'-'
00091F 2D 
000920 C9      2002 RET
               2003 ;
000921 FD      2004 DELIM:          LD	A,(IY)		;ASSEMBLER DELIMITER
000922 7E 
000923 00 
000924 FE      2005 CP	' '
000925 20 
000926 C8      2006 RET	Z
000927 FE      2007 CP	','
000928 2C 
000929 C8      2008 RET	Z
00092A FE      2009 CP	')'
00092B 29 
00092C C8      2010 RET	Z
00092D FE      2011 TERM:           CP	';'		;ASSEMBLER TERMINATOR
00092E 3B 
00092F C8      2012 RET	Z
000930 FE      2013 CP	'\'
000931 5C 
000932 C8      2014 RET	Z
000933 FE      2015 TERM0:          CP	':'		;ASSEMBLER SEPARATOR
000934 3A 
000935 D0      2016 RET	NC
000936 FE      2017 CP	CR
000937 0D 
000938 C9      2018 RET
               2019 ;
000939 4E      2020 OPCODS:         DB	"NO"
00093A 4F 
00093B D0      2021 DB	'P'+80H
00093C 00      2022 DB	0
00093D 52      2023 DB	"RLC"
00093E 4C 
00093F 43 
000940 C1      2024 DB	'A'+80H
000941 07      2025 DB	7
000942 45      2026 DB	"EX"
000943 58 
000944 00      2027 DB	0
000945 41      2028 DB	"AF"
000946 46 
000947 00      2029 DB	0
000948 41      2030 DB	"AF"
000949 46 
00094A 27      2031 DB	"'"+80H
00094B 08      2032 DB	8
00094C 52      2033 DB	"RRC"
00094D 52 
00094E 43 
00094F C1      2034 DB	'A'+80H
000950 0F      2035 DB	0FH
000951 52      2036 DB	"RL"
000952 4C 
000953 C1      2037 DB	'A'+80H
000954 17      2038 DB	17H
000955 52      2039 DB	"RR"
000956 52 
000957 C1      2040 DB	'A'+80H
000958 1F      2041 DB	1FH
000959 44      2042 DB	"DA"
00095A 41 
00095B C1      2043 DB	'A'+80H
00095C 27      2044 DB	27H
00095D 43      2045 DB	"CP"
00095E 50 
00095F CC      2046 DB	'L'+80H
000960 2F      2047 DB	2FH
000961 53      2048 DB	"SC"
000962 43 
000963 C6      2049 DB	'F'+80H
000964 37      2050 DB	37H
000965 43      2051 DB	"CC"
000966 43 
000967 C6      2052 DB	'F'+80H
000968 3F      2053 DB	3FH
000969 48      2054 DB	"HAL"
00096A 41 
00096B 4C 
00096C D4      2055 DB	'T'+80H
00096D 76      2056 DB	76H
00096E 45      2057 DB	"EX"
00096F 58 
000970 D8      2058 DB	'X'+80H
000971 D9      2059 DB	0D9H
000972 45      2060 DB	"EX"
000973 58 
000974 00      2061 DB	0
000975 44      2062 DB	"DE"
000976 45 
000977 00      2063 DB	0
000978 48      2064 DB	'H'
000979 CC      2065 DB	'L'+80H
00097A EB      2066 DB	0EBH
00097B 44      2067 DB	'D'
00097C C9      2068 DB	'I'+80H
00097D F3      2069 DB	0F3H
00097E 45      2070 DB	'E'
00097F C9      2071 DB	'I'+80H
000980 FB      2072 DB	0FBH
               2073 ;
000981 4E      2074 DB	"NE"
000982 45 
000983 C7      2075 DB	'G'+80H
000984 44      2076 DB	44H
000985 49      2077 DB	"IM"
000986 4D 
000987 00      2078 DB	0
000988 B0      2079 DB	'0'+80H
000989 46      2080 DB	46H
00098A 52      2081 DB	"RET"
00098B 45 
00098C 54 
00098D CE      2082 DB	'N'+80H
00098E 45      2083 DB	45H
00098F 52      2084 DB	"RET"
000990 45 
000991 54 
000992 C9      2085 DB	'I'+80H
000993 4D      2086 DB	4DH
000994 49      2087 DB	"IM"
000995 4D 
000996 00      2088 DB	0
000997 B1      2089 DB	'1'+80H
000998 56      2090 DB	56H
000999 49      2091 DB	"IM"
00099A 4D 
00099B 00      2092 DB	0
00099C B2      2093 DB	'2'+80H
00099D 5E      2094 DB	5EH
00099E 52      2095 DB	"RR"
00099F 52 
0009A0 C4      2096 DB	'D'+80H
0009A1 67      2097 DB	67H
0009A2 52      2098 DB	"RL"
0009A3 4C 
0009A4 C4      2099 DB	'D'+80H
0009A5 6F      2100 DB	6FH
0009A6 4C      2101 DB	"LD"
0009A7 44 
0009A8 C9      2102 DB	'I'+80H
0009A9 A0      2103 DB	0A0H
0009AA 43      2104 DB	"CP"
0009AB 50 
0009AC C9      2105 DB	'I'+80H
0009AD A1      2106 DB	0A1H
0009AE 49      2107 DB	"IN"
0009AF 4E 
0009B0 C9      2108 DB	'I'+80H
0009B1 A2      2109 DB	0A2H
0009B2 4F      2110 DB	"OUT"
0009B3 55 
0009B4 54 
0009B5 C9      2111 DB	'I'+80H
0009B6 A3      2112 DB	0A3H
0009B7 4C      2113 DB	"LD"
0009B8 44 
0009B9 C4      2114 DB	'D'+80H
0009BA A8      2115 DB	0A8H
0009BB 43      2116 DB	"CP"
0009BC 50 
0009BD C4      2117 DB	'D'+80H
0009BE A9      2118 DB	0A9H
0009BF 49      2119 DB	"IN"
0009C0 4E 
0009C1 C4      2120 DB	'D'+80H
0009C2 AA      2121 DB	0AAH
0009C3 4F      2122 DB	"OUT"
0009C4 55 
0009C5 54 
0009C6 C4      2123 DB	'D'+80H
0009C7 AB      2124 DB	0ABH
0009C8 4C      2125 DB	"LDI"
0009C9 44 
0009CA 49 
0009CB D2      2126 DB	'R'+80H
0009CC B0      2127 DB	0B0H
0009CD 43      2128 DB	"CPI"
0009CE 50 
0009CF 49 
0009D0 D2      2129 DB	'R'+80H
0009D1 B1      2130 DB	0B1H
0009D2 49      2131 DB	"INI"
0009D3 4E 
0009D4 49 
0009D5 D2      2132 DB	'R'+80H
0009D6 B2      2133 DB	0B2H
0009D7 4F      2134 DB	"OTI"
0009D8 54 
0009D9 49 
0009DA D2      2135 DB	'R'+80H
0009DB B3      2136 DB	0B3H
0009DC 4C      2137 DB	"LDD"
0009DD 44 
0009DE 44 
0009DF D2      2138 DB	'R'+80H
0009E0 B8      2139 DB	0B8H
0009E1 43      2140 DB	"CPD"
0009E2 50 
0009E3 44 
0009E4 D2      2141 DB	'R'+80H
0009E5 B9      2142 DB	0B9H
0009E6 49      2143 DB	"IND"
0009E7 4E 
0009E8 44 
0009E9 D2      2144 DB	'R'+80H
0009EA BA      2145 DB	0BAH
0009EB 4F      2146 DB	"OTD"
0009EC 54 
0009ED 44 
0009EE D2      2147 DB	'R'+80H
0009EF BB      2148 DB	0BBH
               2149 ;
0009F0 42      2150 DB	"BI"
0009F1 49 
0009F2 D4      2151 DB	'T'+80H
0009F3 40      2152 DB	40H
0009F4 52      2153 DB	"RE"
0009F5 45 
0009F6 D3      2154 DB	'S'+80H
0009F7 80      2155 DB	80H
0009F8 53      2156 DB	"SE"
0009F9 45 
0009FA D4      2157 DB	'T'+80H
0009FB C0      2158 DB	0C0H
               2159 ;
0009FC 52      2160 DB	"RL"
0009FD 4C 
0009FE C3      2161 DB	'C'+80H
0009FF 00      2162 DB	0
000A00 52      2163 DB	"RR"
000A01 52 
000A02 C3      2164 DB	'C'+80H
000A03 08      2165 DB	8
000A04 52      2166 DB	'R'
000A05 CC      2167 DB	'L'+80H
000A06 10      2168 DB	10H
000A07 52      2169 DB	'R'
000A08 D2      2170 DB	'R'+80H
000A09 18      2171 DB	18H
000A0A 53      2172 DB	"SL"
000A0B 4C 
000A0C C1      2173 DB	'A'+80H
000A0D 20      2174 DB	20H
000A0E 53      2175 DB	"SR"
000A0F 52 
000A10 C1      2176 DB	'A'+80H
000A11 28      2177 DB	28H
000A12 53      2178 DB	"SR"
000A13 52 
000A14 CC      2179 DB	'L'+80H
000A15 38      2180 DB	38H
               2181 ;
000A16 50      2182 DB	"PO"
000A17 4F 
000A18 D0      2183 DB	'P'+80H
000A19 C1      2184 DB	0C1H
000A1A 50      2185 DB	"PUS"
000A1B 55 
000A1C 53 
000A1D C8      2186 DB	'H'+80H
000A1E C5      2187 DB	0C5H
000A1F 45      2188 DB	"EX"
000A20 58 
000A21 00      2189 DB	0
000A22 28      2190 DB	"(S"
000A23 53 
000A24 D0      2191 DB	'P'+80H
000A25 E3      2192 DB	0E3H
               2193 ;
000A26 53      2194 DB	"SU"
000A27 55 
000A28 C2      2195 DB	'B'+80H
000A29 90      2196 DB	90H
000A2A 41      2197 DB	"AN"
000A2B 4E 
000A2C C4      2198 DB	'D'+80H
000A2D A0      2199 DB	0A0H
000A2E 58      2200 DB	"XO"
000A2F 4F 
000A30 D2      2201 DB	'R'+80H
000A31 A8      2202 DB	0A8H
000A32 4F      2203 DB	'O'
000A33 D2      2204 DB	'R'+80H
000A34 B0      2205 DB	0B0H
000A35 43      2206 DB	'C'
000A36 D0      2207 DB	'P'+80H
000A37 B8      2208 DB	0B8H
000A38 80      2209 DB	TAND
000A39 A0      2210 DB	0A0H
000A3A 84      2211 DB	TOR
000A3B B0      2212 DB	0B0H
               2213 ;
000A3C 41      2214 DB	"AD"
000A3D 44 
000A3E C4      2215 DB	'D'+80H
000A3F 80      2216 DB	80H
000A40 41      2217 DB	"AD"
000A41 44 
000A42 C3      2218 DB	'C'+80H
000A43 88      2219 DB	88H
000A44 53      2220 DB	"SB"
000A45 42 
000A46 C3      2221 DB	'C'+80H
000A47 98      2222 DB	98H
               2223 ;
000A48 49      2224 DB	"IN"
000A49 4E 
000A4A C3      2225 DB	'C'+80H
000A4B 04      2226 DB	4
000A4C 44      2227 DB	"DE"
000A4D 45 
000A4E C3      2228 DB	'C'+80H
000A4F 05      2229 DB	5
               2230 ;
000A50 49      2231 DB	'I'
000A51 CE      2232 DB	'N'+80H
000A52 40      2233 DB	40H
000A53 4F      2234 DB	"OU"
000A54 55 
000A55 D4      2235 DB	'T'+80H
000A56 41      2236 DB	41H
               2237 ;
000A57 4A      2238 DB	'J'
000A58 D2      2239 DB	'R'+80H
000A59 20      2240 DB	20H
000A5A 44      2241 DB	"DJN"
000A5B 4A 
000A5C 4E 
000A5D DA      2242 DB	'Z'+80H
000A5E 10      2243 DB	10H
               2244 ;
000A5F 4A      2245 DB	'J'
000A60 D0      2246 DB	'P'+80H
000A61 C2      2247 DB	0C2H
               2248 ;
000A62 43      2249 DB	"CAL"
000A63 41 
000A64 4C 
000A65 CC      2250 DB	'L'+80H
000A66 C4      2251 DB	0C4H
               2252 ;
000A67 52      2253 DB	"RS"
000A68 53 
000A69 D4      2254 DB	'T'+80H
000A6A C7      2255 DB	0C7H
               2256 ;
000A6B 52      2257 DB	"RE"
000A6C 45 
000A6D D4      2258 DB	'T'+80H
000A6E C0      2259 DB	0C0H
               2260 ;
000A6F 4C      2261 DB	'L'
000A70 C4      2262 DB	'D'+80H
000A71 40      2263 DB	40H
               2264 ;
000A72 5D      2265 DB	TDEF & 7FH
000A73 CD      2266 DB	'M'+80H
000A74 00      2267 DB	0
               2268 ;
000A75 5D      2269 DB	TDEF & 7FH
000A76 C2      2270 DB	'B'+80H
000A77 00      2271 DB	0
               2272 ;
000A78 4F      2273 DB	"OP"
000A79 50 
000A7A D4      2274 DB	'T'+80H
000A7B 00      2275 DB	0
               2276 ;
000A7C 5D      2277 DB	TDEF & 7FH
000A7D D7      2278 DB	'W'+80H
000A7E 00      2279 DB	0
               2280 ;
000A7F 00      2281 DB	0
               2282 ;
000A80 C2      2283 OPRNDS:         DB	'B'+80H
000A81 00      2284 DB	0
000A82 C3      2285 DB	'C'+80H
000A83 01      2286 DB	1
000A84 C4      2287 DB	'D'+80H
000A85 02      2288 DB	2
000A86 C5      2289 DB	'E'+80H
000A87 03      2290 DB	3
000A88 C8      2291 DB	'H'+80H
000A89 04      2292 DB	4
000A8A CC      2293 DB	'L'+80H
000A8B 05      2294 DB	5
000A8C 28      2295 DB	"(H"
000A8D 48 
000A8E CC      2296 DB	'L'+80H
000A8F 06      2297 DB	6
000A90 C1      2298 DB	'A'+80H
000A91 07      2299 DB	7
000A92 28      2300 DB	"(I"
000A93 49 
000A94 D8      2301 DB	'X'+80H
000A95 86      2302 DB	86H
000A96 28      2303 DB	"(I"
000A97 49 
000A98 D9      2304 DB	'Y'+80H
000A99 C6      2305 DB	0C6H
               2306 ;
000A9A 42      2307 DB	'B'
000A9B C3      2308 DB	'C'+80H
000A9C 08      2309 DB	8
000A9D 44      2310 DB	'D'
000A9E C5      2311 DB	'E'+80H
000A9F 0A      2312 DB	10
000AA0 48      2313 DB	'H'
000AA1 CC      2314 DB	'L'+80H
000AA2 0C      2315 DB	12
000AA3 49      2316 DB	'I'
000AA4 D8      2317 DB	'X'+80H
000AA5 8C      2318 DB	8CH
000AA6 49      2319 DB	'I'
000AA7 D9      2320 DB	'Y'+80H
000AA8 CC      2321 DB	0CCH
000AA9 41      2322 DB	'A'
000AAA C6      2323 DB	'F'+80H
000AAB 0E      2324 DB	14
000AAC 53      2325 DB	'S'
000AAD D0      2326 DB	'P'+80H
000AAE 0E      2327 DB	14
               2328 ;
000AAF 4E      2329 DB	'N'
000AB0 DA      2330 DB	'Z'+80H
000AB1 10      2331 DB	16
000AB2 DA      2332 DB	'Z'+80H
000AB3 11      2333 DB	17
000AB4 4E      2334 DB	'N'
000AB5 C3      2335 DB	'C'+80H
000AB6 12      2336 DB	18
000AB7 50      2337 DB	'P'
000AB8 CF      2338 DB	'O'+80H
000AB9 14      2339 DB	20
000ABA 50      2340 DB	'P'
000ABB C5      2341 DB	'E'+80H
000ABC 15      2342 DB	21
000ABD D0      2343 DB	'P'+80H
000ABE 16      2344 DB	22
000ABF CD      2345 DB	'M'+80H
000AC0 17      2346 DB	23
               2347 ;
000AC1 28      2348 DB	'('
000AC2 C3      2349 DB	'C'+80H
000AC3 20      2350 DB	20H
               2351 ;
000AC4 00      2352 DB	0
               2353 ;
000AC5 49      2354 LDOPS:          DB	'I'
000AC6 00      2355 DB	0
000AC7 C1      2356 DB	'A'+80H
000AC8 47      2357 DB	47H
000AC9 52      2358 DB	'R'
000ACA 00      2359 DB	0
000ACB C1      2360 DB	'A'+80H
000ACC 4F      2361 DB	4FH
000ACD 41      2362 DB	'A'
000ACE 00      2363 DB	0
000ACF C9      2364 DB	'I'+80H
000AD0 57      2365 DB	57H
000AD1 41      2366 DB	'A'
000AD2 00      2367 DB	0
000AD3 D2      2368 DB	'R'+80H
000AD4 5F      2369 DB	5FH
000AD5 28      2370 DB	"(BC"
000AD6 42 
000AD7 43 
000AD8 00      2371 DB	0
000AD9 C1      2372 DB	'A'+80H
000ADA 02      2373 DB	2
000ADB 28      2374 DB	"(DE"
000ADC 44 
000ADD 45 
000ADE 00      2375 DB	0
000ADF C1      2376 DB	'A'+80H
000AE0 12      2377 DB	12H
000AE1 41      2378 DB	'A'
000AE2 00      2379 DB	0
000AE3 28      2380 DB	"(B"
000AE4 42 
000AE5 C3      2381 DB	'C'+80H
000AE6 0A      2382 DB	0AH
000AE7 41      2383 DB	'A'
000AE8 00      2384 DB	0
000AE9 28      2385 DB	"(D"
000AEA 44 
000AEB C5      2386 DB	'E'+80H
000AEC 1A      2387 DB	1AH
               2388 ;
000AED 00      2389 DB	0
               2390 ;
               2391 FIN:            ; END
               2392 ; --- End asmb.asm ---
               2393 
               2394 ; --- Begin agon_gpio.asm ---
               2395 ;
               2396 ; Title:	BBC Basic for AGON - GPIO functions
               2397 ; Author:	Dean Belfield
               2398 ; Created:	04/12/2024
               2399 ; Last Updated:	04/12/2024
               2400 ;
               2401 ; Modinfo:
               2402 
               2403 ; INCLUDE	"macros.inc"
               2404 ; INCLUDE	"equs.inc"
               2405 
               2406 .ASSUME	ADL = 0
               2407 ;	.ORG 0x0000
               2408 
               2409 ;			SEGMENT CODE
               2410 
               2411 ;			XDEF	GPIOB_SETMODE
               2412 
               2413 ;			XREF	SWITCH_A
               2414 
               2415 ;  A: Mode
               2416 ;  B: Pins
               2417 ;
000AEE CD      2418 GPIOB_SETMODE:		CALL	SWITCH_A
000AEF 8F 
000AF0 0E 
000AF1 05      2419 DW	GPIOB_M0	; Output
000AF2 0B 
000AF3 2A      2420 DW	GPIOB_M1	; Input
000AF4 0B 
000AF5 4A      2421 DW	GPIOB_M2	; Open Drain IO
000AF6 0B 
000AF7 6A      2422 DW	GPIOB_M3	; Open Source IO
000AF8 0B 
000AF9 85      2423 DW	GPIOB_M4	; Interrupt, Dual Edge
000AFA 0B 
000AFB B1      2424 DW	GPIOB_M5	; Alt Function
000AFC 0B 
000AFD CC      2425 DW	GPIOB_M6	; Interrupt, Active Low
000AFE 0B 
000AFF F3      2426 DW	GPIOB_M7	; Interrupt, Active High
000B00 0B 
000B01 15      2427 DW	GPIOB_M8	; Interrupt, Falling Edge
000B02 0C 
000B03 37      2428 DW	GPIOB_M9	; Interrupt, Rising Edge
000B04 0C 
               2429 
               2430 ; Output
               2431 ;
               2432 GPIOB_M0:		RES_GPIO PB_DDR,  B
000B05 C5    0001M1 PUSH    BC
000B06 78    0002M1 LD      A, VAL
000B07 2F    0003M1 CPL
000B08 4F    0004M1 LD      C, A
000B09 ED    0005M1 IN0     A, (REG)
000B0A 38 
000B0B 9B 
000B0C A1    0006M1 AND     C
000B0D ED    0007M1 OUT0    (REG), A
000B0E 39 
000B0F 9B 
000B10 C1    0008M1 POP     BC
               2433 RES_GPIO PB_ALT1, B
000B11 C5    0001M1 PUSH    BC
000B12 78    0002M1 LD      A, VAL
000B13 2F    0003M1 CPL
000B14 4F    0004M1 LD      C, A
000B15 ED    0005M1 IN0     A, (REG)
000B16 38 
000B17 9C 
000B18 A1    0006M1 AND     C
000B19 ED    0007M1 OUT0    (REG), A
000B1A 39 
000B1B 9C 
000B1C C1    0008M1 POP     BC
               2434 RES_GPIO PB_ALT2, B
000B1D C5    0001M1 PUSH    BC
000B1E 78    0002M1 LD      A, VAL
000B1F 2F    0003M1 CPL
000B20 4F    0004M1 LD      C, A
000B21 ED    0005M1 IN0     A, (REG)
000B22 38 
000B23 9D 
000B24 A1    0006M1 AND     C
000B25 ED    0007M1 OUT0    (REG), A
000B26 39 
000B27 9D 
000B28 C1    0008M1 POP     BC
000B29 C9      2435 RET
               2436 
               2437 ; Input
               2438 ;
               2439 GPIOB_M1:		SET_GPIO PB_DDR,  B
000B2A ED    0001M1 IN0     A, (REG)
000B2B 38 
000B2C 9B 
000B2D B0    0002M1 OR      VAL
000B2E ED    0003M1 OUT0    (REG), A
000B2F 39 
000B30 9B 
               2440 RES_GPIO PB_ALT1, B
000B31 C5    0001M1 PUSH    BC
000B32 78    0002M1 LD      A, VAL
000B33 2F    0003M1 CPL
000B34 4F    0004M1 LD      C, A
000B35 ED    0005M1 IN0     A, (REG)
000B36 38 
000B37 9C 
000B38 A1    0006M1 AND     C
000B39 ED    0007M1 OUT0    (REG), A
000B3A 39 
000B3B 9C 
000B3C C1    0008M1 POP     BC
               2441 RES_GPIO PB_ALT2, B
000B3D C5    0001M1 PUSH    BC
000B3E 78    0002M1 LD      A, VAL
000B3F 2F    0003M1 CPL
000B40 4F    0004M1 LD      C, A
000B41 ED    0005M1 IN0     A, (REG)
000B42 38 
000B43 9D 
000B44 A1    0006M1 AND     C
000B45 ED    0007M1 OUT0    (REG), A
000B46 39 
000B47 9D 
000B48 C1    0008M1 POP     BC
000B49 C9      2442 RET
               2443 
               2444 ; Open Drain IO
               2445 ;
               2446 GPIOB_M2:		RES_GPIO PB_DDR,  B
000B4A C5    0001M1 PUSH    BC
000B4B 78    0002M1 LD      A, VAL
000B4C 2F    0003M1 CPL
000B4D 4F    0004M1 LD      C, A
000B4E ED    0005M1 IN0     A, (REG)
000B4F 38 
000B50 9B 
000B51 A1    0006M1 AND     C
000B52 ED    0007M1 OUT0    (REG), A
000B53 39 
000B54 9B 
000B55 C1    0008M1 POP     BC
               2447 SET_GPIO PB_ALT1, B
000B56 ED    0001M1 IN0     A, (REG)
000B57 38 
000B58 9C 
000B59 B0    0002M1 OR      VAL
000B5A ED    0003M1 OUT0    (REG), A
000B5B 39 
000B5C 9C 
               2448 RES_GPIO PB_ALT2, B
000B5D C5    0001M1 PUSH    BC
000B5E 78    0002M1 LD      A, VAL
000B5F 2F    0003M1 CPL
000B60 4F    0004M1 LD      C, A
000B61 ED    0005M1 IN0     A, (REG)
000B62 38 
000B63 9D 
000B64 A1    0006M1 AND     C
000B65 ED    0007M1 OUT0    (REG), A
000B66 39 
000B67 9D 
000B68 C1    0008M1 POP     BC
000B69 C9      2449 RET
               2450 
               2451 ; Open Source IO
               2452 ;
               2453 GPIOB_M3:		SET_GPIO PB_DDR,  B
000B6A ED    0001M1 IN0     A, (REG)
000B6B 38 
000B6C 9B 
000B6D B0    0002M1 OR      VAL
000B6E ED    0003M1 OUT0    (REG), A
000B6F 39 
000B70 9B 
               2454 SET_GPIO PB_ALT1, B
000B71 ED    0001M1 IN0     A, (REG)
000B72 38 
000B73 9C 
000B74 B0    0002M1 OR      VAL
000B75 ED    0003M1 OUT0    (REG), A
000B76 39 
000B77 9C 
               2455 RES_GPIO PB_ALT2, B
000B78 C5    0001M1 PUSH    BC
000B79 78    0002M1 LD      A, VAL
000B7A 2F    0003M1 CPL
000B7B 4F    0004M1 LD      C, A
000B7C ED    0005M1 IN0     A, (REG)
000B7D 38 
000B7E 9D 
000B7F A1    0006M1 AND     C
000B80 ED    0007M1 OUT0    (REG), A
000B81 39 
000B82 9D 
000B83 C1    0008M1 POP     BC
000B84 C9      2456 RET
               2457 
               2458 ; Interrupt, Dual Edge
               2459 ;
               2460 GPIOB_M4:		SET_GPIO PB_DR,   B
000B85 ED    0001M1 IN0     A, (REG)
000B86 38 
000B87 9A 
000B88 B0    0002M1 OR      VAL
000B89 ED    0003M1 OUT0    (REG), A
000B8A 39 
000B8B 9A 
               2461 RES_GPIO PB_DDR,  B
000B8C C5    0001M1 PUSH    BC
000B8D 78    0002M1 LD      A, VAL
000B8E 2F    0003M1 CPL
000B8F 4F    0004M1 LD      C, A
000B90 ED    0005M1 IN0     A, (REG)
000B91 38 
000B92 9B 
000B93 A1    0006M1 AND     C
000B94 ED    0007M1 OUT0    (REG), A
000B95 39 
000B96 9B 
000B97 C1    0008M1 POP     BC
               2462 RES_GPIO PB_ALT1, B
000B98 C5    0001M1 PUSH    BC
000B99 78    0002M1 LD      A, VAL
000B9A 2F    0003M1 CPL
000B9B 4F    0004M1 LD      C, A
000B9C ED    0005M1 IN0     A, (REG)
000B9D 38 
000B9E 9C 
000B9F A1    0006M1 AND     C
000BA0 ED    0007M1 OUT0    (REG), A
000BA1 39 
000BA2 9C 
000BA3 C1    0008M1 POP     BC
               2463 RES_GPIO PB_ALT2, B
000BA4 C5    0001M1 PUSH    BC
000BA5 78    0002M1 LD      A, VAL
000BA6 2F    0003M1 CPL
000BA7 4F    0004M1 LD      C, A
000BA8 ED    0005M1 IN0     A, (REG)
000BA9 38 
000BAA 9D 
000BAB A1    0006M1 AND     C
000BAC ED    0007M1 OUT0    (REG), A
000BAD 39 
000BAE 9D 
000BAF C1    0008M1 POP     BC
000BB0 C9      2464 RET
               2465 
               2466 ; Alt Function
               2467 ;
               2468 GPIOB_M5:		SET_GPIO PB_DDR,  B
000BB1 ED    0001M1 IN0     A, (REG)
000BB2 38 
000BB3 9B 
000BB4 B0    0002M1 OR      VAL
000BB5 ED    0003M1 OUT0    (REG), A
000BB6 39 
000BB7 9B 
               2469 RES_GPIO PB_ALT1, B
000BB8 C5    0001M1 PUSH    BC
000BB9 78    0002M1 LD      A, VAL
000BBA 2F    0003M1 CPL
000BBB 4F    0004M1 LD      C, A
000BBC ED    0005M1 IN0     A, (REG)
000BBD 38 
000BBE 9C 
000BBF A1    0006M1 AND     C
000BC0 ED    0007M1 OUT0    (REG), A
000BC1 39 
000BC2 9C 
000BC3 C1    0008M1 POP     BC
               2470 SET_GPIO PB_ALT2, B
000BC4 ED    0001M1 IN0     A, (REG)
000BC5 38 
000BC6 9D 
000BC7 B0    0002M1 OR      VAL
000BC8 ED    0003M1 OUT0    (REG), A
000BC9 39 
000BCA 9D 
000BCB C9      2471 RET
               2472 
               2473 ; Interrupt, Active Low
               2474 ;
               2475 GPIOB_M6:		RES_GPIO PB_DR,   B
000BCC C5    0001M1 PUSH    BC
000BCD 78    0002M1 LD      A, VAL
000BCE 2F    0003M1 CPL
000BCF 4F    0004M1 LD      C, A
000BD0 ED    0005M1 IN0     A, (REG)
000BD1 38 
000BD2 9A 
000BD3 A1    0006M1 AND     C
000BD4 ED    0007M1 OUT0    (REG), A
000BD5 39 
000BD6 9A 
000BD7 C1    0008M1 POP     BC
               2476 RES_GPIO PB_DDR,  B
000BD8 C5    0001M1 PUSH    BC
000BD9 78    0002M1 LD      A, VAL
000BDA 2F    0003M1 CPL
000BDB 4F    0004M1 LD      C, A
000BDC ED    0005M1 IN0     A, (REG)
000BDD 38 
000BDE 9B 
000BDF A1    0006M1 AND     C
000BE0 ED    0007M1 OUT0    (REG), A
000BE1 39 
000BE2 9B 
000BE3 C1    0008M1 POP     BC
               2477 SET_GPIO PB_ALT1, B
000BE4 ED    0001M1 IN0     A, (REG)
000BE5 38 
000BE6 9C 
000BE7 B0    0002M1 OR      VAL
000BE8 ED    0003M1 OUT0    (REG), A
000BE9 39 
000BEA 9C 
               2478 SET_GPIO PB_ALT2, B
000BEB ED    0001M1 IN0     A, (REG)
000BEC 38 
000BED 9D 
000BEE B0    0002M1 OR      VAL
000BEF ED    0003M1 OUT0    (REG), A
000BF0 39 
000BF1 9D 
000BF2 C9      2479 RET
               2480 
               2481 
               2482 ; Interrupt, Active High
               2483 ;
               2484 GPIOB_M7:		SET_GPIO PB_DR,   B
000BF3 ED    0001M1 IN0     A, (REG)
000BF4 38 
000BF5 9A 
000BF6 B0    0002M1 OR      VAL
000BF7 ED    0003M1 OUT0    (REG), A
000BF8 39 
000BF9 9A 
               2485 RES_GPIO PB_DDR,  B
000BFA C5    0001M1 PUSH    BC
000BFB 78    0002M1 LD      A, VAL
000BFC 2F    0003M1 CPL
000BFD 4F    0004M1 LD      C, A
000BFE ED    0005M1 IN0     A, (REG)
000BFF 38 
000C00 9B 
000C01 A1    0006M1 AND     C
000C02 ED    0007M1 OUT0    (REG), A
000C03 39 
000C04 9B 
000C05 C1    0008M1 POP     BC
               2486 SET_GPIO PB_ALT1, B
000C06 ED    0001M1 IN0     A, (REG)
000C07 38 
000C08 9C 
000C09 B0    0002M1 OR      VAL
000C0A ED    0003M1 OUT0    (REG), A
000C0B 39 
000C0C 9C 
               2487 SET_GPIO PB_ALT2, B
000C0D ED    0001M1 IN0     A, (REG)
000C0E 38 
000C0F 9D 
000C10 B0    0002M1 OR      VAL
000C11 ED    0003M1 OUT0    (REG), A
000C12 39 
000C13 9D 
000C14 C9      2488 RET
               2489 
               2490 
               2491 ; Interrupt, Falling Edge
               2492 ;
               2493 GPIOB_M8:		RES_GPIO PB_DR,   B
000C15 C5    0001M1 PUSH    BC
000C16 78    0002M1 LD      A, VAL
000C17 2F    0003M1 CPL
000C18 4F    0004M1 LD      C, A
000C19 ED    0005M1 IN0     A, (REG)
000C1A 38 
000C1B 9A 
000C1C A1    0006M1 AND     C
000C1D ED    0007M1 OUT0    (REG), A
000C1E 39 
000C1F 9A 
000C20 C1    0008M1 POP     BC
               2494 SET_GPIO PB_DDR,  B
000C21 ED    0001M1 IN0     A, (REG)
000C22 38 
000C23 9B 
000C24 B0    0002M1 OR      VAL
000C25 ED    0003M1 OUT0    (REG), A
000C26 39 
000C27 9B 
               2495 SET_GPIO PB_ALT1, B
000C28 ED    0001M1 IN0     A, (REG)
000C29 38 
000C2A 9C 
000C2B B0    0002M1 OR      VAL
000C2C ED    0003M1 OUT0    (REG), A
000C2D 39 
000C2E 9C 
               2496 SET_GPIO PB_ALT2, B
000C2F ED    0001M1 IN0     A, (REG)
000C30 38 
000C31 9D 
000C32 B0    0002M1 OR      VAL
000C33 ED    0003M1 OUT0    (REG), A
000C34 39 
000C35 9D 
000C36 C9      2497 RET
               2498 
               2499 ; Interrupt, Rising Edge
               2500 ;
               2501 GPIOB_M9:		SET_GPIO PB_DR,   B
000C37 ED    0001M1 IN0     A, (REG)
000C38 38 
000C39 9A 
000C3A B0    0002M1 OR      VAL
000C3B ED    0003M1 OUT0    (REG), A
000C3C 39 
000C3D 9A 
               2502 SET_GPIO PB_DDR,  B
000C3E ED    0001M1 IN0     A, (REG)
000C3F 38 
000C40 9B 
000C41 B0    0002M1 OR      VAL
000C42 ED    0003M1 OUT0    (REG), A
000C43 39 
000C44 9B 
               2503 SET_GPIO PB_ALT1, B
000C45 ED    0001M1 IN0     A, (REG)
000C46 38 
000C47 9C 
000C48 B0    0002M1 OR      VAL
000C49 ED    0003M1 OUT0    (REG), A
000C4A 39 
000C4B 9C 
               2504 SET_GPIO PB_ALT2, B
000C4C ED    0001M1 IN0     A, (REG)
000C4D 38 
000C4E 9D 
000C4F B0    0002M1 OR      VAL
000C50 ED    0003M1 OUT0    (REG), A
000C51 39 
000C52 9D 
000C53 C9      2505 RET
               2506 ; --- End agon_gpio.asm ---
               2507 
               2508 ; --- Begin agon_graphics.asm ---
               2509 ;
               2510 ; Title:	BBC Basic for AGON - Graphics stuff
               2511 ; Author:	Dean Belfield
               2512 ; Created:	04/12/2024
               2513 ; Last Updated:	11/12/2024
               2514 ;
               2515 ; Modinfo:
               2516 ; 11/12/2024:	Modified POINT_ to work with OSWORD
               2517 
               2518 .ASSUME	ADL = 0
               2519 ;	.ORG 0x0000
               2520 
               2521 ; INCLUDE	"equs.inc"
               2522 ; INCLUDE "macros.inc"
               2523 ; INCLUDE "mos_api.inc"	; In MOS/src
               2524 
               2525 ;			SEGMENT CODE
               2526 
               2527 ;			XDEF	MODE_
               2528 ;			XDEF	COLOUR_
               2529 ;			XDEF	POINT_
               2530 ;			XDEF	GETSCHR
               2531 ;			XDEF	GETSCHR_1
               2532 
               2533 ;			XREF	ACCS
               2534 ;			XREF	OSWRCH
               2535 ;			XREF	ASC_TO_NUMBER
               2536 ;			XREF	EXTERR
               2537 ;			XREF	EXPRI
               2538 ;			XREF	COMMA
               2539 ;			XREF	XEQ
               2540 ;			XREF	NXT
               2541 ;			XREF	BRAKET
               2542 ;			XREF	CRTONULL
               2543 ;			XREF	NULLTOCR
               2544 ;			XREF	CRLF
               2545 ;			XREF	EXPR_W2
               2546 ;			XREF	INKEY1
               2547 
               2548 ; MODE n: Set video mode
               2549 ;
000C54 DD      2550 MODE_:			PUSH	IX			; Get the system vars in IX
000C55 E5 
               2551 MOSCALL	mos_sysvars		; Reset the semaphore
000C56 3E    0001M1 LD	A, function
000C57 08 
000C58 49    0002M1 RST.LIS	08h
000C59 CF 
000C5A 5B      2552 RES.LIL	4, (IX+sysvar_vpd_pflags)
000C5B DD 
000C5C CB 
000C5D 04 
000C5D A6   
000C5F CD      2553 CALL    EXPRI
000C60 33 
000C61 18 
000C62 D9      2554 EXX
               2555 VDU	16H			; Mode change
000C63 3E    0001M1 LD      A, VAL
000C64 16 
000C65 CD    0002M1 CALL    OSWRCH
000C66 95 
000C67 11 
               2556 VDU	L
000C68 7D    0001M1 LD      A, VAL
000C69 CD    0002M1 CALL    OSWRCH
000C6A 95 
000C6B 11 
               2557 MOSCALL	mos_sysvars
000C6C 3E    0001M1 LD	A, function
000C6D 08 
000C6E 49    0002M1 RST.LIS	08h
000C6F CF 
000C70 5B      2558 @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
000C71 DD 
000C72 CB 
000C73 04 
000C73 66   
000C75 28      2559 JR	Z, @B			; Wait for the result
000C76 F9 
000C77 DD      2560 POP	IX
000C78 E1 
000C79 C3      2561 JP	XEQ
000C7A 99 
000C7B 24 
               2562 
               2563 ; GET(x,y): Get the ASCII code of a character on screen
               2564 ;
000C7C FD      2565 GETSCHR:		INC	IY
000C7D 23 
000C7E CD      2566 CALL    EXPRI      		; Get X coordinate
000C7F 33 
000C80 18 
000C81 D9      2567 EXX
000C82 E5      2568 PUSH	HL			; Stack X
000C83 CD      2569 CALL	COMMA
000C84 A2 
000C85 20 
000C86 CD      2570 CALL	EXPRI			; Get Y coordinate
000C87 33 
000C88 18 
000C89 D9      2571 EXX
000C8A CD      2572 CALL	BRAKET			; Closing bracket
000C8B AE 
000C8C 20 
000C8D D1      2573 POP	DE			; Pop X back into DE
000C8E CD      2574 CALL	GETSCHR_1
000C8F 9A 
000C90 0C 
               2575 ;			JP	INKEY1
000C91 11      2576 LD	DE,ACCS
000C92 00 
000C93 52 
000C94 12      2577 LD	(DE),A
000C95 3E      2578 LD	A,80H
000C96 80 
000C97 D0      2579 RET	NC
000C98 1C      2580 INC	E
000C99 C9      2581 RET
               2582 ;
               2583 ; Fetch a character from the screen
               2584 ; - DE: X coordinate
               2585 ; - HL: Y coordinate
               2586 ; Returns
               2587 ; - A: The character or FFh if no match
               2588 ; - F: C if match, otherwise NC
               2589 ;
000C9A DD      2590 GETSCHR_1:		PUSH	IX			; Get the system vars in IX
000C9B E5 
               2591 MOSCALL	mos_sysvars		; Reset the semaphore
000C9C 3E    0001M1 LD	A, function
000C9D 08 
000C9E 49    0002M1 RST.LIS	08h
000C9F CF 
000CA0 5B      2592 RES.LIL	1, (IX+sysvar_vpd_pflags)
000CA1 DD 
000CA2 CB 
000CA3 04 
000CA3 8E   
               2593 VDU	23
000CA5 3E    0001M1 LD      A, VAL
000CA6 17 
000CA7 CD    0002M1 CALL    OSWRCH
000CA8 95 
000CA9 11 
               2594 VDU	0
000CAA 3E    0001M1 LD      A, VAL
000CAB 00 
000CAC CD    0002M1 CALL    OSWRCH
000CAD 95 
000CAE 11 
               2595 VDU	vdp_scrchar
000CAF 3E    0001M1 LD      A, VAL
000CB0 83 
000CB1 CD    0002M1 CALL    OSWRCH
000CB2 95 
000CB3 11 
               2596 VDU	E
000CB4 7B    0001M1 LD      A, VAL
000CB5 CD    0002M1 CALL    OSWRCH
000CB6 95 
000CB7 11 
               2597 VDU	D
000CB8 7A    0001M1 LD      A, VAL
000CB9 CD    0002M1 CALL    OSWRCH
000CBA 95 
000CBB 11 
               2598 VDU	L
000CBC 7D    0001M1 LD      A, VAL
000CBD CD    0002M1 CALL    OSWRCH
000CBE 95 
000CBF 11 
               2599 VDU	H
000CC0 7C    0001M1 LD      A, VAL
000CC1 CD    0002M1 CALL    OSWRCH
000CC2 95 
000CC3 11 
000CC4 5B      2600 @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
000CC5 DD 
000CC6 CB 
000CC7 04 
000CC7 4E   
000CC9 28      2601 JR	Z, @B			; Wait for the result
000CCA F9 
000CCB 5B      2602 LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
000CCC DD 
000CCD 7E 
000CCE 09 
000CCF B7      2603 OR	A			; Check for 00h
000CD0 37      2604 SCF				; C = character map
000CD1 20      2605 JR	NZ, @F			; We have a character, so skip next bit
000CD2 01 
000CD3 AF      2606 XOR	A			; Clear carry
000CD4 DD      2607 @@:			POP	IX
000CD5 E1 
000CD6 C9      2608 RET
               2609 
               2610 ; POINT(x,y): Get the pixel colour of a point on screen
               2611 ; Parameters:
               2612 ; - DE: X-coordinate
               2613 ; - HL: Y-coordinate
               2614 ; Returns:
               2615 ; -  A: Pixel colour
               2616 ;
000CD7 DD      2617 POINT_:			PUSH	IX			; Get the system vars in IX
000CD8 E5 
               2618 MOSCALL	mos_sysvars		; Reset the semaphore
000CD9 3E    0001M1 LD	A, function
000CDA 08 
000CDB 49    0002M1 RST.LIS	08h
000CDC CF 
000CDD 5B      2619 RES.LIL	2, (IX+sysvar_vpd_pflags)
000CDE DD 
000CDF CB 
000CE0 04 
000CE0 96   
               2620 VDU	23
000CE2 3E    0001M1 LD      A, VAL
000CE3 17 
000CE4 CD    0002M1 CALL    OSWRCH
000CE5 95 
000CE6 11 
               2621 VDU	0
000CE7 3E    0001M1 LD      A, VAL
000CE8 00 
000CE9 CD    0002M1 CALL    OSWRCH
000CEA 95 
000CEB 11 
               2622 VDU	vdp_scrpixel
000CEC 3E    0001M1 LD      A, VAL
000CED 84 
000CEE CD    0002M1 CALL    OSWRCH
000CEF 95 
000CF0 11 
               2623 VDU	E
000CF1 7B    0001M1 LD      A, VAL
000CF2 CD    0002M1 CALL    OSWRCH
000CF3 95 
000CF4 11 
               2624 VDU	D
000CF5 7A    0001M1 LD      A, VAL
000CF6 CD    0002M1 CALL    OSWRCH
000CF7 95 
000CF8 11 
               2625 VDU	L
000CF9 7D    0001M1 LD      A, VAL
000CFA CD    0002M1 CALL    OSWRCH
000CFB 95 
000CFC 11 
               2626 VDU	H
000CFD 7C    0001M1 LD      A, VAL
000CFE CD    0002M1 CALL    OSWRCH
000CFF 95 
000D00 11 
000D01 5B      2627 @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
000D02 DD 
000D03 CB 
000D04 04 
000D04 56   
000D06 28      2628 JR	Z, @B			; Wait for the result
000D07 F9 
               2629 ;
               2630 ; Return the data as a 1 byte index
               2631 ;
000D08 5B      2632 LD.LIL	A, (IX+sysvar_scrpixelIndex)
000D09 DD 
000D0A 7E 
000D0B 16 
000D0C DD      2633 POP	IX
000D0D E1 
000D0E C9      2634 RET
               2635 
               2636 ; COLOUR colour
               2637 ; COLOUR L,P
               2638 ; COLOUR L,R,G,B
               2639 ;
000D0F CD      2640 COLOUR_:		CALL	EXPRI			; The colour / mode
000D10 33 
000D11 18 
000D12 D9      2641 EXX
000D13 7D      2642 LD	A, L
000D14 32      2643 LD	(VDU_BUFFER+0), A	; Store first parameter
000D15 00 
000D16 52 
000D17 CD      2644 CALL	NXT			; Are there any more parameters?
000D18 0B 
000D19 45 
000D1A FE      2645 CP	','
000D1B 2C 
000D1C 28      2646 JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
000D1D 0E 
               2647 ;
               2648 VDU	11h			; Just set the colour
000D1E 3E    0001M1 LD      A, VAL
000D1F 11 
000D20 CD    0002M1 CALL    OSWRCH
000D21 95 
000D22 11 
               2649 VDU	(VDU_BUFFER+0)
000D23 3A    0001M1 LD      A, VAL
000D24 00 
000D25 52 
000D26 CD    0002M1 CALL    OSWRCH
000D27 95 
000D28 11 
000D29 C3      2650 JP	XEQ
000D2A 99 
000D2B 24 
               2651 ;
000D2C CD      2652 COLOUR_1:		CALL	COMMA
000D2D A2 
000D2E 20 
000D2F CD      2653 CALL	EXPRI			; Parse R (OR P)
000D30 33 
000D31 18 
000D32 D9      2654 EXX
000D33 7D      2655 LD	A, L
000D34 32      2656 LD	(VDU_BUFFER+1), A
000D35 01 
000D36 52 
000D37 CD      2657 CALL	NXT			; Are there any more parameters?
000D38 0B 
000D39 45 
000D3A FE      2658 CP	','
000D3B 2C 
000D3C 28      2659 JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
000D3D 23 
               2660 ;
               2661 VDU	13h			; VDU:COLOUR
000D3E 3E    0001M1 LD      A, VAL
000D3F 13 
000D40 CD    0002M1 CALL    OSWRCH
000D41 95 
000D42 11 
               2662 VDU	(VDU_BUFFER+0)		; Logical Colour
000D43 3A    0001M1 LD      A, VAL
000D44 00 
000D45 52 
000D46 CD    0002M1 CALL    OSWRCH
000D47 95 
000D48 11 
               2663 VDU	(VDU_BUFFER+1)		; Palette Colour
000D49 3A    0001M1 LD      A, VAL
000D4A 01 
000D4B 52 
000D4C CD    0002M1 CALL    OSWRCH
000D4D 95 
000D4E 11 
               2664 VDU	0			; RGB set to 0
000D4F 3E    0001M1 LD      A, VAL
000D50 00 
000D51 CD    0002M1 CALL    OSWRCH
000D52 95 
000D53 11 
               2665 VDU	0
000D54 3E    0001M1 LD      A, VAL
000D55 00 
000D56 CD    0002M1 CALL    OSWRCH
000D57 95 
000D58 11 
               2666 VDU	0
000D59 3E    0001M1 LD      A, VAL
000D5A 00 
000D5B CD    0002M1 CALL    OSWRCH
000D5C 95 
000D5D 11 
000D5E C3      2667 JP	XEQ
000D5F 99 
000D60 24 
               2668 ;
000D61 CD      2669 COLOUR_2:		CALL	COMMA
000D62 A2 
000D63 20 
000D64 CD      2670 CALL	EXPRI			; Parse G
000D65 33 
000D66 18 
000D67 D9      2671 EXX
000D68 7D      2672 LD	A, L
000D69 32      2673 LD	(VDU_BUFFER+2), A
000D6A 02 
000D6B 52 
000D6C CD      2674 CALL	COMMA
000D6D A2 
000D6E 20 
000D6F CD      2675 CALL	EXPRI			; Parse B
000D70 33 
000D71 18 
000D72 D9      2676 EXX
000D73 7D      2677 LD	A, L
000D74 32      2678 LD	(VDU_BUFFER+3), A
000D75 03 
000D76 52 
               2679 VDU	13h			; VDU:COLOUR
000D77 3E    0001M1 LD      A, VAL
000D78 13 
000D79 CD    0002M1 CALL    OSWRCH
000D7A 95 
000D7B 11 
               2680 VDU	(VDU_BUFFER+0)		; Logical Colour
000D7C 3A    0001M1 LD      A, VAL
000D7D 00 
000D7E 52 
000D7F CD    0002M1 CALL    OSWRCH
000D80 95 
000D81 11 
               2681 VDU	FFh			; Physical Colour (-1 for RGB mode)
000D82 3E    0001M1 LD      A, VAL
000D83 FF 
000D84 CD    0002M1 CALL    OSWRCH
000D85 95 
000D86 11 
               2682 VDU	(VDU_BUFFER+1)		; R
000D87 3A    0001M1 LD      A, VAL
000D88 01 
000D89 52 
000D8A CD    0002M1 CALL    OSWRCH
000D8B 95 
000D8C 11 
               2683 VDU	(VDU_BUFFER+2)		; G
000D8D 3A    0001M1 LD      A, VAL
000D8E 02 
000D8F 52 
000D90 CD    0002M1 CALL    OSWRCH
000D91 95 
000D92 11 
               2684 VDU	(VDU_BUFFER+3)		; B
000D93 3A    0001M1 LD      A, VAL
000D94 03 
000D95 52 
000D96 CD    0002M1 CALL    OSWRCH
000D97 95 
000D98 11 
000D99 C3      2685 JP	XEQ
000D9A 99 
000D9B 24 
               2686 ; --- End agon_graphics.asm ---
               2687 
               2688 ; --- Begin agon_interrupt.asm ---
               2689 ;
               2690 ; Title:	BBC Basic for AGON - Interrupts
               2691 ; Author:	Dean Belfield
               2692 ; Created:	04/12/2024
               2693 ; Last Updated:	04/12/2024
               2694 ;
               2695 ; Modinfo:
               2696 
               2697 .ASSUME	ADL = 0
               2698 ;	.ORG 0x0000
               2699 
               2700 ; INCLUDE	"macros.inc"
               2701 ; INCLUDE	"equs.inc"
               2702 ; INCLUDE "mos_api.inc"	; In MOS/src
               2703 
               2704 ;			SEGMENT CODE
               2705 
               2706 ;			XDEF	VBLANK_INIT
               2707 ;			XDEF	VBLANK_STOP
               2708 ;			XDEF	VBLANK_HANDLER
               2709 
               2710 ;			XREF	ESCSET
               2711 ;			XREF	KEYDOWN		; In ram.asm
               2712 ;			XREF	KEYASCII 	; In ram.asm
               2713 ;			XREF	KEYCOUNT	; In ram.asm
               2714 
               2715 ; Hook into the MOS VBLANK interrupt
               2716 ;
000D9C F3      2717 VBLANK_INIT:		DI
               2718 
000D9D ED      2719 LD		A, MB 				; Get a 24-bit pointer to
000D9E 6E 
000D9F 21      2720 LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
000DA0 1A 
000DA1 0E 
000DA2 CD      2721 CALL		SET_AHL16 			; address is a 16-bit pointer in BBC BASIC's segment
000DA3 DC 
000DA4 0D 
               2722 
000DA5 1E      2723 LD		E, 32h				; Set up the VBlank Interrupt Vector
000DA6 32 
               2724 MOSCALL		mos_setintvector
000DA7 3E    0001M1 LD	A, function
000DA8 14 
000DA9 49    0002M1 RST.LIS	08h
000DAA CF 
               2725 
000DAB 5B      2726 PUSH.LIL	HL				; HLU: Pointer to the MOS interrupt vector
000DAC E5 
000DAD 5B      2727 POP.LIL		DE 				; DEU: Pointer to the MOS interrupt vector
000DAE D1 
               2728 
000DAF 21      2729 LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DB0 32 
000DB1 0E 
000DB2 ED      2730 LD		A, MB	 			; Get the segment BBC BASIC is running in
000DB3 6E 
000DB4 32      2731 LD		(VBLANK_HANDLER_MB + 1), A 	; Store in the interrupt handler
000DB5 23 
000DB6 0E 
000DB7 CD      2732 CALL		SET_AHL16 			; Convert pointer to an absolute 24-bit address
000DB8 DC 
000DB9 0D 
000DBA 5B      2733 LD.LIL		(HL), DE			; Self-modify the code
000DBB ED 
000DBC 1F 
000DBD FB      2734 EI
000DBE C9      2735 RET
               2736 
               2737 ; Unhook the custom VBLANK interrupt
               2738 ;
000DBF F3      2739 VBLANK_STOP:		DI
000DC0 21      2740 LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DC1 32 
000DC2 0E 
000DC3 3A      2741 LD		A, (VBLANK_HANDLER_MB + 1)	; The stored MB of the segment BBC BASIC is running in
000DC4 23 
000DC5 0E 
000DC6 F5      2742 PUSH		AF 				; Stack the MB for later
000DC7 CD      2743 CALL		SET_AHL16			; Convert pointer to an absolute 24-bit address
000DC8 DC 
000DC9 0D 
000DCA 5B      2744 LD.LIL		DE, (HL)			; DEU: Address of MOS interrupt vector
000DCB ED 
000DCC 17 
000DCD 5B      2745 PUSH.LIL	DE				; Transfer to HL
000DCE D5 
000DCF 5B      2746 POP.LIL		HL
000DD0 E1 
000DD1 1E      2747 LD		E, 32h
000DD2 32 
               2748 MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
000DD3 3E    0001M1 LD	A, function
000DD4 14 
000DD5 49    0002M1 RST.LIS	08h
000DD6 CF 
000DD7 F1      2749 POP		AF 				; Restore MB to this segment
000DD8 ED      2750 LD		MB, A
000DD9 6D 
000DDA FB      2751 EI
000DDB C9      2752 RET
               2753 
               2754 ; Set the MSB of HL (U) to A
               2755 ;
000DDC 5B      2756 SET_AHL16:		PUSH.LIL	HL
000DDD E5 
000DDE 5B      2757 LD.LIL		HL, 2
000DDF 21 
000DE0 02 
000DE1 00 
000DE1 00   
000DE3 5B      2758 ADD.LIL		HL, SP
000DE4 39 
000DE5 5B      2759 LD.LIL		(HL), A
000DE6 77 
000DE7 5B      2760 POP.LIL		HL
000DE8 E1 
000DE9 C9      2761 RET
               2762 
               2763 ; A safe LIS call to ESCSET
               2764 ;
               2765 DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
000DEA 3E    0001M1 LD	A, function
000DEB 08 
000DEC 49    0002M1 RST.LIS	08h
000DED CF 
000DEE 21      2766 LD		HL, KEYCOUNT 			; Check whether the keycount has changed
000DEF 16 
000DF0 51 
000DF1 5B      2767 LD.LIL		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
000DF2 DD 
000DF3 7E 
000DF4 19 
000DF5 BE      2768 CP 		(HL)				; with our local copy
000DF6 20      2769 JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
000DF7 09 
               2770 ;
000DF8 AF      2771 DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
000DF9 32      2772 LD		(KEYASCII), A
000DFA 15 
000DFB 51 
000DFC 32      2773 LD		(KEYDOWN), A
000DFD 14 
000DFE 51 
000DFF 5B      2774 RET.LIL 					; And return
000E00 C9 
               2775 ;
000E01 77      2776 DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
000E02 5B      2777 LD.LIL		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
000E03 DD 
000E04 7E 
000E05 18 
000E06 B7      2778 OR		A
000E07 28      2779 JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
000E08 EF 
               2780 ;
000E09 32      2781 LD		(KEYDOWN), A 			; Store the keydown value
000E0A 14 
000E0B 51 
000E0C 5B      2782 LD.LIL		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
000E0D DD 
000E0E 7E 
000E0F 05 
000E10 32      2783 LD		(KEYASCII), A 			; Store locally
000E11 15 
000E12 51 
000E13 FE      2784 CP		1Bh				; Is it escape?
000E14 1B 
000E15 CC      2785 CALL		Z, ESCSET			; Yes, so set the escape flags
000E16 FA 
000E17 11 
000E18 49      2786 RET.LIS						; Return to the interrupt handler
000E19 C9 
               2787 
               2788 ;
               2789 ; Interrupts in mixed mode always run in ADL mode
               2790 ;
               2791 .ASSUME	ADL = 1
               2792 
000E1A F3      2793 VBLANK_HANDLER:		DI
000E1B F5      2794 PUSH		AF
000E1C E5      2795 PUSH		HL
000E1D DD      2796 PUSH		IX
000E1E E5 
000E1F ED      2797 LD		A, MB
000E20 6E 
000E21 F5      2798 PUSH		AF
000E22 3E      2799 VBLANK_HANDLER_MB:	LD		A, 0				; This is self-modified by VBLANK_INIT
000E23 00 
000E24 ED      2800 LD		MB, A
000E25 6D 
000E26 49      2801 CALL.LIS	DO_KEYBOARD
000E27 CD 
000E28 EA 
000E29 0D 
000E2A F1      2802 POP		AF
000E2B ED      2803 LD		MB, A
000E2C 6D 
000E2D DD      2804 POP		IX
000E2E E1 
000E2F E1      2805 POP		HL
000E30 F1      2806 POP		AF
               2807 ;
               2808 ; Finally jump to the MOS interrupt
               2809 ;
000E31 C3      2810 VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
000E32 00 
000E33 00 
000E34 00 
               2811 ; --- End agon_interrupt.asm ---
               2812 
               2813 ; --- Begin agon_misc.asm ---
               2814 ;
               2815 ; Title:	BBC Basic for AGON - Miscellaneous helper functions
               2816 ; Author:	Dean Belfield
               2817 ; Created:	04/12/2024
               2818 ; Last Updated:	04/12/2024
               2819 ;
               2820 ; Modinfo:
               2821 
               2822 ; INCLUDE	"equs.inc"
               2823 ; INCLUDE	"macros.inc"
               2824 
               2825 .ASSUME	ADL = 0
               2826 ;	.ORG 0x0000
               2827 
               2828 ;			SEGMENT CODE
               2829 
               2830 ;			XDEF	ASC_TO_NUMBER
               2831 ;			XDEF	SWITCH_A
               2832 ;			XDEF	NULLTOCR
               2833 ;			XDEF	CRTONULL
               2834 ;			XDEF	CSTR_FNAME
               2835 ;			XDEF	CSTR_LINE
               2836 ;			XDEF	CSTR_FINDCH
               2837 ;			XDEF	CSTR_ENDSWITH
               2838 ;			XDEF	CSTR_CAT
               2839 
               2840 ;			XREF	OSWRCH
               2841 ;			XREF	KEYWDS
               2842 ;			XREF	KEYWDL
               2843 
               2844 ; Read a number and convert to binary
               2845 ; If prefixed with &, will read as hex, otherwise decimal
               2846 ;   Inputs: HL: Pointer in string buffer
               2847 ;  Outputs: HL: Updated text pointer
               2848 ;           DE: Value
               2849 ;            A: Terminator (spaces skipped)
               2850 ; Destroys: A,D,E,H,L,F
               2851 ;
000E35 C5      2852 ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
000E36 11      2853 LD	DE, 0			; Initialise DE
000E37 00 
000E38 00 
000E39 CD      2854 CALL	SKIPSPmisc			; Skip whitespace
000E3A 79 
000E3B 0E 
000E3C 7E      2855 LD	A, (HL)			; Read first character
000E3D FE      2856 CP	'&'			; Is it prefixed with '&' (HEX number)?
000E3E 26 
000E3F 20      2857 JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
000E40 1E 
000E41 23      2858 INC	HL			; Otherwise fall through to ASC_TO_HEX
               2859 ;
000E42 7E      2860 ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
000E43 CD      2861 CALL    UPPRCmisc			; Convert to uppercase
000E44 87 
000E45 0E 
000E46 D6      2862 SUB	'0'			; Normalise to 0
000E47 30 
000E48 38      2863 JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E49 2E 
000E4A FE      2864 CP 	10			; Check if >= 10
000E4B 0A 
000E4C 38      2865 JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
000E4D 06 
000E4E D6      2866 SUB 	7			; Adjust ASCII A-F to nibble
000E4F 07 
000E50 FE      2867 CP 	16			; Check for > F
000E51 10 
000E52 30      2868 JR 	NC, ASC_TO_NUMBER4	; Return if out of range
000E53 24 
000E54 EB      2869 ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
000E55 29      2870 ADD	HL, HL
000E56 29      2871 ADD	HL, HL
000E57 29      2872 ADD	HL, HL
000E58 29      2873 ADD	HL, HL
000E59 EB      2874 EX	DE, HL
000E5A B3      2875 OR      E			; OR the new digit in to the least significant nibble
000E5B 5F      2876 LD      E, A
000E5C 23      2877 INC     HL			; Onto the next character
000E5D 18      2878 JR      ASC_TO_NUMBER1		; And loop
000E5E E3 
               2879 ;
000E5F 7E      2880 ASC_TO_NUMBER3:		LD	A, (HL)
000E60 D6      2881 SUB	'0'			; Normalise to 0
000E61 30 
000E62 38      2882 JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E63 14 
000E64 FE      2883 CP	10			; Check if >= 10
000E65 0A 
000E66 30      2884 JR	NC, ASC_TO_NUMBER4	; Return if >= 10
000E67 10 
000E68 EB      2885 EX 	DE, HL 			; Stick DE in HL
000E69 44      2886 LD	B, H 			; And copy HL into BC
000E6A 4D      2887 LD	C, L
000E6B 29      2888 ADD	HL, HL 			; x 2
000E6C 29      2889 ADD	HL, HL 			; x 4
000E6D 09      2890 ADD	HL, BC 			; x 5
000E6E 29      2891 ADD	HL, HL 			; x 10
000E6F EB      2892 EX	DE, HL
               2893 ADD8U_DE 			; Add A to DE (macro)
000E70 83    0001M1 ADD     A, E
000E71 5F    0002M1 LD      E, A
000E72 8A    0003M1 ADC     A, D
000E73 93    0004M1 SUB     E
000E74 57    0005M1 LD      D, A
000E75 23      2894 INC	HL
000E76 18      2895 JR	ASC_TO_NUMBER3
000E77 E7 
000E78 C1      2896 ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSP here
               2897 
               2898 ; Skip a space
               2899 ; HL: Pointer in string buffer
               2900 ;
000E79 7E      2901 SKIPSPmisc:			LD      A, (HL)
000E7A FE      2902 CP      ' '
000E7B 20 
000E7C C0      2903 RET     NZ
000E7D 23      2904 INC     HL
000E7E 18      2905 JR      SKIPSPmisc
000E7F F9 
               2906 
               2907 ; Skip a string
               2908 ; HL: Pointer in string buffer
               2909 ;
000E80 7E      2910 SKIPNOTSP:		LD	A, (HL)
000E81 FE      2911 CP	' '
000E82 20 
000E83 C8      2912 RET	Z
000E84 23      2913 INC	HL
000E85 18      2914 JR	SKIPNOTSP
000E86 F9 
               2915 
               2916 ; Convert a character to upper case
               2917 ;  A: Character to convert
               2918 ;
000E87 E6      2919 UPPRCmisc:  		AND     7FH
000E88 7F 
000E89 FE      2920 CP      '`'
000E8A 60 
000E8B D8      2921 RET     C
000E8C E6      2922 AND     5FH			; Convert to upper case
000E8D 5F 
000E8E C9      2923 RET
               2924 
               2925 ; Switch on A - lookup table immediately after call
               2926 ;  A: Index into lookup table
               2927 ;
000E8F E3      2928 SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
000E90 87      2929 ADD	A, A			; Multiply A by two
               2930 ADD8U_HL 			; Add to HL (macro)
000E91 85    0001M1 ADD     A, L
000E92 6F    0002M1 LD      L, A
000E93 8C    0003M1 ADC     A, H
000E94 95    0004M1 SUB     L
000E95 67    0005M1 LD      H, A
000E96 7E      2931 LD	A, (HL)			; follow the call. Fetch an address from the
000E97 23      2932 INC	HL 			; table.
000E98 66      2933 LD	H, (HL)
000E99 6F      2934 LD	L, A
000E9A E3      2935 EX	(SP), HL		; Swap this new address back, restores HL
000E9B C9      2936 RET				; Return program control to this new address
               2937 
               2938 ; Convert the buffer to a null terminated string and back
               2939 ; HL: Buffer address
               2940 ;
000E9C C5      2941 NULLTOCR:		PUSH 	BC
000E9D 06      2942 LD	B, 0
000E9E 00 
000E9F 0E      2943 LD	C, CR
000EA0 0D 
000EA1 18      2944 JR	CRTONULL0
000EA2 05 
               2945 ;
000EA3 C5      2946 CRTONULL:		PUSH	BC
000EA4 06      2947 LD	B, CR
000EA5 0D 
000EA6 0E      2948 LD	C, 0
000EA7 00 
               2949 ;
000EA8 E5      2950 CRTONULL0:		PUSH	HL
000EA9 7E      2951 CRTONULL1:		LD	A, (HL)
000EAA B8      2952 CP 	B
000EAB 28      2953 JR	Z, CRTONULL2
000EAC 03 
000EAD 23      2954 INC	HL
000EAE 18      2955 JR	CRTONULL1
000EAF F9 
000EB0 71      2956 CRTONULL2:		LD	(HL), C
000EB1 E1      2957 POP 	HL
000EB2 C1      2958 POP	BC
000EB3 C9      2959 RET
               2960 
               2961 ; Copy a filename to DE and zero terminate it
               2962 ; HL: Source
               2963 ; DE: Destination (ACCS)
               2964 ;
000EB4 7E      2965 CSTR_FNAME:		LD	A, (HL)			; Get source
000EB5 FE      2966 CP	32			; Is it space
000EB6 20 
000EB7 28      2967 JR	Z, @F
000EB8 09 
000EB9 FE      2968 CP	CR			; Or is it CR
000EBA 0D 
000EBB 28      2969 JR	Z, @F
000EBC 05 
000EBD 12      2970 LD	(DE), A			; No, so store
000EBE 23      2971 INC	HL			; Increment
000EBF 13      2972 INC	DE
000EC0 18      2973 JR	CSTR_FNAME		; And loop
000EC1 F2 
000EC2 AF      2974 @@:			XOR	A			; Zero terminate the target string
000EC3 12      2975 LD	(DE), A
000EC4 13      2976 INC	DE			; And point to next free address
000EC5 C9      2977 RET
               2978 
               2979 ; Copy a CR terminated line to DE and zero terminate it
               2980 ; HL: Source
               2981 ; DE: Destination (ACCS)
               2982 ;
000EC6 7E      2983 CSTR_LINE:		LD	A, (HL)			; Get source
000EC7 FE      2984 CP	CR			; Is it CR
000EC8 0D 
000EC9 28      2985 JR	Z, @F
000ECA 05 
000ECB 12      2986 LD	(DE), A			; No, so store
000ECC 23      2987 INC	HL			; Increment
000ECD 13      2988 INC	DE
000ECE 18      2989 JR	CSTR_LINE		; And loop
000ECF F6 
000ED0 AF      2990 @@:			XOR	A			; Zero terminate the target string
000ED1 12      2991 LD	(DE), A
000ED2 13      2992 INC	DE			; And point to next free address
000ED3 C9      2993 RET
               2994 
               2995 ; Find the first occurrence of a character (case sensitive)
               2996 ; HL: Source
               2997 ;  C: Character to find
               2998 ; Returns:
               2999 ; HL: Pointer to character, or end of string marker
               3000 ;
000ED4 7E      3001 CSTR_FINDCH:		LD	A, (HL)			; Get source
000ED5 B9      3002 CP	C			; Is it our character?
000ED6 C8      3003 RET	Z			; Yes, so exit
000ED7 B7      3004 OR	A			; Is it the end of string?
000ED8 C8      3005 RET	Z			; Yes, so exit
000ED9 23      3006 INC	HL
000EDA 18      3007 JR	CSTR_FINDCH
000EDB F8 
               3008 
               3009 ; Check whether a string ends with another string (case insensitive)
               3010 ; HL: Source
               3011 ; DE: The substring we want to test with
               3012 ; Returns:
               3013 ;  F: Z if HL ends with DE, otherwise NZ
               3014 ;
000EDC 7E      3015 CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
000EDD CD      3016 CALL	UPPRCmisc			; Convert to upper case
000EDE 87 
000EDF 0E 
000EE0 4F      3017 LD	C, A
000EE1 1A      3018 LD	A, (DE)			; Get the substring byte
000EE2 B9      3019 CP	C
000EE3 C0      3020 RET	NZ			; Return NZ if at any point the strings don't match
000EE4 B1      3021 OR	C			; Check whether both bytes are zero
000EE5 C8      3022 RET	Z			; If so, return, as we have reached the end of both strings
000EE6 23      3023 INC	HL
000EE7 13      3024 INC	DE
000EE8 18      3025 JR	CSTR_ENDSWITH		; And loop
000EE9 F2 
               3026 
               3027 ; Concatenate a string onto the end of another string
               3028 ; HL: Source
               3029 ; DE: Second string
               3030 ;
000EEA 7E      3031 CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
000EEB B7      3032 OR	A
000EEC 28      3033 JR	Z, CSTR_CAT_1
000EED 03 
000EEE 23      3034 INC	HL
000EEF 18      3035 JR	CSTR_CAT
000EF0 F9 
               3036 ;
000EF1 1A      3037 CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
000EF2 77      3038 LD	(HL), A
000EF3 B7      3039 OR	A			; Check for end of string
000EF4 C8      3040 RET	Z			; And return
000EF5 23      3041 INC	HL
000EF6 13      3042 INC	DE
000EF7 18      3043 JR	CSTR_CAT_1		; Loop until finished
000EF8 F8 
               3044 ; --- End agon_misc.asm ---
               3045 
               3046 ; --- Begin agon_sound.asm ---
               3047 ;
               3048 ; Title:	BBC Basic for AGON - Audio stuff
               3049 ; Author:	Dean Belfield
               3050 ; Created:	04/12/2024
               3051 ; Last Updated:	11/12/2024
               3052 ;
               3053 ; Modinfo:
               3054 ; 11/12/2024:	Modified SOUND_ to work with OSWORD
               3055 
               3056 .ASSUME	ADL = 0
               3057 ;	.ORG 0x0000
               3058 
               3059 ; INCLUDE	"equs.inc"
               3060 ; INCLUDE "macros.inc"
               3061 ; INCLUDE "mos_api.inc"	; In MOS/src
               3062 
               3063 ;			SEGMENT CODE
               3064 
               3065 ;			XDEF	SOUND_
               3066 
               3067 ;			XREF	OSWRCH
               3068 ;			XREF	VDU_BUFFER
               3069 ;			XREF	LTRAP
               3070 
               3071 ; SOUND channel,volume,pitch,duration
               3072 ; Parameters:
               3073 ; - HL: Pointer to data
               3074 ;   - 0,1: Channel
               3075 ;   - 2,3: Volume 0 (off) to 15 (full volume)
               3076 ;   - 4,5: Pitch 0 - 255
               3077 ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
               3078 ;
000EF9 7E      3079 SOUND_:			LD	A, (HL)			; Channel
000EFA 32      3080 LD	(VDU_BUFFER+0), A
000EFB 00 
000EFC 52 
000EFD AF      3081 XOR	A			; Waveform
000EFE 32      3082 LD	(VDU_BUFFER+1), A
000EFF 01 
000F00 52 
000F01 23      3083 INC	HL
000F02 23      3084 INC	HL
               3085 ;
               3086 ; Calculate the volume
               3087 ;
000F03 4E      3088 LD	C, (HL)			; Volume
000F04 06      3089 LD	B, 6			; C already contains the volume
000F05 06 
000F06 ED      3090 MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
000F07 4C 
000F08 79      3091 LD	A, C
000F09 32      3092 LD	(VDU_BUFFER+2), A
000F0A 02 
000F0B 52 
000F0C 23      3093 INC	HL
000F0D 23      3094 INC	HL
               3095 ;
               3096 ; And the frequency
               3097 ;
000F0E E5      3098 PUSH	HL
000F0F 6E      3099 LD	L, (HL)
000F10 26      3100 LD	H, 0
000F11 00 
000F12 11      3101 LD	DE, SOUND_FREQ_LOOKUP
000F13 84 
000F14 0F 
000F15 29      3102 ADD	HL, HL
000F16 19      3103 ADD	HL, DE
000F17 7E      3104 LD	A, (HL)
000F18 32      3105 LD	(VDU_BUFFER+3), A
000F19 03 
000F1A 52 
000F1B 23      3106 INC	HL
000F1C 7E      3107 LD	A, (HL)
000F1D 32      3108 LD	(VDU_BUFFER+4), A
000F1E 04 
000F1F 52 
000F20 E1      3109 POP	HL
000F21 23      3110 INC	HL
000F22 23      3111 INC	HL
               3112 ;
               3113 ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
               3114 ;
000F23 4E      3115 LD	C, (HL)
000F24 06      3116 LD	B, 50			; C contains the duration, so MLT by 50
000F25 32 
000F26 ED      3117 MLT	BC
000F27 4C 
000F28 ED      3118 LD	(VDU_BUFFER+5), BC
000F29 43 
000F2A 05 
000F2B 52 
               3119 ;
000F2C DD      3120 PUSH	IX			; Get the system vars in IX
000F2D E5 
               3121 MOSCALL	mos_sysvars		; Reset the semaphore
000F2E 3E    0001M1 LD	A, function
000F2F 08 
000F30 49    0002M1 RST.LIS	08h
000F31 CF 
000F32 5B      3122 SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
000F33 DD 
000F34 CB 
000F35 04 
000F35 9E   
               3123 ;
               3124 VDU	23			; Send the sound command
000F37 3E    0001M1 LD      A, VAL
000F38 17 
000F39 CD    0002M1 CALL    OSWRCH
000F3A 95 
000F3B 11 
               3125 VDU	0
000F3C 3E    0001M1 LD      A, VAL
000F3D 00 
000F3E CD    0002M1 CALL    OSWRCH
000F3F 95 
000F40 11 
               3126 VDU	vdp_audio
000F41 3E    0001M1 LD      A, VAL
000F42 85 
000F43 CD    0002M1 CALL    OSWRCH
000F44 95 
000F45 11 
               3127 VDU	(VDU_BUFFER+0)		; 0: Channel
000F46 3A    0001M1 LD      A, VAL
000F47 00 
000F48 52 
000F49 CD    0002M1 CALL    OSWRCH
000F4A 95 
000F4B 11 
               3128 VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
000F4C 3A    0001M1 LD      A, VAL
000F4D 01 
000F4E 52 
000F4F CD    0002M1 CALL    OSWRCH
000F50 95 
000F51 11 
               3129 VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
000F52 3A    0001M1 LD      A, VAL
000F53 02 
000F54 52 
000F55 CD    0002M1 CALL    OSWRCH
000F56 95 
000F57 11 
               3130 VDU	(VDU_BUFFER+3)		; 3: Frequency L
000F58 3A    0001M1 LD      A, VAL
000F59 03 
000F5A 52 
000F5B CD    0002M1 CALL    OSWRCH
000F5C 95 
000F5D 11 
               3131 VDU	(VDU_BUFFER+4)		; 4: Frequency H
000F5E 3A    0001M1 LD      A, VAL
000F5F 04 
000F60 52 
000F61 CD    0002M1 CALL    OSWRCH
000F62 95 
000F63 11 
               3132 VDU	(VDU_BUFFER+5)		; 5: Duration L
000F64 3A    0001M1 LD      A, VAL
000F65 05 
000F66 52 
000F67 CD    0002M1 CALL    OSWRCH
000F68 95 
000F69 11 
               3133 VDU	(VDU_BUFFER+6)		; 6: Duration H
000F6A 3A    0001M1 LD      A, VAL
000F6B 06 
000F6C 52 
000F6D CD    0002M1 CALL    OSWRCH
000F6E 95 
000F6F 11 
               3134 ;
               3135 ; Wait for acknowledgement
               3136 ;
000F70 5B      3137 @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
000F71 DD 
000F72 CB 
000F73 04 
000F73 5E   
000F75 28      3138 JR	Z, @B			; Wait for the result
000F76 F9 
000F77 CD      3139 CALL	LTRAP			; Check for ESC
000F78 1A 
000F79 12 
000F7A 5B      3140 LD.LIL	A, (IX+sysvar_audioSuccess)
000F7B DD 
000F7C 7E 
000F7D 0E 
000F7E A7      3141 AND	A			; Check if VDP has queued the note
000F7F 28      3142 JR	Z, SOUND0		; No, so loop back and send again
000F80 B1 
               3143 ;
000F81 DD      3144 POP	IX
000F82 E1 
000F83 C9      3145 RET
               3146 
               3147 ; Frequency Lookup Table
               3148 ; Set up to replicate the BBC Micro audio frequencies
               3149 ;
               3150 ; Split over 5 complete octaves, with 53 being middle C
               3151 ; * C4: 262hz
               3152 ; + A4: 440hz
               3153 ;
               3154 ;	2	3	4	5	6	7	8
               3155 ;
               3156 ; B	1	49	97	145	193	241
               3157 ; A#	0	45	93	141	189	237
               3158 ; A		41	89+	137	185	233
               3159 ; G#		37	85	133	181	229
               3160 ; G		33	81	129	177	225
               3161 ; F#		29	77	125	173	221
               3162 ; F		25	73	121	169	217
               3163 ; E		21	69	117	165	213
               3164 ; D#		17	65	113	161	209
               3165 ; D		13	61	109	157	205	253
               3166 ; C#		9	57	105	153	201	249
               3167 ; C		5	53*	101	149	197	245
               3168 ;
000F84 75      3169 SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
000F85 00 
000F86 76 
000F87 00 
000F87 78   
000F88 00 
000F89 7A 
000F8A 00 
000F8A 7B   
000F8B 00 
000F8C 83 
000F8D 00 
000F8D 85   
000F8E 00 
000F8F 87 
000F90 00 
000F94 89      3170 DW	 137,  139,  141,  143,  145,  147,  149,  151
000F95 00 
000F96 8B 
000F97 00 
000F97 8D   
000F98 00 
000F99 8F 
000F9A 00 
000F9A 91   
000F9B 00 
000F9C 93 
000F9D 00 
000F9D 95   
000F9E 00 
000F9F 97 
000FA0 00 
000FA4 99      3171 DW	 153,  156,  158,  160,  162,  165,  167,  170
000FA5 00 
000FA6 9C 
000FA7 00 
000FA7 9E   
000FA8 00 
000FA9 A0 
000FAA 00 
000FAA A2   
000FAB 00 
000FAC A5 
000FAD 00 
000FAD A7   
000FAE 00 
000FAF AA 
000FB0 00 
000FB4 AC      3172 DW	 172,  175,  177,  180,  182,  185,  188,  190
000FB5 00 
000FB6 AF 
000FB7 00 
000FB7 B1   
000FB8 00 
000FB9 B4 
000FBA 00 
000FBA B6   
000FBB 00 
000FBC B9 
000FBD 00 
000FBD BC   
000FBE 00 
000FBF BE 
000FC0 00 
000FC4 C1      3173 DW	 193,  196,  199,  202,  205,  208,  211,  214
000FC5 00 
000FC6 C4 
000FC7 00 
000FC7 C7   
000FC8 00 
000FC9 CA 
000FCA 00 
000FCA CD   
000FCB 00 
000FCC D0 
000FCD 00 
000FCD D3   
000FCE 00 
000FCF D6 
000FD0 00 
000FD4 D9      3174 DW	 217,  220,  223,  226,  230,  233,  236,  240
000FD5 00 
000FD6 DC 
000FD7 00 
000FD7 DF   
000FD8 00 
000FD9 E2 
000FDA 00 
000FDA E6   
000FDB 00 
000FDC E9 
000FDD 00 
000FDD EC   
000FDE 00 
000FDF F0 
000FE0 00 
000FE4 F3      3175 DW	 243,  247,  251,  254,  258,  262,  265,  269
000FE5 00 
000FE6 F7 
000FE7 00 
000FE7 FB   
000FE8 00 
000FE9 FE 
000FEA 00 
000FEA 02   
000FEB 01 
000FEC 06 
000FED 01 
000FED 09   
000FEE 01 
000FEF 0D 
000FF0 01 
000FF4 11      3176 DW	 273,  277,  281,  285,  289,  294,  298,  302
000FF5 01 
000FF6 15 
000FF7 01 
000FF7 19   
000FF8 01 
000FF9 1D 
000FFA 01 
000FFA 21   
000FFB 01 
000FFC 26 
000FFD 01 
000FFD 2A   
000FFE 01 
000FFF 2E 
001000 01 
001004 33      3177 DW	 307,  311,  316,  320,  325,  330,  334,  339
001005 01 
001006 37 
001007 01 
001007 3C   
001008 01 
001009 40 
00100A 01 
00100A 45   
00100B 01 
00100C 4A 
00100D 01 
00100D 4E   
00100E 01 
00100F 53 
001010 01 
001014 58      3178 DW	 344,  349,  354,  359,  365,  370,  375,  381
001015 01 
001016 5D 
001017 01 
001017 62   
001018 01 
001019 67 
00101A 01 
00101A 6D   
00101B 01 
00101C 72 
00101D 01 
00101D 77   
00101E 01 
00101F 7D 
001020 01 
001024 82      3179 DW	 386,  392,  398,  403,  409,  415,  421,  427
001025 01 
001026 88 
001027 01 
001027 8E   
001028 01 
001029 93 
00102A 01 
00102A 99   
00102B 01 
00102C 9F 
00102D 01 
00102D A5   
00102E 01 
00102F AB 
001030 01 
001034 B2      3180 DW	 434,  440,  446,  453,  459,  466,  473,  480
001035 01 
001036 B8 
001037 01 
001037 BE   
001038 01 
001039 C5 
00103A 01 
00103A CB   
00103B 01 
00103C D2 
00103D 01 
00103D D9   
00103E 01 
00103F E0 
001040 01 
001044 E7      3181 DW	 487,  494,  501,  508,  516,  523,  531,  539
001045 01 
001046 EE 
001047 01 
001047 F5   
001048 01 
001049 FC 
00104A 01 
00104A 04   
00104B 02 
00104C 0B 
00104D 02 
00104D 13   
00104E 02 
00104F 1B 
001050 02 
001054 22      3182 DW	 546,  554,  562,  571,  579,  587,  596,  605
001055 02 
001056 2A 
001057 02 
001057 32   
001058 02 
001059 3B 
00105A 02 
00105A 43   
00105B 02 
00105C 4B 
00105D 02 
00105D 54   
00105E 02 
00105F 5D 
001060 02 
001064 65      3183 DW	 613,  622,  631,  641,  650,  659,  669,  679
001065 02 
001066 6E 
001067 02 
001067 77   
001068 02 
001069 81 
00106A 02 
00106A 8A   
00106B 02 
00106C 93 
00106D 02 
00106D 9D   
00106E 02 
00106F A7 
001070 02 
001074 B1      3184 DW	 689,  699,  709,  719,  729,  740,  751,  762
001075 02 
001076 BB 
001077 02 
001077 C5   
001078 02 
001079 CF 
00107A 02 
00107A D9   
00107B 02 
00107C E4 
00107D 02 
00107D EF   
00107E 02 
00107F FA 
001080 02 
001084 05      3185 DW	 773,  784,  795,  807,  819,  831,  843,  855
001085 03 
001086 10 
001087 03 
001087 1B   
001088 03 
001089 27 
00108A 03 
00108A 33   
00108B 03 
00108C 3F 
00108D 03 
00108D 4B   
00108E 03 
00108F 57 
001090 03 
001094 63      3186 DW	 867,  880,  893,  906,  919,  932,  946,  960
001095 03 
001096 70 
001097 03 
001097 7D   
001098 03 
001099 8A 
00109A 03 
00109A 97   
00109B 03 
00109C A4 
00109D 03 
00109D B2   
00109E 03 
00109F C0 
0010A0 03 
0010A4 CE      3187 DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
0010A5 03 
0010A6 DC 
0010A7 03 
0010A7 EA   
0010A8 03 
0010A9 F9 
0010AA 03 
0010AA 08   
0010AB 04 
0010AC 17 
0010AD 04 
0010AD 26   
0010AE 04 
0010AF 36 
0010B0 04 
0010B4 45      3188 DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
0010B5 04 
0010B6 55 
0010B7 04 
0010B7 65   
0010B8 04 
0010B9 76 
0010BA 04 
0010BA 86   
0010BB 04 
0010BC 97 
0010BD 04 
0010BD A8   
0010BE 04 
0010BF BA 
0010C0 04 
0010C4 CB      3189 DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
0010C5 04 
0010C6 DD 
0010C7 04 
0010C7 EF   
0010C8 04 
0010C9 02 
0010CA 05 
0010CA 14   
0010CB 05 
0010CC 27 
0010CD 05 
0010CD 3A   
0010CE 05 
0010CF 4E 
0010D0 05 
0010D4 62      3190 DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
0010D5 05 
0010D6 76 
0010D7 05 
0010D7 8A   
0010D8 05 
0010D9 9F 
0010DA 05 
0010DA B3   
0010DB 05 
0010DC C9 
0010DD 05 
0010DD DE   
0010DE 05 
0010DF F4 
0010E0 05 
0010E4 0A      3191 DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
0010E5 06 
0010E6 21 
0010E7 06 
0010E7 38   
0010E8 06 
0010E9 4F 
0010EA 06 
0010EA 66   
0010EB 06 
0010EC 7E 
0010ED 06 
0010ED 96   
0010EE 06 
0010EF AF 
0010F0 06 
0010F4 C8      3192 DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
0010F5 06 
0010F6 E1 
0010F7 06 
0010F7 FA   
0010F8 06 
0010F9 14 
0010FA 07 
0010FA 2F   
0010FB 07 
0010FC 4A 
0010FD 07 
0010FD 65   
0010FE 07 
0010FF 80 
001100 07 
001104 9C      3193 DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
001105 07 
001106 B8 
001107 07 
001107 D5   
001108 07 
001109 F2 
00110A 07 
00110A 10   
00110B 08 
00110C 2D 
00110D 08 
00110D 4B   
00110E 08 
00110F 6A 
001110 08 
001114 8A      3194 DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
001115 08 
001116 A9 
001117 08 
001117 CA   
001118 08 
001119 EA 
00111A 08 
00111A 0C   
00111B 09 
00111C 2D 
00111D 09 
00111D 4F   
00111E 09 
00111F 72 
001120 09 
001124 95      3195 DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
001125 09 
001126 B9 
001127 09 
001127 DD   
001128 09 
001129 02 
00112A 0A 
00112A 27   
00112B 0A 
00112C 4D 
00112D 0A 
00112D 73   
00112E 0A 
00112F 9A 
001130 0A 
001134 C2      3196 DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
001135 0A 
001136 EA 
001137 0A 
001137 12   
001138 0B 
001139 3C 
00113A 0B 
00113A 66   
00113B 0B 
00113C 90 
00113D 0B 
00113D BB   
00113E 0B 
00113F E7 
001140 0B 
001144 13      3197 DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
001145 0C 
001146 40 
001147 0C 
001147 6E   
001148 0C 
001149 9C 
00114A 0C 
00114A CB   
00114B 0C 
00114C FA 
00114D 0C 
00114D 2B   
00114E 0D 
00114F 5C 
001150 0D 
001154 8E      3198 DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
001155 0D 
001156 C0 
001157 0D 
001157 F3   
001158 0D 
001159 27 
00115A 0E 
00115A 5C   
00115B 0E 
00115C 91 
00115D 0E 
00115D C8   
00115E 0E 
00115F FF 
001160 0E 
001164 36      3199 DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
001165 0F 
001166 6F 
001167 0F 
001167 A9   
001168 0F 
001169 E3 
00116A 0F 
00116A 1E   
00116B 10 
00116C 5A 
00116D 10 
00116D 97   
00116E 10 
00116F D5 
001170 10 
001174 13      3200 DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
001175 11 
001176 53 
001177 11 
001177 93   
001178 11 
001179 D5 
00117A 11 
00117A 17   
00117B 12 
00117C 5B 
00117D 12 
00117D 9F   
00117E 12 
00117F E4 
001180 12 
               3201 ; --- End agon_sound.asm ---
               3202 
               3203 ; --- Begin agon_os.asm ---
               3204 ;
               3205 ; Title:	BBC Basic for AGON - MOS stuff
               3206 ; Author:	Dean Belfield
               3207 ; Created:	04/12/2024
               3208 ; Last Updated:	12/12/2024
               3209 ;
               3210 ; Modinfo:
               3211 ; 08/12/2024:	Added OSCLI and file I/O
               3212 ; 11/12/2024:	Added ESC key handling
               3213 ; 		Added OSWORD
               3214 ; 12/12/2024:	Added OSRDCH, OSBYTE_81 and fixed *EDIT
               3215 
               3216 .ASSUME	ADL = 0
               3217 ;			.ORG 0x0000
               3218 
               3219 ; INCLUDE	"equs.inc"
               3220 ; INCLUDE "macros.inc"
               3221 ; INCLUDE "mos_api.inc"	; In MOS/src
               3222 
               3223 ;			SEGMENT CODE
               3224 
               3225 ;			XDEF	OSWORD
               3226 ;			XDEF	OSBYTE
               3227 ;			XDEF	OSINIT
               3228 ;			XDEF	OSOPEN
               3229 ;			XDEF	OSSHUT
               3230 ;			XDEF	OSLOAD
               3231 ;			XDEF	OSSAVE
               3232 ;			XDEF	OSLINE
               3233 ;			XDEF	OSSTAT
               3234 ;			XDEF	OSWRCH
               3235 ;			XDEF	OSRDCH
               3236 ;			XDEF	OSBGET
               3237 ;			XDEF	OSBPUT
               3238 ;			XDEF	OSCLI
               3239 ;			XDEF	PROMPT
               3240 ;			XDEF	GETPTR
               3241 ;			XDEF	PUTPTR
               3242 ;			XDEF	GETEXT
               3243 ;			XDEF	TRAP
               3244 ;			XDEF	LTRAP
               3245 ;			XDEF	BYE
               3246 ;			XDEF	RESET
               3247 ;			XDEF	ESCSET
               3248 
               3249 ;			XREF	EXTERR
               3250 ;			XREF	VBLANK_INIT
               3251 ;			XREF	VBLANK_STOP
               3252 ;			XREF	USER
               3253 ;			XREF	COUNT
               3254 ;			XREF	COUNT0
               3255 ;			XREF	COUNT1
               3256 ;			XREF	GETCSR
               3257 ;			XREF	GETSCHR_1
               3258 ;			XREF	NULLTOCR
               3259 ;			XREF	CRLF
               3260 ;			XREF	FLAGS
               3261 ;			XREF	OSWRCHPT
               3262 ;			XREF	OSWRCHCH
               3263 ;			XREF	OSWRCHFH
               3264 ;			XREF	KEYASCII
               3265 ;			XREF	KEYDOWN
               3266 ;			XREF	LISTON
               3267 ;			XREF	PAGE_
               3268 ;			XREF	CSTR_FNAME
               3269 ;			XREF	CSTR_FINDCH
               3270 ;			XREF	CSTR_CAT
               3271 ;			XREF	CSTR_ENDSWITH
               3272 ;			XREF	CSTR_LINE
               3273 ;			XREF	NEWIT
               3274 ;			XREF	BAD
               3275 ;			XREF	CLEAN
               3276 ;			XREF	LINNUM
               3277 ;			XREF	BUFFER
               3278 ;			XREF	NXT
               3279 ;			XREF	ERROR_
               3280 ;			XREF	XEQ
               3281 ;			XREF	LEXAN2
               3282 ;			XREF	GETTOP
               3283 ;			XREF	FINDL
               3284 ;			XREF	DEL
               3285 ;			XREF	LISTIT
               3286 ;			XREF	ESCAPE
               3287 ;			XREF	ASC_TO_NUMBER
               3288 ;			XREF	CLOOP
               3289 ;			XREF	SCRAP
               3290 ;			XREF	POINT_
               3291 ;			XREF	SOUND_
               3292 
               3293 ;OSINIT - Initialise RAM mapping etc.
               3294 ;If BASIC is entered by BBCBASIC FILENAME then file
               3295 ;FILENAME.BBC is automatically CHAINed.
               3296 ;   Outputs: DE = initial value of HIMEM (top of RAM)
               3297 ;            HL = initial value of PAGE (user program)
               3298 ;            Z-flag reset indicates AUTO-RUN.
               3299 ;  Destroys: A,D,E,H,L,F
               3300 ;
001184 CD      3301 OSINIT:			CALL	VBLANK_INIT
001185 9C 
001186 0D 
001187 AF      3302 XOR	A
001188 32      3303 LD	(FLAGS), A		; Clear flags and set F = Z
001189 0F 
00118A 51 
00118B 21      3304 LD 	HL, USER
00118C 00 
00118D 55 
00118E 11      3305 LD	DE, RAM_Top
00118F 00 
001190 FF 
001191 5F      3306 LD	E, A			; Page boundary
001192 C9      3307 RET
               3308 
               3309 ; PROMPT: output the input prompt
               3310 ;
001193 3E      3311 PROMPT: 		LD	A,'>'			; Falls through to OSWRCH
001194 3E 
               3312 
               3313 ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
               3314 ; Parameters:
               3315 ; - A: Character to write
               3316 ;
001195 E5      3317 OSWRCH:			PUSH	HL
001196 21      3318 LD	HL, LISTON		; Fetch the LISTON variable
001197 FE 
001198 54 
001199 CB      3319 BIT	3, (HL)			; Check whether we are in *EDIT mode
00119A 5E 
00119B 20      3320 JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
00119C 0A 
               3321 ;
00119D 2A      3322 LD	HL, (OSWRCHCH)		; L: Channel #
00119E 12 
00119F 51 
0011A0 2D      3323 DEC	L			; If it is 1
0011A1 28      3324 JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0011A2 17 
               3325 ;
0011A3 E1      3326 POP	HL			; Otherwise
0011A4 49      3327 RST.LIS	10h			; Output the character to MOS
0011A5 D7 
0011A6 C9      3328 RET
               3329 ;
0011A7 2A      3330 OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0011A8 10 
0011A9 51 
0011AA FE      3331 CP	0AH			; Just ignore this
0011AB 0A 
0011AC 28      3332 JR	Z, OSWRCH_BUFFER2
0011AD 0A 
0011AE FE      3333 CP	0DH			; Is it the end of line?
0011AF 0D 
0011B0 20      3334 JR	NZ, OSWRCH_BUFFER1	; No, so carry on
0011B1 01 
0011B2 AF      3335 XOR	A			; Turn it into a NUL character
0011B3 77      3336 OSWRCH_BUFFER1:		LD	(HL), A			; Echo the character into the buffer
0011B4 23      3337 INC	HL			; Increment pointer
0011B5 22      3338 LD	(OSWRCHPT), HL		; Write pointer back
0011B6 10 
0011B7 51 
0011B8 E1      3339 OSWRCH_BUFFER2:		POP	HL
0011B9 C9      3340 RET
               3341 ;
0011BA D5      3342 OSWRCH_FILE:		PUSH	DE
0011BB 5C      3343 LD	E, H			; Filehandle to E
0011BC CD      3344 CALL	OSBPUT			; Write the byte out
0011BD 47 
0011BE 12 
0011BF D1      3345 POP	DE
0011C0 E1      3346 POP	HL
0011C1 C9      3347 RET
               3348 
               3349 ; OSRDCH
               3350 ;
               3351 OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0011C2 3E    0001M1 LD	A, function
0011C3 00 
0011C4 49    0002M1 RST.LIS	08h
0011C5 CF 
0011C6 FE      3352 CP	1Bh
0011C7 1B 
0011C8 28      3353 JR	Z, LTRAP1
0011C9 55 
0011CA C9      3354 RET
               3355 
               3356 ; OSLINE: Invoke the line editor
               3357 ;
0011CB 1E      3358 OSLINE:			LD 	E, 1			; Default is to clear the buffer
0011CC 01 
               3359 
               3360 ; Entry point to line editor that does not clear the buffer
               3361 ; Parameters:
               3362 ; - HL: addresses destination buffer (on page boundary)
               3363 ; Returns:
               3364 ; -  A: 0
               3365 ; NB: Buffer filled, terminated by CR
               3366 ;
0011CD FD      3367 OSLINE1:		PUSH	IY
0011CE E5 
0011CF E5      3368 PUSH	HL			; Buffer address
0011D0 01      3369 LD	BC, 256			; Buffer length
0011D1 00 
0011D2 01 
               3370 MOSCALL	mos_editline		; Call the MOS line editor
0011D3 3E    0001M1 LD	A, function
0011D4 09 
0011D5 49    0002M1 RST.LIS	08h
0011D6 CF 
0011D7 E1      3371 POP	HL			; Pop the address
0011D8 FD      3372 POP	IY
0011D9 E1 
0011DA F5      3373 PUSH	AF			; Stack the return value (key pressed)
0011DB CD      3374 CALL	NULLTOCR		; Turn the 0 character to a CR
0011DC 9C 
0011DD 0E 
0011DE CD      3375 CALL	CRLF			; Display CRLF
0011DF FB 
0011E0 40 
0011E1 F1      3376 POP	AF
0011E2 FE      3377 CP	1Bh 			; Check if ESC terminated the input
0011E3 1B 
0011E4 CA      3378 JP	Z, LTRAP1 		; Yes, so do the ESC thing
0011E5 1F 
0011E6 12 
0011E7 3A      3379 LD	A, (FLAGS)		; Otherwise
0011E8 0F 
0011E9 51 
0011EA CB      3380 RES	7, A 			; Clear the escape flag
0011EB BF 
0011EC 32      3381 LD	(FLAGS), A
0011ED 0F 
0011EE 51 
0011EF CD      3382 CALL	WAIT_VBLANK 		; Wait a frame
0011F0 6F 
0011F1 16 
0011F2 AF      3383 XOR	A			; Return A = 0
0011F3 32      3384 LD	(KEYDOWN), A
0011F4 14 
0011F5 51 
0011F6 32      3385 LD	(KEYASCII), A
0011F7 15 
0011F8 51 
0011F9 C9      3386 RET
               3387 
               3388 ;
               3389 ; ESCSET
               3390 ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
               3391 ;
0011FA E5      3392 ESCSET: 		PUSH    HL
0011FB 21      3393 LD      HL,FLAGS		; Pointer to FLAGS
0011FC 0F 
0011FD 51 
0011FE CB      3394 BIT     6,(HL)			; If bit 6 is set, then
0011FF 76 
001200 20      3395 JR      NZ,ESCDIS		; escape is disabled, so skip
001201 02 
001202 CB      3396 SET     7,(HL)			; Set bit 7, the escape flag
001203 FE 
001204 E1      3397 ESCDIS: 		POP     HL
001205 C9      3398 RET
               3399 
               3400 ;
               3401 ; ESCTEST
               3402 ; Test for ESC key
               3403 ;
001206 CD      3404 ESCTEST:		CALL	READKEY			; Read the keyboard
001207 0F 
001208 12 
001209 C0      3405 RET	NZ			; Skip if no key is pressed
00120A FE      3406 CP	1BH			; If ESC pressed then
00120B 1B 
00120C 28      3407 JR	Z,ESCSET		; jump to the escape set routine
00120D EC 
00120E C9      3408 RET
               3409 
               3410 ; Read the keyboard
               3411 ; Returns:
               3412 ; - A: ASCII of the pressed key
               3413 ; - F: Z if the key is pressed, otherwise NZ
               3414 ;
00120F 3A      3415 READKEY:		LD	A, (KEYDOWN)		; Get key down
001210 14 
001211 51 
001212 3D      3416 DEC	A 			; Set Z flag if keydown is 1
001213 3A      3417 LD	A, (KEYASCII)		; Get key ASCII value
001214 15 
001215 51 
001216 C9      3418 RET
               3419 ;
               3420 ; TRAP
               3421 ; This is called whenever BASIC needs to check for ESC
               3422 ;
001217 CD      3423 TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
001218 06 
001219 12 
               3424 ;
00121A 3A      3425 LTRAP:			LD	A,(FLAGS)		; Get FLAGS
00121B 0F 
00121C 51 
00121D B7      3426 OR	A			; This checks for bit 7; if it is not set then the result will
00121E F0      3427 RET	P			; be positive (bit 7 is the sign bit in Z80), so return
00121F 21      3428 LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
001220 0F 
001221 51 
001222 CB      3429 RES	7,(HL)			; Clear the escape pressed flag and
001223 BE 
001224 C3      3430 JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
001225 E3 
001226 25 
               3431 
               3432 ; RESET
               3433 ;
001227 C9      3434 RESET:			RET				; Yes this is fine
               3435 
               3436 ; OSOPEN
               3437 ; HL: Pointer to path
               3438 ;  F: C Z
               3439 ;     x x OPENIN
               3440 ; 	  OPENOUT
               3441 ;     x	  OPENUP
               3442 ; Returns:
               3443 ;  A: Filehandle, 0 if cannot open
               3444 ;
001228 0E      3445 OSOPEN:			LD	C, fa_read
001229 01 
00122A 28      3446 JR	Z, @F
00122B 06 
00122C 0E      3447 LD	C, fa_write | fa_open_append
00122D 32 
00122E 38      3448 JR	C, @F
00122F 02 
001230 0E      3449 LD	C, fa_write | fa_create_always
001231 0A 
               3450 @@:			MOSCALL	mos_fopen
001232 3E    0001M1 LD	A, function
001233 0A 
001234 49    0002M1 RST.LIS	08h
001235 CF 
001236 C9      3451 RET
               3452 
               3453 ;OSSHUT - Close disk file(s).
               3454 ; E = file channel
               3455 ;  If E=0 all files are closed (except SPOOL)
               3456 ; Destroys: A,B,C,D,E,H,L,F
               3457 ;
001237 C5      3458 OSSHUT:			PUSH	BC
001238 4B      3459 LD	C, E
               3460 MOSCALL	mos_fclose
001239 3E    0001M1 LD	A, function
00123A 0B 
00123B 49    0002M1 RST.LIS	08h
00123C CF 
00123D C1      3461 POP	BC
00123E C9      3462 RET
               3463 
               3464 ; OSBGET - Read a byte from a random disk file.
               3465 ;  E = file channel
               3466 ; Returns
               3467 ;  A = byte read
               3468 ;  Carry set if LAST BYTE of file
               3469 ; Destroys: A,B,C,F
               3470 ;
00123F C5      3471 OSBGET:			PUSH	BC
001240 4B      3472 LD	C, E
               3473 MOSCALL	mos_fgetc
001241 3E    0001M1 LD	A, function
001242 0C 
001243 49    0002M1 RST.LIS	08h
001244 CF 
001245 C1      3474 POP	BC
001246 C9      3475 RET
               3476 
               3477 ; OSBPUT - Write a byte to a random disk file.
               3478 ;  E = file channel
               3479 ;  A = byte to write
               3480 ; Destroys: A,B,C,F
               3481 ;
001247 C5      3482 OSBPUT:			PUSH	BC
001248 4B      3483 LD	C, E
001249 47      3484 LD	B, A
               3485 MOSCALL	mos_fputc
00124A 3E    0001M1 LD	A, function
00124B 0D 
00124C 49    0002M1 RST.LIS	08h
00124D CF 
00124E C1      3486 POP	BC
00124F C9      3487 RET
               3488 
               3489 ; OSSTAT - Read file status
               3490 ;  E = file channel
               3491 ; Returns
               3492 ;  F: Z flag set - EOF
               3493 ;  A: If Z then A = 0
               3494 ; Destroys: A,D,E,H,L,F
               3495 ;
001250 C5      3496 OSSTAT:			PUSH	BC
001251 4B      3497 LD	C, E
               3498 MOSCALL	mos_feof
001252 3E    0001M1 LD	A, function
001253 0E 
001254 49    0002M1 RST.LIS	08h
001255 CF 
001256 C1      3499 POP	BC
001257 FE      3500 CP	1
001258 01 
001259 C9      3501 RET
               3502 
               3503 ; GETPTR - Return file pointer.
               3504 ;    E = file channel
               3505 ; Returns:
               3506 ; DEHL = pointer (0-&7FFFFF)
               3507 ; Destroys: A,B,C,D,E,H,L,F
               3508 ;
00125A FD      3509 GETPTR:			PUSH		IY
00125B E5 
00125C 4B      3510 LD		C, E
               3511 MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
00125D 3E    0001M1 LD	A, function
00125E 19 
00125F 49    0002M1 RST.LIS	08h
001260 CF 
001261 5B      3512 PUSH.LIL	HL
001262 E5 
001263 5B      3513 POP.LIL		IY		; IYU: Pointer to FIL structure
001264 FD 
001265 E1 
001266 5B      3514 LD.LIL		L, (IY + FIL.fptr + 0)
001267 FD 
001268 6E 
001269 11 
00126A 5B      3515 LD.LIL		H, (IY + FIL.fptr + 1)
00126B FD 
00126C 66 
00126D 12 
00126E 5B      3516 LD.LIL		E, (IY + FIL.fptr + 2)
00126F FD 
001270 5E 
001271 13 
001272 5B      3517 LD.LIL		D, (IY + FIL.fptr + 3)
001273 FD 
001274 56 
001275 14 
001276 FD      3518 POP		IY
001277 E1 
001278 C9      3519 RET
               3520 
               3521 ; PUTPTR - Update file pointer.
               3522 ;    A = file channel
               3523 ; DEHL = new pointer (0-&7FFFFF)
               3524 ; Destroys: A,B,C,D,E,H,L,F
               3525 ;
001279 FD      3526 PUTPTR:			PUSH		IY
00127A E5 
00127B 4F      3527 LD		C, A  		; C: Filehandle
00127C 5B      3528 PUSH.LIL	HL
00127D E5 
00127E 5B      3529 LD.LIL		HL, 2
00127F 21 
001280 02 
001281 00 
001281 00   
001283 5B      3530 ADD.LIL		HL, SP
001284 39 
001285 5B      3531 LD.LIL		(HL), E 	; 3rd byte of DWORD set to E
001286 73 
001287 5B      3532 POP.LIL		HL
001288 E1 
001289 5A      3533 LD		E, D  		; 4th byte passed as E
               3534 MOSCALL		mos_flseek
00128A 3E    0001M1 LD	A, function
00128B 1C 
00128C 49    0002M1 RST.LIS	08h
00128D CF 
00128E FD      3535 POP		IY
00128F E1 
001290 C9      3536 RET
               3537 
               3538 ; GETEXT - Find file size.
               3539 ;    E = file channel
               3540 ; Returns:
               3541 ; DEHL = file size (0-&800000)
               3542 ; Destroys: A,B,C,D,E,H,L,F
               3543 ;
001291 FD      3544 GETEXT:			PUSH		IY
001292 E5 
001293 4B      3545 LD		C, E
               3546 MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
001294 3E    0001M1 LD	A, function
001295 19 
001296 49    0002M1 RST.LIS	08h
001297 CF 
001298 5B      3547 PUSH.LIL	HL
001299 E5 
00129A 5B      3548 POP.LIL		IY		; IYU: Pointer to FIL structure
00129B FD 
00129C E1 
00129D 5B      3549 LD.LIL		L, (IY + FIL.obj.objsize + 0)
00129E FD 
00129F 6E 
0012A0 24 
0012A1 5B      3550 LD.LIL		H, (IY + FIL.obj.objsize + 1)
0012A2 FD 
0012A3 66 
0012A4 25 
0012A5 5B      3551 LD.LIL		E, (IY + FIL.obj.objsize + 2)
0012A6 FD 
0012A7 5E 
0012A8 26 
0012A9 5B      3552 LD.LIL		D, (IY + FIL.obj.objsize + 3)
0012AA FD 
0012AB 56 
0012AC 27 
0012AD FD      3553 POP		IY
0012AE E1 
0012AF C9      3554 RET
               3555 
               3556 ;OSLOAD - Load an area of memory from a file.
               3557 ;   Inputs: HL addresses filename (CR terminated)
               3558 ;           DE = address at which to load
               3559 ;           BC = maximum allowed size (bytes)
               3560 ;  Outputs: Carry reset indicates no room for file.
               3561 ; Destroys: A,B,C,D,E,H,L,F
               3562 ;
0012B0 C5      3563 OSLOAD:			PUSH	BC			; Stack the size
0012B1 D5      3564 PUSH	DE			; Stack the load address
0012B2 11      3565 LD	DE, ACCS		; Buffer address for filename
0012B3 00 
0012B4 52 
0012B5 CD      3566 CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0012B6 B4 
0012B7 0E 
0012B8 21      3567 LD	HL, ACCS		; HL: Filename
0012B9 00 
0012BA 52 
0012BB CD      3568 CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0012BC F9 
0012BD 13 
0012BE CD      3569 CALL	EXT_HANDLER		; Get the default handler
0012BF 0A 
0012C0 14 
0012C1 D1      3570 POP	DE			; Restore the load address
0012C2 C1      3571 POP	BC			; Restore the size
0012C3 B7      3572 OR	A
0012C4 CA      3573 JP 	Z, OSLOAD_BBC
0012C5 8B 
0012C6 13 
               3574 ;
               3575 ; Load the file in as a text file
               3576 ;
0012C7 AF      3577 OSLOAD_TXT:		XOR	A			; Set file attributes to read
0012C8 CD      3578 CALL	OSOPEN			; Open the file
0012C9 28 
0012CA 12 
0012CB 5F      3579 LD 	E, A 			; The filehandle
0012CC B7      3580 OR	A
0012CD 3E      3581 LD	A, 4			; File not found error
0012CE 04 
0012CF CA      3582 JP	Z, OSERROR		; Jump to error handler
0012D0 93 
0012D1 13 
0012D2 CD      3583 CALL	NEWIT			; Call NEW to clear the program space
0012D3 3E 
0012D4 40 
               3584 ;
0012D5 21      3585 OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0012D6 00 
0012D7 52 
               3586 ;
               3587 ; First skip any whitespace (indents) at the beginning of the input
               3588 ;
0012D8 CD      3589 @@:			CALL	OSBGET			; Read the byte into A
0012D9 3F 
0012DA 12 
0012DB 38      3590 JR	C, OSLOAD_TXT3		; Is it EOF?
0012DC 1C 
0012DD FE      3591 CP	LF 			; Is it LF?
0012DE 0A 
0012DF 28      3592 JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0012E0 18 
0012E1 FE      3593 CP	21h			; Is it less than or equal to ASCII space?
0012E2 21 
0012E3 38      3594 JR	C, @B 			; Yes, so keep looping
0012E4 F3 
0012E5 77      3595 LD	(HL), A 		; Store the first character
0012E6 2C      3596 INC	L
               3597 ;
               3598 ; Now read the rest of the line in
               3599 ;
0012E7 CD      3600 OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
0012E8 3F 
0012E9 12 
0012EA 38      3601 JR	C, OSLOAD_TXT4		; Is it EOF?
0012EB 26 
0012EC FE      3602 CP	20h			; Skip if not an ASCII character
0012ED 20 
0012EE 38      3603 JR	C, @F
0012EF 05 
0012F0 77      3604 LD	(HL), A 		; Store in the input buffer
0012F1 2C      3605 INC	L			; Increment the buffer pointer
0012F2 CA      3606 JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
0012F3 EF 
0012F4 3E 
0012F5 FE      3607 @@:			CP	LF			; Check for LF
0012F6 0A 
0012F7 20      3608 JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
0012F8 EE 
               3609 ;
               3610 ; Finally, handle EOL/EOF
               3611 ;
0012F9 36      3612 OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
0012FA 0D 
0012FB 7D      3613 LD	A, L			; Check for minimum line length
0012FC FE      3614 CP	2			; If it is 2 characters or less (including CR)
0012FD 02 
0012FE 38      3615 JR	C, @F			; Then don't bother entering it
0012FF 08 
001300 D5      3616 PUSH	DE			; Preserve the filehandle
001301 CD      3617 CALL	OSEDIT			; Enter the line in memory
001302 1D 
001303 13 
001304 DC      3618 CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
001305 1A 
001306 40 
001307 D1      3619 POP	DE
001308 CD      3620 @@:			CALL	OSSTAT			; End of file?
001309 50 
00130A 12 
00130B 20      3621 JR	NZ, OSLOAD_TXT1		; No, so loop
00130C C8 
00130D CD      3622 CALL	OSSHUT			; Close the file
00130E 37 
00130F 12 
001310 37      3623 SCF				; Flag to BASIC that we're good
001311 C9      3624 RET
               3625 ;
               3626 ; Special case for BASIC programs with no blank line at the end
               3627 ;
001312 FE      3628 OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
001313 20 
001314 38      3629 JR	C, @F
001315 05 
001316 77      3630 LD	(HL), A			; Store the character
001317 2C      3631 INC	L
001318 CA      3632 JP	Z, BAD
001319 EF 
00131A 3E 
00131B 18      3633 @@:			JR	OSLOAD_TXT3
00131C DC 
               3634 ;
               3635 ; This bit enters the line into memory
               3636 ; Also called from OSLOAD_TXT
               3637 ; Returns:
               3638 ; F: C if a new line has been entered (CLEAN will need to be called)
               3639 ;
00131D AF      3640 OSEDIT:			XOR	A			; Entry point after *EDIT
00131E 32      3641 LD      (COUNT),A
00131F FB 
001320 54 
001321 FD      3642 LD      IY,ACCS
001322 21 
001323 00 
001324 52 
001325 CD      3643 CALL    LINNUM			; HL: The line number from the input buffer
001326 8A 
001327 43 
001328 CD      3644 CALL    NXT			; Skip spaces
001329 0B 
00132A 45 
00132B 7C      3645 LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
00132C B5      3646 OR      L
00132D 28      3647 JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
00132E 00 
               3648 ;
               3649 ; This bit does the lexical analysis and tokenisation
               3650 ;
00132F 11      3651 LNZERO:			LD	DE,BUFFER
001330 00 
001331 53 
001332 0E      3652 LD	C,1			; LEFT MODE
001333 01 
001334 E5      3653 PUSH	HL
001335 CD      3654 CALL	LEXAN2			; LEXICAL ANALYSIS
001336 18 
001337 44 
001338 E1      3655 POP	HL
001339 12      3656 LD	(DE),A			; TERMINATOR
00133A AF      3657 XOR	A
00133B 47      3658 LD	B,A
00133C 4B      3659 LD	C,E			; BC=LINE LENGTH
00133D 13      3660 INC	DE
00133E 12      3661 LD	(DE),A			; ZERO NEXT
00133F 7C      3662 LD	A,H
001340 B5      3663 OR	L
001341 FD      3664 LD	IY,BUFFER		; FOR XEQ
001342 21 
001343 00 
001344 53 
001345 CA      3665 JP	Z,XEQ			; DIRECT MODE
001346 99 
001347 24 
001348 C5      3666 PUSH	BC
001349 CD      3667 CALL	FINDL
00134A 43 
00134B 41 
00134C CC      3668 CALL	Z,DEL
00134D E9 
00134E 3F 
00134F C1      3669 POP	BC
001350 79      3670 LD	A,C
001351 B7      3671 OR	A
001352 C8      3672 RET	Z
001353 C6      3673 ADD	A,4
001354 04 
001355 4F      3674 LD	C,A			; LENGTH INCLUSIVE
001356 D5      3675 PUSH	DE			; LINE NUMBER
001357 C5      3676 PUSH	BC			; SAVE LINE LENGTH
001358 EB      3677 EX	DE,HL
001359 C5      3678 PUSH	BC
00135A CD      3679 CALL	GETTOP
00135B 25 
00135C 40 
00135D C1      3680 POP	BC
00135E E5      3681 PUSH	HL
00135F 09      3682 ADD	HL,BC
001360 E5      3683 PUSH	HL
001361 24      3684 INC	H
001362 AF      3685 XOR	A
001363 ED      3686 SBC	HL,SP
001364 72 
001365 E1      3687 POP	HL
001366 D2      3688 JP	NC,ERROR_		; "No room"
001367 44 
001368 3F 
001369 E3      3689 EX	(SP),HL
00136A E5      3690 PUSH	HL
00136B 23      3691 INC	HL
00136C B7      3692 OR	A
00136D ED      3693 SBC	HL,DE
00136E 52 
00136F 44      3694 LD	B,H			; BC=AMOUNT TO MOVE
001370 4D      3695 LD	C,L
001371 E1      3696 POP	HL
001372 D1      3697 POP	DE
001373 28      3698 JR	Z,ATENDos
001374 02 
001375 ED      3699 LDDR				; MAKE SPACE
001376 B8 
001377 C1      3700 ATENDos:          	POP	BC			; LINE LENGTH
001378 D1      3701 POP	DE			; LINE NUMBER
001379 23      3702 INC	HL
00137A 71      3703 LD	(HL),C			; STORE LENGTH
00137B 23      3704 INC	HL
00137C 73      3705 LD	(HL),E			; STORE LINE NUMBER
00137D 23      3706 INC	HL
00137E 72      3707 LD	(HL),D
00137F 23      3708 INC	HL
001380 11      3709 LD	DE,BUFFER
001381 00 
001382 53 
001383 EB      3710 EX	DE,HL
001384 0D      3711 DEC	C
001385 0D      3712 DEC	C
001386 0D      3713 DEC	C
001387 ED      3714 LDIR				; ADD LINE
001388 B0 
001389 37      3715 SCF
00138A C9      3716 RET
               3717 ;
               3718 ; Load the file in as a tokenised binary blob
               3719 ;
               3720 OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
00138B 3E    0001M1 LD	A, function
00138C 01 
00138D 49    0002M1 RST.LIS	08h
00138E CF 
00138F D0      3721 RET	NC			; If load returns with carry reset - NO ROOM
001390 B7      3722 OR	A			; If there is no error (A=0)
001391 37      3723 SCF				; Need to set carry indicating there was room
001392 C8      3724 RET	Z			; Return
               3725 ;
001393 F5      3726 OSERROR:		PUSH	AF			; Handle the MOS error
001394 21      3727 LD	HL, ACCS		; Address of the buffer
001395 00 
001396 52 
001397 01      3728 LD	BC, 256			; Length of the buffer
001398 00 
001399 01 
00139A 5F      3729 LD	E, A			; The error code
               3730 MOSCALL	mos_getError		; Copy the error message into the buffer
00139B 3E    0001M1 LD	A, function
00139C 0F 
00139D 49    0002M1 RST.LIS	08h
00139E CF 
00139F F1      3731 POP	AF
0013A0 E5      3732 PUSH	HL			; Stack the address of the error (now in ACCS)
0013A1 C6      3733 ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0013A2 7F 
0013A3 C3      3734 JP	EXTERR			; Trigger an external error
0013A4 55 
0013A5 3F 
               3735 
               3736 ;OSSAVE - Save an area of memory to a file.
               3737 ;   Inputs: HL addresses filename (term CR)
               3738 ;           DE = start address of data to save
               3739 ;           BC = length of data to save (bytes)
               3740 ; Destroys: A,B,C,D,E,H,L,F
               3741 ;
0013A6 C5      3742 OSSAVE:			PUSH	BC			; Stack the size
0013A7 D5      3743 PUSH	DE			; Stack the save address
0013A8 11      3744 LD	DE, ACCS		; Buffer address for filename
0013A9 00 
0013AA 52 
0013AB CD      3745 CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0013AC B4 
0013AD 0E 
0013AE 21      3746 LD	HL, ACCS		; HL: Filename
0013AF 00 
0013B0 52 
0013B1 CD      3747 CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0013B2 F9 
0013B3 13 
0013B4 CD      3748 CALL	EXT_HANDLER		; Get the default handler
0013B5 0A 
0013B6 14 
0013B7 D1      3749 POP	DE			; Restore the save address
0013B8 C1      3750 POP	BC			; Restore the size
0013B9 B7      3751 OR	A			; Is the extension .BBC
0013BA 28      3752 JR	Z, OSSAVE_BBC		; Yes, so use that
0013BB 35 
               3753 ;
               3754 ; Save the file out as a text file
               3755 ;
0013BC 3A      3756 OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0013BD 12 
0013BE 51 
0013BF F5      3757 PUSH	AF
0013C0 AF      3758 XOR	A
0013C1 3C      3759 INC	A			; Make sure C is clear, A is 1, for OPENOUT
0013C2 32      3760 LD	(OSWRCHCH), A
0013C3 12 
0013C4 51 
0013C5 CD      3761 CALL	OSOPEN			; Open the file
0013C6 28 
0013C7 12 
0013C8 32      3762 LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0013C9 13 
0013CA 51 
0013CB DD      3763 LD	IX, LISTON		; Required for LISTIT
0013CC 21 
0013CD FE 
0013CE 54 
0013CF 2A      3764 LD	HL, (PAGE_)		; Get start of program area
0013D0 DC 
0013D1 54 
0013D2 D9      3765 EXX
0013D3 01      3766 LD	BC, 0			; Set the initial indent counters
0013D4 00 
0013D5 00 
0013D6 D9      3767 EXX
0013D7 7E      3768 OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0013D8 B7      3769 OR	A
0013D9 28      3770 JR	Z, OSSAVE_TXT2
0013DA 0A 
0013DB 23      3771 INC	HL			; Skip the length byte
0013DC 5E      3772 LD	E, (HL)			; Get the line number
0013DD 23      3773 INC	HL
0013DE 56      3774 LD	D, (HL)
0013DF 23      3775 INC	HL
0013E0 CD      3776 CALL	LISTIT			; List the line
0013E1 5D 
0013E2 40 
0013E3 18      3777 JR	OSSAVE_TXT1
0013E4 F2 
0013E5 3A      3778 OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
0013E6 13 
0013E7 51 
0013E8 5F      3779 LD	E, A
0013E9 CD      3780 CALL	OSSHUT			; Close it
0013EA 37 
0013EB 12 
0013EC F1      3781 POP	AF			; Restore the channel
0013ED 32      3782 LD	(OSWRCHCH), A
0013EE 12 
0013EF 51 
0013F0 C9      3783 RET
               3784 ;
               3785 ; Save the file out as a tokenised binary blob
               3786 ;
               3787 OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
0013F1 3E    0001M1 LD	A, function
0013F2 02 
0013F3 49    0002M1 RST.LIS	08h
0013F4 CF 
0013F5 B7      3788 OR	A			; If there is no error (A=0)
0013F6 C8      3789 RET	Z			; Just return
0013F7 18      3790 JR	OSERROR			; Trip an error
0013F8 9A 
               3791 
               3792 ; Check if an extension is specified in the filename
               3793 ; Add a default if not specified
               3794 ; HL: Filename (CSTR format)
               3795 ;
0013F9 E5      3796 EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
0013FA 0E      3797 LD	C, '.'			; Search for dot (marks start of extension)
0013FB 2E 
0013FC CD      3798 CALL	CSTR_FINDCH
0013FD D4 
0013FE 0E 
0013FF B7      3799 OR	A			; Check for end of string marker
001400 20      3800 JR	NZ, @F			; No, so skip as we have an extension at this point
001401 06 
001402 11      3801 LD	DE, EXT_LOOKUP		; Get the first (default extension)
001403 36 
001404 14 
001405 CD      3802 CALL	CSTR_CAT		; Concat it to string pointed to by HL
001406 EA 
001407 0E 
001408 E1      3803 @@:			POP	HL			; Restore the filename pointer
001409 C9      3804 RET
               3805 
               3806 ; Check if an extension is valid and, if so, provide a pointer to a handler
               3807 ; HL: Filename (CSTR format)
               3808 ; Returns:
               3809 ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
               3810 ;
00140A E5      3811 EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
00140B 0E      3812 LD	C, '.'			; Find the '.'
00140C 2E 
00140D CD      3813 CALL	CSTR_FINDCH
00140E D4 
00140F 0E 
001410 11      3814 LD	DE, EXT_LOOKUP		; The lookup table
001411 36 
001412 14 
               3815 ;
001413 E5      3816 EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
001414 CD      3817 CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
001415 DC 
001416 0E 
001417 E1      3818 POP	HL			; Restore the pointer to the extension
001418 28      3819 JR	Z, EXT_HANDLER_2	; We have a match!
001419 18 
               3820 ;
00141A 1A      3821 @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
00141B 13      3822 INC	DE
00141C B7      3823 OR	A
00141D 20      3824 JR	NZ, @B
00141E FB 
00141F 13      3825 INC	DE			; Skip the file extension # byte
               3826 ;
001420 1A      3827 LD	A, (DE)			; Are we at the end of the table?
001421 B7      3828 OR	A
001422 20      3829 JR	NZ, EXT_HANDLER_1	; No, so loop
001423 EF 
               3830 ;
001424 3E      3831 LD      A,204			; Throw a "Bad name" error
001425 CC 
001426 CD      3832 CALL    EXTERR
001427 55 
001428 3F 
001429 42      3833 DB    	"Bad name", 0
00142A 61 
00142B 64 
00142C 20 
00142C 6E   
00142D 61 
00142E 6D 
00142F 65 
00142F 00   
               3834 ;
001432 13      3835 EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
001433 1A      3836 LD	A, (DE)
001434 E1      3837 POP	HL			; Restore the filename pointer
001435 C9      3838 RET
               3839 
               3840 ; Extension lookup table
               3841 ; CSTR, TYPE
               3842 ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
               3843 ; 	- 1: Human readable plain text
               3844 ;
001436 2E      3845 EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
001437 42 
001438 42 
001439 43 
001439 00   
00143A 00 
00143C 2E      3846 DB	".TXT", 0, 1
00143D 54 
00143E 58 
00143F 54 
00143F 00   
001440 01 
001442 2E      3847 DB	".ASC", 0, 1
001443 41 
001444 53 
001445 43 
001445 00   
001446 01 
001448 2E      3848 DB	".BAS", 0, 1
001449 42 
00144A 41 
00144B 53 
00144B 00   
00144C 01 
00144E 00      3849 DB	0			; End of table
               3850 
               3851 ; OSWORD
               3852 ;
00144F FE      3853 OSWORD:			CP	07H			; SOUND
001450 07 
               3854 ; JR	Z, OSWORD_07
001451 CA      3855 JP	Z, OSWORD_07 ; JR WAS TOO LARGE
001452 F9 
001453 0E 
001454 FE      3856 CP	08H			; ENVELOPE
001455 08 
001456 28      3857 JR	Z, OSWORD_08
001457 14 
001458 FE      3858 CP	09H			; POINT
001459 09 
00145A 28      3859 JR	Z, OSWORD_09
00145B 03 
00145C C3      3860 JP	HUH			; Anything else trips an error
00145D 91 
00145E 14 
               3861 
               3862 ; SOUND channel,volume,pitch,duration
               3863 ; Parameters:
               3864 ; - HL: Pointer to data
               3865 ;   - 0,1: Channel
               3866 ;   - 2,3: Volume 0 (off) to 15 (full volume)
               3867 ;   - 4,5: Pitch 0 - 255
               3868 ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
               3869 ;
               3870 OSWORD_07:		EQU	SOUND_
               3871 
               3872 ; OSWORD 0x09: POINT
               3873 ; Parameters:
               3874 ; - HL: Address of data
               3875 ;   - 0,1: X coordinate
               3876 ;   - 2,3: Y coordinate
               3877 ;
00145F ED      3878 OSWORD_09:		LD	DE,(SCRAP+0)
001460 5B 
001461 17 
001462 51 
001463 2A      3879 LD	HL,(SCRAP+2)
001464 19 
001465 51 
001466 CD      3880 CALL	POINT_
001467 D7 
001468 0C 
001469 32      3881 LD	(SCRAP+4),A
00146A 1B 
00146B 51 
00146C C9      3882 OSWORD_08:		RET				; Envelope not currently implemented
               3883 
               3884 ;
               3885 ; OSBYTE
               3886 ; Parameters:
               3887 ; - A: FX #
               3888 ; - L: First parameter
               3889 ; - H: Second parameter
               3890 ;
00146D FE      3891 OSBYTE:			CP	0BH			; Keyboard auto-repeat delay
00146E 0B 
00146F 28      3892 JR	Z, OSBYTE_0B
001470 31 
001471 FE      3893 CP	0CH			; Keyboard auto-repeat rate
001472 0C 
001473 28      3894 JR	Z, OSBYTE_0C
001474 54 
001475 FE      3895 CP	13H			; Wait for vblank
001476 13 
001477 28      3896 JR	Z, OSBYTE_13
001478 77 
001479 FE      3897 CP	76H			; Set keyboard LED
00147A 76 
00147B 28      3898 JR	Z, OSBYTE_76
00147C 7B 
00147D FE      3899 CP	81H			; Read the keyboard
00147E 81 
00147F CA      3900 JP	Z, OSBYTE_81
001480 20 
001481 15 
001482 FE      3901 CP	86H			; Get cursor coordinates
001483 86 
001484 CA      3902 JP	Z, OSBYTE_86
001485 3A 
001486 15 
001487 FE      3903 CP	87H			; Fetch current mode and character under cursor
001488 87 
001489 CA      3904 JP	Z, OSBYTE_87
00148A 69 
00148B 15 
00148C FE      3905 CP	A0H			; Fetch system variable
00148D A0 
00148E CA      3906 JP	Z, OSBYTE_A0
00148F 7F 
001490 15 
               3907 ;
               3908 ; Anything else trips an error
               3909 ;
001491 3E      3910 HUH:    		LD      A,254			; Bad command error
001492 FE 
001493 CD      3911 CALL    EXTERR
001494 55 
001495 3F 
001496 42      3912 DB    	"Bad command"
001497 61 
001498 64 
001499 20 
001499 63   
00149A 6F 
00149B 6D 
00149C 6D 
00149C 61   
00149D 6E 
00149E 64 
0014A1 00      3913 DEFB    0
               3914 
               3915 ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
               3916 ; Parameters:
               3917 ; - HL: Repeat delay
               3918 ;
               3919 OSBYTE_0B:		VDU	23
0014A2 3E    0001M1 LD      A, VAL
0014A3 17 
0014A4 CD    0002M1 CALL    OSWRCH
0014A5 95 
0014A6 11 
               3920 VDU	0
0014A7 3E    0001M1 LD      A, VAL
0014A8 00 
0014A9 CD    0002M1 CALL    OSWRCH
0014AA 95 
0014AB 11 
               3921 VDU	vdp_keystate
0014AC 3E    0001M1 LD      A, VAL
0014AD 88 
0014AE CD    0002M1 CALL    OSWRCH
0014AF 95 
0014B0 11 
               3922 VDU	L
0014B1 7D    0001M1 LD      A, VAL
0014B2 CD    0002M1 CALL    OSWRCH
0014B3 95 
0014B4 11 
               3923 VDU	H
0014B5 7C    0001M1 LD      A, VAL
0014B6 CD    0002M1 CALL    OSWRCH
0014B7 95 
0014B8 11 
               3924 VDU	0
0014B9 3E    0001M1 LD      A, VAL
0014BA 00 
0014BB CD    0002M1 CALL    OSWRCH
0014BC 95 
0014BD 11 
               3925 VDU 	0
0014BE 3E    0001M1 LD      A, VAL
0014BF 00 
0014C0 CD    0002M1 CALL    OSWRCH
0014C1 95 
0014C2 11 
               3926 VDU	255
0014C3 3E    0001M1 LD      A, VAL
0014C4 FF 
0014C5 CD    0002M1 CALL    OSWRCH
0014C6 95 
0014C7 11 
0014C8 C9      3927 RET
               3928 
               3929 ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
               3930 ; Parameters:
               3931 ; - HL: Repeat rate
               3932 ;
               3933 OSBYTE_0C:		VDU	23
0014C9 3E    0001M1 LD      A, VAL
0014CA 17 
0014CB CD    0002M1 CALL    OSWRCH
0014CC 95 
0014CD 11 
               3934 VDU	0
0014CE 3E    0001M1 LD      A, VAL
0014CF 00 
0014D0 CD    0002M1 CALL    OSWRCH
0014D1 95 
0014D2 11 
               3935 VDU	vdp_keystate
0014D3 3E    0001M1 LD      A, VAL
0014D4 88 
0014D5 CD    0002M1 CALL    OSWRCH
0014D6 95 
0014D7 11 
               3936 VDU	0
0014D8 3E    0001M1 LD      A, VAL
0014D9 00 
0014DA CD    0002M1 CALL    OSWRCH
0014DB 95 
0014DC 11 
               3937 VDU 	0
0014DD 3E    0001M1 LD      A, VAL
0014DE 00 
0014DF CD    0002M1 CALL    OSWRCH
0014E0 95 
0014E1 11 
               3938 VDU	L
0014E2 7D    0001M1 LD      A, VAL
0014E3 CD    0002M1 CALL    OSWRCH
0014E4 95 
0014E5 11 
               3939 VDU	H
0014E6 7C    0001M1 LD      A, VAL
0014E7 CD    0002M1 CALL    OSWRCH
0014E8 95 
0014E9 11 
               3940 VDU	255
0014EA 3E    0001M1 LD      A, VAL
0014EB FF 
0014EC CD    0002M1 CALL    OSWRCH
0014ED 95 
0014EE 11 
0014EF C9      3941 RET
               3942 
               3943 ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
               3944 ;
0014F0 CD      3945 OSBYTE_13:		CALL	WAIT_VBLANK
0014F1 6F 
0014F2 16 
0014F3 2E      3946 LD	L, 0			; Returns 0
0014F4 00 
0014F5 C3      3947 JP	COUNT0
0014F6 4E 
0014F7 1B 
               3948 ;
               3949 ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
               3950 ; Parameters:
               3951 ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
               3952 ;
               3953 OSBYTE_76:		VDU	23
0014F8 3E    0001M1 LD      A, VAL
0014F9 17 
0014FA CD    0002M1 CALL    OSWRCH
0014FB 95 
0014FC 11 
               3954 VDU	0
0014FD 3E    0001M1 LD      A, VAL
0014FE 00 
0014FF CD    0002M1 CALL    OSWRCH
001500 95 
001501 11 
               3955 VDU	vdp_keystate
001502 3E    0001M1 LD      A, VAL
001503 88 
001504 CD    0002M1 CALL    OSWRCH
001505 95 
001506 11 
               3956 VDU	0
001507 3E    0001M1 LD      A, VAL
001508 00 
001509 CD    0002M1 CALL    OSWRCH
00150A 95 
00150B 11 
               3957 VDU 	0
00150C 3E    0001M1 LD      A, VAL
00150D 00 
00150E CD    0002M1 CALL    OSWRCH
00150F 95 
001510 11 
               3958 VDU	0
001511 3E    0001M1 LD      A, VAL
001512 00 
001513 CD    0002M1 CALL    OSWRCH
001514 95 
001515 11 
               3959 VDU	0
001516 3E    0001M1 LD      A, VAL
001517 00 
001518 CD    0002M1 CALL    OSWRCH
001519 95 
00151A 11 
               3960 VDU	L
00151B 7D    0001M1 LD      A, VAL
00151C CD    0002M1 CALL    OSWRCH
00151D 95 
00151E 11 
00151F C9      3961 RET
               3962 
               3963 ; OSBYTE 0x81: Read the keyboard
               3964 ; Parameters:
               3965 ; - HL = Time to wait (centiseconds)
               3966 ; Returns:
               3967 ; - F: Carry reset indicates time-out
               3968 ; - A: If carry set, A = character typed
               3969 ; Destroys: A,D,E,H,L,F
               3970 ;
001520 CD      3971 OSBYTE_81:		CALL	READKEY			; Read the keyboard
001521 0F 
001522 12 
001523 28      3972 JR	Z, @F 			; Skip if we have a key
001524 09 
001525 7C      3973 LD	A, H 			; Check loop counter
001526 B5      3974 OR 	L
001527 C8      3975 RET 	Z 			; Return, we've not got a key at this point
001528 CD      3976 CALL	WAIT_VBLANK 		; Wait a frame
001529 6F 
00152A 16 
00152B 2B      3977 DEC 	HL			; Decrement
00152C 18      3978 JR	OSBYTE_81		; And loop
00152D F2 
               3979 ;
00152E 21      3980 @@:			LD	HL, KEYDOWN		; We have a key, so
00152F 14 
001530 51 
001531 36      3981 LD	(HL), 0			; clear the keydown flag
001532 00 
001533 FE      3982 CP	1BH			; If we are not pressing ESC,
001534 1B 
001535 37      3983 SCF 				; then flag we've got a character
001536 C0      3984 RET	NZ
001537 C3      3985 JP	ESCSET			; Handle ESC
001538 FA 
001539 11 
               3986 
               3987 ; OSBYTE 0x86: Fetch cursor coordinates
               3988 ; Returns:
               3989 ; - DE: X Coordinate (POS)
               3990 ; - HL: Y Coordinate (VPOS)
               3991 ;
00153A DD      3992 OSBYTE_86:		PUSH	IX			; Get the system vars in IX
00153B E5 
               3993 MOSCALL	mos_sysvars		; Reset the semaphore
00153C 3E    0001M1 LD	A, function
00153D 08 
00153E 49    0002M1 RST.LIS	08h
00153F CF 
001540 5B      3994 RES.LIL	0, (IX+sysvar_vpd_pflags)
001541 DD 
001542 CB 
001543 04 
001543 86   
               3995 VDU	23
001545 3E    0001M1 LD      A, VAL
001546 17 
001547 CD    0002M1 CALL    OSWRCH
001548 95 
001549 11 
               3996 VDU	0
00154A 3E    0001M1 LD      A, VAL
00154B 00 
00154C CD    0002M1 CALL    OSWRCH
00154D 95 
00154E 11 
               3997 VDU	vdp_cursor
00154F 3E    0001M1 LD      A, VAL
001550 82 
001551 CD    0002M1 CALL    OSWRCH
001552 95 
001553 11 
001554 5B      3998 @@:			BIT.LIL	0, (IX+sysvar_vpd_pflags)
001555 DD 
001556 CB 
001557 04 
001557 46   
001559 28      3999 JR	Z, @B			; Wait for the result
00155A F9 
00155B 16      4000 LD 	D, 0
00155C 00 
00155D 62      4001 LD	H, D
00155E 5B      4002 LD.LIL	E, (IX + sysvar_cursorX)
00155F DD 
001560 5E 
001561 07 
001562 5B      4003 LD.LIL	L, (IX + sysvar_cursorY)
001563 DD 
001564 6E 
001565 08 
001566 DD      4004 POP	IX
001567 E1 
001568 C9      4005 RET
               4006 
               4007 ; OSBYTE 0x87: Fetch current mode and character under cursor
               4008 ;
001569 DD      4009 OSBYTE_87:		PUSH	IX
00156A E5 
00156B CD      4010 CALL	GETCSR			; Get the current screen position
00156C 15 
00156D 02 
00156E CD      4011 CALL	GETSCHR_1		; Read character from screen
00156F 9A 
001570 0C 
001571 6F      4012 LD	L, A
               4013 MOSCALL	mos_sysvars
001572 3E    0001M1 LD	A, function
001573 08 
001574 49    0002M1 RST.LIS	08h
001575 CF 
001576 5B      4014 LD.LIL	H, (IX+sysvar_scrMode)	; H: Screen mode
001577 DD 
001578 66 
001579 27 
00157A DD      4015 POP	IX
00157B E1 
00157C C3      4016 JP	COUNT1
00157D 50 
00157E 1B 
               4017 
               4018 ; OSBYTE 0xA0: Fetch system variable
               4019 ; Parameters:
               4020 ; - L: The system variable to fetch
               4021 ;
00157F DD      4022 OSBYTE_A0:		PUSH	IX
001580 E5 
               4023 MOSCALL	mos_sysvars		; Fetch pointer to system variables
001581 3E    0001M1 LD	A, function
001582 08 
001583 49    0002M1 RST.LIS	08h
001584 CF 
001585 5B      4024 LD.LIL	BC, 0
001586 01 
001587 00 
001588 00 
001588 00   
00158A 4D      4025 LD	C, L			; BCU = L
00158B 5B      4026 ADD.LIL	IX, BC			; Add to IX
00158C DD 
00158D 09 
00158E 5B      4027 LD.LIL	L, (IX + 0)		; Fetch the return value
00158F DD 
001590 6E 
001591 00 
001592 DD      4028 POP	IX
001593 E1 
001594 C3      4029 JP 	COUNT0
001595 4E 
001596 1B 
               4030 
               4031 ; OSCLI
               4032 ;
               4033 ;
               4034 ;OSCLI - Process a MOS command
               4035 ;
001597 CD      4036 OSCLI: 			CALL    SKIPSP
001598 F1 
001599 15 
00159A FE      4037 CP      CR
00159B 0D 
00159C C8      4038 RET     Z
00159D FE      4039 CP      '|'
00159E 7C 
00159F C8      4040 RET     Z
0015A0 EB      4041 EX      DE,HL
0015A1 21      4042 LD      HL,COMDS
0015A2 00 
0015A3 16 
0015A4 1A      4043 OSCLI0:			LD      A,(DE)
0015A5 CD      4044 CALL    UPPRC
0015A6 F8 
0015A7 15 
0015A8 BE      4045 CP      (HL)
0015A9 28      4046 JR      Z,OSCLI2
0015AA 0B 
0015AB 38      4047 JR      C,OSCLI6
0015AC 2E 
0015AD CB      4048 OSCLI1:			BIT     7,(HL)
0015AE 7E 
0015AF 23      4049 INC     HL
0015B0 28      4050 JR      Z,OSCLI1
0015B1 FB 
0015B2 23      4051 INC     HL
0015B3 23      4052 INC     HL
0015B4 18      4053 JR      OSCLI0
0015B5 EE 
               4054 ;
0015B6 D5      4055 OSCLI2:			PUSH    DE
0015B7 13      4056 OSCLI3:			INC     DE
0015B8 23      4057 INC     HL
0015B9 1A      4058 LD      A,(DE)
0015BA CD      4059 CALL    UPPRC
0015BB F8 
0015BC 15 
0015BD FE      4060 CP      '.'			; ABBREVIATED?
0015BE 2E 
0015BF 28      4061 JR      Z,OSCLI4
0015C0 0A 
0015C1 AE      4062 XOR     (HL)
0015C2 28      4063 JR      Z,OSCLI3
0015C3 F3 
0015C4 FE      4064 CP      80H
0015C5 80 
0015C6 28      4065 JR      Z,OSCLI4
0015C7 03 
0015C8 D1      4066 POP     DE
0015C9 18      4067 JR      OSCLI1
0015CA E2 
               4068 ;
0015CB F1      4069 OSCLI4:			POP     AF
0015CC 13      4070 INC     DE
0015CD CB      4071 OSCLI5:			BIT     7,(HL)
0015CE 7E 
0015CF 23      4072 INC     HL
0015D0 28      4073 JR      Z,OSCLI5
0015D1 FB 
0015D2 7E      4074 LD      A,(HL)
0015D3 23      4075 INC     HL
0015D4 66      4076 LD      H,(HL)
0015D5 6F      4077 LD      L,A
0015D6 E5      4078 PUSH    HL
0015D7 EB      4079 EX      DE,HL
0015D8 C3      4080 JP      SKIPSP
0015D9 F1 
0015DA 15 
               4081 ;
0015DB EB      4082 OSCLI6:			EX	DE, HL			; HL: Buffer for command
0015DC 11      4083 LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0015DD 00 
0015DE 52 
0015DF D5      4084 PUSH	DE			; Store buffer address
0015E0 CD      4085 CALL	CSTR_LINE		; Fetch the line
0015E1 C6 
0015E2 0E 
0015E3 E1      4086 POP	HL			; HL: Pointer to command string in ACCS
0015E4 FD      4087 PUSH	IY
0015E5 E5 
               4088 MOSCALL	mos_oscli		; Returns OSCLI error in A
0015E6 3E    0001M1 LD	A, function
0015E7 10 
0015E8 49    0002M1 RST.LIS	08h
0015E9 CF 
0015EA FD      4089 POP	IY
0015EB E1 
0015EC B7      4090 OR	A			; 0 means MOS returned OK
0015ED C8      4091 RET	Z			; So don't do anything
0015EE C3      4092 JP 	OSERROR			; Otherwise it's a MOS error
0015EF 93 
0015F0 13 
               4093 
0015F1 7E      4094 SKIPSP:			LD      A,(HL)
0015F2 FE      4095 CP      ' '
0015F3 20 
0015F4 C0      4096 RET     NZ
0015F5 23      4097 INC     HL
0015F6 18      4098 JR      SKIPSP
0015F7 F9 
               4099 
0015F8 E6      4100 UPPRC:  		AND     7FH
0015F9 7F 
0015FA FE      4101 CP      '`'
0015FB 60 
0015FC D8      4102 RET     C
0015FD E6      4103 AND     5FH			; CONVERT TO UPPER CASE
0015FE 5F 
0015FF C9      4104 RET
               4105 
               4106 ; Each command has bit 7 of the last character set, and is followed by the address of the handler
               4107 ; These must be in alphabetical order
               4108 ;
001600 42      4109 COMDS:  		DB	"BY","E"+80h		; BYE
001601 59 
001602 45 
001603 10      4110 DW	BYE
001604 16 
001605 45      4111 DB	"EDI","T"+80h		; EDIT
001606 44 
001607 49 
001608 54 
001609 1B      4112 DW	STAR_EDIT
00160A 16 
00160B 46      4113 DB	"F","X"+80h		; FX
00160C 58 
00160D 57      4114 DW	STAR_FX
00160E 16 
               4115 ;			DB	'VERSIO','N'+80h	; VERSION
               4116 ;			DW	STAR_VERSION
00160F FF      4117 DB	FFh
               4118 
               4119 ; *BYE
               4120 ;
001610 CD      4121 BYE:			CALL	VBLANK_STOP		; Restore MOS interrupts
001611 BF 
001612 0D 
001613 5B      4122 POP.LIL	IX 			; The return address to init
001614 DD 
001615 E1 
001616 21      4123 LD	HL, 0			; The return code
001617 00 
001618 00 
001619 DD      4124 JP	(IX)
00161A E9 
               4125 
               4126 ; *EDIT linenum
               4127 ;
00161B CD      4128 STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
00161C 35 
00161D 0E 
00161E EB      4129 EX	DE, HL			; HL: Line number
00161F CD      4130 CALL	FINDL			; HL: Address in RAM of tokenised line
001620 43 
001621 41 
001622 3E      4131 LD	A, 41			; F:NZ If the line is not found
001623 29 
001624 C2      4132 JP	NZ, ERROR_		; Do error 41: No such line in that case
001625 44 
001626 3F 
               4133 ;
               4134 ; Use LISTIT to output the line to the ACCS buffer
               4135 ;
001627 23      4136 INC	HL			; Skip the length byte
001628 5E      4137 LD	E, (HL)			; Fetch the line number
001629 23      4138 INC	HL
00162A 56      4139 LD	D, (HL)
00162B 23      4140 INC	HL
00162C DD      4141 LD	IX, ACCS		; Pointer to where the copy is to be stored
00162D 21 
00162E 00 
00162F 52 
001630 DD      4142 LD	(OSWRCHPT), IX
001631 22 
001632 10 
001633 51 
001634 DD      4143 LD	IX, LISTON		; Pointer to LISTON variable in RAM
001635 21 
001636 FE 
001637 54 
001638 DD      4144 LD	A, (IX)			; Store that variable
001639 7E 
00163A 00 
00163B F5      4145 PUSH	AF
00163C DD      4146 LD	(IX), 09h		; Set to echo to buffer
00163D 36 
00163E 00 
00163F 09 
001640 CD      4147 CALL	LISTIT
001641 5D 
001642 40 
001643 F1      4148 POP	AF
001644 DD      4149 LD	(IX), A			; Restore the original LISTON variable
001645 77 
001646 00 
001647 21      4150 LD	HL, ACCS		; HL: ACCS
001648 00 
001649 52 
00164A 5D      4151 LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
00164B CD      4152 CALL	OSLINE1			; Invoke the editor
00164C CD 
00164D 11 
00164E CD      4153 CALL	OSEDIT
00164F 1D 
001650 13 
001651 DC      4154 CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
001652 1A 
001653 40 
001654 C3      4155 JP      CLOOP			; Jump back to immediate mode
001655 B0 
001656 37 
               4156 
               4157 ; OSCLI FX n
               4158 ;
001657 CD      4159 STAR_FX:		CALL	ASC_TO_NUMBER
001658 35 
001659 0E 
00165A 4B      4160 LD	C, E			; C: Save FX #
00165B CD      4161 CALL	ASC_TO_NUMBER
00165C 35 
00165D 0E 
00165E 7A      4162 LD	A, D  			; Is first parameter > 255?
00165F B7      4163 OR 	A
001660 28      4164 JR	Z, STAR_FX1		; Yes, so skip next bit
001661 03 
001662 EB      4165 EX	DE, HL 			; Parameter is 16-bit
001663 18      4166 JR	STAR_FX2
001664 06 
               4167 ;
001665 43      4168 STAR_FX1:		LD	B, E 			; B: Save First parameter
001666 CD      4169 CALL	ASC_TO_NUMBER		; Fetch second parameter
001667 35 
001668 0E 
001669 68      4170 LD	L, B 			; L: First parameter
00166A 63      4171 LD	H, E 			; H: Second parameter
               4172 ;
00166B 79      4173 STAR_FX2:		LD	A, C 			; A: FX #
00166C C3      4174 JP	OSBYTE
00166D 6D 
00166E 14 
               4175 
               4176 ; Helper Functions
               4177 ;
00166F DD      4178 WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
001670 E5 
               4179 MOSCALL	mos_sysvars		; Fetch pointer to system variables
001671 3E    0001M1 LD	A, function
001672 08 
001673 49    0002M1 RST.LIS	08h
001674 CF 
001675 5B      4180 LD.LIL	A, (IX + sysvar_time + 0)
001676 DD 
001677 7E 
001678 00 
001679 5B      4181 @@:			CP.LIL 	A, (IX + sysvar_time + 0)
00167A DD 
00167B BE 
00167C 00 
00167D 28      4182 JR	Z, @B
00167E FA 
00167F DD      4183 POP	IX
001680 E1 
001681 C9      4184 RET
               4185 ; --- End agon_os.asm ---
               4186 
               4187 ; --- Begin eval.asm ---
               4188 ;
               4189 ;Automatically created from original source on 2024-12-15 15:29:12
               4190 ;
               4191 .ASSUME ADL = 0
               4192 ;	.ORG 0x0000
               4193 ;                SEGMENT CODE
               4194 ;
               4195 ;                XDEF	COUNT0
               4196 ;                XDEF	COUNT1
               4197 ;
               4198 ;BBC BASIC INTERPRETER - Z80 VERSION
               4199 ;EVALUATE EXPRESSION MODULE - "EVAL"
               4200 ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
               4201 ;
               4202 ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
               4203 ;OF THE BRITISH BROADCASTING CORPORATION AND IS
               4204 ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
               4205 ;
               4206 ;VERSION 2.3, 07-05-1984
               4207 ;VERSION 3.0, 08-03-1987
               4208 ;VERSION 5.0, 31-05-2024
               4209 ;
               4210 ;BINARY FLOATING POINT REPRESENTATION:
               4211 ; 32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
               4212 ; 8 BIT EXCESS-128 SIGNED EXPONENT
               4213 ; SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
               4214 ; MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
               4215 ;
               4216 ;BINARY INTEGER REPRESENTATION:
               4217 ; 32 BIT 2'S-COMPLEMENT SIGNED INTEGER
               4218 ; "EXPONENT" BYTE = 0 (WHEN PRESENT)
               4219 ;
               4220 ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
               4221 ;                            EXPONENT - C
               4222 ;
               4223 ;                XDEF	EXPR
               4224 ;                XDEF	EXPRN
               4225 ;                XDEF	EXPRI
               4226 ;                XDEF	EXPRS
               4227 ;                XDEF	ITEMI
               4228 ;                XDEF	CONS
               4229 ;                XDEF	LOADS
               4230 ;                XDEF	VAL0
               4231 ;                XDEF	SFIX
               4232 ;                XDEF	STR
               4233 ;                XDEF	HEXSTR
               4234 ;                XDEF	LOAD4
               4235 ;                XDEF	LOADN
               4236 ;                XDEF	DLOAD5
               4237 ;                XDEF	TEST
               4238 ;                XDEF	ZERO
               4239 ;                XDEF	COMMA
               4240 ;                XDEF	BRAKET
               4241 ;                XDEF	DECODE
               4242 ;                XDEF	PUSHS
               4243 ;                XDEF	POPS
               4244 ;                XDEF	SEARCH
               4245 ;                XDEF	SCP
               4246 ;                XDEF	LETARR
               4247 ;
               4248 ;                XREF	MUL16
               4249 ;                XREF	ERROR_
               4250 ;                XREF	SYNTAX
               4251 ;                XREF	CHANEL
               4252 ;                XREF	CHNL
               4253 ;                XREF	STOREN
               4254 ;                XREF	STORE4
               4255 ;                XREF	STORE5
               4256 ;                XREF	STACCS
               4257 ;                XREF	CHECK
               4258 ;                XREF	USR
               4259 ;                XREF	VAR_
               4260 ;                XREF	FN
               4261 ;                XREF	XEQ
               4262 ;                XREF	NXT
               4263 ;                XREF	X14OR5
               4264 ;                XREF	MODIFY
               4265 ;                XREF	MODIFS
               4266 ;                XREF	TERMQ
               4267 ;
               4268 ;                XREF	GETVAR
               4269 ;                XREF	LEXAN2
               4270 ;                XREF	RANGE
               4271 ;                XREF	GETTOP
               4272 ;
               4273 ;                XREF	STAVAR
               4274 ;                XREF	PAGE_
               4275 ;                XREF	LOMEM
               4276 ;                XREF	HIMEM
               4277 ;                XREF	RANDOM
               4278 ;                XREF	COUNT
               4279 ;                XREF	LISTON
               4280 ;                XREF	PC
               4281 ;                XREF	ERL
               4282 ;                XREF	ERR
               4283 ;                XREF	ACCS
               4284 ;                XREF	ERRTXT
               4285 ;                XREF	KEYWDS
               4286 ;                XREF	KEYWDL
               4287 ;                XREF	FREE
               4288 ;                XREF	BUFFER
               4289 ;
               4290 ;                XREF	OSRDCH
               4291 ;                XREF	OSOPEN
               4292 ;                XREF	OSBGET
               4293 ;                XREF	OSSTAT
               4294 ;                XREF	GETCSR
               4295 ;                XREF	GETIME
               4296 ;                XREF	GETIMS
               4297 ;                XREF	GETEXT
               4298 ;                XREF	GETPTR
               4299 ;                XREF	OSKEY
               4300 ;
               4301 ;                XREF	POINT
               4302 ;                XREF	ADVAL
               4303 ;                XREF	TINTFN
               4304 ;                XREF	MODEFN
               4305 ;                XREF	WIDFN
               4306 ;
               4307 ;                XREF	FPP
               4308 ;
               4309 FUNTOK:         EQU	8DH		;1st FUNCTION TOKEN
               4310 TMOD:           EQU	83H
               4311 TLEN:           EQU	0A9H
               4312 ; TTO:            EQU	0B8H	; IN main.asm
               4313 ; TDIM:           EQU	0DEH	; IN main.asm
               4314 TEND:           EQU	0E0H
               4315 TMODE:          EQU	0EBH
               4316 TREPORT:        EQU	0F6H
               4317 TWIDTH:         EQU	0FEH
               4318 TTINT:          EQU	0AH
               4319 ; TBY:            EQU	0FH	; IN main.asm
               4320 ;
               4321 ;TABLE OF ADDRESSES FOR FUNCTIONS:
               4322 ;
001682 60      4323 FUNTBL:         DW	DECODE		;Line number
001683 1F 
001684 5B      4324 DW	OPENIN		;OPENIN
001685 1B 
001686 78      4325 DW	PTRev		;PTR
001687 1B 
001688 2D      4326 DW	PAGEVev		;PAGE
001689 1B 
00168A 80      4327 DW	TIMEVev		;TIME
00168B 1B 
00168C 23      4328 DW	LOMEMVev		;LOMEM
00168D 1B 
00168E 28      4329 DW	HIMEMVev		;HIMEM
00168F 1B 
001690 CC      4330 DW	ABSev		;ABS
001691 1B 
001692 08      4331 DW	ACSev		;ACS
001693 1C 
001694 53      4332 DW	ADVAL		;ADVAL
001695 02 
001696 10      4333 DW	ASC		;ASC
001697 1B 
001698 00      4334 DW	ASNev		;ASN
001699 1C 
00169A 04      4335 DW	ATNev		;ATN
00169B 1C 
00169C EC      4336 DW	BGET		;BGET
00169D 1A 
00169E EC      4337 DW	COSev		;COS
00169F 1B 
0016A0 4B      4338 DW	COUNTV		;COUNT
0016A1 1B 
0016A2 D4      4339 DW	DEGev		;DEG
0016A3 1B 
0016A4 41      4340 DW	ERLV		;ERL
0016A5 1B 
0016A6 46      4341 DW	ERRV		;ERR
0016A7 1B 
0016A8 2C      4342 DW	EVAL_		;EVAL_
0016A9 1C 
0016AA F4      4343 DW	EXPev		;EXP
0016AB 1B 
0016AC 70      4344 DW	EXTev		;EXT
0016AD 1B 
0016AE F8      4345 DW	ZERO		;FALSE
0016AF 1F 
0016B0 E3      4346 DW	FN		;FN
0016B1 29 
0016B2 FA      4347 DW	GET		;GET
0016B3 1A 
0016B4 F5      4348 DW	INKEY		;INKEY
0016B5 1A 
0016B6 A5      4349 DW	INSTR		;INSTR(
0016B7 1D 
0016B8 E0      4350 DW	INT_ev		;INT_
0016B9 1B 
0016BA 1D      4351 DW	LEN		;LEN
0016BB 1B 
0016BC F8      4352 DW	LNev		;LN
0016BD 1B 
0016BE FC      4353 DW	LOGev		;LOG
0016BF 1B 
0016C0 D0      4354 DW	CPL_ev		;NOT
0016C1 1B 
0016C2 58      4355 DW	OPENUP		;OPENUP
0016C3 1B 
0016C4 56      4356 DW	OPENOT		;OPENOUT
0016C5 1B 
0016C6 C8      4357 DW	PIev		;PI
0016C7 1B 
0016C8 20      4358 DW	POINT		;POINT(
0016C9 02 
0016CA D5      4359 DW	POS		;POS
0016CB 1A 
0016CC D8      4360 DW	RADev		;RAD
0016CD 1B 
0016CE 59      4361 DW	RND		;RND
0016CF 1C 
0016D0 DC      4362 DW	SGNev		;SGN
0016D1 1B 
0016D2 F0      4363 DW	SINev		;SIN
0016D3 1B 
0016D4 E4      4364 DW	SQRev		;SQR
0016D5 1B 
0016D6 E8      4365 DW	TANev		;TAN
0016D7 1B 
0016D8 32      4366 DW	TOPV		;TO(P)
0016D9 1B 
0016DA BD      4367 DW	TRUEev		;TRUE
0016DB 1B 
0016DC 3F      4368 DW	USR		;USR
0016DD 30 
0016DE 1F      4369 DW	VALev		;VAL
0016DF 1C 
0016E0 DB      4370 DW	VPOS		;VPOS
0016E1 1A 
0016E2 26      4371 DW	CHRS		;CHR$
0016E3 1E 
0016E4 2D      4372 DW	GETS		;GET$
0016E5 1E 
0016E6 8E      4373 DW	INKEYS		;INKEY$
0016E7 1E 
0016E8 CE      4374 DW	LEFTS		;LEFT$(
0016E9 1E 
0016EA 9E      4375 DW	MIDS		;MID$(
0016EB 1E 
0016EC FC      4376 DW	RIGHTS		;RIGHT$(
0016ED 1E 
0016EE B8      4377 DW	STRS		;STR$
0016EF 1F 
0016F0 26      4378 DW	STRING_		;STRING_$(
0016F1 1F 
0016F2 E0      4379 DW	EOF		;EOF
0016F3 1A 
0016F4 E9      4380 DW	SUM		;SUM
0016F5 1C 
               4381 ;
               4382 FUNTBL_END:     EQU	$
               4383 ; TCMD:           EQU	FUNTOK+(FUNTBL_END-FUNTBL)/2
               4384 TCMD:           EQU	FUNTBL_END-FUNTBL/2+FUNTOK
               4385 ;
               4386 ; CR             EQU	0DH
               4387 ; LF             EQU	0AH
               4388 AND_:           EQU	80H
               4389 DIV_:           EQU	81H
               4390 EOR:            EQU	82H
               4391 MOD_:           EQU	83H
               4392 OR_:            EQU	84H
               4393 ;
0016F6 AB      4394 SOPTBL:         DW	SLE		;<= (STRING)
0016F7 1B 
0016F8 B3      4395 DW	SNE		;<>
0016F9 1B 
0016FA A5      4396 DW	SGE		;>=
0016FB 1B 
0016FC 98      4397 DW	SLT		;<
0016FD 1B 
0016FE B9      4398 DW	SEQ		;=
0016FF 1B 
001700 9E      4399 DW	SGT		;>
001701 1B 
               4400 ;
               4401 ;EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
               4402 ; Expression type is returned in A'F':
               4403 ; Numeric - A' bit 7=0, F' sign bit cleared.
               4404 ; String - A' bit 7=1, F' sign bit set.
               4405 ;Floating-point or integer result returned in HLH'L'C
               4406 ; Integer result denoted by C=0 and HLH'L' non-zero.
               4407 ;String result returned in string accumulator, DE set.
               4408 ;
               4409 ;Hierarchy is: (1) Variables, functions,
               4410 ; constants, bracketed expressions.
               4411 ; (2) ^
               4412 ; (3) * / MOD DIV
               4413 ; (4) + -
               4414 ; (5) = <> <= >= > <
               4415 ; (6) AND
               4416 ; (7) EOR OR
               4417 ;
001702 CD      4418 EXPR:           CALL	EXPR1		;GET FIRST OPERAND
001703 17 
001704 17 
001705 FE      4419 EXPR0A:         CP	EOR		;CHECK OPERATOR
001706 82 
001707 28      4420 JR	Z,EXPR0B
001708 03 
001709 FE      4421 CP	OR_
00170A 84 
00170B C0      4422 RET	NZ
00170C CD      4423 EXPR0B:         CALL	SAVEev		;SAVE FIRST OPERAND
00170D 73 
00170E 20 
00170F CD      4424 CALL	EXPR1		;GET SECOND OPERAND
001710 17 
001711 17 
001712 CD      4425 CALL	DOIT		;DO OPERATION
001713 83 
001714 20 
001715 18      4426 JR	EXPR0A		;CONTINUE
001716 EE 
               4427 ;
001717 CD      4428 EXPR1:          CALL	EXPR2
001718 28 
001719 17 
00171A FE      4429 EXPR1A:         CP	AND_
00171B 80 
00171C C0      4430 RET	NZ
00171D CD      4431 CALL	SAVEev
00171E 73 
00171F 20 
001720 CD      4432 CALL	EXPR2
001721 28 
001722 17 
001723 CD      4433 CALL	DOIT
001724 83 
001725 20 
001726 18      4434 JR	EXPR1A
001727 F2 
               4435 ;
001728 CD      4436 EXPR2:          CALL	EXPR3ev
001729 A0 
00172A 17 
00172B CD      4437 CALL	RELOPQ
00172C 6A 
00172D 20 
00172E C0      4438 RET	NZ
00172F 47      4439 LD	B,A
001730 FD      4440 INC	IY		;BUMP OVER OPERATOR
001731 23 
001732 CD      4441 CALL	NXT
001733 0B 
001734 45 
001735 CD      4442 CALL	RELOPQ		;COMPOUND OPERATOR?
001736 6A 
001737 20 
001738 20      4443 JR	NZ,EXPR2B
001739 07 
00173A FD      4444 INC	IY
00173B 23 
00173C B8      4445 CP	B
00173D 28      4446 JR	Z,SHIFT		;SHIFT | ==
00173E 1C 
00173F 80      4447 ADD	A,B
001740 47      4448 LD	B,A
001741 78      4449 EXPR2B:         LD	A,B
001742 08      4450 EX	AF,AF'
001743 FA      4451 JP	M,EXPR2S
001744 73 
001745 17 
001746 08      4452 EX	AF,AF'
001747 D6      4453 SUB	4
001748 04 
001749 FE      4454 CP	'>'-4
00174A 3A 
00174B 20      4455 JR	NZ,EXPR2C
00174C 02 
00174D C6      4456 ADD	A,2
00174E 02 
00174F E6      4457 EXPR2C:         AND	0FH
001750 0F 
001751 CD      4458 EXPR2D:         CALL	SAVE1
001752 77 
001753 20 
001754 CD      4459 CALL	EXPR3ev
001755 A0 
001756 17 
001757 CD      4460 CALL	DOIT		;Must NOT be "JP DOIT"
001758 83 
001759 20 
00175A C9      4461 RET
               4462 ;
00175B FE      4463 SHIFT:          CP	'='
00175C 3D 
00175D 28      4464 JR	Z,EXPR2B	;==
00175E E2 
00175F CD      4465 CALL	NXT
001760 0B 
001761 45 
001762 CD      4466 CALL	RELOPQ
001763 6A 
001764 20 
001765 20      4467 JR	NZ,SHIFT1
001766 07 
001767 B8      4468 CP	B
001768 C2      4469 JP	NZ,SYNTAX
001769 E0 
00176A 25 
00176B FD      4470 INC	IY
00176C 23 
00176D 04      4471 INC	B
00176E 78      4472 SHIFT1:         LD	A,B
00176F D6      4473 SUB	18
001770 12 
001771 18      4474 JR	EXPR2D
001772 DE 
               4475 ;
001773 08      4476 EXPR2S:         EX	AF,AF'
001774 3D      4477 DEC	A
001775 E6      4478 AND	7
001776 07 
001777 CD      4479 CALL	PUSHS		;SAVE STRING ON STACK
001778 19 
001779 20 
00177A F5      4480 PUSH	AF		;SAVE OPERATOR
00177B CD      4481 CALL	EXPR3ev		;SECOND STRING
00177C A0 
00177D 17 
00177E 08      4482 EX	AF,AF'
00177F F2      4483 JP	P,MISMATev
001780 6E 
001781 18 
001782 F1      4484 POP	AF
001783 4B      4485 LD	C,E		;LENGTH OF STRING #2
001784 D1      4486 POP	DE
001785 21      4487 LD	HL,0
001786 00 
001787 00 
001788 39      4488 ADD	HL,SP
001789 43      4489 LD	B,E		;LENGTH OF STRING #1
00178A D5      4490 PUSH	DE
00178B 11      4491 LD	DE,ACCS
00178C 00 
00178D 52 
00178E EB      4492 EX	DE,HL
00178F CD      4493 CALL	DISPT2
001790 BB 
001791 20 
001792 D1      4494 POP	DE
001793 EB      4495 EX	DE,HL
001794 26      4496 LD	H,0
001795 00 
001796 39      4497 ADD	HL,SP
001797 F9      4498 LD	SP,HL
001798 EB      4499 EX	DE,HL
001799 AF      4500 XOR	A		;NUMERIC MARKER
00179A 4F      4501 LD	C,A		;INTEGER MARKER
00179B 08      4502 EX	AF,AF'
00179C FD      4503 LD	A,(IY)
00179D 7E 
00179E 00 
00179F C9      4504 RET
               4505 ;
0017A0 CD      4506 EXPR3ev:          CALL	EXPR4
0017A1 EE 
0017A2 17 
0017A3 FE      4507 EXPR3A:         CP	'-'
0017A4 2D 
0017A5 28      4508 JR	Z,EXPR3B
0017A6 08 
0017A7 FE      4509 CP	'+'
0017A8 2B 
0017A9 C0      4510 RET	NZ
0017AA 08      4511 EX	AF,AF'
0017AB FA      4512 JP	M,EXPR3S
0017AC BA 
0017AD 17 
0017AE 08      4513 EX	AF,AF'
0017AF CD      4514 EXPR3B:         CALL	SAVEev
0017B0 73 
0017B1 20 
0017B2 CD      4515 CALL	EXPR4
0017B3 EE 
0017B4 17 
0017B5 CD      4516 CALL	DOIT
0017B6 83 
0017B7 20 
0017B8 18      4517 JR	EXPR3A
0017B9 E9 
               4518 ;
0017BA 08      4519 EXPR3S:         EX	AF,AF'
0017BB FD      4520 INC	IY		;BUMP PAST '+'
0017BC 23 
0017BD CD      4521 CALL	PUSHS		;SAVE STRING ON STACK
0017BE 19 
0017BF 20 
0017C0 CD      4522 CALL	EXPR4		;SECOND STRING
0017C1 EE 
0017C2 17 
0017C3 08      4523 EX	AF,AF'
0017C4 F2      4524 JP	P,MISMATev
0017C5 6E 
0017C6 18 
0017C7 4B      4525 LD	C,E		;C=LENGTH
0017C8 D1      4526 POP	DE
0017C9 D5      4527 PUSH	DE
0017CA 21      4528 LD	HL,ACCS
0017CB 00 
0017CC 52 
0017CD 54      4529 LD	D,H
0017CE 79      4530 LD	A,C
0017CF B7      4531 OR	A
0017D0 28      4532 JR	Z,EXP3S3
0017D1 0E 
0017D2 45      4533 LD	B,L
0017D3 6F      4534 LD	L,A		;SOURCE
0017D4 83      4535 ADD	A,E
0017D5 5F      4536 LD	E,A		;DESTINATION
0017D6 3E      4537 LD	A,19
0017D7 13 
0017D8 38      4538 JR	C,ERROR2ev	;"String too long"
0017D9 6B 
0017DA D5      4539 PUSH	DE
0017DB 1D      4540 DEC	E
0017DC 2D      4541 DEC	L
0017DD ED      4542 LDDR			;COPY
0017DE B8 
0017DF D1      4543 POP	DE
0017E0 D9      4544 EXP3S3:         EXX
0017E1 C1      4545 POP	BC
0017E2 CD      4546 CALL	POPS		;RESTORE FROM STACK
0017E3 37 
0017E4 20 
0017E5 D9      4547 EXX
0017E6 F6      4548 OR	80H		;FLAG STRING
0017E7 80 
0017E8 08      4549 EX	AF,AF'
0017E9 FD      4550 LD	A,(IY)
0017EA 7E 
0017EB 00 
0017EC 18      4551 JR	EXPR3A
0017ED B5 
               4552 ;
0017EE CD      4553 EXPR4:          CALL	EXPR5
0017EF 14 
0017F0 18 
0017F1 FE      4554 EXPR4A:         CP	'*'
0017F2 2A 
0017F3 28      4555 JR	Z,EXPR4B
0017F4 0B 
0017F5 FE      4556 CP	'/'
0017F6 2F 
0017F7 28      4557 JR	Z,EXPR4B
0017F8 07 
0017F9 FE      4558 CP	MOD_
0017FA 83 
0017FB 28      4559 JR	Z,EXPR4B
0017FC 03 
0017FD FE      4560 CP	DIV_
0017FE 81 
0017FF C0      4561 RET	NZ
001800 CD      4562 EXPR4B:         CALL	SAVEev
001801 73 
001802 20 
001803 CD      4563 CALL	EXPR5
001804 14 
001805 18 
001806 CD      4564 CALL	DOIT
001807 83 
001808 20 
001809 18      4565 JR	EXPR4A
00180A E6 
               4566 ;
00180B 7B      4567 EXPR45:         LD	A,E
00180C FE      4568 CP	'+'
00180D 2B 
00180E 28      4569 JR	Z,EXPR4
00180F DE 
001810 FE      4570 CP	'-'
001811 2D 
001812 28      4571 JR	Z,EXPR4
001813 DA 
001814 CD      4572 EXPR5:          CALL	ITEM
001815 D0 
001816 18 
001817 B7      4573 OR	A		;TEST TYPE
001818 08      4574 EX	AF,AF'		;SAVE TYPE
001819 CD      4575 EXPR5A:         CALL	NXT
00181A 0B 
00181B 45 
00181C FE      4576 CP	'^'
00181D 5E 
00181E C0      4577 RET	NZ
00181F CD      4578 CALL	SAVEev
001820 73 
001821 20 
001822 CD      4579 CALL	ITEM
001823 D0 
001824 18 
001825 B7      4580 OR	A
001826 08      4581 EX	AF,AF'
001827 CD      4582 CALL	DOIT
001828 83 
001829 20 
00182A 18      4583 JR	EXPR5A
00182B ED 
               4584 ;
00182C CD      4585 EXPRN:          CALL	EXPR
00182D 02 
00182E 17 
00182F 08      4586 EX	AF,AF'
001830 F0      4587 RET	P
001831 18      4588 JR	MISMATev
001832 3B 
               4589 ;
001833 CD      4590 EXPRI:          CALL	EXPR
001834 02 
001835 17 
001836 08      4591 EX	AF,AF'
001837 F2      4592 JP	P,SFIX
001838 17 
001839 1C 
00183A 18      4593 JR	MISMATev
00183B 32 
               4594 ;
00183C CD      4595 EXPRS:          CALL	EXPR
00183D 02 
00183E 17 
00183F 08      4596 EX	AF,AF'
001840 F8      4597 RET	M
001841 18      4598 JR	MISMATev
001842 2B 
               4599 ;
001843 3E      4600 BADHEX:         LD	A,28
001844 1C 
001845 C3      4601 ERROR2ev:         JP	ERROR_		;"Bad HEX or binary"
001846 44 
001847 3F 
               4602 ;
001848 D9      4603 NEGATEev:         EXX
001849 7C      4604 LD	A,H
00184A 2F      4605 CPL
00184B 67      4606 LD	H,A
00184C 7D      4607 LD	A,L
00184D 2F      4608 CPL
00184E 6F      4609 LD	L,A
00184F D9      4610 EXX
001850 7C      4611 LD	A,H
001851 2F      4612 CPL
001852 67      4613 LD	H,A
001853 7D      4614 LD	A,L
001854 2F      4615 CPL
001855 6F      4616 LD	L,A
001856 D9      4617 ADD1ev:           EXX
001857 23      4618 INC	HL
001858 7C      4619 LD	A,H
001859 B5      4620 OR	L
00185A D9      4621 EXX
00185B 3E      4622 LD	A,0		;NUMERIC MARKER
00185C 00 
00185D C0      4623 RET	NZ
00185E 23      4624 INC	HL
00185F C9      4625 RET
               4626 ;
001860 CD      4627 ITEMI:          CALL	ITEM
001861 D0 
001862 18 
001863 B7      4628 OR	A
001864 F2      4629 JP	P,SFIX
001865 17 
001866 1C 
001867 18      4630 JR	MISMATev
001868 05 
               4631 ;
001869 CD      4632 ITEMS:          CALL	ITEM
00186A D0 
00186B 18 
00186C B7      4633 OR	A
00186D F8      4634 RET	M
00186E 3E      4635 MISMATev:         LD	A,6
00186F 06 
001870 18      4636 JR	ERROR2ev		;"Type mismatch"
001871 D3 
               4637 ;
001872 CD      4638 ITEM1:          CALL	EXPR		;BRACKETED EXPR
001873 02 
001874 17 
001875 CD      4639 CALL	BRAKET
001876 AE 
001877 20 
001878 08      4640 EX	AF,AF'
001879 C9      4641 RET
               4642 ;
00187A CD      4643 ITEMN:          CALL	ITEM
00187B D0 
00187C 18 
00187D B7      4644 OR	A
00187E F0      4645 RET	P
00187F 18      4646 JR	MISMATev
001880 ED 
               4647 ;
               4648 ;HEX - Get hexadecimal constant.
               4649 ;   Inputs: ASCII string at (IY)
               4650 ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
               4651 ;           IY updated (points to delimiter)
               4652 ;
001881 CD      4653 HEXev:            CALL	ZERO
001882 F8 
001883 1F 
001884 CD      4654 CALL	HEXDIG
001885 57 
001886 20 
001887 38      4655 JR	C,BADHEX
001888 BA 
001889 FD      4656 HEX1:           INC	IY
00188A 23 
00188B E6      4657 AND	0FH
00188C 0F 
00188D 06      4658 LD	B,4
00188E 04 
00188F D9      4659 HEX2:           EXX
001890 29      4660 ADD	HL,HL
001891 D9      4661 EXX
001892 ED      4662 ADC	HL,HL
001893 6A 
001894 10      4663 DJNZ	HEX2
001895 F9 
001896 D9      4664 EXX
001897 B5      4665 OR	L
001898 6F      4666 LD	L,A
001899 D9      4667 EXX
00189A CD      4668 CALL	HEXDIG
00189B 57 
00189C 20 
00189D 30      4669 JR	NC,HEX1
00189E EA 
00189F AF      4670 XOR	A
0018A0 C9      4671 RET
               4672 ;
               4673 ;BIN - Get binary constant.
               4674 ;   Inputs: ASCII string at (IY)
               4675 ;  Outputs: Integer result in H'L'HL, C=0, A=0.
               4676 ;           IY updated (points to delimiter)
               4677 ;
0018A1 CD      4678 BIN:            CALL	ZERO
0018A2 F8 
0018A3 1F 
0018A4 CD      4679 CALL	BINDIG
0018A5 4A 
0018A6 20 
0018A7 38      4680 JR	C,BADHEX
0018A8 9A 
0018A9 FD      4681 BIN1:           INC	IY
0018AA 23 
0018AB CB      4682 RR	A
0018AC 1F 
0018AD D9      4683 EXX
0018AE ED      4684 ADC	HL,HL
0018AF 6A 
0018B0 D9      4685 EXX
0018B1 ED      4686 ADC	HL,HL
0018B2 6A 
0018B3 CD      4687 CALL	BINDIG
0018B4 4A 
0018B5 20 
0018B6 30      4688 JR	NC,BIN1
0018B7 F1 
0018B8 AF      4689 XOR	A
0018B9 C9      4690 RET
               4691 ;
               4692 ;MINUS - Unary minus.
               4693 ;   Inputs: IY = text pointer
               4694 ;  Outputs: Numeric result, same type as argument.
               4695 ;           Result in H'L'HLC
               4696 ;
0018BA CD      4697 MINUS:          CALL	ITEMN
0018BB 7A 
0018BC 18 
0018BD 0D      4698 MINUS0:         DEC	C
0018BE 0C      4699 INC	C
0018BF 28      4700 JR	Z,NEGATEev	;ZERO/INTEGER
0018C0 87 
0018C1 7C      4701 LD	A,H
0018C2 EE      4702 XOR	80H		;CHANGE SIGN (FP)
0018C3 80 
0018C4 67      4703 LD	H,A
0018C5 AF      4704 XOR	A		;NUMERIC MARKER
0018C6 C9      4705 RET
               4706 ;
0018C7 CD      4707 ADDROF:         CALL	VAR_
0018C8 D6 
0018C9 25 
0018CA E5      4708 PUSH	HL
0018CB D9      4709 EXX
0018CC E1      4710 POP	HL
0018CD C3      4711 JP	COUNT1
0018CE 50 
0018CF 1B 
               4712 ;
               4713 ;ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
               4714 ;Item type is returned in A: Bit 7=0 numeric.
               4715 ; Bit 7=1 string.
               4716 ;Numeric item returned in HLH'L'C.
               4717 ;String item returned in string accumulator,
               4718 ; DE addresses byte after last (E=length).
               4719 ;
0018D0 CD      4720 ITEM:           CALL	CHECK
0018D1 86 
0018D2 32 
0018D3 CD      4721 CALL	NXT
0018D4 0B 
0018D5 45 
0018D6 FD      4722 INC	IY
0018D7 23 
0018D8 FE      4723 CP	FUNTOK
0018D9 8D 
0018DA 38      4724 JR	C,ITEM0
0018DB 08 
0018DC FE      4725 CP	TCMD
0018DD C7 
0018DE DA      4726 JP	C,DISPATev	;FUNCTIONS
0018DF C1 
0018E0 20 
0018E1 C3      4727 JP	EXTRASev		;DIM, END, MODE, REPORT$, WIDTH
0018E2 30 
0018E3 1A 
               4728 ;
0018E4 FE      4729 ITEM0:          CP	':'
0018E5 3A 
0018E6 30      4730 JR	NC,ITEM2	;VARIABLES
0018E7 25 
0018E8 FE      4731 CP	'0'
0018E9 30 
0018EA 30      4732 JR	NC,CONev		;NUMERIC CONSTANT
0018EB 7B 
0018EC FE      4733 CP	'('
0018ED 28 
0018EE 28      4734 JR	Z,ITEM1		;EXPRESSION
0018EF 82 
0018F0 FE      4735 CP	'-'
0018F1 2D 
0018F2 28      4736 JR	Z,MINUS		;UNARY MINUS
0018F3 C6 
0018F4 FE      4737 CP	'+'
0018F5 2B 
0018F6 28      4738 JR	Z,ITEMN		;UNARY PLUS
0018F7 82 
0018F8 FE      4739 CP	'.'
0018F9 2E 
0018FA 28      4740 JR	Z,CONev		;NUMERIC CONSTANT
0018FB 6B 
0018FC FE      4741 CP	'&'
0018FD 26 
0018FE 28      4742 JR	Z,HEXev		;HEX CONSTANT
0018FF 81 
001900 FE      4743 CP	'%'
001901 25 
001902 28      4744 JR	Z,BIN		;BINARY CONSTANT
001903 9D 
001904 FE      4745 CP	'"'
001905 22 
001906 28      4746 JR	Z,CONS		;STRING CONSTANT
001907 72 
001908 FE      4747 CP	TTINT
001909 0A 
00190A CA      4748 JP	Z,TINTev		;TINT FUNCTION
00190B D0 
00190C 1A 
00190D FE      4749 ITEM2:          CP	TMOD
00190E 83 
00190F CA      4750 JP	Z,MODFUN	;MOD
001910 4D 
001911 1D 
001912 FE      4751 CP	'^'
001913 5E 
001914 28      4752 JR	Z,ADDROF	;^ OPERATOR
001915 B1 
001916 FD      4753 DEC	IY
001917 2B 
001918 CD      4754 CALL	GETVAR		;VARIABLE
001919 E3 
00191A 41 
00191B 20      4755 JR	NZ,NOSUCHev
00191C 2F 
00191D CB      4756 BIT	6,A
00191E 77 
00191F 20      4757 JR	NZ,ARRAYev
001920 7E 
001921 B7      4758 OR	A
001922 FA      4759 JP	M,LOADS		;STRING VARIABLE
001923 0E 
001924 1A 
001925 CB      4760 LOADN:          BIT	2,A
001926 57 
001927 0E      4761 LD	C,0
001928 00 
001929 28      4762 JR	Z,LOAD1		;BYTE VARIABLE
00192A 16 
00192B CB      4763 BIT	0,A
00192C 47 
00192D 28      4764 JR	Z,LOAD4		;INTEGER VARIABLE
00192E 03 
00192F DD      4765 LOAD5:          LD	C,(IX+4)
001930 4E 
001931 04 
001932 D9      4766 LOAD4:          EXX
001933 DD      4767 LD	L,(IX+0)
001934 6E 
001935 00 
001936 DD      4768 LD	H,(IX+1)
001937 66 
001938 01 
001939 D9      4769 EXX
00193A DD      4770 LD	L,(IX+2)
00193B 6E 
00193C 02 
00193D DD      4771 LD	H,(IX+3)
00193E 66 
00193F 03 
001940 C9      4772 RET
               4773 ;
001941 21      4774 LOAD1:          LD	HL,0
001942 00 
001943 00 
001944 D9      4775 EXX
001945 26      4776 LD	H,0
001946 00 
001947 DD      4777 LD	L,(IX+0)
001948 6E 
001949 00 
00194A D9      4778 EXX
00194B C9      4779 RET
               4780 ;
00194C DA      4781 NOSUCHev:         JP	C,SYNTAX
00194D E0 
00194E 25 
00194F 3A      4782 LD	A,(LISTON)
001950 FE 
001951 54 
001952 CB      4783 BIT	5,A
001953 6F 
001954 3E      4784 LD	A,26
001955 1A 
001956 20      4785 JR	NZ,ERROR0ev	;"No such variable"
001957 36 
001958 FD      4786 NOS1:           INC	IY
001959 23 
00195A CD      4787 CALL	RANGE
00195B EF 
00195C 43 
00195D 30      4788 JR	NC,NOS1
00195E F9 
00195F DD      4789 LD	IX,PC
001960 21 
001961 40 
001962 54 
001963 AF      4790 XOR	A
001964 4F      4791 LD	C,A
001965 18      4792 JR	LOAD4
001966 CB 
               4793 ;
               4794 ;CON - Get unsigned numeric constant from ASCII string.
               4795 ;   Inputs: ASCII string at (IY-1)
               4796 ;  Outputs: Variable-type result in HLH'L'C
               4797 ;           IY updated (points to delimiter)
               4798 ;           A7 = 0 (numeric marker)
               4799 ;
001967 FD      4800 CONev:            DEC	IY
001968 2B 
001969 FD      4801 PUSH	IY
00196A E5 
00196B DD      4802 POP	IX
00196C E1 
00196D 3E      4803 LD	A,36
00196E 24 
00196F CD      4804 CALL	FPP
001970 15 
001971 45 
001972 38      4805 JR	C,ERROR0ev
001973 1A 
001974 DD      4806 PUSH	IX
001975 E5 
001976 FD      4807 POP	IY
001977 E1 
001978 AF      4808 XOR	A
001979 C9      4809 RET
               4810 ;
               4811 ;CONS - Get string constant from ASCII string.
               4812 ;   Inputs: ASCII string at (IY)
               4813 ;  Outputs: Result in string accumulator.
               4814 ;           D = MS byte of ACCS, E = string length
               4815 ;           A7 = 1 (string marker)
               4816 ;           IY updated
               4817 ;
00197A 11      4818 CONS:           LD	DE,ACCS
00197B 00 
00197C 52 
00197D FD      4819 CONS3:          LD	A,(IY)
00197E 7E 
00197F 00 
001980 FD      4820 INC	IY
001981 23 
001982 FE      4821 CP	'"'
001983 22 
001984 28      4822 JR	Z,CONS2
001985 0B 
001986 12      4823 CONS1:          LD	(DE),A
001987 1C      4824 INC	E
001988 FE      4825 CP	CR
001989 0D 
00198A 20      4826 JR	NZ,CONS3
00198B F1 
00198C 3E      4827 LD	A,9
00198D 09 
00198E C3      4828 ERROR0ev:         JP	ERROR_		;"Missing """
00198F 44 
001990 3F 
               4829 ;
001991 FD      4830 CONS2:          LD	A,(IY)
001992 7E 
001993 00 
001994 FE      4831 CP	'"'
001995 22 
001996 FD      4832 INC	IY
001997 23 
001998 28      4833 JR	Z,CONS1
001999 EC 
00199A FD      4834 DEC	IY
00199B 2B 
00199C 3E      4835 LD	A,80H		;STRING MARKER
00199D 80 
00199E C9      4836 RET
               4837 ;
00199F 3E      4838 ARRAYev:          LD	A,14		;'Bad use of array'
0019A0 0E 
0019A1 C3      4839 JP	ERROR_
0019A2 44 
0019A3 3F 
               4840 ;
               4841 ; ARRLEN - Get start address and number of elements of an array
               4842 ;   Inputs: HL addresses array descriptor
               4843 ;  Outputs: HL = address of first element
               4844 ;           DE = total number of elements
               4845 ;           A = 0
               4846 ; Destroys: A,B,C,D,E,H,L,flags
               4847 ;
0019A4 7E      4848 ARRLEN:         LD	A,(HL)		;Number of dimensions
0019A5 23      4849 INC	HL
0019A6 B7      4850 OR	A
0019A7 28      4851 JR	Z,ARRAYev
0019A8 F6 
0019A9 11      4852 LD	DE,1
0019AA 01 
0019AB 00 
0019AC 4E      4853 ARLOOP:         LD	C,(HL)
0019AD 23      4854 INC	HL
0019AE 46      4855 LD	B,(HL)		;BC = size of this dimension
0019AF 23      4856 INC	HL
0019B0 EB      4857 EX	DE,HL
0019B1 F5      4858 PUSH	AF
0019B2 D5      4859 PUSH	DE
0019B3 CD      4860 CALL	MUL16		;HL=HL*BC
0019B4 BD 
0019B5 36 
0019B6 D1      4861 POP	DE
0019B7 F1      4862 POP	AF
0019B8 EB      4863 EX	DE,HL
0019B9 3D      4864 DEC	A
0019BA 20      4865 JR	NZ,ARLOOP
0019BB F0 
0019BC C9      4866 RET
               4867 ;
0019BD CD      4868 GETARR:         CALL	NXT
0019BE 0B 
0019BF 45 
0019C0 CD      4869 CALL	GETVAR
0019C1 E3 
0019C2 41 
0019C3 20      4870 JR	NZ,NOSUCHev
0019C4 87 
0019C5 CB      4871 BIT	6,A
0019C6 77 
0019C7 37      4872 SCF
0019C8 28      4873 JR	Z,NOSUCHev
0019C9 82 
0019CA E6      4874 AND	8FH
0019CB 8F 
0019CC 47      4875 LD	B,A		;Type + size
0019CD 7E      4876 GETAR1:         LD	A,(HL)
0019CE 23      4877 INC	HL
0019CF 66      4878 LD	H,(HL)
0019D0 6F      4879 LD	L,A
0019D1 E6      4880 AND	0FEH
0019D2 FE 
0019D3 B4      4881 OR	H
0019D4 28      4882 JR	Z,ARRAYev		;Bad use of array
0019D5 C9 
0019D6 C9      4883 RET
               4884 ;
0019D7 CD      4885 GETARB:         CALL	NXT
0019D8 0B 
0019D9 45 
0019DA FE      4886 CP	'('
0019DB 28 
0019DC 20      4887 JR	NZ,GETARR
0019DD DF 
0019DE FD      4888 INC	IY
0019DF 23 
0019E0 CD      4889 CALL	GETARR
0019E1 BD 
0019E2 19 
0019E3 CD      4890 CALL	BRAKET
0019E4 AE 
0019E5 20 
0019E6 C9      4891 RET
               4892 ;
0019E7 CB      4893 DLOADN:         BIT	2,A
0019E8 57 
0019E9 06      4894 LD	B,0
0019EA 00 
0019EB 28      4895 JR	Z,DLOAD1	;BYTE VARIABLE
0019EC 16 
0019ED CB      4896 BIT	0,A
0019EE 47 
0019EF 28      4897 JR	Z,DLOAD4	;INTEGER VARIABLE
0019F0 03 
0019F1 DD      4898 DLOAD5:         LD	B,(IX+4)
0019F2 46 
0019F3 04 
0019F4 D9      4899 DLOAD4:         EXX
0019F5 DD      4900 LD	E,(IX+0)
0019F6 5E 
0019F7 00 
0019F8 DD      4901 LD	D,(IX+1)
0019F9 56 
0019FA 01 
0019FB D9      4902 EXX
0019FC DD      4903 LD	E,(IX+2)
0019FD 5E 
0019FE 02 
0019FF DD      4904 LD	D,(IX+3)
001A00 56 
001A01 03 
001A02 C9      4905 RET
               4906 ;
001A03 11      4907 DLOAD1:         LD	DE,0
001A04 00 
001A05 00 
001A06 D9      4908 EXX
001A07 16      4909 LD	D,0
001A08 00 
001A09 DD      4910 LD	E,(IX+0)
001A0A 5E 
001A0B 00 
001A0C D9      4911 EXX
001A0D C9      4912 RET
               4913 ;
001A0E 11      4914 LOADS:          LD	DE,ACCS
001A0F 00 
001A10 52 
001A11 1F      4915 RRA
001A12 30      4916 JR	NC,LOADS2	;FIXED STRING
001A13 10 
001A14 CD      4917 CALL	LOAD4
001A15 32 
001A16 19 
001A17 D9      4918 EXX
001A18 7D      4919 LD	A,L
001A19 D9      4920 EXX
001A1A B7      4921 OR	A
001A1B 4F      4922 LD	C,A
001A1C 3E      4923 LD	A,80H		;STRING MARKER
001A1D 80 
001A1E C8      4924 RET	Z
001A1F 06      4925 LD	B,0
001A20 00 
001A21 ED      4926 LDIR
001A22 B0 
001A23 C9      4927 RET
               4928 ;
001A24 7E      4929 LOADS2:         LD	A,(HL)
001A25 12      4930 LD	(DE),A
001A26 23      4931 INC	HL
001A27 FE      4932 CP	CR
001A28 0D 
001A29 3E      4933 REPDUN:         LD	A,80H		;STRING MARKER
001A2A 80 
001A2B C8      4934 RET	Z
001A2C 1C      4935 INC	E
001A2D 20      4936 JR	NZ,LOADS2
001A2E F5 
001A2F C9      4937 RET			;RETURN NULL STRING
               4938 ;
               4939 ; Version 5 extensions:
               4940 ;
001A30 FE      4941 EXTRASev:         CP	TMODE
001A31 EB 
001A32 CA      4942 JP	Z,MODEFN	;MODE
001A33 5F 
001A34 02 
001A35 FE      4943 CP	TWIDTH
001A36 FE 
001A37 CA      4944 JP	Z,WIDFN		;WIDTH
001A38 69 
001A39 02 
001A3A FE      4945 CP	TREPORT
001A3B F6 
001A3C 28      4946 JR	Z,REPORS	;REPORT$
001A3D 11 
001A3E FE      4947 CP	TEND
001A3F E0 
001A40 28      4948 JR	Z,ENDFUN	;END
001A41 07 
001A42 FE      4949 CP	TDIM
001A43 DE 
001A44 28      4950 JR	Z,DIMFUN	;DIM
001A45 44 
001A46 C3      4951 SYNERR:         JP	SYNTAX		; 'Syntax error'
001A47 E0 
001A48 25 
               4952 ;
               4953 ; END (function)
               4954 ;
001A49 2A      4955 ENDFUN:         LD	HL,(FREE)
001A4A E0 
001A4B 54 
001A4C C3      4956 JP	COUNT1
001A4D 50 
001A4E 1B 
               4957 ;
               4958 ; REPORT$
               4959 ;
001A4F FD      4960 REPORS:         LD	A,(IY)
001A50 7E 
001A51 00 
001A52 FE      4961 CP	'$'
001A53 24 
001A54 20      4962 JR	NZ,SYNERR
001A55 F0 
001A56 FD      4963 INC	IY
001A57 23 
001A58 2A      4964 LD	HL,(ERRTXT)
001A59 EE 
001A5A 54 
001A5B 11      4965 LD	DE,ACCS
001A5C 00 
001A5D 52 
001A5E 7E      4966 REPCPY:         LD	A,(HL)
001A5F B7      4967 OR	A
001A60 28      4968 JR	Z,REPDUN
001A61 C7 
001A62 ED      4969 LDI
001A63 A0 
001A64 FE      4970 CP	160
001A65 A0 
001A66 EA      4971 JP	PE,REPCPY
001A67 5E 
001A68 1A 
001A69 FE      4972 CP	LF
001A6A 0A 
001A6B 28      4973 JR	Z,REPCPY
001A6C F1 
001A6D 1D      4974 DEC	E
001A6E E5      4975 PUSH	HL
001A6F 21      4976 LD	HL,KEYWDS
001A70 84 
001A71 38 
001A72 01      4977 LD	BC,KEYWDL
001A73 5B 
001A74 03 
001A75 ED      4978 CPIR
001A76 B1 
001A77 06      4979 LD	B,160
001A78 A0 
001A79 FE      4980 CP	145
001A7A 91 
001A7B EA      4981 JP	PE,REPTOK
001A7C 7F 
001A7D 1A 
001A7E 04      4982 INC	B
001A7F 7E      4983 REPTOK:         LD	A,(HL)
001A80 ED      4984 LDI
001A81 A0 
001A82 B8      4985 CP	B
001A83 EA      4986 JP	PE,REPTOK
001A84 7F 
001A85 1A 
001A86 E1      4987 POP	HL
001A87 1D      4988 DEC	E
001A88 18      4989 JR	REPCPY
001A89 D4 
               4990 ;
               4991 ; DIM(array()[,sub])
               4992 ;
001A8A CD      4993 DIMFUN:         CALL	NXT
001A8B 0B 
001A8C 45 
001A8D FE      4994 CP	'('
001A8E 28 
001A8F 20      4995 JR	NZ,DIMF0
001A90 09 
001A91 FD      4996 INC	IY
001A92 23 
001A93 CD      4997 CALL	DIMF0
001A94 9A 
001A95 1A 
001A96 CD      4998 CALL	BRAKET
001A97 AE 
001A98 20 
001A99 C9      4999 RET
               5000 ;
001A9A CD      5001 DIMF0:          CALL	GETARR
001A9B BD 
001A9C 19 
001A9D E5      5002 PUSH	HL
001A9E CD      5003 CALL	NXT
001A9F 0B 
001AA0 45 
001AA1 1E      5004 LD	E,0
001AA2 00 
001AA3 FE      5005 CP	','
001AA4 2C 
001AA5 20      5006 JR	NZ,DIMF1
001AA6 0B 
001AA7 FD      5007 INC	IY
001AA8 23 
001AA9 CD      5008 CALL	EXPRI
001AAA 33 
001AAB 18 
001AAC D9      5009 EXX
001AAD EB      5010 EX	DE,HL
001AAE 1C      5011 INC	E
001AAF 1D      5012 DEC	E
001AB0 28      5013 JR	Z,BADSUB
001AB1 19 
001AB2 E1      5014 DIMF1:          POP	HL
001AB3 7E      5015 LD	A,(HL)
001AB4 23      5016 INC	HL
001AB5 BB      5017 CP	E
001AB6 38      5018 JR	C,BADSUB
001AB7 13 
001AB8 1D      5019 DEC	E
001AB9 FA      5020 JP	M,DIMF3
001ABA C6 
001ABB 1A 
001ABC 19      5021 ADD	HL,DE
001ABD 19      5022 ADD	HL,DE
001ABE 7E      5023 LD	A,(HL)
001ABF 23      5024 INC	HL
001AC0 66      5025 LD	H,(HL)
001AC1 6F      5026 LD	L,A
001AC2 2B      5027 DEC	HL
001AC3 C3      5028 DIMF2:          JP	COUNT1
001AC4 50 
001AC5 1B 
001AC6 6F      5029 DIMF3:          LD	L,A
001AC7 26      5030 LD	H,0
001AC8 00 
001AC9 18      5031 JR	DIMF2
001ACA F8 
               5032 ;
001ACB 3E      5033 BADSUB:         LD	A,15
001ACC 0F 
001ACD C3      5034 JP	ERROR_			;"Bad subscript"
001ACE 44 
001ACF 3F 
               5035 ;
               5036 ;VARIABLE-TYPE FUNCTIONS:
               5037 ;
               5038 ;Result returned in HLH'L'C (floating point)
               5039 ;Result returned in HLH'L' (C=0) (integer)
               5040 ;Result returned in string accumulator & DE (string)
               5041 ;All registers destroyed.
               5042 ;IY (text pointer) updated.
               5043 ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
               5044 ;
               5045 ;
               5046 ;POS - horizontal cursor position.
               5047 ;VPOS - vertical cursor position.
               5048 ;EOF - return status of file.
               5049 ;BGET - read byte from file.
               5050 ;INKEY - as GET but wait only n centiseconds.
               5051 ;GET - wait for keypress and return ASCII value.
               5052 ;GET(n) - input from Z80 port n.
               5053 ;ASC - ASCII value of string.
               5054 ;LEN - length of string.
               5055 ;LOMEM - location of dynamic variables.
               5056 ;HIMEM - top of available RAM.
               5057 ;PAGE - start of current text page.
               5058 ;TOP - address of first free byte after program.
               5059 ;ERL - line number where last error occurred.
               5060 ;ERR - number of last error.
               5061 ;COUNT - number of printing characters since CR.
               5062 ;Results are integer numeric.
               5063 ;
001AD0 CD      5064 TINTev:           CALL	TINTFN
001AD1 7D 
001AD2 05 
001AD3 18      5065 JR	COUNT1
001AD4 7B 
001AD5 CD      5066 POS:            CALL	GETCSR
001AD6 15 
001AD7 02 
001AD8 EB      5067 EX	DE,HL
001AD9 18      5068 JR	COUNT1
001ADA 75 
001ADB CD      5069 VPOS:           CALL	GETCSR
001ADC 15 
001ADD 02 
001ADE 18      5070 JR	COUNT1
001ADF 70 
001AE0 CD      5071 EOF:            CALL	CHANEL
001AE1 D1 
001AE2 36 
001AE3 CD      5072 CALL	OSSTAT
001AE4 50 
001AE5 12 
001AE6 CA      5073 JP	Z,TRUEev
001AE7 BD 
001AE8 1B 
001AE9 C3      5074 JP	ZERO
001AEA F8 
001AEB 1F 
001AEC CD      5075 BGET:           CALL	CHANEL		;CHANNEL NUMBER
001AED D1 
001AEE 36 
001AEF CD      5076 CALL	OSBGET
001AF0 3F 
001AF1 12 
001AF2 6F      5077 LD	L,A
001AF3 18      5078 JR	COUNT0
001AF4 59 
001AF5 CD      5079 INKEY:          CALL	INKEYS
001AF6 8E 
001AF7 1E 
001AF8 18      5080 JR	ASC0
001AF9 19 
001AFA CD      5081 GET:            CALL	NXT
001AFB 0B 
001AFC 45 
001AFD FE      5082 CP	'('
001AFE 28 
001AFF 20      5083 JR	NZ,GET0
001B00 0A 
001B01 CD      5084 CALL	ITEMI		;PORT ADDRESS
001B02 60 
001B03 18 
001B04 D9      5085 EXX
001B05 44      5086 LD	B,H
001B06 4D      5087 LD	C,L
001B07 ED      5088 IN	L,(C)		;INPUT FROM PORT BC
001B08 68 
001B09 18      5089 JR	COUNT0
001B0A 43 
001B0B CD      5090 GET0:           CALL	GETS
001B0C 2D 
001B0D 1E 
001B0E 18      5091 JR	ASC1
001B0F 08 
001B10 CD      5092 ASC:            CALL	ITEMS
001B11 69 
001B12 18 
001B13 AF      5093 ASC0:           XOR	A
001B14 BB      5094 CP	E
001B15 CA      5095 JP	Z,TRUEev		;NULL STRING
001B16 BD 
001B17 1B 
001B18 2A      5096 ASC1:           LD	HL,(ACCS)
001B19 00 
001B1A 52 
001B1B 18      5097 JR	COUNT0
001B1C 31 
001B1D CD      5098 LEN:            CALL	ITEMS
001B1E 69 
001B1F 18 
001B20 EB      5099 EX	DE,HL
001B21 18      5100 JR	COUNT0
001B22 2B 
001B23 2A      5101 LOMEMVev:         LD	HL,(LOMEM)
001B24 DE 
001B25 54 
001B26 18      5102 JR	COUNT1
001B27 28 
001B28 2A      5103 HIMEMVev:         LD	HL,(HIMEM)
001B29 E2 
001B2A 54 
001B2B 18      5104 JR	COUNT1
001B2C 23 
001B2D 2A      5105 PAGEVev:          LD	HL,(PAGE_)
001B2E DC 
001B2F 54 
001B30 18      5106 JR	COUNT1
001B31 1E 
001B32 FD      5107 TOPV:           LD	A,(IY)
001B33 7E 
001B34 00 
001B35 FD      5108 INC	IY		;SKIP "P"
001B36 23 
001B37 FE      5109 CP	'P'
001B38 50 
001B39 C2      5110 JP	NZ,SYNTAX	;"Syntax Error"
001B3A E0 
001B3B 25 
001B3C CD      5111 CALL	GETTOP
001B3D 25 
001B3E 40 
001B3F 18      5112 JR	COUNT1
001B40 0F 
001B41 2A      5113 ERLV:           LD	HL,(ERL)
001B42 F2 
001B43 54 
001B44 18      5114 JR	COUNT1
001B45 0A 
001B46 2A      5115 ERRV:           LD	HL,(ERR)
001B47 FD 
001B48 54 
001B49 18      5116 JR	COUNT0
001B4A 03 
001B4B 2A      5117 COUNTV:         LD	HL,(COUNT)
001B4C FB 
001B4D 54 
001B4E 26      5118 COUNT0:         LD	H,0
001B4F 00 
001B50 D9      5119 COUNT1:         EXX
001B51 AF      5120 XOR	A
001B52 4F      5121 LD	C,A		;INTEGER MARKER
001B53 67      5122 LD	H,A
001B54 6F      5123 LD	L,A
001B55 C9      5124 RET
               5125 ;
               5126 ;OPENIN - Open a file for reading.
               5127 ;OPENOUT - Open a file for writing.
               5128 ;OPENUP - Open a file for reading or writing.
               5129 ;Result is integer channel number (0 if error)
               5130 ;
001B56 AF      5131 OPENOT:         XOR	A
001B57 21      5132 DB	21H		;SKIP NEXT 2 BYTES
001B58 3E      5133 OPENUP:         LD	A,2
001B59 02 
001B5A 21      5134 DB	21H		;SKIP NEXT 2 BYTES
001B5B 3E      5135 OPENIN:         LD	A,1
001B5C 01 
001B5D F5      5136 PUSH	AF		;SAVE OPEN TYPE
001B5E CD      5137 CALL	ITEMS		;FILENAME
001B5F 69 
001B60 18 
001B61 3E      5138 LD	A,CR
001B62 0D 
001B63 12      5139 LD	(DE),A
001B64 F1      5140 POP	AF		;RESTORE OPEN TYPE
001B65 C6      5141 ADD	A,-1		;AFFECT FLAGS
001B66 FF 
001B67 21      5142 LD	HL,ACCS
001B68 00 
001B69 52 
001B6A CD      5143 CALL	OSOPEN
001B6B 28 
001B6C 12 
001B6D 6F      5144 LD	L,A
001B6E 18      5145 JR	COUNT0
001B6F DE 
               5146 ;
               5147 ;EXT - Return length of file.
               5148 ;PTR - Return current file pointer.
               5149 ;Results are integer numeric.
               5150 ;
001B70 CD      5151 EXTev:            CALL	CHANEL
001B71 D1 
001B72 36 
001B73 CD      5152 CALL	GETEXT
001B74 91 
001B75 12 
001B76 18      5153 JR	TIME0
001B77 12 
               5154 ;
001B78 CD      5155 PTRev:            CALL	CHANEL
001B79 D1 
001B7A 36 
001B7B CD      5156 CALL	GETPTR
001B7C 5A 
001B7D 12 
001B7E 18      5157 JR	TIME0
001B7F 0A 
               5158 ;
               5159 ;TIME - Return current value of elapsed time.
               5160 ;Result is integer numeric.
               5161 ;
001B80 FD      5162 TIMEVev:          LD	A,(IY)
001B81 7E 
001B82 00 
001B83 FE      5163 CP	'$'
001B84 24 
001B85 28      5164 JR	Z,TIMEVSev
001B86 09 
001B87 CD      5165 CALL	GETIME
001B88 95 
001B89 01 
001B8A D5      5166 TIME0:          PUSH	DE
001B8B D9      5167 EXX
001B8C E1      5168 POP	HL
001B8D AF      5169 XOR	A
001B8E 4F      5170 LD	C,A
001B8F C9      5171 RET
               5172 ;
               5173 ;TIME$ - Return date/time string.
               5174 ;Result is string
               5175 ;
001B90 FD      5176 TIMEVSev:         INC	IY		;SKIP $
001B91 23 
001B92 CD      5177 CALL	GETIMS
001B93 AA 
001B94 01 
001B95 3E      5178 LD	A,80H		;MARK STRING
001B96 80 
001B97 C9      5179 RET
               5180 ;
               5181 ;String comparison:
               5182 ;
001B98 CD      5183 SLT:            CALL	SCP
001B99 F5 
001B9A 1F 
001B9B D0      5184 RET	NC
001B9C 18      5185 JR	TRUEev
001B9D 1F 
               5186 ;
001B9E CD      5187 SGT:            CALL	SCP
001B9F F5 
001BA0 1F 
001BA1 C8      5188 RET	Z
001BA2 D8      5189 RET	C
001BA3 18      5190 JR	TRUEev
001BA4 18 
               5191 ;
001BA5 CD      5192 SGE:            CALL	SCP
001BA6 F5 
001BA7 1F 
001BA8 D8      5193 RET	C
001BA9 18      5194 JR	TRUEev
001BAA 12 
               5195 ;
001BAB CD      5196 SLE:            CALL	SCP
001BAC F5 
001BAD 1F 
001BAE 28      5197 JR	Z,TRUEev
001BAF 0D 
001BB0 D0      5198 RET	NC
001BB1 18      5199 JR	TRUEev
001BB2 0A 
               5200 ;
001BB3 CD      5201 SNE:            CALL	SCP
001BB4 F5 
001BB5 1F 
001BB6 C8      5202 RET	Z
001BB7 18      5203 JR	TRUEev
001BB8 04 
               5204 ;
001BB9 CD      5205 SEQ:            CALL	SCP
001BBA F5 
001BBB 1F 
001BBC C0      5206 RET	NZ
001BBD 3E      5207 TRUEev:           LD	A,-1
001BBE FF 
001BBF D9      5208 EXX
001BC0 67      5209 LD	H,A
001BC1 6F      5210 LD	L,A
001BC2 D9      5211 EXX
001BC3 67      5212 LD	H,A
001BC4 6F      5213 LD	L,A
001BC5 3C      5214 INC	A
001BC6 4F      5215 LD	C,A
001BC7 C9      5216 RET
               5217 ;
               5218 ;PI - Return PI (3.141592654)
               5219 ;Result is floating-point numeric.
               5220 ;
001BC8 3E      5221 PIev:             LD	A,35
001BC9 23 
001BCA 18      5222 JR	FPP1
001BCB 43 
               5223 ;
               5224 ;ABS - Absolute value
               5225 ;Result is numeric, variable type.
               5226 ;
001BCC 3E      5227 ABSev:            LD	A,16
001BCD 10 
001BCE 18      5228 JR	FPPN
001BCF 3A 
               5229 ;
               5230 ;NOT - Complement integer.
               5231 ;Result is integer numeric.
               5232 ;
001BD0 3E      5233 CPL_ev:           LD	A,26
001BD1 1A 
001BD2 18      5234 JR	FPPN
001BD3 36 
               5235 ;
               5236 ;DEG - Convert radians to degrees
               5237 ;Result is floating-point numeric.
               5238 ;
001BD4 3E      5239 DEGev:            LD	A,21
001BD5 15 
001BD6 18      5240 JR	FPPN
001BD7 32 
               5241 ;
               5242 ;RAD - Convert degrees to radians
               5243 ;Result is floating-point numeric.
               5244 ;
001BD8 3E      5245 RADev:            LD	A,27
001BD9 1B 
001BDA 18      5246 JR	FPPN
001BDB 2E 
               5247 ;
               5248 ;SGN - Return -1, 0 or +1
               5249 ;Result is integer numeric.
               5250 ;
001BDC 3E      5251 SGNev:            LD	A,28
001BDD 1C 
001BDE 18      5252 JR	FPPN
001BDF 2A 
               5253 ;
               5254 ;INT - Floor function
               5255 ;Result is integer numeric.
               5256 ;
001BE0 3E      5257 INT_ev:           LD	A,23
001BE1 17 
001BE2 18      5258 JR	FPPN
001BE3 26 
               5259 ;
               5260 ;SQR - square root
               5261 ;Result is floating-point numeric.
               5262 ;
001BE4 3E      5263 SQRev:            LD	A,30
001BE5 1E 
001BE6 18      5264 JR	FPPN
001BE7 22 
               5265 ;
               5266 ;TAN - Tangent function
               5267 ;Result is floating-point numeric.
               5268 ;
001BE8 3E      5269 TANev:            LD	A,31
001BE9 1F 
001BEA 18      5270 JR	FPPN
001BEB 1E 
               5271 ;
               5272 ;COS - Cosine function
               5273 ;Result is floating-point numeric.
               5274 ;
001BEC 3E      5275 COSev:            LD	A,20
001BED 14 
001BEE 18      5276 JR	FPPN
001BEF 1A 
               5277 ;
               5278 ;SIN - Sine function
               5279 ;Result is floating-point numeric.
               5280 ;
001BF0 3E      5281 SINev:            LD	A,29
001BF1 1D 
001BF2 18      5282 JR	FPPN
001BF3 16 
               5283 ;
               5284 ;EXP - Exponential function
               5285 ;Result is floating-point numeric.
               5286 ;
001BF4 3E      5287 EXPev:            LD	A,22
001BF5 16 
001BF6 18      5288 JR	FPPN
001BF7 12 
               5289 ;
               5290 ;LN - Natural log.
               5291 ;Result is floating-point numeric.
               5292 ;
001BF8 3E      5293 LNev:             LD	A,24
001BF9 18 
001BFA 18      5294 JR	FPPN
001BFB 0E 
               5295 ;
               5296 ;LOG - base-10 logarithm.
               5297 ;Result is floating-point numeric.
               5298 ;
001BFC 3E      5299 LOGev:            LD	A,25
001BFD 19 
001BFE 18      5300 JR	FPPN
001BFF 0A 
               5301 ;
               5302 ;ASN - Arc-sine
               5303 ;Result is floating-point numeric.
               5304 ;
001C00 3E      5305 ASNev:            LD	A,18
001C01 12 
001C02 18      5306 JR	FPPN
001C03 06 
               5307 ;
               5308 ;ATN - arc-tangent
               5309 ;Result is floating-point numeric.
               5310 ;
001C04 3E      5311 ATNev:            LD	A,19
001C05 13 
001C06 18      5312 JR	FPPN
001C07 02 
               5313 ;
               5314 ;ACS - arc-cosine
               5315 ;Result is floating point numeric.
               5316 ;
001C08 3E      5317 ACSev:            LD	A,17
001C09 11 
001C0A F5      5318 FPPN:           PUSH	AF
001C0B CD      5319 CALL	ITEMN
001C0C 7A 
001C0D 18 
001C0E F1      5320 POP	AF
001C0F CD      5321 FPP1:           CALL	FPP
001C10 15 
001C11 45 
001C12 DA      5322 JP	C,ERROR_
001C13 44 
001C14 3F 
001C15 AF      5323 XOR	A
001C16 C9      5324 RET
               5325 ;
               5326 ;SFIX - Convert to fixed-point notation
               5327 ;
001C17 3E      5328 SFIX:           LD	A,38
001C18 26 
001C19 18      5329 JR	FPP1
001C1A F4 
               5330 ;
               5331 ;SFLOAT - Convert to floating-point notation
               5332 ;
001C1B 3E      5333 SFLOATev:         LD	A,39
001C1C 27 
001C1D 18      5334 JR	FPP1
001C1E F0 
               5335 ;
               5336 ;VAL - Return numeric value of string.
               5337 ;Result is variable type numeric.
               5338 ;
001C1F CD      5339 VALev:            CALL	ITEMS
001C20 69 
001C21 18 
001C22 AF      5340 VAL0:           XOR	A
001C23 12      5341 LD	(DE),A
001C24 DD      5342 LD	IX,ACCS
001C25 21 
001C26 00 
001C27 52 
001C28 3E      5343 LD	A,36
001C29 24 
001C2A 18      5344 JR	FPP1
001C2B E3 
               5345 ;
               5346 ;EVAL - Pass string to expression evaluator.
               5347 ;Result is variable type (numeric or string).
               5348 ;
001C2C CD      5349 EVAL_:          CALL	ITEMS
001C2D 69 
001C2E 18 
001C2F 3E      5350 LD	A,CR
001C30 0D 
001C31 12      5351 LD	(DE),A
001C32 FD      5352 PUSH	IY
001C33 E5 
001C34 11      5353 LD	DE,ACCS
001C35 00 
001C36 52 
001C37 FD      5354 LD	IY,ACCS
001C38 21 
001C39 00 
001C3A 52 
001C3B 0E      5355 LD	C,0
001C3C 00 
001C3D CD      5356 CALL	LEXAN2		;TOKENISE
001C3E 18 
001C3F 44 
001C40 12      5357 LD	(DE),A
001C41 13      5358 INC	DE
001C42 AF      5359 XOR	A
001C43 CD      5360 CALL	PUSHS		;PUT ON STACK
001C44 19 
001C45 20 
001C46 FD      5361 LD	IY,2
001C47 21 
001C48 02 
001C49 00 
001C4A FD      5362 ADD	IY,SP
001C4B 39 
001C4C CD      5363 CALL	EXPR
001C4D 02 
001C4E 17 
001C4F FD      5364 POP	IY
001C50 E1 
001C51 FD      5365 ADD	IY,SP
001C52 39 
001C53 FD      5366 LD	SP,IY		;ADJUST STACK POINTER
001C54 F9 
001C55 FD      5367 POP	IY
001C56 E1 
001C57 08      5368 EX	AF,AF'
001C58 C9      5369 RET
               5370 ;
               5371 ;RND - Random number function.
               5372 ; RND gives random integer 0-&FFFFFFFF
               5373 ; RND(-n) seeds random number & returns -n.
               5374 ; RND(0) returns last value in RND(1) form.
               5375 ; RND(1) returns floating-point 0-0.99999999.
               5376 ; RND(n) returns random integer 1-n.
               5377 ;
001C59 DD      5378 RND:            LD	IX,RANDOM
001C5A 21 
001C5B F6 
001C5C 54 
001C5D CD      5379 CALL	NXT
001C5E 0B 
001C5F 45 
001C60 FE      5380 CP	'('
001C61 28 
001C62 28      5381 JR	Z,RND5		;ARGUMENT FOLLOWS
001C63 1C 
001C64 CD      5382 CALL	LOAD5
001C65 2F 
001C66 19 
001C67 CB      5383 RND1:           RR	C
001C68 19 
001C69 06      5384 LD	B,32
001C6A 20 
001C6B D9      5385 RND2:           EXX			;CALCULATE NEXT
001C6C ED      5386 ADC	HL,HL
001C6D 6A 
001C6E D9      5387 EXX
001C6F ED      5388 ADC	HL,HL
001C70 6A 
001C71 CB      5389 BIT	3,L
001C72 5D 
001C73 28      5390 JR	Z,RND3
001C74 01 
001C75 3F      5391 CCF
001C76 10      5392 RND3:           DJNZ	RND2
001C77 F3 
001C78 CB      5393 RND4:           RL	C		;SAVE CARRY
001C79 11 
001C7A CD      5394 CALL	STORE5		;STORE NEW NUMBER
001C7B 06 
001C7C 32 
001C7D AF      5395 XOR	A
001C7E 4F      5396 LD	C,A
001C7F C9      5397 RET
001C80 CD      5398 RND5:           CALL	ITEMI
001C81 60 
001C82 18 
001C83 DD      5399 LD	IX,RANDOM
001C84 21 
001C85 F6 
001C86 54 
001C87 CB      5400 BIT	7,H		;NEGATIVE?
001C88 7C 
001C89 37      5401 SCF
001C8A 20      5402 JR	NZ,RND4		;SEED
001C8B EC 
001C8C CD      5403 CALL	TEST
001C8D 59 
001C8E 1F 
001C8F F5      5404 PUSH	AF
001C90 41      5405 LD	B,C
001C91 EB      5406 EX	DE,HL
001C92 D9      5407 EXX
001C93 EB      5408 EX	DE,HL
001C94 CD      5409 CALL	LOAD5
001C95 2F 
001C96 19 
001C97 C4      5410 CALL	NZ,RND1		;NEXT IF NON-ZERO
001C98 67 
001C99 1C 
001C9A D9      5411 EXX			;SCRAMBLE (CARE!)
001C9B 0E      5412 LD	C,7FH
001C9C 7F 
001C9D CB      5413 RND6:           BIT	7,H		;FLOAT
001C9E 7C 
001C9F 20      5414 JR	NZ,RND7
001CA0 08 
001CA1 D9      5415 EXX
001CA2 29      5416 ADD	HL,HL
001CA3 D9      5417 EXX
001CA4 ED      5418 ADC	HL,HL
001CA5 6A 
001CA6 0D      5419 DEC	C
001CA7 20      5420 JR	NZ,RND6
001CA8 F4 
001CA9 CB      5421 RND7:           RES	7,H		;POSITIVE 0-0.999999
001CAA BC 
001CAB F1      5422 POP	AF
001CAC C8      5423 RET	Z		;ZERO ARGUMENT
001CAD D9      5424 EXX
001CAE 7B      5425 LD	A,E
001CAF 3D      5426 DEC	A
001CB0 B2      5427 OR	D
001CB1 D9      5428 EXX
001CB2 B3      5429 OR	E
001CB3 B2      5430 OR	D
001CB4 C8      5431 RET	Z		;ARGUMENT=1
001CB5 06      5432 LD	B,0		;INTEGER MARKER
001CB6 00 
001CB7 3E      5433 LD	A,10
001CB8 0A 
001CB9 CD      5434 CALL	FPP		;MULTIPLY
001CBA 15 
001CBB 45 
001CBC DA      5435 JP	C,ERROR_
001CBD 44 
001CBE 3F 
001CBF CD      5436 CALL	SFIX
001CC0 17 
001CC1 1C 
001CC2 C3      5437 JP	ADD1ev
001CC3 56 
001CC4 18 
               5438 ;
               5439 ;SUMLEN(array())
               5440 ;
001CC5 FD      5441 SUMLEN:         INC	IY		;Skip LEN
001CC6 23 
001CC7 CD      5442 CALL	GETARB
001CC8 D7 
001CC9 19 
001CCA CB      5443 BIT	7,B
001CCB 78 
001CCC CA      5444 JP	Z,MISMATev	;Type mismatch
001CCD 6E 
001CCE 18 
001CCF CD      5445 CALL	ARRLEN
001CD0 A4 
001CD1 19 
001CD2 E5      5446 PUSH	HL
001CD3 DD      5447 POP	IX		;IX addresses array
001CD4 E1 
001CD5 AF      5448 XOR	A
001CD6 67      5449 LD	H,A
001CD7 6F      5450 LD	L,A
001CD8 47      5451 LD	B,A
001CD9 DD      5452 SUMLN1:         LD	C,(IX)
001CDA 4E 
001CDB 00 
001CDC 09      5453 ADD	HL,BC
001CDD 0E      5454 LD	C,4
001CDE 04 
001CDF DD      5455 ADD	IX,BC
001CE0 09 
001CE1 1B      5456 DEC	DE		;Count elements
001CE2 7A      5457 LD	A,D
001CE3 B3      5458 OR	E
001CE4 20      5459 JR	NZ,SUMLN1
001CE5 F3 
001CE6 C3      5460 JP	COUNT1
001CE7 50 
001CE8 1B 
               5461 ;
               5462 ;SUM(array())
               5463 ;
001CE9 CD      5464 SUM:            CALL	NXT
001CEA 0B 
001CEB 45 
001CEC FE      5465 CP	TLEN
001CED A9 
001CEE 28      5466 JR	Z,SUMLEN
001CEF D5 
001CF0 CD      5467 CALL	GETARB
001CF1 D7 
001CF2 19 
001CF3 CB      5468 BIT	7,B
001CF4 78 
001CF5 20      5469 JR	NZ,SUMSTR
001CF6 27 
001CF7 C5      5470 PUSH	BC
001CF8 CD      5471 CALL	ARRLEN
001CF9 A4 
001CFA 19 
001CFB E5      5472 PUSH	HL
001CFC DD      5473 POP	IX		;IX addresses array
001CFD E1 
001CFE CD      5474 CALL	ZERO
001CFF F8 
001D00 1F 
001D01 F1      5475 POP	AF		;A = element size
001D02 D5      5476 SUMUP:          PUSH	DE
001D03 F5      5477 PUSH	AF
001D04 CD      5478 CALL	DLOADN
001D05 E7 
001D06 19 
001D07 3E      5479 LD	A,11
001D08 0B 
001D09 CD      5480 CALL	FPP
001D0A 15 
001D0B 45 
001D0C DA      5481 JP	C,ERROR_
001D0D 44 
001D0E 3F 
001D0F F1      5482 POP	AF
001D10 16      5483 LD	D,0
001D11 00 
001D12 5F      5484 LD	E,A
001D13 DD      5485 ADD	IX,DE		;Bump to next element
001D14 19 
001D15 D1      5486 POP	DE
001D16 1B      5487 DEC	DE		;Count elements
001D17 47      5488 LD	B,A
001D18 7A      5489 LD	A,D
001D19 B3      5490 OR	E
001D1A 78      5491 LD	A,B
001D1B 20      5492 JR	NZ,SUMUP
001D1C E5 
001D1D C9      5493 RET
               5494 ;
               5495 ;SUM(string array)
               5496 ;
001D1E CD      5497 SUMSTR:         CALL	ARRLEN
001D1F A4 
001D20 19 
001D21 E5      5498 PUSH	HL
001D22 DD      5499 POP	IX		;IX addresses array
001D23 E1 
001D24 EB      5500 EX	DE,HL
001D25 11      5501 LD	DE,ACCS
001D26 00 
001D27 52 
001D28 06      5502 LD	B,0
001D29 00 
001D2A E5      5503 SUMST1:         PUSH	HL
001D2B DD      5504 LD	C,(IX)
001D2C 4E 
001D2D 00 
001D2E 79      5505 LD	A,C
001D2F B7      5506 OR	A
001D30 28      5507 JR	Z,SUMST2
001D31 0E 
001D32 83      5508 ADD	A,E
001D33 3E      5509 LD	A,19
001D34 13 
001D35 DA      5510 JP	C,ERROR_		;"String too long"
001D36 44 
001D37 3F 
001D38 DD      5511 LD	L,(IX+2)
001D39 6E 
001D3A 02 
001D3B DD      5512 LD	H,(IX+3)
001D3C 66 
001D3D 03 
001D3E ED      5513 LDIR
001D3F B0 
001D40 E1      5514 SUMST2:         POP	HL
001D41 0E      5515 LD	C,4
001D42 04 
001D43 DD      5516 ADD	IX,BC
001D44 09 
001D45 2B      5517 DEC	HL		;Count elements
001D46 7C      5518 LD	A,H
001D47 B5      5519 OR	L
001D48 20      5520 JR	NZ,SUMST1
001D49 E0 
001D4A F6      5521 OR	80H
001D4B 80 
001D4C C9      5522 RET
               5523 ;
               5524 ;MOD(array())
               5525 ;
001D4D CD      5526 MODFUN:         CALL	GETARB
001D4E D7 
001D4F 19 
001D50 CB      5527 BIT	7,B
001D51 78 
001D52 C2      5528 JP	NZ,MISMATev
001D53 6E 
001D54 18 
001D55 C5      5529 PUSH	BC
001D56 CD      5530 CALL	ARRLEN
001D57 A4 
001D58 19 
001D59 E5      5531 PUSH	HL
001D5A DD      5532 POP	IX		;IX addresses array
001D5B E1 
001D5C CD      5533 CALL	ZERO
001D5D F8 
001D5E 1F 
001D5F F1      5534 POP	AF		;A = element size
001D60 D5      5535 MODUP:          PUSH	DE
001D61 F5      5536 PUSH	AF
001D62 C5      5537 PUSH	BC
001D63 E5      5538 PUSH	HL
001D64 D9      5539 EXX
001D65 E5      5540 PUSH	HL
001D66 D9      5541 EXX
001D67 CD      5542 CALL	LOADN
001D68 25 
001D69 19 
001D6A AF      5543 XOR	A
001D6B 47      5544 LD	B,A
001D6C 57      5545 LD	D,A
001D6D 5F      5546 LD	E,A
001D6E D9      5547 EXX
001D6F 57      5548 LD	D,A
001D70 1E      5549 LD	E,2
001D71 02 
001D72 D9      5550 EXX
001D73 3E      5551 LD	A,14
001D74 0E 
001D75 DD      5552 PUSH	IX
001D76 E5 
001D77 CD      5553 CALL	FPP		;Square
001D78 15 
001D79 45 
001D7A DD      5554 POP	IX
001D7B E1 
001D7C DA      5555 JP	C,ERROR_
001D7D 44 
001D7E 3F 
001D7F D9      5556 EXX
001D80 EB      5557 EX	DE,HL
001D81 E1      5558 POP	HL
001D82 D9      5559 EXX
001D83 EB      5560 EX	DE,HL
001D84 E1      5561 POP	HL
001D85 79      5562 LD	A,C
001D86 C1      5563 POP	BC
001D87 47      5564 LD	B,A
001D88 3E      5565 LD	A,11
001D89 0B 
001D8A CD      5566 CALL	FPP		;Accumulate
001D8B 15 
001D8C 45 
001D8D DA      5567 JP	C,ERROR_
001D8E 44 
001D8F 3F 
001D90 F1      5568 POP	AF
001D91 16      5569 LD	D,0
001D92 00 
001D93 5F      5570 LD	E,A
001D94 DD      5571 ADD	IX,DE		;Bump to next element
001D95 19 
001D96 D1      5572 POP	DE
001D97 1B      5573 DEC	DE		;Count elements
001D98 47      5574 LD	B,A
001D99 7A      5575 LD	A,D
001D9A B3      5576 OR	E
001D9B 78      5577 LD	A,B
001D9C 20      5578 JR	NZ,MODUP
001D9D C2 
001D9E 3E      5579 LD	A,30
001D9F 1E 
001DA0 CD      5580 CALL	FPP		;Square root
001DA1 15 
001DA2 45 
001DA3 AF      5581 XOR	A
001DA4 C9      5582 RET
               5583 ;
               5584 ;INSTR - String search.
               5585 ;Result is integer numeric.
               5586 ;
001DA5 CD      5587 INSTR:          CALL	EXPRS		;STRING TO SEARCH
001DA6 3C 
001DA7 18 
001DA8 CD      5588 CALL	COMMA
001DA9 A2 
001DAA 20 
001DAB CD      5589 CALL	PUSHS		;SAVE STRING ON STACK
001DAC 19 
001DAD 20 
001DAE CD      5590 CALL	EXPRS		;SUB-STRING
001DAF 3C 
001DB0 18 
001DB1 C1      5591 POP	BC
001DB2 21      5592 LD	HL,0
001DB3 00 
001DB4 00 
001DB5 39      5593 ADD	HL,SP		;HL ADDRESSES MAIN
001DB6 C5      5594 PUSH	BC		;C = MAIN STRING LENGTH
001DB7 43      5595 LD	B,E		;B = SUB-STRING LENGTH
001DB8 CD      5596 CALL	NXT
001DB9 0B 
001DBA 45 
001DBB FE      5597 CP	','
001DBC 2C 
001DBD 3E      5598 LD	A,0
001DBE 00 
001DBF 20      5599 JR	NZ,INSTR1
001DC0 17 
001DC1 FD      5600 INC	IY		;SKIP COMMA
001DC2 23 
001DC3 C5      5601 PUSH	BC		;SAVE LENGTHS
001DC4 E5      5602 PUSH	HL		;SAVE MAIN ADDRESS
001DC5 CD      5603 CALL	PUSHS
001DC6 19 
001DC7 20 
001DC8 CD      5604 CALL	EXPRI
001DC9 33 
001DCA 18 
001DCB C1      5605 POP	BC
001DCC CD      5606 CALL	POPS
001DCD 37 
001DCE 20 
001DCF E1      5607 POP	HL		;RESTORE MAIN ADDRESS
001DD0 C1      5608 POP	BC		;RESTORE LENGTHS
001DD1 D9      5609 EXX
001DD2 7D      5610 LD	A,L
001DD3 D9      5611 EXX
001DD4 B7      5612 OR	A
001DD5 28      5613 JR	Z,INSTR1
001DD6 01 
001DD7 3D      5614 DEC	A
001DD8 11      5615 INSTR1:         LD	DE,ACCS		;DE ADDRESSES SUB
001DD9 00 
001DDA 52 
001DDB CD      5616 CALL	SEARCH
001DDC F2 
001DDD 1D 
001DDE D1      5617 POP	DE
001DDF 28      5618 JR	Z,INSTR2	;N.B. CARRY CLEARED
001DE0 03 
001DE1 ED      5619 SBC	HL,HL
001DE2 62 
001DE3 39      5620 ADD	HL,SP
001DE4 ED      5621 INSTR2:         SBC	HL,SP
001DE5 72 
001DE6 EB      5622 EX	DE,HL
001DE7 26      5623 LD	H,0
001DE8 00 
001DE9 39      5624 ADD	HL,SP
001DEA F9      5625 LD	SP,HL
001DEB EB      5626 EX	DE,HL
001DEC CD      5627 CALL	BRAKET
001DED AE 
001DEE 20 
001DEF C3      5628 JP	COUNT1
001DF0 50 
001DF1 1B 
               5629 ;
               5630 ;SEARCH - Search string for sub-string
               5631 ;   Inputs: Main string at HL length C
               5632 ;           Sub-string at DE length B
               5633 ;           Starting offset A
               5634 ;  Outputs: NZ - not found
               5635 ;           Z - found at location HL-1
               5636 ;           Carry always cleared
               5637 ;
001DF2 C5      5638 SEARCH:         PUSH	BC
001DF3 06      5639 LD	B,0
001DF4 00 
001DF5 4F      5640 LD	C,A
001DF6 09      5641 ADD	HL,BC		;NEW START ADDRESS
001DF7 C1      5642 POP	BC
001DF8 91      5643 SUB	C
001DF9 30      5644 JR	NC,SRCH4
001DFA 28 
001DFB ED      5645 NEG
001DFC 44 
001DFD 4F      5646 LD	C,A		;REMAINING LENGTH
001DFE 1A      5647 SRCH1ev:          LD	A,(DE)
001DFF C5      5648 PUSH	BC
001E00 06      5649 LD	B,0
001E01 00 
001E02 ED      5650 CPIR			;FIND FIRST CHARACTER
001E03 B1 
001E04 79      5651 LD	A,C
001E05 C1      5652 POP	BC
001E06 20      5653 JR	NZ,SRCH4
001E07 1B 
001E08 4F      5654 LD	C,A
001E09 05      5655 DEC	B		;Bug fix
001E0A B8      5656 CP	B		;Bug fix
001E0B 04      5657 INC	B		;Bug fix
001E0C 38      5658 JR	C,SRCH4		;Bug fix
001E0D 15 
001E0E C5      5659 PUSH	BC
001E0F D5      5660 PUSH	DE
001E10 E5      5661 PUSH	HL
001E11 05      5662 DEC	B
001E12 28      5663 JR	Z,SRCH3		;FOUND !
001E13 08 
001E14 13      5664 SRCH2ev:          INC	DE
001E15 1A      5665 LD	A,(DE)
001E16 BE      5666 CP	(HL)
001E17 20      5667 JR	NZ,SRCH3
001E18 03 
001E19 23      5668 INC	HL
001E1A 10      5669 DJNZ	SRCH2ev
001E1B F8 
001E1C E1      5670 SRCH3:          POP	HL
001E1D D1      5671 POP	DE
001E1E C1      5672 POP	BC
001E1F 20      5673 JR	NZ,SRCH1ev
001E20 DD 
001E21 AF      5674 XOR	A		;Z, NC
001E22 C9      5675 RET			;FOUND
               5676 ;
001E23 F6      5677 SRCH4:          OR	0FFH		;NZ, NC
001E24 FF 
001E25 C9      5678 RET			;NOT FOUND
               5679 ;
               5680 ;CHR$ - Return character with given ASCII value.
               5681 ;Result is string.
               5682 ;
001E26 CD      5683 CHRS:           CALL	ITEMI
001E27 60 
001E28 18 
001E29 D9      5684 EXX
001E2A 7D      5685 LD	A,L
001E2B 18      5686 JR	GET1
001E2C 0A 
               5687 ;
               5688 ;GET$ - Return key pressed as string, or read from file
               5689 ;Result is string.
               5690 ;
001E2D CD      5691 GETS:           CALL	NXT
001E2E 0B 
001E2F 45 
001E30 FE      5692 CP	'#'
001E31 23 
001E32 28      5693 JR	Z,GET2
001E33 06 
001E34 CD      5694 CALL	OSRDCH
001E35 C2 
001E36 11 
001E37 37      5695 GET1:           SCF
001E38 18      5696 JR	INKEY1
001E39 5B 
               5697 ;
001E3A CD      5698 GET2:           CALL	CHNL		;File channel
001E3B DB 
001E3C 36 
001E3D CD      5699 CALL	NXT
001E3E 0B 
001E3F 45 
001E40 FE      5700 CP	TBY
001E41 0F 
001E42 28      5701 JR	Z,GET3
001E43 04 
001E44 FE      5702 CP	TTO
001E45 B8 
001E46 20      5703 JR	NZ,GET4
001E47 0C 
001E48 FD      5704 GET3:           INC	IY
001E49 23 
001E4A F5      5705 PUSH	AF
001E4B D5      5706 PUSH	DE
001E4C CD      5707 CALL	ITEMI		;Get BY or TO qualifier
001E4D 60 
001E4E 18 
001E4F D9      5708 EXX
001E50 44      5709 LD	B,H
001E51 4D      5710 LD	C,L
001E52 D1      5711 POP	DE
001E53 F1      5712 POP	AF
001E54 21      5713 GET4:           LD	HL,ACCS
001E55 00 
001E56 52 
001E57 FE      5714 CP	TTO
001E58 B8 
001E59 28      5715 JR	Z,GET5
001E5A 08 
001E5B 51      5716 LD	D,C		;Maximum count
001E5C 01      5717 LD	BC,100H		;Default
001E5D 00 
001E5E 01 
001E5F FE      5718 CP	TBY
001E60 0F 
001E61 28      5719 JR	Z,GET6
001E62 04 
001E63 16      5720 GET5:           LD	D,0
001E64 00 
001E65 CB      5721 SET	1,B		;Flag no count
001E66 C8 
001E67 C5      5722 GET6:           PUSH	BC
001E68 CD      5723 CALL	OSBGET
001E69 3F 
001E6A 12 
001E6B C1      5724 POP	BC
001E6C 38      5725 JR	C,GET9		;EOF
001E6D 1C 
001E6E CB      5726 BIT	1,B
001E6F 48 
001E70 28      5727 JR	Z,GET8
001E71 13 
001E72 B9      5728 CP	C
001E73 28      5729 JR	Z,GET9		;NUL (or supplied term)
001E74 15 
001E75 CB      5730 BIT	7,B
001E76 78 
001E77 20      5731 JR	NZ,GET7
001E78 08 
001E79 CB      5732 BIT	0,B
001E7A 40 
001E7B 28      5733 JR	Z,GET8
001E7C 08 
001E7D FE      5734 CP	LF
001E7E 0A 
001E7F 28      5735 JR	Z,GET9		;LF
001E80 09 
001E81 FE      5736 GET7:           CP	CR
001E82 0D 
001E83 28      5737 JR	Z,GET9		;CR
001E84 05 
001E85 77      5738 GET8:           LD	(HL),A
001E86 2C      5739 INC	L
001E87 15      5740 DEC	D
001E88 20      5741 JR	NZ,GET6
001E89 DD 
001E8A EB      5742 GET9:           EX	DE,HL
001E8B 3E      5743 LD	A,80H
001E8C 80 
001E8D C9      5744 RET
               5745 ;
               5746 ;INKEY$ - Wait up to n centiseconds for keypress.
               5747 ; Return key pressed as string or null
               5748 ; string if time elapsed.
               5749 ;Result is string.
               5750 ;
001E8E CD      5751 INKEYS:         CALL	ITEMI
001E8F 60 
001E90 18 
001E91 D9      5752 EXX
001E92 CD      5753 CALL	OSKEY
001E93 FD 
001E94 01 
001E95 11      5754 INKEY1:         LD	DE,ACCS
001E96 00 
001E97 52 
001E98 12      5755 LD	(DE),A
001E99 3E      5756 LD	A,80H
001E9A 80 
001E9B D0      5757 RET	NC
001E9C 1C      5758 INC	E
001E9D C9      5759 RET
               5760 ;
               5761 ;MID$ - Return sub-string.
               5762 ;Result is string.
               5763 ;
001E9E CD      5764 MIDS:           CALL	EXPRS
001E9F 3C 
001EA0 18 
001EA1 CD      5765 CALL	COMMA
001EA2 A2 
001EA3 20 
001EA4 CD      5766 CALL	PUSHS		;SAVE STRING ON STACK
001EA5 19 
001EA6 20 
001EA7 CD      5767 CALL	EXPRI
001EA8 33 
001EA9 18 
001EAA C1      5768 POP	BC
001EAB CD      5769 CALL	POPS
001EAC 37 
001EAD 20 
001EAE D9      5770 EXX
001EAF 7D      5771 LD	A,L
001EB0 D9      5772 EXX
001EB1 B7      5773 OR	A
001EB2 28      5774 JR	Z,MIDS1
001EB3 0D 
001EB4 3D      5775 DEC	A
001EB5 6F      5776 LD	L,A
001EB6 93      5777 SUB	E
001EB7 1E      5778 LD	E,0
001EB8 00 
001EB9 30      5779 JR	NC,MIDS1
001EBA 06 
001EBB ED      5780 NEG
001EBC 44 
001EBD 4F      5781 LD	C,A
001EBE CD      5782 CALL	RIGHT1
001EBF 1D 
001EC0 1F 
001EC1 CD      5783 MIDS1:          CALL	NXT
001EC2 0B 
001EC3 45 
001EC4 FE      5784 CP	','
001EC5 2C 
001EC6 28      5785 JR	Z,LEFT1
001EC7 1A 
001EC8 CD      5786 CALL	BRAKET
001EC9 AE 
001ECA 20 
001ECB 3E      5787 LD	A,80H
001ECC 80 
001ECD C9      5788 RET
               5789 ;
               5790 ;LEFT$ - Return left part of string.
               5791 ;Carry cleared if entire string returned.
               5792 ;Result is string.
               5793 ;
001ECE CD      5794 LEFTS:          CALL	EXPRS
001ECF 3C 
001ED0 18 
001ED1 CD      5795 CALL	NXT
001ED2 0B 
001ED3 45 
001ED4 FE      5796 CP	','
001ED5 2C 
001ED6 28      5797 JR	Z,LEFT1
001ED7 0A 
001ED8 CD      5798 CALL	BRAKET
001ED9 AE 
001EDA 20 
001EDB 7B      5799 LD	A,E
001EDC B7      5800 OR	A
001EDD 28      5801 JR	Z,LEFT3
001EDE 1A 
001EDF 1D      5802 DEC	E
001EE0 18      5803 JR	LEFT3
001EE1 17 
               5804 ;
001EE2 FD      5805 LEFT1:          INC	IY
001EE3 23 
001EE4 CD      5806 CALL	PUSHS		;SAVE STRING ON STACK
001EE5 19 
001EE6 20 
001EE7 CD      5807 CALL	EXPRI
001EE8 33 
001EE9 18 
001EEA C1      5808 POP	BC
001EEB CD      5809 CALL	POPS
001EEC 37 
001EED 20 
001EEE CD      5810 CALL	BRAKET
001EEF AE 
001EF0 20 
001EF1 D9      5811 EXX
001EF2 7D      5812 LD	A,L
001EF3 D9      5813 EXX
001EF4 BB      5814 CP	E
001EF5 30      5815 JR	NC,LEFT3
001EF6 02 
001EF7 6B      5816 LD	L,E		;FOR RIGHT$
001EF8 5F      5817 LEFT2:          LD	E,A
001EF9 3E      5818 LEFT3:          LD	A,80H		;STRING MARKER
001EFA 80 
001EFB C9      5819 RET
               5820 ;
               5821 ;RIGHT$ - Return right part of string.
               5822 ;Result is string.
               5823 ;
001EFC CD      5824 RIGHTS:         CALL	EXPRS
001EFD 3C 
001EFE 18 
001EFF CD      5825 CALL	NXT
001F00 0B 
001F01 45 
001F02 FE      5826 CP	','
001F03 2C 
001F04 28      5827 JR	Z,RIGHT0
001F05 0C 
001F06 CD      5828 CALL	BRAKET
001F07 AE 
001F08 20 
001F09 7B      5829 LD	A,E
001F0A B7      5830 OR	A
001F0B 28      5831 JR	Z,LEFT3
001F0C EC 
001F0D 3D      5832 DEC	A
001F0E 0E      5833 LD	C,1
001F0F 01 
001F10 18      5834 JR	RIGHT2
001F11 0A 
               5835 ;
001F12 CD      5836 RIGHT0:         CALL	LEFT1
001F13 E2 
001F14 1E 
001F15 D0      5837 RET	NC
001F16 1C      5838 INC	E
001F17 1D      5839 DEC	E
001F18 C8      5840 RET	Z
001F19 4B      5841 LD	C,E
001F1A 7D      5842 LD	A,L
001F1B 93      5843 SUB	E
001F1C 6F      5844 RIGHT2:         LD	L,A
001F1D 06      5845 RIGHT1:         LD	B,0
001F1E 00 
001F1F 62      5846 LD	H,D
001F20 58      5847 LD	E,B
001F21 ED      5848 LDIR			;MOVE
001F22 B0 
001F23 3E      5849 LD	A,80H
001F24 80 
001F25 C9      5850 RET
               5851 ;
               5852 ;STRING$ - Return n concatenations of a string.
               5853 ;Result is string.
               5854 ;
001F26 CD      5855 STRING_:        CALL	EXPRI
001F27 33 
001F28 18 
001F29 CD      5856 CALL	COMMA
001F2A A2 
001F2B 20 
001F2C D9      5857 EXX
001F2D 7D      5858 LD	A,L
001F2E D9      5859 EXX
001F2F F5      5860 PUSH	AF
001F30 CD      5861 CALL	EXPRS
001F31 3C 
001F32 18 
001F33 CD      5862 CALL	BRAKET
001F34 AE 
001F35 20 
001F36 F1      5863 POP	AF
001F37 B7      5864 OR	A
001F38 28      5865 JR	Z,LEFT2		;N=0
001F39 BE 
001F3A 3D      5866 DEC	A
001F3B 4F      5867 LD	C,A
001F3C 3E      5868 LD	A,80H		;STRING MARKER
001F3D 80 
001F3E C8      5869 RET	Z
001F3F 1C      5870 INC	E
001F40 1D      5871 DEC	E
001F41 C8      5872 RET	Z		;NULL STRING
001F42 43      5873 LD	B,E
001F43 62      5874 LD	H,D
001F44 2E      5875 LD	L,0
001F45 00 
001F46 C5      5876 STRIN1:         PUSH	BC
001F47 7E      5877 STRIN2:         LD	A,(HL)
001F48 23      5878 INC	HL
001F49 12      5879 LD	(DE),A
001F4A 1C      5880 INC	E
001F4B 3E      5881 LD	A,19
001F4C 13 
001F4D CA      5882 JP	Z,ERROR_		;"String too long"
001F4E 44 
001F4F 3F 
001F50 10      5883 DJNZ	STRIN2
001F51 F5 
001F52 C1      5884 POP	BC
001F53 0D      5885 DEC	C
001F54 20      5886 JR	NZ,STRIN1
001F55 F0 
001F56 3E      5887 LD	A,80H
001F57 80 
001F58 C9      5888 RET
               5889 ;
               5890 ;SUBROUTINES
               5891 ;
               5892 ;TEST - Test HLH'L' for zero
               5893 ;  Outputs: Z-flag set & A=0 if zero
               5894 ; Destroys: A,F
               5895 ;
001F59 7C      5896 TEST:           LD	A,H
001F5A B5      5897 OR	L
001F5B D9      5898 EXX
001F5C B4      5899 OR	H
001F5D B5      5900 OR	L
001F5E D9      5901 EXX
001F5F C9      5902 RET
               5903 ;
               5904 ;DECODE - Decode line number in pseudo-binary.
               5905 ;   Inputs: IY = Text pointer.
               5906 ;  Outputs: HL=0, H'L'=line number, C=0.
               5907 ; Destroys: A,C,H,L,H',L',IY,F
               5908 ;
001F60 D9      5909 DECODE:         EXX
001F61 FD      5910 LD	A,(IY)
001F62 7E 
001F63 00 
001F64 FD      5911 INC	IY
001F65 23 
001F66 17      5912 RLA
001F67 17      5913 RLA
001F68 67      5914 LD	H,A
001F69 E6      5915 AND	0C0H
001F6A C0 
001F6B FD      5916 XOR	(IY)
001F6C AE 
001F6D 00 
001F6E FD      5917 INC	IY
001F6F 23 
001F70 6F      5918 LD	L,A
001F71 7C      5919 LD	A,H
001F72 17      5920 RLA
001F73 17      5921 RLA
001F74 E6      5922 AND	0C0H
001F75 C0 
001F76 FD      5923 XOR	(IY)
001F77 AE 
001F78 00 
001F79 FD      5924 INC	IY
001F7A 23 
001F7B 67      5925 LD	H,A
001F7C D9      5926 EXX
001F7D AF      5927 XOR	A
001F7E 4F      5928 LD	C,A
001F7F 67      5929 LD	H,A
001F80 6F      5930 LD	L,A
001F81 C9      5931 RET
               5932 ;
               5933 ;HEXSTR - convert numeric value to HEX string.
               5934 ;   Inputs: HLH'L'C = integer or floating-point number
               5935 ;  Outputs: String in string accumulator.
               5936 ;           E = string length. D = ACCS/256
               5937 ;
001F82 FD      5938 HEXSTS:         INC	IY		;SKIP TILDE
001F83 23 
001F84 CD      5939 CALL	ITEMN
001F85 7A 
001F86 18 
001F87 CD      5940 CALL	HEXSTR
001F88 8D 
001F89 1F 
001F8A 3E      5941 LD	A,80H
001F8B 80 
001F8C C9      5942 RET
               5943 ;
001F8D CD      5944 HEXSTR:         CALL	SFIX
001F8E 17 
001F8F 1C 
001F90 01      5945 LD	BC,8
001F91 08 
001F92 00 
001F93 11      5946 LD	DE,ACCS
001F94 00 
001F95 52 
001F96 C5      5947 HEXST1:         PUSH	BC
001F97 06      5948 LD	B,4
001F98 04 
001F99 AF      5949 XOR	A
001F9A D9      5950 HEXST2:         EXX
001F9B 29      5951 ADD	HL,HL
001F9C D9      5952 EXX
001F9D ED      5953 ADC	HL,HL
001F9E 6A 
001F9F 17      5954 RLA
001FA0 10      5955 DJNZ	HEXST2
001FA1 F8 
001FA2 C1      5956 POP	BC
001FA3 0D      5957 DEC	C
001FA4 F8      5958 RET	M
001FA5 28      5959 JR	Z,HEXST3
001FA6 06 
001FA7 B7      5960 OR	A
001FA8 20      5961 JR	NZ,HEXST3
001FA9 03 
001FAA B8      5962 CP	B
001FAB 28      5963 JR	Z,HEXST1
001FAC E9 
001FAD C6      5964 HEXST3:         ADD	A,90H
001FAE 90 
001FAF 27      5965 DAA
001FB0 CE      5966 ADC	A,40H
001FB1 40 
001FB2 27      5967 DAA
001FB3 12      5968 LD	(DE),A
001FB4 13      5969 INC	DE
001FB5 47      5970 LD	B,A
001FB6 18      5971 JR	HEXST1
001FB7 DE 
               5972 ;
               5973 ;Function STR - convert numeric value to ASCII string.
               5974 ;   Inputs: HLH'L'C = integer or floating-point number.
               5975 ;  Outputs: String in string accumulator.
               5976 ;           E = length, D = ACCS/256
               5977 ;           A = 80H (type=string)
               5978 ;
               5979 ;First normalise for decimal output:
               5980 ;
001FB8 CD      5981 STRS:           CALL	NXT
001FB9 0B 
001FBA 45 
001FBB FE      5982 CP	'~'
001FBC 7E 
001FBD 28      5983 JR	Z,HEXSTS
001FBE C3 
001FBF CD      5984 CALL	ITEMN
001FC0 7A 
001FC1 18 
001FC2 DD      5985 LD	IX,STAVAR
001FC3 21 
001FC4 00 
001FC5 54 
001FC6 DD      5986 LD	A,(IX+3)
001FC7 7E 
001FC8 03 
001FC9 B7      5987 OR	A
001FCA DD      5988 LD	IX,G9-1		;G9 FORMAT
001FCB 21 
001FCC F2 
001FCD 1F 
001FCE 28      5989 JR	Z,STR0
001FCF 04 
001FD0 DD      5990 STR:            LD	IX,STAVAR
001FD1 21 
001FD2 00 
001FD3 54 
001FD4 11      5991 STR0:           LD	DE,ACCS
001FD5 00 
001FD6 52 
001FD7 3E      5992 LD	A,37
001FD8 25 
001FD9 CD      5993 CALL	FPP
001FDA 15 
001FDB 45 
001FDC DA      5994 JP	C,ERROR_
001FDD 44 
001FDE 3F 
001FDF DD      5995 BIT	0,(IX+2)
001FE0 CB 
001FE1 02 
001FE2 46 
001FE3 3E      5996 STR1:           LD	A,80H		;STRING MARKER
001FE4 80 
001FE5 C8      5997 RET	Z
001FE6 79      5998 LD	A,C
001FE7 C6      5999 ADD	A,4
001FE8 04 
001FE9 BB      6000 STR2:           CP	E
001FEA 28      6001 JR	Z,STR1
001FEB F7 
001FEC EB      6002 EX	DE,HL
001FED 36      6003 LD	(HL),' '	;TRAILING SPACE
001FEE 20 
001FEF 23      6004 INC	HL
001FF0 EB      6005 EX	DE,HL
001FF1 18      6006 JR	STR2
001FF2 F6 
               6007 ;
001FF3 09      6008 G9:             DW	9
001FF4 00 
               6009 ;
               6010 ;STRING COMPARE
               6011 ;Compare string (DE) length B with string (HL) length C.
               6012 ;Result preset to false.
               6013 ;
001FF5 CD      6014 SCP:            CALL	SCP0
001FF6 02 
001FF7 20 
001FF8 3E      6015 ZERO:           LD	A,0
001FF9 00 
001FFA D9      6016 EXX
001FFB 67      6017 LD	H,A
001FFC 6F      6018 LD	L,A
001FFD D9      6019 EXX
001FFE 67      6020 LD	H,A
001FFF 6F      6021 LD	L,A
002000 4F      6022 LD	C,A
002001 C9      6023 RET
               6024 ;
002002 04      6025 SCP0:           INC	B
002003 0C      6026 INC	C
002004 05      6027 SCP1:           DEC	B
002005 28      6028 JR	Z,SCP2
002006 0A 
002007 0D      6029 DEC	C
002008 28      6030 JR	Z,SCP3
002009 0C 
00200A 1A      6031 LD	A,(DE)
00200B BE      6032 CP	(HL)
00200C C0      6033 RET	NZ
00200D 13      6034 INC	DE
00200E 23      6035 INC	HL
00200F 18      6036 JR	SCP1
002010 F3 
002011 B7      6037 SCP2:           OR	A
002012 0D      6038 DEC	C
002013 C8      6039 RET	Z
002014 37      6040 SCF
002015 C9      6041 RET
002016 B7      6042 SCP3:           OR	A
002017 0C      6043 INC	C
002018 C9      6044 RET
               6045 ;
               6046 ;PUSH$ - SAVE STRING ON STACK.
               6047 ;   Inputs: String in string accumulator.
               6048 ;           E = string length.
               6049 ;           A - saved on stack.
               6050 ; Destroys: B,C,D,E,H,L,IX,SP,F
               6051 ;
002019 21      6052 PUSHS:          LD	HL,ACCS
00201A 00 
00201B 52 
00201C CD      6053 CALL	CHECK
00201D 86 
00201E 32 
00201F DD      6054 POP	IX		;RETURN ADDRESS
002020 E1 
002021 B7      6055 OR	A		;CLEAR CARRY
002022 54      6056 LD	D,H
002023 4B      6057 LD	C,E
002024 ED      6058 SBC	HL,DE
002025 52 
002026 39      6059 ADD	HL,SP
002027 F9      6060 LD	SP,HL
002028 47      6061 LD	B,A
002029 C5      6062 PUSH	BC
00202A 28      6063 JR	Z,PUSHS1	;ZERO LENGTH
00202B 09 
00202C EB      6064 EX	DE,HL
00202D 06      6065 LD	B,0
00202E 00 
00202F 68      6066 LD	L,B		;L=0
002030 ED      6067 LDIR			;COPY TO STACK
002031 B0 
002032 CD      6068 CALL	CHECK
002033 86 
002034 32 
002035 DD      6069 PUSHS1:         JP	(IX)		;"RETURN"
002036 E9 
               6070 ;
               6071 ;POP$ - RESTORE STRING FROM STACK.
               6072 ;   Inputs: C = string length.
               6073 ;  Outputs: String in string accumulator.
               6074 ;           E = string length.
               6075 ; Destroys: B,C,D,E,H,L,IX,SP,F
               6076 ;
002037 DD      6077 POPS:           POP	IX		;RETURN ADDRESS
002038 E1 
002039 21      6078 LD	HL,0
00203A 00 
00203B 00 
00203C 44      6079 LD	B,H		;B=0
00203D 39      6080 ADD	HL,SP
00203E 11      6081 LD	DE,ACCS
00203F 00 
002040 52 
002041 0C      6082 INC	C
002042 0D      6083 DEC	C
002043 28      6084 JR	Z,POPS1		;ZERO LENGTH
002044 02 
002045 ED      6085 LDIR			;COPY FROM STACK
002046 B0 
002047 F9      6086 POPS1:          LD	SP,HL
002048 DD      6087 JP	(IX)		;"RETURN"
002049 E9 
               6088 ;
00204A FD      6089 BINDIG:         LD	A,(IY)
00204B 7E 
00204C 00 
00204D FE      6090 CP	'0'
00204E 30 
00204F D8      6091 RET	C
002050 FE      6092 CP	'1'+1
002051 32 
002052 3F      6093 CCF
002053 D8      6094 RET	C
002054 D6      6095 SUB	'0'
002055 30 
002056 C9      6096 RET
               6097 ;
002057 FD      6098 HEXDIG:         LD	A,(IY)
002058 7E 
002059 00 
00205A FE      6099 CP	'0'
00205B 30 
00205C D8      6100 RET	C
00205D FE      6101 CP	'9'+1
00205E 3A 
00205F 3F      6102 CCF
002060 D0      6103 RET	NC
002061 FE      6104 CP	'A'
002062 41 
002063 D8      6105 RET	C
002064 D6      6106 SUB	'A'-10
002065 37 
002066 FE      6107 CP	16
002067 10 
002068 3F      6108 CCF
002069 C9      6109 RET
               6110 ;
00206A FE      6111 RELOPQ:         CP	'>'
00206B 3E 
00206C D0      6112 RET	NC
00206D FE      6113 CP	'='
00206E 3D 
00206F D0      6114 RET	NC
002070 FE      6115 CP	'<'
002071 3C 
002072 C9      6116 RET
               6117 ;
002073 FD      6118 SAVEev:           INC	IY
002074 23 
002075 E6      6119 AND	0FH
002076 0F 
002077 08      6120 SAVE1:          EX	AF,AF'
002078 FA      6121 JP	M,MISMATev
002079 6E 
00207A 18 
00207B 08      6122 EX	AF,AF'
00207C E3      6123 EX	(SP),HL
00207D D9      6124 EXX
00207E E5      6125 PUSH	HL
00207F D9      6126 EXX
002080 F5      6127 PUSH	AF
002081 C5      6128 PUSH	BC
002082 E9      6129 JP	(HL)
               6130 ;
002083 08      6131 DOIT:           EX	AF,AF'
002084 FA      6132 JP	M,MISMATev
002085 6E 
002086 18 
002087 D9      6133 EXX
002088 C1      6134 POP	BC		;RETURN ADDRESS
002089 D9      6135 EXX
00208A 79      6136 LD	A,C
00208B C1      6137 POP	BC
00208C 47      6138 LD	B,A
00208D F1      6139 POP	AF		;OPERATOR
00208E D9      6140 EXX
00208F EB      6141 EX	DE,HL
002090 E1      6142 POP	HL
002091 D9      6143 EXX
002092 EB      6144 EX	DE,HL
002093 E1      6145 POP	HL
002094 D9      6146 EXX
002095 C5      6147 PUSH	BC
002096 D9      6148 EXX
002097 CD      6149 CALL	FPP
002098 15 
002099 45 
00209A 38      6150 JR	C,ERROR1ev
00209B 1C 
00209C AF      6151 XOR	A
00209D 08      6152 EX	AF,AF'		;TYPE
00209E FD      6153 LD	A,(IY)
00209F 7E 
0020A0 00 
0020A1 C9      6154 RET
               6155 ;
0020A2 CD      6156 COMMA:          CALL	NXT
0020A3 0B 
0020A4 45 
0020A5 FD      6157 INC	IY
0020A6 23 
0020A7 FE      6158 CP	','
0020A8 2C 
0020A9 C8      6159 RET	Z
0020AA 3E      6160 LD	A,5
0020AB 05 
0020AC 18      6161 JR	ERROR1ev		;"Missing ,"
0020AD 0A 
               6162 ;
0020AE CD      6163 BRAKET:         CALL	NXT
0020AF 0B 
0020B0 45 
0020B1 FD      6164 INC	IY
0020B2 23 
0020B3 FE      6165 CP	')'
0020B4 29 
0020B5 C8      6166 RET	Z
0020B6 3E      6167 LD	A,27
0020B7 1B 
0020B8 C3      6168 ERROR1ev:         JP	ERROR_		;"Missing )"
0020B9 44 
0020BA 3F 
               6169 ;
0020BB E5      6170 DISPT2:         PUSH	HL
0020BC 21      6171 LD	HL,SOPTBL
0020BD F6 
0020BE 16 
0020BF 18      6172 JR	DISPT0
0020C0 06 
               6173 ;
0020C1 E5      6174 DISPATev:         PUSH	HL
0020C2 D6      6175 SUB	FUNTOK
0020C3 8D 
0020C4 21      6176 LD	HL,FUNTBL
0020C5 82 
0020C6 16 
0020C7 C5      6177 DISPT0:         PUSH	BC
0020C8 87      6178 ADD	A,A
0020C9 4F      6179 LD	C,A
0020CA 06      6180 LD	B,0
0020CB 00 
0020CC 09      6181 ADD	HL,BC
0020CD 7E      6182 LD	A,(HL)
0020CE 23      6183 INC	HL
0020CF 66      6184 LD	H,(HL)
0020D0 6F      6185 LD	L,A
0020D1 C1      6186 POP	BC
0020D2 E3      6187 EX	(SP),HL
0020D3 C9      6188 RET			;OFF TO ROUTINE
               6189 ;
0020D4 7A      6190 STOREA:         LD	A,D
0020D5 D5      6191 PUSH	DE
0020D6 E5      6192 PUSH	HL
0020D7 DD      6193 EX	(SP),IX
0020D8 E3 
0020D9 B7      6194 OR	A
0020DA FA      6195 JP	M,STORA1
0020DB EB 
0020DC 20 
0020DD CD      6196 CALL	LOADN
0020DE 25 
0020DF 19 
0020E0 DD      6197 EX	(SP),IX
0020E1 E3 
0020E2 CD      6198 CALL	MODIFY
0020E3 CE 
0020E4 31 
0020E5 E1      6199 POP	HL
0020E6 D1      6200 POP	DE
0020E7 4A      6201 LD	C,D
0020E8 06      6202 LD	B,0
0020E9 00 
0020EA C9      6203 RET
               6204 ;
0020EB D5      6205 STORA1:         PUSH	DE
0020EC CD      6206 CALL	LOADS
0020ED 0E 
0020EE 1A 
0020EF E1      6207 POP	HL
0020F0 DD      6208 EX	(SP),IX
0020F1 E3 
0020F2 CD      6209 CALL	MODIFS
0020F3 18 
0020F4 32 
0020F5 E1      6210 POP	HL
0020F6 D1      6211 POP	DE
0020F7 01      6212 LD	BC,4
0020F8 04 
0020F9 00 
0020FA C9      6213 RET
               6214 ;
               6215 ; Assign to whole array:
               6216 ; array1() = array expression
               6217 ; array1() = n1,n2,n3,n4...
               6218 ; array1() = n (n copied into all elements)
               6219 ;
               6220 ; Inputs: D = type (65, 68, 69, 193)
               6221 ;         E = opcode ('=' for store, '+','-' etc. for modify)
               6222 ;         HL = IX = VARPTR
               6223 ;         IY = text pointer
               6224 ;
0020FB CB      6225 LETARR:         RES	6,D		;Lose array marker
0020FC B2 
0020FD D5      6226 PUSH	DE		;Save type & opcode
0020FE CD      6227 CALL	GETAR1		;Get and check indirect link
0020FF CD 
002100 19 
002101 CD      6228 CALL	ARRLEN		;DE = elements, HL addresses first
002102 A4 
002103 19 
002104 C1      6229 POP	BC
002105 78      6230 LD	A,B		;A = type
002106 D5      6231 PUSH	DE
002107 C5      6232 PUSH	BC
002108 E5      6233 PUSH	HL
002109 CD      6234 CALL	X14OR5		;DE = size in bytes
00210A AD 
00210B 36 
00210C 42      6235 LD	B,D
00210D 4B      6236 LD	C,E
00210E DD      6237 POP	IX
00210F E1 
002110 D1      6238 POP	DE
               6239 ;
               6240 ; (SP) = number of elements
               6241 ; BC = size in bytes
               6242 ; DE = type & opcode
               6243 ; IX = address of first element
               6244 ;
               6245 ; allocate space on stack and zero it:
               6246 ;
002111 AF      6247 XOR	A		;Clear carry and zero error code
002112 ED      6248 SBC	HL,HL
002113 62 
002114 39      6249 ADD	HL,SP		;HL = SP
002115 ED      6250 SBC	HL,BC
002116 42 
002117 38      6251 JR	C,ERROR1ev	;'No room'
002118 9F 
002119 C5      6252 PUSH	BC
00211A ED      6253 LD	BC,(FREE)
00211B 4B 
00211C E0 
00211D 54 
00211E 04      6254 INC	B		;Safety margin
00211F ED      6255 SBC	HL,BC
002120 42 
002121 09      6256 ADD	HL,BC
002122 C1      6257 POP	BC
002123 38      6258 JR	C,ERROR1ev	;'No room'
002124 93 
002125 F9      6259 LD	SP,HL
002126 36      6260 LETA0:          LD	(HL),0
002127 00 
002128 23      6261 INC	HL
002129 0B      6262 DEC	BC
00212A 78      6263 LD	A,B
00212B B1      6264 OR	C
00212C 20      6265 JR	NZ,LETA0	;Clear allocated stack
00212D F8 
00212E 4E      6266 LD	C,(HL)
00212F 23      6267 INC	HL
002130 46      6268 LD	B,(HL)
002131 67      6269 LD	H,A
002132 6F      6270 LD	L,A
002133 39      6271 ADD	HL,SP
               6272 ;
               6273 ;	CALL	NXT
               6274 ;	CP	TEVAL		;;EVAL not currently supported
               6275 ;
002134 CD      6276 CALL	EXPRA
002135 3C 
002136 21 
002137 F9      6277 LD	SP,HL		;Update stack pointer
002138 C1      6278 POP	BC		;Level stack
002139 C3      6279 JP	XEQ
00213A 99 
00213B 24 
               6280 ;
               6281 ; EXPRA - Evaluate array expression, strictly left-to-right;
               6282 ; Note: String array arithmetic (concatenation) is not supported
               6283 ; because it would require a way of recovering freed string space.
               6284 ;
               6285 ;   Inputs: BC = number of elements
               6286 ;           DE = type & opcode
               6287 ;           HL = address of temporary stack space
               6288 ;           IX = address of first element of array
               6289 ;  Outputs: HL = value to set stack pointer to
               6290 ;
00213C 3E      6291 EXPRA:          LD	A,'='
00213D 3D 
00213E FD      6292 DEC	IY
00213F 2B 
002140 FD      6293 EXPRA1:         INC	IY
002141 23 
002142 D5      6294 PUSH	DE
002143 C5      6295 PUSH	BC
002144 E5      6296 PUSH	HL
002145 DD      6297 PUSH	IX
002146 E5 
002147 5F      6298 LD	E,A		;Operator
002148 CD      6299 CALL	ITEMA
002149 B6 
00214A 21 
00214B DD      6300 POP	IX
00214C E1 
00214D E1      6301 POP	HL
00214E C1      6302 POP	BC
00214F D1      6303 POP	DE
002150 CD      6304 CALL	NXT
002151 0B 
002152 45 
002153 FE      6305 CP	','		;List?
002154 2C 
002155 28      6306 JR	Z,EXPRA3
002156 13 
002157 CD      6307 CALL	TERMQ
002158 36 
002159 35 
00215A 20      6308 JR	NZ,EXPRA1
00215B E4 
               6309 ;
               6310 ; Update destination array from stack:
               6311 ;
00215C C5      6312 EXPRA2:         PUSH	BC
00215D CD      6313 CALL	STOREA		;(IX) <- (HL)
00215E D4 
00215F 20 
002160 09      6314 ADD	HL,BC
002161 DD      6315 ADD	IX,BC
002162 09 
002163 C1      6316 POP	BC
002164 0B      6317 DEC	BC
002165 78      6318 LD	A,B
002166 B1      6319 OR	C
002167 20      6320 JR	NZ,EXPRA2
002168 F3 
002169 C9      6321 RET
               6322 ;
               6323 ; Update destination array from list (n.b. not transferred via stack):
               6324 ;
00216A C5      6325 EXPRA3:         PUSH	BC
00216B CD      6326 CALL	STOREA		;(IX) <- (HL)
00216C D4 
00216D 20 
00216E FD      6327 EXPRA4:         INC	IY		;Bump past comma
00216F 23 
002170 09      6328 ADD	HL,BC
002171 DD      6329 ADD	IX,BC
002172 09 
002173 C1      6330 POP	BC
002174 0B      6331 DEC	BC
002175 78      6332 LD	A,B
002176 B1      6333 OR	C
002177 C8      6334 RET	Z
002178 C5      6335 PUSH	BC
002179 D5      6336 PUSH	DE
00217A E5      6337 PUSH	HL
00217B DD      6338 PUSH	IX
00217C E5 
00217D CB      6339 BIT	7,D
00217E 7A 
00217F 20      6340 JR	NZ,EXPRA5
002180 0E 
002181 D5      6341 PUSH	DE
002182 CD      6342 CALL	EXPRN
002183 2C 
002184 18 
002185 D1      6343 POP	DE
002186 DD      6344 POP	IX
002187 E1 
002188 DD      6345 PUSH	IX
002189 E5 
00218A CD      6346 CALL	MODIFY
00218B CE 
00218C 31 
00218D 18      6347 JR	EXPRA6
00218E 0C 
               6348 ;
00218F D5      6349 EXPRA5:         PUSH	DE
002190 CD      6350 CALL	EXPRS
002191 3C 
002192 18 
002193 E1      6351 POP	HL
002194 DD      6352 POP	IX
002195 E1 
002196 DD      6353 PUSH	IX
002197 E5 
002198 CD      6354 CALL	MODIFS
002199 18 
00219A 32 
00219B DD      6355 EXPRA6:         POP	IX
00219C E1 
00219D E1      6356 POP	HL
00219E D1      6357 POP	DE
00219F 01      6358 LD	BC,4
0021A0 04 
0021A1 00 
0021A2 CB      6359 BIT	7,D
0021A3 7A 
0021A4 20      6360 JR	NZ,EXPRA7
0021A5 01 
0021A6 4A      6361 LD	C,D
0021A7 CD      6362 EXPRA7:         CALL	NXT
0021A8 0B 
0021A9 45 
0021AA FE      6363 CP	','
0021AB 2C 
0021AC 28      6364 JR	Z,EXPRA4
0021AD C0 
0021AE D1      6365 POP	DE
0021AF 09      6366 EXPRA8:         ADD	HL,BC		;Skip remaining elements
0021B0 1B      6367 DEC	DE
0021B1 7A      6368 LD	A,D
0021B2 B3      6369 OR	E
0021B3 20      6370 JR	NZ,EXPRA8
0021B4 FA 
0021B5 C9      6371 RET
               6372 ;
               6373 ; ITEMA: evaluate and operate on array item
               6374 ;   Inputs: D = type
               6375 ;           E = operator ('=' for first item)
               6376 ;           BC = number of elements
               6377 ;           HL = pointer to destination on stack
               6378 ;           IY = text pointer
               6379 ;  Outputs: IY updated
               6380 ; Destroys: Everything except SP
               6381 ;
0021B6 CD      6382 ITEMA:          CALL	NXT
0021B7 0B 
0021B8 45 
0021B9 E5      6383 PUSH	HL		;Pointer to destination
0021BA C5      6384 PUSH	BC		;Number of elements
0021BB FD      6385 PUSH	IY		;In case normal expression
0021BC E5 
0021BD D5      6386 PUSH	DE		;Ditto
0021BE FE      6387 CP	'-'
0021BF 2D 
0021C0 20      6388 JR	NZ,ITEMA1	;Not unary minus
0021C1 0C 
0021C2 7B      6389 LD	A,E
0021C3 FE      6390 CP	'='
0021C4 3D 
0021C5 20      6391 JR	NZ,ITEMA1	;Not unary minus
0021C6 07 
0021C7 FD      6392 INC	IY		;Bump past '-'
0021C8 23 
0021C9 CD      6393 CALL	NXT
0021CA 0B 
0021CB 45 
0021CC 1E      6394 LD	E,'-'		;Unary minus
0021CD 2D 
0021CE D5      6395 ITEMA1:         PUSH	DE		;Type and operator
0021CF CD      6396 CALL	GETVAR
0021D0 E3 
0021D1 41 
0021D2 D1      6397 POP	DE		;Type & operator
0021D3 20      6398 JR	NZ,ITEMA4	;Non-array expression
0021D4 56 
0021D5 CB      6399 BIT	6,A
0021D6 77 
0021D7 28      6400 JR	Z,ITEMA4	;Not a whole array
0021D8 52 
0021D9 C1      6401 POP	BC		;Junk saved original op
0021DA C1      6402 POP	BC		;Junk saved text pointer
0021DB CB      6403 RES	6,A
0021DC B7 
0021DD BA      6404 CP	D
0021DE C2      6405 JP	NZ,MISMATev	;'Type mismatch'
0021DF 6E 
0021E0 18 
0021E1 D5      6406 PUSH	DE		;Save type & operator again
0021E2 CD      6407 CALL	GETAR1
0021E3 CD 
0021E4 19 
0021E5 CD      6408 CALL	ARRLEN
0021E6 A4 
0021E7 19 
0021E8 42      6409 LD	B,D		;BC = number of elements
0021E9 4B      6410 LD	C,E
0021EA D1      6411 POP	DE		;Restore type & operator
0021EB E3      6412 EX	(SP),HL
0021EC CD      6413 CALL	NXT
0021ED 0B 
0021EE 45 
0021EF DD      6414 POP	IX		;Pointer to source
0021F0 E1 
0021F1 FE      6415 CP	'.'
0021F2 2E 
0021F3 CA      6416 JP	Z,ARRDOT	;Dot product
0021F4 83 
0021F5 22 
0021F6 B7      6417 OR	A
0021F7 ED      6418 SBC	HL,BC		;Same number of elements?
0021F8 42 
0021F9 C2      6419 JP	NZ,MISMATev	;'Type mismatch'
0021FA 6E 
0021FB 18 
0021FC E1      6420 POP	HL		;Pointer to destination
0021FD CB      6421 BIT	7,D
0021FE 7A 
0021FF 20      6422 JR	NZ,ITEMA3
002200 1D 
               6423 ;
               6424 ; Process numeric array item:
               6425 ;
002201 C5      6426 ITEMA2:         PUSH	BC
002202 E5      6427 PUSH	HL
002203 7A      6428 LD	A,D
002204 CD      6429 CALL	LOADN
002205 25 
002206 19 
002207 DD      6430 EX	(SP),IX
002208 E3 
002209 D5      6431 PUSH	DE
00220A CD      6432 CALL	MODIFY
00220B CE 
00220C 31 
00220D D1      6433 POP	DE
00220E DD      6434 EX	(SP),IX
00220F E3 
002210 E1      6435 POP	HL
002211 4A      6436 LD	C,D
002212 06      6437 LD	B,0
002213 00 
002214 DD      6438 ADD	IX,BC
002215 09 
002216 09      6439 ADD	HL,BC
002217 C1      6440 POP	BC
002218 0B      6441 DEC	BC
002219 78      6442 LD	A,B
00221A B1      6443 OR	C
00221B 20      6444 JR	NZ,ITEMA2
00221C E4 
00221D C9      6445 RET
               6446 ;
               6447 ; Process string array item (just copy descriptors):
               6448 ;
00221E EB      6449 ITEMA3:         EX	DE,HL		;DE = destination
00221F 60      6450 LD	H,B
002220 69      6451 LD	L,C
002221 29      6452 ADD	HL,HL
002222 29      6453 ADD	HL,HL
002223 44      6454 LD	B,H
002224 4D      6455 LD	C,L
002225 DD      6456 PUSH	IX
002226 E5 
002227 E1      6457 POP	HL		;HL = source
002228 ED      6458 LDIR
002229 B0 
00222A C9      6459 RET
               6460 ;
               6461 ; Process numeric non-array item:
               6462 ;
00222B D1      6463 ITEMA4:         POP	DE		;Restore original operator
00222C FD      6464 POP	IY		;Restore original text pointer
00222D E1 
00222E CB      6465 BIT	7,D
00222F 7A 
002230 20      6466 JR	NZ,ITEMA5
002231 28 
002232 D5      6467 PUSH	DE
002233 CD      6468 CALL	EXPR45		;; should be EXP345
002234 0B 
002235 18 
002236 79      6469 LD	A,C		;Exponent
002237 D1      6470 POP	DE		;Type / operator
002238 C1      6471 POP	BC		;Count
002239 DD      6472 POP	IX
00223A E1 
00223B E5      6473 ITEMA7:         PUSH	HL
00223C C5      6474 PUSH	BC
00223D D5      6475 PUSH	DE
00223E D9      6476 EXX
00223F E5      6477 PUSH	HL
002240 D9      6478 EXX
002241 F5      6479 PUSH	AF
002242 4F      6480 LD	C,A
002243 CD      6481 CALL	MODIFY
002244 CE 
002245 31 
002246 F1      6482 POP	AF
002247 D9      6483 EXX
002248 E1      6484 POP	HL
002249 D9      6485 EXX
00224A D1      6486 POP	DE
00224B 4A      6487 LD	C,D
00224C 06      6488 LD	B,0
00224D 00 
00224E DD      6489 ADD	IX,BC
00224F 09 
002250 C1      6490 POP	BC
002251 0B      6491 DEC	BC
002252 ED      6492 SBC	HL,HL
002253 62 
002254 ED      6493 SBC	HL,BC
002255 42 
002256 E1      6494 POP	HL
002257 20      6495 JR	NZ,ITEMA7	;Copy into every element!
002258 E2 
002259 C9      6496 RET
               6497 ;
               6498 ; Process string non-array item:
               6499 ;
00225A CD      6500 ITEMA5:         CALL	EXPRS
00225B 3C 
00225C 18 
00225D 7B      6501 LD	A,E
00225E B7      6502 OR	A
00225F 28      6503 JR	Z,ITEMA0
002260 0B 
002261 21      6504 LD	HL,ACCS
002262 00 
002263 52 
002264 11      6505 LD	DE,BUFFER
002265 00 
002266 53 
002267 4F      6506 LD	C,A
002268 06      6507 LD	B,0
002269 00 
00226A ED      6508 LDIR
00226B B0 
00226C C1      6509 ITEMA0:         POP	BC
00226D DD      6510 POP	IX
00226E E1 
00226F D9      6511 EXX
002270 6F      6512 LD	L,A
002271 D9      6513 EXX
002272 11      6514 LD	DE,4
002273 04 
002274 00 
002275 21      6515 LD	HL,BUFFER
002276 00 
002277 53 
002278 CD      6516 ITEMA6:         CALL	STORE4
002279 09 
00227A 32 
00227B DD      6517 ADD	IX,DE
00227C 19 
00227D 0B      6518 DEC	BC
00227E 78      6519 LD	A,B
00227F B1      6520 OR	C
002280 20      6521 JR	NZ,ITEMA6	;Copy into every element!
002281 F6 
002282 C9      6522 RET
               6523 ;
               6524 ; Array dot-product:
               6525 ;
002283 FD      6526 ARRDOT:         INC	IY		;Bump past dot
002284 23 
002285 7A      6527 LD	A,D		;Type
002286 B7      6528 OR	A
002287 FA      6529 JP	M,MISMATev	;'Type mismatch'
002288 6E 
002289 18 
00228A EB      6530 EX	DE,HL
00228B E1      6531 POP	HL
               6532 ;
               6533 ; A = type
               6534 ; DE = no. of elements in destination array (outer loop counter)
               6535 ; IX = pointer to first source array data
               6536 ; HL = pointer to destination data
               6537 ; IY = text pointer
               6538 ;
00228C D5      6539 PUSH	DE
00228D E5      6540 PUSH	HL
00228E DD      6541 PUSH	IX
00228F E5 
002290 F5      6542 PUSH	AF
002291 CD      6543 CALL	GETARR
002292 BD 
002293 19 
002294 CD      6544 CALL	ARRLEN
002295 A4 
002296 19 
002297 F1      6545 POP	AF
002298 EB      6546 EX	DE,HL
002299 DD      6547 LD	L,(IX)
00229A 6E 
00229B 00 
00229C DD      6548 LD	H,(IX+1)	;Indirect pointer
00229D 66 
00229E 01 
00229F 6E      6549 LD	L,(HL)		;No. of dimensions
0022A0 2D      6550 DEC	L
0022A1 EB      6551 EX	DE,HL
0022A2 DD      6552 POP	IX
0022A3 E1 
0022A4 C1      6553 POP	BC
0022A5 D1      6554 POP	DE
               6555 ;
0022A6 FD      6556 PUSH	IY		;Save text pointer
0022A7 E5 
0022A8 C5      6557 PUSH	BC		;Save destination pointer
0022A9 E5      6558 PUSH	HL
0022AA FD      6559 POP	IY
0022AB E1 
               6560 ;
               6561 ; Get row counts:
               6562 ;
0022AC 21      6563 LD	HL,1
0022AD 01 
0022AE 00 
0022AF 28      6564 JR	Z,ARR1D
0022B0 06 
0022B1 FD      6565 LD	H,(IY-1)
0022B2 66 
0022B3 FF 
0022B4 FD      6566 LD	L,(IY-2)
0022B5 6E 
0022B6 FE 
0022B7 D5      6567 ARR1D:          PUSH	DE
0022B8 EB      6568 EX	DE,HL
0022B9 CD      6569 CALL	X14OR5
0022BA AD 
0022BB 36 
0022BC EB      6570 EX	DE,HL
0022BD D1      6571 POP	DE
0022BE DD      6572 LD	B,(IX-1)
0022BF 46 
0022C0 FF 
0022C1 DD      6573 LD	C,(IX-2)
0022C2 4E 
0022C3 FE 
               6574 ;
               6575 ; A = type, Z-flag set if first array is one-dimensional
               6576 ; BC = no. of rows of first source array (inner loop counter)
               6577 ; DE = no. of elements in destination array (outer loop counter)
               6578 ; HL = no. of rows of second source array * size of each element
               6579 ; IX = pointer to first source array
               6580 ; IY = pointer to second source array
               6581 ; (SP) = pointer to destination data
               6582 ;
               6583 ; Dot-product outer loop:
               6584 ;
0022C4 C5      6585 OUTER:          PUSH	BC		;1
0022C5 D5      6586 PUSH	DE		;2
0022C6 E5      6587 PUSH	HL		;3
0022C7 DD      6588 PUSH	IX		;4
0022C8 E5 
0022C9 FD      6589 PUSH	IY		;5
0022CA E5 
0022CB 50      6590 LD	D,B
0022CC 59      6591 LD	E,C
0022CD F5      6592 PUSH	AF
0022CE CD      6593 CALL	ZERO		;Zero accumulator
0022CF F8 
0022D0 1F 
0022D1 F1      6594 POP	AF
0022D2 D5      6595 INNER:          PUSH	DE		;6
0022D3 C5      6596 PUSH	BC		;Save accumulator
0022D4 E5      6597 PUSH	HL
0022D5 D9      6598 EXX
0022D6 E5      6599 PUSH	HL
0022D7 D9      6600 EXX
               6601 ;
0022D8 CD      6602 CALL	LOADN		;Load from (IX)
0022D9 25 
0022DA 19 
0022DB DD      6603 PUSH	IX
0022DC E5 
0022DD FD      6604 EX	(SP),IY
0022DE E3 
0022DF DD      6605 POP	IX
0022E0 E1 
               6606 ;
0022E1 CD      6607 CALL	DLOADN		;Load from (IY)
0022E2 E7 
0022E3 19 
0022E4 DD      6608 PUSH	IX
0022E5 E5 
0022E6 FD      6609 EX	(SP),IY
0022E7 E3 
0022E8 DD      6610 POP	IX
0022E9 E1 
               6611 ;
0022EA F5      6612 PUSH	AF
0022EB 3E      6613 LD	A,10
0022EC 0A 
0022ED CD      6614 CALL	FPP		;Multiply
0022EE 15 
0022EF 45 
0022F0 DA      6615 JP	C,ERROR_
0022F1 44 
0022F2 3F 
0022F3 F1      6616 POP	AF
               6617 ;
0022F4 D9      6618 EXX			;Restore accumulator
0022F5 EB      6619 EX	DE,HL
0022F6 E1      6620 POP	HL
0022F7 D9      6621 EXX
0022F8 EB      6622 EX	DE,HL
0022F9 E1      6623 POP	HL
0022FA 08      6624 EX	AF,AF'
0022FB 79      6625 LD	A,C
0022FC C1      6626 POP	BC
0022FD 47      6627 LD	B,A
0022FE 08      6628 EX	AF,AF'
               6629 ;
0022FF F5      6630 PUSH	AF
002300 3E      6631 LD	A,11
002301 0B 
002302 CD      6632 CALL	FPP		;Accumulate
002303 15 
002304 45 
002305 DA      6633 JP	C,ERROR_
002306 44 
002307 3F 
002308 F1      6634 POP	AF
               6635 ;
               6636 ; Bump pointers:
               6637 ;
002309 D1      6638 POP	DE		;5
               6639 ;
00230A D9      6640 EXX
00230B 4F      6641 LD	C,A
00230C 06      6642 LD	B,0
00230D 00 
00230E DD      6643 ADD	IX,BC
00230F 09 
002310 D1      6644 POP	DE
002311 C1      6645 POP	BC
002312 E3      6646 EX	(SP),HL
002313 EB      6647 EX	DE,HL
002314 FD      6648 ADD	IY,DE
002315 19 
002316 EB      6649 EX	DE,HL
002317 E3      6650 EX	(SP),HL
002318 C5      6651 PUSH	BC
002319 D5      6652 PUSH	DE
00231A D9      6653 EXX
               6654 ;
               6655 ; Count inner loops:
               6656 ;
00231B 1B      6657 DEC	DE		;Inner loop counter
00231C 1C      6658 INC	E
00231D 1D      6659 DEC	E
00231E 20      6660 JR	NZ,INNER
00231F B2 
002320 14      6661 INC	D
002321 15      6662 DEC	D
002322 20      6663 JR	NZ,INNER
002323 AE 
               6664 ;
002324 FD      6665 POP	IY		;4
002325 E1 
002326 DD      6666 POP	IX		;3
002327 E1 
               6667 ;
               6668 ; Swap pointers:
               6669 ;
002328 D9      6670 EXX
002329 08      6671 EX	AF,AF'
00232A F1      6672 POP	AF
00232B C1      6673 POP	BC
00232C D1      6674 POP	DE
00232D DD      6675 EX	(SP),IX
00232E E3 
00232F D5      6676 PUSH	DE
002330 C5      6677 PUSH	BC
002331 F5      6678 PUSH	AF
002332 08      6679 EX	AF,AF'
002333 D9      6680 EXX
               6681 ;
               6682 ; Save to destination array and bump pointer:
               6683 ;
002334 F5      6684 PUSH	AF
002335 D5      6685 PUSH	DE
002336 CD      6686 CALL	STOREN
002337 F0 
002338 31 
002339 D1      6687 POP	DE
00233A F1      6688 POP	AF
00233B 4F      6689 LD	C,A
00233C 06      6690 LD	B,0
00233D 00 
00233E DD      6691 ADD	IX,BC
00233F 09 
               6692 ;
               6693 ; Swap pointers:
               6694 ;
002340 D9      6695 EXX
002341 08      6696 EX	AF,AF'
002342 F1      6697 POP	AF
002343 C1      6698 POP	BC
002344 D1      6699 POP	DE
002345 DD      6700 EX	(SP),IX
002346 E3 
002347 D5      6701 PUSH	DE
002348 C5      6702 PUSH	BC
002349 F5      6703 PUSH	AF
00234A 08      6704 EX	AF,AF'
00234B D9      6705 EXX
               6706 ;
00234C E1      6707 POP	HL		;2
00234D D1      6708 POP	DE		;1 Outer loop counter
00234E C1      6709 POP	BC		;0
00234F 1B      6710 DEC	DE		;Count outer loops
               6711 ;
               6712 ; Adjust IX & IY
               6713 ;
002350 C5      6714 PUSH	BC
002351 D5      6715 PUSH	DE
002352 E5      6716 PUSH	HL
002353 4F      6717 LD	C,A
002354 06      6718 LD	B,0
002355 00 
002356 FD      6719 ADD	IY,BC
002357 09 
002358 F5      6720 PUSH	AF
002359 E5      6721 PUSH	HL
00235A CD      6722 CALL	X14OR5
00235B AD 
00235C 36 
00235D C1      6723 POP	BC
00235E CD      6724 CALL	MOD16
00235F 90 
002360 23 
002361 F1      6725 POP	AF
002362 B7      6726 OR	A
002363 01      6727 LD	BC,0
002364 00 
002365 00 
002366 ED      6728 SBC	HL,BC
002367 42 
002368 E1      6729 POP	HL
002369 D1      6730 POP	DE
00236A C1      6731 POP	BC
00236B 20      6732 JR	NZ,MODNZ
00236C 15 
00236D D5      6733 PUSH	DE
00236E E5      6734 PUSH	HL
00236F EB      6735 EX	DE,HL
002370 FD      6736 PUSH	IY
002371 E5 
002372 E1      6737 POP	HL
002373 B7      6738 OR	A
002374 ED      6739 SBC	HL,DE
002375 52 
002376 E5      6740 PUSH	HL
002377 FD      6741 POP	IY
002378 E1 
002379 50      6742 LD	D,B
00237A 59      6743 LD	E,C
00237B CD      6744 CALL	X14OR5
00237C AD 
00237D 36 
00237E DD      6745 ADD	IX,DE
00237F 19 
002380 E1      6746 POP	HL
002381 D1      6747 POP	DE
               6748 MODNZ:
               6749 ;
               6750 ; Count outer loops:
               6751 ;
002382 1C      6752 INC	E
002383 1D      6753 DEC	E
002384 C2      6754 JP	NZ,OUTER
002385 C4 
002386 22 
002387 14      6755 INC	D
002388 15      6756 DEC	D
002389 C2      6757 JP	NZ,OUTER
00238A C4 
00238B 22 
               6758 ;
               6759 ; Exit:
               6760 ;
00238C E1      6761 POP	HL
00238D FD      6762 POP	IY
00238E E1 
00238F C9      6763 RET
               6764 ;
               6765 ; HL = DE MOD BC
               6766 ;
002390 AF      6767 MOD16:          XOR	A
002391 67      6768 LD	H,A
002392 6F      6769 LD	L,A
002393 3E      6770 LD	A,17
002394 11 
002395 ED      6771 MOD160:         SBC	HL,BC
002396 42 
002397 30      6772 JR	NC,MOD161
002398 01 
002399 09      6773 ADD	HL,BC
00239A 3F      6774 MOD161:         CCF
00239B CB      6775 RL	E
00239C 13 
00239D CB      6776 RL	D
00239E 12 
00239F 3D      6777 DEC	A
0023A0 C8      6778 RET	Z
0023A1 ED      6779 ADC	HL,HL
0023A2 6A 
0023A3 18      6780 JR	MOD160
0023A4 F0 
               6781 ;
               6782 ;                END
               6783 ; --- End eval.asm ---
               6784 
               6785 ; --- Begin exec.asm ---
               6786 ;
               6787 ;Automatically created from original source on 2024-12-15 15:29:12
               6788 ;
               6789 .ASSUME ADL = 0
               6790 ;	.ORG 0x0000
               6791 ;                SEGMENT CODE
               6792 ;
               6793 ;BBC BASIC INTERPRETER - Z80 VERSION
               6794 ;STATEMENT EXECUTION MODULE - "EXEC"
               6795 ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
               6796 ;
               6797 ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
               6798 ;OF THE BRITISH BROADCASTING CORPORATION AND IS
               6799 ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
               6800 ;
               6801 ;VERSION 2.1, 22-01-1984
               6802 ;VERSION 3.1, 11-06-1987
               6803 ;VERSION 5.0, 12-07-2024
               6804 ;
               6805 ;                XDEF	XEQ
               6806 ;                XDEF	RUN0
               6807 ;                XDEF	CHAIN0
               6808 ;                XDEF	CHECK
               6809 ;                XDEF	MUL16
               6810 ;                XDEF	X14OR5
               6811 ;                XDEF	TERMQ
               6812 ;                XDEF	STOREN
               6813 ;                XDEF	STORE4
               6814 ;                XDEF	STORE5
               6815 ;                XDEF	STACCS
               6816 ;                XDEF	SPACES
               6817 ;                XDEF	FN
               6818 ;                XDEF	USR
               6819 ;                XDEF	ESCAPE
               6820 ;                XDEF	SYNTAX
               6821 ;                XDEF	CHANEL
               6822 ;                XDEF	CHNL
               6823 ;                XDEF	VAR_
               6824 ;                XDEF	TABIT
               6825 ;                XDEF	MODIFY
               6826 ;                XDEF	MODIFS
               6827 ;
               6828 ;                XREF	ASSEM
               6829 ;                XREF	ERROR_
               6830 ;                XREF	REPORT
               6831 ;                XREF	WARM
               6832 ;                XREF	CLOOP
               6833 ;                XREF	SAYLN
               6834 ;                XREF	LOAD0
               6835 ;                XREF	CRLF
               6836 ;                XREF	PBCDL
               6837 ;                XREF	TELL
               6838 ;                XREF	FINDL
               6839 ;                XREF	SETLIN
               6840 ;                XREF	CLEAR
               6841 ;                XREF	GETVAR
               6842 ;                XREF	PUTVAR
               6843 ;                XREF	GETDEF
               6844 ;                XREF	LOCATE
               6845 ;                XREF	CREATE
               6846 ;                XREF	OUTCHR
               6847 ;                XREF	EXTERR
               6848 ;                XREF	BYE
               6849 ;                XREF	NXT
               6850 ;                XREF	NLIST
               6851 ;                XREF	CSRON
               6852 ;                XREF	CSROFF
               6853 ;
               6854 ;                XREF	OSWRCH
               6855 ;                XREF	OSLINE
               6856 ;                XREF	OSSHUT
               6857 ;                XREF	OSBPUT
               6858 ;                XREF	OSBGET
               6859 ;                XREF	CLRSCN
               6860 ;                XREF	PUTCSR
               6861 ;                XREF	PUTIME
               6862 ;                XREF	PUTIMS
               6863 ;                XREF	PUTPTR
               6864 ;                XREF	OSCALL
               6865 ;                XREF	OSCLI
               6866 ;                XREF	TRAP
               6867 ;
               6868 ;                XREF	SOUND
               6869 ;                XREF	CLG
               6870 ;                XREF	DRAW
               6871 ;                XREF	ENVEL
               6872 ;                XREF	GCOL
               6873 ;                XREF	MODE
               6874 ;                XREF	MOVE
               6875 ;                XREF	PLOT
               6876 ;                XREF	COLOUR
               6877 ;                XREF	CIRCLE
               6878 ;                XREF	ELLIPS
               6879 ;                XREF	FILL
               6880 ;                XREF	MOUSE
               6881 ;                XREF	ORIGIN
               6882 ;                XREF	RECTAN
               6883 ;                XREF	LINE
               6884 ;                XREF	WAIT
               6885 ;                XREF	TINT
               6886 ;                XREF	SYS
               6887 ;
               6888 ;                XREF	STR
               6889 ;                XREF	HEXSTR
               6890 ;                XREF	EXPR
               6891 ;                XREF	EXPRN
               6892 ;                XREF	EXPRI
               6893 ;                XREF	EXPRS
               6894 ;                XREF	ITEMI
               6895 ;                XREF	CONS
               6896 ;                XREF	LOADS
               6897 ;                XREF	VAL0
               6898 ;                XREF	SFIX
               6899 ;                XREF	TEST
               6900 ;                XREF	LOAD4
               6901 ;                XREF	LOADN
               6902 ;                XREF	DLOAD5
               6903 ;                XREF	FPP
               6904 ;                XREF	COMMA
               6905 ;                XREF	BRAKET
               6906 ;                XREF	PUSHS
               6907 ;                XREF	POPS
               6908 ;                XREF	ZERO
               6909 ;                XREF	SCP
               6910 ;                XREF	LETARR
               6911 ;
               6912 ;                XREF	ACCS
               6913 ;                XREF	PAGE_
               6914 ;                XREF	LOMEM
               6915 ;                XREF	HIMEM
               6916 ;                XREF	FREE
               6917 ;                XREF	BUFFER
               6918 ;                XREF	ERRTRP
               6919 ;                XREF	ONERSP
               6920 ;                XREF	CURLIN
               6921 ;                XREF	COUNT
               6922 ;                XREF	WIDTH
               6923 ;                XREF	STAVAR
               6924 ;                XREF	DATPTR
               6925 ;                XREF	RANDOM
               6926 ;                XREF	TRACEN
               6927 ;                XREF	LISTON
               6928 ;                XREF	PC
               6929 ;                XREF	OC
               6930 ;
               6931 ; LF             EQU	0AH	; in equs.inc
               6932 ; CR             EQU	0DH	; in equs.inc
               6933 ; IN main.asm
               6934 ; TAND:           EQU	80H
               6935 ; TOR:            EQU	84H
               6936 ; TERROR:         EQU	85H
               6937 ; TLINE:          EQU	86H
               6938 TOFF:           EQU	87H
               6939 TSTEP:          EQU	88H
               6940 TSPC:           EQU	89H
               6941 TTAB:           EQU	8AH
               6942 ; TELSE:          EQU	8BH
               6943 ; TTHEN:          EQU	8CH
               6944 ; TLINO:          EQU	8DH
               6945 ; TTO:            EQU	0B8H
               6946 ; TBY:           EQU	0C0H
               6947 ; TWHILE:         EQU	0C7H
               6948 ; TWHEN:          EQU	0C9H
               6949 ; TOF:            EQU	0CAH
               6950 ; TENDCASE:       EQU	0CBH
               6951 ; TOTHERWISE:     EQU	0CCH
               6952 ; TENDIF:         EQU	0CDH
               6953 ; TENDWHILE:      EQU	0CEH
               6954 ; TCALL:          EQU	0D6H
               6955 ; TDATA:          EQU	0DCH
               6956 ; TDEF:           EQU	0DDH
               6957 ; TFOR:           EQU	0E3H
               6958 ; TGOSUB:         EQU	0E4H
               6959 ; TGOTO:          EQU	0E5H
               6960 ; TLOCAL:         EQU	0EAH
               6961 ; TNEXT:          EQU	0EDH
               6962 ; TON:            EQU	0EEH
               6963 ; TPROC:          EQU	0F2H
               6964 ; TREM:           EQU	0F4H
               6965 ; TREPEAT:        EQU	0F5H
               6966 TRETURN:        EQU	0F8H
               6967 TSTOP:          EQU	0FAH
               6968 ; TUNTIL:         EQU	0FDH
               6969 ; TEXIT:          EQU	10H
               6970 ; END in main.asm
               6971 ;
0023A5 77      6972 CMDTAB:         DW	LEFTSL
0023A6 30 
0023A7 8B      6973 DW	MIDSL
0023A8 30 
0023A9 81      6974 DW	RITESL
0023AA 30 
0023AB E0      6975 DW	SYNTAX	;STR$
0023AC 25 
0023AD E0      6976 DW	SYNTAX	;STRING$
0023AE 25 
0023AF E0      6977 DW	SYNTAX	;EOF
0023B0 25 
0023B1 E0      6978 DW	SYNTAX	;SUM
0023B2 25 
0023B3 26      6979 DW	WHILE
0023B4 2E 
0023B5 57      6980 DW	CASE
0023B6 2D 
0023B7 E0      6981 DW	SYNTAX	;WHEN
0023B8 25 
0023B9 E0      6982 DW	SYNTAX	;OF
0023BA 25 
0023BB 99      6983 DW	XEQ	;ENDCASE
0023BC 24 
0023BD E0      6984 DW	SYNTAX	;OTHERWISE
0023BE 25 
0023BF 99      6985 DW	XEQ	;ENDIF
0023C0 24 
0023C1 43      6986 DW	ENDWHI	;ENDWHILE
0023C2 2E 
0023C3 01      6987 DW	PTR
0023C4 2F 
0023C5 15      6988 DW	PAGEV
0023C6 2F 
0023C7 23      6989 DW	TIMEV
0023C8 2F 
0023C9 42      6990 DW	LOMEMV
0023CA 2F 
0023CB 54      6991 DW	HIMEMV
0023CC 2F 
0023CD 9D      6992 DW	SOUND
0023CE 02 
0023CF D3      6993 DW	BPUT
0023D0 2F 
0023D1 0C      6994 DW	CALL
0023D2 30 
0023D3 4C      6995 DW	CHAIN
0023D4 24 
0023D5 96      6996 DW	CLR
0023D6 2E 
0023D7 CB      6997 DW	CLOSE
0023D8 2F 
0023D9 E1      6998 DW	CLG
0023DA 02 
0023DB 75      6999 DW	CLS
0023DC 2E 
0023DD 31      7000 DW	REM		;DATA
0023DE 25 
0023DF 31      7001 DW	REM		;DEF
0023E0 25 
0023E1 3E      7002 DW	DIM
0023E2 26 
0023E3 E8      7003 DW	DRAW
0023E4 03 
0023E5 D3      7004 DW	END
0023E6 24 
0023E7 7D      7005 DW	ENDPRO
0023E8 2B 
0023E9 6F      7006 DW	ENVEL
0023EA 02 
0023EB 14      7007 DW	FORex
0023EC 29 
0023ED CB      7008 DW	GOSUB
0023EE 28 
0023EF B4      7009 DW	GOTO
0023F0 28 
0023F1 39      7010 DW	GCOL
0023F2 03 
0023F3 C9      7011 DW	IF_
0023F4 2C 
0023F5 E2      7012 DW	INPUT
0023F6 2B 
0023F7 A1      7013 DW	LET
0023F8 25 
0023F9 13      7014 DW	LOCAL
0023FA 2B 
0023FB D1      7015 DW	MODE
0023FC 02 
0023FD E4      7016 DW	MOVE
0023FE 03 
0023FF 61      7017 DW	NEXT
002400 29 
002401 3A      7018 DW	ON
002402 28 
002403 9C      7019 DW	VDU
002404 2F 
002405 F0      7020 DW	PLOT
002406 03 
002407 46      7021 DW	PRINT
002408 27 
002409 E7      7022 DW	PROC
00240A 29 
00240B 80      7023 DW	READ
00240C 2C 
00240D 31      7024 DW	REM
00240E 25 
00240F E5      7025 DW	REPEAT
002410 28 
002411 91      7026 DW	REPOR
002412 2E 
002413 BC      7027 DW	RESTOR
002414 2E 
002415 D6      7028 DW	RETURN
002416 28 
002417 47      7029 DW	RUN
002418 24 
002419 7E      7030 DW	STOP
00241A 2E 
00241B F9      7031 DW	COLOUR
00241C 02 
00241D 83      7032 DW	TRACE
00241E 2F 
00241F ED      7033 DW	UNTIL
002420 28 
002421 79      7034 DW	WIDTHV
002422 2F 
002423 08      7035 DW	CLI		;OSCLI
002424 25 
002425 31      7036 DW	REM		;NUL
002426 25 
002427 87      7037 DW	CIRCLE
002428 03 
002429 B3      7038 DW	ELLIPS
00242A 03 
00242B EC      7039 DW	FILL
00242C 03 
00242D A6      7040 DW	MOUSE
00242E 04 
00242F E8      7041 DW	ORIGIN
002430 02 
002431 10      7042 DW	BYE		;QUIT
002432 16 
002433 25      7043 DW	RECTAN
002434 04 
002435 5E      7044 DW	SWAPex
002436 25 
002437 7D      7045 DW	SYS
002438 05 
002439 7D      7046 DW	TINT
00243A 05 
00243B E5      7047 DW	WAIT
00243C 04 
00243D E0      7048 DW	SYNTAX		;INSTALL
00243E 25 
00243F 31      7049 DW	REM		;CR
002440 25 
002441 9D      7050 DW	PUT		;Token changed
002442 31 
002443 E0      7051 DW	SYNTAX		;BY
002444 25 
002445 23      7052 DW	EXITex
002446 31 
               7053 ;
               7054 CMDTAB_END:     EQU	$
               7055 ; TLAST:          EQU	TCMD-128+(CMDTAB_END-CMDTAB)/2
               7056 TLAST:          EQU	CMDTAB_END-CMDTAB/2+TCMD-128
               7057 ;
002447 CD      7058 RUN:            CALL	TERMQ
002448 36 
002449 35 
00244A 28      7059 JR	Z,RUN0
00244B 0D 
00244C CD      7060 CHAIN:          CALL	EXPRS
00244D 3C 
00244E 18 
00244F 3E      7061 LD	A,CR
002450 0D 
002451 12      7062 LD	(DE),A
002452 ED      7063 CHAIN0:         LD	SP,(HIMEM)
002453 7B 
002454 E2 
002455 54 
002456 CD      7064 CALL	LOAD0
002457 00 
002458 40 
002459 ED      7065 RUN0:           LD	SP,(HIMEM)	;PREPARE FOR RUN
00245A 7B 
00245B E2 
00245C 54 
00245D DD      7066 LD	IX,RANDOM
00245E 21 
00245F F6 
002460 54 
002461 ED      7067 RAND:           LD	A,R		;RANDOMISE (CARE!)
002462 5F 
002463 28      7068 JR	Z,RAND
002464 FC 
002465 07      7069 RLCA
002466 07      7070 RLCA
002467 DD      7071 LD	(IX+3),A
002468 77 
002469 03 
00246A 9F      7072 SBC	A,A
00246B DD      7073 LD	(IX+4),A
00246C 77 
00246D 04 
00246E CD      7074 CALL	CLEAR
00246F 43 
002470 40 
002471 21      7075 LD	HL,0
002472 00 
002473 00 
002474 22      7076 LD	(ERRTRP),HL
002475 EA 
002476 54 
002477 2A      7077 LD	HL,(PAGE_)
002478 DC 
002479 54 
00247A CD      7078 CALL	DSRCH		;LOOK FOR "DATA"
00247B F9 
00247C 35 
00247D 22      7079 LD	(DATPTR),HL	;SET DATA POINTER
00247E F0 
00247F 54 
002480 FD      7080 LD	IY,(PAGE_)
002481 2A 
002482 DC 
002483 54 
002484 CD      7081 XEQ0:           CALL	NEWLIN
002485 DB 
002486 24 
002487 FD      7082 LD	A,(IY)
002488 7E 
002489 00 
00248A FE      7083 CP	TELSE
00248B 8B 
00248C CA      7084 JP	Z,MELSE		;ELSE
00248D 30 
00248E 2D 
00248F FE      7085 CP	TWHEN
002490 C9 
002491 CA      7086 JP	Z,WHEN		;WHEN
002492 43 
002493 2D 
002494 FE      7087 CP	TOTHERWISE
002495 CC 
002496 CA      7088 JP	Z,WHEN
002497 43 
002498 2D 
002499 FD      7089 XEQ:            LD	(CURLIN),IY	;ERROR POINTER
00249A 22 
00249B F4 
00249C 54 
00249D CD      7090 CALL	TRAP		;CHECK KEYBOARD
00249E 17 
00249F 12 
0024A0 CD      7091 XEQ1:           CALL	NXT
0024A1 0B 
0024A2 45 
0024A3 FD      7092 INC	IY
0024A4 23 
0024A5 FE      7093 CP	':'		;SEPARATOR
0024A6 3A 
0024A7 28      7094 JR	Z,XEQ1
0024A8 F7 
0024A9 FE      7095 CP	CR
0024AA 0D 
0024AB 28      7096 JR	Z,XEQ0		;NEW PROGRAM LINE
0024AC D7 
0024AD FE      7097 CP	TLAST
0024AE 98 
0024AF EA      7098 JP	PE,LET0		;IMPLIED LET
0024B0 93 
0024B1 25 
0024B2 D6      7099 SUB	TCMD
0024B3 C7 
0024B4 FA      7100 JP	M,EXTRAS
0024B5 16 
0024B6 25 
0024B7 87      7101 ADD	A,A
0024B8 4F      7102 LD	C,A
0024B9 06      7103 LD	B,0
0024BA 00 
0024BB 21      7104 LD	HL,CMDTAB
0024BC A5 
0024BD 23 
0024BE 09      7105 ADD	HL,BC
0024BF 7E      7106 LD	A,(HL)		;TABLE ENTRY
0024C0 23      7107 INC	HL
0024C1 66      7108 LD	H,(HL)
0024C2 6F      7109 LD	L,A
0024C3 CD      7110 CALL	NXT
0024C4 0B 
0024C5 45 
0024C6 E9      7111 JP	(HL)		;EXECUTE STATEMENT
               7112 ;
               7113 ;END
               7114 ;
0024C7 FD      7115 ENDIM:          PUSH	IY
0024C8 E5 
0024C9 E1      7116 POP	HL
0024CA ED      7117 LD	BC,(PAGE_)
0024CB 4B 
0024CC DC 
0024CD 54 
0024CE ED      7118 SBC	HL,BC		;IMMEDIATE MODE ?
0024CF 42 
0024D0 DA      7119 JP	C,CLOOP
0024D1 B0 
0024D2 37 
0024D3 1E      7120 END:            LD	E,0
0024D4 00 
0024D5 CD      7121 CALL	OSSHUT		;CLOSE ALL FILES
0024D6 37 
0024D7 12 
0024D8 C3      7122 JP	WARM		;"Ready"
0024D9 AF 
0024DA 37 
               7123 ;
0024DB FD      7124 NEWLIN:         LD	A,(IY+0)	;A=LINE LENGTH
0024DC 7E 
0024DD 00 
0024DE 01      7125 LD	BC,3
0024DF 03 
0024E0 00 
0024E1 FD      7126 ADD	IY,BC
0024E2 09 
0024E3 B7      7127 OR	A
0024E4 28      7128 JR	Z,ENDIM		;LENGTH=0, EXITex
0024E5 E1 
0024E6 2A      7129 LD	HL,(TRACEN)
0024E7 E6 
0024E8 54 
0024E9 7C      7130 LD	A,H
0024EA B5      7131 OR	L
0024EB C8      7132 RET	Z
0024EC FD      7133 LD	D,(IY-1)	;DE = LINE NUMBER
0024ED 56 
0024EE FF 
0024EF FD      7134 LD	E,(IY-2)
0024F0 5E 
0024F1 FE 
0024F2 ED      7135 SBC	HL,DE
0024F3 52 
0024F4 D8      7136 RET	C
0024F5 EB      7137 EX	DE,HL
0024F6 3E      7138 LD	A,'['		;TRACE
0024F7 5B 
0024F8 CD      7139 CALL	OUTCHR
0024F9 02 
0024FA 41 
0024FB CD      7140 CALL	PBCDL
0024FC 92 
0024FD 41 
0024FE 3E      7141 LD	A,']'
0024FF 5D 
002500 CD      7142 CALL	OUTCHR
002501 02 
002502 41 
002503 3E      7143 LD	A,' '
002504 20 
002505 C3      7144 JP	OUTCHR
002506 02 
002507 41 
               7145 ;
               7146 ;ROUTINES FOR EACH STATEMENT:
               7147 ;
               7148 ;OSCLI
               7149 ;
002508 CD      7150 CLI:            CALL	EXPRS
002509 3C 
00250A 18 
00250B 3E      7151 LD	A,CR
00250C 0D 
00250D 12      7152 LD	(DE),A
00250E 21      7153 LD	HL,ACCS
00250F 00 
002510 52 
002511 CD      7154 CALL	OSCLI
002512 97 
002513 15 
002514 18      7155 JR	XEQ
002515 83 
               7156 ;
002516 FE      7157 EXTRAS:         CP	TELSE-TCMD
002517 C4 
002518 28      7158 JR	Z,REM		;ELSE
002519 17 
00251A FE      7159 CP	TERROR-TCMD
00251B BE 
00251C 28      7160 JR	Z,THROW		;ERROR
00251D 21 
00251E FE      7161 CP	TLINE-TCMD
00251F BF 
002520 CA      7162 JP	Z,LINE		;LINE
002521 71 
002522 03 
002523 FE      7163 CP	TOFF-TCMD
002524 C0 
002525 CA      7164 JP	Z,CSROFF	;OFF
002526 5A 
002527 03 
002528 C3      7165 JP	SYNTAX
002529 E0 
00252A 25 
               7166 ;
               7167 ;REM, *
               7168 ;
00252B FD      7169 EXT:            PUSH	IY
00252C E5 
00252D E1      7170 POP	HL
00252E CD      7171 CALL	OSCLI
00252F 97 
002530 15 
002531 FD      7172 REM:            PUSH	IY
002532 E5 
002533 E1      7173 POP	HL
002534 3E      7174 LD	A,CR
002535 0D 
002536 47      7175 LD	B,A
002537 ED      7176 CPIR			;FIND LINE END
002538 B1 
002539 E5      7177 PUSH	HL
00253A FD      7178 POP	IY
00253B E1 
00253C C3      7179 JP	XEQ0
00253D 84 
00253E 24 
               7180 ;
               7181 ;ERROR num,string$
               7182 ;
00253F CD      7183 THROW:          CALL	EXPRI
002540 33 
002541 18 
002542 D9      7184 EXX
002543 E5      7185 PUSH	HL
002544 D9      7186 EXX
002545 CD      7187 CALL	COMMA
002546 A2 
002547 20 
002548 CD      7188 CALL	EXPRS
002549 3C 
00254A 18 
00254B E1      7189 POP	HL
00254C AF      7190 XOR	A
00254D 12      7191 LD	(DE),A
00254E 7D      7192 LD	A,L
00254F 21      7193 LD	HL,ACCS
002550 00 
002551 52 
002552 11      7194 LD	DE,BUFFER
002553 00 
002554 53 
002555 D5      7195 PUSH	DE
002556 01      7196 LD	BC,256
002557 00 
002558 01 
002559 ED      7197 LDIR
00255A B0 
00255B C3      7198 JP	EXTERR
00255C 55 
00255D 3F 
               7199 ;
               7200 ; SWAP
               7201 ;
00255E CD      7202 SWAPex:           CALL	GETVAR
00255F E3 
002560 41 
002561 20      7203 JR	NZ,SWAPNZ
002562 0B 
002563 F5      7204 PUSH	AF
002564 E5      7205 PUSH	HL
002565 CD      7206 CALL	COMMA
002566 A2 
002567 20 
002568 CD      7207 CALL	NXT
002569 0B 
00256A 45 
00256B CD      7208 CALL	GETVAR
00256C E3 
00256D 41 
00256E 20      7209 SWAPNZ:         JR	NZ,NOSUCH
00256F 6D 
002570 D1      7210 POP	DE
002571 C1      7211 POP	BC
002572 B8      7212 CP	B
002573 20      7213 JR	NZ,MISMAT
002574 74 
002575 E6      7214 AND	00001111B
002576 0F 
002577 28      7215 JR	Z,MISMAT
002578 70 
002579 78      7216 LD	A,B
00257A E6      7217 AND	11000000B
00257B C0 
00257C 28      7218 JR	Z,SWAP1ex
00257D 0A 
00257E 06      7219 LD	B,2
00257F 02 
002580 F2      7220 JP	P,SWAP1ex
002581 88 
002582 25 
002583 EA      7221 JP	PE,SWAP1ex
002584 88 
002585 25 
002586 06      7222 LD	B,4
002587 04 
002588 4E      7223 SWAP1ex:          LD	C,(HL)
002589 1A      7224 LD	A,(DE)
00258A 77      7225 LD	(HL),A
00258B 79      7226 LD	A,C
00258C 12      7227 LD	(DE),A
00258D 13      7228 INC	DE
00258E 23      7229 INC	HL
00258F 10      7230 DJNZ	SWAP1ex
002590 F7 
002591 18      7231 JR	XEQGO4
002592 28 
               7232 ;
               7233 ;[LET] var = expr
               7234 ;
002593 FE      7235 LET0:           CP	'*'
002594 2A 
002595 28      7236 JR	Z,EXT
002596 94 
002597 FE      7237 CP	'='
002598 3D 
002599 28      7238 JR	Z,FNEND
00259A 71 
00259B FE      7239 CP	'['
00259C 5B 
00259D 28      7240 JR	Z,ASM
00259E 52 
00259F FD      7241 DEC	IY
0025A0 2B 
0025A1 CD      7242 LET:            CALL	ASSIGN
0025A2 AF 
0025A3 31 
0025A4 CA      7243 JP	Z,XEQ
0025A5 99 
0025A6 24 
0025A7 38      7244 JR	C,SYNTAX	;"Syntax error"
0025A8 37 
0025A9 F2      7245 JP	P,LETARR	;Numeric array
0025AA FB 
0025AB 20 
0025AC EA      7246 JP	PE,LETARR	;String array
0025AD FB 
0025AE 20 
0025AF 7A      7247 LD	A,D		;Type
0025B0 D5      7248 PUSH	DE
0025B1 E5      7249 PUSH	HL
0025B2 CD      7250 CALL	EXPRS
0025B3 3C 
0025B4 18 
0025B5 DD      7251 POP	IX
0025B6 E1 
0025B7 E1      7252 POP	HL
0025B8 CD      7253 CALL	MODIFS
0025B9 18 
0025BA 32 
0025BB C3      7254 XEQGO4:         JP	XEQ
0025BC 99 
0025BD 24 
               7255 ;
               7256 ; GETSTR - Get string variable
               7257 ;   Inputs: IY = text pointer
               7258 ;  Outputs: B = type
               7259 ;           Z-flag set if comma
               7260 ;
0025BE CD      7261 GETSTR:         CALL	GETVAR
0025BF E3 
0025C0 41 
0025C1 20      7262 JR	NZ,NOSUCH
0025C2 1A 
0025C3 47      7263 LD	B,A
0025C4 E6      7264 AND	11000000B
0025C5 C0 
0025C6 F2      7265 JP	P,MISMAT
0025C7 E9 
0025C8 25 
0025C9 EA      7266 JP	PE,BADUSE
0025CA E6 
0025CB 25 
0025CC CB      7267 BIT	0,B
0025CD 40 
0025CE 28      7268 JR	Z,MISMAT
0025CF 19 
0025D0 CD      7269 CALL	NXT
0025D1 0B 
0025D2 45 
0025D3 FE      7270 CP	','
0025D4 2C 
0025D5 C9      7271 RET
               7272 ;
0025D6 CD      7273 VAR_:           CALL	GETVAR
0025D7 E3 
0025D8 41 
0025D9 C8      7274 RET	Z
0025DA D2      7275 JP	NC,PUTVAR
0025DB CD 
0025DC 41 
0025DD 3E      7276 NOSUCH:         LD	A,26		;'No such variable'
0025DE 1A 
0025DF 21      7277 DB	21H
0025E0 3E      7278 SYNTAX:         LD	A,16		;"Syntax error"
0025E1 10 
0025E2 21      7279 DB	21H
0025E3 3E      7280 ESCAPE:         LD	A,17		;"Escape"
0025E4 11 
0025E5 21      7281 DB	21H
0025E6 3E      7282 BADUSE:         LD	A,14		;'Bad use of array'
0025E7 0E 
0025E8 21      7283 DB	21H
0025E9 3E      7284 MISMAT:         LD	A,6		;'Type mismatch'
0025EA 06 
0025EB C3      7285 ERROR0ex:         JP	ERROR_
0025EC 44 
0025ED 3F 
               7286 ;
0025EE CD      7287 ASM0:           CALL	NEWLIN
0025EF DB 
0025F0 24 
0025F1 FD      7288 ASM:            LD	(CURLIN),IY
0025F2 22 
0025F3 F4 
0025F4 54 
0025F5 CD      7289 CALL	TRAP
0025F6 17 
0025F7 12 
0025F8 CD      7290 CALL	ASSEM
0025F9 87 
0025FA 05 
0025FB 38      7291 JR	C,SYNTAX
0025FC E3 
0025FD FE      7292 CP	CR
0025FE 0D 
0025FF 28      7293 JR	Z,ASM0
002600 ED 
002601 21      7294 LD	HL,LISTON
002602 FE 
002603 54 
002604 7E      7295 LD	A,(HL)
002605 E6      7296 AND	0FH
002606 0F 
002607 F6      7297 OR	30H
002608 30 
002609 77      7298 LD	(HL),A
00260A 18      7299 JR	XEQGO4
00260B AF 
               7300 ;
               7301 ;=
               7302 ;
00260C CD      7303 FNEND:          CALL	EXPR		;FUNCTION RESULT
00260D 02 
00260E 17 
00260F 08      7304 EX	AF,AF'
002610 87      7305 ADD	A,A
002611 7B      7306 LD	A,E
002612 38      7307 JR	C,FNEND1
002613 01 
002614 79      7308 LD	A,C
002615 08      7309 FNEND1:         EX	AF,AF'
002616 E5      7310 PUSH	HL
002617 D9      7311 EXX
002618 C1      7312 POP	BC
002619 EB      7313 EX	DE,HL		;SAVE RESULT IN A'B'C'D'E'
00261A D9      7314 EXX
00261B C1      7315 FNEND2:         POP	BC
00261C 21      7316 LD	HL,FNCHK
00261D E7 
00261E 29 
00261F AF      7317 XOR	A
002620 ED      7318 SBC	HL,BC
002621 42 
002622 28      7319 JR	Z,FNEND3
002623 0A 
002624 C5      7320 PUSH	BC
002625 CD      7321 CALL	RESLOC
002626 31 
002627 34 
002628 20      7322 JR	NZ,FNEND2
002629 F1 
00262A 3E      7323 LD	A,7
00262B 07 
00262C 18      7324 JR	ERROR0ex		;"No FN"
00262D BD 
               7325 ;
00262E FD      7326 FNEND3:         POP	IY
00262F E1 
002630 FD      7327 LD	(CURLIN),IY	;IN CASE OF ERROR
002631 22 
002632 F4 
002633 54 
002634 D9      7328 EXX
002635 EB      7329 EX	DE,HL
002636 C5      7330 PUSH	BC
002637 D9      7331 EXX
002638 E1      7332 POP	HL
002639 08      7333 EX	AF,AF'
00263A 5F      7334 LD	E,A
00263B 4F      7335 LD	C,A
00263C 1F      7336 RRA
00263D C9      7337 RET
               7338 ;
               7339 ;DIM var(dim1[,dim2[,...]])[,var(...]
               7340 ;DIM var expr[,var expr...]
               7341 ;
00263E FD      7342 DIM:            PUSH	IY
00263F E5 
002640 FE      7343 CP	'!'
002641 21 
002642 CA      7344 JP	Z,DIM4
002643 0F 
002644 27 
002645 CD      7345 CALL	LOCATE		;VARIABLE
002646 B0 
002647 42 
002648 DA      7346 JP	C,BADDIM
002649 F9 
00264A 26 
00264B C4      7347 CALL	NZ,CREATE
00264C 3C 
00264D 43 
00264E FD      7348 LD	A,(IY)
00264F 7E 
002650 00 
002651 FE      7349 CP	'('
002652 28 
002653 C2      7350 JP	NZ,DIM4
002654 0F 
002655 27 
002656 E5      7351 PUSH	HL
002657 DD      7352 POP	IX
002658 E1 
002659 7E      7353 LD	A,(HL)
00265A E6      7354 AND	0FEH
00265B FE 
00265C 23      7355 INC	HL
00265D B6      7356 OR	(HL)
00265E C2      7357 JP	NZ,DIM4
00265F 0F 
002660 27 
002661 C1      7358 POP	BC		;LEVEL STACK
002662 7A      7359 LD	A,D
002663 2A      7360 LD	HL,(FREE)
002664 E0 
002665 54 
002666 E5      7361 PUSH	HL
002667 DD      7362 EX	(SP),IX
002668 E3 
002669 E5      7363 PUSH	HL
00266A F5      7364 PUSH	AF		;SAVE TYPE
00266B 11      7365 LD	DE,1
00266C 01 
00266D 00 
00266E 42      7366 LD	B,D		;DIMENSION COUNTER
00266F FD      7367 DIM1:           INC	IY
002670 23 
002671 C5      7368 PUSH	BC
002672 D5      7369 PUSH	DE
002673 DD      7370 PUSH	IX
002674 E5 
002675 CD      7371 CALL	EXPRI		;DIMENSION SIZE
002676 33 
002677 18 
002678 CB      7372 BIT	7,H
002679 7C 
00267A 20      7373 JR	NZ,BADDIM
00267B 7D 
00267C D9      7374 EXX
00267D 23      7375 INC	HL
00267E DD      7376 POP	IX
00267F E1 
002680 DD      7377 INC	IX
002681 23 
002682 DD      7378 LD	(IX),L		;SAVE SIZE
002683 75 
002684 00 
002685 DD      7379 INC	IX
002686 23 
002687 DD      7380 LD	(IX),H
002688 74 
002689 00 
00268A C1      7381 POP	BC
00268B CD      7382 CALL	MUL16		;HL=HL*BC
00268C BD 
00268D 36 
00268E 38      7383 JR	C,NOROOM	;TOO LARGE
00268F 6C 
002690 EB      7384 EX	DE,HL		;DE=PRODUCT
002691 C1      7385 POP	BC
002692 04      7386 INC	B		;DIMENSION COUNTER
002693 FD      7387 LD	A,(IY)
002694 7E 
002695 00 
002696 FE      7388 CP	','		;ANOTHER
002697 2C 
002698 28      7389 JR	Z,DIM1
002699 D5 
00269A DD      7390 INC	IX
00269B 23 
00269C CD      7391 CALL	BRAKET		;CLOSING BRACKET
00269D AE 
00269E 20 
00269F F1      7392 POP	AF		;RESTORE TYPE
0026A0 CD      7393 CALL	X14OR5		;DE=DE*n
0026A1 AD 
0026A2 36 
0026A3 38      7394 JR	C,NOROOM
0026A4 57 
0026A5 E1      7395 POP	HL
0026A6 70      7396 LD	(HL),B		;NO. OF DIMENSIONS
0026A7 DD      7397 EX	(SP),IX
0026A8 E3 
0026A9 E1      7398 POP	HL
0026AA E6      7399 AND	80H
0026AB 80 
0026AC DD      7400 OR	(IX)		;FLAGS
0026AD B6 
0026AE 00 
               7401 ;
               7402 ;  A = flags: bit 7 = string, bit 0 = LOCAL
               7403 ; DE = amount to allocate
               7404 ; HL = where to allocate (if not LOCAL)
               7405 ; (HL - FREE is size of 'descriptor')
               7406 ; IX = where to store pointer
               7407 ;
0026AF E5      7408 DIM3:           PUSH	HL
0026B0 24      7409 INC	H		;Safety margin
0026B1 19      7410 ADD	HL,DE
0026B2 38      7411 JR	C,NOROOM
0026B3 48 
0026B4 ED      7412 SBC	HL,SP
0026B5 72 
0026B6 30      7413 JR	NC,NOROOM
0026B7 44 
0026B8 E1      7414 POP	HL
0026B9 E5      7415 PUSH	HL
0026BA ED      7416 LD	BC,(FREE)
0026BB 4B 
0026BC E0 
0026BD 54 
0026BE B7      7417 OR	A
0026BF ED      7418 SBC	HL,BC
0026C0 42 
0026C1 44      7419 LD	B,H
0026C2 4D      7420 LD	C,L
0026C3 E1      7421 POP	HL
0026C4 ED      7422 SBC	HL,BC
0026C5 42 
0026C6 CB      7423 BIT	0,A
0026C7 47 
0026C8 28      7424 JR	Z,ARRCHK	;NOT LOCAL
0026C9 12 
0026CA 21      7425 LD	HL,0
0026CB 00 
0026CC 00 
0026CD ED      7426 SBC	HL,DE
0026CE 52 
0026CF B7      7427 OR	A
0026D0 ED      7428 SBC	HL,BC
0026D1 42 
0026D2 39      7429 ADD	HL,SP
0026D3 28      7430 JR	Z,ARRCHK	;RESERVE NOTHING
0026D4 07 
0026D5 F9      7431 LD	SP,HL
0026D6 D5      7432 PUSH	DE
0026D7 C5      7433 PUSH	BC
0026D8 F5      7434 PUSH	AF
0026D9 CD      7435 CALL	ARRCHK
0026DA DC 
0026DB 26 
0026DC DD      7436 ARRCHK:         LD	(IX+0),L	;SAVE POINTER
0026DD 75 
0026DE 00 
0026DF DD      7437 LD	(IX+1),H
0026E0 74 
0026E1 01 
0026E2 78      7438 LD	A,B
0026E3 B1      7439 OR	C
0026E4 28      7440 JR	Z,DIM2
0026E5 09 
0026E6 D5      7441 PUSH	DE
0026E7 EB      7442 EX	DE,HL
0026E8 2A      7443 LD	HL,(FREE)
0026E9 E0 
0026EA 54 
0026EB ED      7444 LDIR			;COPY DESCRIPTOR
0026EC B0 
0026ED EB      7445 EX	DE,HL
0026EE D1      7446 POP	DE
0026EF 7A      7447 DIM2:           LD	A,D
0026F0 B3      7448 OR	E
0026F1 28      7449 JR	Z,DIM5
0026F2 0E 
0026F3 36      7450 LD	(HL),0		;INITIALISE ARRAY
0026F4 00 
0026F5 23      7451 INC	HL
0026F6 1B      7452 DEC	DE
0026F7 18      7453 JR	DIM2
0026F8 F6 
               7454 ;
0026F9 3E      7455 BADDIM:         LD	A,10		;"Bad DIM"
0026FA 0A 
0026FB 21      7456 DB	21H
0026FC 3E      7457 NOROOM:         LD	A,11		;"DIM space"
0026FD 0B 
0026FE C3      7458 ERROR1ex:         JP	ERROR_
0026FF 44 
002700 3F 
               7459 ;
002701 ED      7460 DIM5:           SBC	HL,SP
002702 72 
002703 30      7461 JR	NC,DIM7		;LOCAL
002704 04 
002705 39      7462 ADD	HL,SP
002706 22      7463 LD	(FREE),HL
002707 E0 
002708 54 
002709 CD      7464 DIM7:           CALL	NLIST		;ANOTHER VARIABLE?
00270A 00 
00270B 45 
00270C C3      7465 JP	DIM
00270D 3E 
00270E 26 
               7466 ;
00270F FD      7467 DIM4:           POP	IY
002710 E1 
002711 CD      7468 CALL	VAR_
002712 D6 
002713 25 
002714 B7      7469 OR	A
002715 28      7470 JR	Z,BADDIM
002716 E2 
002717 FA      7471 JP	M,BADDIM
002718 F9 
002719 26 
00271A CB      7472 BIT	6,A
00271B 77 
00271C 20      7473 JR	NZ,BADDIM
00271D DB 
00271E 47      7474 LD	B,A		;TYPE
00271F CD      7475 CALL	NXT
002720 0B 
002721 45 
002722 FE      7476 CP	TLOCAL
002723 EA 
002724 3E      7477 LD	A,0		;PRESET TO NOT LOCAL
002725 00 
002726 20      7478 JR	NZ,DIM8
002727 03 
002728 FD      7479 INC	IY
002729 23 
00272A 3C      7480 INC	A		;FLAG LOCAL
00272B F5      7481 DIM8:           PUSH	AF
00272C 78      7482 LD	A,B		;TYPE
00272D D9      7483 EXX
00272E 21      7484 LD	HL,0
00272F 00 
002730 00 
002731 4C      7485 LD	C,H
002732 CD      7486 CALL	STOREN		;RESERVED AREA
002733 F0 
002734 31 
002735 DD      7487 PUSH	IX
002736 E5 
002737 CD      7488 CALL	EXPRI
002738 33 
002739 18 
00273A DD      7489 POP	IX
00273B E1 
00273C D9      7490 EXX
00273D 23      7491 INC	HL
00273E EB      7492 EX	DE,HL
00273F 2A      7493 LD	HL,(FREE)
002740 E0 
002741 54 
002742 F1      7494 POP	AF		;LOCAL FLAG
002743 C3      7495 JP	DIM3
002744 AF 
002745 26 
               7496 ;
               7497 ;PRINT list...
               7498 ;PRINT #channel,list...
               7499 ;
002746 FE      7500 PRINT:          CP	'#'
002747 23 
002748 20      7501 JR	NZ,PRINT0
002749 64 
00274A CD      7502 CALL	CHNL		;CHANNEL NO. = E
00274B DB 
00274C 36 
00274D CD      7503 PRNTN1:         CALL	NLIST
00274E 00 
00274F 45 
002750 D5      7504 PUSH	DE
002751 CD      7505 CALL	EXPR		;ITEM TO PRINT
002752 02 
002753 17 
002754 08      7506 EX	AF,AF'
002755 FA      7507 JP	M,PRNTN2	;STRING
002756 75 
002757 27 
002758 D1      7508 POP	DE
002759 C5      7509 PUSH	BC
00275A D9      7510 EXX
00275B 7D      7511 LD	A,L
00275C D9      7512 EXX
00275D CD      7513 CALL	OSBPUT
00275E 47 
00275F 12 
002760 D9      7514 EXX
002761 7C      7515 LD	A,H
002762 D9      7516 EXX
002763 CD      7517 CALL	OSBPUT
002764 47 
002765 12 
002766 7D      7518 LD	A,L
002767 CD      7519 CALL	OSBPUT
002768 47 
002769 12 
00276A 7C      7520 LD	A,H
00276B CD      7521 CALL	OSBPUT
00276C 47 
00276D 12 
00276E C1      7522 POP	BC
00276F 79      7523 LD	A,C
002770 CD      7524 CALL	OSBPUT
002771 47 
002772 12 
002773 18      7525 JR	PRNTN1
002774 D8 
002775 4B      7526 PRNTN2:         LD	C,E
002776 D1      7527 POP	DE
002777 21      7528 LD	HL,ACCS
002778 00 
002779 52 
00277A 0C      7529 INC	C
00277B 0D      7530 PRNTN3:         DEC	C
00277C 28      7531 JR	Z,PRNTN4
00277D 09 
00277E 7E      7532 LD	A,(HL)
00277F 23      7533 INC	HL
002780 C5      7534 PUSH	BC
002781 CD      7535 CALL	OSBPUT
002782 47 
002783 12 
002784 C1      7536 POP	BC
002785 18      7537 JR	PRNTN3
002786 F4 
002787 3E      7538 PRNTN4:         LD	A,CR
002788 0D 
002789 CD      7539 CALL	OSBPUT
00278A 47 
00278B 12 
00278C 18      7540 JR	PRNTN1
00278D BF 
               7541 ;
00278E 06      7542 PRINT6:         LD	B,2
00278F 02 
002790 18      7543 JR	PRINTC
002791 22 
002792 01      7544 PRINT8:         LD	BC,100H
002793 00 
002794 01 
002795 18      7545 JR	PRINTC
002796 1D 
002797 21      7546 PRINT9:         LD	HL,STAVAR
002798 00 
002799 54 
00279A AF      7547 XOR	A
00279B BE      7548 CP	(HL)
00279C 28      7549 JR	Z,PRINT0
00279D 10 
00279E 3A      7550 LD	A,(COUNT)
00279F FB 
0027A0 54 
0027A1 B7      7551 OR	A
0027A2 28      7552 JR	Z,PRINT0
0027A3 0A 
0027A4 96      7553 PRINTA:         SUB	(HL)
0027A5 28      7554 JR	Z,PRINT0
0027A6 07 
0027A7 30      7555 JR	NC,PRINTA
0027A8 FB 
0027A9 ED      7556 NEG
0027AA 44 
0027AB CD      7557 CALL	SPACES
0027AC A3 
0027AD 35 
0027AE 3A      7558 PRINT0:         LD	A,(STAVAR)
0027AF 00 
0027B0 54 
0027B1 4F      7559 LD	C,A		;PRINTS
0027B2 06      7560 LD	B,0		;PRINTF
0027B3 00 
0027B4 CD      7561 PRINTC:         CALL	TERMQ
0027B5 36 
0027B6 35 
0027B7 28      7562 JR	Z,PRINT4
0027B8 38 
0027B9 CB      7563 RES	0,B
0027BA 80 
0027BB FD      7564 INC	IY
0027BC 23 
0027BD FE      7565 CP	'~'
0027BE 7E 
0027BF 28      7566 JR	Z,PRINT6
0027C0 CD 
0027C1 FE      7567 CP	';'
0027C2 3B 
0027C3 28      7568 JR	Z,PRINT8
0027C4 CD 
0027C5 FE      7569 CP	','
0027C6 2C 
0027C7 28      7570 JR	Z,PRINT9
0027C8 CE 
0027C9 CD      7571 CALL	FORMAT		;SPC, TAB, '
0027CA 5C 
0027CB 35 
0027CC 28      7572 JR	Z,PRINTC
0027CD E6 
0027CE FD      7573 DEC	IY
0027CF 2B 
0027D0 C5      7574 PUSH	BC
0027D1 CD      7575 CALL	EXPR		;VARIABLE TYPE
0027D2 02 
0027D3 17 
0027D4 08      7576 EX	AF,AF'
0027D5 FA      7577 JP	M,PRINT3	;STRING
0027D6 EB 
0027D7 27 
0027D8 D1      7578 POP	DE
0027D9 D5      7579 PUSH	DE
0027DA CB      7580 BIT	1,D
0027DB 4A 
0027DC F5      7581 PUSH	AF
0027DD CC      7582 CALL	Z,STR		;DECIMAL
0027DE D0 
0027DF 1F 
0027E0 F1      7583 POP	AF
0027E1 C4      7584 CALL	NZ,HEXSTR	;HEX
0027E2 8D 
0027E3 1F 
0027E4 C1      7585 POP	BC
0027E5 C5      7586 PUSH	BC
0027E6 79      7587 LD	A,C
0027E7 93      7588 SUB	E
0027E8 D4      7589 CALL	NC,SPACES		;RIGHT JUSTIFY
0027E9 A3 
0027EA 35 
0027EB C1      7590 PRINT3:         POP	BC
0027EC CD      7591 CALL	PTEXT		;PRINT
0027ED B1 
0027EE 35 
0027EF 18      7592 JR	PRINTC
0027F0 C3 
0027F1 CB      7593 PRINT4:         BIT	0,B
0027F2 40 
0027F3 CC      7594 CALL	Z,CRLF
0027F4 FB 
0027F5 40 
0027F6 18      7595 JR	XEQGO3
0027F7 3F 
               7596 ;
0027F8 FD      7597 ONERR:          INC	IY		;SKIP "ERROR"
0027F9 23 
0027FA CD      7598 CALL	NXT
0027FB 0B 
0027FC 45 
0027FD 21      7599 LD	HL,0		;FLAG NOT LOCAL
0027FE 00 
0027FF 00 
002800 FE      7600 CP	TLOCAL
002801 EA 
002802 20      7601 JR	NZ,ONERR1
002803 1D 
002804 FD      7602 INC	IY		;SKIP "LOCAL"
002805 23 
002806 2A      7603 LD	HL,(ERRTRP)
002807 EA 
002808 54 
002809 E5      7604 PUSH	HL
00280A 2A      7605 LD	HL,(ONERSP)
00280B EC 
00280C 54 
00280D E5      7606 PUSH	HL
00280E 21      7607 LD	HL,400H		;TYPE = 4, 'EXPONENT' = 0
00280F 00 
002810 04 
002811 E5      7608 PUSH	HL
002812 21      7609 LD	HL,ERRTRP
002813 EA 
002814 54 
002815 E5      7610 PUSH	HL
002816 21      7611 LD	HL,LOCCHK
002817 2A 
002818 35 
002819 E5      7612 PUSH	HL
00281A 21      7613 LD	HL,0
00281B 00 
00281C 00 
00281D 39      7614 ADD	HL,SP
00281E CD      7615 CALL	NXT
00281F 0B 
002820 45 
002821 22      7616 ONERR1:         LD	(ONERSP),HL
002822 EC 
002823 54 
002824 FD      7617 LD	(ERRTRP),IY
002825 22 
002826 EA 
002827 54 
002828 FE      7618 CP	TOFF
002829 87 
00282A C2      7619 JP	NZ,REM
00282B 31 
00282C 25 
00282D FD      7620 INC	IY		;SKIP "OFF"
00282E 23 
00282F ED      7621 SBC	HL,HL
002830 62 
002831 22      7622 LD	(ONERSP),HL
002832 EC 
002833 54 
002834 22      7623 LD	(ERRTRP),HL
002835 EA 
002836 54 
002837 C3      7624 XEQGO3:         JP	XEQ
002838 99 
002839 24 
               7625 ;
               7626 ;ON expr GOTO line[,line...] [ELSE statement]
               7627 ;ON expr GOTO line[,line...] [ELSE line]
               7628 ;ON expr GOSUB line[,line...] [ELSE statement]
               7629 ;ON expr GOSUB line[,line...] [ELSE line]
               7630 ;ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
               7631 ;ON ERROR [LOCAL] statement [:statement...]
               7632 ;ON ERROR [LOCAL] OFF
               7633 ;
00283A CD      7634 ON:             CALL	TERMQ
00283B 36 
00283C 35 
00283D CA      7635 JP	Z,CSRON
00283E 56 
00283F 03 
002840 FE      7636 CP	TERROR
002841 85 
002842 28      7637 JR	Z,ONERR		;"ON ERROR"
002843 B4 
002844 CD      7638 CALL	EXPRI
002845 33 
002846 18 
002847 FD      7639 LD	A,(IY)
002848 7E 
002849 00 
00284A FD      7640 INC	IY
00284B 23 
00284C 1E      7641 LD	E,','		;SEPARATOR
00284D 2C 
00284E FE      7642 CP	TGOTO
00284F E5 
002850 28      7643 JR	Z,ON1
002851 0B 
002852 FE      7644 CP	TGOSUB
002853 E4 
002854 28      7645 JR	Z,ON1
002855 07 
002856 1E      7646 LD	E,TPROC
002857 F2 
002858 BB      7647 CP	E
002859 3E      7648 LD	A,39
00285A 27 
00285B 20      7649 JR	NZ,ERROR2ex	;"ON syntax"
00285C 4F 
00285D 57      7650 ON1:            LD	D,A
00285E D9      7651 EXX
00285F E5      7652 PUSH	HL
002860 D9      7653 EXX
002861 C1      7654 POP	BC		;ON INDEX
002862 78      7655 LD	A,B
002863 B4      7656 OR	H
002864 B5      7657 OR	L
002865 20      7658 JR	NZ,ON4		;OUT OF RANGE
002866 32 
002867 B1      7659 OR	C
002868 28      7660 JR	Z,ON4
002869 2F 
00286A 0D      7661 DEC	C
00286B 28      7662 JR	Z,ON3		;INDEX=1
00286C 11 
00286D CD      7663 ON2:            CALL	TERMQ
00286E 36 
00286F 35 
002870 28      7664 JR	Z,ON4		;OUT OF RANGE
002871 27 
002872 FD      7665 INC	IY		;SKIP DELIMITER
002873 23 
002874 FE      7666 CP	'"'
002875 22 
002876 28      7667 JR	Z,ON5
002877 1A 
002878 BB      7668 CP	E
002879 20      7669 JR	NZ,ON2
00287A F2 
00287B 0D      7670 DEC	C
00287C 20      7671 JR	NZ,ON2
00287D EF 
00287E 7B      7672 ON3:            LD	A,E
00287F FE      7673 CP	TPROC
002880 F2 
002881 28      7674 JR	Z,ONPROC
002882 2C 
002883 D5      7675 PUSH	DE
002884 CD      7676 CALL	ITEMI		;LINE NUMBER
002885 60 
002886 18 
002887 D1      7677 POP	DE
002888 7A      7678 LD	A,D
002889 FE      7679 CP	TGOTO
00288A E5 
00288B 28      7680 JR	Z,GOTO2
00288C 30 
00288D CD      7681 CALL	SPAN		;SKIP REST OF LIST
00288E 42 
00288F 35 
002890 18      7682 JR	GOSUB1
002891 3C 
               7683 ;
002892 CD      7684 ON5:            CALL	QUOTE
002893 99 
002894 36 
002895 FD      7685 INC	IY
002896 23 
002897 18      7686 JR	ON2
002898 D4 
               7687 ;
002899 FD      7688 ON4:            LD	A,(IY)
00289A 7E 
00289B 00 
00289C FD      7689 INC	IY
00289D 23 
00289E FE      7690 CP	TELSE
00289F 8B 
0028A0 CA      7691 JP	Z,IF1		;ELSE CLAUSE
0028A1 E2 
0028A2 2C 
0028A3 FE      7692 CP	CR
0028A4 0D 
0028A5 20      7693 JR	NZ,ON4
0028A6 F2 
0028A7 3E      7694 LD	A,40		;'ON range'
0028A8 28 
0028A9 21      7695 DB	21H
0028AA 3E      7696 FORVAR:         LD	A,34		;'FOR variable'
0028AB 22 
0028AC C3      7697 ERROR2ex:         JP	ERROR_
0028AD 44 
0028AE 3F 
               7698 ;
0028AF 3E      7699 ONPROC:         LD	A,TON
0028B0 EE 
0028B1 C3      7700 JP	PROC
0028B2 E7 
0028B3 29 
               7701 ;
               7702 ;GOTO line
               7703 ;
0028B4 CD      7704 GOTO:           CALL	ITEMI		;LINE NUMBER
0028B5 60 
0028B6 18 
0028B7 CD      7705 GOTO1:          CALL	TERMQ
0028B8 36 
0028B9 35 
0028BA C2      7706 JP	NZ,SYNTAX
0028BB E0 
0028BC 25 
0028BD D9      7707 GOTO2:          EXX
0028BE CD      7708 CALL	FINDL
0028BF 43 
0028C0 41 
0028C1 E5      7709 PUSH	HL
0028C2 FD      7710 POP	IY
0028C3 E1 
0028C4 CA      7711 JP	Z,XEQ0
0028C5 84 
0028C6 24 
0028C7 3E      7712 LD	A,41
0028C8 29 
0028C9 18      7713 JR	ERROR2ex		;"No such line"
0028CA E1 
               7714 ;
               7715 ;GOSUB line
               7716 ;
0028CB CD      7717 GOSUB:          CALL	ITEMI		;LINE NUMBER
0028CC 60 
0028CD 18 
0028CE FD      7718 GOSUB1:         PUSH	IY		;TEXT POINTER
0028CF E5 
0028D0 CD      7719 CALL	CHECK		;CHECK ROOM
0028D1 86 
0028D2 32 
0028D3 CD      7720 CALL	GOTO1		;SAVE MARKER
0028D4 B7 
0028D5 28 
               7721 GOSCHK:         EQU	$
               7722 ;
               7723 ;RETURN
               7724 ;
0028D6 D1      7725 RETURN:         POP	DE		;MARKER
0028D7 21      7726 LD	HL,GOSCHK
0028D8 D6 
0028D9 28 
0028DA B7      7727 OR	A
0028DB ED      7728 SBC	HL,DE
0028DC 52 
0028DD FD      7729 POP	IY
0028DE E1 
0028DF 28      7730 JR	Z,XEQGO2ex
0028E0 30 
0028E1 3E      7731 LD	A,38
0028E2 26 
0028E3 18      7732 JR	ERROR2ex		;"No GOSUB"
0028E4 C7 
               7733 ;
               7734 ;REPEAT
               7735 ;
0028E5 FD      7736 REPEAT:         PUSH	IY
0028E6 E5 
0028E7 CD      7737 CALL	CHECK
0028E8 86 
0028E9 32 
0028EA CD      7738 CALL	XEQ
0028EB 99 
0028EC 24 
               7739 REPCHK:         EQU	$
               7740 ;
               7741 ;UNTIL expr
               7742 ;
0028ED C1      7743 UNTIL:          POP	BC
0028EE C5      7744 PUSH	BC
0028EF 21      7745 LD	HL,REPCHK
0028F0 ED 
0028F1 28 
0028F2 B7      7746 OR	A
0028F3 ED      7747 SBC	HL,BC
0028F4 42 
0028F5 28      7748 JR	Z,UNTIL1
0028F6 0B 
0028F7 3E      7749 LD	A,3
0028F8 03 
0028F9 CD      7750 CALL	RESLOC
0028FA 31 
0028FB 34 
0028FC 20      7751 JR	NZ,UNTIL
0028FD EF 
0028FE 3E      7752 LD	A,43
0028FF 2B 
002900 18      7753 JR	ERROR2ex		;"Not in a REPEAT loop"
002901 AA 
               7754 ;
002902 CD      7755 UNTIL1:         CALL	EXPRI
002903 33 
002904 18 
002905 CD      7756 CALL	TEST
002906 59 
002907 1F 
002908 C1      7757 POP	BC
002909 D1      7758 POP	DE
00290A 20      7759 JR	NZ,XEQGO2ex		;TRUE
00290B 05 
00290C D5      7760 PUSH	DE
00290D C5      7761 PUSH	BC
00290E D5      7762 PUSH	DE
00290F FD      7763 POP	IY
002910 E1 
002911 C3      7764 XEQGO2ex:         JP	XEQ
002912 99 
002913 24 
               7765 ;
               7766 ;FOR var = expr TO expr [STEP expr]
               7767 ;
002914 CD      7768 FORex:            CALL	ASSIGN
002915 AF 
002916 31 
002917 20      7769 JR	NZ,FORVAR	;"FOR variable"
002918 91 
002919 F5      7770 PUSH	AF		;SAVE TYPE
00291A FD      7771 LD	A,(IY)
00291B 7E 
00291C 00 
00291D FE      7772 CP	TTO
00291E B8 
00291F 3E      7773 LD	A,36
002920 24 
002921 20      7774 JR	NZ,ERROR2ex	;"No TO"
002922 89 
002923 FD      7775 INC	IY
002924 23 
002925 DD      7776 PUSH	IX
002926 E5 
002927 CD      7777 CALL	EXPRN		;LIMIT
002928 2C 
002929 18 
00292A DD      7778 POP	IX
00292B E1 
00292C F1      7779 POP	AF
00292D 47      7780 LD	B,A		;TYPE
00292E C5      7781 PUSH	BC		;SAVE ON STACK
00292F E5      7782 PUSH	HL
002930 21      7783 LD	HL,0
002931 00 
002932 00 
002933 4C      7784 LD	C,H
002934 D9      7785 EXX
002935 E5      7786 PUSH	HL
002936 21      7787 LD	HL,1		;PRESET STEP
002937 01 
002938 00 
002939 D9      7788 EXX
00293A FD      7789 LD	A,(IY)
00293B 7E 
00293C 00 
00293D FE      7790 CP	TSTEP
00293E 88 
00293F 20      7791 JR	NZ,FOR1
002940 09 
002941 FD      7792 INC	IY
002942 23 
002943 DD      7793 PUSH	IX
002944 E5 
002945 CD      7794 CALL	EXPRN		;STEP
002946 2C 
002947 18 
002948 DD      7795 POP	IX
002949 E1 
00294A 06      7796 FOR1:           LD	B,8		;FPP '>'
00294B 08 
00294C CB      7797 BIT	7,H
00294D 7C 
00294E 20      7798 JR	NZ,FOR2		;STEP SIGN
00294F 02 
002950 06      7799 LD	B,12		;FPP '<'
002951 0C 
002952 C5      7800 FOR2:           PUSH	BC
002953 E5      7801 PUSH	HL
002954 D9      7802 EXX
002955 E5      7803 PUSH	HL
002956 D9      7804 EXX
002957 FD      7805 PUSH	IY		;SAVE TEXT POINTER
002958 E5 
002959 DD      7806 PUSH	IX		;LOOP VARIABLE
00295A E5 
00295B CD      7807 CALL	CHECK
00295C 86 
00295D 32 
00295E CD      7808 CALL	XEQ
00295F 99 
002960 24 
               7809 FORCHK:         EQU	$
               7810 ;
               7811 ;NEXT [var[,var...]]
               7812 ;
002961 C1      7813 NEXT:           POP	BC		;MARKER
002962 21      7814 LD	HL,FORCHK
002963 61 
002964 29 
002965 B7      7815 OR	A
002966 ED      7816 SBC	HL,BC
002967 42 
002968 28      7817 JR	Z,NEXT2
002969 0C 
00296A C5      7818 PUSH	BC
00296B 3E      7819 LD	A,3
00296C 03 
00296D CD      7820 CALL	RESLOC
00296E 31 
00296F 34 
002970 20      7821 JR	NZ,NEXT
002971 EF 
002972 3E      7822 LD	A,32
002973 20 
002974 18      7823 JR	ERROR3ex		;"Not in a FOR loop"
002975 6A 
               7824 ;
002976 CD      7825 NEXT2:          CALL	TERMQ
002977 36 
002978 35 
002979 E1      7826 POP	HL
00297A E5      7827 PUSH	HL
00297B C5      7828 PUSH	BC
00297C E5      7829 PUSH	HL
00297D C4      7830 CALL	NZ,GETVAR	;VARIABLE
00297E E3 
00297F 41 
002980 D1      7831 POP	DE
002981 EB      7832 EX	DE,HL
002982 B7      7833 OR	A
002983 ED      7834 NEXT0:          SBC	HL,DE
002984 52 
002985 20      7835 JR	NZ,NEXT1
002986 47 
002987 D5      7836 PUSH	DE
002988 DD      7837 LD	IX,6+2
002989 21 
00298A 08 
00298B 00 
00298C DD      7838 ADD	IX,SP
00298D 39 
00298E CD      7839 CALL	DLOAD5		;STEP
00298F F1 
002990 19 
002991 DD      7840 LD	A,(IX+11)	;TYPE
002992 7E 
002993 0B 
002994 DD      7841 POP	IX
002995 E1 
002996 CD      7842 CALL	LOADN		;LOOP VARIABLE
002997 25 
002998 19 
002999 F5      7843 PUSH	AF
00299A 3E      7844 LD	A,'+' & 0FH
00299B 0B 
00299C CD      7845 CALL	FPP		;ADD STEP
00299D 15 
00299E 45 
00299F 38      7846 JR	C,ERROR3ex
0029A0 3F 
0029A1 F1      7847 POP	AF		;RESTORE TYPE
0029A2 CD      7848 CALL	STOREN		;UPDATE VARIABLE
0029A3 F0 
0029A4 31 
0029A5 DD      7849 LD	IX,12
0029A6 21 
0029A7 0C 
0029A8 00 
0029A9 DD      7850 ADD	IX,SP
0029AA 39 
0029AB CD      7851 CALL	DLOAD5		;LIMIT
0029AC F1 
0029AD 19 
0029AE DD      7852 LD	A,(IX-1)
0029AF 7E 
0029B0 FF 
0029B1 CD      7853 CALL	FPP		;TEST AGAINST LIMIT
0029B2 15 
0029B3 45 
0029B4 38      7854 JR	C,ERROR3ex
0029B5 2A 
0029B6 24      7855 INC	H
0029B7 20      7856 JR	NZ,LOOP		;KEEP LOOPING
0029B8 0A 
0029B9 21      7857 LD	HL,18
0029BA 12 
0029BB 00 
0029BC 39      7858 ADD	HL,SP
0029BD F9      7859 LD	SP,HL
0029BE CD      7860 CALL	NLIST
0029BF 00 
0029C0 45 
0029C1 18      7861 JR	NEXT
0029C2 9E 
               7862 ;
0029C3 C1      7863 LOOP:           POP	BC
0029C4 D1      7864 POP	DE
0029C5 FD      7865 POP	IY
0029C6 E1 
0029C7 FD      7866 PUSH	IY
0029C8 E5 
0029C9 D5      7867 PUSH	DE
0029CA C5      7868 PUSH	BC
0029CB C3      7869 JP	XEQ
0029CC 99 
0029CD 24 
               7870 ;
0029CE 21      7871 NEXT1:          LD	HL,18
0029CF 12 
0029D0 00 
0029D1 39      7872 ADD	HL,SP
0029D2 F9      7873 LD	SP,HL		;"POP" THE STACK
0029D3 C1      7874 POP	BC
0029D4 21      7875 LD	HL,FORCHK
0029D5 61 
0029D6 29 
0029D7 ED      7876 SBC	HL,BC
0029D8 42 
0029D9 E1      7877 POP	HL		;VARIABLE POINTER
0029DA E5      7878 PUSH	HL
0029DB C5      7879 PUSH	BC
0029DC 28      7880 JR	Z,NEXT0
0029DD A5 
0029DE 3E      7881 LD	A,33
0029DF 21 
0029E0 C3      7882 ERROR3ex:         JP	ERROR_		;"Can't match FOR"
0029E1 44 
0029E2 3F 
               7883 ;
               7884 ;FNname
               7885 ;N.B. ENTERED WITH A <> TON
               7886 ;
0029E3 F5      7887 FN:             PUSH	AF		;MAKE SPACE ON STACK
0029E4 CD      7888 CALL	PROC1
0029E5 EB 
0029E6 29 
               7889 FNCHK:          EQU	$
               7890 ;
               7891 ;PROCname
               7892 ;N.B. ENTERED WITH A = ON PROC FLAG
               7893 ;
0029E7 F5      7894 PROC:           PUSH	AF		;MAKE SPACE ON STACK
0029E8 CD      7895 CALL	PROC1
0029E9 EB 
0029EA 29 
               7896 PROCHK:         EQU	$
0029EB CD      7897 PROC1:          CALL	CHECK
0029EC 86 
0029ED 32 
0029EE FD      7898 DEC	IY
0029EF 2B 
0029F0 FD      7899 PUSH	IY
0029F1 E5 
0029F2 CD      7900 CALL	GETDEF
0029F3 96 
0029F4 42 
0029F5 C1      7901 POP	BC
0029F6 28      7902 JR	Z,PROC4
0029F7 39 
0029F8 3E      7903 LD	A,30
0029F9 1E 
0029FA 38      7904 JR	C,ERROR3ex	;"Bad call"
0029FB E4 
0029FC C5      7905 PUSH	BC
0029FD 2A      7906 LD	HL,(PAGE_)
0029FE DC 
0029FF 54 
002A00 3E      7907 PROC2:          LD	A,TDEF
002A01 DD 
002A02 CD      7908 CALL	SEARCHex		;LOOK FOR "DEF"
002A03 FB 
002A04 35 
002A05 38      7909 JR	C,PROC3
002A06 21 
002A07 E5      7910 PUSH	HL
002A08 FD      7911 POP	IY
002A09 E1 
002A0A FD      7912 INC	IY		;SKIP DEF
002A0B 23 
002A0C CD      7913 CALL	NXT
002A0D 0B 
002A0E 45 
002A0F CD      7914 CALL	GETDEF
002A10 96 
002A11 42 
002A12 FD      7915 PUSH	IY
002A13 E5 
002A14 D1      7916 POP	DE
002A15 38      7917 JR	C,PROC6
002A16 09 
002A17 C4      7918 CALL	NZ,CREATE
002A18 3C 
002A19 43 
002A1A FD      7919 PUSH	IY
002A1B E5 
002A1C D1      7920 POP	DE
002A1D 73      7921 LD	(HL),E
002A1E 23      7922 INC	HL
002A1F 72      7923 LD	(HL),D		;SAVE ADDRESS
002A20 EB      7924 PROC6:          EX	DE,HL
002A21 3E      7925 LD	A,CR
002A22 0D 
002A23 47      7926 LD	B,A
002A24 ED      7927 CPIR			;SKIP TO END OF LINE
002A25 B1 
002A26 18      7928 JR	PROC2
002A27 D8 
002A28 FD      7929 PROC3:          POP	IY		;RESTORE TEXT POINTER
002A29 E1 
002A2A CD      7930 CALL	GETDEF
002A2B 96 
002A2C 42 
002A2D 3E      7931 LD	A,29
002A2E 1D 
002A2F 20      7932 JR	NZ,ERROR3ex	;"No such FN/PROC"
002A30 AF 
002A31 5E      7933 PROC4:          LD	E,(HL)
002A32 23      7934 INC	HL
002A33 56      7935 LD	D,(HL)		;GET ADDRESS
002A34 21      7936 LD	HL,2
002A35 02 
002A36 00 
002A37 39      7937 ADD	HL,SP
002A38 CD      7938 CALL	NXT		;ALLOW SPACE BEFORE (
002A39 0B 
002A3A 45 
002A3B D5      7939 PUSH	DE		;EXCHANGE DE,IY
002A3C FD      7940 EX	(SP),IY
002A3D E3 
002A3E D1      7941 POP	DE
002A3F FE      7942 CP	'('		;ARGUMENTS?
002A40 28 
002A41 C2      7943 JP	NZ,PROC5
002A42 E5 
002A43 2A 
002A44 CD      7944 CALL	NXT		;ALLOW SPACE BEFORE (
002A45 0B 
002A46 45 
002A47 FE      7945 CP	'('
002A48 28 
002A49 C2      7946 JP	NZ,SYNTAX	;"Syntax error"
002A4A E0 
002A4B 25 
002A4C FD      7947 PUSH	IY
002A4D E5 
002A4E C1      7948 POP	BC		;SAVE IY IN BC
002A4F D9      7949 EXX
002A50 08      7950 EX	AF,AF'
002A51 AF      7951 XOR	A		;INITIALISE RETURN COUNT
002A52 08      7952 EX	AF,AF'
002A53 CD      7953 CALL	SAVLOC		;SAVE DUMMY VARIABLES
002A54 BE 
002A55 34 
002A56 08      7954 EX	AF,AF'
002A57 B7      7955 OR	A
002A58 28      7956 JR	Z,RETCHK	;NO RETURNS
002A59 16 
002A5A E5      7957 PUSH	HL
002A5B ED      7958 NEG
002A5C 44 
002A5D 6F      7959 LD	L,A
002A5E ED      7960 NEG
002A5F 44 
002A60 26      7961 LD	H,-1		;HL = -RETURNS
002A61 FF 
002A62 29      7962 ADD	HL,HL
002A63 29      7963 ADD	HL,HL
002A64 29      7964 ADD	HL,HL		;-RETURNS * 8
002A65 E3      7965 EX	(SP),HL
002A66 DD      7966 POP	IX
002A67 E1 
002A68 DD      7967 ADD	IX,SP
002A69 39 
002A6A DD      7968 LD	SP,IX
002A6B F9 
002A6C F5      7969 PUSH	AF		;PUSH RETURN COUNT
002A6D CD      7970 CALL	RETCHK		;PUSH MARKER
002A6E 70 
002A6F 2A 
002A70 08      7971 RETCHK:         EX	AF,AF'
002A71 CD      7972 CALL	BRAKET		;CLOSING BRACKET
002A72 AE 
002A73 20 
002A74 D9      7973 EXX
002A75 C5      7974 PUSH	BC
002A76 FD      7975 POP	IY		;RESTORE IY
002A77 E1 
002A78 E5      7976 PUSH	HL
002A79 CD      7977 CALL	ARGUE		;TRANSFER ARGUMENTS
002A7A CD 
002A7B 32 
002A7C E1      7978 POP	HL
               7979 ;
               7980 ; If any of the dummy arguments is the same as a passed-by-reference
               7981 ; variable, then it must not be restored on exit (it would overwrite
               7982 ; the wanted returned values), therefore search the saved values on
               7983 ; the stack and if a match is found set bit 4 of the type.  On exit
               7984 ; from the FN/PROC this will prevent the dummies from being restored.
               7985 ;
002A7D E3      7986 EX	(SP),HL
002A7E B7      7987 OR	A
002A7F 01      7988 LD	BC,RETCHK
002A80 70 
002A81 2A 
002A82 ED      7989 SBC	HL,BC
002A83 42 
002A84 09      7990 ADD	HL,BC
002A85 E3      7991 EX	(SP),HL
002A86 20      7992 JR	NZ,PROC5	;No RETURNs
002A87 5D 
               7993 ;
002A88 D5      7994 PUSH	DE
002A89 E5      7995 PUSH	HL
002A8A 21      7996 LD	HL,7		;Skip two PUSHes and RETCHK
002A8B 07 
002A8C 00 
002A8D 39      7997 ADD	HL,SP
002A8E 7E      7998 LD	A,(HL)		;RETURN count
002A8F 23      7999 INC	HL
002A90 E5      8000 PUSH	HL
002A91 DD      8001 POP	IX		;Address RETURNs table
002A92 E1 
002A93 5F      8002 PROC0:          LD	E,A
002A94 16      8003 LD	D,0
002A95 00 
002A96 EB      8004 EX	DE,HL
002A97 29      8005 ADD	HL,HL
002A98 29      8006 ADD	HL,HL
002A99 29      8007 ADD	HL,HL
002A9A 19      8008 ADD	HL,DE		;HL addresses SAVLOC stack
002A9B 23      8009 INC	HL
002A9C 23      8010 INC	HL		;Bump past LOCCHK
002A9D 5E      8011 PROC7:          LD	E,(HL)
002A9E 23      8012 INC	HL
002A9F 56      8013 LD	D,(HL)		;DE = SAVLOC VARPTR
002AA0 23      8014 INC	HL
002AA1 4E      8015 LD	C,(HL)		;Length (if string)
002AA2 23      8016 INC	HL
002AA3 46      8017 LD	B,(HL)		;Variable type
               8018 ;
               8019 ; Scan RETURNs table for VARPTR match
               8020 ;
002AA4 C5      8021 PUSH	BC		;Save type
002AA5 E5      8022 PUSH	HL
002AA6 DD      8023 PUSH	IX
002AA7 E5 
002AA8 47      8024 LD	B,A		;B = RETURN count
002AA9 DD      8025 PROC8:          LD	L,(IX+4)
002AAA 6E 
002AAB 04 
002AAC DD      8026 LD	H,(IX+5)	;HL = RETURNed VARPTR
002AAD 66 
002AAE 05 
002AAF B7      8027 OR	A
002AB0 ED      8028 SBC	HL,DE
002AB1 52 
002AB2 28      8029 JR	Z,PROC9
002AB3 09 
002AB4 EB      8030 EX	DE,HL
002AB5 11      8031 LD	DE,8
002AB6 08 
002AB7 00 
002AB8 DD      8032 ADD	IX,DE
002AB9 19 
002ABA EB      8033 EX	DE,HL
002ABB 10      8034 DJNZ	PROC8
002ABC EC 
002ABD DD      8035 PROC9:          POP	IX
002ABE E1 
002ABF E1      8036 POP	HL
002AC0 C1      8037 POP	BC		;Restore type
               8038 ;
               8039 ; If match, set bit 4 of type:
               8040 ;
002AC1 20      8041 JR	NZ,PROCA
002AC2 02 
002AC3 CB      8042 SET	4,(HL)		;Flag don't restore
002AC4 E6 
               8043 ;
               8044 ; Increment past stacked data:
               8045 ;
002AC5 11      8046 PROCA:          LD	DE,3
002AC6 03 
002AC7 00 
002AC8 CB      8047 BIT	6,B
002AC9 70 
002ACA 20      8048 JR	NZ,PROCB	;Whole array
002ACB 08 
002ACC 1E      8049 LD	E,5
002ACD 05 
002ACE CB      8050 BIT	7,B
002ACF 78 
002AD0 28      8051 JR	Z,PROCB		;Numeric
002AD1 02 
002AD2 59      8052 LD	E,C
002AD3 13      8053 INC	DE
002AD4 19      8054 PROCB:          ADD	HL,DE
002AD5 4E      8055 LD	C,(HL)
002AD6 23      8056 INC	HL
002AD7 46      8057 LD	B,(HL)
002AD8 23      8058 INC	HL		; BC = marker ?
002AD9 EB      8059 EX	DE,HL
002ADA 21      8060 LD	HL,LOCCHK
002ADB 2A 
002ADC 35 
002ADD B7      8061 OR	A
002ADE ED      8062 SBC	HL,BC
002ADF 42 
002AE0 EB      8063 EX	DE,HL
002AE1 28      8064 JR	Z,PROC7		;Another
002AE2 BA 
002AE3 E1      8065 POP	HL
002AE4 D1      8066 POP	DE
               8067 ;
002AE5 73      8068 PROC5:          LD	(HL),E		;SAVE "RETURN ADDRESS"
002AE6 23      8069 INC	HL
002AE7 7E      8070 LD	A,(HL)
002AE8 72      8071 LD	(HL),D
002AE9 FE      8072 CP	TON		;WAS IT "ON PROC" ?
002AEA EE 
002AEB 20      8073 JR	NZ,XEQGO
002AEC 0C 
002AED D5      8074 PUSH	DE
002AEE FD      8075 EX	(SP),IY
002AEF E3 
002AF0 CD      8076 CALL	SPAN		;SKIP REST OF ON LIST
002AF1 42 
002AF2 35 
002AF3 FD      8077 EX	(SP),IY
002AF4 E3 
002AF5 D1      8078 POP	DE
002AF6 72      8079 LD	(HL),D
002AF7 2B      8080 DEC	HL
002AF8 73      8081 LD	(HL),E
002AF9 C3      8082 XEQGO:          JP	XEQ
002AFA 99 
002AFB 24 
               8083 ;
002AFC FD      8084 LOCERR:         INC	IY
002AFD 23 
002AFE 18      8085 JR	XEQGO
002AFF F9 
               8086 ;
               8087 ;LOCAL DATA
               8088 ;
002B00 FD      8089 LOCDAT:         INC	IY
002B01 23 
002B02 2A      8090 LD	HL,(DATPTR)
002B03 F0 
002B04 54 
002B05 E5      8091 PUSH	HL
002B06 3E      8092 LD	A,40H
002B07 40 
002B08 F5      8093 PUSH	AF
002B09 21      8094 LD	HL,DATPTR
002B0A F0 
002B0B 54 
002B0C E5      8095 PUSH	HL
002B0D 21      8096 LD	HL,LOCCHK
002B0E 2A 
002B0F 35 
002B10 E5      8097 PUSH	HL
002B11 18      8098 JR	XEQGO
002B12 E6 
               8099 ;
               8100 ;LOCAL var[,var...]
               8101 ;
002B13 FE      8102 LOCAL:          CP	TERROR
002B14 85 
002B15 28      8103 JR	Z,LOCERR
002B16 E5 
002B17 FE      8104 CP	TDATA
002B18 DC 
002B19 28      8105 JR	Z,LOCDAT
002B1A E5 
002B1B C1      8106 POP	BC
002B1C C5      8107 PUSH	BC
002B1D 21      8108 LD	HL,FNCHK
002B1E E7 
002B1F 29 
002B20 B7      8109 OR	A
002B21 ED      8110 SBC	HL,BC
002B22 42 
002B23 28      8111 JR	Z,LOCAL1
002B24 23 
002B25 21      8112 LD	HL,PROCHK
002B26 EB 
002B27 29 
002B28 B7      8113 OR	A
002B29 ED      8114 SBC	HL,BC
002B2A 42 
002B2B 28      8115 JR	Z,LOCAL1
002B2C 1B 
002B2D 21      8116 LD	HL,LOCCHK
002B2E 2A 
002B2F 35 
002B30 B7      8117 OR	A
002B31 ED      8118 SBC	HL,BC
002B32 42 
002B33 28      8119 JR	Z,LOCAL1
002B34 13 
002B35 21      8120 LD	HL,ARRCHK
002B36 DC 
002B37 26 
002B38 B7      8121 OR	A
002B39 ED      8122 SBC	HL,BC
002B3A 42 
002B3B 28      8123 JR	Z,LOCAL1
002B3C 0B 
002B3D 21      8124 LD	HL,RETCHK
002B3E 70 
002B3F 2A 
002B40 B7      8125 OR	A
002B41 ED      8126 SBC	HL,BC
002B42 42 
002B43 3E      8127 LD	A,12
002B44 0C 
002B45 C2      8128 JP	NZ,ERROR_	;"Not LOCAL"
002B46 44 
002B47 3F 
002B48 FD      8129 LOCAL1:         PUSH	IY
002B49 E5 
002B4A C1      8130 POP	BC
002B4B D9      8131 EXX
002B4C FD      8132 DEC	IY
002B4D 2B 
002B4E CD      8133 CALL	SAVLOC
002B4F BE 
002B50 34 
002B51 D9      8134 EXX
002B52 C5      8135 PUSH	BC
002B53 FD      8136 POP	IY
002B54 E1 
002B55 CD      8137 LOCAL2:         CALL	GETVAR
002B56 E3 
002B57 41 
002B58 C2      8138 JP	NZ,SYNTAX
002B59 E0 
002B5A 25 
002B5B CB      8139 BIT	6,A		;ARRAY?
002B5C 77 
002B5D 20      8140 JR	NZ,LOCAL4
002B5E 14 
002B5F B7      8141 OR	A		;TYPE
002B60 08      8142 EX	AF,AF'
002B61 CD      8143 CALL	ZERO
002B62 F8 
002B63 1F 
002B64 08      8144 EX	AF,AF'
002B65 F5      8145 PUSH	AF
002B66 F4      8146 CALL	P,STOREN	;ZERO
002B67 F0 
002B68 31 
002B69 F1      8147 POP	AF
002B6A 59      8148 LD	E,C
002B6B FC      8149 CALL	M,STORES
002B6C 41 
002B6D 32 
002B6E CD      8150 LOCAL3:         CALL	NLIST
002B6F 00 
002B70 45 
002B71 18      8151 JR	LOCAL2
002B72 E2 
               8152 ;
002B73 DD      8153 LOCAL4:         LD	(IX+0),1	;FLAG LOCAL ARRAY
002B74 36 
002B75 00 
002B76 01 
002B77 DD      8154 LD	(IX+1),0
002B78 36 
002B79 01 
002B7A 00 
002B7B 18      8155 JR	LOCAL3
002B7C F1 
               8156 ;
               8157 ;ENDPROC
               8158 ;
002B7D C1      8159 ENDPRO:         POP	BC
002B7E 21      8160 LD	HL,PROCHK	;PROC MARKER
002B7F EB 
002B80 29 
002B81 AF      8161 XOR	A
002B82 ED      8162 SBC	HL,BC
002B83 42 
002B84 28      8163 JR	Z,ENDPR1
002B85 0B 
002B86 C5      8164 PUSH	BC		;PUT BACK
002B87 CD      8165 CALL	RESLOC
002B88 31 
002B89 34 
002B8A 20      8166 JR	NZ,ENDPRO
002B8B F1 
002B8C 3E      8167 LD	A,13
002B8D 0D 
002B8E C3      8168 JP	ERROR_		;"No PROC"
002B8F 44 
002B90 3F 
               8169 ;
002B91 FD      8170 ENDPR1:         POP	IY
002B92 E1 
002B93 C3      8171 XEQGO6:         JP	XEQ
002B94 99 
002B95 24 
               8172 ;
               8173 ;INPUT #channel,var,var...
               8174 ;
002B96 CD      8175 INPUTN:         CALL	CHNL		;E = CHANNEL NUMBER
002B97 DB 
002B98 36 
002B99 CD      8176 INPN1:          CALL	NLIST
002B9A 00 
002B9B 45 
002B9C D5      8177 PUSH	DE
002B9D CD      8178 CALL	VAR_
002B9E D6 
002B9F 25 
002BA0 D1      8179 POP	DE
002BA1 F5      8180 PUSH	AF		;SAVE TYPE
002BA2 E5      8181 PUSH	HL		;VARPTR
002BA3 B7      8182 OR	A
002BA4 FA      8183 JP	M,INPN2		;STRING
002BA5 C9 
002BA6 2B 
002BA7 CD      8184 CALL	OSBGET
002BA8 3F 
002BA9 12 
002BAA D9      8185 EXX
002BAB 6F      8186 LD	L,A
002BAC D9      8187 EXX
002BAD CD      8188 CALL	OSBGET
002BAE 3F 
002BAF 12 
002BB0 D9      8189 EXX
002BB1 67      8190 LD	H,A
002BB2 D9      8191 EXX
002BB3 CD      8192 CALL	OSBGET
002BB4 3F 
002BB5 12 
002BB6 6F      8193 LD	L,A
002BB7 CD      8194 CALL	OSBGET
002BB8 3F 
002BB9 12 
002BBA 67      8195 LD	H,A
002BBB CD      8196 CALL	OSBGET
002BBC 3F 
002BBD 12 
002BBE 4F      8197 LD	C,A
002BBF DD      8198 POP	IX
002BC0 E1 
002BC1 F1      8199 POP	AF		;RESTORE TYPE
002BC2 D5      8200 PUSH	DE		;SAVE CHANNEL
002BC3 CD      8201 CALL	STOREN
002BC4 F0 
002BC5 31 
002BC6 D1      8202 POP	DE
002BC7 18      8203 JR	INPN1
002BC8 D0 
002BC9 21      8204 INPN2:          LD	HL,ACCS
002BCA 00 
002BCB 52 
002BCC CD      8205 INPN3:          CALL	OSBGET
002BCD 3F 
002BCE 12 
002BCF FE      8206 CP	CR
002BD0 0D 
002BD1 28      8207 JR	Z,INPN4
002BD2 04 
002BD3 77      8208 LD	(HL),A
002BD4 2C      8209 INC	L
002BD5 20      8210 JR	NZ,INPN3
002BD6 F5 
002BD7 DD      8211 INPN4:          POP	IX
002BD8 E1 
002BD9 F1      8212 POP	AF
002BDA D5      8213 PUSH	DE
002BDB EB      8214 EX	DE,HL
002BDC CD      8215 CALL	STACCS
002BDD 3E 
002BDE 32 
002BDF D1      8216 POP	DE
002BE0 18      8217 JR	INPN1
002BE1 B7 
               8218 ;
               8219 ;INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
               8220 ;INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
               8221 ;
002BE2 FE      8222 INPUT:          CP	'#'
002BE3 23 
002BE4 28      8223 JR	Z,INPUTN
002BE5 B0 
002BE6 0E      8224 LD	C,0		;FLAG PROMPT
002BE7 00 
002BE8 FE      8225 CP	TLINE
002BE9 86 
002BEA 20      8226 JR	NZ,INPUT0
002BEB 04 
002BEC FD      8227 INC	IY		;SKIP "LINE"
002BED 23 
002BEE 0E      8228 LD	C,80H
002BEF 80 
002BF0 21      8229 INPUT0:         LD	HL,BUFFER
002BF1 00 
002BF2 53 
002BF3 36      8230 LD	(HL),CR		;INITIALISE EMPTY
002BF4 0D 
002BF5 CD      8231 INPUT1:         CALL	TERMQ
002BF6 36 
002BF7 35 
002BF8 28      8232 JR	Z,XEQGO6	;DONE
002BF9 99 
002BFA FD      8233 INC	IY
002BFB 23 
002BFC FE      8234 CP	','
002BFD 2C 
002BFE 28      8235 JR	Z,INPUT3	;SKIP COMMA
002BFF 51 
002C00 FE      8236 CP	';'
002C01 3B 
002C02 28      8237 JR	Z,INPUT3
002C03 4D 
002C04 E5      8238 PUSH	HL		;SAVE BUFFER POINTER
002C05 FE      8239 CP	'"'
002C06 22 
002C07 20      8240 JR	NZ,INPUT6
002C08 0A 
002C09 C5      8241 PUSH	BC
002C0A CD      8242 CALL	CONS
002C0B 7A 
002C0C 19 
002C0D C1      8243 POP	BC
002C0E CD      8244 CALL	PTEXT		;PRINT PROMPT
002C0F B1 
002C10 35 
002C11 18      8245 JR	INPUT9
002C12 05 
002C13 CD      8246 INPUT6:         CALL	FORMAT		;SPC, TAB, '
002C14 5C 
002C15 35 
002C16 20      8247 JR	NZ,INPUT2
002C17 05 
002C18 E1      8248 INPUT9:         POP	HL
002C19 CB      8249 SET	0,C		;FLAG NO PROMPT
002C1A C1 
002C1B 18      8250 JR	INPUT0
002C1C D3 
002C1D FD      8251 INPUT2:         DEC	IY
002C1E 2B 
002C1F C5      8252 PUSH	BC
002C20 CD      8253 CALL	VAR_
002C21 D6 
002C22 25 
002C23 C1      8254 POP	BC
002C24 E1      8255 POP	HL
002C25 F5      8256 PUSH	AF		;SAVE TYPE
002C26 7E      8257 LD	A,(HL)
002C27 23      8258 INC	HL
002C28 FE      8259 CP	CR		;BUFFER EMPTY?
002C29 0D 
002C2A CC      8260 CALL	Z,REFILL
002C2B 55 
002C2C 2C 
002C2D CB      8261 BIT	7,C
002C2E 79 
002C2F F5      8262 PUSH	AF
002C30 C4      8263 CALL	NZ,LINES
002C31 CF 
002C32 35 
002C33 F1      8264 POP	AF
002C34 CC      8265 CALL	Z,FETCHS
002C35 BE 
002C36 35 
002C37 F1      8266 POP	AF		;RESTORE TYPE
002C38 C5      8267 PUSH	BC
002C39 E5      8268 PUSH	HL
002C3A B7      8269 OR	A
002C3B FA      8270 JP	M,INPUT4	;STRING
002C3C 4C 
002C3D 2C 
002C3E F5      8271 PUSH	AF
002C3F DD      8272 PUSH	IX
002C40 E5 
002C41 CD      8273 CALL	VAL0
002C42 22 
002C43 1C 
002C44 DD      8274 POP	IX
002C45 E1 
002C46 F1      8275 POP	AF
002C47 CD      8276 CALL	STOREN
002C48 F0 
002C49 31 
002C4A 18      8277 JR	INPUT5
002C4B 03 
002C4C CD      8278 INPUT4:         CALL	STACCS
002C4D 3E 
002C4E 32 
002C4F E1      8279 INPUT5:         POP	HL
002C50 C1      8280 POP	BC
002C51 CB      8281 INPUT3:         RES	0,C
002C52 81 
002C53 18      8282 JR	INPUT1
002C54 A0 
               8283 ;
002C55 CB      8284 REFILL:         BIT	0,C
002C56 41 
002C57 20      8285 JR	NZ,REFIL0	;NO PROMPT
002C58 0A 
002C59 3E      8286 LD	A,'?'
002C5A 3F 
002C5B CD      8287 CALL	OUTCHR		;PROMPT
002C5C 02 
002C5D 41 
002C5E 3E      8288 LD	A,' '
002C5F 20 
002C60 CD      8289 CALL	OUTCHR
002C61 02 
002C62 41 
002C63 21      8290 REFIL0:         LD	HL,BUFFER
002C64 00 
002C65 53 
002C66 C5      8291 PUSH	BC
002C67 E5      8292 PUSH	HL
002C68 DD      8293 PUSH	IX
002C69 E5 
002C6A CD      8294 CALL	OSLINE
002C6B CB 
002C6C 11 
002C6D DD      8295 POP	IX
002C6E E1 
002C6F E1      8296 POP	HL
002C70 C1      8297 POP	BC
002C71 47      8298 LD	B,A		;POS AT ENTRY
002C72 AF      8299 XOR	A
002C73 32      8300 LD	(COUNT),A
002C74 FB 
002C75 54 
002C76 B8      8301 CP	B
002C77 C8      8302 RET	Z
002C78 7E      8303 REFIL1:         LD	A,(HL)
002C79 FE      8304 CP	CR
002C7A 0D 
002C7B C8      8305 RET	Z
002C7C 23      8306 INC	HL
002C7D 10      8307 DJNZ	REFIL1
002C7E F9 
002C7F C9      8308 RET
               8309 ;
               8310 ;READ var[,var...]
               8311 ;
002C80 FE      8312 READ:           CP	'#'
002C81 23 
002C82 CA      8313 JP	Z,INPUTN
002C83 96 
002C84 2B 
002C85 2A      8314 LD	HL,(DATPTR)
002C86 F0 
002C87 54 
002C88 7E      8315 READ0:          LD	A,(HL)
002C89 FE      8316 CP	':'
002C8A 3A 
002C8B CC      8317 CALL	Z,REFIL1
002C8C 78 
002C8D 2C 
002C8E 23      8318 INC	HL		;SKIP COMMA | "DATA"
002C8F FE      8319 CP	CR		;END OF DATA STMT?
002C90 0D 
002C91 CC      8320 CALL	Z,GETDAT
002C92 C0 
002C93 2C 
002C94 E5      8321 PUSH	HL
002C95 CD      8322 CALL	VAR_
002C96 D6 
002C97 25 
002C98 E1      8323 POP	HL
002C99 B7      8324 OR	A
002C9A FA      8325 JP	M,READ1		;STRING
002C9B B0 
002C9C 2C 
002C9D E5      8326 PUSH	HL
002C9E FD      8327 EX	(SP),IY
002C9F E3 
002CA0 F5      8328 PUSH	AF		;SAVE TYPE
002CA1 DD      8329 PUSH	IX
002CA2 E5 
002CA3 CD      8330 CALL	EXPRN
002CA4 2C 
002CA5 18 
002CA6 DD      8331 POP	IX
002CA7 E1 
002CA8 F1      8332 POP	AF
002CA9 CD      8333 CALL	STOREN
002CAA F0 
002CAB 31 
002CAC FD      8334 EX	(SP),IY
002CAD E3 
002CAE 18      8335 JR	READ2
002CAF 07 
002CB0 CD      8336 READ1:          CALL	FETCHS
002CB1 BE 
002CB2 35 
002CB3 E5      8337 PUSH	HL
002CB4 CD      8338 CALL	STACCS
002CB5 3E 
002CB6 32 
002CB7 E1      8339 READ2:          POP	HL
002CB8 22      8340 LD	(DATPTR),HL
002CB9 F0 
002CBA 54 
002CBB CD      8341 CALL	NLIST
002CBC 00 
002CBD 45 
002CBE 18      8342 JR	READ0
002CBF C8 
               8343 ;
002CC0 CD      8344 GETDAT:         CALL	DSRCH
002CC1 F9 
002CC2 35 
002CC3 23      8345 INC	HL
002CC4 D0      8346 RET	NC
002CC5 3E      8347 LD	A,42
002CC6 2A 
002CC7 18      8348 JR	ERROR4ex		;"Out of DATA"
002CC8 64 
               8349 ;
               8350 ;IF expr statement
               8351 ;IF expr THEN statement [ELSE statement]
               8352 ;IF expr THEN line [ELSE line]
               8353 ;IF expr THEN
               8354 ;
002CC9 CD      8355 IF_:            CALL	EXPRI
002CCA 33 
002CCB 18 
002CCC CD      8356 CALL	TEST
002CCD 59 
002CCE 1F 
002CCF 28      8357 JR	Z,IFNOT		;FALSE
002CD0 2A 
002CD1 FD      8358 LD	A,(IY)
002CD2 7E 
002CD3 00 
002CD4 FE      8359 CP	TTHEN
002CD5 8C 
002CD6 C2      8360 JP	NZ,XEQ
002CD7 99 
002CD8 24 
002CD9 FD      8361 IF0:            INC	IY		;SKIP "THEN"
002CDA 23 
002CDB FD      8362 LD	A,(IY)
002CDC 7E 
002CDD 00 
002CDE FE      8363 CP	';'
002CDF 3B 
002CE0 28      8364 JR	Z,IF0
002CE1 F7 
002CE2 CD      8365 IF1:            CALL	NXT
002CE3 0B 
002CE4 45 
002CE5 FE      8366 CP	TLINO
002CE6 8D 
002CE7 C2      8367 JP	NZ,XEQ		;STATEMENT FOLLOWS
002CE8 99 
002CE9 24 
002CEA C3      8368 JP	GOTO		;LINE NO. FOLLOWS
002CEB B4 
002CEC 28 
               8369 ;
002CED FD      8370 IFELSE:         LD	A,(IY)
002CEE 7E 
002CEF 00 
002CF0 FD      8371 INC	IY
002CF1 23 
002CF2 FE      8372 CP	';'
002CF3 3B 
002CF4 20      8373 JR	NZ,IFNEXT
002CF5 0A 
002CF6 18      8374 JR	IFTHEN
002CF7 1E 
               8375 ;
002CF8 CD      8376 IF2:            CALL	QUOTE		;SKIP STRING
002CF9 99 
002CFA 36 
002CFB FD      8377 IFNOT:          LD	A,(IY)
002CFC 7E 
002CFD 00 
002CFE FD      8378 INC	IY
002CFF 23 
002D00 FE      8379 IFNEXT:         CP	'"'
002D01 22 
002D02 28      8380 JR	Z,IF2		;QUOTED STRING
002D03 F4 
002D04 FE      8381 CP	TREM
002D05 F4 
002D06 CA      8382 JP	Z,REM		;REM
002D07 31 
002D08 25 
002D09 FE      8383 CP	CR
002D0A 0D 
002D0B CA      8384 JP	Z,XEQ0		;END OF LINE
002D0C 84 
002D0D 24 
002D0E FE      8385 CP	TELSE
002D0F 8B 
002D10 28      8386 JR	Z,IF1		;ELSE CLAUSE
002D11 D0 
002D12 FE      8387 CP	TTHEN
002D13 8C 
002D14 20      8388 JR	NZ,IFNOT	;TRY FOR END AGAIN
002D15 E5 
002D16 FD      8389 IFTHEN:         LD	A,(IY)
002D17 7E 
002D18 00 
002D19 FE      8390 CP	CR
002D1A 0D 
002D1B 20      8391 JR	NZ,IFELSE
002D1C D0 
002D1D 01      8392 LD	BC,TELSE
002D1E 8B 
002D1F 00 
002D20 11      8393 LD	DE,TENDIF*256+TTHEN
002D21 8C 
002D22 CD 
002D23 FD      8394 INC	IY
002D24 23 
002D25 CD      8395 CALL	NSCAN
002D26 11 
002D27 36 
002D28 CA      8396 JP	Z,XEQ1
002D29 A0 
002D2A 24 
002D2B 3E      8397 NENDIF:         LD	A,49
002D2C 31 
002D2D C3      8398 ERROR4ex:         JP	ERROR_		;"Missing ENDIF"
002D2E 44 
002D2F 3F 
               8399 ;
               8400 ; ELSE (multi-line)
               8401 ;
002D30 01      8402 MELSE:          LD	BC,-3
002D31 FD 
002D32 FF 
002D33 FD      8403 ADD	IY,BC
002D34 09 
002D35 01      8404 LD	BC,TENDIF
002D36 CD 
002D37 00 
002D38 11      8405 LD	DE,TENDIF*256+TTHEN
002D39 8C 
002D3A CD 
002D3B CD      8406 CALL	NSCAN
002D3C 11 
002D3D 36 
002D3E 20      8407 JR	NZ,NENDIF
002D3F EB 
002D40 C3      8408 XEQGO7:         JP	XEQ
002D41 99 
002D42 24 
               8409 ;
               8410 ; WHEN and OTHERWISE:
               8411 ;
002D43 01      8412 WHEN:           LD	BC,-3
002D44 FD 
002D45 FF 
002D46 FD      8413 ADD	IY,BC
002D47 09 
002D48 01      8414 LD	BC,TENDCASE
002D49 CB 
002D4A 00 
002D4B 11      8415 LD	DE,TENDCASE*256+TOF
002D4C CA 
002D4D CB 
002D4E CD      8416 CALL	NSCAN
002D4F 11 
002D50 36 
002D51 28      8417 JR	Z,XEQGO7
002D52 ED 
002D53 3E      8418 LD	A,47
002D54 2F 
002D55 18      8419 JR	ERROR4ex		;"Missing ENDCASE"
002D56 D6 
               8420 ;
               8421 ; CASE
               8422 ;
002D57 CD      8423 CASE:           CALL	EXPR		;String or numeric
002D58 02 
002D59 17 
002D5A 08      8424 EX	AF,AF'
002D5B 06      8425 LD	B,0		;Flag numeric
002D5C 00 
002D5D F2      8426 JP	P,CASE6		;numeric
002D5E 66 
002D5F 2D 
002D60 CD      8427 CALL	PUSHS		;put string on stack
002D61 19 
002D62 20 
002D63 C1      8428 POP	BC		;C = length
002D64 06      8429 LD	B,1		;Flag string
002D65 01 
002D66 FD      8430 CASE6:          LD	A,(IY)
002D67 7E 
002D68 00 
002D69 FD      8431 INC	IY
002D6A 23 
002D6B FE      8432 CP	TOF
002D6C CA 
002D6D 3E      8433 LD	A,37
002D6E 25 
002D6F 20      8434 JR	NZ,ERROR4ex	;"Missing OF"
002D70 BC 
002D71 FD      8435 LD	A,(IY)
002D72 7E 
002D73 00 
002D74 FD      8436 INC	IY		;Address line-length byte
002D75 23 
002D76 FE      8437 CP	CR
002D77 0D 
002D78 3E      8438 LD	A,48
002D79 30 
002D7A 20      8439 JR	NZ,ERROR4ex	;"OF not last"
002D7B B1 
002D7C AF      8440 CASE1:          XOR	A		;Level
002D7D D9      8441 CASE0:          EXX
002D7E E5      8442 PUSH	HL		;Push to stack
002D7F D9      8443 EXX
002D80 E5      8444 PUSH	HL
002D81 C5      8445 PUSH	BC
002D82 6F      8446 LD	L,A		;Level
002D83 01      8447 LD	BC,TOTHERWISE*256+TWHEN
002D84 C9 
002D85 CC 
002D86 11      8448 LD	DE,TENDCASE*256+TOF
002D87 CA 
002D88 CB 
002D89 CD      8449 CALL	NSCAN1
002D8A 13 
002D8B 36 
002D8C C1      8450 POP	BC		;Restore from stack
002D8D E1      8451 POP	HL
002D8E D9      8452 EXX
002D8F E1      8453 POP	HL
002D90 D9      8454 EXX
002D91 3E      8455 LD	A,47
002D92 2F 
002D93 C2      8456 JP	NZ,ERROR_	;Missing ENDCASE
002D94 44 
002D95 3F 
002D96 FD      8457 LD	A,(IY-1)
002D97 7E 
002D98 FF 
002D99 FE      8458 CP	TENDCASE
002D9A CB 
002D9B 28      8459 JR	Z,CASE9
002D9C 56 
002D9D FE      8460 CP	TOTHERWISE
002D9E CC 
002D9F 28      8461 JR	Z,CASE9
002DA0 52 
002DA1 CB      8462 CASE4:          BIT	0,B		;Numeric or string?
002DA2 40 
002DA3 20      8463 JR	NZ,CASE3
002DA4 69 
002DA5 C5      8464 PUSH	BC		;Type/exponent/length
002DA6 E5      8465 PUSH	HL		;MS 32 bits
002DA7 D9      8466 EXX
002DA8 E5      8467 PUSH	HL		;LS 32 bits
002DA9 D9      8468 EXX
002DAA CD      8469 CALL	EXPRN
002DAB 2C 
002DAC 18 
002DAD DD      8470 LD	IX,0
002DAE 21 
002DAF 00 
002DB0 00 
002DB1 DD      8471 ADD	IX,SP		;Address stack
002DB2 39 
002DB3 D9      8472 EXX
002DB4 DD      8473 LD	E,(IX+0)	;Get LS 32-bits
002DB5 5E 
002DB6 00 
002DB7 DD      8474 LD	D,(IX+1)
002DB8 56 
002DB9 01 
002DBA D9      8475 EXX
002DBB DD      8476 LD	E,(IX+2)
002DBC 5E 
002DBD 02 
002DBE DD      8477 LD	D,(IX+3)	;Get MS 32-bits
002DBF 56 
002DC0 03 
002DC1 DD      8478 LD	B,(IX+4)	;Get exponent
002DC2 46 
002DC3 04 
002DC4 3E      8479 LD	A,9
002DC5 09 
002DC6 CD      8480 CALL	FPP		;In case integer vs float
002DC7 15 
002DC8 45 
002DC9 7D      8481 LD	A,L
002DCA B7      8482 OR	A		;NZ if equal
002DCB D9      8483 EXX
002DCC E1      8484 POP	HL
002DCD D9      8485 EXX
002DCE E1      8486 POP	HL
002DCF C1      8487 POP	BC
002DD0 20      8488 JR	NZ,CASE5	;Match found
002DD1 2C 
002DD2 FD      8489 CASE2:          LD	A,(IY)
002DD3 7E 
002DD4 00 
002DD5 FD      8490 INC	IY
002DD6 23 
002DD7 FE      8491 CP	','
002DD8 2C 
002DD9 28      8492 JR	Z,CASE4		;Not found, try another
002DDA C6 
002DDB D9      8493 EXX
002DDC FD      8494 PUSH	IY
002DDD E5 
002DDE E3      8495 EX	(SP),HL
002DDF 3E      8496 LD	A,CR
002DE0 0D 
002DE1 47      8497 LD	B,A
002DE2 ED      8498 CPIR			;Find CR
002DE3 B1 
002DE4 E3      8499 EX	(SP),HL
002DE5 FD      8500 POP	IY
002DE6 E1 
002DE7 D9      8501 EXX
002DE8 FD      8502 LD	A,(IY-2)	;Last token in previous line
002DE9 7E 
002DEA FE 
002DEB FE      8503 CP	TOF		;CASE statement in WHEN line
002DEC CA 
002DED 20      8504 JR	NZ,CASE1
002DEE 8D 
002DEF 3E      8505 LD	A,1
002DF0 01 
002DF1 18      8506 JR	CASE0
002DF2 8A 
               8507 ;
               8508 ;Finished, level stack if string:
               8509 ;
002DF3 CB      8510 CASE9:          BIT	0,B
002DF4 40 
002DF5 28      8511 JR	Z,XEQGO5
002DF6 49 
002DF7 26      8512 LD	H,0
002DF8 00 
002DF9 69      8513 LD	L,C
002DFA 39      8514 ADD	HL,SP
002DFB F9      8515 LD	SP,HL
002DFC 18      8516 JR	XEQGO5
002DFD 42 
               8517 ;
               8518 ;Matched, so skip any more expressions:
               8519 ;
002DFE CD      8520 CASE5:          CALL	NXT
002DFF 0B 
002E00 45 
002E01 FE      8521 CP	','
002E02 2C 
002E03 20      8522 JR	NZ,CASE9	;End of list
002E04 EE 
002E05 FD      8523 INC	IY
002E06 23 
002E07 C5      8524 PUSH	BC		;Save type and string length
002E08 CD      8525 CALL	EXPR		;Evaluate but discard
002E09 02 
002E0A 17 
002E0B C1      8526 POP	BC
002E0C 18      8527 JR	CASE5
002E0D F0 
               8528 ;
               8529 ;String compare:
               8530 ;
002E0E C5      8531 CASE3:          PUSH	BC
002E0F CD      8532 CALL	EXPRS
002E10 3C 
002E11 18 
002E12 C1      8533 POP	BC
002E13 21      8534 LD	HL,0
002E14 00 
002E15 00 
002E16 39      8535 ADD	HL,SP
002E17 43      8536 LD	B,E
002E18 11      8537 LD	DE,ACCS
002E19 00 
002E1A 52 
002E1B C5      8538 PUSH	BC
002E1C CD      8539 CALL	SCP		;String compare
002E1D F5 
002E1E 1F 
002E1F C1      8540 POP	BC
002E20 06      8541 LD	B,1
002E21 01 
002E22 20      8542 JR	NZ,CASE2
002E23 AE 
002E24 18      8543 JR	CASE5
002E25 D8 
               8544 ;
               8545 ; WHILE
               8546 ;
002E26 FD      8547 WHILE:          PUSH	IY		;Save current position
002E27 E5 
002E28 CD      8548 CALL	CHECK
002E29 86 
002E2A 32 
002E2B CD      8549 CALL	WHICHK		;Push marker
002E2C 2E 
002E2D 2E 
002E2E CD      8550 WHICHK:         CALL	EXPRI
002E2F 33 
002E30 18 
002E31 CD      8551 CALL	TEST
002E32 59 
002E33 1F 
002E34 20      8552 JR	NZ,XEQGO5
002E35 0A 
002E36 C1      8553 POP	BC		;Pop marker
002E37 C1      8554 POP	BC		;Level stack
002E38 01      8555 LD	BC,TWHILE+TENDWHILE*256
002E39 00 
002E3A 95 
002E3B 16      8556 LD	D,1
002E3C 01 
002E3D CD      8557 CALL	WSRCH
002E3E 50 
002E3F 36 
002E40 C3      8558 XEQGO5:         JP	XEQ
002E41 99 
002E42 24 
               8559 ;
               8560 ; ENDWHILE
               8561 ;
002E43 C1      8562 ENDWHI:         POP	BC		;Marker
002E44 D1      8563 POP	DE		;Saved text pointer
002E45 D5      8564 PUSH	DE
002E46 C5      8565 PUSH	BC
002E47 B7      8566 OR	A
002E48 21      8567 LD	HL,WHICHK
002E49 2E 
002E4A 2E 
002E4B ED      8568 SBC	HL,BC
002E4C 42 
002E4D 28      8569 JR	Z,ENDWH1
002E4E 0B 
002E4F 3E      8570 LD	A,3
002E50 03 
002E51 CD      8571 CALL	RESLOC
002E52 31 
002E53 34 
002E54 20      8572 JR	NZ,ENDWHI
002E55 ED 
002E56 3E      8573 LD	A,46
002E57 2E 
002E58 18      8574 JR	ERROR5		;"Not in a WHILE loop"
002E59 4F 
               8575 ;
002E5A FD      8576 ENDWH1:         PUSH	IY
002E5B E5 
002E5C FD      8577 LD	IY,0
002E5D 21 
002E5E 00 
002E5F 00 
002E60 FD      8578 ADD	IY,DE
002E61 19 
002E62 CD      8579 CALL	EXPRI
002E63 33 
002E64 18 
002E65 CD      8580 CALL	TEST
002E66 59 
002E67 1F 
002E68 D1      8581 POP	DE		;Text pointer
002E69 20      8582 JR	NZ,XEQGO5
002E6A D5 
002E6B C1      8583 POP	BC		;Junk marker
002E6C C1      8584 POP	BC		;Junk pointer
002E6D FD      8585 LD	IY,0
002E6E 21 
002E6F 00 
002E70 00 
002E71 FD      8586 ADD	IY,DE
002E72 19 
002E73 18      8587 JR	XEQGO5
002E74 CB 
               8588 ;
               8589 ;CLS
               8590 ;
002E75 CD      8591 CLS:            CALL	CLRSCN
002E76 F8 
002E77 01 
002E78 AF      8592 XOR	A
002E79 32      8593 LD	(COUNT),A
002E7A FB 
002E7B 54 
002E7C 18      8594 JR	XEQGO5
002E7D C2 
               8595 ;
               8596 ;STOP
               8597 ;
002E7E CD      8598 STOP:           CALL	TELL
002E7F FA 
002E80 44 
002E81 0D      8599 DB	CR
002E82 0A      8600 DB	LF
002E83 FA      8601 DB	TSTOP
002E84 00      8602 DB	0
002E85 CD      8603 CALL	SETLIN		;FIND CURRENT LINE
002E86 5B 
002E87 41 
002E88 CD      8604 CALL	SAYLN
002E89 82 
002E8A 41 
002E8B CD      8605 CALL	CRLF
002E8C FB 
002E8D 40 
002E8E C3      8606 JP	CLOOP
002E8F B0 
002E90 37 
               8607 ;
               8608 ;REPORT
               8609 ;
002E91 CD      8610 REPOR:          CALL	REPORT
002E92 E5 
002E93 44 
002E94 18      8611 JR	XEQGO5
002E95 AA 
               8612 ;
               8613 ;CLEAR
               8614 ;
002E96 CD      8615 CLR:            CALL	CLEAR
002E97 43 
002E98 40 
002E99 2A      8616 LD	HL,(PAGE_)
002E9A DC 
002E9B 54 
002E9C 18      8617 JR	RESTR1
002E9D 3B 
               8618 ;
               8619 ;RESTORE ERROR
               8620 ;
002E9E FD      8621 RESERR:         INC	IY
002E9F 23 
002EA0 3E      8622 LD	A,2
002EA1 02 
002EA2 CD      8623 CALL	RESLOC
002EA3 31 
002EA4 34 
002EA5 20      8624 JR	NZ,XEQGO5
002EA6 99 
002EA7 3E      8625 LD	A,53		;ON ERROR not LOCAL
002EA8 35 
002EA9 C3      8626 ERROR5:         JP	ERROR_
002EAA 44 
002EAB 3F 
               8627 ;
               8628 ;RESTORE DATA
               8629 ;
002EAC FD      8630 RESDAT:         INC	IY
002EAD 23 
002EAE 3E      8631 LD	A,1
002EAF 01 
002EB0 CD      8632 CALL	RESLOC
002EB1 31 
002EB2 34 
002EB3 20      8633 JR	NZ,XEQGO5
002EB4 8B 
002EB5 3E      8634 LD	A,54		;'DATA not LOCAL'
002EB6 36 
002EB7 21      8635 DB	21H
002EB8 3E      8636 NOLINE:         LD	A,41		;'No such line'
002EB9 29 
002EBA 18      8637 JR	ERROR5
002EBB ED 
               8638 ;
               8639 ;RESTORE [line]
               8640 ;
002EBC FE      8641 RESTOR:         CP	TERROR
002EBD 85 
002EBE 28      8642 JR	Z,RESERR
002EBF DE 
002EC0 FE      8643 CP	TDATA
002EC1 DC 
002EC2 28      8644 JR	Z,RESDAT
002EC3 E8 
002EC4 FE      8645 CP	'+'
002EC5 2B 
002EC6 28      8646 JR	Z,RESREL
002EC7 1A 
002EC8 2A      8647 LD	HL,(PAGE_)
002EC9 DC 
002ECA 54 
002ECB CD      8648 CALL	TERMQ
002ECC 36 
002ECD 35 
002ECE 28      8649 JR	Z,RESTR1
002ECF 09 
002ED0 CD      8650 CALL	ITEMI
002ED1 60 
002ED2 18 
002ED3 D9      8651 EXX
002ED4 CD      8652 CALL	FINDL		;SEARCH FOR LINE
002ED5 43 
002ED6 41 
002ED7 20      8653 JR	NZ,NOLINE
002ED8 DF 
002ED9 CD      8654 RESTR1:         CALL	DSRCH
002EDA F9 
002EDB 35 
002EDC 22      8655 LD	(DATPTR),HL
002EDD F0 
002EDE 54 
002EDF C3      8656 JP	XEQ
002EE0 99 
002EE1 24 
               8657 ;
002EE2 CD      8658 RESREL:         CALL	EXPRI
002EE3 33 
002EE4 18 
002EE5 D9      8659 EXX
002EE6 EB      8660 EX	DE,HL
002EE7 FD      8661 PUSH	IY
002EE8 E5 
002EE9 E1      8662 POP	HL
002EEA 3E      8663 LD	A,CR
002EEB 0D 
002EEC 47      8664 LD	B,A
002EED ED      8665 CPIR			;FIND LINE END
002EEE B1 
002EEF 1D      8666 DEC	E
002EF0 28      8667 JR	Z,RESTR1
002EF1 E7 
002EF2 FA      8668 JP	M,RESTR1
002EF3 D9 
002EF4 2E 
002EF5 AF      8669 XOR	A
002EF6 47      8670 LD	B,A
002EF7 4E      8671 RESTR2:         LD	C,(HL)
002EF8 B9      8672 CP	C
002EF9 28      8673 JR	Z,NOLINE
002EFA BD 
002EFB 09      8674 ADD	HL,BC
002EFC 1D      8675 DEC	E
002EFD 20      8676 JR	NZ,RESTR2
002EFE F8 
002EFF 18      8677 JR	RESTR1
002F00 D8 
               8678 ;
               8679 ;PTR#channel=expr
               8680 ;PAGE=expr
               8681 ;TIME=expr
               8682 ;LOMEM=expr
               8683 ;HIMEM=expr
               8684 ;
002F01 CD      8685 PTR:            CALL	CHANEL
002F02 D1 
002F03 36 
002F04 CD      8686 CALL	EQUALS
002F05 4F 
002F06 35 
002F07 7B      8687 LD	A,E
002F08 F5      8688 PUSH	AF
002F09 CD      8689 CALL	EXPRI
002F0A 33 
002F0B 18 
002F0C E5      8690 PUSH	HL
002F0D D9      8691 EXX
002F0E D1      8692 POP	DE
002F0F F1      8693 POP	AF
002F10 CD      8694 CALL	PUTPTR
002F11 79 
002F12 12 
002F13 18      8695 JR	XEQGO1ex
002F14 61 
               8696 ;
002F15 CD      8697 PAGEV:          CALL	EQUALS
002F16 4F 
002F17 35 
002F18 CD      8698 CALL	EXPRI
002F19 33 
002F1A 18 
002F1B D9      8699 EXX
002F1C 2E      8700 LD	L,0
002F1D 00 
002F1E 22      8701 LD	(PAGE_),HL
002F1F DC 
002F20 54 
002F21 18      8702 JR	XEQGO1ex
002F22 53 
               8703 ;
002F23 FE      8704 TIMEV:          CP	'$'
002F24 24 
002F25 28      8705 JR	Z,TIMEVS
002F26 0E 
002F27 CD      8706 CALL	EQUALS
002F28 4F 
002F29 35 
002F2A CD      8707 CALL	EXPRI
002F2B 33 
002F2C 18 
002F2D E5      8708 PUSH	HL
002F2E D9      8709 EXX
002F2F D1      8710 POP	DE
002F30 CD      8711 CALL	PUTIME
002F31 C3 
002F32 01 
002F33 18      8712 JR	XEQGO1ex
002F34 41 
               8713 ;
002F35 FD      8714 TIMEVS:         INC	IY		;SKIP '$'
002F36 23 
002F37 CD      8715 CALL	EQUALS
002F38 4F 
002F39 35 
002F3A CD      8716 CALL	EXPRS
002F3B 3C 
002F3C 18 
002F3D CD      8717 CALL	PUTIMS
002F3E E0 
002F3F 01 
002F40 18      8718 JR	XEQGO1ex
002F41 34 
               8719 ;
002F42 CD      8720 LOMEMV:         CALL	EQUALS
002F43 4F 
002F44 35 
002F45 CD      8721 CALL	EXPRI
002F46 33 
002F47 18 
002F48 CD      8722 CALL	CLEAR
002F49 43 
002F4A 40 
002F4B D9      8723 EXX
002F4C 22      8724 LD	(LOMEM),HL
002F4D DE 
002F4E 54 
002F4F 22      8725 LD	(FREE),HL
002F50 E0 
002F51 54 
002F52 18      8726 JR	XEQGO1ex
002F53 22 
               8727 ;
002F54 CD      8728 HIMEMV:         CALL	EQUALS
002F55 4F 
002F56 35 
002F57 CD      8729 CALL	EXPRI
002F58 33 
002F59 18 
002F5A D9      8730 EXX
002F5B ED      8731 LD	DE,(FREE)
002F5C 5B 
002F5D E0 
002F5E 54 
002F5F 14      8732 INC	D
002F60 AF      8733 XOR	A
002F61 ED      8734 SBC	HL,DE
002F62 52 
002F63 19      8735 ADD	HL,DE
002F64 DA      8736 JP	C,ERROR_		;"No room"
002F65 44 
002F66 3F 
002F67 ED      8737 LD	DE,(HIMEM)
002F68 5B 
002F69 E2 
002F6A 54 
002F6B 22      8738 LD	(HIMEM),HL
002F6C E2 
002F6D 54 
002F6E EB      8739 EX	DE,HL
002F6F ED      8740 SBC	HL,SP
002F70 72 
002F71 C2      8741 JP	NZ,XEQ
002F72 99 
002F73 24 
002F74 EB      8742 EX	DE,HL
002F75 F9      8743 LD	SP,HL		;LOAD STACK POINTER
002F76 C3      8744 XEQGO1ex:         JP	XEQ
002F77 99 
002F78 24 
               8745 ;
               8746 ;WIDTH expr
               8747 ;
002F79 CD      8748 WIDTHV:         CALL	EXPRI
002F7A 33 
002F7B 18 
002F7C D9      8749 EXX
002F7D 7D      8750 LD	A,L
002F7E 32      8751 LD	(WIDTH),A
002F7F FC 
002F80 54 
002F81 18      8752 JR	XEQGO1ex
002F82 F3 
               8753 ;
               8754 ;TRACE ON
               8755 ;TRACE OFF
               8756 ;TRACE line
               8757 ;
002F83 FD      8758 TRACE:          INC	IY
002F84 23 
002F85 21      8759 LD	HL,0
002F86 00 
002F87 00 
002F88 FE      8760 CP	TON
002F89 EE 
002F8A 28      8761 JR	Z,TRACE0
002F8B 0A 
002F8C FE      8762 CP	TOFF
002F8D 87 
002F8E 28      8763 JR	Z,TRACE1
002F8F 07 
002F90 FD      8764 DEC	IY
002F91 2B 
002F92 CD      8765 CALL	EXPRI
002F93 33 
002F94 18 
002F95 D9      8766 EXX
002F96 2B      8767 TRACE0:         DEC	HL
002F97 22      8768 TRACE1:         LD	(TRACEN),HL
002F98 E6 
002F99 54 
002F9A 18      8769 JR	XEQGO1ex
002F9B DA 
               8770 ;
               8771 ;VDU expr,expr;....[|]
               8772 ;
002F9C CD      8773 VDU:            CALL	EXPRI
002F9D 33 
002F9E 18 
002F9F D9      8774 EXX
002FA0 7D      8775 LD	A,L
002FA1 06      8776 LD	B,1
002FA2 01 
002FA3 CD      8777 VDU1:           CALL	OSWRCH
002FA4 95 
002FA5 11 
002FA6 10      8778 DJNZ	VDU1
002FA7 FB 
002FA8 FD      8779 LD	A,(IY)
002FA9 7E 
002FAA 00 
002FAB FE      8780 CP	'|'
002FAC 7C 
002FAD 28      8781 JR	Z,VDU4
002FAE 15 
002FAF FE      8782 CP	','
002FB0 2C 
002FB1 28      8783 JR	Z,VDU2
002FB2 08 
002FB3 FE      8784 CP	';'
002FB4 3B 
002FB5 20      8785 JR	NZ,VDU3
002FB6 06 
002FB7 7C      8786 LD	A,H
002FB8 CD      8787 CALL	OSWRCH
002FB9 95 
002FBA 11 
002FBB FD      8788 VDU2:           INC	IY
002FBC 23 
002FBD CD      8789 VDU3:           CALL	TERMQ
002FBE 36 
002FBF 35 
002FC0 20      8790 JR	NZ,VDU
002FC1 DA 
002FC2 18      8791 JR	XEQGO1ex
002FC3 B2 
               8792 ;
002FC4 FD      8793 VDU4:           INC	IY
002FC5 23 
002FC6 AF      8794 XOR	A
002FC7 06      8795 LD	B,9
002FC8 09 
002FC9 18      8796 JR	VDU1
002FCA D8 
               8797 ;
               8798 ;CLOSE channel number
               8799 ;
002FCB CD      8800 CLOSE:          CALL	CHANEL
002FCC D1 
002FCD 36 
002FCE CD      8801 CALL	OSSHUT
002FCF 37 
002FD0 12 
002FD1 18      8802 JR	XEQGO1ex
002FD2 A3 
               8803 ;
               8804 ;BPUT #channel,byte
               8805 ;BPUT #channel,string[;]
               8806 ;
002FD3 CD      8807 BPUT:           CALL	CHANEL		;CHANNEL NUMBER
002FD4 D1 
002FD5 36 
002FD6 D5      8808 PUSH	DE
002FD7 CD      8809 CALL	COMMA
002FD8 A2 
002FD9 20 
002FDA CD      8810 CALL	EXPR
002FDB 02 
002FDC 17 
002FDD 08      8811 EX	AF,AF'
002FDE FA      8812 JP	M,BPUTS
002FDF EC 
002FE0 2F 
002FE1 CD      8813 CALL	SFIX
002FE2 17 
002FE3 1C 
002FE4 D9      8814 EXX
002FE5 7D      8815 LD	A,L
002FE6 D1      8816 POP	DE
002FE7 CD      8817 CALL	OSBPUT
002FE8 47 
002FE9 12 
002FEA 18      8818 BPUTX:          JR	XEQGO1ex
002FEB 8A 
               8819 ;
002FEC 7B      8820 BPUTS:          LD	A,E
002FED D1      8821 POP	DE
002FEE 57      8822 LD	D,A
002FEF 21      8823 LD	HL,ACCS
002FF0 00 
002FF1 52 
002FF2 7E      8824 BPUTS1:         LD	A,(HL)
002FF3 23      8825 INC	HL
002FF4 CD      8826 CALL	OSBPUT
002FF5 47 
002FF6 12 
002FF7 15      8827 DEC	D
002FF8 20      8828 JR	NZ,BPUTS1
002FF9 F8 
002FFA CD      8829 CALL	NXT
002FFB 0B 
002FFC 45 
002FFD FE      8830 CP	';'
002FFE 3B 
002FFF FD      8831 INC	IY
003000 23 
003001 28      8832 JR	Z,BPUTX
003002 E7 
003003 3E      8833 LD	A,LF
003004 0A 
003005 CD      8834 CALL	OSBPUT
003006 47 
003007 12 
003008 FD      8835 DEC	IY
003009 2B 
00300A 18      8836 JR	BPUTX
00300B DE 
               8837 ;
               8838 ;CALL address[,var[,var...]]
               8839 ;
00300C CD      8840 CALL:           CALL	EXPRI		;ADDRESS
00300D 33 
00300E 18 
00300F D9      8841 EXX
003010 E5      8842 PUSH	HL		;SAVE IT
003011 06      8843 LD	B,0		;PARAMETER COUNTER
003012 00 
003013 11      8844 LD	DE,BUFFER	;VECTOR
003014 00 
003015 53 
003016 CD      8845 CALL1:          CALL	NXT
003017 0B 
003018 45 
003019 FE      8846 CP	','
00301A 2C 
00301B 20      8847 JR	NZ,CALL2
00301C 17 
00301D FD      8848 INC	IY
00301E 23 
00301F 04      8849 INC	B
003020 CD      8850 CALL	NXT
003021 0B 
003022 45 
003023 C5      8851 PUSH	BC
003024 D5      8852 PUSH	DE
003025 CD      8853 CALL	VAR_
003026 D6 
003027 25 
003028 D1      8854 POP	DE
003029 C1      8855 POP	BC
00302A 13      8856 INC	DE
00302B 12      8857 LD	(DE),A		;PARAMETER TYPE
00302C 13      8858 INC	DE
00302D EB      8859 EX	DE,HL
00302E 73      8860 LD	(HL),E		;PARAMETER ADDRESS
00302F 23      8861 INC	HL
003030 72      8862 LD	(HL),D
003031 EB      8863 EX	DE,HL
003032 18      8864 JR	CALL1
003033 E2 
003034 78      8865 CALL2:          LD	A,B
003035 32      8866 LD	(BUFFER),A	;PARAMETER COUNT
003036 00 
003037 53 
003038 E1      8867 POP	HL		;RESTORE ADDRESS
003039 CD      8868 CALL	USR1
00303A 43 
00303B 30 
00303C C3      8869 JP	XEQ
00303D 99 
00303E 24 
               8870 ;
               8871 ;USR(address)
               8872 ;
00303F CD      8873 USR:            CALL	ITEMI
003040 60 
003041 18 
003042 D9      8874 EXX
003043 E5      8875 USR1:           PUSH	HL		;ADDRESS ON STACK
003044 FD      8876 EX	(SP),IY
003045 E3 
003046 24      8877 INC	H		;PAGE &FF?
003047 21      8878 LD	HL,USR2		;RETURN ADDRESS
003048 72 
003049 30 
00304A E5      8879 PUSH	HL
00304B DD      8880 LD	IX,STAVAR
00304C 21 
00304D 00 
00304E 54 
00304F CC      8881 CALL	Z,OSCALL	;INTERCEPT PAGE &FF
003050 14 
003051 05 
003052 DD      8882 LD	C,(IX+24)
003053 4E 
003054 18 
003055 C5      8883 PUSH	BC
003056 F1      8884 POP	AF		;LOAD FLAGS
003057 DD      8885 LD	A,(IX+4)	;LOAD Z80 REGISTERS
003058 7E 
003059 04 
00305A DD      8886 LD	B,(IX+8)
00305B 46 
00305C 08 
00305D DD      8887 LD	C,(IX+12)
00305E 4E 
00305F 0C 
003060 DD      8888 LD	D,(IX+16)
003061 56 
003062 10 
003063 DD      8889 LD	E,(IX+20)
003064 5E 
003065 14 
003066 DD      8890 LD	H,(IX+32)
003067 66 
003068 20 
003069 DD      8891 LD	L,(IX+48)
00306A 6E 
00306B 30 
00306C DD      8892 LD	IX,BUFFER
00306D 21 
00306E 00 
00306F 53 
003070 FD      8893 JP	(IY)		;OFF TO USER ROUTINE
003071 E9 
003072 FD      8894 USR2:           POP	IY
003073 E1 
003074 AF      8895 XOR	A
003075 4F      8896 LD	C,A
003076 C9      8897 RET
               8898 ;
               8899 ; LEFT$(A$[,N]) = string
               8900 ; MID$(A$,N[,M]) = string
               8901 ; RIGHT$(A$[,N]) = string
               8902 ;
003077 CD      8903 LEFTSL:         CALL    GETSTR
003078 BE 
003079 25 
00307A 21      8904 LD	HL,0FF00H	;Default all but last
00307B 00 
00307C FF 
00307D 20      8905 JR	NZ,MIDSL1
00307E 48 
00307F 18      8906 JR	MIDSL0
003080 26 
               8907 ;
003081 CD      8908 RITESL:         CALL	GETSTR
003082 BE 
003083 25 
003084 21      8909 LD	HL,0FFFFH	;Default last char only
003085 FF 
003086 FF 
003087 20      8910 JR	NZ,MIDSL1
003088 3E 
003089 18      8911 JR	MIDSL0
00308A 1C 
               8912 ;
00308B CD      8913 MIDSL:          CALL	GETSTR
00308C BE 
00308D 25 
00308E 3E      8914 LD	A,5
00308F 05 
003090 C2      8915 JP	NZ,ERROR_	;'Missing comma'
003091 44 
003092 3F 
003093 FD      8916 INC	IY
003094 23 
003095 DD      8917 PUSH	IX
003096 E5 
003097 CD      8918 CALL	EXPRI
003098 33 
003099 18 
00309A DD      8919 POP	IX
00309B E1 
00309C D9      8920 EXX
00309D CD      8921 CALL	NXT
00309E 0B 
00309F 45 
0030A0 2D      8922 DEC	L
0030A1 26      8923 LD	H,254		;Default rest of string
0030A2 FE 
0030A3 FE      8924 CP	','
0030A4 2C 
0030A5 20      8925 JR	NZ,MIDSL1
0030A6 20 
0030A7 FD      8926 MIDSL0:         INC	IY
0030A8 23 
0030A9 E5      8927 PUSH	HL
0030AA DD      8928 PUSH	IX
0030AB E5 
0030AC CD      8929 CALL	EXPRI
0030AD 33 
0030AE 18 
0030AF DD      8930 POP	IX
0030B0 E1 
0030B1 D9      8931 EXX
0030B2 7D      8932 LD	A,L
0030B3 E1      8933 POP	HL
0030B4 B7      8934 OR	A
0030B5 28      8935 JR	Z,MIDSL2	;Zero length
0030B6 0D 
0030B7 3D      8936 DEC	A
0030B8 85      8937 ADD	A,L
0030B9 67      8938 LD	H,A
0030BA 30      8939 JR	NC,MIDSL1
0030BB 0B 
0030BC 7D      8940 LD	A,L
0030BD 3C      8941 INC	A
0030BE 28      8942 JR	Z,MIDSL1
0030BF 07 
0030C0 26      8943 LD	H,254
0030C1 FE 
0030C2 18      8944 JR	MIDSL1
0030C3 03 
               8945 ;
0030C4 21      8946 MIDSL2:         LD	HL,1
0030C5 01 
0030C6 00 
0030C7 CD      8947 MIDSL1:         CALL	BRAKET
0030C8 AE 
0030C9 20 
0030CA CD      8948 CALL	EQUALS
0030CB 4F 
0030CC 35 
0030CD E5      8949 PUSH	HL
0030CE DD      8950 PUSH	IX
0030CF E5 
0030D0 CD      8951 CALL	EXPRS
0030D1 3C 
0030D2 18 
0030D3 DD      8952 POP	IX
0030D4 E1 
0030D5 E1      8953 POP	HL
0030D6 4B      8954 LD	C,E
0030D7 DD      8955 LD	B,(IX+0)
0030D8 46 
0030D9 00 
0030DA DD      8956 LD	E,(IX+2)
0030DB 5E 
0030DC 02 
0030DD DD      8957 LD	D,(IX+3)
0030DE 56 
0030DF 03 
               8958 ;
               8959 ; Source string at ACCS, length C
               8960 ; Destination string at DE, length B
               8961 ; L = first character to modify 0-254
               8962 ; H =  last character to modify 0-254
               8963 ; IF L=255 THEN modify rightmost H + 2 chars
               8964 ; ELSE IF H=255 modify all but last character
               8965 ; ELSE IF L > H do nothing
               8966 ; IX = destination VARPTR
               8967 ;
0030E0 7D      8968 LD	A,L
0030E1 3C      8969 INC	A
0030E2 20      8970 JR	NZ,SUBSL1
0030E3 0F 
0030E4 24      8971 INC	H
0030E5 24      8972 INC	H
0030E6 79      8973 LD	A,C
0030E7 BC      8974 CP	H
0030E8 30      8975 JR	NC,SUBSL0
0030E9 01 
0030EA 67      8976 LD	H,A
0030EB 78      8977 SUBSL0:         LD	A,B
0030EC 94      8978 SUB	H
0030ED 30      8979 JR	NC,SUBSL6
0030EE 01 
0030EF AF      8980 XOR	A
0030F0 6F      8981 SUBSL6:         LD	L,A
0030F1 18      8982 JR	SUBSL5
0030F2 12 
               8983 ;
0030F3 7C      8984 SUBSL1:         LD	A,H
0030F4 3C      8985 INC	A
0030F5 20      8986 JR	NZ,SUBSL2
0030F6 06 
0030F7 78      8987 LD	A,B
0030F8 D6      8988 SUB	2
0030F9 02 
0030FA 38      8989 JR	C,SUBSL9
0030FB 24 
0030FC 67      8990 LD	H,A
0030FD 7D      8991 SUBSL2:         LD	A,L
0030FE B8      8992 CP	B
0030FF 30      8993 JR	NC,SUBSL9
003100 1F 
003101 7C      8994 LD	A,H
003102 B8      8995 CP	B
003103 38      8996 JR	C,SUBSL3
003104 03 
003105 78      8997 SUBSL5:         LD	A,B
003106 3D      8998 DEC	A
003107 67      8999 LD	H,A
003108 7C      9000 SUBSL3:         LD	A,H
003109 95      9001 SUB	L
00310A 38      9002 JR	C,SUBSL9
00310B 14 
00310C 3C      9003 INC	A
00310D B9      9004 CP	C
00310E 38      9005 JR	C,SUBSL4
00310F 01 
003110 79      9006 LD	A,C
003111 06      9007 SUBSL4:         LD	B,0
003112 00 
003113 60      9008 LD	H,B
003114 4F      9009 LD	C,A
003115 B7      9010 OR	A
003116 28      9011 JR	Z,SUBSL9
003117 08 
003118 EB      9012 EX	DE,HL
003119 19      9013 ADD	HL,DE
00311A EB      9014 EX	DE,HL
00311B 21      9015 LD	HL,ACCS
00311C 00 
00311D 52 
00311E ED      9016 LDIR
00311F B0 
003120 C3      9017 SUBSL9:         JP	XEQ
003121 99 
003122 24 
               9018 ;
               9019 ; EXITex FOR [var]
               9020 ; EXITex REPEAT
               9021 ; EXITex WHILE
               9022 ;
003123 FD      9023 EXITex:           INC	IY		;Skip FOR/REPEAT/WHILE
003124 23 
003125 FE      9024 CP	TFOR
003126 E3 
003127 20      9025 JR	NZ,EXIT0
003128 0C 
003129 DD      9026 LD	IX,0		;For EXITex FOR <var>
00312A 21 
00312B 00 
00312C 00 
00312D CD      9027 CALL	TERMQ
00312E 36 
00312F 35 
003130 C4      9028 CALL	NZ,GETVAR
003131 E3 
003132 41 
003133 3E      9029 LD	A,TFOR
003134 E3 
003135 16      9030 EXIT0:          LD	D,1		;Level for WSRCH
003136 01 
003137 5F      9031 LD	E,A
003138 7B      9032 EXIT1:          LD	A,E
003139 C1      9033 POP	BC		;Marker
00313A 21      9034 LD	HL,FORCHK
00313B 61 
00313C 29 
00313D B7      9035 OR	A
00313E ED      9036 SBC	HL,BC
00313F 42 
003140 28      9037 JR	Z,EXIT4
003141 25 
003142 21      9038 LD	HL,REPCHK
003143 ED 
003144 28 
003145 B7      9039 OR	A
003146 ED      9040 SBC	HL,BC
003147 42 
003148 28      9041 JR	Z,EXIT6
003149 38 
00314A 21      9042 LD	HL,WHICHK
00314B 2E 
00314C 2E 
00314D B7      9043 OR	A
00314E ED      9044 SBC	HL,BC
00314F 42 
003150 28      9045 JR	Z,EXIT7
003151 3A 
003152 C5      9046 PUSH	BC		;Put back marker
003153 DD      9047 PUSH	IX
003154 E5 
003155 C1      9048 POP	BC
003156 D9      9049 EXX
003157 3E      9050 LD	A,3
003158 03 
003159 CD      9051 CALL	RESLOC
00315A 31 
00315B 34 
00315C D9      9052 EXX
00315D C5      9053 PUSH	BC
00315E DD      9054 POP	IX
00315F E1 
003160 20      9055 JR	NZ,EXIT1
003161 D6 
003162 3E      9056 LD	A,44
003163 2C 
003164 C3      9057 JP	ERROR_		;'Bad EXITex'
003165 44 
003166 3F 
               9058 ;
003167 C1      9059 EXIT4:          POP	BC		;VARPTR
003168 21      9060 LD	HL,14		;Skip text pointer, limit & step
003169 0E 
00316A 00 
00316B 39      9061 ADD	HL,SP
00316C F9      9062 LD	SP,HL		;Pop FOR record
00316D FE      9063 CP	TFOR
00316E E3 
00316F 20      9064 JR	NZ,EXIT1
003170 C7 
003171 DD      9065 PUSH	IX
003172 E5 
003173 E1      9066 POP	HL
003174 7C      9067 LD	A,H
003175 B5      9068 OR	L
003176 28      9069 JR	Z,EXIT5
003177 02 
003178 ED      9070 SBC	HL,BC
003179 42 
00317A 01      9071 EXIT5:          LD	BC,TFOR+TNEXT*256
00317B 00 
00317C D0 
00317D 28      9072 JR	Z,EXIT8
00317E 15 
00317F 14      9073 INC	D		;Count nested FOR loops
003180 18      9074 JR	EXIT1
003181 B6 
               9075 ;
003182 C1      9076 EXIT6:          POP	BC		;Text pointer
003183 FE      9077 CP	TREPEAT
003184 F5 
003185 20      9078 JR	NZ,EXIT1
003186 B1 
003187 01      9079 LD	BC,TREPEAT+TUNTIL*256
003188 00 
003189 F2 
00318A 18      9080 JR	EXIT8
00318B 08 
               9081 ;
00318C C1      9082 EXIT7:          POP	BC		;Text pointer
00318D FE      9083 CP	TWHILE
00318E C7 
00318F 20      9084 JR	NZ,EXIT1
003190 A7 
003191 01      9085 LD	BC,TWHILE+TENDWHILE*256
003192 00 
003193 95 
003194 CD      9086 EXIT8:          CALL	WSRCH
003195 50 
003196 36 
003197 CD      9087 CALL	SPAN		;Skip UNTIL expression
003198 42 
003199 35 
00319A C3      9088 JP	XEQ
00319B 99 
00319C 24 
               9089 ;
               9090 ;PUT port,data
               9091 ;
00319D CD      9092 PUT:            CALL	EXPRI		;PORT ADDRESS
00319E 33 
00319F 18 
0031A0 D9      9093 EXX
0031A1 E5      9094 PUSH	HL
0031A2 CD      9095 CALL	COMMA
0031A3 A2 
0031A4 20 
0031A5 CD      9096 CALL	EXPRI		;DATA
0031A6 33 
0031A7 18 
0031A8 D9      9097 EXX
0031A9 C1      9098 POP	BC
0031AA ED      9099 OUT	(C),L		;OUTPUT TO PORT BC
0031AB 69 
0031AC C3      9100 JP	XEQ
0031AD 99 
0031AE 24 
               9101 ;
               9102 ;SUBROUTINES:
               9103 ;
               9104 ;ASSIGN - Assign a numeric value to a variable.
               9105 ;Outputs: NC,  Z     - OK, numeric scalar
               9106 ;         NC, NZ, PE - OK, string array  (D = type, E = operator)
               9107 ; else if NC, NZ, P  - OK, numeric array (D = type, E = operator)
               9108 ; else if NC, NZ     - OK, string scalar
               9109 ;          C, NZ     - illegal / invalid
               9110 ;
0031AF CD      9111 ASSIGN:         CALL	GETVAR		;VARIABLE
0031B0 E3 
0031B1 41 
0031B2 D8      9112 RET	C		;ILLEGAL VARIABLE
0031B3 C4      9113 CALL	NZ,PUTVAR
0031B4 CD 
0031B5 41 
0031B6 57      9114 LD	D,A		;Type
0031B7 CD      9115 CALL	NXT
0031B8 0B 
0031B9 45 
0031BA FD      9116 INC	IY
0031BB 23 
0031BC 5F      9117 LD	E,A		;Operator (or =)
0031BD FE      9118 CP	'='
0031BE 3D 
0031BF C4      9119 CALL	NZ,EQUALS
0031C0 4F 
0031C1 35 
0031C2 7A      9120 LD	A,D
0031C3 E6      9121 AND	11000000B
0031C4 C0 
0031C5 C0      9122 RET	NZ		;String or array
0031C6 D5      9123 PUSH	DE
0031C7 E5      9124 PUSH	HL
0031C8 CD      9125 CALL	EXPRN
0031C9 2C 
0031CA 18 
0031CB DD      9126 POP	IX
0031CC E1 
0031CD D1      9127 POP	DE
               9128 ;
               9129 ; Falls through to...
               9130 ;
               9131 ; MODIFY - Update numeric variable according to operator:
               9132 ;   Inputs: D = type
               9133 ;           E = operator
               9134 ;           HLH'L'C = value
               9135 ;           IX = destination VARPTR
               9136 ; Destroys: Everything except IX,IY,SP
               9137 ;
0031CE 7B      9138 MODIFY:         LD	A,E
0031CF FE      9139 CP	'='
0031D0 3D 
0031D1 28      9140 JR	Z,STORE0	;Simple assignment
0031D2 1C 
0031D3 D5      9141 PUSH	DE
0031D4 D9      9142 EXX
0031D5 EB      9143 EX	DE,HL
0031D6 D9      9144 EXX
0031D7 EB      9145 EX	DE,HL
0031D8 41      9146 LD	B,C
0031D9 E3      9147 EX	(SP),HL
0031DA 7C      9148 LD	A,H
0031DB E3      9149 EX	(SP),HL
0031DC CD      9150 CALL	LOADN
0031DD 25 
0031DE 19 
0031DF E3      9151 EX	(SP),HL
0031E0 7D      9152 LD	A,L
0031E1 E3      9153 EX	(SP),HL
0031E2 E6      9154 AND	15
0031E3 0F 
0031E4 DD      9155 PUSH	IX
0031E5 E5 
0031E6 CD      9156 CALL	FPP
0031E7 15 
0031E8 45 
0031E9 DD      9157 POP	IX
0031EA E1 
0031EB D1      9158 POP	DE
0031EC DA      9159 JP	C,ERROR_
0031ED 44 
0031EE 3F 
0031EF 7A      9160 STORE0:         LD	A,D		;Type
0031F0 FE      9161 STOREN:         CP	5
0031F1 05 
0031F2 28      9162 JR	Z,STORE5
0031F3 12 
0031F4 F5      9163 PUSH	AF
0031F5 0C      9164 INC	C		;SPEED - & PRESERVE F'
0031F6 0D      9165 DEC	C		; WHEN CALLED BY FNEND0
0031F7 C4      9166 CALL	NZ,SFIX		;CONVERT TO INTEGER
0031F8 17 
0031F9 1C 
0031FA F1      9167 POP	AF
0031FB FE      9168 CP	4
0031FC 04 
0031FD 28      9169 JR	Z,STORE4
0031FE 0A 
0031FF BF      9170 CP	A		;SET ZERO
003200 D9      9171 STORE1:         EXX
003201 DD      9172 LD	(IX+0),L
003202 75 
003203 00 
003204 D9      9173 EXX
003205 C9      9174 RET
               9175 ;
003206 DD      9176 STORE5:         LD	(IX+4),C
003207 71 
003208 04 
003209 D9      9177 STORE4:         EXX
00320A DD      9178 LD	(IX+0),L
00320B 75 
00320C 00 
00320D DD      9179 LD	(IX+1),H
00320E 74 
00320F 01 
003210 D9      9180 EXX
003211 DD      9181 LD	(IX+2),L
003212 75 
003213 02 
003214 DD      9182 LD	(IX+3),H
003215 74 
003216 03 
003217 C9      9183 RET
               9184 ;
               9185 ; MODIFS - Update string variable according to operator:
               9186 ;   Inputs: H = type
               9187 ;           L = operator (= or +)
               9188 ;           E = string length (string in accumulator)
               9189 ;           IX = destination VARPTR
               9190 ; Destroys: Everything except SP, IY
               9191 ;
003218 7D      9192 MODIFS:         LD	A,L		;Operator
003219 FE      9193 CP	'+'
00321A 2B 
00321B 7C      9194 LD	A,H		;Type
00321C 20      9195 JR	NZ,STACCS
00321D 20 
00321E FD      9196 PUSH	IY
00321F E5 
003220 DD      9197 PUSH	IX
003221 E5 
003222 FD      9198 POP	IY
003223 E1 
003224 CD      9199 CALL	PUSHS
003225 19 
003226 20 
003227 FD      9200 PUSH	IY
003228 E5 
003229 DD      9201 POP	IX
00322A E1 
00322B CD      9202 CALL	LOADS
00322C 0E 
00322D 1A 
00322E C1      9203 POP	BC
00322F 78      9204 LD	A,B		;Type
003230 0C      9205 INC	C
003231 0D      9206 DEC	C
003232 28      9207 JR	Z,MODFS1	;Zero length
003233 08 
003234 21      9208 LD	HL,0
003235 00 
003236 00 
003237 44      9209 LD	B,H
003238 39      9210 ADD	HL,SP
003239 ED      9211 LDIR
00323A B0 
00323B F9      9212 LD	SP,HL
00323C FD      9213 MODFS1:         POP	IY
00323D E1 
               9214 ;
               9215 ; Falls through to:
               9216 ;
00323E 21      9217 STACCS:         LD	HL,ACCS
00323F 00 
003240 52 
003241 1F      9218 STORES:         RRA
003242 30      9219 JR	NC,STORS3	;FIXED STRING
003243 4F 
003244 E5      9220 PUSH	HL
003245 CD      9221 CALL	LOAD4
003246 32 
003247 19 
003248 7B      9222 LD	A,E		;LENGTH OF STRING
003249 D9      9223 EXX
00324A 6F      9224 LD	L,A
00324B 7C      9225 LD	A,H		;LENGTH ALLOCATED
00324C D9      9226 EXX
00324D BB      9227 CP	E
00324E 30      9228 JR	NC,STORS1	;ENOUGH ROOM
00324F 24 
003250 D9      9229 EXX
003251 65      9230 LD	H,L
003252 D9      9231 EXX
003253 E5      9232 PUSH	HL
003254 06      9233 LD	B,0
003255 00 
003256 4F      9234 LD	C,A
003257 09      9235 ADD	HL,BC
003258 ED      9236 LD	BC,(FREE)
003259 4B 
00325A E0 
00325B 54 
00325C ED      9237 SBC	HL,BC		;IS STRING LAST?
00325D 42 
00325E E1      9238 POP	HL
00325F 28      9239 JR	Z,STORS0
003260 12 
003261 60      9240 LD	H,B
003262 69      9241 LD	L,C		;DESTINATION
               9242 ;
003263 B7      9243 OR	A		;V5 optimisation
003264 28      9244 JR	Z,STORS0
003265 0D 
003266 7B      9245 LD	A,E
003267 5F      9246 STORS2:         LD	E,A
003268 1D      9247 DEC	E
003269 A3      9248 AND	E
00326A 20      9249 JR	NZ,STORS2
00326B FB 
00326C 37      9250 SCF
00326D CB      9251 RL	E
00326E 13 
00326F 7B      9252 LD	A,E
003270 D9      9253 EXX
003271 67      9254 LD	H,A
003272 D9      9255 EXX
               9256 ;
003273 37      9257 STORS0:         SCF
003274 CD      9258 STORS1:         CALL	STORE4		;PRESERVES CARRY!
003275 09 
003276 32 
003277 06      9259 LD	B,0
003278 00 
003279 4B      9260 LD	C,E
00327A EB      9261 EX	DE,HL
00327B E1      9262 POP	HL
00327C 0D      9263 DEC	C
00327D 0C      9264 INC	C
00327E C8      9265 RET	Z		;NULL STRING
00327F ED      9266 LDIR
003280 B0 
003281 D0      9267 RET	NC		;STRING REPLACED
003282 ED      9268 LD	(FREE),DE
003283 53 
003284 E0 
003285 54 
003286 E5      9269 CHECK:          PUSH	HL
003287 2A      9270 LD	HL,(FREE)
003288 E0 
003289 54 
00328A 24      9271 INC	H
00328B ED      9272 SBC	HL,SP
00328C 72 
00328D E1      9273 POP	HL
00328E D8      9274 RET	C
00328F AF      9275 XOR	A
003290 C3      9276 JP	ERROR_		;"No room"
003291 44 
003292 3F 
               9277 ;
003293 4B      9278 STORS3:         LD	C,E
003294 DD      9279 PUSH	IX
003295 E5 
003296 D1      9280 POP	DE
003297 AF      9281 XOR	A
003298 47      9282 LD	B,A
003299 B9      9283 CP	C
00329A 28      9284 JR	Z,STORS5
00329B 02 
00329C ED      9285 LDIR
00329D B0 
00329E 3E      9286 STORS5:         LD	A,CR
00329F 0D 
0032A0 12      9287 LD	(DE),A
0032A1 C9      9288 RET
               9289 ;
               9290 ; SAVRET - SAVE 'RETURNed' PARAMETER INFO
               9291 ;
0032A2 DD      9292 SAVRET:         LD	(IX+0),L		;Formal VARPTR
0032A3 75 
0032A4 00 
0032A5 DD      9293 LD	(IX+1),H
0032A6 74 
0032A7 01 
0032A8 DD      9294 LD	(IX+2),A
0032A9 77 
0032AA 02 
0032AB FD      9295 EX	(SP),IY
0032AC E3 
0032AD F5      9296 PUSH	AF
0032AE FD      9297 PUSH	IY
0032AF E5 
0032B0 DD      9298 PUSH	IX
0032B1 E5 
0032B2 CD      9299 CALL	NXT
0032B3 0B 
0032B4 45 
0032B5 CD      9300 CALL	VAR_
0032B6 D6 
0032B7 25 
0032B8 DD      9301 POP	IX
0032B9 E1 
0032BA DD      9302 LD	(IX+4),L		;Actual VARPTR
0032BB 75 
0032BC 04 
0032BD DD      9303 LD	(IX+5),H
0032BE 74 
0032BF 05 
0032C0 DD      9304 LD	(IX+6),A
0032C1 77 
0032C2 06 
0032C3 FD      9305 POP	IY
0032C4 E1 
0032C5 F1      9306 POP	AF
0032C6 01      9307 LD	BC,8
0032C7 08 
0032C8 00 
0032C9 DD      9308 ADD	IX,BC
0032CA 09 
0032CB 18      9309 JR	ARGUE0
0032CC 2D 
               9310 ;
               9311 ;ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
               9312 ; CALLING STATEMENT TO THE DUMMY VARIABLES VIA
               9313 ; THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
               9314 ; PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
               9315 ;   Inputs: DE addresses parameter list
               9316 ;           IY addresses dummy variable list
               9317 ;           IX addresses RETURNed parameter data block
               9318 ;  Outputs: DE,IY updated
               9319 ; Destroys: Everything
               9320 ;
0032CD 3E      9321 ARGUE:          LD	A,-1
0032CE FF 
0032CF F5      9322 PUSH	AF		;PUT MARKER ON STACK
0032D0 FD      9323 ARGUE1:         INC	IY		;BUMP PAST ( | ,
0032D1 23 
0032D2 13      9324 INC	DE
0032D3 D5      9325 PUSH	DE
0032D4 06      9326 LD	B,0
0032D5 00 
0032D6 CD      9327 CALL	NXT
0032D7 0B 
0032D8 45 
0032D9 FE      9328 CP	TRETURN
0032DA F8 
0032DB 20      9329 JR	NZ,ARGUE9
0032DC 06 
0032DD FD      9330 INC	IY		;SKIP 'RETURN'
0032DE 23 
0032DF CD      9331 CALL	NXT
0032E0 0B 
0032E1 45 
0032E2 04      9332 INC	B		;FLAG 'RETURN'
0032E3 C5      9333 ARGUE9:         PUSH	BC
0032E4 DD      9334 PUSH	IX
0032E5 E5 
0032E6 CD      9335 CALL	GETVAR		;FORMAL PARAMETER
0032E7 E3 
0032E8 41 
0032E9 38      9336 JR	C,ARGERR
0032EA 49 
0032EB C4      9337 CALL	NZ,PUTVAR
0032EC CD 
0032ED 41 
0032EE DD      9338 POP	IX
0032EF E1 
0032F0 C1      9339 POP	BC
0032F1 D1      9340 POP	DE
0032F2 E5      9341 PUSH	HL		;VARPTR
0032F3 F5      9342 PUSH	AF
0032F4 D5      9343 PUSH	DE
0032F5 05      9344 DEC	B
0032F6 28      9345 JR	Z,SAVRET
0032F7 AA 
0032F8 FD      9346 EX	(SP),IY
0032F9 E3 
0032FA CB      9347 ARGUE0:         BIT	6,A		;ARRAY?
0032FB 77 
0032FC 20      9348 JR	NZ,ARGUE3
0032FD 3B 
0032FE B7      9349 OR	A		;TYPE
0032FF FA      9350 JP	M,ARGUE2	;STRING
003300 15 
003301 33 
003302 DD      9351 PUSH	IX
003303 E5 
003304 CD      9352 CALL	EXPRN		;ACTUAL PARAMETER
003305 2C 
003306 18 
003307 DD      9353 POP	IX
003308 E1 
003309 FD      9354 EX	(SP),IY
00330A E3 
00330B D1      9355 POP	DE
00330C F1      9356 POP	AF
00330D D9      9357 EXX
00330E E5      9358 PUSH	HL
00330F D9      9359 EXX
003310 E5      9360 PUSH	HL
003311 47      9361 LD	B,A
003312 C5      9362 PUSH	BC
003313 18      9363 JR	ARGUE4
003314 13 
               9364 ;
003315 DD      9365 ARGUE2:         PUSH	IX
003316 E5 
003317 CD      9366 CALL	EXPRS
003318 3C 
003319 18 
00331A D9      9367 EXX
00331B C1      9368 POP	BC
00331C FD      9369 EX	(SP),IY
00331D E3 
00331E D1      9370 POP	DE
00331F D9      9371 EXX
003320 F1      9372 POP	AF
003321 CD      9373 CALL	PUSHS
003322 19 
003323 20 
003324 D9      9374 EXX
003325 C5      9375 PUSH	BC
003326 DD      9376 POP	IX
003327 E1 
003328 CD      9377 ARGUE4:         CALL	NXT
003329 0B 
00332A 45 
00332B FE      9378 CP	','
00332C 2C 
00332D 20      9379 JR	NZ,ARGUE5
00332E 27 
00332F 1A      9380 LD	A,(DE)
003330 FE      9381 CP	','
003331 2C 
003332 28      9382 JR	Z,ARGUE1	;ANOTHER
003333 9C 
003334 3E      9383 ARGERR:         LD	A,31
003335 1F 
003336 C3      9384 JP	ERROR_		;"Bad arguments"
003337 44 
003338 3F 
               9385 ;
003339 DD      9386 ARGUE3:         PUSH	IX
00333A E5 
00333B CD      9387 CALL	NXT
00333C 0B 
00333D 45 
00333E CD      9388 CALL	GETVAR
00333F E3 
003340 41 
003341 38      9389 JR	C,ARGERR
003342 F1 
003343 DD      9390 LD	C,(IX+0)
003344 4E 
003345 00 
003346 DD      9391 LD	B,(IX+1)
003347 46 
003348 01 
003349 DD      9392 POP	IX
00334A E1 
00334B CD      9393 CALL	NXT
00334C 0B 
00334D 45 
00334E FD      9394 EX	(SP),IY
00334F E3 
003350 D1      9395 POP	DE
003351 F1      9396 POP	AF
003352 C5      9397 PUSH	BC		;STACK ARRAY POINTER
003353 F5      9398 PUSH	AF		;STACK TYPE
003354 18      9399 JR	ARGUE4
003355 D2 
               9400 ;
003356 CD      9401 ARGUE5:         CALL	BRAKET
003357 AE 
003358 20 
003359 1A      9402 LD	A,(DE)
00335A FE      9403 CP	')'
00335B 29 
00335C 20      9404 JR	NZ,ARGERR
00335D D6 
00335E 13      9405 INC	DE
00335F D9      9406 UNSTAK:         EXX
003360 C1      9407 ARGUE6:         POP	BC
003361 78      9408 LD	A,B
003362 3C      9409 INC	A
003363 D9      9410 EXX
003364 C8      9411 RET	Z		;MARKER POPPED
003365 D9      9412 EXX
003366 3D      9413 DEC	A
003367 CB      9414 BIT	6,A		;ARRAY
003368 77 
003369 20      9415 JR	NZ,ARGUE8
00336A 19 
00336B B7      9416 OR	A
00336C FA      9417 JP	M,ARGUE7	;STRING
00336D 7A 
00336E 33 
00336F E1      9418 POP	HL
003370 D9      9419 EXX
003371 E1      9420 POP	HL
003372 D9      9421 EXX
003373 DD      9422 POP	IX
003374 E1 
003375 CD      9423 CALL	STOREN		;WRITE TO DUMMY
003376 F0 
003377 31 
003378 18      9424 JR	ARGUE6
003379 E6 
               9425 ;
00337A CD      9426 ARGUE7:         CALL	POPS
00337B 37 
00337C 20 
00337D DD      9427 POP	IX
00337E E1 
00337F CD      9428 CALL	STACCS
003380 3E 
003381 32 
003382 18      9429 JR	ARGUE6
003383 DC 
               9430 ;
003384 C1      9431 ARGUE8:         POP	BC		;ARRAY POINTER
003385 DD      9432 POP	IX
003386 E1 
003387 DD      9433 LD	(IX+0),C
003388 71 
003389 00 
00338A DD      9434 LD	(IX+1),B
00338B 70 
00338C 01 
00338D 18      9435 JR	ARGUE6
00338E D1 
               9436 ;
               9437 ;Restore RETURNed parameters, via the stack to ensure that
               9438 ; PROCFRED(A,B)    DEF PROCFRED(RETURN B,RETURN A)  works.
               9439 ;
00338F 3E      9440 RETXFR:         LD	A,-1
003390 FF 
003391 F5      9441 PUSH	AF		;PUT MARKER ON STACK
003392 D9      9442 RETXF1:         EXX
003393 DD      9443 LD	L,(IX+4)	;Actual parameter (destination)
003394 6E 
003395 04 
003396 DD      9444 LD	H,(IX+5)
003397 66 
003398 05 
003399 E5      9445 PUSH	HL		;STACK VARPTR
00339A DD      9446 LD	L,(IX+0)	;Formal parameter (source)
00339B 6E 
00339C 00 
00339D DD      9447 LD	H,(IX+1)
00339E 66 
00339F 01 
0033A0 DD      9448 LD	A,(IX+2)
0033A1 7E 
0033A2 02 
0033A3 CB      9449 BIT	6,A		;ARRAY?
0033A4 77 
0033A5 20      9450 JR	NZ,RETXF3
0033A6 19 
0033A7 B7      9451 OR	A		;TYPE
0033A8 FA      9452 JP	M,RETXF2	;STRING
0033A9 C6 
0033AA 33 
0033AB E5      9453 PUSH	HL
0033AC DD      9454 EX	(SP),IX
0033AD E3 
0033AE CD      9455 CALL	LOADN
0033AF 25 
0033B0 19 
0033B1 DD      9456 POP	IX
0033B2 E1 
0033B3 D9      9457 EXX			;STACK VALUE
0033B4 E5      9458 PUSH	HL
0033B5 D9      9459 EXX
0033B6 E5      9460 PUSH	HL
0033B7 DD      9461 RETXF6:         LD	B,(IX+6)
0033B8 46 
0033B9 06 
0033BA C5      9462 PUSH	BC		;TYPE & EXPONENT
0033BB CD      9463 RETXF5:         CALL	CHECK		;CHECK ROOM
0033BC 86 
0033BD 32 
0033BE 18      9464 JR	RETXF4
0033BF 1E 
               9465 ;
0033C0 5E      9466 RETXF3:         LD	E,(HL)
0033C1 23      9467 INC	HL
0033C2 56      9468 LD	D,(HL)
0033C3 D5      9469 PUSH	DE		;STACK ARRAY POINTER
0033C4 18      9470 JR	RETXF6
0033C5 F1 
               9471 ;
0033C6 E5      9472 RETXF2:         PUSH	HL
0033C7 DD      9473 EX	(SP),IX
0033C8 E3 
0033C9 CD      9474 CALL	LOADS
0033CA 0E 
0033CB 1A 
0033CC DD      9475 POP	IX
0033CD E1 
0033CE DD      9476 LD	A,(IX+6)
0033CF 7E 
0033D0 06 
0033D1 D9      9477 EXX
0033D2 DD      9478 PUSH	IX
0033D3 E5 
0033D4 E1      9479 POP	HL
0033D5 D9      9480 EXX
0033D6 CD      9481 CALL	PUSHS
0033D7 19 
0033D8 20 
0033D9 D9      9482 EXX
0033DA E5      9483 PUSH	HL
0033DB DD      9484 POP	IX
0033DC E1 
0033DD D9      9485 EXX
0033DE 11      9486 RETXF4:         LD	DE,8
0033DF 08 
0033E0 00 
0033E1 DD      9487 ADD	IX,DE
0033E2 19 
0033E3 D9      9488 EXX
0033E4 10      9489 DJNZ	RETXF1
0033E5 AC 
0033E6 C3      9490 JP	UNSTAK
0033E7 5F 
0033E8 33 
               9491 ;
               9492 ;Restore 'RETURNed' parameters,
               9493 ;
0033E9 C1      9494 RESRET:         POP	BC		;B = 'RETURN' COUNT
0033EA 26      9495 LD	H,0
0033EB 00 
0033EC 68      9496 LD	L,B
0033ED 29      9497 ADD	HL,HL
0033EE 29      9498 ADD	HL,HL
0033EF 29      9499 ADD	HL,HL		;RETURN COUNT * 8
0033F0 39      9500 ADD	HL,SP
0033F1 DD      9501 LD	IX,0
0033F2 21 
0033F3 00 
0033F4 00 
0033F5 DD      9502 ADD	IX,SP		;ADDRESS PARAMETER LIST
0033F6 39 
0033F7 F5      9503 PUSH	AF
0033F8 D5      9504 PUSH	DE
0033F9 E5      9505 PUSH	HL
0033FA D9      9506 EXX
0033FB C5      9507 PUSH	BC
0033FC D5      9508 PUSH	DE
0033FD D9      9509 EXX
0033FE 78      9510 LD	A,B
0033FF 21      9511 LD	HL,ACCS
003400 00 
003401 52 
003402 11      9512 LD	DE,BUFFER
003403 00 
003404 53 
003405 01      9513 LD	BC,255
003406 FF 
003407 00 
003408 ED      9514 LDIR
003409 B0 
00340A 47      9515 LD	B,A
00340B CD      9516 CALL	RETXFR		;TRANSFER VIA STACK
00340C 8F 
00340D 33 
00340E 21      9517 LD	HL,BUFFER
00340F 00 
003410 53 
003411 11      9518 LD	DE,ACCS
003412 00 
003413 52 
003414 01      9519 LD	BC,255
003415 FF 
003416 00 
003417 ED      9520 LDIR
003418 B0 
003419 D9      9521 EXX
00341A D1      9522 POP	DE
00341B C1      9523 POP	BC
00341C D9      9524 EXX
00341D E1      9525 POP	HL
00341E D1      9526 POP	DE
00341F F1      9527 POP	AF
003420 18      9528 JR	RESAR1
003421 0A 
               9529 ;
               9530 ; Restore LOCAL array or memory block:
               9531 ;
003422 C1      9532 RESARR:         POP	BC
003423 CB      9533 BIT	7,B		;String array?
003424 78 
003425 E1      9534 POP	HL
003426 C1      9535 POP	BC
003427 09      9536 ADD	HL,BC
003428 39      9537 ADD	HL,SP
003429 C4      9538 CALL	NZ,FREESA	;Free string array
00342A E3 
00342B 36 
00342C F9      9539 RESAR1:         LD	SP,HL
00342D DD      9540 INC	IX		;Flag something restored
00342E 23 
00342F 18      9541 JR	RESLO1
003430 05 
               9542 ;
               9543 ; RESLOC - Restore local variables/arrays or DATA/ERROR status from stack
               9544 ;   Inputs: A = 0 if everything OK, bit0 set if DATPTR, bit1 set if ERRTRP
               9545 ;  Outputs: Z if nothing was restored, NZ if something was restored
               9546 ; Destroys: A,B,C,D,E,H,L,H',L',IX,SP,flags
               9547 ;
003431 D1      9548 RESLOC:         POP	DE		;Return address
003432 DD      9549 LD	IX,0		;To flag nothing was restored
003433 21 
003434 00 
003435 00 
003436 C1      9550 RESLO1:         POP	BC		;Marker ?
003437 21      9551 LD	HL,LOCCHK
003438 2A 
003439 35 
00343A B7      9552 OR	A
00343B ED      9553 SBC	HL,BC
00343C 42 
00343D 28      9554 JR	Z,RESLO2	;Something to restore
00343E 1A 
00343F B7      9555 OR	A
003440 20      9556 JR	NZ,RESLO8
003441 0F 
003442 21      9557 LD	HL,RETCHK
003443 70 
003444 2A 
003445 ED      9558 SBC	HL,BC
003446 42 
003447 28      9559 JR	Z,RESRET
003448 A0 
003449 21      9560 LD	HL,ARRCHK
00344A DC 
00344B 26 
00344C B7      9561 OR	A
00344D ED      9562 SBC	HL,BC
00344E 42 
00344F 28      9563 JR	Z,RESARR
003450 D1 
003451 DD      9564 RESLO8:         PUSH	IX
003452 E5 
003453 E1      9565 POP	HL
003454 7C      9566 LD	A,H
003455 B5      9567 OR	L
003456 C5      9568 RESLO0:         PUSH	BC		;Put back marker
003457 EB      9569 EX	DE,HL
003458 E9      9570 JP	(HL)		;Return
               9571 ;
003459 DD      9572 RESLO2:         POP	IX		;Variable pointer
00345A E1 
00345B B7      9573 OR	A
00345C 28      9574 JR	Z,RESLO3	;Everything allowed
00345D 20 
00345E DD      9575 PUSH	IX
00345F E5 
003460 C1      9576 POP	BC
003461 CB      9577 BIT	0,A
003462 47 
003463 28      9578 JR	Z,RESLO6	;Bit 0 set, so
003464 07 
003465 21      9579 LD	HL,DATPTR	;test for DATPTR
003466 F0 
003467 54 
003468 ED      9580 SBC	HL,BC
003469 42 
00346A 28      9581 JR	Z,RESLO3
00346B 12 
00346C B7      9582 RESLO6:         OR	A
00346D CB      9583 BIT	1,A
00346E 4F 
00346F 28      9584 JR	Z,RESLO7	;Bit 1 set, so
003470 07 
003471 21      9585 LD	HL,ERRTRP	;test for ERRPTR
003472 EA 
003473 54 
003474 ED      9586 SBC	HL,BC
003475 42 
003476 28      9587 JR	Z,RESLO3
003477 06 
003478 C5      9588 RESLO7:         PUSH	BC		;Put back pointer
003479 01      9589 LD	BC,LOCCHK
00347A 2A 
00347B 35 
00347C 18      9590 JR	RESLO0
00347D D8 
               9591 ;
00347E C1      9592 RESLO3:         POP	BC		;Type / exponent
00347F CB      9593 BIT	6,B
003480 70 
003481 20      9594 JR	NZ,RESLO4	;Array?
003482 14 
003483 CB      9595 BIT	7,B
003484 78 
003485 20      9596 JR	NZ,RESLO5	;String?
003486 23 
003487 E1      9597 POP	HL
003488 D9      9598 EXX
003489 E1      9599 POP	HL
00348A D9      9600 EXX
00348B CB      9601 BIT	4,B
00348C 60 
00348D 20      9602 JR	NZ,RESLO1
00348E A7 
00348F F5      9603 PUSH	AF
003490 78      9604 LD	A,B
003491 CD      9605 CALL	STOREN		;Numeric
003492 F0 
003493 31 
003494 F1      9606 POP	AF
003495 18      9607 JR	RESLO1
003496 9F 
               9608 ;
003497 E1      9609 RESLO4:         POP	HL
003498 CB      9610 BIT	4,B
003499 60 
00349A 20      9611 JR	NZ,RESLO1
00349B 9A 
00349C DD      9612 LD	(IX+0),L	;Array
00349D 75 
00349E 00 
00349F DD      9613 LD	(IX+1),H
0034A0 74 
0034A1 01 
0034A2 18      9614 JR	RESLO1
0034A3 92 
               9615 ;
0034A4 06      9616 RESLO9:         LD	B,0
0034A5 00 
0034A6 09      9617 ADD	HL,BC
0034A7 F9      9618 LD	SP,HL
0034A8 18      9619 RESLGO:         JR	RESLO1
0034A9 8C 
               9620 ;
0034AA 21      9621 RESLO5:         LD	HL,0
0034AB 00 
0034AC 00 
0034AD 39      9622 ADD	HL,SP
0034AE CB      9623 BIT	4,B
0034AF 60 
0034B0 20      9624 JR	NZ,RESLO9
0034B1 F2 
0034B2 F5      9625 PUSH	AF
0034B3 D5      9626 PUSH	DE
0034B4 59      9627 LD	E,C
0034B5 78      9628 LD	A,B
0034B6 CD      9629 CALL	STORES		;String
0034B7 41 
0034B8 32 
0034B9 D1      9630 POP	DE
0034BA F1      9631 POP	AF
0034BB F9      9632 LD	SP,HL
0034BC 18      9633 JR	RESLGO
0034BD EA 
               9634 ;
               9635 ;SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
               9636 ;  OF A FUNCTION OR PROCEDURE.
               9637 ;THERE IS A LOT OF STACK MANIPULATION - CARE!!
               9638 ;   Inputs: IY is parameters pointer
               9639 ;  Outputs: IY updated
               9640 ;           A' incremented for each RETURN
               9641 ; Destroys: A',A,B,C,D,E,H,L,IX,IY,F,SP
               9642 ;
0034BE D1      9643 SAVLOC:         POP	DE		;RETURN ADDRESS
0034BF FD      9644 SAVLO1:         INC	IY		;BUMP PAST ( | ,
0034C0 23 
0034C1 CD      9645 CALL	NXT
0034C2 0B 
0034C3 45 
0034C4 FE      9646 CP	TRETURN
0034C5 F8 
0034C6 20      9647 JR	NZ,SAVLO6
0034C7 08 
0034C8 08      9648 EX	AF,AF'
0034C9 3C      9649 INC	A		;RETURN counter
0034CA 08      9650 EX	AF,AF'
0034CB FD      9651 INC	IY		;Bump past RETURN
0034CC 23 
0034CD CD      9652 CALL	NXT
0034CE 0B 
0034CF 45 
0034D0 D5      9653 SAVLO6:         PUSH	DE
0034D1 D9      9654 EXX
0034D2 C5      9655 PUSH	BC
0034D3 D5      9656 PUSH	DE
0034D4 E5      9657 PUSH	HL
0034D5 D9      9658 EXX
0034D6 CD      9659 CALL	VAR_		;DUMMY VARIABLE
0034D7 D6 
0034D8 25 
0034D9 D9      9660 EXX
0034DA E1      9661 POP	HL
0034DB D1      9662 POP	DE
0034DC C1      9663 POP	BC
0034DD D9      9664 EXX
0034DE D1      9665 POP	DE
0034DF CB      9666 BIT	6,A		;ARRAY?
0034E0 77 
0034E1 20      9667 JR	NZ,SAVLO3
0034E2 12 
0034E3 B7      9668 OR	A		;TYPE
0034E4 FA      9669 JP	M,SAVLO2	;STRING
0034E5 FF 
0034E6 34 
0034E7 D9      9670 EXX
0034E8 E5      9671 PUSH	HL		;SAVE H'L'
0034E9 D9      9672 EXX
0034EA 47      9673 LD	B,A		;TYPE
0034EB CD      9674 CALL	LOADN
0034EC 25 
0034ED 19 
0034EE D9      9675 EXX
0034EF E3      9676 EX	(SP),HL
0034F0 D9      9677 EXX
0034F1 E5      9678 PUSH	HL
0034F2 C5      9679 PUSH	BC
0034F3 18      9680 JR	SAVLO4
0034F4 30 
               9681 ;
0034F5 DD      9682 SAVLO3:         LD	C,(IX+0)	;ARRAY POINTER
0034F6 4E 
0034F7 00 
0034F8 DD      9683 LD	B,(IX+1)
0034F9 46 
0034FA 01 
0034FB C5      9684 PUSH	BC		;SAVE TO STACK
0034FC F5      9685 PUSH	AF		;SAVE TYPE
0034FD 18      9686 JR	SAVLO4
0034FE 26 
               9687 ;
0034FF F5      9688 SAVLO2:         PUSH	AF		;STRING TYPE
003500 D5      9689 PUSH	DE
003501 D9      9690 EXX
003502 E5      9691 PUSH	HL
003503 D9      9692 EXX
003504 CD      9693 CALL	LOADS
003505 0E 
003506 1A 
003507 D9      9694 EXX
003508 E1      9695 POP	HL
003509 D9      9696 EXX
00350A 4B      9697 LD	C,E
00350B D1      9698 POP	DE
00350C CD      9699 CALL	CHECK
00350D 86 
00350E 32 
00350F F1      9700 POP	AF		;LEVEL STACK
003510 21      9701 LD	HL,0
003511 00 
003512 00 
003513 45      9702 LD	B,L
003514 ED      9703 SBC	HL,BC
003515 42 
003516 39      9704 ADD	HL,SP
003517 F9      9705 LD	SP,HL
003518 47      9706 LD	B,A		;TYPE
003519 C5      9707 PUSH	BC
00351A 28      9708 JR	Z,SAVLO4
00351B 09 
00351C D5      9709 PUSH	DE
00351D 11      9710 LD	DE,ACCS
00351E 00 
00351F 52 
003520 EB      9711 EX	DE,HL
003521 45      9712 LD	B,L
003522 ED      9713 LDIR			;SAVE STRING ON STACK
003523 B0 
003524 D1      9714 POP	DE
003525 DD      9715 SAVLO4:         PUSH	IX		;VARPTR
003526 E5 
003527 CD      9716 CALL	SAVLO5
003528 2A 
003529 35 
               9717 LOCCHK:         EQU	$
00352A CD      9718 SAVLO5:         CALL	CHECK
00352B 86 
00352C 32 
00352D CD      9719 CALL	NXT
00352E 0B 
00352F 45 
003530 FE      9720 CP	','		;MORE?
003531 2C 
003532 28      9721 JR	Z,SAVLO1
003533 8B 
003534 EB      9722 EX	DE,HL
003535 E9      9723 JP	(HL)		;"RETURN"
               9724 ;
003536 CD      9725 TERMQ:          CALL	NXT
003537 0B 
003538 45 
003539 FE      9726 CP	TELSE
00353A 8B 
00353B D0      9727 RET	NC
00353C FE      9728 CP	':'		;ASSEMBLER SEPARATOR
00353D 3A 
00353E D0      9729 RET	NC
00353F FE      9730 CP	CR
003540 0D 
003541 C9      9731 RET
               9732 ;
003542 CD      9733 SPAN:           CALL	TERMQ
003543 36 
003544 35 
003545 C8      9734 RET	Z
003546 FD      9735 INC	IY
003547 23 
003548 FE      9736 CP	'"'
003549 22 
00354A CC      9737 CALL	Z,QUOTE
00354B 99 
00354C 36 
00354D 18      9738 JR	SPAN
00354E F3 
               9739 ;
00354F CD      9740 EQUALS:         CALL	NXT
003550 0B 
003551 45 
003552 FD      9741 INC	IY
003553 23 
003554 FE      9742 CP	'='
003555 3D 
003556 C8      9743 RET	Z
003557 3E      9744 LD	A,4
003558 04 
003559 C3      9745 JP	ERROR_		;"Mistake"
00355A 44 
00355B 3F 
               9746 ;
00355C FE      9747 FORMAT:         CP	TTAB
00355D 8A 
00355E 28      9748 JR	Z,DOTAB
00355F 0C 
003560 FE      9749 CP	TSPC
003561 89 
003562 28      9750 JR	Z,DOSPC
003563 38 
               9751 ; CP	'''
003564 FE      9752 CP	39	; apostrophe
003565 27 
003566 C0      9753 RET	NZ
003567 CD      9754 CALL	CRLF
003568 FB 
003569 40 
00356A AF      9755 XOR	A
00356B C9      9756 RET
               9757 ;
00356C C5      9758 DOTAB:          PUSH	BC
00356D CD      9759 CALL	EXPRI
00356E 33 
00356F 18 
003570 D9      9760 EXX
003571 C1      9761 POP	BC
003572 FD      9762 LD	A,(IY)
003573 7E 
003574 00 
003575 FE      9763 CP	','
003576 2C 
003577 28      9764 JR	Z,DOTAB1
003578 11 
003579 CD      9765 CALL	BRAKET
00357A AE 
00357B 20 
00357C 7D      9766 LD	A,L
00357D 21      9767 TABIT:          LD	HL,COUNT
00357E FB 
00357F 54 
003580 BE      9768 CP	(HL)
003581 C8      9769 RET	Z
003582 F5      9770 PUSH	AF
003583 DC      9771 CALL	C,CRLF
003584 FB 
003585 40 
003586 F1      9772 POP	AF
003587 96      9773 SUB	(HL)
003588 18      9774 JR	SPACES
003589 19 
00358A FD      9775 DOTAB1:         INC	IY
00358B 23 
00358C C5      9776 PUSH	BC
00358D E5      9777 PUSH	HL
00358E CD      9778 CALL	EXPRI
00358F 33 
003590 18 
003591 D9      9779 EXX
003592 D1      9780 POP	DE
003593 C1      9781 POP	BC
003594 CD      9782 CALL	BRAKET
003595 AE 
003596 20 
003597 CD      9783 CALL	PUTCSR
003598 08 
003599 02 
00359A AF      9784 XOR	A
00359B C9      9785 RET
               9786 ;
00359C C5      9787 DOSPC:          PUSH	BC
00359D CD      9788 CALL	ITEMI
00359E 60 
00359F 18 
0035A0 D9      9789 EXX
0035A1 7D      9790 LD	A,L
0035A2 C1      9791 POP	BC
0035A3 B7      9792 SPACES:         OR	A
0035A4 C8      9793 RET	Z
0035A5 C5      9794 PUSH	BC
0035A6 47      9795 LD	B,A
0035A7 3E      9796 FILL1:          LD	A,' '
0035A8 20 
0035A9 CD      9797 CALL	OUTCHR
0035AA 02 
0035AB 41 
0035AC 10      9798 DJNZ	FILL1
0035AD F9 
0035AE C1      9799 POP	BC
0035AF AF      9800 XOR	A
0035B0 C9      9801 RET
               9802 ;
0035B1 21      9803 PTEXT:          LD	HL,ACCS
0035B2 00 
0035B3 52 
0035B4 1C      9804 INC	E
0035B5 1D      9805 PTEXT1:         DEC	E
0035B6 C8      9806 RET	Z
0035B7 7E      9807 LD	A,(HL)
0035B8 23      9808 INC	HL
0035B9 CD      9809 CALL	OUTCHR
0035BA 02 
0035BB 41 
0035BC 18      9810 JR	PTEXT1
0035BD F7 
               9811 ;
0035BE F5      9812 FETCHS:         PUSH	AF
0035BF C5      9813 PUSH	BC
0035C0 E5      9814 PUSH	HL
0035C1 FD      9815 EX	(SP),IY
0035C2 E3 
0035C3 CD      9816 CALL	XTRACT
0035C4 DB 
0035C5 35 
0035C6 CD      9817 CALL	NXT
0035C7 0B 
0035C8 45 
0035C9 FD      9818 EX	(SP),IY
0035CA E3 
0035CB E1      9819 POP	HL
0035CC C1      9820 POP	BC
0035CD F1      9821 POP	AF
0035CE C9      9822 RET
               9823 ;
0035CF 11      9824 LINES:          LD	DE,ACCS
0035D0 00 
0035D1 52 
0035D2 7E      9825 LINE1S:         LD	A,(HL)
0035D3 12      9826 LD	(DE),A
0035D4 FE      9827 CP	CR
0035D5 0D 
0035D6 C8      9828 RET	Z
0035D7 23      9829 INC	HL
0035D8 1C      9830 INC	E
0035D9 18      9831 JR	LINE1S
0035DA F7 
               9832 ;
0035DB CD      9833 XTRACT:         CALL	NXT
0035DC 0B 
0035DD 45 
0035DE FE      9834 CP	'"'
0035DF 22 
0035E0 FD      9835 INC	IY
0035E1 23 
0035E2 CA      9836 JP	Z,CONS
0035E3 7A 
0035E4 19 
0035E5 FD      9837 DEC	IY
0035E6 2B 
0035E7 11      9838 LD	DE,ACCS
0035E8 00 
0035E9 52 
0035EA FD      9839 XTRAC1:         LD	A,(IY)
0035EB 7E 
0035EC 00 
0035ED 12      9840 LD	(DE),A
0035EE FE      9841 CP	','
0035EF 2C 
0035F0 C8      9842 RET	Z
0035F1 FE      9843 CP	CR
0035F2 0D 
0035F3 C8      9844 RET	Z
0035F4 FD      9845 INC	IY
0035F5 23 
0035F6 1C      9846 INC	E
0035F7 18      9847 JR	XTRAC1
0035F8 F1 
               9848 ;
0035F9 3E      9849 DSRCH:          LD	A,TDATA
0035FA DC 
0035FB 06      9850 SEARCHex:         LD	B,0
0035FC 00 
0035FD 4E      9851 SRCH1:          LD	C,(HL)
0035FE 0C      9852 INC	C
0035FF 0D      9853 DEC	C
003600 28      9854 JR	Z,SRCH2		;FAIL
003601 0C 
003602 23      9855 INC	HL
003603 23      9856 INC	HL
003604 23      9857 INC	HL
003605 BE      9858 CP	(HL)
003606 C8      9859 RET	Z
003607 0D      9860 DEC	C
003608 0D      9861 DEC	C
003609 0D      9862 DEC	C
00360A 09      9863 ADD	HL,BC
00360B C3      9864 JP	SRCH1
00360C FD 
00360D 35 
00360E 2B      9865 SRCH2:          DEC	HL		;POINT TO CR
00360F 37      9866 SCF
003610 C9      9867 RET
               9868 ;
               9869 ; NSCAN - scan for token at start of line, with nesting of inner structures
               9870 ; Alternative entry at NSCAN1 with L = level (used by CASE)
               9871 ;
               9872 ;   Inputs: B = token to find (1, start of line)
               9873 ;           C = token to find (2, start of line)
               9874 ;           E = token to nest (end of line)
               9875 ;           D = token to unnest (start of line)
               9876 ;           IY = start search area (line length byte)
               9877 ;  Outputs: NZ if not found
               9878 ;           Z if found, IY points to byte after token
               9879 ; Destroys: A,B,C,L,IY,F
               9880 ;
003611 2E      9881 NSCAN:          LD	L,0		;nest level
003612 00 
003613 FD      9882 NSCAN1:         LD	A,(IY)		;get line length
003614 7E 
003615 00 
003616 B7      9883 OR	A		;test zero = end of prog
003617 28      9884 JR	Z,NSCAN6
003618 34 
003619 FD      9885 LD	A,(IY+3)	;initial token
00361A 7E 
00361B 03 
00361C B8      9886 CP	B		;test value reqd
00361D 28      9887 JR	Z,NSCAN3	;found (1)
00361E 1D 
00361F B9      9888 CP	C
003620 28      9889 JR	Z,NSCAN3	;found (2)
003621 1A 
003622 BA      9890 NSCAN7:         CP	D		;unnest?
003623 28      9891 JR	Z,NSCAN5
003624 22 
003625 C5      9892 NSCAN2:         PUSH	BC
003626 06      9893 LD	B,0
003627 00 
003628 FD      9894 LD	C,(IY)
003629 4E 
00362A 00 
00362B FD      9895 ADD	IY,BC		;go to next line
00362C 09 
00362D FD      9896 LD	A,(IY-2)
00362E 7E 
00362F FE 
003630 BB      9897 CP	E		;nest?
003631 79      9898 LD	A,C
003632 C1      9899 POP	BC
003633 20      9900 JR	NZ,NSCAN1	;continue
003634 DE 
003635 FE      9901 CP	5		;empty line ?
003636 05 
003637 38      9902 JR	C,NSCAN1	;continue
003638 DA 
003639 2C      9903 INC	L		;increment nest level
00363A 18      9904 JR	NSCAN1		;continue
00363B D7 
               9905 ;
00363C 2C      9906 NSCAN3:         INC	L
00363D 2D      9907 DEC	L
00363E 20      9908 JR	NZ,NSCAN7
00363F E2 
003640 01      9909 NSCAN4:         LD	BC,4
003641 04 
003642 00 
003643 FD      9910 ADD	IY,BC
003644 09 
003645 AF      9911 XOR	A		;Z
003646 C9      9912 RET
               9913 ;
003647 2D      9914 NSCAN5:         DEC	L		;decrement nest level
003648 F2      9915 JP	P,NSCAN2
003649 25 
00364A 36 
00364B 18      9916 JR	NSCAN4
00364C F3 
               9917 ;
00364D F6      9918 NSCAN6:         OR	1		;NZ
00364E 01 
00364F C9      9919 RET
               9920 ;
               9921 ; WSRCH - search for token, with nesting of inner structures
               9922 ;
               9923 ;   Inputs: B = token to find or unnest (anywhere)
               9924 ;           C = token to nest (anywhere), ignore after EXITex
               9925 ;           D = ordinal (1 = find first token, 2 = second)
               9926 ;           IY = address to start looking
               9927 ;  Outputs: IY points to byte after that found
               9928 ;           if not found abort to END
               9929 ; Destroys: A,D,IY,F
               9930 ;
003650 FD      9931 WSRCH:          LD	A,(IY)
003651 7E 
003652 00 
003653 FD      9932 INC	IY
003654 23 
003655 FE      9933 CP	'"'
003656 22 
003657 CC      9934 CALL	Z,QUOTE
003658 99 
003659 36 
00365A FE      9935 CP	TREM
00365B F4 
00365C 28      9936 JR	Z,WSRCHM
00365D 22 
00365E FE      9937 CP	TEXIT
00365F 10 
003660 28      9938 JR	Z,WSRCHE
003661 30 
003662 B8      9939 CP	B
003663 28      9940 JR	Z,WSRCHX
003664 29 
003665 B9      9941 CP	C
003666 28      9942 JR	Z,WSRCHP
003667 23 
003668 FE      9943 CP	CR
003669 0D 
00366A 20      9944 JR	NZ,WSRCH
00366B E4 
00366C FD      9945 WSRCH1:         LD	A,(IY)			;Line length
00366D 7E 
00366E 00 
00366F FD      9946 INC	IY
003670 23 
003671 B7      9947 OR	A
003672 CA      9948 JP	Z,END
003673 D3 
003674 24 
003675 FD      9949 INC	IY
003676 23 
003677 FD      9950 INC	IY			;Skip line number
003678 23 
003679 FD      9951 LD	A,(IY)
00367A 7E 
00367B 00 
00367C FE      9952 CP	TDATA
00367D DC 
00367E 20      9953 JR	NZ,WSRCH
00367F D0 
003680 FD      9954 WSRCHM:         LD	A,(IY)
003681 7E 
003682 00 
003683 FD      9955 INC	IY
003684 23 
003685 FE      9956 CP	CR
003686 0D 
003687 20      9957 JR	NZ,WSRCHM		;Skip to end of line
003688 F7 
003689 18      9958 JR	WSRCH1
00368A E1 
               9959 ;
00368B 14      9960 WSRCHP:         INC	D
00368C 18      9961 JR	WSRCH
00368D C2 
               9962 ;
00368E 15      9963 WSRCHX:         DEC	D
00368F 20      9964 JR	NZ,WSRCH
003690 BF 
003691 C9      9965 RET
               9966 ;
003692 CD      9967 WSRCHE:         CALL	NXT
003693 0B 
003694 45 
003695 FD      9968 INC	IY
003696 23 
003697 18      9969 JR	WSRCH
003698 B7 
               9970 ;
               9971 ; QUOTE - skip quoted string
               9972 ;
003699 FD      9973 QUOTE:          LD	A,(IY)
00369A 7E 
00369B 00 
00369C FD      9974 INC	IY
00369D 23 
00369E FE      9975 CP	CR
00369F 0D 
0036A0 CA      9976 JP	Z,MISQUO
0036A1 A8 
0036A2 36 
0036A3 FE      9977 CP	'"'
0036A4 22 
0036A5 20      9978 JR	NZ,QUOTE
0036A6 F2 
0036A7 C9      9979 RET
               9980 ;
0036A8 3E      9981 MISQUO:         LD	A,9
0036A9 09 
0036AA C3      9982 JP	ERROR_		;"Missing quote"
0036AB 44 
0036AC 3F 
               9983 ;
               9984 ; X14OR5 - multiply by 1, 4 or 5
               9985 ;   Inputs: DE = number to be multiplied
               9986 ;           A = 1, 4 or 5 (else multiply by 4)
               9987 ;  Outputs: DE = DE * A
               9988 ;           Carry set if overflow
               9989 ; Destroys: D,E,H,L,F
               9990 ;
0036AD 62      9991 X14OR5:         LD	H,D
0036AE 6B      9992 LD	L,E
0036AF FE      9993 CP	1
0036B0 01 
0036B1 C8      9994 RET	Z
0036B2 FE      9995 CP	5
0036B3 05 
0036B4 29      9996 ADD	HL,HL
0036B5 D8      9997 RET	C
0036B6 29      9998 ADD	HL,HL
0036B7 D8      9999 RET	C
0036B8 EB     10000 EX	DE,HL
0036B9 C0     10001 RET	NZ
0036BA 19     10002 ADD	HL,DE
0036BB EB     10003 EX	DE,HL
0036BC C9     10004 RET
              10005 ;
              10006 ; MUL16 - 16-bit multiply
              10007 ;   Inputs: HL = number to be multiplied
              10008 ;           BC = multiplier
              10009 ;  Outputs: HL = HL * BC
              10010 ;           Carry set if overflow
              10011 ; Destroys: A,D,E,H,L,F
              10012 ;
0036BD EB     10013 MUL16:          EX	DE,HL
0036BE 21     10014 LD	HL,0
0036BF 00 
0036C0 00 
0036C1 3E     10015 LD	A,16
0036C2 10 
0036C3 29     10016 MUL161:         ADD	HL,HL
0036C4 D8     10017 RET	C		;OVERFLOW
0036C5 CB     10018 SLA	E
0036C6 23 
0036C7 CB     10019 RL	D
0036C8 12 
0036C9 30     10020 JR	NC,MUL162
0036CA 02 
0036CB 09     10021 ADD	HL,BC
0036CC D8     10022 RET	C
0036CD 3D     10023 MUL162:         DEC	A
0036CE 20     10024 JR	NZ,MUL161
0036CF F3 
0036D0 C9     10025 RET
              10026 ;
0036D1 CD     10027 CHANEL:         CALL	NXT
0036D2 0B 
0036D3 45 
0036D4 FE     10028 CP	'#'
0036D5 23 
0036D6 3E     10029 LD	A,45
0036D7 2D 
0036D8 C2     10030 JP	NZ,ERROR_	;"Missing #"
0036D9 44 
0036DA 3F 
0036DB FD     10031 CHNL:           INC	IY		;SKIP '#'
0036DC 23 
0036DD CD     10032 CALL	ITEMI
0036DE 60 
0036DF 18 
0036E0 D9     10033 EXX
0036E1 EB     10034 EX	DE,HL
0036E2 C9     10035 RET
              10036 ;
              10037 ; FREESA - Free members of a string array if adjacent to the top of heap
              10038 ;   Inputs: BC = length of array (= 4 * number of elements)
              10039 ;           HL addresses array first byte *above* array
              10040 ;  Outputs: NZ if any array element freed, Z if none
              10041 ; Destroys: nothing
              10042 ;
0036E3 F5     10043 FREESA:         PUSH	AF
0036E4 C5     10044 FREES0:         PUSH	BC
0036E5 D5     10045 PUSH	DE
0036E6 E5     10046 PUSH	HL
0036E7 AF     10047 XOR	A
0036E8 50     10048 LD	D,B
0036E9 59     10049 LD	E,C
0036EA 47     10050 LD	B,A
0036EB D5     10051 FREES1:         PUSH	DE
0036EC 2B     10052 DEC	HL
0036ED 56     10053 LD	D,(HL)
0036EE 2B     10054 DEC	HL
0036EF 5E     10055 LD	E,(HL)
0036F0 2B     10056 DEC	HL
0036F1 4E     10057 LD	C,(HL)
0036F2 2B     10058 DEC	HL
0036F3 E5     10059 PUSH	HL
0036F4 2A     10060 LD	HL,(FREE)
0036F5 E0 
0036F6 54 
0036F7 EB     10061 EX	DE,HL
0036F8 09     10062 ADD	HL,BC
0036F9 ED     10063 SBC	HL,DE
0036FA 52 
0036FB 20     10064 JR	NZ,FREES2
0036FC 07 
0036FD 19     10065 ADD	HL,DE
0036FE ED     10066 SBC	HL,BC
0036FF 42 
003700 22     10067 LD	(FREE),HL
003701 E0 
003702 54 
003703 B4     10068 OR	H
003704 D1     10069 FREES2:         POP	DE
003705 E1     10070 POP	HL
003706 0E     10071 LD	C,4
003707 04 
003708 B7     10072 OR	A
003709 ED     10073 SBC	HL,BC
00370A 42 
00370B EB     10074 EX	DE,HL
00370C 20     10075 JR	NZ,FREES1
00370D DD 
00370E B7     10076 OR	A
00370F E1     10077 POP	HL
003710 D1     10078 POP	DE
003711 C1     10079 POP	BC
003712 B7     10080 OR	A
003713 20     10081 JR	NZ,FREES0
003714 CF 
003715 F1     10082 POP	AF
003716 C9     10083 RET
              10084 ;
              10085 ;                END
              10086 ; --- End exec.asm ---
              10087 
              10088 ; --- Begin main.asm ---
              10089 ;
              10090 ;Automatically created from original source on 2024-12-15 15:29:12
              10091 ;
              10092 .ASSUME ADL = 0
              10093 ;	.ORG 0x0000
              10094 ;                SEGMENT CODE
              10095 ;
              10096 ;                XDEF	NEWIT
              10097 ;                XDEF	BAD
              10098 ;                XDEF	CLEAN
              10099 ;                XDEF	LINNUM
              10100 ;                XDEF	ERROR_
              10101 ;                XDEF	GETTOP
              10102 ;                XDEF	DEL
              10103 ;                XDEF	LISTIT
              10104 ;
              10105 ;BBC BASIC INTERPRETER - Z80 VERSION
              10106 ;COMMANDS AND COMMON MODULE - "MAIN"
              10107 ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
              10108 ;
              10109 ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
              10110 ;OF THE BRITISH BROADCASTING CORPORATION AND IS
              10111 ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
              10112 ;
              10113 ;VERSION 2.3, 07-05-1984
              10114 ;VERSION 3.0, 01-03-1987
              10115 ;VERSION 5.0, 31-05-2024
              10116 ;VERSION 5.1, 10-08-2024
              10117 ;
              10118 ;                XREF	XEQ
              10119 ;                XREF	RUN0
              10120 ;                XREF	CHAIN0
              10121 ;                XREF	TERMQ
              10122 ;                XREF	MUL16
              10123 ;                XREF	X14OR5
              10124 ;                XREF	SPACES
              10125 ;                XREF	ESCAPE
              10126 ;                XREF	CHECK
              10127 ;                XREF	SEARCH
              10128 ;
              10129 ;                XREF	OSWRCH
              10130 ;                XREF	OSLINE
              10131 ;                XREF	OSINIT
              10132 ;                XREF	OSLOAD
              10133 ;                XREF	OSSAVE
              10134 ;                XREF	OSBGET
              10135 ;                XREF	OSBPUT
              10136 ;                XREF	OSSHUT
              10137 ;                XREF	OSSTAT
              10138 ;                XREF	PROMPT
              10139 ;                XREF	LTRAP
              10140 ;                XREF	OSCLI
              10141 ;                XREF	RESET
              10142 ;
              10143 ;                XREF	COMMA
              10144 ;                XREF	BRAKET
              10145 ;                XREF	ZERO
              10146 ;                XREF	ITEMI
              10147 ;                XREF	EXPRI
              10148 ;                XREF	EXPRS
              10149 ;                XREF	DECODE
              10150 ;                XREF	LOADN
              10151 ;                XREF	SFIX
              10152 ;
              10153 ;                XDEF	NXT
              10154 ;                XDEF	NLIST
              10155 ;                XDEF	START
              10156 ;                XDEF	OUTCHR
              10157 ;                XDEF	OUT
              10158 ;                XDEF	ERROR_
              10159 ;                XDEF	EXTERR
              10160 ;                XDEF	REPORT
              10161 ;                XDEF	CLOOP
              10162 ;                XDEF	WARM
              10163 ;                XDEF	CLEAR
              10164 ;                XDEF	CRLF
              10165 ;                XDEF	SAYLN
              10166 ;                XDEF	LOAD0
              10167 ;                XDEF	TELL
              10168 ;                XDEF	FINDL
              10169 ;                XDEF	GETTOP
              10170 ;                XDEF	SETLIN
              10171 ;                XDEF	GETVAR
              10172 ;                XDEF	PUTVAR
              10173 ;                XDEF	GETDEF
              10174 ;                XDEF	LOCATE
              10175 ;                XDEF	CREATE
              10176 ;                XDEF	PBCDL
              10177 ;                XDEF	LEXAN2
              10178 ;                XDEF	RANGE
              10179 ;                XDEF	VERMSG
              10180 ;                XDEF	KEYWDS
              10181 ;                XDEF	KEYWDL
              10182 ;
              10183 ;                XREF	PAGE_
              10184 ;                XREF	ACCS
              10185 ;                XREF	BUFFER
              10186 ;                XREF	LOMEM
              10187 ;                XREF	HIMEM
              10188 ;                XREF	COUNT
              10189 ;                XREF	WIDTH
              10190 ;                XREF	FREE
              10191 ;                XREF	STAVAR
              10192 ;                XREF	DYNVAR
              10193 ;                XREF	ERRTXT
              10194 ;                XREF	ERR
              10195 ;                XREF	ERL
              10196 ;                XREF	CURLIN
              10197 ;                XREF	ERRTRP
              10198 ;                XREF	ONERSP
              10199 ;                XREF	FNPTR
              10200 ;                XREF	PROPTR
              10201 ;                XREF	AUTONO
              10202 ;                XREF	INCREM
              10203 ;                XREF	LISTON
              10204 ;                XREF	TRACEN
              10205 ;
              10206 ; CR             EQU	0DH
              10207 ; LF             EQU	0AH
              10208 ; ESC            EQU	1BH
              10209 ;
              10210 TERROR:         EQU	85H
              10211 TLINE:          EQU	86H
              10212 TELSE:          EQU	8BH
              10213 TTHEN:          EQU	8CH
              10214 TLINO:          EQU	8DH
              10215 TFN:            EQU	0A4H
              10216 TTO:            EQU	0B8H
              10217 TWHILE:         EQU	0C7H
              10218 TCASE:          EQU	0C8H
              10219 TWHEN:          EQU	0C9H
              10220 TOF:            EQU	0CAH
              10221 TENDCASE:       EQU	0CBH
              10222 TOTHERWISE:     EQU	0CCH
              10223 TENDIF:         EQU	0CDH
              10224 TENDWHILE:      EQU	0CEH
              10225 TDATA:          EQU	0DCH
              10226 TDIM:           EQU	0DEH
              10227 TFOR:           EQU	0E3H
              10228 TGOSUB:         EQU	0E4H
              10229 TGOTO:          EQU	0E5H
              10230 TIF:            EQU	0E7H
              10231 TLOCAL:         EQU	0EAH
              10232 TNEXT:          EQU	0EDH
              10233 TON:            EQU	0EEH
              10234 TPROC:          EQU	0F2H
              10235 TREM:           EQU	0F4H
              10236 TREPEAT:        EQU	0F5H
              10237 TRESTORE:       EQU	0F7H
              10238 TTRACE:         EQU	0FCH
              10239 TUNTIL:         EQU	0FDH
              10240 TEXIT:          EQU	10H
              10241 ;
              10242 TOKLO:          EQU	8FH
              10243 TOKHI:          EQU	93H
              10244 OFFSET:         EQU	0CFH-TOKLO
              10245 ;
003717 C3     10246 START:          JP	COLD
003718 41 
003719 37 
00371A C3     10247 JP	WARM
00371B AF 
00371C 37 
00371D C3     10248 JP	ESCAPE
00371E E3 
00371F 25 
003720 C3     10249 JP	EXTERR
003721 55 
003722 3F 
003723 C3     10250 JP	TELL
003724 FA 
003725 44 
003726 C3     10251 JP	TEXT_
003727 E8 
003728 44 
003729 C3     10252 JP	ITEMI
00372A 60 
00372B 18 
00372C C3     10253 JP	EXPRI
00372D 33 
00372E 18 
00372F C3     10254 JP	EXPRS
003730 3C 
003731 18 
003732 C3     10255 JP	OSCLI
003733 97 
003734 15 
003735 C3     10256 JP	OSBGET
003736 3F 
003737 12 
003738 C3     10257 JP	OSBPUT
003739 47 
00373A 12 
00373B C3     10258 JP	OSSTAT
00373C 50 
00373D 12 
00373E C3     10259 JP	OSSHUT
00373F 37 
003740 12 
003741 21     10260 COLD:           LD	HL,STAVAR	;COLD START
003742 00 
003743 54 
003744 F9     10261 LD	SP,HL
003745 36     10262 LD	(HL),10
003746 0A 
003747 2C     10263 INC	L
003748 36     10264 LD	(HL),9
003749 09 
00374A 2C     10265 INC	L
00374B AF     10266 XOR	A
00374C 77     10267 PURGE:          LD	(HL),A		;CLEAR SCRATCHPAD
00374D 2C     10268 INC	L
00374E 20     10269 JR	NZ,PURGE
00374F FC 
003750 3E     10270 LD	A,37H		;V3.0
003751 37 
003752 32     10271 LD	(LISTON),A
003753 FE 
003754 54 
003755 21     10272 LD	HL,NOTICE
003756 8E 
003757 37 
003758 22     10273 LD	(ERRTXT),HL
003759 EE 
00375A 54 
00375B CD     10274 CALL	OSINIT
00375C 84 
00375D 11 
00375E ED     10275 LD	(HIMEM),DE
00375F 53 
003760 E2 
003761 54 
003762 22     10276 LD	(PAGE_),HL
003763 DC 
003764 54 
003765 CD     10277 CALL	NEWIT
003766 3E 
003767 40 
003768 C2     10278 JP	NZ,CHAIN0	;AUTO-RUN
003769 52 
00376A 24 
00376B CD     10279 CALL	TELL
00376C FA 
00376D 44 
00376E 42     10280 VERMSG:         DB	"BBC BASIC (Z80) Version 5.00  "
00376F 42 
003770 43 
003771 20 
003771 42   
003772 41 
003773 53 
003774 49 
003774 43   
003775 20 
003776 28 
003777 5A 
003777 38   
003778 30 
003779 29 
00377A 20 
00377A 56   
00377B 65 
00377C 72 
00377D 73 
00377D 69   
00377E 6F 
00377F 6E 
003780 20 
003780 35   
003781 2E 
003782 30 
003783 30 
003783 20   
003784 20 
00378C 0D     10281 DB	CR
00378D 0A     10282 DB	LF
00378E 28     10283 NOTICE:         DB	"(C) Copyright R.T.Russell 2024"
00378F 43 
003790 29 
003791 20 
003791 43   
003792 6F 
003793 70 
003794 79 
003794 72   
003795 69 
003796 67 
003797 68 
003797 74   
003798 20 
003799 52 
00379A 2E 
00379A 54   
00379B 2E 
00379C 52 
00379D 75 
00379D 73   
00379E 73 
00379F 65 
0037A0 6C 
0037A0 6C   
0037A1 20 
0037A2 32 
0037A3 30 
0037A3 32   
0037A4 34 
0037AC 0D     10284 DB	CR
0037AD 0A     10285 DB	LF
0037AE 00     10286 DB	0
0037AF F6     10287 WARM:           DB	0F6H
0037B0 37     10288 CLOOP:          SCF
0037B1 ED     10289 LD	SP,(HIMEM)
0037B2 7B 
0037B3 E2 
0037B4 54 
0037B5 CD     10290 CALL	PROMPT		;PROMPT USER
0037B6 93 
0037B7 11 
0037B8 21     10291 LD	HL,LISTON
0037B9 FE 
0037BA 54 
0037BB 7E     10292 LD	A,(HL)
0037BC E6     10293 AND	0FH		;LISTO
0037BD 0F 
0037BE F6     10294 OR	30H		;OPT 3
0037BF 30 
0037C0 77     10295 LD	(HL),A
0037C1 ED     10296 SBC	HL,HL		;HL <- 0 (V3.0)
0037C2 62 
0037C3 22     10297 LD	(ERRTRP),HL
0037C4 EA 
0037C5 54 
0037C6 22     10298 LD	(ONERSP),HL
0037C7 EC 
0037C8 54 
0037C9 22     10299 LD	(CURLIN),HL	;For CMOS EDIT->LIST
0037CA F4 
0037CB 54 
0037CC 2A     10300 LD	HL,(AUTONO)
0037CD E8 
0037CE 54 
0037CF E5     10301 PUSH	HL
0037D0 7C     10302 LD	A,H
0037D1 B5     10303 OR	L
0037D2 28     10304 JR	Z,NOAUTO
0037D3 17 
0037D4 E5     10305 PUSH	HL
0037D5 CD     10306 CALL	PBCD		;AUTO NUMBER
0037D6 96 
0037D7 41 
0037D8 E1     10307 POP	HL
0037D9 ED     10308 LD	BC,(INCREM)
0037DA 4B 
0037DB FF 
0037DC 54 
0037DD 06     10309 LD	B,0
0037DE 00 
0037DF 09     10310 ADD	HL,BC
0037E0 DA     10311 JP	C,TOOBIGmn
0037E1 AF 
0037E2 43 
0037E3 22     10312 LD	(AUTONO),HL
0037E4 E8 
0037E5 54 
0037E6 3E     10313 LD	A,' '
0037E7 20 
0037E8 CD     10314 CALL	OUTCHR
0037E9 02 
0037EA 41 
0037EB 21     10315 NOAUTO:         LD	HL,ACCS
0037EC 00 
0037ED 52 
0037EE CD     10316 CALL	OSLINE		;GET CONSOLE INPUT
0037EF CB 
0037F0 11 
0037F1 AF     10317 XOR	A
0037F2 32     10318 LD	(COUNT),A
0037F3 FB 
0037F4 54 
0037F5 FD     10319 LD	IY,ACCS
0037F6 21 
0037F7 00 
0037F8 52 
0037F9 21     10320 LD	HL,COMNDS
0037FA E1 
0037FB 3B 
0037FC CD     10321 CALL	LEX0
0037FD A6 
0037FE 3F 
0037FF E1     10322 POP	HL
003800 20     10323 JR	NZ,NOTCMD
003801 19 
003802 87     10324 ADD	A,A
003803 4F     10325 LD	C,A
003804 7C     10326 LD	A,H
003805 B5     10327 OR	L
003806 20     10328 JR	NZ,INAUTO
003807 0F 
003808 47     10329 LD	B,A
003809 21     10330 LD	HL,CMDTABmn
00380A 11 
00380B 3C 
00380C 09     10331 ADD	HL,BC
00380D 7E     10332 LD	A,(HL)		;TABLE ENTRY
00380E 23     10333 INC	HL
00380F 66     10334 LD	H,(HL)
003810 6F     10335 LD	L,A
003811 FD     10336 INC	IY
003812 23 
003813 CD     10337 CALL	NXT
003814 0B 
003815 45 
003816 E9     10338 JP	(HL)		;EXECUTE COMMAND
              10339 ;
003817 FD     10340 INAUTO:         LD	IY,ACCS
003818 21 
003819 00 
00381A 52 
00381B 7C     10341 NOTCMD:         LD	A,H
00381C B5     10342 OR	L
00381D CC     10343 CALL	Z,LINNUM
00381E 8A 
00381F 43 
003820 CD     10344 CALL	NXT
003821 0B 
003822 45 
003823 11     10345 LD	DE,BUFFER
003824 00 
003825 53 
003826 0E     10346 LD	C,1		;LEFT MODE
003827 01 
003828 E5     10347 PUSH	HL
003829 CD     10348 CALL	LEXAN2		;LEXICAL ANALYSIS
00382A 18 
00382B 44 
00382C E1     10349 POP	HL
00382D 12     10350 LD	(DE),A		;TERMINATOR
00382E AF     10351 XOR	A
00382F 47     10352 LD	B,A
003830 4B     10353 LD	C,E		;BC=LINE LENGTH
003831 13     10354 INC	DE
003832 12     10355 LD	(DE),A		;ZERO NEXT
003833 7C     10356 LD	A,H
003834 B5     10357 OR	L
003835 FD     10358 LD	IY,BUFFER	;FOR XEQ
003836 21 
003837 00 
003838 53 
003839 CA     10359 JP	Z,XEQ		;DIRECT MODE
00383A 99 
00383B 24 
00383C C5     10360 PUSH	BC
00383D CD     10361 CALL	FINDL
00383E 43 
00383F 41 
003840 CC     10362 CALL	Z,DEL
003841 E9 
003842 3F 
003843 C1     10363 POP	BC
003844 79     10364 LD	A,C
003845 B7     10365 OR	A
003846 28     10366 JR	Z,CLOOP2	;DELETE LINE ONLY
003847 39 
003848 C6     10367 ADD	A,4
003849 04 
00384A 4F     10368 LD	C,A		;LENGTH INCLUSIVE
00384B D5     10369 PUSH	DE		;LINE NUMBER
00384C C5     10370 PUSH	BC		;SAVE LINE LENGTH
00384D EB     10371 EX	DE,HL
00384E C5     10372 PUSH	BC
00384F CD     10373 CALL	GETTOP
003850 25 
003851 40 
003852 C1     10374 POP	BC
003853 E5     10375 PUSH	HL
003854 09     10376 ADD	HL,BC
003855 E5     10377 PUSH	HL
003856 24     10378 INC	H
003857 AF     10379 XOR	A
003858 ED     10380 SBC	HL,SP
003859 72 
00385A E1     10381 POP	HL
00385B D2     10382 JP	NC,ERROR_	;"No room"
00385C 44 
00385D 3F 
00385E E3     10383 EX	(SP),HL
00385F E5     10384 PUSH	HL
003860 23     10385 INC	HL
003861 B7     10386 OR	A
003862 ED     10387 SBC	HL,DE
003863 52 
003864 44     10388 LD	B,H		;BC=AMOUNT TO MOVE
003865 4D     10389 LD	C,L
003866 E1     10390 POP	HL
003867 D1     10391 POP	DE
003868 28     10392 JR	Z,ATEND
003869 02 
00386A ED     10393 LDDR			;MAKE SPACE
00386B B8 
00386C C1     10394 ATEND:          POP	BC		;LINE LENGTH
00386D D1     10395 POP	DE		;LINE NUMBER
00386E 23     10396 INC	HL
00386F 71     10397 LD	(HL),C		;STORE LENGTH
003870 23     10398 INC	HL
003871 73     10399 LD	(HL),E		;STORE LINE NUMBER
003872 23     10400 INC	HL
003873 72     10401 LD	(HL),D
003874 23     10402 INC	HL
003875 11     10403 LD	DE,BUFFER
003876 00 
003877 53 
003878 EB     10404 EX	DE,HL
003879 0D     10405 DEC	C
00387A 0D     10406 DEC	C
00387B 0D     10407 DEC	C
00387C ED     10408 LDIR			;ADD LINE
00387D B0 
00387E CD     10409 CALL	CLEAN
00387F 1A 
003880 40 
003881 C3     10410 CLOOP2:         JP	CLOOP
003882 B0 
003883 37 
              10411 ;
              10412 ;LIST OF TOKENS AND KEYWORDS.
              10413 ;IF A KEYWORD IS FOLLOWED BY NUL THEN IT WILL
              10414 ; ONLY MATCH WITH THE WORD FOLLOWED IMMEDIATELY
              10415 ; BY A DELIMITER.
              10416 ;
003884 80     10417 KEYWDS:         DB	80H
003885 41     10418 DB	"AND"
003886 4E 
003887 44 
003888 94     10419 DB	94H
003889 41     10420 DB	"ABS"
00388A 42 
00388B 53 
00388C 95     10421 DB	95H
00388D 41     10422 DB	"ACS"
00388E 43 
00388F 53 
003890 96     10423 DB	96H
003891 41     10424 DB	"ADVAL"
003892 44 
003893 56 
003894 41 
003894 4C   
003896 97     10425 DB	97H
003897 41     10426 DB	"ASC"
003898 53 
003899 43 
00389A 98     10427 DB	98H
00389B 41     10428 DB	"ASN"
00389C 53 
00389D 4E 
00389E 99     10429 DB	99H
00389F 41     10430 DB	"ATN"
0038A0 54 
0038A1 4E 
0038A2 9A     10431 DB	9AH
0038A3 42     10432 DB	"BGET "
0038A4 47 
0038A5 45 
0038A6 54 
0038A6 20   
0038A8 D5     10433 DB	0D5H
0038A9 42     10434 DB	"BPUT "
0038AA 50 
0038AB 55 
0038AC 54 
0038AC 20   
0038AE 0F     10435 DB	0FH
0038AF 42     10436 DB	"BY "		; v5
0038B0 59 
0038B1 20 
0038B2 FB     10437 DB	0FBH
0038B3 43     10438 DB	"COLOUR"
0038B4 4F 
0038B5 4C 
0038B6 4F 
0038B6 55   
0038B7 52 
0038B9 FB     10439 DB	0FBH
0038BA 43     10440 DB	"COLOR"
0038BB 4F 
0038BC 4C 
0038BD 4F 
0038BD 52   
0038BF D6     10441 DB	0D6H
0038C0 43     10442 DB	"CALL"
0038C1 41 
0038C2 4C 
0038C3 4C 
0038C4 C8     10443 DB	0C8H
0038C5 43     10444 DB	"CASE"		; v5
0038C6 41 
0038C7 53 
0038C8 45 
0038C9 D7     10445 DB	0D7H
0038CA 43     10446 DB	"CHAIN"
0038CB 48 
0038CC 41 
0038CD 49 
0038CD 4E   
0038CF BD     10447 DB	0BDH
0038D0 43     10448 DB	"CHR$"
0038D1 48 
0038D2 52 
0038D3 24 
0038D4 D8     10449 DB	0D8H
0038D5 43     10450 DB	"CLEAR "
0038D6 4C 
0038D7 45 
0038D8 41 
0038D8 52   
0038D9 20 
0038DB D9     10451 DB	0D9H
0038DC 43     10452 DB	"CLOSE "
0038DD 4C 
0038DE 4F 
0038DF 53 
0038DF 45   
0038E0 20 
0038E2 DA     10453 DB	0DAH
0038E3 43     10454 DB	"CLG "
0038E4 4C 
0038E5 47 
0038E6 20 
0038E7 DB     10455 DB	0DBH
0038E8 43     10456 DB	"CLS "
0038E9 4C 
0038EA 53 
0038EB 20 
0038EC 9B     10457 DB	9BH
0038ED 43     10458 DB	"COS"
0038EE 4F 
0038EF 53 
0038F0 9C     10459 DB	9CH
0038F1 43     10460 DB	"COUNT "
0038F2 4F 
0038F3 55 
0038F4 4E 
0038F4 54   
0038F5 20 
0038F7 01     10461 DB	01H
0038F8 43     10462 DB	"CIRCLE"	; v5
0038F9 49 
0038FA 52 
0038FB 43 
0038FB 4C   
0038FC 45 
0038FE DC     10463 DB	0DCH
0038FF 44     10464 DB	"DATA"
003900 41 
003901 54 
003902 41 
003903 9D     10465 DB	9DH
003904 44     10466 DB	"DEG"
003905 45 
003906 47 
003907 DD     10467 DB	0DDH
003908 44     10468 DB	"DEF"
003909 45 
00390A 46 
00390B 81     10469 DB	81H
00390C 44     10470 DB	"DIV"
00390D 49 
00390E 56 
00390F DE     10471 DB	0DEH
003910 44     10472 DB	"DIM"
003911 49 
003912 4D 
003913 DF     10473 DB	0DFH
003914 44     10474 DB	"DRAW"
003915 52 
003916 41 
003917 57 
003918 E1     10475 DB	0E1H
003919 45     10476 DB	"ENDPROC "
00391A 4E 
00391B 44 
00391C 50 
00391C 52   
00391D 4F 
00391E 43 
00391F 20 
003921 CE     10477 DB	0CEH
003922 45     10478 DB	"ENDWHILE "	; v5
003923 4E 
003924 44 
003925 57 
003925 48   
003926 49 
003927 4C 
003928 45 
003928 20   
00392B CB     10479 DB	0CBH
00392C 45     10480 DB	"ENDCASE "	; v5
00392D 4E 
00392E 44 
00392F 43 
00392F 41   
003930 53 
003931 45 
003932 20 
003934 CD     10481 DB	0CDH
003935 45     10482 DB	"ENDIF "	; v5
003936 4E 
003937 44 
003938 49 
003938 46   
003939 20 
00393B E0     10483 DB	0E0H
00393C 45     10484 DB	"END "
00393D 4E 
00393E 44 
00393F 20 
003940 E2     10485 DB	0E2H
003941 45     10486 DB	"ENVELOPE"
003942 4E 
003943 56 
003944 45 
003944 4C   
003945 4F 
003946 50 
003947 45 
003949 8B     10487 DB	8BH
00394A 45     10488 DB	"ELSE"
00394B 4C 
00394C 53 
00394D 45 
00394E A0     10489 DB	0A0H
00394F 45     10490 DB	"EVAL"
003950 56 
003951 41 
003952 4C 
003953 9E     10491 DB	9EH
003954 45     10492 DB	"ERL "
003955 52 
003956 4C 
003957 20 
003958 85     10493 DB	85H
003959 45     10494 DB	"ERROR"
00395A 52 
00395B 52 
00395C 4F 
00395C 52   
00395E C5     10495 DB	0C5H
00395F 45     10496 DB	"EOF "
003960 4F 
003961 46 
003962 20 
003963 82     10497 DB	82H
003964 45     10498 DB	"EOR"
003965 4F 
003966 52 
003967 9F     10499 DB	9FH
003968 45     10500 DB	"ERR "
003969 52 
00396A 52 
00396B 20 
00396C 10     10501 DB	10H
00396D 45     10502 DB	"EXIT "		; v5
00396E 58 
00396F 49 
003970 54 
003970 20   
003972 A1     10503 DB	0A1H
003973 45     10504 DB	"EXP"
003974 58 
003975 50 
003976 A2     10505 DB	0A2H
003977 45     10506 DB	"EXT "
003978 58 
003979 54 
00397A 20 
00397B 02     10507 DB	02H
00397C 45     10508 DB	"ELLIPSE"	; v5
00397D 4C 
00397E 4C 
00397F 49 
00397F 50   
003980 53 
003981 45 
003983 E3     10509 DB	0E3H
003984 46     10510 DB	"FOR"
003985 4F 
003986 52 
003987 A3     10511 DB	0A3H
003988 46     10512 DB	"FALSE "
003989 41 
00398A 4C 
00398B 53 
00398B 45   
00398C 20 
00398E 03     10513 DB	03H
00398F 46     10514 DB	"FILL"		; v5
003990 49 
003991 4C 
003992 4C 
003993 A4     10515 DB	0A4H
003994 46     10516 DB	"FN"
003995 4E 
003996 E5     10517 DB	0E5H
003997 47     10518 DB	"GOTO"
003998 4F 
003999 54 
00399A 4F 
00399B BE     10519 DB	0BEH
00399C 47     10520 DB	"GET$"
00399D 45 
00399E 54 
00399F 24 
0039A0 A5     10521 DB	0A5H
0039A1 47     10522 DB	"GET"
0039A2 45 
0039A3 54 
0039A4 E4     10523 DB	0E4H
0039A5 47     10524 DB	"GOSUB"
0039A6 4F 
0039A7 53 
0039A8 55 
0039A8 42   
0039AA E6     10525 DB	0E6H
0039AB 47     10526 DB	"GCOL"
0039AC 43 
0039AD 4F 
0039AE 4C 
0039AF 93     10527 DB	93H
0039B0 48     10528 DB	"HIMEM "
0039B1 49 
0039B2 4D 
0039B3 45 
0039B3 4D   
0039B4 20 
0039B6 E8     10529 DB	0E8H
0039B7 49     10530 DB	"INPUT"
0039B8 4E 
0039B9 50 
0039BA 55 
0039BA 54   
0039BC E7     10531 DB	0E7H
0039BD 49     10532 DB	"IF"
0039BE 46 
0039BF BF     10533 DB	0BFH
0039C0 49     10534 DB	"INKEY$"
0039C1 4E 
0039C2 4B 
0039C3 45 
0039C3 59   
0039C4 24 
0039C6 A6     10535 DB	0A6H
0039C7 49     10536 DB	"INKEY"
0039C8 4E 
0039C9 4B 
0039CA 45 
0039CA 59   
0039CC A8     10537 DB	0A8H
0039CD 49     10538 DB	"INT"
0039CE 4E 
0039CF 54 
0039D0 A7     10539 DB	0A7H
0039D1 49     10540 DB	"INSTR("
0039D2 4E 
0039D3 53 
0039D4 54 
0039D4 52   
0039D5 28 
0039D7 0C     10541 DB	0CH
0039D8 49     10542 DB	"INSTALL"	; v5
0039D9 4E 
0039DA 53 
0039DB 54 
0039DB 41   
0039DC 4C 
0039DD 4C 
0039DF 86     10543 DB	86H
0039E0 4C     10544 DB	"LINE"
0039E1 49 
0039E2 4E 
0039E3 45 
0039E4 92     10545 DB	92H
0039E5 4C     10546 DB	"LOMEM "
0039E6 4F 
0039E7 4D 
0039E8 45 
0039E8 4D   
0039E9 20 
0039EB EA     10547 DB	0EAH
0039EC 4C     10548 DB	"LOCAL"
0039ED 4F 
0039EE 43 
0039EF 41 
0039EF 4C   
0039F1 C0     10549 DB	0C0H
0039F2 4C     10550 DB	"LEFT$("
0039F3 45 
0039F4 46 
0039F5 54 
0039F5 24   
0039F6 28 
0039F8 A9     10551 DB	0A9H
0039F9 4C     10552 DB	"LEN"
0039FA 45 
0039FB 4E 
0039FC E9     10553 DB	0E9H
0039FD 4C     10554 DB	"LET"
0039FE 45 
0039FF 54 
003A00 AB     10555 DB	0ABH
003A01 4C     10556 DB	"LOG"
003A02 4F 
003A03 47 
003A04 AA     10557 DB	0AAH
003A05 4C     10558 DB	"LN"
003A06 4E 
003A07 C1     10559 DB	0C1H
003A08 4D     10560 DB	"MID$("
003A09 49 
003A0A 44 
003A0B 24 
003A0B 28   
003A0D EB     10561 DB	0EBH
003A0E 4D     10562 DB	"MODE"
003A0F 4F 
003A10 44 
003A11 45 
003A12 83     10563 DB	83H
003A13 4D     10564 DB	"MOD"
003A14 4F 
003A15 44 
003A16 EC     10565 DB	0ECH
003A17 4D     10566 DB	"MOVE"
003A18 4F 
003A19 56 
003A1A 45 
003A1B 04     10567 DB	04H
003A1C 4D     10568 DB	"MOUSE"		; v5
003A1D 4F 
003A1E 55 
003A1F 53 
003A1F 45   
003A21 ED     10569 DB	0EDH
003A22 4E     10570 DB	"NEXT"
003A23 45 
003A24 58 
003A25 54 
003A26 AC     10571 DB	0ACH
003A27 4E     10572 DB	"NOT"
003A28 4F 
003A29 54 
003A2A EE     10573 DB	0EEH
003A2B 4F     10574 DB	"ON"
003A2C 4E 
003A2D 87     10575 DB	87H
003A2E 4F     10576 DB	"OFF "
003A2F 46 
003A30 46 
003A31 20 
003A32 CA     10577 DB	0CAH
003A33 4F     10578 DB	"OF "		; v5
003A34 46 
003A35 20 
003A36 05     10579 DB	05H
003A37 4F     10580 DB	"ORIGIN"	; v5
003A38 52 
003A39 49 
003A3A 47 
003A3A 49   
003A3B 4E 
003A3D 84     10581 DB	84H
003A3E 4F     10582 DB	"OR"
003A3F 52 
003A40 8E     10583 DB	8EH
003A41 4F     10584 DB	"OPENIN"
003A42 50 
003A43 45 
003A44 4E 
003A44 49   
003A45 4E 
003A47 AE     10585 DB	0AEH
003A48 4F     10586 DB	"OPENOUT"
003A49 50 
003A4A 45 
003A4B 4E 
003A4B 4F   
003A4C 55 
003A4D 54 
003A4F AD     10587 DB	0ADH
003A50 4F     10588 DB	"OPENUP"
003A51 50 
003A52 45 
003A53 4E 
003A53 55   
003A54 50 
003A56 FF     10589 DB	0FFH
003A57 4F     10590 DB	"OSCLI"
003A58 53 
003A59 43 
003A5A 4C 
003A5A 49   
003A5C CC     10591 DB	0CCH
003A5D 4F     10592 DB	"OTHERWISE"	; v5
003A5E 54 
003A5F 48 
003A60 45 
003A60 52   
003A61 57 
003A62 49 
003A63 53 
003A63 45   
003A66 F1     10593 DB	0F1H
003A67 50     10594 DB	"PRINT"
003A68 52 
003A69 49 
003A6A 4E 
003A6A 54   
003A6C 90     10595 DB	90H
003A6D 50     10596 DB	"PAGE "
003A6E 41 
003A6F 47 
003A70 45 
003A70 20   
003A72 8F     10597 DB	8FH
003A73 50     10598 DB	"PTR "
003A74 54 
003A75 52 
003A76 20 
003A77 AF     10599 DB	0AFH
003A78 50     10600 DB	"PI "
003A79 49 
003A7A 20 
003A7B F0     10601 DB	0F0H
003A7C 50     10602 DB	"PLOT"
003A7D 4C 
003A7E 4F 
003A7F 54 
003A80 B0     10603 DB	0B0H
003A81 50     10604 DB	"POINT("
003A82 4F 
003A83 49 
003A84 4E 
003A84 54   
003A85 28 
003A87 F2     10605 DB	0F2H
003A88 50     10606 DB	"PROC"
003A89 52 
003A8A 4F 
003A8B 43 
003A8C B1     10607 DB	0B1H
003A8D 50     10608 DB	"POS "
003A8E 4F 
003A8F 53 
003A90 20 
003A91 0E     10609 DB	0EH
003A92 50     10610 DB	"PUT"		; Token changed
003A93 55 
003A94 54 
003A95 06     10611 DB	06H
003A96 51     10612 DB	"QUIT "		; v5
003A97 55 
003A98 49 
003A99 54 
003A99 20   
003A9B F8     10613 DB	0F8H
003A9C 52     10614 DB	"RETURN "
003A9D 45 
003A9E 54 
003A9F 55 
003A9F 52   
003AA0 4E 
003AA1 20 
003AA3 F5     10615 DB	0F5H
003AA4 52     10616 DB	"REPEAT"
003AA5 45 
003AA6 50 
003AA7 45 
003AA7 41   
003AA8 54 
003AAA F6     10617 DB	0F6H
003AAB 52     10618 DB	"REPORT "
003AAC 45 
003AAD 50 
003AAE 4F 
003AAE 52   
003AAF 54 
003AB0 20 
003AB2 F3     10619 DB	0F3H
003AB3 52     10620 DB	"READ"
003AB4 45 
003AB5 41 
003AB6 44 
003AB7 F4     10621 DB	0F4H
003AB8 52     10622 DB	"REM"
003AB9 45 
003ABA 4D 
003ABB F9     10623 DB	0F9H
003ABC 52     10624 DB	"RUN "
003ABD 55 
003ABE 4E 
003ABF 20 
003AC0 B2     10625 DB	0B2H
003AC1 52     10626 DB	"RAD"
003AC2 41 
003AC3 44 
003AC4 F7     10627 DB	0F7H
003AC5 52     10628 DB	"RESTORE"
003AC6 45 
003AC7 53 
003AC8 54 
003AC8 4F   
003AC9 52 
003ACA 45 
003ACC C2     10629 DB	0C2H
003ACD 52     10630 DB	"RIGHT$("
003ACE 49 
003ACF 47 
003AD0 48 
003AD0 54   
003AD1 24 
003AD2 28 
003AD4 B3     10631 DB	0B3H
003AD5 52     10632 DB	"RND "
003AD6 4E 
003AD7 44 
003AD8 20 
003AD9 07     10633 DB	07H
003ADA 52     10634 DB	"RECTANGLE"	; v5
003ADB 45 
003ADC 43 
003ADD 54 
003ADD 41   
003ADE 4E 
003ADF 47 
003AE0 4C 
003AE0 45   
003AE3 88     10635 DB	88H
003AE4 53     10636 DB	"STEP"
003AE5 54 
003AE6 45 
003AE7 50 
003AE8 B4     10637 DB	0B4H
003AE9 53     10638 DB	"SGN"
003AEA 47 
003AEB 4E 
003AEC B5     10639 DB	0B5H
003AED 53     10640 DB	"SIN"
003AEE 49 
003AEF 4E 
003AF0 B6     10641 DB	0B6H
003AF1 53     10642 DB	"SQR"
003AF2 51 
003AF3 52 
003AF4 89     10643 DB	89H
003AF5 53     10644 DB	"SPC"
003AF6 50 
003AF7 43 
003AF8 C3     10645 DB	0C3H
003AF9 53     10646 DB	"STR$"
003AFA 54 
003AFB 52 
003AFC 24 
003AFD C4     10647 DB	0C4H
003AFE 53     10648 DB	"STRING$("
003AFF 54 
003B00 52 
003B01 49 
003B01 4E   
003B02 47 
003B03 24 
003B04 28 
003B06 D4     10649 DB	0D4H
003B07 53     10650 DB	"SOUND"
003B08 4F 
003B09 55 
003B0A 4E 
003B0A 44   
003B0C FA     10651 DB	0FAH
003B0D 53     10652 DB	"STOP "
003B0E 54 
003B0F 4F 
003B10 50 
003B10 20   
003B12 C6     10653 DB	0C6H
003B13 53     10654 DB	"SUM"		; v5
003B14 55 
003B15 4D 
003B16 08     10655 DB	08H
003B17 53     10656 DB	"SWAP"		; v5
003B18 57 
003B19 41 
003B1A 50 
003B1B 09     10657 DB	09H
003B1C 53     10658 DB	"SYS"		; v5
003B1D 59 
003B1E 53 
003B1F B7     10659 DB	0B7H
003B20 54     10660 DB	"TAN"
003B21 41 
003B22 4E 
003B23 8A     10661 DB	8AH
003B24 54     10662 DB	"TAB("
003B25 41 
003B26 42 
003B27 28 
003B28 8C     10663 DB	8CH
003B29 54     10664 DB	"THEN"
003B2A 48 
003B2B 45 
003B2C 4E 
003B2D 91     10665 DB	91H
003B2E 54     10666 DB	"TIME "
003B2F 49 
003B30 4D 
003B31 45 
003B31 20   
003B33 0A     10667 DB	0AH
003B34 54     10668 DB	"TINT"
003B35 49 
003B36 4E 
003B37 54 
003B38 B8     10669 DB	0B8H
003B39 54     10670 DB	"TO"
003B3A 4F 
003B3B FC     10671 DB	0FCH
003B3C 54     10672 DB	"TRACE"
003B3D 52 
003B3E 41 
003B3F 43 
003B3F 45   
003B41 B9     10673 DB	0B9H
003B42 54     10674 DB	"TRUE "
003B43 52 
003B44 55 
003B45 45 
003B45 20   
003B47 FD     10675 DB	0FDH
003B48 55     10676 DB	"UNTIL"
003B49 4E 
003B4A 54 
003B4B 49 
003B4B 4C   
003B4D BA     10677 DB	0BAH
003B4E 55     10678 DB	"USR"
003B4F 53 
003B50 52 
003B51 EF     10679 DB	0EFH
003B52 56     10680 DB	"VDU"
003B53 44 
003B54 55 
003B55 BB     10681 DB	0BBH
003B56 56     10682 DB	"VAL"
003B57 41 
003B58 4C 
003B59 BC     10683 DB	0BCH
003B5A 56     10684 DB	"VPOS "
003B5B 50 
003B5C 4F 
003B5D 53 
003B5D 20   
003B5F C7     10685 DB	0C7H
003B60 57     10686 DB	"WHILE"		; v5
003B61 48 
003B62 49 
003B63 4C 
003B63 45   
003B65 C9     10687 DB	0C9H
003B66 57     10688 DB	"WHEN"		; v5
003B67 48 
003B68 45 
003B69 4E 
003B6A 0B     10689 DB	0BH
003B6B 57     10690 DB	"WAIT "		; v5
003B6C 41 
003B6D 49 
003B6E 54 
003B6E 20   
003B70 FE     10691 DB	0FEH
003B71 57     10692 DB	"WIDTH"
003B72 49 
003B73 44 
003B74 54 
003B74 48   
              10693 ;'LEFT' TOKENS:
003B76 CF     10694 DB	0CFH
003B77 50     10695 DB	"PTR"
003B78 54 
003B79 52 
003B7A D1     10696 DB	0D1H
003B7B 54     10697 DB	"TIME"
003B7C 49 
003B7D 4D 
003B7E 45 
003B7F D3     10698 DB	0D3H
003B80 48     10699 DB	"HIMEM"
003B81 49 
003B82 4D 
003B83 45 
003B83 4D   
003B85 D2     10700 DB	0D2H
003B86 4C     10701 DB	"LOMEM"
003B87 4F 
003B88 4D 
003B89 45 
003B89 4D   
003B8B D0     10702 DB	0D0H
003B8C 50     10703 DB	"PAGE"
003B8D 41 
003B8E 47 
003B8F 45 
              10704 ;
003B90 11     10705 DB	11H
003B91 4D     10706 DB	"Missing "
003B92 69 
003B93 73 
003B94 73 
003B94 69   
003B95 6E 
003B96 67 
003B97 20 
003B99 12     10707 DB	12H
003B9A 4E     10708 DB	"No such "
003B9B 6F 
003B9C 20 
003B9D 73 
003B9D 75   
003B9E 63 
003B9F 68 
003BA0 20 
003BA2 13     10709 DB	13H
003BA3 42     10710 DB	"Bad "
003BA4 61 
003BA5 64 
003BA6 20 
003BA7 14     10711 DB	14H
003BA8 20     10712 DB	" range"
003BA9 72 
003BAA 61 
003BAB 6E 
003BAB 67   
003BAC 65 
003BAE 15     10713 DB	15H
003BAF 76     10714 DB	"variable"
003BB0 61 
003BB1 72 
003BB2 69 
003BB2 61   
003BB3 62 
003BB4 6C 
003BB5 65 
003BB7 16     10715 DB	16H
003BB8 4F     10716 DB	"Out of"
003BB9 75 
003BBA 74 
003BBB 20 
003BBB 6F   
003BBC 66 
003BBE 17     10717 DB	17H
003BBF 4E     10718 DB	"No "
003BC0 6F 
003BC1 20 
003BC2 18     10719 DB	18H
003BC3 20     10720 DB	" space"
003BC4 73 
003BC5 70 
003BC6 61 
003BC6 63   
003BC7 65 
003BC9 19     10721 DB	19H
003BCA 4E     10722 DB	"Not in a "
003BCB 6F 
003BCC 74 
003BCD 20 
003BCD 69   
003BCE 6E 
003BCF 20 
003BD0 61 
003BD0 20   
003BD3 1A     10723 DB	1AH
003BD4 20     10724 DB	" loop"
003BD5 6C 
003BD6 6F 
003BD7 6F 
003BD7 70   
003BD9 1B     10725 DB	1BH
003BDA 20     10726 DB	" not "
003BDB 6E 
003BDC 6F 
003BDD 74 
003BDD 20   
              10727 KEYWDL:         EQU	$-KEYWDS
003BDF FF     10728 DW	-1
003BE0 FF 
              10729 ;
              10730 ;LIST OF IMMEDIATE MODE COMMANDS:
              10731 ;
003BE1 80     10732 COMNDS:         DB	80H
003BE2 41     10733 DB	"AUTO"
003BE3 55 
003BE4 54 
003BE5 4F 
003BE6 81     10734 DB	81H
003BE7 44     10735 DB	"DELETE"
003BE8 45 
003BE9 4C 
003BEA 45 
003BEA 54   
003BEB 45 
003BED 82     10736 DB	82H
003BEE 4C     10737 DB	"LIST"
003BEF 49 
003BF0 53 
003BF1 54 
003BF2 83     10738 DB	83H
003BF3 4C     10739 DB	"LOAD"
003BF4 4F 
003BF5 41 
003BF6 44 
003BF7 84     10740 DB	84H
003BF8 4E     10741 DB	"NEW "
003BF9 45 
003BFA 57 
003BFB 20 
003BFC 85     10742 DB	85H
003BFD 4F     10743 DB	"OLD "
003BFE 4C 
003BFF 44 
003C00 20 
003C01 86     10744 DB	86H
003C02 52     10745 DB	"RENUMBER"
003C03 45 
003C04 4E 
003C05 55 
003C05 4D   
003C06 42 
003C07 45 
003C08 52 
003C0A 87     10746 DB	87H
003C0B 53     10747 DB	"SAVE"
003C0C 41 
003C0D 56 
003C0E 45 
003C0F FF     10748 DW	-1
003C10 FF 
              10749 ;
              10750 ;IMMEDIATE MODE COMMANDS:
              10751 ;
003C11 E3     10752 CMDTABmn:         DW	AUTO
003C12 3E 
003C13 86     10753 DW	DELETE
003C14 3D 
003C15 AE     10754 DW	LIST
003C16 3D 
003C17 02     10755 DW	LOAD
003C18 3F 
003C19 FD     10756 DW	NEW
003C1A 3E 
003C1B 10     10757 DW	OLD
003C1C 3F 
003C1D 33     10758 DW	RENUM
003C1E 3E 
003C1F 29     10759 DW	SAVE
003C20 3F 
              10760 ;
              10761 ;ERROR MESSAGES:
              10762 ;
003C21 17     10763 ERRWDS:         DB	17H
003C22 72     10764 DB	"room"
003C23 6F 
003C24 6F 
003C25 6D 
003C26 00     10765 DB	0
003C27 16     10766 DB	16H
003C28 14     10767 DB	14H
003C29 00     10768 DW	0
003C2A 00 
003C2B 4D     10769 DB	"Multiple label"
003C2C 75 
003C2D 6C 
003C2E 74 
003C2E 69   
003C2F 70 
003C30 6C 
003C31 65 
003C31 20   
003C32 6C 
003C33 61 
003C34 62 
003C34 65   
003C35 6C 
003C39 00     10770 DB	0
003C3A 4D     10771 DB	"Mistake"
003C3B 69 
003C3C 73 
003C3D 74 
003C3D 61   
003C3E 6B 
003C3F 65 
003C41 00     10772 DB	0
003C42 11     10773 DB	11H
003C43 2C     10774 DB	','
003C44 00     10775 DB	0
003C45 54     10776 DB	"Type mismatch"
003C46 79 
003C47 70 
003C48 65 
003C48 20   
003C49 6D 
003C4A 69 
003C4B 73 
003C4B 6D   
003C4C 61 
003C4D 74 
003C4E 63 
003C4E 68   
003C52 00     10777 DB	0
003C53 19     10778 DB	19H
003C54 A4     10779 DB	TFN
003C55 00     10780 DW	0
003C56 00 
003C57 11     10781 DB	11H
003C58 22     10782 DB	'"'
003C59 00     10783 DB	0
003C5A 13     10784 DB	13H
003C5B DE     10785 DB	TDIM
003C5C 00     10786 DB	0
003C5D DE     10787 DB	TDIM
003C5E 18     10788 DB	18H
003C5F 00     10789 DB	0
003C60 19     10790 DB	19H
003C61 A4     10791 DB	TFN
003C62 20     10792 DB	" or "
003C63 6F 
003C64 72 
003C65 20 
003C66 F2     10793 DB	TPROC
003C67 00     10794 DB	0
003C68 19     10795 DB	19H
003C69 F2     10796 DB	TPROC
003C6A 00     10797 DB	0
003C6B 13     10798 DB	13H
003C6C 75     10799 DB	"use of array"
003C6D 73 
003C6E 65 
003C6F 20 
003C6F 6F   
003C70 66 
003C71 20 
003C72 61 
003C72 72   
003C73 72 
003C74 61 
003C75 79 
003C78 00     10800 DB	0
003C79 13     10801 DB	13H
003C7A 73     10802 DB	"subscript"
003C7B 75 
003C7C 62 
003C7D 73 
003C7D 63   
003C7E 72 
003C7F 69 
003C80 70 
003C80 74   
003C83 00     10803 DB	0
003C84 53     10804 DB	"Syntax error"
003C85 79 
003C86 6E 
003C87 74 
003C87 61   
003C88 78 
003C89 20 
003C8A 65 
003C8A 72   
003C8B 72 
003C8C 6F 
003C8D 72 
003C90 00     10805 DB	0
003C91 45     10806 DB	"Escape"
003C92 73 
003C93 63 
003C94 61 
003C94 70   
003C95 65 
003C97 00     10807 DB	0
003C98 44     10808 DB	"Division by zero"
003C99 69 
003C9A 76 
003C9B 69 
003C9B 73   
003C9C 69 
003C9D 6F 
003C9E 6E 
003C9E 20   
003C9F 62 
003CA0 79 
003CA1 20 
003CA1 7A   
003CA2 65 
003CA3 72 
003CA4 6F 
003CA8 00     10809 DB	0
003CA9 53     10810 DB	"String too long"
003CAA 74 
003CAB 72 
003CAC 69 
003CAC 6E   
003CAD 67 
003CAE 20 
003CAF 74 
003CAF 6F   
003CB0 6F 
003CB1 20 
003CB2 6C 
003CB2 6F   
003CB3 6E 
003CB4 67 
003CB8 00     10811 DB	0
003CB9 4E     10812 DB	"Number too big"
003CBA 75 
003CBB 6D 
003CBC 62 
003CBC 65   
003CBD 72 
003CBE 20 
003CBF 74 
003CBF 6F   
003CC0 6F 
003CC1 20 
003CC2 62 
003CC2 69   
003CC3 67 
003CC7 00     10813 DB	0
003CC8 2D     10814 DB	"-ve root"
003CC9 76 
003CCA 65 
003CCB 20 
003CCB 72   
003CCC 6F 
003CCD 6F 
003CCE 74 
003CD0 00     10815 DB	0
003CD1 4C     10816 DB	"Log"
003CD2 6F 
003CD3 67 
003CD4 14     10817 DB	14H
003CD5 00     10818 DB	0
003CD6 41     10819 DB	"Accuracy lost"
003CD7 63 
003CD8 63 
003CD9 75 
003CD9 72   
003CDA 61 
003CDB 63 
003CDC 79 
003CDC 20   
003CDD 6C 
003CDE 6F 
003CDF 73 
003CDF 74   
003CE3 00     10820 DB	0
003CE4 45     10821 DB	"Exponent"
003CE5 78 
003CE6 70 
003CE7 6F 
003CE7 6E   
003CE8 65 
003CE9 6E 
003CEA 74 
003CEC 14     10822 DB	14H
003CED 00     10823 DW	0
003CEE 00 
003CEF 12     10824 DB	12H
003CF0 15     10825 DB	15H
003CF1 00     10826 DB	0
003CF2 11     10827 DB	11H
003CF3 29     10828 DB	')'
003CF4 00     10829 DB	0
003CF5 13     10830 DB	13H
003CF6 68     10831 DB	"hex or binary"
003CF7 65 
003CF8 78 
003CF9 20 
003CF9 6F   
003CFA 72 
003CFB 20 
003CFC 62 
003CFC 69   
003CFD 6E 
003CFE 61 
003CFF 72 
003CFF 79   
003D03 00     10832 DB	0
003D04 12     10833 DB	12H
003D05 A4     10834 DB	TFN
003D06 2F     10835 DB	'/'
003D07 F2     10836 DB	TPROC
003D08 00     10837 DB	0
003D09 13     10838 DB	13H
003D0A 63     10839 DB	"call"
003D0B 61 
003D0C 6C 
003D0D 6C 
003D0E 00     10840 DB	0
003D0F 13     10841 DB	13H
003D10 61     10842 DB	"arguments"
003D11 72 
003D12 67 
003D13 75 
003D13 6D   
003D14 65 
003D15 6E 
003D16 74 
003D16 73   
003D19 00     10843 DB	0
003D1A 19     10844 DB	19H
003D1B E3     10845 DB	TFOR
003D1C 1A     10846 DB	1AH
003D1D 00     10847 DB	0
003D1E 43     10848 DB	"Can't match "
003D1F 61 
003D20 6E 
003D21 27 
003D21 74   
003D22 20 
003D23 6D 
003D24 61 
003D24 74   
003D25 63 
003D26 68 
003D27 20 
003D2A E3     10849 DB	TFOR
003D2B 00     10850 DB	0
003D2C 13     10851 DB	13H
003D2D E3     10852 DB	TFOR
003D2E 20     10853 DB	' '
003D2F 15     10854 DB	15H
003D30 00     10855 DW	0
003D31 00 
003D32 11     10856 DB	11H
003D33 B8     10857 DB	TTO
003D34 00     10858 DW	0
003D35 00 
003D36 17     10859 DB	17H
003D37 E4     10860 DB	TGOSUB
003D38 00     10861 DB	0
003D39 EE     10862 DB	TON
003D3A 20     10863 DB	" syntax"
003D3B 73 
003D3C 79 
003D3D 6E 
003D3D 74   
003D3E 61 
003D3F 78 
003D41 00     10864 DB	0
003D42 EE     10865 DB	TON
003D43 14     10866 DB	14H
003D44 00     10867 DB	0
003D45 12     10868 DB	12H
003D46 6C     10869 DB	"line"
003D47 69 
003D48 6E 
003D49 65 
003D4A 00     10870 DB	0
003D4B 16     10871 DB	16H
003D4C 20     10872 DB	' '
003D4D DC     10873 DB	TDATA
003D4E 00     10874 DB	0
003D4F 19     10875 DB	19H
003D50 F5     10876 DB	TREPEAT
003D51 1A     10877 DB	1AH
003D52 00     10878 DB	0
003D53 13     10879 DB	13H
003D54 10     10880 DB	TEXIT
003D55 00     10881 DB	0
003D56 11     10882 DB	11H
003D57 23     10883 DB	'#'
003D58 00     10884 DB	0
003D59 19     10885 DB	19H		;46 Not in a WHILE loop
003D5A C7     10886 DB	TWHILE
003D5B 1A     10887 DB	1AH
003D5C 00     10888 DB	0
003D5D 11     10889 DB	11H		;47 Missing ENDCASE
003D5E CB     10890 DB	TENDCASE
003D5F 00     10891 DB	0
003D60 CA     10892 DB	TOF		;48 OF not last
003D61 1B     10893 DB	1BH
003D62 6C     10894 DB	"last"
003D63 61 
003D64 73 
003D65 74 
003D66 00     10895 DB	0
003D67 11     10896 DB	11H		;49 Missing ENDIF
003D68 CD     10897 DB	TENDIF
003D69 00     10898 DB	0
003D6A 00     10899 DW	0
003D6B 00 
003D6C 00     10900 DB	0
003D6D EE     10901 DB	TON		;53 ON ERROR not LOCAL
003D6E 20     10902 DB	' '
003D6F 85     10903 DB	TERROR
003D70 1B     10904 DB	1BH
003D71 EA     10905 DB	TLOCAL
003D72 00     10906 DB	0
003D73 DC     10907 DB	TDATA		;54 DATA not LOCAL
003D74 1B     10908 DB	1BH
003D75 EA     10909 DB	TLOCAL
003D76 00     10910 DB	0
              10911 ;
              10912 ;Indent tokens (first four needn't be at start of line):
              10913 ;
003D77 E3     10914 TOKADD:         DB	TFOR
003D78 F5     10915 DB	TREPEAT
003D79 C7     10916 DB	TWHILE
003D7A C8     10917 DB	TCASE
003D7B 8B     10918 DB	TELSE
003D7C C9     10919 DB	TWHEN
003D7D CC     10920 DB	TOTHERWISE
              10921 LENADD:         EQU	$-TOKADD
              10922 ;
              10923 ;Outdent tokens (first three needn't be at start of line):
              10924 ;
003D7E ED     10925 TOKSUB:         DB	TNEXT
003D7F FD     10926 DB	TUNTIL
003D80 CE     10927 DB	TENDWHILE
003D81 CB     10928 DB	TENDCASE
003D82 CD     10929 DB	TENDIF
003D83 8B     10930 DB	TELSE
003D84 C9     10931 DB	TWHEN
003D85 CC     10932 DB	TOTHERWISE
              10933 LENSUB:         EQU	$-TOKSUB
              10934 ;
              10935 ;COMMANDS:
              10936 ;
              10937 ;DELETE line,line
              10938 ;
003D86 CD     10939 DELETE:         CALL	DLPAIR
003D87 D7 
003D88 43 
003D89 7E     10940 DELET1:         LD	A,(HL)
003D8A B7     10941 OR	A
003D8B 28     10942 JR	Z,WARMNC
003D8C 79 
003D8D 23     10943 INC	HL
003D8E 5E     10944 LD	E,(HL)
003D8F 23     10945 INC	HL
003D90 56     10946 LD	D,(HL)
003D91 2B     10947 DEC	HL
003D92 2B     10948 DEC	HL
003D93 EB     10949 EX	DE,HL
003D94 37     10950 SCF
003D95 ED     10951 SBC	HL,BC
003D96 42 
003D97 EB     10952 EX	DE,HL
003D98 30     10953 JR	NC,WARMNC
003D99 6C 
003D9A C5     10954 PUSH	BC
003D9B CD     10955 CALL	DEL
003D9C E9 
003D9D 3F 
003D9E C1     10956 POP	BC
003D9F 18     10957 JR	DELET1
003DA0 E8 
              10958 ;
              10959 ;LISTO expr
              10960 ;
003DA1 FD     10961 LISTO:          INC	IY		;SKIP "O"
003DA2 23 
003DA3 CD     10962 CALL	EXPRI
003DA4 33 
003DA5 18 
003DA6 D9     10963 EXX
003DA7 7D     10964 LD	A,L
003DA8 32     10965 LD	(LISTON),A
003DA9 FE 
003DAA 54 
003DAB C3     10966 JP	CLOOP
003DAC B0 
003DAD 37 
              10967 ;
              10968 ;LIST
              10969 ;LIST line
              10970 ;LIST line,line [IF string]
              10971 ;LIST ,line
              10972 ;LIST line,
              10973 ;
003DAE FE     10974 LIST:           CP	'O'
003DAF 4F 
003DB0 28     10975 JR	Z,LISTO
003DB1 EF 
003DB2 0E     10976 LD	C,1
003DB3 01 
003DB4 11     10977 LD	DE,BUFFER
003DB5 00 
003DB6 53 
003DB7 CD     10978 CALL	LEXAN2
003DB8 18 
003DB9 44 
003DBA 12     10979 LD	(DE),A
003DBB FD     10980 LD	IY,BUFFER
003DBC 21 
003DBD 00 
003DBE 53 
003DBF CD     10981 CALL	DLPAIR
003DC0 D7 
003DC1 43 
003DC2 CD     10982 CALL	NXT
003DC3 0B 
003DC4 45 
003DC5 FE     10983 CP	TIF		;IF CLAUSE ?
003DC6 E7 
003DC7 3E     10984 LD	A,0		;INIT IF-CLAUSE LENGTH
003DC8 00 
003DC9 20     10985 JR	NZ,LISTB
003DCA 15 
003DCB FD     10986 INC	IY		;SKIP IF
003DCC 23 
003DCD CD     10987 CALL	NXT		;SKIP SPACES (IF ANY)
003DCE 0B 
003DCF 45 
003DD0 EB     10988 EX	DE,HL
003DD1 FD     10989 PUSH	IY
003DD2 E5 
003DD3 E1     10990 POP	HL		;HL ADDRESSES IF CLAUSE
003DD4 3E     10991 LD	A,CR
003DD5 0D 
003DD6 C5     10992 PUSH	BC
003DD7 01     10993 LD	BC,256
003DD8 00 
003DD9 01 
003DDA ED     10994 CPIR			;LOCATE CR
003DDB B1 
003DDC 79     10995 LD	A,C
003DDD 2F     10996 CPL			;A = SUBSTRING LENGTH
003DDE C1     10997 POP	BC
003DDF EB     10998 EX	DE,HL
003DE0 5F     10999 LISTB:          LD	E,A		;IF-CLAUSE LENGTH
003DE1 78     11000 LD	A,B
003DE2 B1     11001 OR	C
003DE3 20     11002 JR	NZ,LISTA
003DE4 01 
003DE5 0B     11003 DEC	BC
003DE6 D9     11004 LISTA:          EXX
003DE7 DD     11005 LD	IX,LISTON
003DE8 21 
003DE9 FE 
003DEA 54 
003DEB 1E     11006 LD	E,0		;INDENTATION COUNT
003DEC 00 
003DED D9     11007 EXX
003DEE 3E     11008 LD	A,20
003DEF 14 
              11009 ;
003DF0 C5     11010 LISTC:          PUSH	BC		;SAVE HIGH LINE NUMBER
003DF1 D5     11011 PUSH	DE		;SAVE IF-CLAUSE LENGTH
003DF2 E5     11012 PUSH	HL		;SAVE PROGRAM POINTER
003DF3 08     11013 EX	AF,AF'
003DF4 7E     11014 LD	A,(HL)
003DF5 B7     11015 OR	A
003DF6 28     11016 JR	Z,WARMNC
003DF7 0E 
              11017 ;
              11018 ;CHECK IF PAST TERMINATING LINE NUMBER:
              11019 ;
003DF8 7B     11020 LD	A,E		;A = IF-CLAUSE LENGTH
003DF9 23     11021 INC	HL
003DFA 5E     11022 LD	E,(HL)
003DFB 23     11023 INC	HL
003DFC 56     11024 LD	D,(HL)		;DE = LINE NUMBER
003DFD 2B     11025 DEC	HL
003DFE 2B     11026 DEC	HL
003DFF D5     11027 PUSH	DE		;SAVE LINE NUMBER
003E00 EB     11028 EX	DE,HL
003E01 37     11029 SCF
003E02 ED     11030 SBC	HL,BC
003E03 42 
003E04 EB     11031 EX	DE,HL
003E05 D1     11032 POP	DE		;RESTORE LINE NUMBER
003E06 D2     11033 WARMNC:         JP	NC,WARM
003E07 AF 
003E08 37 
003E09 4E     11034 LD	C,(HL)		;C = LINE LENGTH + 4
003E0A 47     11035 LD	B,A		;B = IF-CLAUSE LENGTH
              11036 ;
              11037 ;CHECK FOR IF CLAUSE:
              11038 ;
003E0B 23     11039 INC	HL
003E0C 23     11040 INC	HL
003E0D 23     11041 INC	HL		;HL ADDRESSES LINE TEXT
003E0E 0D     11042 DEC	C
003E0F 0D     11043 DEC	C
003E10 0D     11044 DEC	C
003E11 0D     11045 DEC	C		;C = LINE LENGTH
003E12 D5     11046 PUSH	DE		;SAVE LINE NUMBER
003E13 E5     11047 PUSH	HL		;SAVE LINE ADDRESS
003E14 AF     11048 XOR	A		;A <- 0
003E15 B8     11049 CP	B		;WAS THERE AN IF-CLAUSE
003E16 FD     11050 PUSH	IY
003E17 E5 
003E18 D1     11051 POP	DE		;DE ADDRESSES IF-CLAUSE
003E19 C4     11052 CALL	NZ,SEARCH	;SEARCH FOR IF CLAUSE
003E1A F2 
003E1B 1D 
003E1C E1     11053 POP	HL		;RESTORE LINE ADDRESS
003E1D D1     11054 POP	DE		;RESTORE LINE NUMBER
003E1E FD     11055 PUSH	IY
003E1F E5 
003E20 CC     11056 CALL	Z,LISTIT	;LIST IF MATCH
003E21 5D 
003E22 40 
003E23 FD     11057 POP	IY
003E24 E1 
              11058 ;
003E25 08     11059 EX	AF,AF'
003E26 3D     11060 DEC	A
003E27 CD     11061 CALL	LTRAP
003E28 1A 
003E29 12 
003E2A E1     11062 POP	HL		;RESTORE POINTER
003E2B 5E     11063 LD	E,(HL)
003E2C 16     11064 LD	D,0
003E2D 00 
003E2E 19     11065 ADD	HL,DE		;ADDRESS NEXT LINE
003E2F D1     11066 POP	DE		;RESTORE IF-CLAUSE LEN
003E30 C1     11067 POP	BC		;RESTORE HI LINE NUMBER
003E31 18     11068 JR	LISTC
003E32 BD 
              11069 ;
              11070 ;RENUMBER
              11071 ;RENUMBER start
              11072 ;RENUMBER start,increment
              11073 ;RENUMBER ,increment
              11074 ;
003E33 CD     11075 RENUM:          CALL	CLEAR		;USES DYNAMIC AREA
003E34 43 
003E35 40 
003E36 CD     11076 CALL	PAIR		;LOAD HL,BC
003E37 B4 
003E38 43 
003E39 D9     11077 EXX
003E3A 2A     11078 LD	HL,(PAGE_)
003E3B DC 
003E3C 54 
003E3D ED     11079 LD	DE,(LOMEM)
003E3E 5B 
003E3F DE 
003E40 54 
003E41 7E     11080 RENUM1:         LD	A,(HL)		;BUILD TABLE
003E42 B7     11081 OR	A
003E43 28     11082 JR	Z,RENUM2
003E44 28 
003E45 23     11083 INC	HL
003E46 4E     11084 LD	C,(HL)		;OLD LINE NUMBER
003E47 23     11085 INC	HL
003E48 46     11086 LD	B,(HL)
003E49 EB     11087 EX	DE,HL
003E4A 71     11088 LD	(HL),C
003E4B 23     11089 INC	HL
003E4C 70     11090 LD	(HL),B
003E4D 23     11091 INC	HL
003E4E D9     11092 EXX
003E4F E5     11093 PUSH	HL
003E50 09     11094 ADD	HL,BC		;ADD INCREMENT
003E51 DA     11095 JP	C,TOOBIGmn	;"Too big"
003E52 AF 
003E53 43 
003E54 D9     11096 EXX
003E55 C1     11097 POP	BC
003E56 71     11098 LD	(HL),C
003E57 23     11099 INC	HL
003E58 70     11100 LD	(HL),B
003E59 23     11101 INC	HL
003E5A EB     11102 EX	DE,HL
003E5B 2B     11103 DEC	HL
003E5C 2B     11104 DEC	HL
003E5D AF     11105 XOR	A
003E5E 47     11106 LD	B,A
003E5F 4E     11107 LD	C,(HL)
003E60 09     11108 ADD	HL,BC		;NEXT LINE
003E61 EB     11109 EX	DE,HL
003E62 E5     11110 PUSH	HL
003E63 24     11111 INC	H
003E64 ED     11112 SBC	HL,SP
003E65 72 
003E66 E1     11113 POP	HL
003E67 EB     11114 EX	DE,HL
003E68 38     11115 JR	C,RENUM1	;CONTINUE
003E69 D7 
003E6A C3     11116 JP	ERROR_		;'No room' (A = 0)
003E6B 44 
003E6C 3F 
              11117 ;
003E6D EB     11118 RENUM2:         EX	DE,HL
003E6E 36     11119 LD	(HL),-1
003E6F FF 
003E70 23     11120 INC	HL
003E71 36     11121 LD	(HL),-1
003E72 FF 
003E73 ED     11122 LD	DE,(LOMEM)
003E74 5B 
003E75 DE 
003E76 54 
003E77 D9     11123 EXX
003E78 2A     11124 LD	HL,(PAGE_)
003E79 DC 
003E7A 54 
003E7B 4E     11125 RENUM3:         LD	C,(HL)
003E7C 79     11126 LD	A,C
003E7D B7     11127 OR	A
003E7E 28     11128 JR	Z,WARMNC
003E7F 86 
003E80 D9     11129 EXX
003E81 EB     11130 EX	DE,HL
003E82 23     11131 INC	HL
003E83 23     11132 INC	HL
003E84 5E     11133 LD	E,(HL)
003E85 23     11134 INC	HL
003E86 56     11135 LD	D,(HL)
003E87 23     11136 INC	HL
003E88 D5     11137 PUSH	DE
003E89 EB     11138 EX	DE,HL
003E8A D9     11139 EXX
003E8B D1     11140 POP	DE
003E8C 23     11141 INC	HL
003E8D 73     11142 LD	(HL),E		;NEW LINE NUMBER
003E8E 23     11143 INC	HL
003E8F 72     11144 LD	(HL),D
003E90 23     11145 INC	HL
003E91 0D     11146 DEC	C
003E92 0D     11147 DEC	C
003E93 0D     11148 DEC	C
003E94 06     11149 LD	B,0
003E95 00 
003E96 3E     11150 RENUM7:         LD	A,TLINO
003E97 8D 
003E98 ED     11151 CPIR			;SEARCH FOR LINE NUMBER
003E99 B1 
003E9A 20     11152 JR	NZ,RENUM3
003E9B DF 
003E9C C5     11153 PUSH	BC
003E9D E5     11154 PUSH	HL
003E9E E5     11155 PUSH	HL
003E9F FD     11156 POP	IY
003EA0 E1 
003EA1 D9     11157 EXX
003EA2 E5     11158 PUSH	HL
003EA3 CD     11159 CALL	DECODE		;DECODE LINE NUMBER
003EA4 60 
003EA5 1F 
003EA6 E1     11160 POP	HL
003EA7 D9     11161 EXX
003EA8 44     11162 LD	B,H
003EA9 4D     11163 LD	C,L
003EAA 2A     11164 LD	HL,(LOMEM)
003EAB DE 
003EAC 54 
003EAD 5E     11165 RENUM4:         LD	E,(HL)		;CROSS-REFERENCE TABLE
003EAE 23     11166 INC	HL
003EAF 56     11167 LD	D,(HL)
003EB0 23     11168 INC	HL
003EB1 EB     11169 EX	DE,HL
003EB2 B7     11170 OR	A		;CLEAR CARRY
003EB3 ED     11171 SBC	HL,BC
003EB4 42 
003EB5 EB     11172 EX	DE,HL
003EB6 5E     11173 LD	E,(HL)		;NEW NUMBER
003EB7 23     11174 INC	HL
003EB8 56     11175 LD	D,(HL)
003EB9 23     11176 INC	HL
003EBA 38     11177 JR	C,RENUM4
003EBB F1 
003EBC EB     11178 EX	DE,HL
003EBD 28     11179 JR	Z,RENUM5	;FOUND
003EBE 1A 
003EBF CD     11180 CALL	TELL
003EC0 FA 
003EC1 44 
003EC2 46     11181 DB	"Failed at "
003EC3 61 
003EC4 69 
003EC5 6C 
003EC5 65   
003EC6 64 
003EC7 20 
003EC8 61 
003EC8 74   
003EC9 20 
003ECC 00     11182 DB	0
003ECD D9     11183 EXX
003ECE E5     11184 PUSH	HL
003ECF D9     11185 EXX
003ED0 E1     11186 POP	HL
003ED1 CD     11187 CALL	PBCDL
003ED2 92 
003ED3 41 
003ED4 CD     11188 CALL	CRLF
003ED5 FB 
003ED6 40 
003ED7 18     11189 JR	RENUM6
003ED8 06 
003ED9 D1     11190 RENUM5:         POP	DE
003EDA D5     11191 PUSH	DE
003EDB 1B     11192 DEC	DE
003EDC CD     11193 CALL	ENCODE		;RE-WRITE NUMBER
003EDD BF 
003EDE 44 
003EDF E1     11194 RENUM6:         POP	HL
003EE0 C1     11195 POP	BC
003EE1 18     11196 JR	RENUM7
003EE2 B3 
              11197 ;
              11198 ;AUTO
              11199 ;AUTO start,increment
              11200 ;AUTO start
              11201 ;AUTO ,increment
              11202 ;
003EE3 CD     11203 AUTO:           CALL	PAIR
003EE4 B4 
003EE5 43 
003EE6 22     11204 LD	(AUTONO),HL
003EE7 E8 
003EE8 54 
003EE9 79     11205 LD	A,C
003EEA 32     11206 LD	(INCREM),A
003EEB FF 
003EEC 54 
003EED 18     11207 JR	CLOOP0
003EEE 37 
              11208 ;
              11209 ;BAD
              11210 ;NEW
              11211 ;
003EEF CD     11212 BAD:            CALL	TELL		;"Bad program'
003EF0 FA 
003EF1 44 
003EF2 13     11213 DB	13H
003EF3 70     11214 DB	"program"
003EF4 72 
003EF5 6F 
003EF6 67 
003EF6 72   
003EF7 61 
003EF8 6D 
003EFA 0D     11215 DB	CR
003EFB 0A     11216 DB	LF
003EFC 00     11217 DB	0
003EFD CD     11218 NEW:            CALL	NEWIT
003EFE 3E 
003EFF 40 
003F00 18     11219 JR	CLOOP0
003F01 24 
              11220 ;
              11221 ;LOAD filename
              11222 ;
003F02 CD     11223 LOAD:           CALL	EXPRS		;GET FILENAME
003F03 3C 
003F04 18 
003F05 3E     11224 LD	A,CR
003F06 0D 
003F07 12     11225 LD	(DE),A
003F08 CD     11226 CALL	LOAD0
003F09 00 
003F0A 40 
003F0B CD     11227 CALL	CLEAR
003F0C 43 
003F0D 40 
003F0E 18     11228 JR	WARM0
003F0F 31 
              11229 ;
              11230 ;OLD
              11231 ;
003F10 2A     11232 OLD:            LD	HL,(PAGE_)
003F11 DC 
003F12 54 
003F13 E5     11233 PUSH	HL
003F14 23     11234 INC	HL
003F15 23     11235 INC	HL
003F16 23     11236 INC	HL
003F17 01     11237 LD	BC,252
003F18 FC 
003F19 00 
003F1A 3E     11238 LD	A,CR
003F1B 0D 
003F1C ED     11239 CPIR
003F1D B1 
003F1E 20     11240 JR	NZ,BAD
003F1F CF 
003F20 7D     11241 LD	A,L
003F21 E1     11242 POP	HL
003F22 77     11243 LD	(HL),A
003F23 CD     11244 CALL	CLEAN
003F24 1A 
003F25 40 
003F26 C3     11245 CLOOP0:         JP	CLOOP
003F27 B0 
003F28 37 
              11246 ;
              11247 ;SAVE filename
              11248 ;
003F29 CD     11249 SAVE:           CALL	EXPRS		;FILENAME
003F2A 3C 
003F2B 18 
003F2C 3E     11250 LD	A,CR
003F2D 0D 
003F2E 12     11251 LD	(DE),A
003F2F ED     11252 LD	DE,(PAGE_)
003F30 5B 
003F31 DC 
003F32 54 
003F33 CD     11253 CALL	GETTOP
003F34 25 
003F35 40 
003F36 B7     11254 OR	A
003F37 ED     11255 SBC	HL,DE
003F38 52 
003F39 44     11256 LD	B,H		;LENGTH OF PROGRAM
003F3A 4D     11257 LD	C,L
003F3B 21     11258 LD	HL,ACCS
003F3C 00 
003F3D 52 
003F3E CD     11259 CALL	OSSAVE
003F3F A6 
003F40 13 
003F41 C3     11260 WARM0:          JP	WARM
003F42 AF 
003F43 37 
              11261 ;
              11262 ;ERROR
              11263 ;N.B. CARE NEEDED BECAUSE SP MAY NOT BE VALID (E.G. ABOVE HIMEM)
              11264 ;
003F44 21     11265 ERROR_:         LD	HL,ERRWDS
003F45 21 
003F46 3C 
003F47 4F     11266 LD	C,A
003F48 B7     11267 OR	A
003F49 28     11268 JR	Z,ERROR1
003F4A 0C 
003F4B 47     11269 LD	B,A		;ERROR NUMBER
003F4C AF     11270 XOR	A
003F4D BE     11271 ERROR0:         CP	(HL)
003F4E 23     11272 INC	HL
003F4F 20     11273 JR	NZ,ERROR0
003F50 FC 
003F51 10     11274 DJNZ	ERROR0
003F52 FA 
003F53 18     11275 JR	ERROR1		;MUST NOT PUSH HL HERE
003F54 02 
              11276 ;
003F55 E1     11277 EXTERR:         POP	HL
003F56 4F     11278 LD	C,A
003F57 22     11279 ERROR1:         LD	(ERRTXT),HL
003F58 EE 
003F59 54 
003F5A 2A     11280 LD	HL,(ONERSP)
003F5B EC 
003F5C 54 
003F5D 7C     11281 LD	A,H
003F5E B5     11282 OR	L
003F5F ED     11283 LD	SP,(HIMEM)	;MUST SET SP BEFORE 'CALL'
003F60 7B 
003F61 E2 
003F62 54 
003F63 28     11284 JR	Z,ERROR4
003F64 01 
003F65 F9     11285 LD	SP,HL
003F66 79     11286 ERROR4:         LD	A,C		;ERROR NUMBER
003F67 CD     11287 CALL	SETLIN		;SP IS SET NOW
003F68 5B 
003F69 41 
003F6A 32     11288 LD	(ERR),A
003F6B FD 
003F6C 54 
003F6D 22     11289 LD	(ERL),HL
003F6E F2 
003F6F 54 
003F70 B7     11290 OR	A
003F71 28     11291 JR	Z,ERROR2	;'FATAL' ERROR
003F72 0B 
003F73 2A     11292 LD	HL,(ERRTRP)
003F74 EA 
003F75 54 
003F76 7C     11293 LD	A,H
003F77 B5     11294 OR	L
003F78 E5     11295 PUSH	HL
003F79 FD     11296 POP	IY
003F7A E1 
003F7B C2     11297 JP	NZ,XEQ		;ERROR TRAPPED
003F7C 99 
003F7D 24 
003F7E ED     11298 ERROR2:         LD	SP,(HIMEM)
003F7F 7B 
003F80 E2 
003F81 54 
003F82 ED     11299 SBC	HL,HL
003F83 62 
003F84 22     11300 LD	(AUTONO),HL
003F85 E8 
003F86 54 
003F87 22     11301 LD	(TRACEN),HL	;CANCEL TRACE
003F88 E6 
003F89 54 
003F8A CD     11302 CALL	RESET		;RESET OPSYS
003F8B 27 
003F8C 12 
003F8D CD     11303 CALL	CRLF
003F8E FB 
003F8F 40 
003F90 CD     11304 CALL	REPORT		;MESSAGE
003F91 E5 
003F92 44 
003F93 2A     11305 LD	HL,(ERL)
003F94 F2 
003F95 54 
003F96 CD     11306 CALL	SAYLN
003F97 82 
003F98 41 
003F99 1E     11307 LD	E,0
003F9A 00 
003F9B DC     11308 CALL	C,OSSHUT	;CLOSE ALL FILES
003F9C 37 
003F9D 12 
003F9E CD     11309 CALL	CRLF
003F9F FB 
003FA0 40 
003FA1 18     11310 JR	CLOOP0
003FA2 83 
              11311 ;
              11312 ;SUBROUTINES:
              11313 ;
              11314 ;
              11315 ;LEX - SEARCH FOR KEYWORDS
              11316 ;   Inputs: HL = start of keyword table
              11317 ;           IY = start of match text
              11318 ;  Outputs: If found, Z-flag set, A=token.
              11319 ;           If not found, Z-flag reset, A=(IY).
              11320 ;           IY updated (if NZ, IY unchanged).
              11321 ; Destroys: A,B,H,L,IY,F
              11322 ;
003FA3 21     11323 LEX:            LD	HL,KEYWDS
003FA4 84 
003FA5 38 
003FA6 FD     11324 LEX0:           LD	A,(IY)
003FA7 7E 
003FA8 00 
003FA9 46     11325 LD	B,(HL)
003FAA 23     11326 INC	HL
003FAB BE     11327 CP	(HL)
003FAC 28     11328 JR	Z,LEX2
003FAD 0A 
003FAE D8     11329 RET	C		;FAIL EXIT
003FAF 23     11330 LEX1:           INC	HL
003FB0 7E     11331 LD	A,(HL)
003FB1 FE     11332 CP	160
003FB2 A0 
003FB3 EA     11333 JP	PE,LEX1
003FB4 AF 
003FB5 3F 
003FB6 18     11334 JR	LEX0
003FB7 EE 
              11335 ;
003FB8 FD     11336 LEX2:           PUSH	IY		;SAVE POINTER
003FB9 E5 
003FBA 23     11337 LEX3:           INC	HL
003FBB 7E     11338 LD	A,(HL)
003FBC FE     11339 CP	160
003FBD A0 
003FBE E2     11340 JP	PO,LEX6		;FOUND
003FBF E5 
003FC0 3F 
003FC1 FD     11341 INC	IY
003FC2 23 
003FC3 FD     11342 LD	A,(IY)
003FC4 7E 
003FC5 00 
003FC6 BE     11343 CP	(HL)
003FC7 20     11344 JR	NZ,LEX7
003FC8 05 
003FC9 FE     11345 CP	161
003FCA A1 
003FCB EA     11346 JP	PE,LEX3
003FCC BA 
003FCD 3F 
003FCE FD     11347 LEX7:           LD	A,(IY)
003FCF 7E 
003FD0 00 
003FD1 FE     11348 CP	'.'
003FD2 2E 
003FD3 28     11349 JR	Z,LEX6		;FOUND (ABBREV.)
003FD4 10 
003FD5 CD     11350 CALL	RANGE1
003FD6 FC 
003FD7 43 
003FD8 38     11351 JR	C,LEX5
003FD9 04 
003FDA FD     11352 LEX4:           POP	IY		;RESTORE POINTER
003FDB E1 
003FDC 18     11353 JR	LEX1
003FDD D1 
              11354 ;
003FDE 7E     11355 LEX5:           LD	A,(HL)
003FDF FE     11356 CP	' '
003FE0 20 
003FE1 20     11357 JR	NZ,LEX4
003FE2 F7 
003FE3 FD     11358 DEC	IY
003FE4 2B 
003FE5 F1     11359 LEX6:           POP	AF
003FE6 AF     11360 XOR	A
003FE7 78     11361 LD	A,B
003FE8 C9     11362 RET
              11363 ;
              11364 ;DEL - DELETE A PROGRAM LINE.
              11365 ;   Inputs: HL addresses program line.
              11366 ; Destroys: B,C,F
              11367 ;
003FE9 D5     11368 DEL:            PUSH	DE
003FEA E5     11369 PUSH	HL
003FEB E5     11370 PUSH	HL
003FEC 06     11371 LD	B,0
003FED 00 
003FEE 4E     11372 LD	C,(HL)
003FEF 09     11373 ADD	HL,BC
003FF0 E5     11374 PUSH	HL
003FF1 EB     11375 EX	DE,HL
003FF2 CD     11376 CALL	GETTOP
003FF3 25 
003FF4 40 
003FF5 ED     11377 SBC	HL,DE
003FF6 52 
003FF7 44     11378 LD	B,H
003FF8 4D     11379 LD	C,L
003FF9 E1     11380 POP	HL
003FFA D1     11381 POP	DE
003FFB ED     11382 LDIR			;DELETE LINE
003FFC B0 
003FFD E1     11383 POP	HL
003FFE D1     11384 POP	DE
003FFF C9     11385 RET
              11386 ;
              11387 ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
              11388 ;   Inputs: Filename in ACCS (term CR)
              11389 ; Destroys: A,B,C,D,E,H,L,F
              11390 ;
              11391 ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
              11392 ; AND WRITE FF FF.
              11393 ; Destroys: A,B,C,H,L,F
              11394 ;
004000 ED     11395 LOAD0:          LD	DE,(PAGE_)
004001 5B 
004002 DC 
004003 54 
004004 21     11396 LD	HL,-256
004005 00 
004006 FF 
004007 39     11397 ADD	HL,SP
004008 ED     11398 SBC	HL,DE		;FIND AVAILABLE SPACE
004009 52 
00400A 44     11399 LD	B,H
00400B 4D     11400 LD	C,L
00400C 21     11401 LD	HL,ACCS
00400D 00 
00400E 52 
00400F CD     11402 CALL	OSLOAD		;LOAD
004010 B0 
004011 12 
004012 D4     11403 CALL	NC,NEWIT
004013 3E 
004014 40 
004015 3E     11404 LD	A,0
004016 00 
004017 D2     11405 JP	NC,ERROR_	;"No room"
004018 44 
004019 3F 
00401A CD     11406 CLEAN:          CALL	GETTOP
00401B 25 
00401C 40 
00401D 2B     11407 DEC	HL
00401E 36     11408 LD	(HL),-1		;WRITE &FFFF
00401F FF 
004020 2B     11409 DEC	HL
004021 36     11410 LD	(HL),-1
004022 FF 
004023 18     11411 JR	CLEAR
004024 1E 
              11412 ;
004025 2A     11413 GETTOP:         LD	HL,(PAGE_)
004026 DC 
004027 54 
004028 06     11414 LD	B,0
004029 00 
00402A 3E     11415 LD	A,CR
00402B 0D 
00402C 4E     11416 GETOP1:         LD	C,(HL)
00402D 0C     11417 INC	C
00402E 0D     11418 DEC	C
00402F 28     11419 JR	Z,GETOP2
004030 09 
004031 09     11420 ADD	HL,BC
004032 2B     11421 DEC	HL
004033 BE     11422 CP	(HL)
004034 23     11423 INC	HL
004035 28     11424 JR	Z,GETOP1
004036 F5 
004037 C3     11425 JP	BAD
004038 EF 
004039 3E 
00403A 23     11426 GETOP2:         INC	HL		;N.B. CALLED FROM NEWIT
00403B 23     11427 INC	HL
00403C 23     11428 INC	HL
00403D C9     11429 RET
              11430 ;
              11431 ;NEWIT - NEW PROGRAM THEN CLEAR
              11432 ;   Destroys: H,L
              11433 ;
              11434 ;CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
              11435 ; FUNCTION AND PROCEDURE POINTERS.
              11436 ;   Destroys: Nothing
              11437 ;
00403E 2A     11438 NEWIT:          LD	HL,(PAGE_)
00403F DC 
004040 54 
004041 36     11439 LD	(HL),0
004042 00 
004043 E5     11440 CLEAR:          PUSH	HL
004044 C5     11441 PUSH	BC
004045 F5     11442 PUSH	AF
004046 CD     11443 CALL	GETTOP
004047 25 
004048 40 
004049 22     11444 LD	(LOMEM),HL
00404A DE 
00404B 54 
00404C 22     11445 LD	(FREE),HL
00404D E0 
00404E 54 
00404F 21     11446 LD	HL,DYNVAR
004050 6C 
004051 54 
              11447 ; LD	B,2*(54+2)
004052 06     11448 LD	B,54+2*2
004053 70 
004054 36     11449 CLEAR1:         LD	(HL),0
004055 00 
004056 23     11450 INC	HL
004057 10     11451 DJNZ	CLEAR1
004058 FB 
004059 F1     11452 POP	AF
00405A C1     11453 POP	BC
00405B E1     11454 POP	HL
00405C C9     11455 RET
              11456 ;
              11457 ;LISTIT - LIST A PROGRAM LINE.
              11458 ;    Inputs: HL addresses line
              11459 ;            DE = line number (binary)
              11460 ;	     E' = indentation count
              11461 ;            IX addresses LISTON
              11462 ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
              11463 ;
00405D E5     11464 LISTIT:         PUSH	HL
00405E EB     11465 EX	DE,HL
00405F C5     11466 PUSH	BC
004060 CD     11467 CALL	PBCD
004061 96 
004062 41 
004063 C1     11468 POP	BC
004064 E1     11469 POP	HL
004065 7E     11470 LD	A,(HL)
004066 D9     11471 EXX
004067 21     11472 LD	HL,TOKSUB
004068 7E 
004069 3D 
00406A 01     11473 LD	BC,LENSUB
00406B 08 
00406C 00 
00406D ED     11474 CPIR
00406E B1 
00406F CC     11475 CALL	Z,INDSUB
004070 F5 
004071 40 
004072 FE     11476 CP	TENDCASE
004073 CB 
004074 CC     11477 CALL	Z,INDSUB
004075 F5 
004076 40 
004077 3E     11478 LD	A,' '
004078 20 
004079 DD     11479 BIT	0,(IX)
00407A CB 
00407B 00 
00407C 46 
00407D C4     11480 CALL	NZ,OUTCHR
00407E 02 
00407F 41 
004080 7B     11481 LD	A,E
004081 87     11482 ADD	A,A
004082 DD     11483 BIT	1,(IX)
004083 CB 
004084 00 
004085 4E 
004086 C4     11484 CALL	NZ,SPACES
004087 A3 
004088 35 
004089 D9     11485 EXX
00408A 7E     11486 LD	A,(HL)
00408B 1E     11487 LD	E,0
00408C 00 
00408D D9     11488 EXX
00408E 01     11489 LD	BC,LENADD
00408F 07 
004090 00 
004091 21     11490 LIST5:          LD	HL,TOKADD
004092 77 
004093 3D 
004094 ED     11491 CPIR
004095 B1 
004096 CC     11492 CALL	Z,INDADD
004097 F9 
004098 40 
004099 FE     11493 CP	TCASE
00409A C8 
00409B CC     11494 CALL	Z,INDADD
00409C F9 
00409D 40 
00409E D9     11495 EXX
00409F 7E     11496 LIST8:          LD	A,(HL)
0040A0 23     11497 INC	HL
0040A1 FE     11498 CP	CR
0040A2 0D 
0040A3 28     11499 JR	Z,LIST9
0040A4 25 
0040A5 57     11500 LD	D,A
0040A6 FE     11501 CP	TEXIT
0040A7 10 
0040A8 20     11502 JR	NZ,LIST6
0040A9 02 
0040AA CB     11503 SET	7,E
0040AB FB 
0040AC FE     11504 LIST6:          CP	'"'
0040AD 22 
0040AE 20     11505 JR	NZ,LIST7
0040AF 01 
0040B0 1C     11506 INC	E
0040B1 CD     11507 LIST7:          CALL	LOUT
0040B2 E9 
0040B3 40 
0040B4 7B     11508 LD	A,E
0040B5 E6     11509 AND	81H
0040B6 81 
0040B7 20     11510 JR	NZ,LIST8
0040B8 E6 
0040B9 7E     11511 LD	A,(HL)
0040BA D9     11512 EXX
0040BB 21     11513 LD	HL,TOKSUB
0040BC 7E 
0040BD 3D 
0040BE 01     11514 LD	BC,3
0040BF 03 
0040C0 00 
0040C1 ED     11515 CPIR
0040C2 B1 
0040C3 CC     11516 CALL	Z,INDSUB
0040C4 F5 
0040C5 40 
0040C6 0E     11517 LD	C,4
0040C7 04 
0040C8 18     11518 JR	LIST5
0040C9 C7 
              11519 ;
0040CA 7A     11520 LIST9:          LD	A,D
0040CB FE     11521 CP	TTHEN
0040CC 8C 
0040CD D9     11522 EXX
0040CE CC     11523 CALL	Z,INDADD
0040CF F9 
0040D0 40 
0040D1 D9     11524 EXX
0040D2 18     11525 JR	CRLF
0040D3 27 
              11526 ;
0040D4 E5     11527 PRLINO:         PUSH	HL
0040D5 FD     11528 POP	IY
0040D6 E1 
0040D7 C5     11529 PUSH	BC
0040D8 CD     11530 CALL	DECODE
0040D9 60 
0040DA 1F 
0040DB C1     11531 POP	BC
0040DC D9     11532 EXX
0040DD C5     11533 PUSH	BC
0040DE D5     11534 PUSH	DE
0040DF CD     11535 CALL	PBCDL
0040E0 92 
0040E1 41 
0040E2 D1     11536 POP	DE
0040E3 C1     11537 POP	BC
0040E4 D9     11538 EXX
0040E5 FD     11539 PUSH	IY
0040E6 E5 
0040E7 E1     11540 POP	HL
0040E8 C9     11541 RET
              11542 ;
0040E9 CB     11543 LOUT:           BIT	0,E
0040EA 43 
0040EB 20     11544 JR	NZ,OUTCHR
0040EC 15 
0040ED FE     11545 CP	TLINO
0040EE 8D 
0040EF 28     11546 JR	Z,PRLINO
0040F0 E3 
0040F1 CD     11547 CALL	OUT
0040F2 1B 
0040F3 41 
0040F4 C9     11548 RET
              11549 ;
0040F5 1D     11550 INDSUB:         DEC	E
0040F6 F2     11551 JP	P,INDRET
0040F7 FA 
0040F8 40 
0040F9 1C     11552 INDADD:         INC	E
0040FA C9     11553 INDRET:         RET
              11554 ;
              11555 ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
              11556 ;  Destroys: A,F
              11557 ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
              11558 ;    Inputs: A = character
              11559 ;  Destroys: A,F
              11560 ;
0040FB 3E     11561 CRLF:           LD	A,CR
0040FC 0D 
0040FD CD     11562 CALL	OUTCHR
0040FE 02 
0040FF 41 
004100 3E     11563 LD	A,LF
004101 0A 
004102 CD     11564 OUTCHR:         CALL	OSWRCH
004103 95 
004104 11 
004105 D6     11565 SUB	CR
004106 0D 
004107 28     11566 JR	Z,CARRET
004108 05 
004109 D8     11567 RET	C		;NON-PRINTING
00410A 3A     11568 LD	A,(COUNT)
00410B FB 
00410C 54 
00410D 3C     11569 INC	A
00410E 32     11570 CARRET:         LD	(COUNT),A
00410F FB 
004110 54 
004111 C8     11571 RET	Z
004112 E5     11572 PUSH	HL
004113 2A     11573 LD	HL,(WIDTH)
004114 FC 
004115 54 
004116 BD     11574 CP	L
004117 E1     11575 POP	HL
004118 C0     11576 RET	NZ
004119 18     11577 JR	CRLF
00411A E0 
              11578 ;
              11579 ;OUT - SEND CHARACTER OR KEYWORD
              11580 ;   Inputs: A = character (>=10, <128)
              11581 ;           A = Token (<10, >=128)
              11582 ;  Destroys: A,F
              11583 ;
00411B FE     11584 OUT:            CP	160
00411C A0 
00411D EA     11585 JP	PE,OUTCHR
00411E 02 
00411F 41 
004120 C5     11586 PUSH	BC
004121 E5     11587 PUSH	HL
004122 21     11588 LD	HL,KEYWDS
004123 84 
004124 38 
004125 01     11589 LD	BC,KEYWDL
004126 5B 
004127 03 
004128 ED     11590 CPIR
004129 B1 
00412A C4     11591 CALL	NZ,OUTCHR
00412B 02 
00412C 41 
00412D 06     11592 LD	B,160
00412E A0 
00412F FE     11593 CP	145
004130 91 
004131 EA     11594 JP	PE,TOKEN1
004132 35 
004133 41 
004134 04     11595 INC	B
004135 7E     11596 TOKEN1:         LD	A,(HL)
004136 23     11597 INC	HL
004137 B8     11598 CP	B
004138 F5     11599 PUSH	AF
004139 EC     11600 CALL	PE,OUTCHR
00413A 02 
00413B 41 
00413C F1     11601 POP	AF
00413D EA     11602 JP	PE,TOKEN1
00413E 35 
00413F 41 
004140 E1     11603 POP	HL
004141 C1     11604 POP	BC
004142 C9     11605 RET
              11606 ;
              11607 ;FINDL - FIND PROGRAM LINE.
              11608 ;   Inputs: HL = line number (binary)
              11609 ;  Outputs: HL addresses line (if found)
              11610 ;           DE = line number
              11611 ;           Z-flag set if found.
              11612 ; Destroys: A,B,C,D,E,H,L,F
              11613 ;
004143 EB     11614 FINDL:          EX	DE,HL
004144 2A     11615 LD	HL,(PAGE_)
004145 DC 
004146 54 
004147 AF     11616 XOR	A		;A=0
004148 BE     11617 CP	(HL)
004149 3C     11618 INC	A
00414A D0     11619 RET	NC
00414B AF     11620 XOR	A		;CLEAR CARRY
00414C 47     11621 LD	B,A
00414D 4E     11622 FINDL1:         LD	C,(HL)
00414E E5     11623 PUSH	HL
00414F 23     11624 INC	HL
004150 7E     11625 LD	A,(HL)
004151 23     11626 INC	HL
004152 66     11627 LD	H,(HL)
004153 6F     11628 LD	L,A
004154 ED     11629 SBC	HL,DE
004155 52 
004156 E1     11630 POP	HL
004157 D0     11631 RET	NC		;FOUND | PAST
004158 09     11632 ADD	HL,BC
004159 18     11633 JR	FINDL1
00415A F2 
              11634 ;
              11635 ;SETLIN - Search program for line containing address.
              11636 ;   Inputs: Address in (CURLIN)
              11637 ;  Outputs: Line number in HL
              11638 ; Destroys: B,C,D,E,H,L,F
              11639 ;
00415B 06     11640 SETLIN:         LD	B,0
00415C 00 
00415D ED     11641 LD	DE,(CURLIN)
00415E 5B 
00415F F4 
004160 54 
004161 2A     11642 LD	HL,(PAGE_)
004162 DC 
004163 54 
004164 B7     11643 OR	A
004165 ED     11644 SBC	HL,DE
004166 52 
004167 19     11645 ADD	HL,DE
004168 30     11646 JR	NC,SET3
004169 13 
00416A 4E     11647 SET1:           LD	C,(HL)
00416B 0C     11648 INC	C
00416C 0D     11649 DEC	C
00416D 28     11650 JR	Z,SET3
00416E 0E 
00416F 09     11651 ADD	HL,BC
004170 ED     11652 SBC	HL,DE
004171 52 
004172 19     11653 ADD	HL,DE
004173 38     11654 JR	C,SET1
004174 F5 
004175 ED     11655 SBC	HL,BC
004176 42 
004177 23     11656 INC	HL
004178 5E     11657 LD	E,(HL)		;LINE NUMBER
004179 23     11658 INC	HL
00417A 56     11659 LD	D,(HL)
00417B EB     11660 EX	DE,HL
00417C C9     11661 SET2:           RET
              11662 ;
00417D 21     11663 SET3:           LD	HL,0
00417E 00 
00417F 00 
004180 18     11664 JR	SET2
004181 FA 
              11665 ;
              11666 ;SAYLN - PRINT " at line nnnn" MESSAGE.
              11667 ;   Inputs: HL = line number
              11668 ;  Outputs: Carry=0 if line number is zero.
              11669 ;           Carry=1 if line number is non-zero.
              11670 ; Destroys: A,B,C,D,E,H,L,F
              11671 ;
004182 7C     11672 SAYLN:          LD	A,H
004183 B5     11673 OR	L
004184 C8     11674 RET	Z
004185 CD     11675 CALL	TELL
004186 FA 
004187 44 
004188 20     11676 DB	" at line "
004189 61 
00418A 74 
00418B 20 
00418B 6C   
00418C 69 
00418D 6E 
00418E 65 
00418E 20   
004191 00     11677 DB	0
004192 0E     11678 PBCDL:          LD	C,0
004193 00 
004194 18     11679 JR	PBCD0
004195 02 
              11680 ;
              11681 ;PBCD - PRINT NUMBER AS DECIMAL INTEGER.
              11682 ;   Inputs: HL = number (binary).
              11683 ;  Outputs: Carry = 1
              11684 ; Destroys: A,B,C,D,E,H,L,F
              11685 ;
004196 0E     11686 PBCD:           LD	C,' '
004197 20 
004198 06     11687 PBCD0:          LD	B,5
004199 05 
00419A 11     11688 LD	DE,10000
00419B 10 
00419C 27 
00419D AF     11689 PBCD1:          XOR	A
00419E ED     11690 PBCD2:          SBC	HL,DE
00419F 52 
0041A0 3C     11691 INC	A
0041A1 30     11692 JR	NC,PBCD2
0041A2 FB 
0041A3 19     11693 ADD	HL,DE
0041A4 3D     11694 DEC	A
0041A5 28     11695 JR	Z,PBCD3
0041A6 04 
0041A7 CB     11696 SET	4,C
0041A8 E1 
0041A9 CB     11697 SET	5,C
0041AA E9 
0041AB B1     11698 PBCD3:          OR	C
0041AC C4     11699 CALL	NZ,OUTCHR
0041AD 02 
0041AE 41 
0041AF 78     11700 LD	A,B
0041B0 FE     11701 CP	5
0041B1 05 
0041B2 28     11702 JR	Z,PBCD4
0041B3 06 
0041B4 29     11703 ADD	HL,HL
0041B5 54     11704 LD	D,H
0041B6 5D     11705 LD	E,L
0041B7 29     11706 ADD	HL,HL
0041B8 29     11707 ADD	HL,HL
0041B9 19     11708 ADD	HL,DE
0041BA 11     11709 PBCD4:          LD	DE,1000
0041BB E8 
0041BC 03 
0041BD 10     11710 DJNZ	PBCD1
0041BE DE 
0041BF 37     11711 SCF
0041C0 C9     11712 RET
              11713 ;
              11714 ;HANDLE WHOLE ARRAY:
              11715 ;
0041C1 FD     11716 GETV1:          INC	IY
0041C2 23 
0041C3 FD     11717 INC	IY		;SKIP ()
0041C4 23 
0041C5 E5     11718 PUSH	HL		;SET EXIT CONDITIONS
0041C6 DD     11719 POP	IX
0041C7 E1 
0041C8 7A     11720 LD	A,D
0041C9 F6     11721 OR	64		;FLAG ARRAY
0041CA 40 
0041CB BF     11722 CP	A
0041CC C9     11723 RET
              11724 ;
              11725 ;PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
              11726 ;   Inputs: HL, IY as returned from GETVAR (NZ).
              11727 ;  Outputs: As GETVAR.
              11728 ; Destroys: everything
              11729 ;
0041CD CD     11730 PUTVAR:         CALL	CREATE
0041CE 3C 
0041CF 43 
0041D0 FD     11731 LD	A,(IY)
0041D1 7E 
0041D2 00 
0041D3 FE     11732 CP	'('
0041D4 28 
0041D5 20     11733 JR	NZ,GETVZ	;SET EXIT CONDITIONS
0041D6 7D 
0041D7 FD     11734 LD	A,(IY+1)
0041D8 7E 
0041D9 01 
0041DA FE     11735 CP	')'		;WHOLE ARRAY?
0041DB 29 
0041DC 28     11736 JR	Z,GETV1
0041DD E3 
0041DE 3E     11737 ARRAY:          LD	A,14		;'Bad use of array'
0041DF 0E 
0041E0 C3     11738 ERROR3:         JP	ERROR_
0041E1 44 
0041E2 3F 
              11739 ;
              11740 ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
              11741 ;   Inputs: IY addresses first character.
              11742 ;  Outputs: Carry set and NZ if illegal character.
              11743 ;           Z-flag set if variable found, then:
              11744 ;            A = variable type (0,4,5,128 or 129)
              11745 ;                (68,69 or 193 for whole array)
              11746 ;            HL = IX = variable pointer.
              11747 ;            IY updated
              11748 ;           If Z-flag & carry reset, then:
              11749 ;            HL, IY set for subsequent PUTVAR call.
              11750 ; Destroys: everything
              11751 ;
0041E3 FD     11752 GETVAR:         LD	A,(IY)
0041E4 7E 
0041E5 00 
0041E6 FE     11753 CP	'!'
0041E7 21 
0041E8 28     11754 JR	Z,GETV5
0041E9 76 
0041EA FE     11755 CP	'?'
0041EB 3F 
0041EC 28     11756 JR	Z,GETV6
0041ED 76 
0041EE FE     11757 CP	'|'
0041EF 7C 
0041F0 28     11758 JR	Z,GETVF
0041F1 75 
0041F2 FE     11759 CP	'$'
0041F3 24 
0041F4 28     11760 JR	Z,GETV4
0041F5 75 
0041F6 CD     11761 CALL	LOCATE
0041F7 B0 
0041F8 42 
0041F9 C0     11762 RET	NZ
0041FA FD     11763 LD	A,(IY)
0041FB 7E 
0041FC 00 
0041FD FE     11764 CP	'('		;ARRAY?
0041FE 28 
0041FF 20     11765 JR	NZ,GETVX	;EXIT
004200 4B 
004201 FD     11766 LD	A,(IY+1)
004202 7E 
004203 01 
004204 FE     11767 CP	')'		;WHOLE ARRAY?
004205 29 
004206 28     11768 JR	Z,GETV1
004207 B9 
004208 D5     11769 PUSH	DE		;SAVE TYPE
004209 7E     11770 LD	A,(HL)
00420A 23     11771 INC	HL
00420B 66     11772 LD	H,(HL)
00420C 6F     11773 LD	L,A		;INDIRECT LINK
00420D E6     11774 AND	0FEH
00420E FE 
00420F B4     11775 OR	H
004210 28     11776 JR	Z,ARRAY
004211 CC 
004212 7E     11777 LD	A,(HL)		;NO. OF DIMENSIONS
004213 B7     11778 OR	A
004214 28     11779 JR	Z,ARRAY
004215 C8 
004216 23     11780 INC	HL
004217 11     11781 LD	DE,0		;ACCUMULATOR
004218 00 
004219 00 
00421A F5     11782 PUSH	AF
00421B FD     11783 INC	IY		;SKIP (
00421C 23 
00421D E5     11784 GETV3:          PUSH	HL
00421E D5     11785 PUSH	DE
00421F CD     11786 CALL	EXPRI		;SUBSCRIPT
004220 33 
004221 18 
004222 D9     11787 EXX
004223 D1     11788 POP	DE
004224 E3     11789 EX	(SP),HL
004225 4E     11790 LD	C,(HL)
004226 23     11791 INC	HL
004227 46     11792 LD	B,(HL)
004228 23     11793 INC	HL
004229 E3     11794 EX	(SP),HL
00422A EB     11795 EX	DE,HL
00422B D5     11796 PUSH	DE
00422C CD     11797 CALL	MUL16		;HL=HL*BC
00422D BD 
00422E 36 
00422F D1     11798 POP	DE
004230 19     11799 ADD	HL,DE
004231 EB     11800 EX	DE,HL
004232 B7     11801 OR	A
004233 ED     11802 SBC	HL,BC
004234 42 
004235 3E     11803 LD	A,15
004236 0F 
004237 30     11804 JR	NC,ERROR3	;"Subscript"
004238 A7 
004239 E1     11805 POP	HL
00423A F1     11806 POP	AF
00423B 3D     11807 DEC	A		;DIMENSION COUNTER
00423C 20     11808 JR	NZ,GETV2
00423D 1C 
00423E CD     11809 CALL	BRAKET		;CLOSING BRACKET
00423F AE 
004240 20 
004241 F1     11810 POP	AF		;RESTORE TYPE
004242 E5     11811 PUSH	HL
004243 CD     11812 CALL	X14OR5		;DE=DE*n
004244 AD 
004245 36 
004246 E1     11813 POP	HL
004247 19     11814 ADD	HL,DE
004248 57     11815 LD	D,A		;TYPE
004249 FD     11816 LD	A,(IY)
00424A 7E 
00424B 00 
00424C FE     11817 GETVX:          CP	'?'
00424D 3F 
00424E 28     11818 JR	Z,GETV9
00424F 26 
004250 FE     11819 CP	'!'
004251 21 
004252 28     11820 JR	Z,GETV8
004253 1E 
004254 E5     11821 GETVZ:          PUSH	HL		;SET EXIT CONDITIONS
004255 DD     11822 POP	IX
004256 E1 
004257 7A     11823 LD	A,D
004258 BF     11824 CP	A
004259 C9     11825 RET
              11826 ;
00425A F5     11827 GETV2:          PUSH	AF
00425B CD     11828 CALL	COMMA
00425C A2 
00425D 20 
00425E 18     11829 JR	GETV3
00425F BD 
              11830 ;
              11831 ;PROCESS UNARY & BINARY INDIRECTION:
              11832 ;
004260 3E     11833 GETV5:          LD	A,4		;UNARY 32-BIT INDIRN.
004261 04 
004262 18     11834 JR	GETV7
004263 09 
004264 AF     11835 GETV6:          XOR	A		;UNARY 8-BIT INDIRECTION
004265 18     11836 JR	GETV7
004266 06 
004267 3E     11837 GETVF:          LD	A,5		;VARIANT INDIRECTION
004268 05 
004269 18     11838 JR	GETV7
00426A 02 
00426B 3E     11839 GETV4:          LD	A,128		;STATIC STRING
00426C 80 
00426D ED     11840 GETV7:          SBC	HL,HL
00426E 62 
00426F F5     11841 PUSH	AF
004270 18     11842 JR	GETV0
004271 15 
              11843 ;
004272 06     11844 GETV8:          LD	B,4		;32-BIT BINARY INDIRN.
004273 04 
004274 18     11845 JR	GETVA
004275 02 
004276 06     11846 GETV9:          LD	B,0		;8-BIT BINARY INDIRN.
004277 00 
004278 E5     11847 GETVA:          PUSH	HL
004279 DD     11848 POP	IX
00427A E1 
00427B 7A     11849 LD	A,D		;TYPE
00427C FE     11850 CP	129
00427D 81 
00427E C8     11851 RET	Z		;STRING!
00427F C5     11852 PUSH	BC
004280 CD     11853 CALL	LOADN		;LEFT OPERAND
004281 25 
004282 19 
004283 CD     11854 CALL	SFIX
004284 17 
004285 1C 
004286 D9     11855 EXX
004287 E5     11856 GETV0:          PUSH	HL
004288 FD     11857 INC	IY
004289 23 
00428A CD     11858 CALL	ITEMI
00428B 60 
00428C 18 
00428D D9     11859 EXX
00428E D1     11860 POP	DE
00428F F1     11861 POP	AF
004290 19     11862 ADD	HL,DE
004291 E5     11863 PUSH	HL
004292 DD     11864 POP	IX
004293 E1 
004294 BF     11865 CP	A
004295 C9     11866 RET
              11867 ;
              11868 ;GETDEF - Find entry for FN or PROC in dynamic area.
              11869 ;   Inputs: IY addresses byte following "DEF" token.
              11870 ;  Outputs: Z flag set if found
              11871 ;           Carry set if neither FN or PROC first.
              11872 ;           If Z: HL points to entry
              11873 ;                 IY addresses delimiter
              11874 ; Destroys: A,D,E,H,L,IY,F
              11875 ;
004296 FD     11876 GETDEF:         LD	A,(IY+1)
004297 7E 
004298 01 
004299 CD     11877 CALL	RANGE1
00429A FC 
00429B 43 
00429C D8     11878 RET	C
00429D FD     11879 LD	A,(IY)
00429E 7E 
00429F 00 
0042A0 21     11880 LD	HL,FNPTR
0042A1 D8 
0042A2 54 
0042A3 FE     11881 CP	TFN
0042A4 A4 
0042A5 28     11882 JR	Z,LOC2
0042A6 43 
0042A7 21     11883 LD	HL,PROPTR
0042A8 DA 
0042A9 54 
0042AA FE     11884 CP	TPROC
0042AB F2 
0042AC 28     11885 JR	Z,LOC2
0042AD 3C 
0042AE 37     11886 SCF
0042AF C9     11887 RET
              11888 ;
              11889 ;LOCATE - Try to locate variable name in static or
              11890 ;dynamic variables.  If illegal first character return
              11891 ;carry, non-zero.  If found, return no-carry, zero.
              11892 ;If not found, return no-carry, non-zero.
              11893 ;   Inputs: IY addresses first character of name.
              11894 ;           A=(IY)
              11895 ;  Outputs: Z-flag set if found, then:
              11896 ;            IY addresses terminator
              11897 ;            HL addresses location of variable
              11898 ;            D=type of variable:  4 = integer
              11899 ;                                 5 = floating point
              11900 ;                               129 = string
              11901 ; Destroys: A,D,E,H,L,IY,F
              11902 ;
0042B0 D6     11903 LOCATE:         SUB	'@'
0042B1 40 
0042B2 D8     11904 RET	C
0042B3 26     11905 LD	H,0
0042B4 00 
0042B5 FE     11906 CP	'Z'-'@'+1
0042B6 1B 
0042B7 30     11907 JR	NC,LOC0		;NOT STATIC
0042B8 1D 
0042B9 87     11908 ADD	A,A
0042BA 6F     11909 LD	L,A
0042BB FD     11910 LD	A,(IY+1)	;2nd CHARACTER
0042BC 7E 
0042BD 01 
0042BE FE     11911 CP	'%'
0042BF 25 
0042C0 20     11912 JR	NZ,LOC1		;NOT STATIC
0042C1 20 
0042C2 FD     11913 LD	A,(IY+2)
0042C3 7E 
0042C4 02 
0042C5 FE     11914 CP	'('
0042C6 28 
0042C7 28     11915 JR	Z,LOC1		;NOT STATIC
0042C8 19 
0042C9 29     11916 ADD	HL,HL
0042CA 11     11917 LD	DE,STAVAR	;STATIC VARIABLES
0042CB 00 
0042CC 54 
0042CD 19     11918 ADD	HL,DE
0042CE FD     11919 INC	IY
0042CF 23 
0042D0 FD     11920 INC	IY
0042D1 23 
0042D2 16     11921 LD	D,4		;INTEGER TYPE
0042D3 04 
0042D4 AF     11922 XOR	A
0042D5 C9     11923 RET
              11924 ;
0042D6 FE     11925 LOC0:           CP	'_'-'@'
0042D7 1F 
0042D8 D8     11926 RET	C
0042D9 FE     11927 CP	'z'-'@'+1
0042DA 3B 
0042DB 3F     11928 CCF
0042DC 3D     11929 DEC	A		;SET NZ
0042DD D8     11930 RET	C
0042DE D6     11931 SUB	3
0042DF 03 
0042E0 87     11932 ADD	A,A
0042E1 6F     11933 LD	L,A
0042E2 11     11934 LOC1:           LD	DE,DYNVAR	;DYNAMIC VARIABLES
0042E3 6C 
0042E4 54 
0042E5 2D     11935 DEC	L
0042E6 2D     11936 DEC	L
0042E7 37     11937 SCF
0042E8 F8     11938 RET	M
0042E9 19     11939 ADD	HL,DE
0042EA 5E     11940 LOC2:           LD	E,(HL)
0042EB 23     11941 INC	HL
0042EC 56     11942 LD	D,(HL)
0042ED 7A     11943 LD	A,D
0042EE B3     11944 OR	E
0042EF 28     11945 JR	Z,LOC6		;UNDEFINED VARIABLE
0042F0 49 
0042F1 62     11946 LD	H,D
0042F2 6B     11947 LD	L,E
0042F3 23     11948 INC	HL		;SKIP LINK
0042F4 23     11949 INC	HL
0042F5 FD     11950 PUSH	IY
0042F6 E5 
0042F7 7E     11951 LOC3:           LD	A,(HL)		;COMPARE
0042F8 23     11952 INC	HL
0042F9 FD     11953 INC	IY
0042FA 23 
0042FB FD     11954 CP	(IY)
0042FC BE 
0042FD 00 
0042FE 28     11955 JR	Z,LOC3
0042FF F7 
004300 B7     11956 OR	A		;0=TERMINATOR
004301 28     11957 JR	Z,LOC5		;FOUND (MAYBE)
004302 05 
004303 FD     11958 LOC4:           POP	IY
004304 E1 
004305 EB     11959 EX	DE,HL
004306 18     11960 JR	LOC2		;TRY NEXT ENTRY
004307 E2 
              11961 ;
004308 FD     11962 LOC5:           DEC	IY
004309 2B 
00430A FD     11963 LD	A,(IY)
00430B 7E 
00430C 00 
00430D FE     11964 CP	'('
00430E 28 
00430F 28     11965 JR	Z,LOCX		;FOUND
004310 13 
004311 FD     11966 INC	IY
004312 23 
004313 CD     11967 CALL	RANGE
004314 EF 
004315 43 
004316 38     11968 JR	C,LOCX		;FOUND
004317 0C 
004318 FE     11969 CP	'('
004319 28 
00431A 28     11970 JR	Z,LOC4		;KEEP LOOKING
00431B E7 
00431C FD     11971 LD	A,(IY-1)
00431D 7E 
00431E FF 
00431F CD     11972 CALL	RANGE1
004320 FC 
004321 43 
004322 30     11973 JR	NC,LOC4		;KEEP LOOKING
004323 DF 
004324 D1     11974 LOCX:           POP	DE
004325 FD     11975 TYPE:           LD	A,(IY-1)
004326 7E 
004327 FF 
004328 FE     11976 CP	'$'
004329 24 
00432A 16     11977 LD	D,129
00432B 81 
00432C C8     11978 RET	Z		;STRING
00432D FE     11979 CP	'&'
00432E 26 
00432F 16     11980 LD	D,1
004330 01 
004331 C8     11981 RET	Z		;BYTE
004332 FE     11982 CP	'%'
004333 25 
004334 16     11983 LD	D,4
004335 04 
004336 C8     11984 RET	Z		;INTEGER
004337 14     11985 INC	D
004338 BF     11986 CP	A
004339 C9     11987 RET
              11988 ;
00433A 3C     11989 LOC6:           INC	A		;SET NZ
00433B C9     11990 RET
              11991 ;
              11992 ;CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
              11993 ;   Inputs: HL, IY as returned from LOCATE (NZ).
              11994 ;  Outputs: As LOCATE, GETDEF.
              11995 ; Destroys: As LOCATE, GETDEF.
              11996 ;
00433C AF     11997 CREATE:         XOR	A
00433D ED     11998 LD	DE,(FREE)
00433E 5B 
00433F E0 
004340 54 
004341 72     11999 LD	(HL),D
004342 2B     12000 DEC	HL
004343 73     12001 LD	(HL),E
004344 EB     12002 EX	DE,HL
004345 77     12003 LD	(HL),A
004346 23     12004 INC	HL
004347 77     12005 LD	(HL),A
004348 23     12006 INC	HL
004349 FD     12007 LOC7:           INC	IY
00434A 23 
00434B CD     12008 CALL	RANGE		;END OF VARIABLE?
00434C EF 
00434D 43 
00434E 38     12009 JR	C,LOC8
00434F 14 
004350 77     12010 LD	(HL),A
004351 23     12011 INC	HL
004352 CD     12012 CALL	RANGE1
004353 FC 
004354 43 
004355 30     12013 JR	NC,LOC7
004356 F2 
004357 FE     12014 CP	'('
004358 28 
004359 28     12015 JR	Z,LOC8
00435A 09 
00435B FD     12016 LD	A,(IY+1)
00435C 7E 
00435D 01 
00435E FE     12017 CP	'('
00435F 28 
004360 28     12018 JR	Z,LOC7
004361 E7 
004362 FD     12019 INC	IY
004363 23 
004364 36     12020 LOC8:           LD	(HL),0		;TERMINATOR
004365 00 
004366 23     12021 INC	HL
004367 E5     12022 PUSH	HL
004368 CD     12023 CALL	TYPE
004369 25 
00436A 43 
00436B FD     12024 LD	A,(IY)
00436C 7E 
00436D 00 
00436E FE     12025 CP	'('
00436F 28 
004370 3E     12026 LD	A,2		;SIZE OF INDIRECT LINK
004371 02 
004372 28     12027 JR	Z,LOC9
004373 07 
004374 7A     12028 LD	A,D
004375 B7     12029 OR	A		;STRING?
004376 F2     12030 JP	P,LOC9
004377 7B 
004378 43 
004379 3E     12031 LD	A,4
00437A 04 
00437B 36     12032 LOC9:           LD	(HL),0		;INITIALISE TO ZERO
00437C 00 
00437D 23     12033 INC	HL
00437E 3D     12034 DEC	A
00437F 20     12035 JR	NZ,LOC9
004380 FA 
004381 22     12036 LD	(FREE),HL
004382 E0 
004383 54 
004384 CD     12037 CALL	CHECK
004385 86 
004386 32 
004387 E1     12038 POP	HL
004388 AF     12039 XOR	A
004389 C9     12040 RET
              12041 ;
              12042 ;LINNUM - GET LINE NUMBER FROM TEXT STRING
              12043 ;   Inputs: IY = Text Pointer
              12044 ;  Outputs: HL = Line number (zero if none)
              12045 ;           IY updated
              12046 ; Destroys: A,D,E,H,L,IY,F
              12047 ;
00438A CD     12048 LINNUM:         CALL	NXT
00438B 0B 
00438C 45 
00438D 21     12049 LD	HL,0
00438E 00 
00438F 00 
004390 FD     12050 LINNM1:         LD	A,(IY)
004391 7E 
004392 00 
004393 D6     12051 SUB	'0'
004394 30 
004395 D8     12052 RET	C
004396 FE     12053 CP	10
004397 0A 
004398 D0     12054 RET	NC
004399 FD     12055 INC	IY
00439A 23 
00439B 54     12056 LD	D,H
00439C 5D     12057 LD	E,L
00439D 29     12058 ADD	HL,HL		;*2
00439E 38     12059 JR	C,TOOBIGmn
00439F 0F 
0043A0 29     12060 ADD	HL,HL		;*4
0043A1 38     12061 JR	C,TOOBIGmn
0043A2 0C 
0043A3 19     12062 ADD	HL,DE		;*5
0043A4 38     12063 JR	C,TOOBIGmn
0043A5 09 
0043A6 29     12064 ADD	HL,HL		;*10
0043A7 38     12065 JR	C,TOOBIGmn
0043A8 06 
0043A9 5F     12066 LD	E,A
0043AA 16     12067 LD	D,0
0043AB 00 
0043AC 19     12068 ADD	HL,DE		;ADD IN DIGIT
0043AD 30     12069 JR	NC,LINNM1
0043AE E1 
0043AF 3E     12070 TOOBIGmn:         LD	A,20
0043B0 14 
0043B1 C3     12071 JP	ERROR_		;"Too big"
0043B2 44 
0043B3 3F 
              12072 ;
              12073 ;PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
              12074 ;   Inputs: IY = text pointer
              12075 ;  Outputs: HL = first number (10 by default)
              12076 ;           BC = second number (10 by default)
              12077 ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
              12078 ;
0043B4 CD     12079 PAIR:           CALL	LINNUM		;FIRST
0043B5 8A 
0043B6 43 
0043B7 7C     12080 LD	A,H
0043B8 B5     12081 OR	L
0043B9 20     12082 JR	NZ,PAIR1
0043BA 02 
0043BB 2E     12083 LD	L,10
0043BC 0A 
0043BD CD     12084 PAIR1:          CALL	TERMQ
0043BE 36 
0043BF 35 
0043C0 FD     12085 INC	IY
0043C1 23 
0043C2 E5     12086 PUSH	HL
0043C3 21     12087 LD	HL,10
0043C4 0A 
0043C5 00 
0043C6 C4     12088 CALL	NZ,LINNUM	;SECOND
0043C7 8A 
0043C8 43 
0043C9 E3     12089 EX	(SP),HL
0043CA C1     12090 POP	BC
0043CB 78     12091 LD	A,B
0043CC B1     12092 OR	C
0043CD C0     12093 RET	NZ
0043CE CD     12094 CALL	EXTERR
0043CF 55 
0043D0 3F 
0043D1 53     12095 DB	"Silly"
0043D2 69 
0043D3 6C 
0043D4 6C 
0043D4 79   
0043D6 00     12096 DB	0
              12097 ;
              12098 ;DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
              12099 ;   Inputs: IY = text pointer
              12100 ;  Outputs: HL = points to program text
              12101 ;           BC = second number (0 by default)
              12102 ; Destroys: A,B,C,D,E,H,L,IY,F
              12103 ;
0043D7 CD     12104 DLPAIR:         CALL	LINNUM
0043D8 8A 
0043D9 43 
0043DA E5     12105 PUSH	HL
0043DB CD     12106 CALL	TERMQ
0043DC 36 
0043DD 35 
0043DE 28     12107 JR	Z,DLP1
0043DF 09 
0043E0 FE     12108 CP	TIF
0043E1 E7 
0043E2 28     12109 JR	Z,DLP1
0043E3 05 
0043E4 FD     12110 INC	IY
0043E5 23 
0043E6 CD     12111 CALL	LINNUM
0043E7 8A 
0043E8 43 
0043E9 E3     12112 DLP1:           EX	(SP),HL
0043EA CD     12113 CALL	FINDL
0043EB 43 
0043EC 41 
0043ED C1     12114 POP	BC
0043EE C9     12115 RET
              12116 ;
              12117 ;TEST FOR VALID CHARACTER IN VARIABLE NAME:
              12118 ;   Inputs: IY addresses character
              12119 ;  Outputs: Carry set if out-of-range.
              12120 ; Destroys: A,F
              12121 ;
0043EF FD     12122 RANGE:          LD	A,(IY)
0043F0 7E 
0043F1 00 
0043F2 FE     12123 CP	'$'
0043F3 24 
0043F4 D8     12124 RET	C
0043F5 FE     12125 CP	'&'+1
0043F6 27 
0043F7 3F     12126 CCF
0043F8 D0     12127 RET	NC
0043F9 FE     12128 CP	'('
0043FA 28 
0043FB C8     12129 RET	Z
0043FC FE     12130 RANGE1:         CP	'0'
0043FD 30 
0043FE D8     12131 RET	C
0043FF FE     12132 CP	'9'+1
004400 3A 
004401 3F     12133 CCF
004402 D0     12134 RET	NC
004403 FE     12135 CP	'@'		;V2.4
004404 40 
004405 C8     12136 RET	Z
004406 FE     12137 RANGE2:         CP	'A'
004407 41 
004408 D8     12138 RET	C
004409 FE     12139 CP	'Z'+1
00440A 5B 
00440B 3F     12140 CCF
00440C D0     12141 RET	NC
00440D FE     12142 CP	'_'
00440E 5F 
00440F D8     12143 RET	C
004410 FE     12144 CP	'z'+1
004411 7B 
004412 3F     12145 CCF
004413 C9     12146 RET
              12147 ;
              12148 ;LEXAN - LEXICAL ANALYSIS.
              12149 ;  Bit 0,C: 1=left, 0=right
              12150 ;  Bit 3,C: 1=in HEX
              12151 ;  Bit 4,C: 1=accept line number
              12152 ;  Bit 5,C: 1=in variable, FN, PROC
              12153 ;  Bit 6,C: 1=in REM, DATA, *
              12154 ;  Bit 7,C: 1=in quotes
              12155 ;   Inputs: IY addresses source string
              12156 ;           DE addresses destination string
              12157 ;           (must be page boundary)
              12158 ;           C  sets initial mode
              12159 ;  Outputs: DE, IY updated
              12160 ;           A holds carriage return
              12161 ;
004414 12     12162 LEXAN1:         LD	(DE),A		;TRANSFER TO BUFFER
004415 13     12163 INC	DE		;INCREMENT POINTERS
004416 FD     12164 INC	IY
004417 23 
004418 7B     12165 LEXAN2:         LD	A,E		;MAIN ENTRY
004419 FE     12166 CP	252		;TEST LENGTH
00441A FC 
00441B 3E     12167 LD	A,19
00441C 13 
00441D D2     12168 JP	NC,ERROR_	;'String too long'
00441E 44 
00441F 3F 
004420 FD     12169 LD	A,(IY)
004421 7E 
004422 00 
004423 FE     12170 CP	CR
004424 0D 
004425 C8     12171 RET	Z		;END OF LINE
004426 CD     12172 CALL	RANGE1
004427 FC 
004428 43 
004429 30     12173 JR	NC,LEXAN3
00442A 04 
00442B CB     12174 RES	5,C		;NOT IN VARIABLE
00442C A9 
00442D CB     12175 RES	3,C		;NOT IN HEX
00442E 99 
00442F FE     12176 LEXAN3:         CP	' '
004430 20 
004431 28     12177 JR	Z,LEXAN1	;PASS SPACES
004432 E1 
004433 FE     12178 CP	','
004434 2C 
004435 28     12179 JR	Z,LEXAN1	;PASS COMMAS
004436 DD 
004437 FE     12180 CP	'G'
004438 47 
004439 38     12181 JR	C,LEXAN4
00443A 02 
00443B CB     12182 RES	3,C		;NOT IN HEX
00443C 99 
00443D FE     12183 LEXAN4:         CP	'"'
00443E 22 
00443F 20     12184 JR	NZ,LEXAN5
004440 05 
004441 CB     12185 RL	C
004442 11 
004443 3F     12186 CCF			;TOGGLE C7
004444 CB     12187 RR	C
004445 19 
004446 CB     12188 LEXAN5:         BIT	4,C
004447 61 
004448 28     12189 JR	Z,LEXAN6
004449 10 
00444A CB     12190 RES	4,C
00444B A1 
00444C C5     12191 PUSH	BC
00444D D5     12192 PUSH	DE
00444E CD     12193 CALL	LINNUM		;GET LINE NUMBER
00444F 8A 
004450 43 
004451 D1     12194 POP	DE
004452 C1     12195 POP	BC
004453 7C     12196 LD	A,H
004454 B5     12197 OR	L
004455 C4     12198 CALL	NZ,ENCODE	;ENCODE LINE NUMBER
004456 BF 
004457 44 
004458 18     12199 JR	LEXAN2		;CONTINUE
004459 BE 
              12200 ;
00445A 0D     12201 LEXAN6:         DEC	C
00445B 28     12202 JR	Z,LEXAN7	;C=1 (LEFT)
00445C 09 
00445D 0C     12203 INC	C
00445E 20     12204 JR	NZ,LEXAN1
00445F B4 
004460 B7     12205 OR	A
004461 F4     12206 CALL	P,LEX		;TOKENISE IF POSS.
004462 A3 
004463 3F 
004464 18     12207 JR	LEXAN8
004465 12 
              12208 ;
004466 FE     12209 LEXAN7:         CP	'*'
004467 2A 
004468 28     12210 JR	Z,LEXAN9
004469 16 
00446A B7     12211 OR	A
00446B F4     12212 CALL	P,LEX		;TOKENISE IF POSS.
00446C A3 
00446D 3F 
00446E FE     12213 CP	TOKLO
00446F 8F 
004470 38     12214 JR	C,LEXAN8
004471 06 
004472 FE     12215 CP	TOKHI+1
004473 94 
004474 30     12216 JR	NC,LEXAN8
004475 02 
004476 C6     12217 ADD	A,OFFSET	;LEFT VERSION
004477 40 
004478 FE     12218 LEXAN8:         CP	TREM
004479 F4 
00447A 28     12219 JR	Z,LEXAN9
00447B 04 
00447C FE     12220 CP	TDATA
00447D DC 
00447E 20     12221 JR	NZ,LEXANA
00447F 02 
004480 CB     12222 LEXAN9:         SET	6,C		;QUIT TOKENISING
004481 F1 
004482 FE     12223 LEXANA:         CP	TFN
004483 A4 
004484 28     12224 JR	Z,LEXANB
004485 09 
004486 FE     12225 CP	TPROC
004487 F2 
004488 28     12226 JR	Z,LEXANB
004489 05 
00448A CD     12227 CALL	RANGE2
00448B 06 
00448C 44 
00448D 38     12228 JR	C,LEXANC
00448E 02 
00448F CB     12229 LEXANB:         SET	5,C		;IN VARIABLE/FN/PROC
004490 E9 
004491 FE     12230 LEXANC:         CP	'&'
004492 26 
004493 20     12231 JR	NZ,LEXAND
004494 02 
004495 CB     12232 SET	3,C		;IN HEX
004496 D9 
004497 21     12233 LEXAND:         LD	HL,LIST1
004498 B6 
004499 44 
00449A C5     12234 PUSH	BC
00449B 01     12235 LD	BC,LIST1L
00449C 06 
00449D 00 
00449E ED     12236 CPIR
00449F B1 
0044A0 C1     12237 POP	BC
0044A1 20     12238 JR	NZ,LEXANE
0044A2 02 
0044A3 CB     12239 SET	4,C		;ACCEPT LINE NUMBER
0044A4 E1 
0044A5 21     12240 LEXANE:         LD	HL,LIST2
0044A6 BA 
0044A7 44 
0044A8 C5     12241 PUSH	BC
0044A9 01     12242 LD	BC,LIST2L
0044AA 05 
0044AB 00 
0044AC ED     12243 CPIR
0044AD B1 
0044AE C1     12244 POP	BC
0044AF 20     12245 JR	NZ,LEXANF
0044B0 02 
0044B1 CB     12246 SET	0,C		;ENTER LEFT MODE
0044B2 C1 
0044B3 C3     12247 LEXANF:         JP	LEXAN1
0044B4 14 
0044B5 44 
              12248 ;
0044B6 E5     12249 LIST1:          DB	TGOTO
0044B7 E4     12250 DB	TGOSUB
0044B8 F7     12251 DB	TRESTORE
0044B9 FC     12252 DB	TTRACE
0044BA 8C     12253 LIST2:          DB	TTHEN
0044BB 8B     12254 DB	TELSE
              12255 LIST1L:         EQU	$-LIST1
0044BC F5     12256 DB	TREPEAT
0044BD 85     12257 DB	TERROR
0044BE 3A     12258 DB	':'
              12259 LIST2L:         EQU	$-LIST2
              12260 ;
              12261 ;ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
              12262 ;   Inputs: HL=line number, DE=string pointer
              12263 ;  Outputs: DE updated, BIT 4,C set.
              12264 ; Destroys: A,B,C,D,E,H,L,F
              12265 ;
0044BF CB     12266 ENCODE:         SET	4,C
0044C0 E1 
0044C1 EB     12267 EX	DE,HL
0044C2 36     12268 LD	(HL),TLINO
0044C3 8D 
0044C4 23     12269 INC	HL
0044C5 7A     12270 LD	A,D
0044C6 E6     12271 AND	0C0H
0044C7 C0 
0044C8 0F     12272 RRCA
0044C9 0F     12273 RRCA
0044CA 47     12274 LD	B,A
0044CB 7B     12275 LD	A,E
0044CC E6     12276 AND	0C0H
0044CD C0 
0044CE B0     12277 OR	B
0044CF 0F     12278 RRCA
0044D0 0F     12279 RRCA
0044D1 EE     12280 XOR	01010100B
0044D2 54 
0044D3 77     12281 LD	(HL),A
0044D4 23     12282 INC	HL
0044D5 7B     12283 LD	A,E
0044D6 E6     12284 AND	3FH
0044D7 3F 
0044D8 F6     12285 OR	'@'
0044D9 40 
0044DA 77     12286 LD	(HL),A
0044DB 23     12287 INC	HL
0044DC 7A     12288 LD	A,D
0044DD E6     12289 AND	3FH
0044DE 3F 
0044DF F6     12290 OR	'@'
0044E0 40 
0044E1 77     12291 LD	(HL),A
0044E2 23     12292 INC	HL
0044E3 EB     12293 EX	DE,HL
0044E4 C9     12294 RET
              12295 ;
              12296 ;TEXT - OUTPUT MESSAGE.
              12297 ;   Inputs: HL addresses text (terminated by nul)
              12298 ;  Outputs: HL addresses character following nul.
              12299 ; Destroys: A,H,L,F
              12300 ;
0044E5 2A     12301 REPORT:         LD	HL,(ERRTXT)
0044E6 EE 
0044E7 54 
0044E8 7E     12302 TEXT_:          LD	A,(HL)
0044E9 23     12303 INC	HL
0044EA B7     12304 OR	A
0044EB C8     12305 RET	Z
0044EC FE     12306 CP	LF
0044ED 0A 
0044EE 28     12307 JR	Z,TEXTLF	;Token for TINT
0044EF 05 
0044F0 CD     12308 CALL	OUT
0044F1 1B 
0044F2 41 
0044F3 18     12309 JR	TEXT_
0044F4 F3 
              12310 ;
0044F5 CD     12311 TEXTLF:         CALL	OUTCHR
0044F6 02 
0044F7 41 
0044F8 18     12312 JR	TEXT_
0044F9 EE 
              12313 ;
              12314 ;TELL - OUTPUT MESSAGE.
              12315 ;   Inputs: Text follows subroutine call (term=nul)
              12316 ; Destroys: A,F
              12317 ;
0044FA E3     12318 TELL:           EX	(SP),HL		;GET RETURN ADDRESS
0044FB CD     12319 CALL	TEXT_
0044FC E8 
0044FD 44 
0044FE E3     12320 EX	(SP),HL
0044FF C9     12321 RET
              12322 ;
              12323 ; NLIST - Check for end of list
              12324 ;
004500 CD     12325 NLIST:          CALL	NXT
004501 0B 
004502 45 
004503 FE     12326 CP	','		;ANOTHER VARIABLE?
004504 2C 
004505 28     12327 JR	Z,NXT1
004506 0A 
004507 C1     12328 POP	BC		;DITCH RETURN ADDRESS
004508 C3     12329 JP	XEQ
004509 99 
00450A 24 
              12330 ;
00450B FD     12331 NXT:            LD	A,(IY)
00450C 7E 
00450D 00 
00450E FE     12332 CP	' '
00450F 20 
004510 C0     12333 RET	NZ
004511 FD     12334 NXT1:           INC	IY
004512 23 
004513 18     12335 JR	NXT
004514 F6 
              12336 ;
              12337 ;                END	START
              12338 ; --- End main.asm ---
              12339 
              12340 ; --- Begin math.asm ---
              12341 ;
              12342 ;Automatically created from original source on 2024-12-15 15:29:12
              12343 ;
              12344 .ASSUME ADL = 0
              12345 ;	.ORG 0x0000
              12346 ;                SEGMENT CODE
              12347 ;
              12348 ;Z80 FLOATING POINT PACKAGE
              12349 ;(C) COPYRIGHT  R.T.RUSSELL  1986-2024
              12350 ;VERSION 0.0, 26-10-1986
              12351 ;VERSION 0.1, 14-12-1988 (BUG FIX)
              12352 ;VERSION 5.0, 16-06-2024 (SHIFTS ADDED)
              12353 ;
              12354 ;BINARY FLOATING POINT REPRESENTATION:
              12355 ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
              12356 ;    8 BIT EXCESS-128 SIGNED EXPONENT
              12357 ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
              12358 ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
              12359 ;
              12360 ;BINARY INTEGER REPRESENTATION:
              12361 ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
              12362 ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
              12363 ;
              12364 ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
              12365 ;                            EXPONENT - C
              12366 ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
              12367 ;                               EXPONENT - B
              12368 ;
              12369 ;Error codes:
              12370 ;
              12371 BADOP:          EQU	1		;Bad operation code
              12372 DIVBY0:         EQU	18		;Division by zero
              12373 TOOBIG:         EQU	20		;Too big
              12374 NGROOT:         EQU	21		;Negative root
              12375 LOGRNG:         EQU	22		;Log range
              12376 ACLOST:         EQU	23		;Accuracy lost
              12377 EXPRNG:         EQU	24		;Exp range
              12378 ;
              12379 ;                XDEF	FPP
              12380 ;                XREF	STORE5
              12381 ;                XREF	DLOAD5
              12382 ;
              12383 ;Call entry and despatch code:
              12384 ;
004515 FD     12385 FPP:            PUSH	IY		;Save IY
004516 E5 
004517 FD     12386 LD	IY,0
004518 21 
004519 00 
00451A 00 
00451B FD     12387 ADD	IY,SP		;Save SP in IY
00451C 39 
00451D CD     12388 CALL	OP		;Perform operation
00451E 2C 
00451F 45 
004520 BF     12389 CP	A		;Good return (Z, NC)
004521 FD     12390 EXITmat:           POP	IY		;Restore IY
004522 E1 
004523 C9     12391 RET			;Return to caller
              12392 ;
              12393 ;Error exit:
              12394 ;
004524 3E     12395 BADmat:            LD	A,BADOP		;"Bad operation code"
004525 01 
004526 FD     12396 ERROR_mat:         LD	SP,IY		;Restore SP from IY
004527 F9 
004528 B7     12397 OR	A		;Set NZ
004529 37     12398 SCF			;Set C
00452A 18     12399 JR	EXITmat
00452B F5 
              12400 ;
              12401 ;Perform operation or function:
              12402 ;
              12403 ; OP:             CP	(RTABLE-DTABLE)/2
00452C FE     12404 OP:             CP	RTABLE-DTABLE/2
00452D 2E 
00452E 30     12405 JR	NC,BADmat
00452F F4 
              12406 ; CP	(FTABLE-DTABLE)/2
004530 FE     12407 CP	FTABLE-DTABLE/2
004531 10 
004532 30     12408 JR	NC,DISPAT
004533 07 
004534 08     12409 EX	AF,AF'
004535 78     12410 LD	A,B
004536 B1     12411 OR	C		;Both integer?
004537 C4     12412 CALL	NZ,FLOATA	;No, so float both
004538 A5 
004539 4E 
00453A 08     12413 EX	AF,AF'
00453B E5     12414 DISPAT:         PUSH	HL
00453C 21     12415 LD	HL,DTABLE
00453D 4C 
00453E 45 
00453F C5     12416 PUSH	BC
004540 87     12417 ADD	A,A		;A = op-code * 2
004541 4F     12418 LD	C,A
004542 06     12419 LD	B,0		;BC = op-code * 2
004543 00 
004544 09     12420 ADD	HL,BC
004545 7E     12421 LD	A,(HL)		;Get low byte
004546 23     12422 INC	HL
004547 66     12423 LD	H,(HL)		;Get high byte
004548 6F     12424 LD	L,A
004549 C1     12425 POP	BC
00454A E3     12426 EX	(SP),HL
00454B C9     12427 RET			;Off to routine
              12428 ;
              12429 ;Despatch table:
              12430 ;
00454C CB     12431 DTABLE:         DW	IAND		;0  & (INTEGER)
00454D 45 
00454E 18     12432 DW	IBDIV		;1  DIV
00454F 46 
004550 DD     12433 DW	IEOR		;2  EOR
004551 45 
004552 01     12434 DW	IMOD		;3  MOD
004553 46 
004554 EF     12435 DW	IOR		;4  |
004555 45 
004556 16     12436 DW	ILE		;5  <=
004557 48 
004558 23     12437 DW	INE		;6  <>
004559 48 
00455A 0B     12438 DW	IGE		;7  >=
00455B 48 
00455C F4     12439 DW	ILT		;8  <
00455D 47 
00455E 2E     12440 DW	IEQ		;9  =
00455F 48 
004560 E2     12441 DW	IMUL		;10 *
004561 46 
004562 3B     12442 DW	IADD		;11 +
004563 46 
004564 FF     12443 DW	IGT		;12 >
004565 47 
004566 25     12444 DW	ISUB		;13 -
004567 46 
004568 5D     12445 DW	IPOW		;14 ^
004569 47 
00456A 9A     12446 DW	IDIV		;15 /
00456B 46 
              12447 ;
00456C 7E     12448 FTABLE:         DW	ABS		;16 ABS
00456D 48 
00456E DA     12449 DW	ACS		;17 ACS
00456F 4B 
004570 36     12450 DW	ASN		;18 ASN
004571 4B 
004572 5B     12451 DW	ATN		;19 ATN
004573 4B 
004574 74     12452 DW	COS		;20 COS
004575 49 
004576 A8     12453 DW	DEG		;21 DEG
004577 48 
004578 19     12454 DW	EXP		;22 EXP
004579 4A 
00457A EE     12455 DW	INT_		;23 INT_
00457B 48 
00457C A4     12456 DW	LN		;24 LN
00457D 4A 
00457E 24     12457 DW	LOG		;25 LOG
00457F 4B 
004580 89     12458 DW	CPL_		;26 NOT
004581 48 
004582 B0     12459 DW	RAD		;27 RAD
004583 48 
004584 C6     12460 DW	SGN		;28 SGN
004585 48 
004586 7F     12461 DW	SIN		;29 SIN
004587 49 
004588 04     12462 DW	SQR		;30 SQR
004589 49 
00458A 57     12463 DW	TAN		;31 TAN
00458B 49 
              12464 ;
00458C 21     12465 DW	ZEROmat		;32 ZERO
00458D 4F 
00458E F8     12466 DW	FONE		;33 FONE
00458F 49 
004590 32     12467 DW	TRUE		;34 TRUE
004591 48 
004592 9C     12468 DW	PI		;35 PI
004593 48 
              12469 ;
004594 D6     12470 DW	VAL		;36 VAL
004595 48 
004596 E2     12471 DW	STRmat		;37 STR$
004597 4B 
              12472 ;
004598 F7     12473 DW	SFIXmat		;38 FIX
004599 4D 
00459A B2     12474 DW	SFLOAT		;39 FLOAT
00459B 4E 
              12475 ;
00459C F7     12476 DW	FTEST		;40 TEST
00459D 4E 
00459E 08     12477 DW	FCOMP		;41 COMPARE
00459F 4F 
              12478 ;
0045A0 3D     12479 DW	ISHL		;42 <<
0045A1 48 
0045A2 3D     12480 DW	ISHX		;43 <<<
0045A3 48 
0045A4 4A     12481 DW	ISAR		;44 >>
0045A5 48 
0045A6 5C     12482 DW	ISHR		;45 >>>
0045A7 48 
              12483 ;
0045A8 C8     12484 RTABLE:         DW	FAND		;& (FLOATING-POINT)
0045A9 45 
0045AA 15     12485 DW	FBDIV		;DIV
0045AB 46 
0045AC DA     12486 DW	FEOR		;EOR
0045AD 45 
0045AE FE     12487 DW	FMOD		;MOD
0045AF 45 
0045B0 EC     12488 DW	FOR		;|
0045B1 45 
0045B2 11     12489 DW	FLE		;<=
0045B3 48 
0045B4 1E     12490 DW	FNE		;<>
0045B5 48 
0045B6 06     12491 DW	FGE		;>=
0045B7 48 
0045B8 EF     12492 DW	FLT		;<
0045B9 47 
0045BA 29     12493 DW	FEQ		;=
0045BB 48 
0045BC 0D     12494 DW	FMUL		;*
0045BD 47 
0045BE 45     12495 DW	FADD		;+
0045BF 46 
0045C0 FA     12496 DW	FGT		;>
0045C1 47 
0045C2 2F     12497 DW	FSUB		;-
0045C3 46 
0045C4 C5     12498 DW	FPOW		;^
0045C5 47 
0045C6 9D     12499 DW	FDIV		;/
0045C7 46 
              12500 ;
              12501 ;ARITHMETIC AND LOGICAL OPERATORS:
              12502 ;All take two arguments, in HLH'L'C & DED'E'B.
              12503 ;Output in HLH'L'C
              12504 ;All registers except IX, IY destroyed.
              12505 ; (N.B. FPOW destroys IX).
              12506 ;
              12507 ;FAND - Floating-point AND.
              12508 ;IAND - Integer AND.
              12509 ;
0045C8 CD     12510 FAND:           CALL	FIX2
0045C9 EE 
0045CA 4D 
0045CB 7C     12511 IAND:           LD	A,H
0045CC A2     12512 AND	D
0045CD 67     12513 LD	H,A
0045CE 7D     12514 LD	A,L
0045CF A3     12515 AND	E
0045D0 6F     12516 LD	L,A
0045D1 D9     12517 EXX
0045D2 7C     12518 LD	A,H
0045D3 A2     12519 AND	D
0045D4 67     12520 LD	H,A
0045D5 7D     12521 LD	A,L
0045D6 A3     12522 AND	E
0045D7 6F     12523 LD	L,A
0045D8 D9     12524 EXX
0045D9 C9     12525 RET
              12526 ;
              12527 ;FEOR - Floating-point exclusive-OR.
              12528 ;IEOR - Integer exclusive-OR.
              12529 ;
0045DA CD     12530 FEOR:           CALL	FIX2
0045DB EE 
0045DC 4D 
0045DD 7C     12531 IEOR:           LD	A,H
0045DE AA     12532 XOR	D
0045DF 67     12533 LD	H,A
0045E0 7D     12534 LD	A,L
0045E1 AB     12535 XOR	E
0045E2 6F     12536 LD	L,A
0045E3 D9     12537 EXX
0045E4 7C     12538 LD	A,H
0045E5 AA     12539 XOR	D
0045E6 67     12540 LD	H,A
0045E7 7D     12541 LD	A,L
0045E8 AB     12542 XOR	E
0045E9 6F     12543 LD	L,A
0045EA D9     12544 EXX
0045EB C9     12545 RET
              12546 ;
              12547 ;FOR - Floating-point OR.
              12548 ;IOR - Integer OR.
              12549 ;
0045EC CD     12550 FOR:            CALL	FIX2
0045ED EE 
0045EE 4D 
0045EF 7C     12551 IOR:            LD	A,H
0045F0 B2     12552 OR	D
0045F1 67     12553 LD	H,A
0045F2 7D     12554 LD	A,L
0045F3 B3     12555 OR	E
0045F4 6F     12556 LD	L,A
0045F5 D9     12557 EXX
0045F6 7C     12558 LD	A,H
0045F7 B2     12559 OR	D
0045F8 67     12560 LD	H,A
0045F9 7D     12561 LD	A,L
0045FA B3     12562 OR	E
0045FB 6F     12563 LD	L,A
0045FC D9     12564 EXX
0045FD C9     12565 RET
              12566 ;
              12567 ;FMOD - Floating-point remainder.
              12568 ;IMOD - Integer remainder.
              12569 ;
0045FE CD     12570 FMOD:           CALL	FIX2
0045FF EE 
004600 4D 
004601 7C     12571 IMOD:           LD	A,H
004602 AA     12572 XOR	D		;DIV RESULT SIGN
004603 CB     12573 BIT	7,H
004604 7C 
004605 CD     12574 CALL	ABS2		;MAKE BOTH POSITIVE
004606 F5 
004607 50 
004608 3E     12575 LD	A,-33
004609 DF 
00460A CD     12576 CALL	DIVA		;DIVIDE
00460B 31 
00460C 50 
00460D D9     12577 EXX
00460E 0E     12578 LD	C,0		;INTEGER MARKER
00460F 00 
004610 08     12579 EX	AF,AF'
004611 C8     12580 RET	Z
004612 C3     12581 JP	NEGATE
004613 06 
004614 4E 
              12582 ;
              12583 ;BDIV - Integer division.
              12584 ;
004615 CD     12585 FBDIV:          CALL	FIX2
004616 EE 
004617 4D 
004618 CD     12586 IBDIV:          CALL	IMOD
004619 01 
00461A 46 
00461B B7     12587 OR	A
00461C CD     12588 CALL	SWAP
00461D DC 
00461E 4E 
00461F 0E     12589 LD	C,0
004620 00 
004621 F0     12590 RET	P
004622 C3     12591 JP	NEGATE
004623 06 
004624 4E 
              12592 ;
              12593 ;ISUB - Integer subtraction.
              12594 ;FSUB - Floating point subtraction with rounding.
              12595 ;
004625 CD     12596 ISUB:           CALL	SUB
004626 64 
004627 4F 
004628 E0     12597 RET	PO
004629 CD     12598 CALL	ADD
00462A 5E 
00462B 4F 
00462C CD     12599 CALL	FLOAT2
00462D A9 
00462E 4E 
00462F 7A     12600 FSUB:           LD	A,D
004630 EE     12601 XOR	80H		;CHANGE SIGN THEN ADD
004631 80 
004632 57     12602 LD	D,A
004633 18     12603 JR	FADD
004634 10 
              12604 ;
              12605 ;Reverse subtract.
              12606 ;
004635 7C     12607 RSUB:           LD	A,H
004636 EE     12608 XOR	80H
004637 80 
004638 67     12609 LD	H,A
004639 18     12610 JR	FADD
00463A 0A 
              12611 ;
              12612 ;IADD - Integer addition.
              12613 ;FADD - Floating point addition with rounding.
              12614 ;
00463B CD     12615 IADD:           CALL	ADD
00463C 5E 
00463D 4F 
00463E E0     12616 RET	PO
00463F CD     12617 CALL	SUB
004640 64 
004641 4F 
004642 CD     12618 CALL	FLOAT2
004643 A9 
004644 4E 
004645 05     12619 FADD:           DEC	B
004646 04     12620 INC	B
004647 C8     12621 RET	Z		;ARG 2 ZERO
004648 0D     12622 DEC	C
004649 0C     12623 INC	C
00464A CA     12624 JP	Z,SWAP		;ARG 1 ZERO
00464B DC 
00464C 4E 
00464D D9     12625 EXX
00464E 01     12626 LD	BC,0		;INITIALISE
00464F 00 
004650 00 
004651 D9     12627 EXX
004652 7C     12628 LD	A,H
004653 AA     12629 XOR	D		;XOR SIGNS
004654 F5     12630 PUSH	AF
004655 78     12631 LD	A,B
004656 B9     12632 CP	C		;COMPARE EXPONENTS
004657 DC     12633 CALL	C,SWAP		;MAKE DED'E'B LARGEST
004658 DC 
004659 4E 
00465A 78     12634 LD	A,B
00465B CB     12635 SET	7,H		;IMPLIED 1
00465C FC 
00465D C4     12636 CALL	NZ,FIX		;ALIGN
00465E DE 
00465F 4D 
004660 F1     12637 POP	AF
004661 7A     12638 LD	A,D		;SIGN OF LARGER
004662 CB     12639 SET	7,D		;IMPLIED 1
004663 FA 
004664 FA     12640 JP	M,FADD3		;SIGNS DIFFERENT
004665 71 
004666 46 
004667 CD     12641 CALL	ADD		;HLH'L'=HLH'L'+DED'E'
004668 5E 
004669 4F 
00466A DC     12642 CALL	C,DIV2		;NORMALISE
00466B E4 
00466C 4E 
00466D CB     12643 SET	7,H
00466E FC 
00466F 18     12644 JR	FADD4
004670 0A 
              12645 ;
004671 CD     12646 FADD3:          CALL	SUB		;HLH'L'=HLH'L'-DED'E'
004672 64 
004673 4F 
004674 DC     12647 CALL	C,NEG		;NEGATE HLH'L'B'C'
004675 1A 
004676 4E 
004677 CD     12648 CALL	FLO48
004678 86 
004679 4E 
00467A 2F     12649 CPL			;CHANGE RESULT SIGN
00467B D9     12650 FADD4:          EXX
00467C EB     12651 EX	DE,HL
00467D 21     12652 LD	HL,8000H
00467E 00 
00467F 80 
004680 B7     12653 OR	A		;CLEAR CARRY
004681 ED     12654 SBC	HL,BC
004682 42 
004683 EB     12655 EX	DE,HL
004684 D9     12656 EXX
004685 CC     12657 CALL	Z,ODD		;ROUND UNBIASSED
004686 D6 
004687 4E 
004688 DC     12658 CALL	C,ADD1		;ROUND UP
004689 C8 
00468A 4E 
00468B DC     12659 CALL	C,INCC
00468C F0 
00468D 4E 
00468E CB     12660 RES	7,H
00468F BC 
004690 0D     12661 DEC	C
004691 0C     12662 INC	C
004692 CA     12663 JP	Z,ZEROmat
004693 21 
004694 4F 
004695 B7     12664 OR	A		;RESULT SIGNQ
004696 F0     12665 RET	P		;POSITIVE
004697 CB     12666 SET	7,H		;NEGATIVE
004698 FC 
004699 C9     12667 RET
              12668 ;
              12669 ;IDIV - Integer division.
              12670 ;FDIV - Floating point division with rounding.
              12671 ;
00469A CD     12672 IDIV:           CALL	FLOAT2
00469B A9 
00469C 4E 
00469D 05     12673 FDIV:           DEC	B		;TEST FOR ZERO
00469E 04     12674 INC	B
00469F 3E     12675 LD	A,DIVBY0
0046A0 12 
0046A1 CA     12676 JP	Z,ERROR_mat		;"Division by zero"
0046A2 26 
0046A3 45 
0046A4 0D     12677 DEC	C		;TEST FOR ZERO
0046A5 0C     12678 INC	C
0046A6 C8     12679 RET	Z
0046A7 7C     12680 LD	A,H
0046A8 AA     12681 XOR	D		;CALC. RESULT SIGN
0046A9 08     12682 EX	AF,AF'		;SAVE SIGN
0046AA CB     12683 SET	7,D		;REPLACE IMPLIED 1's
0046AB FA 
0046AC CB     12684 SET	7,H
0046AD FC 
0046AE C5     12685 PUSH	BC		;SAVE EXPONENTS
0046AF 42     12686 LD	B,D		;LOAD REGISTERS
0046B0 4B     12687 LD	C,E
0046B1 11     12688 LD	DE,0
0046B2 00 
0046B3 00 
0046B4 D9     12689 EXX
0046B5 42     12690 LD	B,D
0046B6 4B     12691 LD	C,E
0046B7 11     12692 LD	DE,0
0046B8 00 
0046B9 00 
0046BA 3E     12693 LD	A,-32		;LOOP COUNTER
0046BB E0 
0046BC CD     12694 CALL	DIVA		;DIVIDE
0046BD 31 
0046BE 50 
0046BF D9     12695 EXX
0046C0 CB     12696 BIT	7,D
0046C1 7A 
0046C2 D9     12697 EXX
0046C3 CC     12698 CALL	Z,DIVB		;NORMALISE & INC A
0046C4 4C 
0046C5 50 
0046C6 EB     12699 EX	DE,HL
0046C7 D9     12700 EXX
0046C8 CB     12701 SRL	B		;DIVISOR/2
0046C9 38 
0046CA CB     12702 RR	C
0046CB 19 
0046CC B7     12703 OR	A		;CLEAR CARRY
0046CD ED     12704 SBC	HL,BC		;REMAINDER-DIVISOR/2
0046CE 42 
0046CF 3F     12705 CCF
0046D0 EB     12706 EX	DE,HL		;RESULT IN HLH'L'
0046D1 CC     12707 CALL	Z,ODD		;ROUND UNBIASSED
0046D2 D6 
0046D3 4E 
0046D4 DC     12708 CALL	C,ADD1		;ROUND UP
0046D5 C8 
0046D6 4E 
0046D7 C1     12709 POP	BC		;RESTORE EXPONENTS
0046D8 DC     12710 CALL	C,INCC
0046D9 F0 
0046DA 4E 
0046DB 1F     12711 RRA			;LSB OF A TO CARRY
0046DC 79     12712 LD	A,C		;COMPUTE NEW EXPONENT
0046DD 98     12713 SBC	A,B
0046DE 3F     12714 CCF
0046DF C3     12715 JP	CHKOVF
0046E0 46 
0046E1 47 
              12716 ;
              12717 ;IMUL - Integer multiplication.
              12718 ;
0046E2 7C     12719 IMUL:           LD	A,H
0046E3 AA     12720 XOR	D
0046E4 CD     12721 CALL	ABS2		;MAKE BOTH POSITIVE
0046E5 F5 
0046E6 50 
0046E7 3E     12722 LD	A,-33
0046E8 DF 
0046E9 CD     12723 CALL	MULA		;MULTIPLY
0046EA 5F 
0046EB 50 
0046EC D9     12724 EXX
0046ED 0E     12725 LD	C,191		;PRESET EXPONENT
0046EE BF 
0046EF CD     12726 CALL	TESTmat		;TEST RANGE
0046F0 01 
0046F1 4F 
0046F2 20     12727 JR	NZ,IMUL1	;TOO BIG
0046F3 0D 
0046F4 CB     12728 BIT	7,D
0046F5 7A 
0046F6 20     12729 JR	NZ,IMUL1
0046F7 09 
0046F8 CD     12730 CALL	SWAP
0046F9 DC 
0046FA 4E 
0046FB 4A     12731 LD	C,D		;INTEGER MARKER
0046FC 08     12732 EX	AF,AF'
0046FD F0     12733 RET	P
0046FE C3     12734 JP	NEGATE
0046FF 06 
004700 4E 
              12735 ;
004701 0D     12736 IMUL1:          DEC	C
004702 CD     12737 CALL	SLA8
004703 C8 
004704 50 
004705 F2     12738 JP	P,IMUL1		;NORMALISE
004706 01 
004707 47 
004708 08     12739 EX	AF,AF'
004709 F8     12740 RET	M
00470A CB     12741 RES	7,H		;POSITIVE
00470B BC 
00470C C9     12742 RET
              12743 ;
              12744 ;FMUL - Floating point multiplication with rounding.
              12745 ;
00470D 05     12746 FMUL:           DEC	B		;TEST FOR ZERO
00470E 04     12747 INC	B
00470F CA     12748 JP	Z,ZEROmat
004710 21 
004711 4F 
004712 0D     12749 DEC	C		;TEST FOR ZERO
004713 0C     12750 INC	C
004714 C8     12751 RET	Z
004715 7C     12752 LD	A,H
004716 AA     12753 XOR	D		;CALC. RESULT SIGN
004717 08     12754 EX	AF,AF'
004718 CB     12755 SET	7,D		;REPLACE IMPLIED 1's
004719 FA 
00471A CB     12756 SET	7,H
00471B FC 
00471C C5     12757 PUSH	BC		;SAVE EXPONENTS
00471D 44     12758 LD	B,H		;LOAD REGISTERS
00471E 4D     12759 LD	C,L
00471F 21     12760 LD	HL,0
004720 00 
004721 00 
004722 D9     12761 EXX
004723 44     12762 LD	B,H
004724 4D     12763 LD	C,L
004725 21     12764 LD	HL,0
004726 00 
004727 00 
004728 3E     12765 LD	A,-32		;LOOP COUNTER
004729 E0 
00472A CD     12766 CALL	MULA		;MULTIPLY
00472B 5F 
00472C 50 
00472D DC     12767 CALL	C,MULB		;NORMALISE & INC A
00472E 73 
00472F 50 
004730 D9     12768 EXX
004731 E5     12769 PUSH	HL
004732 21     12770 LD	HL,8000H
004733 00 
004734 80 
004735 B7     12771 OR	A		;CLEAR CARRY
004736 ED     12772 SBC	HL,DE
004737 52 
004738 E1     12773 POP	HL
004739 CC     12774 CALL	Z,ODD		;ROUND UNBIASSED
00473A D6 
00473B 4E 
00473C DC     12775 CALL	C,ADD1		;ROUND UP
00473D C8 
00473E 4E 
00473F C1     12776 POP	BC		;RESTORE EXPONENTS
004740 DC     12777 CALL	C,INCC
004741 F0 
004742 4E 
004743 1F     12778 RRA			;LSB OF A TO CARRY
004744 79     12779 LD	A,C		;COMPUTE NEW EXPONENT
004745 88     12780 ADC	A,B
004746 38     12781 CHKOVF:         JR	C,CHKO1
004747 05 
004748 F2     12782 JP	P,ZEROmat		;UNDERFLOW
004749 21 
00474A 4F 
00474B 18     12783 JR	CHKO2
00474C 03 
00474D FA     12784 CHKO1:          JP	M,OFLOW		;OVERFLOW
00474E F2 
00474F 4E 
004750 C6     12785 CHKO2:          ADD	A,80H
004751 80 
004752 4F     12786 LD	C,A
004753 CA     12787 JP	Z,ZEROmat
004754 21 
004755 4F 
004756 08     12788 EX	AF,AF'		;RESTORE SIGN BIT
004757 CB     12789 RES	7,H
004758 BC 
004759 F0     12790 RET	P
00475A CB     12791 SET	7,H
00475B FC 
00475C C9     12792 RET
              12793 ;
              12794 ;IPOW - Integer involution.
              12795 ;
00475D CD     12796 IPOW:           CALL	SWAP
00475E DC 
00475F 4E 
004760 CB     12797 BIT	7,H
004761 7C 
004762 F5     12798 PUSH	AF		;SAVE SIGN
004763 C4     12799 CALL	NZ,NEGATE
004764 06 
004765 4E 
004766 48     12800 IPOW0:          LD	C,B
004767 06     12801 LD	B,32		;LOOP COUNTER
004768 20 
004769 CD     12802 IPOW1:          CALL	X2
00476A 7B 
00476B 4F 
00476C 38     12803 JR	C,IPOW2
00476D 08 
00476E 10     12804 DJNZ	IPOW1
00476F F9 
004770 F1     12805 POP	AF
004771 D9     12806 EXX
004772 2C     12807 INC	L		;RESULT=1
004773 D9     12808 EXX
004774 4C     12809 LD	C,H
004775 C9     12810 RET
              12811 ;
004776 F1     12812 IPOW2:          POP	AF
004777 C5     12813 PUSH	BC
004778 EB     12814 EX	DE,HL
004779 E5     12815 PUSH	HL
00477A D9     12816 EXX
00477B EB     12817 EX	DE,HL
00477C E5     12818 PUSH	HL
00477D D9     12819 EXX
00477E DD     12820 LD	IX,0
00477F 21 
004780 00 
004781 00 
004782 DD     12821 ADD	IX,SP
004783 39 
004784 28     12822 JR	Z,IPOW4
004785 34 
004786 C5     12823 PUSH	BC
004787 D9     12824 EXX
004788 D5     12825 PUSH	DE
004789 D9     12826 EXX
00478A D5     12827 PUSH	DE
00478B CD     12828 CALL	SFLOAT
00478C B2 
00478D 4E 
00478E CD     12829 CALL	RECIP
00478F 90 
004790 4A 
004791 CD     12830 CALL	STORE5
004792 06 
004793 32 
004794 18     12831 JR	IPOW5
004795 1D 
              12832 ;
004796 C5     12833 IPOW3:          PUSH	BC
004797 D9     12834 EXX
004798 CB     12835 SLA	E
004799 23 
00479A CB     12836 RL	D
00479B 12 
00479C D5     12837 PUSH	DE
00479D D9     12838 EXX
00479E CB     12839 RL	E
00479F 13 
0047A0 CB     12840 RL	D
0047A1 12 
0047A2 D5     12841 PUSH	DE
0047A3 3E     12842 LD	A,'*' & 0FH
0047A4 0A 
0047A5 F5     12843 PUSH	AF
0047A6 CD     12844 CALL	COPY
0047A7 8D 
0047A8 4F 
0047A9 CD     12845 CALL	OP		;SQUARE
0047AA 2C 
0047AB 45 
0047AC F1     12846 POP	AF
0047AD CD     12847 CALL	DLOAD5
0047AE F1 
0047AF 19 
0047B0 DC     12848 CALL	C,OP		;MULTIPLY BY X
0047B1 2C 
0047B2 45 
0047B3 D1     12849 IPOW5:          POP	DE
0047B4 D9     12850 EXX
0047B5 D1     12851 POP	DE
0047B6 D9     12852 EXX
0047B7 79     12853 LD	A,C
0047B8 C1     12854 POP	BC
0047B9 4F     12855 LD	C,A
0047BA 10     12856 IPOW4:          DJNZ	IPOW3
0047BB DA 
0047BC F1     12857 POP	AF
0047BD F1     12858 POP	AF
0047BE F1     12859 POP	AF
0047BF C9     12860 RET
              12861 ;
0047C0 F1     12862 FPOW0:          POP	AF
0047C1 F1     12863 POP	AF
0047C2 F1     12864 POP	AF
0047C3 18     12865 JR	IPOW0
0047C4 A1 
              12866 ;
              12867 ;FPOW - Floating-point involution.
              12868 ;
0047C5 CB     12869 FPOW:           BIT	7,D
0047C6 7A 
0047C7 F5     12870 PUSH	AF
0047C8 CD     12871 CALL	SWAP
0047C9 DC 
0047CA 4E 
0047CB CD     12872 CALL	PUSH5
0047CC 9B 
0047CD 4F 
0047CE 0D     12873 DEC	C
0047CF 0C     12874 INC	C
0047D0 28     12875 JR	Z,FPOW0
0047D1 EE 
0047D2 3E     12876 LD	A,158
0047D3 9E 
0047D4 B9     12877 CP	C
0047D5 38     12878 JR	C,FPOW1
0047D6 08 
0047D7 3C     12879 INC	A
0047D8 CD     12880 CALL	FIX
0047D9 DE 
0047DA 4D 
0047DB 08     12881 EX	AF,AF'
0047DC F2     12882 JP	P,FPOW0
0047DD C0 
0047DE 47 
0047DF CD     12883 FPOW1:          CALL	SWAP
0047E0 DC 
0047E1 4E 
0047E2 CD     12884 CALL	LN0
0047E3 A7 
0047E4 4A 
0047E5 CD     12885 CALL	POP5
0047E6 A4 
0047E7 4F 
0047E8 F1     12886 POP	AF
0047E9 CD     12887 CALL	FMUL
0047EA 0D 
0047EB 47 
0047EC C3     12888 JP	EXP0
0047ED 1C 
0047EE 4A 
              12889 ;
              12890 ;Integer and floating-point compare.
              12891 ;Result is TRUE (-1) or FALSE (0).
              12892 ;
0047EF CD     12893 FLT:            CALL	FCP
0047F0 2B 
0047F1 4F 
0047F2 18     12894 JR	ILT1
0047F3 03 
0047F4 CD     12895 ILT:            CALL	ICP
0047F5 1E 
0047F6 4F 
0047F7 D0     12896 ILT1:           RET	NC
0047F8 18     12897 JR	TRUE
0047F9 38 
              12898 ;
0047FA CD     12899 FGT:            CALL	FCP
0047FB 2B 
0047FC 4F 
0047FD 18     12900 JR	IGT1
0047FE 03 
0047FF CD     12901 IGT:            CALL	ICP
004800 1E 
004801 4F 
004802 C8     12902 IGT1:           RET	Z
004803 D8     12903 RET	C
004804 18     12904 JR	TRUE
004805 2C 
              12905 ;
004806 CD     12906 FGE:            CALL	FCP
004807 2B 
004808 4F 
004809 18     12907 JR	IGE1
00480A 03 
00480B CD     12908 IGE:            CALL	ICP
00480C 1E 
00480D 4F 
00480E D8     12909 IGE1:           RET	C
00480F 18     12910 JR	TRUE
004810 21 
              12911 ;
004811 CD     12912 FLE:            CALL	FCP
004812 2B 
004813 4F 
004814 18     12913 JR	ILE1
004815 03 
004816 CD     12914 ILE:            CALL	ICP
004817 1E 
004818 4F 
004819 28     12915 ILE1:           JR	Z,TRUE
00481A 17 
00481B D0     12916 RET	NC
00481C 18     12917 JR	TRUE
00481D 14 
              12918 ;
00481E CD     12919 FNE:            CALL	FCP
00481F 2B 
004820 4F 
004821 18     12920 JR	INE1
004822 03 
004823 CD     12921 INE:            CALL	ICP
004824 1E 
004825 4F 
004826 C8     12922 INE1:           RET	Z
004827 18     12923 JR	TRUE
004828 09 
              12924 ;
004829 CD     12925 FEQ:            CALL	FCP
00482A 2B 
00482B 4F 
00482C 18     12926 JR	IEQ1
00482D 03 
00482E CD     12927 IEQ:            CALL	ICP
00482F 1E 
004830 4F 
004831 C0     12928 IEQ1:           RET	NZ
004832 21     12929 TRUE:           LD	HL,-1
004833 FF 
004834 FF 
004835 D9     12930 EXX
004836 21     12931 LD	HL,-1
004837 FF 
004838 FF 
004839 D9     12932 EXX
00483A AF     12933 XOR	A
00483B 4F     12934 LD	C,A
00483C C9     12935 RET
              12936 ;
              12937 ;Integer shifts:
              12938 ;
              12939 ISHX:
00483D CD     12940 ISHL:           CALL	SHIFTS
00483E 6E 
00483F 48 
004840 28     12941 JR	Z,SHRET
004841 07 
004842 D9     12942 ISHL1:          EXX
004843 29     12943 ADD	HL,HL
004844 D9     12944 EXX
004845 ED     12945 ADC	HL,HL
004846 6A 
004847 10     12946 DJNZ	ISHL1
004848 F9 
004849 C9     12947 SHRET:          RET
              12948 ;
00484A CD     12949 ISAR:           CALL	SHIFTS
00484B 6E 
00484C 48 
00484D 28     12950 JR	Z,SHRET
00484E FA 
00484F CB     12951 ISAR1:          SRA	H
004850 2C 
004851 CB     12952 RR	L
004852 1D 
004853 D9     12953 EXX
004854 CB     12954 RR	H
004855 1C 
004856 CB     12955 RR	L
004857 1D 
004858 D9     12956 EXX
004859 10     12957 DJNZ	ISAR1
00485A F4 
00485B C9     12958 RET
              12959 ;
00485C CD     12960 ISHR:           CALL	SHIFTS
00485D 6E 
00485E 48 
00485F 28     12961 JR	Z,SHRET
004860 E8 
004861 CB     12962 ISHR1:          SRL	H
004862 3C 
004863 CB     12963 RR	L
004864 1D 
004865 D9     12964 EXX
004866 CB     12965 RR	H
004867 1C 
004868 CB     12966 RR	L
004869 1D 
00486A D9     12967 EXX
00486B 10     12968 DJNZ	ISHR1
00486C F4 
00486D C9     12969 RET
              12970 ;
00486E CD     12971 SHIFTS:         CALL	FIX2
00486F EE 
004870 4D 
004871 7A     12972 LD	A,D
004872 B3     12973 OR	E
004873 D9     12974 EXX
004874 B2     12975 OR	D
004875 7B     12976 LD	A,E
004876 D9     12977 EXX
004877 06     12978 LD	B,32
004878 20 
004879 20     12979 JR	NZ,SHMAX
00487A 02 
00487B 47     12980 LD	B,A
00487C B7     12981 OR	A
00487D C9     12982 SHMAX:          RET
              12983 ;
              12984 ;FUNCTIONS:
              12985 ;
              12986 ;Result returned in HLH'L'C (floating point)
              12987 ;Result returned in HLH'L' (C=0) (integer)
              12988 ;All registers except IY destroyed.
              12989 ;
              12990 ;ABS - Absolute value
              12991 ;Result is numeric, variable type.
              12992 ;
00487E CB     12993 ABS:            BIT	7,H
00487F 7C 
004880 C8     12994 RET	Z		;POSITIVE/ZERO
004881 0D     12995 DEC	C
004882 0C     12996 INC	C
004883 CA     12997 JP	Z,NEGATE	;INTEGER
004884 06 
004885 4E 
004886 CB     12998 RES	7,H
004887 BC 
004888 C9     12999 RET
              13000 ;
              13001 ;NOT - Complement integer.
              13002 ;Result is integer numeric.
              13003 ;
004889 CD     13004 CPL_:           CALL	SFIXmat
00488A F7 
00488B 4D 
00488C 7C     13005 LD	A,H
00488D 2F     13006 CPL
00488E 67     13007 LD	H,A
00488F 7D     13008 LD	A,L
004890 2F     13009 CPL
004891 6F     13010 LD	L,A
004892 D9     13011 EXX
004893 7C     13012 LD	A,H
004894 2F     13013 CPL
004895 67     13014 LD	H,A
004896 7D     13015 LD	A,L
004897 2F     13016 CPL
004898 6F     13017 LD	L,A
004899 D9     13018 EXX
00489A AF     13019 XOR	A		;NUMERIC MARKER
00489B C9     13020 RET
              13021 ;
              13022 ;PI - Return PI (3.141592654)
              13023 ;Result is floating-point numeric.
              13024 ;
00489C 21     13025 PI:             LD	HL,490FH
00489D 0F 
00489E 49 
00489F D9     13026 EXX
0048A0 21     13027 LD	HL,0DAA2H
0048A1 A2 
0048A2 DA 
0048A3 D9     13028 EXX
0048A4 0E     13029 LD	C,81H
0048A5 81 
0048A6 AF     13030 XOR	A		;NUMERIC MARKER
0048A7 C9     13031 RET
              13032 ;
              13033 ;DEG - Convert radians to degrees
              13034 ;Result is floating-point numeric.
              13035 ;
0048A8 CD     13036 DEG:            CALL	FPI180
0048A9 B8 
0048AA 48 
0048AB CD     13037 CALL	FMUL
0048AC 0D 
0048AD 47 
0048AE AF     13038 XOR	A
0048AF C9     13039 RET
              13040 ;
              13041 ;RAD - Convert degrees to radians
              13042 ;Result is floating-point numeric.
              13043 ;
0048B0 CD     13044 RAD:            CALL	FPI180
0048B1 B8 
0048B2 48 
0048B3 CD     13045 CALL	FDIV
0048B4 9D 
0048B5 46 
0048B6 AF     13046 XOR	A
0048B7 C9     13047 RET
              13048 ;
              13049 ;180/PI
              13050 ;
0048B8 CD     13051 FPI180:         CALL	SFLOAT
0048B9 B2 
0048BA 4E 
0048BB 11     13052 LD	DE,652EH
0048BC 2E 
0048BD 65 
0048BE D9     13053 EXX
0048BF 11     13054 LD	DE,0E0D3H
0048C0 D3 
0048C1 E0 
0048C2 D9     13055 EXX
0048C3 06     13056 LD	B,85H
0048C4 85 
0048C5 C9     13057 RET
              13058 ;
              13059 ;SGN - Return -1, 0 or +1
              13060 ;Result is integer numeric.
              13061 ;
0048C6 CD     13062 SGN:            CALL	TESTmat
0048C7 01 
0048C8 4F 
0048C9 B1     13063 OR	C
0048CA C8     13064 RET	Z		;ZERO
0048CB CB     13065 BIT	7,H
0048CC 7C 
0048CD C2     13066 JP	NZ,TRUE		;-1
0048CE 32 
0048CF 48 
0048D0 CD     13067 CALL	ZEROmat
0048D1 21 
0048D2 4F 
0048D3 C3     13068 JP	ADD1		;1
0048D4 C8 
0048D5 4E 
              13069 ;
              13070 ;VAL - Return numeric value of string.
              13071 ;Input: ASCII string at IX
              13072 ;Result is variable type numeric.
              13073 ;
0048D6 CD     13074 VAL:            CALL	SIGNQ
0048D7 E3 
0048D8 50 
0048D9 F5     13075 PUSH	AF
0048DA CD     13076 CALL	CON
0048DB 34 
0048DC 4D 
0048DD F1     13077 POP	AF
0048DE FE     13078 CP	'-'
0048DF 2D 
0048E0 3E     13079 LD	A,0		;NUMERIC MARKER
0048E1 00 
0048E2 C0     13080 RET	NZ
0048E3 0D     13081 DEC	C
0048E4 0C     13082 INC	C
0048E5 CA     13083 JP	Z,NEGATE	;ZERO/INTEGER
0048E6 06 
0048E7 4E 
0048E8 7C     13084 LD	A,H
0048E9 EE     13085 XOR	80H		;CHANGE SIGN (FP)
0048EA 80 
0048EB 67     13086 LD	H,A
0048EC AF     13087 XOR	A
0048ED C9     13088 RET
              13089 ;
              13090 ;INT - Floor function
              13091 ;Result is integer numeric.
              13092 ;
0048EE 0D     13093 INT_:           DEC	C
0048EF 0C     13094 INC	C
0048F0 C8     13095 RET	Z		;ZERO/INTEGER
0048F1 3E     13096 LD	A,159
0048F2 9F 
0048F3 44     13097 LD	B,H		;B7=SIGN BIT
0048F4 CD     13098 CALL	FIX
0048F5 DE 
0048F6 4D 
0048F7 08     13099 EX	AF,AF'
0048F8 A0     13100 AND	B
0048F9 FC     13101 CALL	M,ADD1		;NEGATIVE NON-INTEGER
0048FA C8 
0048FB 4E 
0048FC 78     13102 LD	A,B
0048FD B7     13103 OR	A
0048FE FC     13104 CALL	M,NEGATE
0048FF 06 
004900 4E 
004901 AF     13105 XOR	A
004902 4F     13106 LD	C,A
004903 C9     13107 RET
              13108 ;
              13109 ;SQR - square root
              13110 ;Result is floating-point numeric.
              13111 ;
004904 CD     13112 SQR:            CALL	SFLOAT
004905 B2 
004906 4E 
004907 CB     13113 SQR0:           BIT	7,H
004908 7C 
004909 3E     13114 LD	A,NGROOT
00490A 15 
00490B C2     13115 JP	NZ,ERROR_mat	;"-ve root"
00490C 26 
00490D 45 
00490E 0D     13116 DEC	C
00490F 0C     13117 INC	C
004910 C8     13118 RET	Z		;ZERO
004911 CB     13119 SET	7,H		;IMPLIED 1
004912 FC 
004913 CB     13120 BIT	0,C
004914 41 
004915 CC     13121 CALL	Z,DIV2		;MAKE EXPONENT ODD
004916 E4 
004917 4E 
004918 79     13122 LD	A,C
004919 D6     13123 SUB	80H
00491A 80 
00491B CB     13124 SRA	A		;HALVE EXPONENT
00491C 2F 
00491D C6     13125 ADD	A,80H
00491E 80 
00491F 4F     13126 LD	C,A
004920 C5     13127 PUSH	BC		;SAVE EXPONENT
004921 EB     13128 EX	DE,HL
004922 21     13129 LD	HL,0
004923 00 
004924 00 
004925 44     13130 LD	B,H
004926 4D     13131 LD	C,L
004927 D9     13132 EXX
004928 EB     13133 EX	DE,HL
004929 21     13134 LD	HL,0
00492A 00 
00492B 00 
00492C 44     13135 LD	B,H
00492D 4D     13136 LD	C,L
00492E 3E     13137 LD	A,-31
00492F E1 
004930 CD     13138 CALL	SQRA		;ROOT
004931 92 
004932 50 
004933 D9     13139 EXX
004934 CB     13140 BIT	7,B
004935 78 
004936 D9     13141 EXX
004937 CC     13142 CALL	Z,SQRA		;NORMALISE & INC A
004938 92 
004939 50 
00493A CD     13143 CALL	SQRB
00493B B1 
00493C 50 
00493D B7     13144 OR	A		;CLEAR CARRY
00493E CD     13145 CALL	DIVB
00493F 4C 
004940 50 
004941 CB     13146 RR	E		;LSB TO CARRY
004942 1B 
004943 60     13147 LD	H,B
004944 69     13148 LD	L,C
004945 D9     13149 EXX
004946 60     13150 LD	H,B
004947 69     13151 LD	L,C
004948 DC     13152 CALL	C,ADD1		;ROUND UP
004949 C8 
00494A 4E 
00494B C1     13153 POP	BC		;RESTORE EXPONENT
00494C DC     13154 CALL	C,INCC
00494D F0 
00494E 4E 
00494F 1F     13155 RRA
004950 9F     13156 SBC	A,A
004951 81     13157 ADD	A,C
004952 4F     13158 LD	C,A
004953 CB     13159 RES	7,H		;POSITIVE
004954 BC 
004955 AF     13160 XOR	A
004956 C9     13161 RET
              13162 ;
              13163 ;TAN - Tangent function
              13164 ;Result is floating-point numeric.
              13165 ;
004957 CD     13166 TAN:            CALL	SFLOAT
004958 B2 
004959 4E 
00495A CD     13167 CALL	PUSH5
00495B 9B 
00495C 4F 
00495D CD     13168 CALL	COS0
00495E 77 
00495F 49 
004960 CD     13169 CALL	POP5
004961 A4 
004962 4F 
004963 CD     13170 CALL	PUSH5
004964 9B 
004965 4F 
004966 CD     13171 CALL	SWAP
004967 DC 
004968 4E 
004969 CD     13172 CALL	SIN0
00496A 82 
00496B 49 
00496C CD     13173 CALL	POP5
00496D A4 
00496E 4F 
00496F CD     13174 CALL	FDIV
004970 9D 
004971 46 
004972 AF     13175 XOR	A		;NUMERIC MARKER
004973 C9     13176 RET
              13177 ;
              13178 ;COS - Cosine function
              13179 ;Result is floating-point numeric.
              13180 ;
004974 CD     13181 COS:            CALL	SFLOAT
004975 B2 
004976 4E 
004977 CD     13182 COS0:           CALL	SCALE
004978 27 
004979 4E 
00497A 1C     13183 INC	E
00497B 1C     13184 INC	E
00497C 7B     13185 LD	A,E
00497D 18     13186 JR	SIN1
00497E 0E 
              13187 ;
              13188 ;SIN - Sine function
              13189 ;Result is floating-point numeric.
              13190 ;
00497F CD     13191 SIN:            CALL	SFLOAT
004980 B2 
004981 4E 
004982 E5     13192 SIN0:           PUSH	HL		;H7=SIGN
004983 CD     13193 CALL	SCALE
004984 27 
004985 4E 
004986 F1     13194 POP	AF
004987 07     13195 RLCA
004988 07     13196 RLCA
004989 07     13197 RLCA
00498A E6     13198 AND	4
00498B 04 
00498C AB     13199 XOR	E
00498D F5     13200 SIN1:           PUSH	AF		;OCTANT
00498E CB     13201 RES	7,H
00498F BC 
004990 1F     13202 RRA
004991 CD     13203 CALL	PIBY4
004992 0E 
004993 4A 
004994 DC     13204 CALL	C,RSUB		;X=(PI/4)-X
004995 35 
004996 46 
004997 F1     13205 POP	AF
004998 F5     13206 PUSH	AF
004999 E6     13207 AND	3
00499A 03 
00499B E2     13208 JP	PO,SIN2		;USE COSINE APPROX.
00499C CC 
00499D 49 
00499E CD     13209 CALL	PUSH5		;SAVE X
00499F 9B 
0049A0 4F 
0049A1 CD     13210 CALL	SQUARE		;PUSH X*X
0049A2 95 
0049A3 4F 
0049A4 CD     13211 CALL	POLY
0049A5 CE 
0049A6 4F 
0049A7 B7     13212 DW	0A8B7H		;a(8)
0049A8 A8 
0049A9 11     13213 DW	3611H
0049AA 36 
0049AB 6D     13214 DB	6DH
0049AC 26     13215 DW	0DE26H		;a(6)
0049AD DE 
0049AE 05     13216 DW	0D005H
0049AF D0 
0049B0 73     13217 DB	73H
0049B1 C0     13218 DW	80C0H		;a(4)
0049B2 80 
0049B3 88     13219 DW	888H
0049B4 08 
0049B5 79     13220 DB	79H
0049B6 9D     13221 DW	0AA9DH		;a(2)
0049B7 AA 
0049B8 AA     13222 DW	0AAAAH
0049B9 AA 
0049BA 7D     13223 DB	7DH
0049BB 00     13224 DW	0		;a(0)
0049BC 00 
0049BD 00     13225 DW	0
0049BE 00 
0049BF 80     13226 DB	80H
0049C0 CD     13227 CALL	POP5
0049C1 A4 
0049C2 4F 
0049C3 CD     13228 CALL	POP5
0049C4 A4 
0049C5 4F 
0049C6 CD     13229 CALL	FMUL
0049C7 0D 
0049C8 47 
0049C9 C3     13230 JP	SIN3
0049CA EE 
0049CB 49 
              13231 ;
0049CC CD     13232 SIN2:           CALL	SQUARE		;PUSH X*X
0049CD 95 
0049CE 4F 
0049CF CD     13233 CALL	POLY
0049D0 CE 
0049D1 4F 
0049D2 71     13234 DW	0D571H		;b(8)
0049D3 D5 
0049D4 78     13235 DW	4C78H
0049D5 4C 
0049D6 70     13236 DB	70H
0049D7 AF     13237 DW	94AFH		;b(6)
0049D8 94 
0049D9 03     13238 DW	0B603H
0049DA B6 
0049DB 76     13239 DB	76H
0049DC C8     13240 DW	9CC8H		;b(4)
0049DD 9C 
0049DE AA     13241 DW	2AAAH
0049DF 2A 
0049E0 7B     13242 DB	7BH
0049E1 DD     13243 DW	0FFDDH		;b(2)
0049E2 FF 
0049E3 FF     13244 DW	0FFFFH
0049E4 FF 
0049E5 7E     13245 DB	7EH
0049E6 00     13246 DW	0		;b(0)
0049E7 00 
0049E8 00     13247 DW	0
0049E9 00 
0049EA 80     13248 DB	80H
0049EB CD     13249 CALL	POP5
0049EC A4 
0049ED 4F 
0049EE F1     13250 SIN3:           POP	AF
0049EF E6     13251 AND	4
0049F0 04 
0049F1 C8     13252 RET	Z
0049F2 0D     13253 DEC	C
0049F3 0C     13254 INC	C
0049F4 C8     13255 RET	Z		;ZERO
0049F5 CB     13256 SET	7,H		;MAKE NEGATIVE
0049F6 FC 
0049F7 C9     13257 RET
              13258 ;
              13259 ;Floating-point one:
              13260 ;
0049F8 21     13261 FONE:           LD	HL,0
0049F9 00 
0049FA 00 
0049FB D9     13262 EXX
0049FC 21     13263 LD	HL,0
0049FD 00 
0049FE 00 
0049FF D9     13264 EXX
004A00 0E     13265 LD	C,80H
004A01 80 
004A02 C9     13266 RET
              13267 ;
004A03 11     13268 DONE:           LD	DE,0
004A04 00 
004A05 00 
004A06 D9     13269 EXX
004A07 11     13270 LD	DE,0
004A08 00 
004A09 00 
004A0A D9     13271 EXX
004A0B 06     13272 LD	B,80H
004A0C 80 
004A0D C9     13273 RET
              13274 ;
004A0E 11     13275 PIBY4:          LD	DE,490FH
004A0F 0F 
004A10 49 
004A11 D9     13276 EXX
004A12 11     13277 LD	DE,0DAA2H
004A13 A2 
004A14 DA 
004A15 D9     13278 EXX
004A16 06     13279 LD	B,7FH
004A17 7F 
004A18 C9     13280 RET
              13281 ;
              13282 ;EXP - Exponential function
              13283 ;Result is floating-point numeric.
              13284 ;
004A19 CD     13285 EXP:            CALL	SFLOAT
004A1A B2 
004A1B 4E 
004A1C CD     13286 EXP0:           CALL	LN2		;LN(2)
004A1D 99 
004A1E 4A 
004A1F D9     13287 EXX
004A20 1D     13288 DEC	E
004A21 01     13289 LD	BC,0D1CFH	;0.6931471805599453
004A22 CF 
004A23 D1 
004A24 D9     13290 EXX
004A25 E5     13291 PUSH	HL		;H7=SIGN
004A26 CD     13292 CALL	MOD48		;"MODULUS"
004A27 37 
004A28 4E 
004A29 F1     13293 POP	AF
004A2A CB     13294 BIT	7,E
004A2B 7B 
004A2C 28     13295 JR	Z,EXP1
004A2D 09 
004A2E 17     13296 RLA
004A2F DA     13297 JP	C,ZEROmat
004A30 21 
004A31 4F 
004A32 3E     13298 LD	A,EXPRNG
004A33 18 
004A34 C3     13299 JP	ERROR_mat		;"Exp range"
004A35 26 
004A36 45 
              13300 ;
004A37 E6     13301 EXP1:           AND	80H
004A38 80 
004A39 B3     13302 OR	E
004A3A F5     13303 PUSH	AF		;INTEGER PART
004A3B CB     13304 RES	7,H
004A3C BC 
004A3D CD     13305 CALL	PUSH5		;PUSH X*LN(2)
004A3E 9B 
004A3F 4F 
004A40 CD     13306 CALL	POLY
004A41 CE 
004A42 4F 
004A43 72     13307 DW	4072H		;a(7)
004A44 40 
004A45 2E     13308 DW	942EH
004A46 94 
004A47 73     13309 DB	73H
004A48 65     13310 DW	6F65H		;a(6)
004A49 6F 
004A4A 4F     13311 DW	2E4FH
004A4B 2E 
004A4C 76     13312 DB	76H
004A4D 37     13313 DW	6D37H		;a(5)
004A4E 6D 
004A4F 02     13314 DW	8802H
004A50 88 
004A51 79     13315 DB	79H
004A52 12     13316 DW	0E512H		;a(4)
004A53 E5 
004A54 A0     13317 DW	2AA0H
004A55 2A 
004A56 7B     13318 DB	7BH
004A57 14     13319 DW	4F14H		;a(3)
004A58 4F 
004A59 AA     13320 DW	0AAAAH
004A5A AA 
004A5B 7D     13321 DB	7DH
004A5C 56     13322 DW	0FD56H		;a(2)
004A5D FD 
004A5E FF     13323 DW	7FFFH
004A5F 7F 
004A60 7E     13324 DB	7EH
004A61 FE     13325 DW	0FFFEH		;a(1)
004A62 FF 
004A63 FF     13326 DW	0FFFFH
004A64 FF 
004A65 7F     13327 DB	7FH
004A66 00     13328 DW	0		;a(0)
004A67 00 
004A68 00     13329 DW	0
004A69 00 
004A6A 80     13330 DB	80H
004A6B CD     13331 CALL	POP5
004A6C A4 
004A6D 4F 
004A6E F1     13332 POP	AF
004A6F F5     13333 PUSH	AF
004A70 F4     13334 CALL	P,RECIP		;X=1/X
004A71 90 
004A72 4A 
004A73 F1     13335 POP	AF
004A74 F2     13336 JP	P,EXP4
004A75 7B 
004A76 4A 
004A77 E6     13337 AND	7FH
004A78 7F 
004A79 ED     13338 NEG
004A7A 44 
004A7B C6     13339 EXP4:           ADD	A,80H
004A7C 80 
004A7D 81     13340 ADD	A,C
004A7E 38     13341 JR	C,EXP2
004A7F 05 
004A80 F2     13342 JP	P,ZEROmat		;UNDERFLOW
004A81 21 
004A82 4F 
004A83 18     13343 JR	EXP3
004A84 03 
004A85 FA     13344 EXP2:           JP	M,OFLOW		;OVERFLOW
004A86 F2 
004A87 4E 
004A88 C6     13345 EXP3:           ADD	A,80H
004A89 80 
004A8A CA     13346 JP	Z,ZEROmat
004A8B 21 
004A8C 4F 
004A8D 4F     13347 LD	C,A
004A8E AF     13348 XOR	A		;NUMERIC MARKER
004A8F C9     13349 RET
              13350 ;
004A90 CD     13351 RECIP:          CALL	DONE
004A91 03 
004A92 4A 
004A93 CD     13352 RDIV:           CALL	SWAP
004A94 DC 
004A95 4E 
004A96 C3     13353 JP	FDIV		;RECIPROCAL
004A97 9D 
004A98 46 
              13354 ;
004A99 11     13355 LN2:            LD	DE,3172H	;LN(2)
004A9A 72 
004A9B 31 
004A9C D9     13356 EXX
004A9D 11     13357 LD	DE,17F8H
004A9E F8 
004A9F 17 
004AA0 D9     13358 EXX
004AA1 06     13359 LD	B,7FH
004AA2 7F 
004AA3 C9     13360 RET
              13361 ;
              13362 ;LN - Natural log.
              13363 ;Result is floating-point numeric.
              13364 ;
004AA4 CD     13365 LN:             CALL	SFLOAT
004AA5 B2 
004AA6 4E 
004AA7 3E     13366 LN0:            LD	A,LOGRNG
004AA8 16 
004AA9 CB     13367 BIT	7,H
004AAA 7C 
004AAB C2     13368 JP	NZ,ERROR_mat	;"Log range"
004AAC 26 
004AAD 45 
004AAE 0C     13369 INC	C
004AAF 0D     13370 DEC	C
004AB0 CA     13371 JP	Z,ERROR_mat
004AB1 26 
004AB2 45 
004AB3 11     13372 LD	DE,3504H	;SQR(2)
004AB4 04 
004AB5 35 
004AB6 D9     13373 EXX
004AB7 11     13374 LD	DE,0F333H	;1.41421356237
004AB8 33 
004AB9 F3 
004ABA D9     13375 EXX
004ABB CD     13376 CALL	ICP0		;MANTISSA>SQR(2)?
004ABC 33 
004ABD 4F 
004ABE 79     13377 LD	A,C		;EXPONENT
004ABF 0E     13378 LD	C,80H		;1 <= X < 2
004AC0 80 
004AC1 38     13379 JR	C,LN4
004AC2 02 
004AC3 0D     13380 DEC	C
004AC4 3C     13381 INC	A
004AC5 F5     13382 LN4:            PUSH	AF		;SAVE EXPONENT
004AC6 CD     13383 CALL	RATIO		;X=(X-1)/(X+1)
004AC7 B0 
004AC8 4F 
004AC9 CD     13384 CALL	PUSH5
004ACA 9B 
004ACB 4F 
004ACC CD     13385 CALL	SQUARE		;PUSH X*X
004ACD 95 
004ACE 4F 
004ACF CD     13386 CALL	POLY
004AD0 CE 
004AD1 4F 
004AD2 48     13387 DW	0CC48H		;a(9)
004AD3 CC 
004AD4 FB     13388 DW	74FBH
004AD5 74 
004AD6 7D     13389 DB	7DH
004AD7 AF     13390 DW	0AEAFH		;a(7)
004AD8 AE 
004AD9 FF     13391 DW	11FFH
004ADA 11 
004ADB 7E     13392 DB	7EH
004ADC 8C     13393 DW	0D98CH		;a(5)
004ADD D9 
004ADE CD     13394 DW	4CCDH
004ADF 4C 
004AE0 7E     13395 DB	7EH
004AE1 E3     13396 DW	0A9E3H		;a(3)
004AE2 A9 
004AE3 AA     13397 DW	2AAAH
004AE4 2A 
004AE5 7F     13398 DB	7FH
004AE6 00     13399 DW	0		;a(1)
004AE7 00 
004AE8 00     13400 DW	0
004AE9 00 
004AEA 81     13401 DB	81H
004AEB CD     13402 CALL	POP5
004AEC A4 
004AED 4F 
004AEE CD     13403 CALL	POP5
004AEF A4 
004AF0 4F 
004AF1 CD     13404 CALL	FMUL
004AF2 0D 
004AF3 47 
004AF4 F1     13405 POP	AF		;EXPONENT
004AF5 CD     13406 CALL	PUSH5
004AF6 9B 
004AF7 4F 
004AF8 08     13407 EX	AF,AF'
004AF9 CD     13408 CALL	ZEROmat
004AFA 21 
004AFB 4F 
004AFC 08     13409 EX	AF,AF'
004AFD D6     13410 SUB	80H
004AFE 80 
004AFF 28     13411 JR	Z,LN3
004B00 1B 
004B01 30     13412 JR	NC,LN1
004B02 02 
004B03 2F     13413 CPL
004B04 3C     13414 INC	A
004B05 67     13415 LN1:            LD	H,A
004B06 0E     13416 LD	C,87H
004B07 87 
004B08 F5     13417 PUSH	AF
004B09 CD     13418 CALL	FLOAT
004B0A 98 
004B0B 4E 
004B0C CB     13419 RES	7,H
004B0D BC 
004B0E CD     13420 CALL	LN2
004B0F 99 
004B10 4A 
004B11 CD     13421 CALL	FMUL
004B12 0D 
004B13 47 
004B14 F1     13422 POP	AF
004B15 30     13423 JR	NC,LN3
004B16 05 
004B17 FA     13424 JP	M,LN3
004B18 1C 
004B19 4B 
004B1A CB     13425 SET	7,H
004B1B FC 
004B1C CD     13426 LN3:            CALL	POP5
004B1D A4 
004B1E 4F 
004B1F CD     13427 CALL	FADD
004B20 45 
004B21 46 
004B22 AF     13428 XOR	A
004B23 C9     13429 RET
              13430 ;
              13431 ;LOG - base-10 logarithm.
              13432 ;Result is floating-point numeric.
              13433 ;
004B24 CD     13434 LOG:            CALL	LN
004B25 A4 
004B26 4A 
004B27 11     13435 LD	DE,5E5BH	;LOG(e)
004B28 5B 
004B29 5E 
004B2A D9     13436 EXX
004B2B 11     13437 LD	DE,0D8A9H
004B2C A9 
004B2D D8 
004B2E D9     13438 EXX
004B2F 06     13439 LD	B,7EH
004B30 7E 
004B31 CD     13440 CALL	FMUL
004B32 0D 
004B33 47 
004B34 AF     13441 XOR	A
004B35 C9     13442 RET
              13443 ;
              13444 ;ASN - Arc-sine
              13445 ;Result is floating-point numeric.
              13446 ;
004B36 CD     13447 ASN:            CALL	SFLOAT
004B37 B2 
004B38 4E 
004B39 CD     13448 CALL	PUSH5
004B3A 9B 
004B3B 4F 
004B3C CD     13449 CALL	COPY
004B3D 8D 
004B3E 4F 
004B3F CD     13450 CALL	FMUL
004B40 0D 
004B41 47 
004B42 CD     13451 CALL	DONE
004B43 03 
004B44 4A 
004B45 CD     13452 CALL	RSUB
004B46 35 
004B47 46 
004B48 CD     13453 CALL	SQR0
004B49 07 
004B4A 49 
004B4B CD     13454 CALL	POP5
004B4C A4 
004B4D 4F 
004B4E 0C     13455 INC	C
004B4F 0D     13456 DEC	C
004B50 3E     13457 LD	A,2
004B51 02 
004B52 D5     13458 PUSH	DE
004B53 28     13459 JR	Z,ACS1
004B54 70 
004B55 D1     13460 POP	DE
004B56 CD     13461 CALL	RDIV
004B57 93 
004B58 4A 
004B59 18     13462 JR	ATN0
004B5A 03 
              13463 ;
              13464 ;ATN - arc-tangent
              13465 ;Result is floating-point numeric.
              13466 ;
004B5B CD     13467 ATN:            CALL	SFLOAT
004B5C B2 
004B5D 4E 
004B5E E5     13468 ATN0:           PUSH	HL		;SAVE SIGN
004B5F CB     13469 RES	7,H
004B60 BC 
004B61 11     13470 LD	DE,5413H	;TAN(PI/8)=SQR(2)-1
004B62 13 
004B63 54 
004B64 D9     13471 EXX
004B65 11     13472 LD	DE,0CCD0H
004B66 D0 
004B67 CC 
004B68 D9     13473 EXX
004B69 06     13474 LD	B,7EH
004B6A 7E 
004B6B CD     13475 CALL	FCP0		;COMPARE
004B6C 30 
004B6D 4F 
004B6E 06     13476 LD	B,0
004B6F 00 
004B70 38     13477 JR	C,ATN2
004B71 1C 
004B72 11     13478 LD	DE,1A82H	;TAN(3*PI/8)=SQR(2)+1
004B73 82 
004B74 1A 
004B75 D9     13479 EXX
004B76 11     13480 LD	DE,799AH
004B77 9A 
004B78 79 
004B79 D9     13481 EXX
004B7A 06     13482 LD	B,81H
004B7B 81 
004B7C CD     13483 CALL	FCP0		;COMPARE
004B7D 30 
004B7E 4F 
004B7F 38     13484 JR	C,ATN1
004B80 08 
004B81 CD     13485 CALL	RECIP		;X=1/X
004B82 90 
004B83 4A 
004B84 06     13486 LD	B,2
004B85 02 
004B86 C3     13487 JP	ATN2
004B87 8E 
004B88 4B 
004B89 CD     13488 ATN1:           CALL	RATIO		;X=(X-1)/(X+1)
004B8A B0 
004B8B 4F 
004B8C 06     13489 LD	B,1
004B8D 01 
004B8E C5     13490 ATN2:           PUSH	BC		;SAVE FLAG
004B8F CD     13491 CALL	PUSH5
004B90 9B 
004B91 4F 
004B92 CD     13492 CALL	SQUARE		;PUSH X*X
004B93 95 
004B94 4F 
004B95 CD     13493 CALL	POLY
004B96 CE 
004B97 4F 
004B98 35     13494 DW	0F335H		;a(13)
004B99 F3 
004B9A D8     13495 DW	37D8H
004B9B 37 
004B9C 7B     13496 DB	7BH
004B9D 91     13497 DW	6B91H		;a(11)
004B9E 6B 
004B9F B9     13498 DW	0AAB9H
004BA0 AA 
004BA1 7C     13499 DB	7CH
004BA2 DE     13500 DW	41DEH		;a(9)
004BA3 41 
004BA4 97     13501 DW	6197H
004BA5 61 
004BA6 7C     13502 DB	7CH
004BA7 7B     13503 DW	9D7BH		;a(7)
004BA8 9D 
004BA9 37     13504 DW	9237H
004BAA 92 
004BAB 7D     13505 DB	7DH
004BAC 5A     13506 DW	2A5AH		;a(5)
004BAD 2A 
004BAE CC     13507 DW	4CCCH
004BAF 4C 
004BB0 7D     13508 DB	7DH
004BB1 5C     13509 DW	0A95CH		;a(3)
004BB2 A9 
004BB3 AA     13510 DW	0AAAAH
004BB4 AA 
004BB5 7E     13511 DB	7EH
004BB6 00     13512 DW	0		;a(1)
004BB7 00 
004BB8 00     13513 DW	0
004BB9 00 
004BBA 80     13514 DB	80H
004BBB CD     13515 CALL	POP5
004BBC A4 
004BBD 4F 
004BBE CD     13516 CALL	POP5
004BBF A4 
004BC0 4F 
004BC1 CD     13517 CALL	FMUL
004BC2 0D 
004BC3 47 
004BC4 F1     13518 POP	AF
004BC5 CD     13519 ACS1:           CALL	PIBY4		;PI/4
004BC6 0E 
004BC7 4A 
004BC8 1F     13520 RRA
004BC9 F5     13521 PUSH	AF
004BCA DC     13522 CALL	C,FADD
004BCB 45 
004BCC 46 
004BCD F1     13523 POP	AF
004BCE 04     13524 INC	B
004BCF 1F     13525 RRA
004BD0 DC     13526 CALL	C,RSUB
004BD1 35 
004BD2 46 
004BD3 F1     13527 POP	AF
004BD4 B7     13528 OR	A
004BD5 F0     13529 RET	P
004BD6 CB     13530 SET	7,H		;MAKE NEGATIVE
004BD7 FC 
004BD8 AF     13531 XOR	A
004BD9 C9     13532 RET
              13533 ;
              13534 ;ACS - Arc cosine=PI/2-ASN.
              13535 ;Result is floating point numeric.
              13536 ;
004BDA CD     13537 ACS:            CALL	ASN
004BDB 36 
004BDC 4B 
004BDD 3E     13538 LD	A,2
004BDE 02 
004BDF F5     13539 PUSH	AF
004BE0 18     13540 JR	ACS1
004BE1 E3 
              13541 ;
              13542 ;Function STR - convert numeric value to ASCII string.
              13543 ;   Inputs: HLH'L'C = integer or floating-point number
              13544 ;           DE = address at which to store string
              13545 ;           IX = address of @% format control
              13546 ;  Outputs: String stored, with NUL terminator
              13547 ;
              13548 ;First normalise for decimal output:
              13549 ;
004BE2 CD     13550 STRmat:            CALL	SFLOAT
004BE3 B2 
004BE4 4E 
004BE5 06     13551 LD	B,0		;DEFAULT PT. POSITION
004BE6 00 
004BE7 CB     13552 BIT	7,H		;NEGATIVE?
004BE8 7C 
004BE9 28     13553 JR	Z,STR10
004BEA 06 
004BEB CB     13554 RES	7,H
004BEC BC 
004BED 3E     13555 LD	A,'-'
004BEE 2D 
004BEF 12     13556 LD	(DE),A		;STORE SIGN
004BF0 13     13557 INC	DE
004BF1 AF     13558 STR10:          XOR	A		;CLEAR A
004BF2 B9     13559 CP	C
004BF3 28     13560 JR	Z,STR2mat		;ZERO
004BF4 47 
004BF5 D5     13561 PUSH	DE		;SAVE TEXT POINTER
004BF6 78     13562 LD	A,B
004BF7 F5     13563 STR11:          PUSH	AF		;SAVE DECIMAL COUNTER
004BF8 79     13564 LD	A,C		;BINARY EXPONENT
004BF9 FE     13565 CP	161
004BFA A1 
004BFB 30     13566 JR	NC,STR14
004BFC 1A 
004BFD FE     13567 CP	155
004BFE 9B 
004BFF 30     13568 JR	NC,STR15
004C00 25 
004C01 2F     13569 CPL
004C02 FE     13570 CP	225
004C03 E1 
004C04 38     13571 JR	C,STR13
004C05 02 
004C06 3E     13572 LD	A,-8
004C07 F8 
004C08 C6     13573 STR13:          ADD	A,28
004C09 1C 
004C0A CD     13574 CALL	POWR10
004C0B F5 
004C0C 4F 
004C0D F5     13575 PUSH	AF
004C0E CD     13576 CALL	FMUL
004C0F 0D 
004C10 47 
004C11 F1     13577 POP	AF
004C12 47     13578 LD	B,A
004C13 F1     13579 POP	AF
004C14 90     13580 SUB	B
004C15 18     13581 JR	STR11
004C16 E0 
004C17 D6     13582 STR14:          SUB	32
004C18 20 
004C19 CD     13583 CALL	POWR10
004C1A F5 
004C1B 4F 
004C1C F5     13584 PUSH	AF
004C1D CD     13585 CALL	FDIV
004C1E 9D 
004C1F 46 
004C20 F1     13586 POP	AF
004C21 47     13587 LD	B,A
004C22 F1     13588 POP	AF
004C23 80     13589 ADD	A,B
004C24 18     13590 JR	STR11
004C25 D1 
004C26 3E     13591 STR15:          LD	A,9
004C27 09 
004C28 CD     13592 CALL	POWR10		;10^9
004C29 F5 
004C2A 4F 
004C2B CD     13593 CALL	FCP0
004C2C 30 
004C2D 4F 
004C2E 79     13594 LD	A,C
004C2F C1     13595 POP	BC
004C30 4F     13596 LD	C,A
004C31 CB     13597 SET	7,H		;IMPLIED 1
004C32 FC 
004C33 DC     13598 CALL	C,X10B		;X10, DEC B
004C34 52 
004C35 4F 
004C36 D1     13599 POP	DE		;RESTORE TEXT POINTER
004C37 CB     13600 RES	7,C
004C38 B9 
004C39 3E     13601 LD	A,0
004C3A 00 
004C3B 17     13602 RLA			;PUT CARRY IN LSB
              13603 ;
              13604 ;At this point decimal normalisation has been done,
              13605 ;now convert to decimal digits:
              13606 ;      AHLH'L' = number in normalised integer form
              13607 ;            B = decimal place adjustment
              13608 ;            C = binary place adjustment (29-33)
              13609 ;
004C3C 0C     13610 STR2mat:           INC	C
004C3D 08     13611 EX	AF,AF'		;SAVE A
004C3E 78     13612 LD	A,B
004C3F DD     13613 BIT	1,(IX+2)
004C40 CB 
004C41 02 
004C42 4E 
004C43 20     13614 JR	NZ,STR20
004C44 08 
004C45 AF     13615 XOR	A
004C46 DD     13616 CP	(IX+1)
004C47 BE 
004C48 01 
004C49 28     13617 JR	Z,STR21
004C4A 0A 
004C4B 3E     13618 LD	A,-10
004C4C F6 
004C4D DD     13619 STR20:          ADD	A,(IX+1)	;SIG. FIG. COUNT
004C4E 86 
004C4F 01 
004C50 B7     13620 OR	A		;CLEAR CARRY
004C51 FA     13621 JP	M,STR21
004C52 55 
004C53 4C 
004C54 AF     13622 XOR	A
004C55 F5     13623 STR21:          PUSH	AF
004C56 08     13624 EX	AF,AF'		;RESTORE A
004C57 CD     13625 STR22:          CALL	X2		;RL AHLH'L'
004C58 7B 
004C59 4F 
004C5A 8F     13626 ADC	A,A
004C5B FE     13627 CP	10
004C5C 0A 
004C5D 38     13628 JR	C,STR23
004C5E 05 
004C5F D6     13629 SUB	10
004C60 0A 
004C61 D9     13630 EXX
004C62 2C     13631 INC	L		;SET RESULT BIT
004C63 D9     13632 EXX
004C64 0D     13633 STR23:          DEC	C
004C65 20     13634 JR	NZ,STR22	;32 TIMES
004C66 F0 
004C67 4F     13635 LD	C,A		;REMAINDER
004C68 7C     13636 LD	A,H
004C69 E6     13637 AND	3FH		;CLEAR OUT JUNK
004C6A 3F 
004C6B 67     13638 LD	H,A
004C6C F1     13639 POP	AF
004C6D F2     13640 JP	P,STR24
004C6E 7A 
004C6F 4C 
004C70 3C     13641 INC	A
004C71 20     13642 JR	NZ,STR26
004C72 1C 
004C73 3E     13643 LD	A,4
004C74 04 
004C75 B9     13644 CP	C		;ROUND UP?
004C76 3E     13645 LD	A,0
004C77 00 
004C78 18     13646 JR	STR26
004C79 15 
004C7A F5     13647 STR24:          PUSH	AF
004C7B 79     13648 LD	A,C
004C7C CE     13649 ADC	A,'0'		;ADD CARRY
004C7D 30 
004C7E FE     13650 CP	'0'
004C7F 30 
004C80 28     13651 JR	Z,STR25		;SUPPRESS ZERO
004C81 05 
004C82 FE     13652 CP	'9'+1
004C83 3A 
004C84 3F     13653 CCF
004C85 30     13654 JR	NC,STR26
004C86 08 
004C87 E3     13655 STR25:          EX	(SP),HL
004C88 CB     13656 BIT	6,L		;ZERO FLAG
004C89 75 
004C8A E3     13657 EX	(SP),HL
004C8B 20     13658 JR	NZ,STR27
004C8C 05 
004C8D 3E     13659 LD	A,'0'
004C8E 30 
004C8F 3C     13660 STR26:          INC	A		;SET +VE
004C90 3D     13661 DEC	A
004C91 F5     13662 PUSH	AF		;PUT ON STACK + CARRY
004C92 04     13663 STR27:          INC	B
004C93 CD     13664 CALL	TESTmat		;IS HLH'L' ZERO?
004C94 01 
004C95 4F 
004C96 0E     13665 LD	C,32
004C97 20 
004C98 3E     13666 LD	A,0
004C99 00 
004C9A 20     13667 JR	NZ,STR22
004C9B BB 
004C9C F1     13668 POP	AF
004C9D F5     13669 PUSH	AF
004C9E 3E     13670 LD	A,0
004C9F 00 
004CA0 38     13671 JR	C,STR22
004CA1 B5 
              13672 ;
              13673 ;At this point, the decimal character string is stored
              13674 ; on the stack. Trailing zeroes are suppressed and may
              13675 ; need to be replaced.
              13676 ;B register holds decimal point position.
              13677 ;Now format number and store as ASCII string:
              13678 ;
004CA2 EB     13679 STR3:           EX	DE,HL		;STRING POINTER
004CA3 0E     13680 LD	C,-1		;FLAG "E"
004CA4 FF 
004CA5 16     13681 LD	D,1
004CA6 01 
004CA7 DD     13682 LD	E,(IX+1)	;f2
004CA8 5E 
004CA9 01 
004CAA DD     13683 BIT	0,(IX+2)
004CAB CB 
004CAC 02 
004CAD 46 
004CAE 20     13684 JR	NZ,STR34	;E MODE
004CAF 32 
004CB0 DD     13685 BIT	1,(IX+2)
004CB1 CB 
004CB2 02 
004CB3 4E 
004CB4 28     13686 JR	Z,STR31
004CB5 11 
004CB6 78     13687 LD	A,B		;F MODE
004CB7 B7     13688 OR	A
004CB8 28     13689 JR	Z,STR30
004CB9 04 
004CBA FA     13690 JP	M,STR30
004CBB BE 
004CBC 4C 
004CBD 50     13691 LD	D,B
004CBE 7A     13692 STR30:          LD	A,D
004CBF DD     13693 ADD	A,(IX+1)
004CC0 86 
004CC1 01 
004CC2 5F     13694 LD	E,A
004CC3 FE     13695 CP	11
004CC4 0B 
004CC5 38     13696 JR	C,STR32
004CC6 17 
004CC7 78     13697 STR31:          LD	A,B		;G MODE
004CC8 11     13698 LD	DE,101H
004CC9 01 
004CCA 01 
004CCB B7     13699 OR	A
004CCC FA     13700 JP	M,STR34
004CCD E2 
004CCE 4C 
004CCF 28     13701 JR	Z,STR32
004CD0 0D 
004CD1 DD     13702 LD	A,(IX+1)
004CD2 7E 
004CD3 01 
004CD4 B7     13703 OR	A
004CD5 20     13704 JR	NZ,STR3A
004CD6 02 
004CD7 3E     13705 LD	A,10
004CD8 0A 
004CD9 B8     13706 STR3A:          CP	B
004CDA 38     13707 JR	C,STR34
004CDB 06 
004CDC 50     13708 LD	D,B
004CDD 58     13709 LD	E,B
004CDE 78     13710 STR32:          LD	A,B
004CDF C6     13711 ADD	A,129
004CE0 81 
004CE1 4F     13712 LD	C,A
004CE2 CB     13713 STR34:          SET	7,D
004CE3 FA 
004CE4 1D     13714 DEC	E
004CE5 7A     13715 STR35:          LD	A,D
004CE6 B9     13716 CP	C
004CE7 30     13717 JR	NC,STR33
004CE8 0C 
004CE9 F1     13718 STR36:          POP	AF
004CEA 28     13719 JR	Z,STR37
004CEB 03 
004CEC F2     13720 JP	P,STR38
004CED F7 
004CEE 4C 
004CEF F5     13721 STR37:          PUSH	AF
004CF0 1C     13722 INC	E
004CF1 1D     13723 DEC	E
004CF2 FA     13724 JP	M,STR4
004CF3 06 
004CF4 4D 
004CF5 3E     13725 STR33:          LD	A,'0'
004CF6 30 
004CF7 15     13726 STR38:          DEC	D
004CF8 E2     13727 JP	PO,STR39
004CF9 FE 
004CFA 4C 
004CFB 36     13728 LD	(HL),'.'
004CFC 2E 
004CFD 23     13729 INC	HL
004CFE 77     13730 STR39:          LD	(HL),A
004CFF 23     13731 INC	HL
004D00 1D     13732 DEC	E
004D01 F2     13733 JP	P,STR35
004D02 E5 
004D03 4C 
004D04 18     13734 JR	STR36
004D05 E3 
              13735 ;
004D06 F1     13736 STR4:           POP	AF
004D07 0C     13737 STR40:          INC	C
004D08 4D     13738 LD	C,L
004D09 20     13739 JR	NZ,STR44
004D0A 27 
004D0B 36     13740 LD	(HL),'E'	;EXPONENT
004D0C 45 
004D0D 23     13741 INC	HL
004D0E 78     13742 LD	A,B
004D0F 3D     13743 DEC	A
004D10 F2     13744 JP	P,STR41
004D11 18 
004D12 4D 
004D13 36     13745 LD	(HL),'-'
004D14 2D 
004D15 23     13746 INC	HL
004D16 ED     13747 NEG
004D17 44 
004D18 36     13748 STR41:          LD	(HL),'0'
004D19 30 
004D1A 28     13749 JR	Z,STR47
004D1B 15 
004D1C FE     13750 CP	10
004D1D 0A 
004D1E 47     13751 LD	B,A
004D1F 3E     13752 LD	A,':'
004D20 3A 
004D21 38     13753 JR	C,STR42
004D22 03 
004D23 23     13754 INC	HL
004D24 36     13755 LD	(HL),'0'
004D25 30 
004D26 34     13756 STR42:          INC	(HL)
004D27 BE     13757 CP	(HL)
004D28 20     13758 JR	NZ,STR43
004D29 05 
004D2A 36     13759 LD	(HL),'0'
004D2B 30 
004D2C 2B     13760 DEC	HL
004D2D 34     13761 INC	(HL)
004D2E 23     13762 INC	HL
004D2F 10     13763 STR43:          DJNZ	STR42
004D30 F5 
004D31 23     13764 STR47:          INC	HL
004D32 EB     13765 STR44:          EX	DE,HL
004D33 C9     13766 RET
              13767 ;
              13768 ;Support subroutines:
              13769 ;
              13770 ;CON - Get unsigned numeric constant from ASCII string.
              13771 ;   Inputs: ASCII string at (IX).
              13772 ;  Outputs: Variable-type result in HLH'L'C
              13773 ;           IX updated (points to delimiter)
              13774 ;           A7 = 0 (numeric marker)
              13775 ;
004D34 CD     13776 CON:            CALL	ZEROmat		;INITIALISE TO ZERO
004D35 21 
004D36 4F 
004D37 0E     13777 LD	C,0		;TRUNCATION COUNTER
004D38 00 
004D39 CD     13778 CALL	NUMBERmat		;GET INTEGER PART
004D3A B9 
004D3B 4D 
004D3C FE     13779 CP	'.'
004D3D 2E 
004D3E 06     13780 LD	B,0		;DECL. PLACE COUNTER
004D3F 00 
004D40 CC     13781 CALL	Z,NUMBIX	;GET FRACTION PART
004D41 B7 
004D42 4D 
004D43 FE     13782 CP	'E'
004D44 45 
004D45 3E     13783 LD	A,0		;INITIALISE EXPONENT
004D46 00 
004D47 CC     13784 CALL	Z,GETEXP	;GET EXPONENT
004D48 88 
004D49 4D 
004D4A CB     13785 BIT	7,H
004D4B 7C 
004D4C 20     13786 JR	NZ,CON0		;INTEGER OVERFLOW
004D4D 08 
004D4E B7     13787 OR	A
004D4F 20     13788 JR	NZ,CON0		;EXPONENT NON-ZERO
004D50 05 
004D51 B8     13789 CP	B
004D52 20     13790 JR	NZ,CON0		;DECIMAL POINT
004D53 02 
004D54 B9     13791 CP	C
004D55 C8     13792 RET	Z		;INTEGER
004D56 90     13793 CON0:           SUB	B
004D57 81     13794 ADD	A,C
004D58 0E     13795 LD	C,159
004D59 9F 
004D5A CD     13796 CALL	FLOAT
004D5B 98 
004D5C 4E 
004D5D CB     13797 RES	7,H		;DITCH IMPLIED 1
004D5E BC 
004D5F B7     13798 OR	A
004D60 C8     13799 RET	Z		;DONE
004D61 FA     13800 JP	M,CON2		;NEGATIVE EXPONENT
004D62 6C 
004D63 4D 
004D64 CD     13801 CALL	POWR10
004D65 F5 
004D66 4F 
004D67 CD     13802 CALL	FMUL		;SCALE
004D68 0D 
004D69 47 
004D6A AF     13803 XOR	A
004D6B C9     13804 RET
004D6C FE     13805 CON2:           CP	-38
004D6D DA 
004D6E 38     13806 JR	C,CON3		;CAN'T SCALE IN ONE GO
004D6F 0A 
004D70 ED     13807 NEG
004D71 44 
004D72 CD     13808 CALL	POWR10
004D73 F5 
004D74 4F 
004D75 CD     13809 CALL	FDIV		;SCALE
004D76 9D 
004D77 46 
004D78 AF     13810 XOR	A
004D79 C9     13811 RET
004D7A F5     13812 CON3:           PUSH	AF
004D7B 3E     13813 LD	A,38
004D7C 26 
004D7D CD     13814 CALL	POWR10
004D7E F5 
004D7F 4F 
004D80 CD     13815 CALL	FDIV
004D81 9D 
004D82 46 
004D83 F1     13816 POP	AF
004D84 C6     13817 ADD	A,38
004D85 26 
004D86 18     13818 JR	CON2
004D87 E4 
              13819 ;
              13820 ;GETEXP - Get decimal exponent from string
              13821 ;     Inputs: ASCII string at (IX)
              13822 ;             (IX points at 'E')
              13823 ;             A = initial value
              13824 ;    Outputs: A = new exponent
              13825 ;             IX updated.
              13826 ;   Destroys: A,A',IX,F,F'
              13827 ;
004D88 C5     13828 GETEXP:         PUSH	BC		;SAVE REGISTERS
004D89 47     13829 LD	B,A		;INITIAL VALUE
004D8A 0E     13830 LD	C,2		;2 DIGITS MAX
004D8B 02 
004D8C DD     13831 INC	IX		;BUMP PAST 'E'
004D8D 23 
004D8E CD     13832 CALL	SIGNQ
004D8F E3 
004D90 50 
004D91 08     13833 EX	AF,AF'		;SAVE EXPONENT SIGN
004D92 CD     13834 GETEX1:         CALL	DIGITQ
004D93 D9 
004D94 50 
004D95 38     13835 JR	C,GETEX2
004D96 17 
004D97 78     13836 LD	A,B		;B=B*10
004D98 87     13837 ADD	A,A
004D99 87     13838 ADD	A,A
004D9A 80     13839 ADD	A,B
004D9B 87     13840 ADD	A,A
004D9C 47     13841 LD	B,A
004D9D DD     13842 LD	A,(IX)		;GET BACK DIGIT
004D9E 7E 
004D9F 00 
004DA0 DD     13843 INC	IX
004DA1 23 
004DA2 E6     13844 AND	0FH		;MASK UNWANTED BITS
004DA3 0F 
004DA4 80     13845 ADD	A,B		;ADD IN DIGIT
004DA5 47     13846 LD	B,A
004DA6 0D     13847 DEC	C
004DA7 F2     13848 JP	P,GETEX1
004DA8 92 
004DA9 4D 
004DAA 06     13849 LD	B,100		;FORCE OVERFLOW
004DAB 64 
004DAC 18     13850 JR	GETEX1
004DAD E4 
004DAE 08     13851 GETEX2:         EX	AF,AF'		;RESTORE SIGN
004DAF FE     13852 CP	'-'
004DB0 2D 
004DB1 78     13853 LD	A,B
004DB2 C1     13854 POP	BC		;RESTORE
004DB3 C0     13855 RET	NZ
004DB4 ED     13856 NEG			;NEGATE EXPONENT
004DB5 44 
004DB6 C9     13857 RET
              13858 ;
              13859 ;NUMBER: Get unsigned integer from string.
              13860 ;    Inputs: string at (IX)
              13861 ;            C = truncated digit count
              13862 ;                (initially zero)
              13863 ;            B = total digit count
              13864 ;            HLH'L' = initial value
              13865 ;   Outputs: HLH'L' = number (binary integer)
              13866 ;            A = delimiter.
              13867 ;            B, C & IX updated
              13868 ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
              13869 ;
004DB7 DD     13870 NUMBIX:         INC	IX
004DB8 23 
004DB9 CD     13871 NUMBERmat:         CALL	DIGITQ
004DBA D9 
004DBB 50 
004DBC D8     13872 RET	C
004DBD 04     13873 INC	B		;INCREMENT DIGIT COUNT
004DBE DD     13874 INC	IX
004DBF 23 
004DC0 CD     13875 CALL	X10		;*10 & COPY OLD VALUE
004DC1 6C 
004DC2 4F 
004DC3 38     13876 JR	C,NUMB1		;OVERFLOW
004DC4 13 
004DC5 0D     13877 DEC	C		;SEE IF TRUNCATED
004DC6 0C     13878 INC	C
004DC7 20     13879 JR	NZ,NUMB1	;IMPORTANT!
004DC8 0F 
004DC9 E6     13880 AND	0FH
004DCA 0F 
004DCB D9     13881 EXX
004DCC 06     13882 LD	B,0
004DCD 00 
004DCE 4F     13883 LD	C,A
004DCF 09     13884 ADD	HL,BC		;ADD IN DIGIT
004DD0 D9     13885 EXX
004DD1 30     13886 JR	NC,NUMBERmat
004DD2 E6 
004DD3 23     13887 INC	HL		;CARRY
004DD4 7C     13888 LD	A,H
004DD5 B5     13889 OR	L
004DD6 20     13890 JR	NZ,NUMBERmat
004DD7 E1 
004DD8 0C     13891 NUMB1:          INC	C		;TRUNCATION COUNTER
004DD9 CD     13892 CALL	SWAP1		;RESTORE PREVIOUS VALUE
004DDA DF 
004DDB 4E 
004DDC 18     13893 JR	NUMBERmat
004DDD DB 
              13894 ;
              13895 ;FIX - Fix number to specified exponent value.
              13896 ;    Inputs: HLH'L'C = +ve non-zero number (floated)
              13897 ;            A = desired exponent (A>C)
              13898 ;   Outputs: HLH'L'C = fixed number (unsigned)
              13899 ;            fraction shifted into B'C'
              13900 ;            A'F' positive if integer input
              13901 ;  Destroys: C,H,L,A',B',C',H',L',F,F'
              13902 ;
004DDE 08     13903 FIX:            EX	AF,AF'
004DDF AF     13904 XOR	A
004DE0 08     13905 EX	AF,AF'
004DE1 CB     13906 SET	7,H		;IMPLIED 1
004DE2 FC 
004DE3 CD     13907 FIX1:           CALL	DIV2
004DE4 E4 
004DE5 4E 
004DE6 B9     13908 CP	C
004DE7 C8     13909 RET	Z
004DE8 D2     13910 JP	NC,FIX1
004DE9 E3 
004DEA 4D 
004DEB C3     13911 JP	OFLOW
004DEC F2 
004DED 4E 
              13912 ;
              13913 ;SFIXmat - Convert to integer if necessary.
              13914 ;    Input: Variable-type number in HLH'L'C
              13915 ;   Output: Integer in HLH'L', C=0
              13916 ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
              13917 ;
              13918 ;NEGATE - Negate HLH'L'
              13919 ;    Destroys: H,L,H',L',F
              13920 ;
004DEE CD     13921 FIX2:           CALL	SWAP
004DEF DC 
004DF0 4E 
004DF1 CD     13922 CALL	SFIXmat
004DF2 F7 
004DF3 4D 
004DF4 CD     13923 CALL	SWAP
004DF5 DC 
004DF6 4E 
004DF7 0D     13924 SFIXmat:           DEC	C
004DF8 0C     13925 INC	C
004DF9 C8     13926 RET	Z		;INTEGER/ZERO
004DFA CB     13927 BIT	7,H		;SIGN
004DFB 7C 
004DFC F5     13928 PUSH	AF
004DFD 3E     13929 LD	A,159
004DFE 9F 
004DFF CD     13930 CALL	FIX
004E00 DE 
004E01 4D 
004E02 F1     13931 POP	AF
004E03 0E     13932 LD	C,0
004E04 00 
004E05 C8     13933 RET	Z
004E06 B7     13934 NEGATE:         OR	A		;CLEAR CARRY
004E07 D9     13935 EXX
004E08 D5     13936 NEG0:           PUSH	DE
004E09 EB     13937 EX	DE,HL
004E0A 21     13938 LD	HL,0
004E0B 00 
004E0C 00 
004E0D ED     13939 SBC	HL,DE
004E0E 52 
004E0F D1     13940 POP	DE
004E10 D9     13941 EXX
004E11 D5     13942 PUSH	DE
004E12 EB     13943 EX	DE,HL
004E13 21     13944 LD	HL,0
004E14 00 
004E15 00 
004E16 ED     13945 SBC	HL,DE
004E17 52 
004E18 D1     13946 POP	DE
004E19 C9     13947 RET
              13948 ;
              13949 ;NEG - Negate HLH'L'B'C'
              13950 ;    Also complements A (used in FADD)
              13951 ;    Destroys: A,H,L,B',C',H',L',F
              13952 ;
004E1A D9     13953 NEG:            EXX
004E1B 2F     13954 CPL
004E1C E5     13955 PUSH	HL
004E1D B7     13956 OR	A		;CLEAR CARRY
004E1E ED     13957 SBC	HL,HL
004E1F 62 
004E20 ED     13958 SBC	HL,BC
004E21 42 
004E22 44     13959 LD	B,H
004E23 4D     13960 LD	C,L
004E24 E1     13961 POP	HL
004E25 18     13962 JR	NEG0
004E26 E1 
              13963 ;
              13964 ;SCALE - Trig scaling.
              13965 ;MOD48 - 48-bit floating-point "modulus" (remainder).
              13966 ;   Inputs: HLH'L'C unsigned floating-point dividend
              13967 ;           DED'E'B'C'B unsigned 48-bit FP divisor
              13968 ;  Outputs: HLH'L'C floating point remainder (H7=1)
              13969 ;           E = quotient (bit 7 is sticky)
              13970 ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
              13971 ;FLO48 - Float unsigned number (48 bits)
              13972 ;    Input/output in HLH'L'B'C'C
              13973 ;   Destroys: C,H,L,B',C',H',L',F
              13974 ;
004E27 3E     13975 SCALE:          LD	A,150
004E28 96 
004E29 B9     13976 CP	C
004E2A 3E     13977 LD	A,ACLOST
004E2B 17 
004E2C DA     13978 JP	C,ERROR_mat		;"Accuracy lost"
004E2D 26 
004E2E 45 
004E2F CD     13979 CALL	PIBY4
004E30 0E 
004E31 4A 
004E32 D9     13980 EXX
004E33 01     13981 LD	BC,2169H	;3.141592653589793238
004E34 69 
004E35 21 
004E36 D9     13982 EXX
004E37 CB     13983 MOD48:          SET	7,D		;IMPLIED 1
004E38 FA 
004E39 CB     13984 SET	7,H
004E3A FC 
004E3B 79     13985 LD	A,C
004E3C 0E     13986 LD	C,0		;INIT QUOTIENT
004E3D 00 
004E3E DD     13987 LD	IX,0
004E3F 21 
004E40 00 
004E41 00 
004E42 DD     13988 PUSH	IX		;PUT ZERO ON STACK
004E43 E5 
004E44 B8     13989 CP	B
004E45 38     13990 JR	C,MOD485	;DIVIDEND<DIVISOR
004E46 3A 
004E47 D9     13991 MOD481:         EXX			;CARRY=0 HERE
004E48 E3     13992 EX	(SP),HL
004E49 ED     13993 SBC	HL,BC
004E4A 42 
004E4B E3     13994 EX	(SP),HL
004E4C ED     13995 SBC	HL,DE
004E4D 52 
004E4E D9     13996 EXX
004E4F ED     13997 SBC	HL,DE
004E50 52 
004E51 30     13998 JR	NC,MOD482	;DIVIDEND>=DIVISOR
004E52 09 
004E53 D9     13999 EXX
004E54 E3     14000 EX	(SP),HL
004E55 09     14001 ADD	HL,BC
004E56 E3     14002 EX	(SP),HL
004E57 ED     14003 ADC	HL,DE
004E58 5A 
004E59 D9     14004 EXX
004E5A ED     14005 ADC	HL,DE
004E5B 5A 
004E5C 3F     14006 MOD482:         CCF
004E5D CB     14007 RL	C		;QUOTIENT
004E5E 11 
004E5F 30     14008 JR	NC,MOD483
004E60 02 
004E61 CB     14009 SET	7,C		;STICKY BIT
004E62 F9 
004E63 3D     14010 MOD483:         DEC	A
004E64 B8     14011 CP	B
004E65 38     14012 JR	C,MOD484	;DIVIDEND<DIVISOR
004E66 19 
004E67 E3     14013 EX	(SP),HL
004E68 29     14014 ADD	HL,HL		;DIVIDEND * 2
004E69 E3     14015 EX	(SP),HL
004E6A D9     14016 EXX
004E6B ED     14017 ADC	HL,HL
004E6C 6A 
004E6D D9     14018 EXX
004E6E ED     14019 ADC	HL,HL
004E6F 6A 
004E70 30     14020 JR	NC,MOD481	;AGAIN
004E71 D5 
004E72 B7     14021 OR	A
004E73 D9     14022 EXX
004E74 E3     14023 EX	(SP),HL
004E75 ED     14024 SBC	HL,BC		;OVERFLOW, SO SUBTRACT
004E76 42 
004E77 E3     14025 EX	(SP),HL
004E78 ED     14026 SBC	HL,DE
004E79 52 
004E7A D9     14027 EXX
004E7B ED     14028 SBC	HL,DE
004E7C 52 
004E7D B7     14029 OR	A
004E7E 18     14030 JR	MOD482
004E7F DC 
              14031 ;
004E80 3C     14032 MOD484:         INC	A
004E81 59     14033 MOD485:         LD	E,C		;QUOTIENT
004E82 4F     14034 LD	C,A		;REMAINDER EXPONENT
004E83 D9     14035 EXX
004E84 C1     14036 POP	BC
004E85 D9     14037 EXX
004E86 CB     14038 FLO48:          BIT	7,H
004E87 7C 
004E88 C0     14039 RET	NZ
004E89 D9     14040 EXX
004E8A CB     14041 SLA	C
004E8B 21 
004E8C CB     14042 RL	B
004E8D 10 
004E8E ED     14043 ADC	HL,HL
004E8F 6A 
004E90 D9     14044 EXX
004E91 ED     14045 ADC	HL,HL
004E92 6A 
004E93 0D     14046 DEC	C
004E94 C2     14047 JP	NZ,FLO48
004E95 86 
004E96 4E 
004E97 C9     14048 RET
              14049 ;
              14050 ;Float unsigned number
              14051 ;    Input/output in HLH'L'C
              14052 ;   Destroys: C,H,L,H',L',F
              14053 ;
004E98 CB     14054 FLOAT:          BIT	7,H
004E99 7C 
004E9A C0     14055 RET	NZ
004E9B D9     14056 EXX			;SAME AS "X2"
004E9C 29     14057 ADD	HL,HL		;TIME-CRITICAL
004E9D D9     14058 EXX			;REGION
004E9E ED     14059 ADC	HL,HL		;(BENCHMARKS)
004E9F 6A 
004EA0 0D     14060 DEC	C
004EA1 C2     14061 JP	NZ,FLOAT
004EA2 98 
004EA3 4E 
004EA4 C9     14062 RET
              14063 ;
              14064 ;SFLOAT - Convert to floating-point if necessary.
              14065 ;    Input: Variable-type number in HLH'L'C
              14066 ;    Output: Floating-point in HLH'L'C
              14067 ;    Destroys: A,C,H,L,H',L',F
              14068 ;
004EA5 08     14069 FLOATA:         EX	AF,AF'
              14070 ; ADD	A,(RTABLE-DTABLE)/2
004EA6 C6     14071 ADD	A,RTABLE-DTABLE/2
004EA7 2E 
004EA8 08     14072 EX	AF,AF'
004EA9 CD     14073 FLOAT2:         CALL	SWAP
004EAA DC 
004EAB 4E 
004EAC CD     14074 CALL	SFLOAT
004EAD B2 
004EAE 4E 
004EAF CD     14075 CALL	SWAP
004EB0 DC 
004EB1 4E 
004EB2 0D     14076 SFLOAT:         DEC	C
004EB3 0C     14077 INC	C
004EB4 C0     14078 RET	NZ		;ALREADY FLOATING-POINT
004EB5 CD     14079 CALL	TESTmat
004EB6 01 
004EB7 4F 
004EB8 C8     14080 RET	Z		;ZERO
004EB9 7C     14081 LD	A,H
004EBA B7     14082 OR	A
004EBB FC     14083 CALL	M,NEGATE
004EBC 06 
004EBD 4E 
004EBE 0E     14084 LD	C,159
004EBF 9F 
004EC0 CD     14085 CALL	FLOAT
004EC1 98 
004EC2 4E 
004EC3 B7     14086 OR	A
004EC4 F8     14087 RET	M		;NEGATIVE
004EC5 CB     14088 RES	7,H
004EC6 BC 
004EC7 C9     14089 RET
              14090 ;
              14091 ;ROUND UP
              14092 ;Return with carry set if 32-bit overflow
              14093 ;   Destroys: H,L,B',C',H',L',F
              14094 ;
004EC8 D9     14095 ADD1:           EXX
004EC9 01     14096 LD	BC,1
004ECA 01 
004ECB 00 
004ECC 09     14097 ADD	HL,BC
004ECD D9     14098 EXX
004ECE D0     14099 RET	NC
004ECF C5     14100 PUSH	BC
004ED0 01     14101 LD	BC,1
004ED1 01 
004ED2 00 
004ED3 09     14102 ADD	HL,BC
004ED4 C1     14103 POP	BC
004ED5 C9     14104 RET
              14105 ;
              14106 ;ODD - Add one if even, leave alone if odd.
              14107 ; (Used to perform unbiassed rounding, i.e.
              14108 ;  number is rounded up half the time)
              14109 ;    Destroys: L',F (carry cleared)
              14110 ;
004ED6 B7     14111 ODD:            OR	A		;CLEAR CARRY
004ED7 D9     14112 EXX
004ED8 CB     14113 SET	0,L		;MAKE ODD
004ED9 C5 
004EDA D9     14114 EXX
004EDB C9     14115 RET
              14116 ;
              14117 ;SWAP - Swap arguments.
              14118 ;    Exchanges DE,HL D'E',H'L' and B,C
              14119 ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
              14120 ;SWAP1 - Swap DEHL with D'E'H'L'
              14121 ;    Destroys: D,E,H,L,D',E',H',L'
              14122 ;
004EDC 79     14123 SWAP:           LD	A,C
004EDD 48     14124 LD	C,B
004EDE 47     14125 LD	B,A
004EDF EB     14126 SWAP1:          EX	DE,HL
004EE0 D9     14127 EXX
004EE1 EB     14128 EX	DE,HL
004EE2 D9     14129 EXX
004EE3 C9     14130 RET
              14131 ;
              14132 ;DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
              14133 ;INCC - destroys C,F
              14134 ;OFLOW
              14135 ;
004EE4 CD     14136 DIV2:           CALL	D2
004EE5 82 
004EE6 4F 
004EE7 D9     14137 EXX
004EE8 CB     14138 RR	B
004EE9 18 
004EEA CB     14139 RR	C
004EEB 19 
004EEC 08     14140 EX	AF,AF'
004EED B0     14141 OR	B
004EEE 08     14142 EX	AF,AF'
004EEF D9     14143 EXX
004EF0 0C     14144 INCC:           INC	C
004EF1 C0     14145 RET	NZ
004EF2 3E     14146 OFLOW:          LD	A,TOOBIG
004EF3 14 
004EF4 C3     14147 JP	ERROR_mat		;"Too big"
004EF5 26 
004EF6 45 
              14148 ;
              14149 ;FTEST - Test for zero & sign
              14150 ;    Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
              14151 ;
004EF7 CD     14152 FTEST:          CALL	TESTmat
004EF8 01 
004EF9 4F 
004EFA C8     14153 RET	Z
004EFB 7C     14154 LD	A,H
004EFC E6     14155 AND	10000000B
004EFD 80 
004EFE F6     14156 OR	01000000B
004EFF 40 
004F00 C9     14157 RET
              14158 ;
              14159 ;TEST - Test HLH'L' for zero.
              14160 ;    Output: Z-flag set & A=0 if HLH'L'=0
              14161 ;    Destroys: A,F
              14162 ;
004F01 7C     14163 TESTmat:           LD	A,H
004F02 B5     14164 OR	L
004F03 D9     14165 EXX
004F04 B4     14166 OR	H
004F05 B5     14167 OR	L
004F06 D9     14168 EXX
004F07 C9     14169 RET
              14170 ;
              14171 ;FCOMP - Compare two numbers
              14172 ;    Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
              14173 ;
004F08 78     14174 FCOMP:          LD	A,B
004F09 B1     14175 OR	C		;Both integer?
004F0A 20     14176 JR	NZ,FCOMP1
004F0B 0A 
004F0C CD     14177 CALL	ICP
004F0D 1E 
004F0E 4F 
004F0F 3E     14178 FCOMP0:         LD	A,0
004F10 00 
004F11 C8     14179 RET	Z		;Equal
004F12 3E     14180 LD	A,80H
004F13 80 
004F14 1F     14181 RRA
004F15 C9     14182 RET
              14183 ;
004F16 CD     14184 FCOMP1:         CALL	FLOAT2		;Float both
004F17 A9 
004F18 4E 
004F19 CD     14185 CALL	FCP
004F1A 2B 
004F1B 4F 
004F1C 18     14186 JR	FCOMP0
004F1D F1 
              14187 ;
              14188 ;Integer and floating point compare.
              14189 ;Sets carry & zero flags according to HLH'L'C-DED'E'B
              14190 ;Result pre-set to FALSE
              14191 ;ICP1, FCP1 destroy A,F
              14192 ;
              14193 ;ZERO - Return zero.
              14194 ; Destroys: A,C,H,L,H',L'
              14195 ;
004F1E CD     14196 ICP:            CALL	ICP1
004F1F 4A 
004F20 4F 
004F21 3E     14197 ZEROmat:           LD	A,0
004F22 00 
004F23 D9     14198 EXX
004F24 67     14199 LD	H,A
004F25 6F     14200 LD	L,A
004F26 D9     14201 EXX
004F27 67     14202 LD	H,A
004F28 6F     14203 LD	L,A
004F29 4F     14204 LD	C,A
004F2A C9     14205 RET
              14206 ;
004F2B CD     14207 FCP:            CALL	FCP1
004F2C 3D 
004F2D 4F 
004F2E 18     14208 JR	ZEROmat		;PRESET FALSE
004F2F F1 
              14209 ;
004F30 79     14210 FCP0:           LD	A,C
004F31 B8     14211 CP	B		;COMPARE EXPONENTS
004F32 C0     14212 RET	NZ
004F33 ED     14213 ICP0:           SBC	HL,DE		;COMP MANTISSA MSB
004F34 52 
004F35 19     14214 ADD	HL,DE
004F36 C0     14215 RET	NZ
004F37 D9     14216 EXX
004F38 ED     14217 SBC	HL,DE		;COMP MANTISSA LSB
004F39 52 
004F3A 19     14218 ADD	HL,DE
004F3B D9     14219 EXX
004F3C C9     14220 RET
              14221 ;
004F3D 7C     14222 FCP1:           LD	A,H
004F3E AA     14223 XOR	D
004F3F 7C     14224 LD	A,H
004F40 17     14225 RLA
004F41 F8     14226 RET	M
004F42 30     14227 JR	NC,FCP0
004F43 EC 
004F44 CD     14228 CALL	FCP0
004F45 30 
004F46 4F 
004F47 C8     14229 RET	Z		;** V0.1 BUG FIX
004F48 3F     14230 CCF
004F49 C9     14231 RET
              14232 ;
004F4A 7C     14233 ICP1:           LD	A,H
004F4B AA     14234 XOR	D
004F4C F2     14235 JP	P,ICP0
004F4D 33 
004F4E 4F 
004F4F 7C     14236 LD	A,H
004F50 17     14237 RLA
004F51 C9     14238 RET
              14239 ;
              14240 ;ADD - Integer add.
              14241 ;Carry, sign & zero flags valid on exit
              14242 ;    Destroys: H,L,H',L',F
              14243 ;
004F52 05     14244 X10B:           DEC	B
004F53 0C     14245 INC	C
004F54 CD     14246 X5:             CALL	COPY0
004F55 8E 
004F56 4F 
004F57 CD     14247 CALL	D2C
004F58 81 
004F59 4F 
004F5A CD     14248 CALL	D2C
004F5B 81 
004F5C 4F 
004F5D 08     14249 EX	AF,AF'		;SAVE CARRY
004F5E D9     14250 ADD:            EXX
004F5F 19     14251 ADD	HL,DE
004F60 D9     14252 EXX
004F61 ED     14253 ADC	HL,DE
004F62 5A 
004F63 C9     14254 RET
              14255 ;
              14256 ;SUB - Integer subtract.
              14257 ;Carry, sign & zero flags valid on exit
              14258 ;    Destroys: H,L,H',L',F
              14259 ;
004F64 D9     14260 SUB:            EXX
004F65 B7     14261 OR	A
004F66 ED     14262 SBC	HL,DE
004F67 52 
004F68 D9     14263 EXX
004F69 ED     14264 SBC	HL,DE
004F6A 52 
004F6B C9     14265 RET
              14266 ;
              14267 ;X10 - unsigned integer * 10
              14268 ;   Inputs: HLH'L' initial value
              14269 ;  Outputs: DED'E' = initial HLH'L'
              14270 ;           Carry bit set if overflow
              14271 ;           If carry not set HLH'L'=result
              14272 ; Destroys: D,E,H,L,D',E',H',L',F
              14273 ;X2 - Multiply HLH'L' by 2 as 32-bit integer.
              14274 ;    Carry set if MSB=1 before shift.
              14275 ;    Sign set if MSB=1 after shift.
              14276 ;    Destroys: H,L,H',L',F
              14277 ;
004F6C CD     14278 X10:            CALL	COPY0		;DED'E'=HLH'L'
004F6D 8E 
004F6E 4F 
004F6F CD     14279 CALL	X2
004F70 7B 
004F71 4F 
004F72 D8     14280 RET	C		;TOO BIG
004F73 CD     14281 CALL	X2
004F74 7B 
004F75 4F 
004F76 D8     14282 RET	C
004F77 CD     14283 CALL	ADD
004F78 5E 
004F79 4F 
004F7A D8     14284 RET	C
004F7B D9     14285 X2:             EXX
004F7C 29     14286 ADD	HL,HL
004F7D D9     14287 EXX
004F7E ED     14288 ADC	HL,HL
004F7F 6A 
004F80 C9     14289 RET
              14290 ;
              14291 ;D2 - Divide HLH'L' by 2 as 32-bit integer.
              14292 ;    Carry set if LSB=1 before shift.
              14293 ;    Destroys: H,L,H',L',F
              14294 ;
004F81 0C     14295 D2C:            INC	C
004F82 CB     14296 D2:             SRL	H
004F83 3C 
004F84 CB     14297 RR	L
004F85 1D 
004F86 D9     14298 EXX
004F87 CB     14299 RR	H
004F88 1C 
004F89 CB     14300 RR	L
004F8A 1D 
004F8B D9     14301 EXX
004F8C C9     14302 RET
              14303 ;
              14304 ;COPY - COPY HLH'L'C INTO DED'E'B
              14305 ;  Destroys: B,C,D,E,H,L,D',E',H',L'
              14306 ;
004F8D 41     14307 COPY:           LD	B,C
004F8E 54     14308 COPY0:          LD	D,H
004F8F 5D     14309 LD	E,L
004F90 D9     14310 EXX
004F91 54     14311 LD	D,H
004F92 5D     14312 LD	E,L
004F93 D9     14313 EXX
004F94 C9     14314 RET
              14315 ;
              14316 ;SQUARE - PUSH X*X
              14317 ;PUSH5 - PUSH HLH'L'C ONTO STACK.
              14318 ;  Destroys: SP,IX
              14319 ;
004F95 CD     14320 SQUARE:         CALL	COPY
004F96 8D 
004F97 4F 
004F98 CD     14321 CALL	FMUL
004F99 0D 
004F9A 47 
004F9B DD     14322 PUSH5:          POP	IX		;RETURN ADDRESS
004F9C E1 
004F9D C5     14323 PUSH	BC
004F9E E5     14324 PUSH	HL
004F9F D9     14325 EXX
004FA0 E5     14326 PUSH	HL
004FA1 D9     14327 EXX
004FA2 DD     14328 JP	(IX)		;"RETURN"
004FA3 E9 
              14329 ;
              14330 ;POP5 - POP DED'E'B OFF STACK.
              14331 ;  Destroys: A,B,D,E,D',E',SP,IX
              14332 ;
004FA4 DD     14333 POP5:           POP	IX		;RETURN ADDRESS
004FA5 E1 
004FA6 D9     14334 EXX
004FA7 D1     14335 POP	DE
004FA8 D9     14336 EXX
004FA9 D1     14337 POP	DE
004FAA 79     14338 LD	A,C
004FAB C1     14339 POP	BC
004FAC 41     14340 LD	B,C
004FAD 4F     14341 LD	C,A
004FAE DD     14342 JP	(IX)		;"RETURN"
004FAF E9 
              14343 ;
              14344 ;RATIO - Calculate (X-1)/(X+1)
              14345 ;    Inputs: X in HLH'L'C
              14346 ;   Outputs: (X-1)/(X+1) in HLH'L'C
              14347 ;  Destroys: Everything except IY,SP,I
              14348 ;
004FB0 CD     14349 RATIO:          CALL	PUSH5		;SAVE X
004FB1 9B 
004FB2 4F 
004FB3 CD     14350 CALL	DONE
004FB4 03 
004FB5 4A 
004FB6 CD     14351 CALL	FADD
004FB7 45 
004FB8 46 
004FB9 CD     14352 CALL	POP5		;RESTORE X
004FBA A4 
004FBB 4F 
004FBC CD     14353 CALL	PUSH5		;SAVE X+1
004FBD 9B 
004FBE 4F 
004FBF CD     14354 CALL	SWAP
004FC0 DC 
004FC1 4E 
004FC2 CD     14355 CALL	DONE
004FC3 03 
004FC4 4A 
004FC5 CD     14356 CALL	FSUB
004FC6 2F 
004FC7 46 
004FC8 CD     14357 CALL	POP5		;RESTORE X+1
004FC9 A4 
004FCA 4F 
004FCB C3     14358 JP	FDIV
004FCC 9D 
004FCD 46 
              14359 ;
              14360 ;POLY - Evaluate a polynomial.
              14361 ;    Inputs: X in HLH'L'C and also stored at (SP+2)
              14362 ;            Polynomial coefficients follow call.
              14363 ;   Outputs: Result in HLH'L'C
              14364 ;  Destroys: Everything except IY,SP,I
              14365 ;Routine terminates on finding a coefficient >=1.
              14366 ;Note: The last coefficient is EXECUTED on return
              14367 ;      so must contain only innocuous bytes!
              14368 ;
004FCE DD     14369 POLY:           LD	IX,2
004FCF 21 
004FD0 02 
004FD1 00 
004FD2 DD     14370 ADD	IX,SP
004FD3 39 
004FD4 DD     14371 EX	(SP),IX
004FD5 E3 
004FD6 CD     14372 CALL	DLOAD5		;FIRST COEFFICIENT
004FD7 F1 
004FD8 19 
004FD9 CD     14373 POLY1:          CALL	FMUL
004FDA 0D 
004FDB 47 
004FDC 11     14374 LD	DE,5
004FDD 05 
004FDE 00 
004FDF DD     14375 ADD	IX,DE
004FE0 19 
004FE1 CD     14376 CALL	DLOAD5		;NEXT COEFFICIENT
004FE2 F1 
004FE3 19 
004FE4 DD     14377 EX	(SP),IX
004FE5 E3 
004FE6 04     14378 INC	B
004FE7 05     14379 DEC	B		;TEST
004FE8 FA     14380 JP	M,FADD
004FE9 45 
004FEA 46 
004FEB CD     14381 CALL	FADD
004FEC 45 
004FED 46 
004FEE CD     14382 CALL	DLOAD5		;X
004FEF F1 
004FF0 19 
004FF1 DD     14383 EX	(SP),IX
004FF2 E3 
004FF3 18     14384 JR	POLY1
004FF4 E4 
              14385 ;
              14386 ;POWR10 - Calculate power of ten.
              14387 ;    Inputs: A=power of 10 required (A<128)
              14388 ;            A=binary exponent to be exceeded (A>=128)
              14389 ;   Outputs: DED'E'B = result
              14390 ;            A = actual power of ten returned
              14391 ;  Destroys: A,B,D,E,A',D',E',F,F'
              14392 ;
004FF5 3C     14393 POWR10:         INC	A
004FF6 08     14394 EX	AF,AF'
004FF7 E5     14395 PUSH	HL
004FF8 D9     14396 EXX
004FF9 E5     14397 PUSH	HL
004FFA D9     14398 EXX
004FFB CD     14399 CALL	DONE
004FFC 03 
004FFD 4A 
004FFE CD     14400 CALL	SWAP
004FFF DC 
005000 4E 
005001 AF     14401 XOR	A
005002 08     14402 POWR11:         EX	AF,AF'
005003 3D     14403 DEC	A
005004 28     14404 JR	Z,POWR14	;EXITmat TYPE 1
005005 20 
005006 F2     14405 JP	P,POWR13
005007 0D 
005008 50 
005009 B9     14406 CP	C
00500A 38     14407 JR	C,POWR14	;EXITmat TYPE 2
00500B 1A 
00500C 3C     14408 INC	A
00500D 08     14409 POWR13:         EX	AF,AF'
00500E 3C     14410 INC	A
00500F CB     14411 SET	7,H
005010 FC 
005011 CD     14412 CALL	X5
005012 54 
005013 4F 
005014 30     14413 JR	NC,POWR12
005015 05 
005016 08     14414 EX	AF,AF'
005017 CD     14415 CALL	D2C
005018 81 
005019 4F 
00501A 08     14416 EX	AF,AF'
00501B 08     14417 POWR12:         EX	AF,AF'
00501C DC     14418 CALL	C,ADD1		;ROUND UP
00501D C8 
00501E 4E 
00501F 0C     14419 INC	C
005020 FA     14420 JP	M,POWR11
005021 02 
005022 50 
005023 C3     14421 JP	OFLOW
005024 F2 
005025 4E 
005026 CD     14422 POWR14:         CALL	SWAP
005027 DC 
005028 4E 
005029 CB     14423 RES	7,D
00502A BA 
00502B D9     14424 EXX
00502C E1     14425 POP	HL
00502D D9     14426 EXX
00502E E1     14427 POP	HL
00502F 08     14428 EX	AF,AF'
005030 C9     14429 RET
              14430 ;
              14431 ;DIVA, DIVB - DIVISION PRIMITIVE.
              14432 ;    Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
              14433 ;              Remainder in H'L'HL
              14434 ;    Inputs: A = loop counter (normally -32)
              14435 ;    Destroys: A,D,E,H,L,D',E',H',L',F
              14436 ;
005031 B7     14437 DIVA:           OR	A		;CLEAR CARRY
005032 ED     14438 DIV0:           SBC	HL,BC		;DIVIDEND-DIVISOR
005033 42 
005034 D9     14439 EXX
005035 ED     14440 SBC	HL,BC
005036 42 
005037 D9     14441 EXX
005038 30     14442 JR	NC,DIV1
005039 05 
00503A 09     14443 ADD	HL,BC		;DIVIDEND+DIVISOR
00503B D9     14444 EXX
00503C ED     14445 ADC	HL,BC
00503D 4A 
00503E D9     14446 EXX
00503F 3F     14447 DIV1:           CCF
005040 CB     14448 DIVC:           RL	E		;SHIFT RESULT INTO DE
005041 13 
005042 CB     14449 RL	D
005043 12 
005044 D9     14450 EXX
005045 CB     14451 RL	E
005046 13 
005047 CB     14452 RL	D
005048 12 
005049 D9     14453 EXX
00504A 3C     14454 INC	A
00504B F0     14455 RET	P
00504C ED     14456 DIVB:           ADC	HL,HL		;DIVIDEND*2
00504D 6A 
00504E D9     14457 EXX
00504F ED     14458 ADC	HL,HL
005050 6A 
005051 D9     14459 EXX
005052 30     14460 JR	NC,DIV0
005053 DE 
005054 B7     14461 OR	A
005055 ED     14462 SBC	HL,BC		;DIVIDEND-DIVISOR
005056 42 
005057 D9     14463 EXX
005058 ED     14464 SBC	HL,BC
005059 42 
00505A D9     14465 EXX
00505B 37     14466 SCF
00505C C3     14467 JP	DIVC
00505D 40 
00505E 50 
              14468 ;
              14469 ;MULA, MULB - MULTIPLICATION PRIMITIVE.
              14470 ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
              14471 ;    Inputs: A = loop counter (usually -32)
              14472 ;            H'L'HL = 0
              14473 ;    Destroys: D,E,H,L,D',E',H',L',A,F
              14474 ;
00505F B7     14475 MULA:           OR	A		;CLEAR CARRY
005060 D9     14476 MUL0:           EXX
005061 CB     14477 RR	D		;MULTIPLIER/2
005062 1A 
005063 CB     14478 RR	E
005064 1B 
005065 D9     14479 EXX
005066 CB     14480 RR	D
005067 1A 
005068 CB     14481 RR	E
005069 1B 
00506A 30     14482 JR	NC,MUL1
00506B 05 
00506C 09     14483 ADD	HL,BC		;ADD IN MULTIPLICAND
00506D D9     14484 EXX
00506E ED     14485 ADC	HL,BC
00506F 4A 
005070 D9     14486 EXX
005071 3C     14487 MUL1:           INC	A
005072 F0     14488 RET	P
005073 D9     14489 MULB:           EXX
005074 CB     14490 RR	H		;PRODUCT/2
005075 1C 
005076 CB     14491 RR	L
005077 1D 
005078 D9     14492 EXX
005079 CB     14493 RR	H
00507A 1C 
00507B CB     14494 RR	L
00507C 1D 
00507D C3     14495 JP	MUL0
00507E 60 
00507F 50 
              14496 ;
              14497 ;SQRA, SQRB - SQUARE ROOT PRIMITIVES
              14498 ;    Function: B'C'BC = SQR (D'E'DE)
              14499 ;    Inputs: A = loop counter (normally -31)
              14500 ;            B'C'BCH'L'HL initialised to 0
              14501 ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
              14502 ;
005080 ED     14503 SQR1:           SBC	HL,BC
005081 42 
005082 D9     14504 EXX
005083 ED     14505 SBC	HL,BC
005084 42 
005085 D9     14506 EXX
005086 0C     14507 INC	C
005087 30     14508 JR	NC,SQR2
005088 07 
005089 0D     14509 DEC	C
00508A 09     14510 ADD	HL,BC
00508B D9     14511 EXX
00508C ED     14512 ADC	HL,BC
00508D 4A 
00508E D9     14513 EXX
00508F 0D     14514 DEC	C
005090 3C     14515 SQR2:           INC	A
005091 F0     14516 RET	P
005092 CB     14517 SQRA:           SLA	C
005093 21 
005094 CB     14518 RL	B
005095 10 
005096 0C     14519 INC	C
005097 D9     14520 EXX
005098 CB     14521 RL	C
005099 11 
00509A CB     14522 RL	B
00509B 10 
00509C CD     14523 CALL	SLA8
00509D C8 
00509E 50 
00509F CD     14524 CALL	SLA8
0050A0 C8 
0050A1 50 
0050A2 D9     14525 EXX
0050A3 D2     14526 JP	NC,SQR1
0050A4 80 
0050A5 50 
0050A6 B7     14527 SQR3:           OR	A
0050A7 ED     14528 SBC	HL,BC
0050A8 42 
0050A9 D9     14529 EXX
0050AA ED     14530 SBC	HL,BC
0050AB 42 
0050AC D9     14531 EXX
0050AD 0C     14532 INC	C
0050AE C3     14533 JP	SQR2
0050AF 90 
0050B0 50 
              14534 ;
0050B1 29     14535 SQRB:           ADD	HL,HL
0050B2 D9     14536 EXX
0050B3 ED     14537 ADC	HL,HL
0050B4 6A 
0050B5 D9     14538 EXX
0050B6 38     14539 JR	C,SQR3
0050B7 EE 
0050B8 3C     14540 INC	A
0050B9 0C     14541 INC	C
0050BA ED     14542 SBC	HL,BC
0050BB 42 
0050BC D9     14543 EXX
0050BD ED     14544 SBC	HL,BC
0050BE 42 
0050BF D9     14545 EXX
0050C0 D0     14546 RET	NC
0050C1 09     14547 ADD	HL,BC
0050C2 D9     14548 EXX
0050C3 ED     14549 ADC	HL,BC
0050C4 4A 
0050C5 D9     14550 EXX
0050C6 0D     14551 DEC	C
0050C7 C9     14552 RET
              14553 ;
0050C8 D9     14554 SLA8:           EXX
0050C9 CB     14555 SLA	E
0050CA 23 
0050CB CB     14556 RL	D
0050CC 12 
0050CD D9     14557 EXX
0050CE CB     14558 RL	E
0050CF 13 
0050D0 CB     14559 RL	D
0050D1 12 
0050D2 D9     14560 EXX
0050D3 ED     14561 ADC	HL,HL
0050D4 6A 
0050D5 D9     14562 EXX
0050D6 ED     14563 ADC	HL,HL
0050D7 6A 
0050D8 C9     14564 RET
              14565 ;
0050D9 DD     14566 DIGITQ:         LD	A,(IX)
0050DA 7E 
0050DB 00 
0050DC FE     14567 CP	'9'+1
0050DD 3A 
0050DE 3F     14568 CCF
0050DF D8     14569 RET	C
0050E0 FE     14570 CP	'0'
0050E1 30 
0050E2 C9     14571 RET
              14572 ;
0050E3 DD     14573 SIGNQ:          LD	A,(IX)
0050E4 7E 
0050E5 00 
0050E6 DD     14574 INC	IX
0050E7 23 
0050E8 FE     14575 CP	' '
0050E9 20 
0050EA 28     14576 JR	Z,SIGNQ
0050EB F7 
0050EC FE     14577 CP	'+'
0050ED 2B 
0050EE C8     14578 RET	Z
0050EF FE     14579 CP	'-'
0050F0 2D 
0050F1 C8     14580 RET	Z
0050F2 DD     14581 DEC	IX
0050F3 2B 
0050F4 C9     14582 RET
              14583 ;
0050F5 08     14584 ABS2:           EX	AF,AF'
0050F6 CB     14585 BIT	7,H
0050F7 7C 
0050F8 C4     14586 CALL	NZ,NEGATE	;MAKE ARGUMENTS +VE
0050F9 06 
0050FA 4E 
0050FB CD     14587 CALL	SWAP
0050FC DC 
0050FD 4E 
0050FE CB     14588 BIT	7,H
0050FF 7C 
005100 C4     14589 CALL	NZ,NEGATE
005101 06 
005102 4E 
005103 44     14590 LD	B,H
005104 4D     14591 LD	C,L
005105 21     14592 LD	HL,0
005106 00 
005107 00 
005108 D9     14593 EXX
005109 44     14594 LD	B,H
00510A 4D     14595 LD	C,L
00510B 21     14596 LD	HL,0
00510C 00 
00510D 00 
00510E C9     14597 RET
              14598 ;
              14599 ;                END
              14600 ; --- End math.asm ---
              14601 
              14602 ; --- Begin data.asm ---
              14603 ;
              14604 ;Automatically created from original source on 2024-12-15 15:29:12
              14605 ;
              14606 .ASSUME ADL = 0
              14607 ;	.ORG 0x0000
              14608 ;                DEFINE LORAM, SPACE = ROM
              14609 ;                SEGMENT LORAM
              14610 ;
              14611 ;                XDEF	FLAGS
              14612 ;                XDEF	OSWRCHPT
              14613 ;                XDEF	OSWRCHCH
              14614 ;                XDEF	OSWRCHFH
              14615 ;                XDEF	KEYDOWN
              14616 ;                XDEF	KEYASCII
              14617 ;                XDEF	KEYCOUNT
              14618 ;                XDEF	SCRAP
              14619 ;                XDEF	BUFFER
              14620 ;                XDEF	LISTON
              14621 ;                XDEF	PAGE_
              14622 ;
              14623 FLAGS:          DS	1
              14624 OSWRCHPT:       DS	2
              14625 OSWRCHCH:       DS	1
              14626 OSWRCHFH:       DS	1
              14627 KEYDOWN:        DS	1
              14628 KEYASCII:       DS	1
              14629 KEYCOUNT:       DS	1
              14630 SCRAP:          DS	31
              14631 ;
              14632 end_binary: ;  for 05_assemble.py to know where to truncate the binary file
              14633 
005136 FF   
005137 FF 
005138 FF 
005139 FF 
005139 FF   
00513A FF 
00513B FF 
00513C FF 
00513C FF   
00513D FF 
00513E FF 
00513F FF 
00513F FF   
005140 FF 
005141 FF 
005142 FF 
005142 FF   
005143 FF 
005144 FF 
005145 FF 
005145 FF   
005146 FF 
005147 FF 
005148 FF 
005148 FF   
005149 FF 
00514A FF 
00514B FF 
00514B FF   
00514C FF 
00514D FF 
00514E FF 
00514E FF   
00514F FF 
005150 FF 
005151 FF 
005151 FF   
005152 FF 
005153 FF 
005136 FF     14634 ALIGN 256
005137 FF 
005138 FF 
005139 FF 
005139 FF   
00513A FF 
00513B FF 
00513C FF 
00513C FF   
00513D FF 
00513E FF 
00513F FF 
00513F FF   
005140 FF 
005141 FF 
005142 FF 
005142 FF   
005143 FF 
005144 FF 
005145 FF 
005145 FF   
005146 FF 
005147 FF 
005148 FF 
005148 FF   
005149 FF 
00514A FF 
00514B FF 
00514B FF   
00514C FF 
00514D FF 
00514E FF 
00514E FF   
00514F FF 
005150 FF 
005151 FF 
005151 FF   
005152 FF 
005153 FF 
005154 FF 
005154 FF   
005155 FF 
005156 FF 
005157 FF 
005157 FF   
005158 FF 
005159 FF 
00515A FF 
00515A FF   
00515B FF 
00515C FF 
00515D FF 
00515D FF   
00515E FF 
00515F FF 
005160 FF 
005160 FF   
005161 FF 
005162 FF 
005163 FF 
005163 FF   
005164 FF 
005165 FF 
005166 FF 
005166 FF   
005167 FF 
005168 FF 
005169 FF 
005169 FF   
00516A FF 
00516B FF 
00516C FF 
00516C FF   
00516D FF 
00516E FF 
00516F FF 
00516F FF   
005170 FF 
005171 FF 
005172 FF 
005172 FF   
005173 FF 
005174 FF 
005175 FF 
005175 FF   
005176 FF 
005177 FF 
005178 FF 
005178 FF   
005179 FF 
00517A FF 
00517B FF 
00517B FF   
00517C FF 
00517D FF 
00517E FF 
00517E FF   
00517F FF 
005180 FF 
005181 FF 
005181 FF   
005182 FF 
005183 FF 
005184 FF 
005184 FF   
005185 FF 
005186 FF 
005187 FF 
005187 FF   
005188 FF 
005189 FF 
00518A FF 
00518A FF   
00518B FF 
00518C FF 
00518D FF 
00518D FF   
00518E FF 
00518F FF 
005190 FF 
005190 FF   
005191 FF 
005192 FF 
005193 FF 
005193 FF   
005194 FF 
005195 FF 
005196 FF 
005196 FF   
005197 FF 
005198 FF 
005199 FF 
005199 FF   
00519A FF 
00519B FF 
00519C FF 
00519C FF   
00519D FF 
00519E FF 
00519F FF 
00519F FF   
0051A0 FF 
0051A1 FF 
0051A2 FF 
0051A2 FF   
0051A3 FF 
0051A4 FF 
0051A5 FF 
0051A5 FF   
0051A6 FF 
0051A7 FF 
0051A8 FF 
0051A8 FF   
0051A9 FF 
0051AA FF 
0051AB FF 
0051AB FF   
0051AC FF 
0051AD FF 
0051AE FF 
0051AE FF   
0051AF FF 
0051B0 FF 
0051B1 FF 
0051B1 FF   
0051B2 FF 
0051B3 FF 
0051B4 FF 
0051B4 FF   
0051B5 FF 
0051B6 FF 
0051B7 FF 
0051B7 FF   
0051B8 FF 
0051B9 FF 
0051BA FF 
0051BA FF   
0051BB FF 
0051BC FF 
0051BD FF 
0051BD FF   
0051BE FF 
0051BF FF 
0051C0 FF 
0051C0 FF   
0051C1 FF 
0051C2 FF 
0051C3 FF 
0051C3 FF   
0051C4 FF 
0051C5 FF 
0051C6 FF 
0051C6 FF   
0051C7 FF 
0051C8 FF 
0051C9 FF 
0051C9 FF   
0051CA FF 
0051CB FF 
0051CC FF 
0051CC FF   
0051CD FF 
              14635 ;
              14636 ;RAM MODULE FOR BBC BASIC INTERPRETER
              14637 ;FOR USE WITH VERSION 5.0 OF BBC BASIC
              14638 ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
              14639 ;
              14640 ;                XDEF	ACCS
              14641 ;                XDEF	BUFFER
              14642 ;                XDEF	ONERSP
              14643 ;                XDEF	LIBASE
              14644 ;                XDEF	PAGE_
              14645 ;                XDEF	LOMEM
              14646 ;                XDEF	FREE
              14647 ;                XDEF	HIMEM
              14648 ;                XDEF	RANDOM
              14649 ;                XDEF	COUNT
              14650 ;                XDEF	WIDTH
              14651 ;                XDEF	ERL
              14652 ;                XDEF	ERR
              14653 ;                XDEF	ERRTRP
              14654 ;                XDEF	ERRTXT
              14655 ;                XDEF	TRACEN
              14656 ;                XDEF	AUTONO
              14657 ;                XDEF	INCREM
              14658 ;                XDEF	LISTON
              14659 ;                XDEF	DATPTR
              14660 ;                XDEF	FNPTR
              14661 ;                XDEF	PROPTR
              14662 ;                XDEF	STAVAR
              14663 ;                XDEF	OC
              14664 ;                XDEF	PC
              14665 ;                XDEF	DYNVAR
              14666 ;                XDEF	CURLIN
              14667 ;                XDEF	USER
              14668 ;
              14669 ;n.b. ACCS, BUFFER & STAVAR must be on page boundaries.
              14670 ;
              14671 ACCS:           DS	256		;STRING ACCUMULATOR
              14672 BUFFER:         DS	256		;STRING INPUT BUFFER
              14673 
              14674 STAVAR:         DS	27*4		;STATIC VARIABLES
              14675 ; OC:             EQU	STAVAR+15*4	;CODE ORIGIN (O%)	; restored from equs.inc
              14676 ; PC:             EQU	STAVAR+16*4	;PROGRAM COUNTER (P%)	; restored from equs.inc
              14677 OC:             EQU	15*4+STAVAR	;CODE ORIGIN (O%)	; restored from equs.inc
              14678 PC:             EQU	16*4+STAVAR	;PROGRAM COUNTER (P%)	; restored from equs.inc
              14679 DYNVAR:         DS	54*2		;DYN. VARIABLE POINTERS
              14680 FNPTR:          DS	2		;DYN. FUNCTION POINTER
              14681 PROPTR:         DS	2		;DYN. PROCEDURE POINTER
              14682 ;
              14683 PAGE_:          DS	2		;START OF USER PROGRAM
              14684 LOMEM:          DS	2		;START OF DYN. STORAGE
              14685 FREE:           DS	2		;FIRST FREE-SPACE BYTE
              14686 HIMEM:          DS	2		;FIRST BYTE ABOVE STACK
              14687 LIBASE:         DS	2		;START OF FIRST LIBRARY
              14688 ;
              14689 TRACEN:         DS	2		;TRACE FLAG & NUMBER
              14690 AUTONO:         DS	2		;AUTO FLAG & NUMBER
              14691 ERRTRP:         DS	2		;ON ERROR STMT POINTER \
              14692 ONERSP:         DS	2		;ON ERROR LOCAL STKPTR /
              14693 ERRTXT:         DS	2		;ERROR MESSAGE POINTER
              14694 DATPTR:         DS	2		;DATA POINTER
              14695 ERL:            DS	2		;LINE NO OF LAST ERROR
              14696 CURLIN:         DS	2		;POINTER TO CURRENT LINE
              14697 RANDOM:         DS	5		;RANDOM NUMBER
              14698 COUNT:          DS	1		;PRINT POSITION
              14699 WIDTH:          DS	1		;PRINT WIDTH
              14700 ERR:            DS	1		;ERROR NUMBER
              14701 LISTON:         DS	1		;LISTO & OPT FLAG
              14702 INCREM:         DS	1		;AUTO INCREMENT
              14703 VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; originally in equs.inc
              14704 ;
              14705 USER:           ; END
              14706 ; --- End data.asm ---
              14707 
