PC     Output      Line
040000             0001       .ASSUME ADL = 0
040000             0002   	.ORG 0x0000
000000             0003   
000000             0004       include "mos_api.inc"
000000             0001*  ;
000000             0002*  ; Title:	AGON MOS - API for user projects
000000             0003*  ; Author:	Dean Belfield
000000             0004*  ; Created:	03/08/2022
000000             0005*  ; Last Updated:	11/11/2023
000000             0006*  ;
000000             0007*  ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
000000             0008*  ;
000000             0009*  ; Modinfo:
000000             0010*  ; 05/08/2022:	Added mos_feof
000000             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
000000             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
000000             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
000000             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
000000             0015*  ; 13/10/2022:	Added mos_oscli
000000             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
000000             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
000000             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
000000             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
000000             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
000000             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
000000             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
000000             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
000000             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
000000             0025*  ; 19/05/2023:	Added sysvar_scrMode
000000             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
000000             0027*  ; 03/08/2023:	Added mos_setkbvector
000000             0028*  ; 10/08/2023:	Added mos_getkbmap
000000             0029*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
000000             0030*  ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
000000             0031*  ;
000000             0032*  ; VDP control (VDU 23, 0, n)
000000             0033*  ;
000000             0034*  vdp_gp:			EQU 	80h
000000             0035*  vdp_keycode:		EQU 	81h
000000             0036*  vdp_cursor:		EQU	82h
000000             0037*  vdp_scrchar:		EQU	83h
000000             0038*  vdp_scrpixel:		EQU	84h
000000             0039*  vdp_audio:		EQU	85h
000000             0040*  vdp_mode:		EQU	86h
000000             0041*  vdp_rtc:		EQU	87h
000000             0042*  vdp_keystate:		EQU	88h
000000             0043*  vdp_logicalcoords:	EQU	C0h
000000             0044*  vdp_terminalmode:	EQU	FFh
000000             0045*  
000000             0046*  ; MOS high level functions
000000             0047*  ;
000000             0048*  mos_getkey:		EQU	00h
000000             0049*  mos_load:		EQU	01h
000000             0050*  mos_save:		EQU	02h
000000             0051*  mos_cd:			EQU	03h
000000             0052*  mos_dir:		EQU	04h
000000             0053*  mos_del:		EQU	05h
000000             0054*  mos_ren:		EQU	06h
000000             0055*  mos_mkdir:		EQU	07h
000000             0056*  mos_sysvars:		EQU	08h
000000             0057*  mos_editline:		EQU	09h
000000             0058*  mos_fopen:		EQU	0Ah
000000             0059*  mos_fclose:		EQU	0Bh
000000             0060*  mos_fgetc:		EQU	0Ch
000000             0061*  mos_fputc:		EQU	0Dh
000000             0062*  mos_feof:		EQU	0Eh
000000             0063*  mos_getError:		EQU	0Fh
000000             0064*  mos_oscli:		EQU	10h
000000             0065*  mos_copy:		EQU	11h
000000             0066*  mos_getrtc:		EQU	12h
000000             0067*  mos_setrtc:		EQU	13h
000000             0068*  mos_setintvector:	EQU	14h
000000             0069*  mos_uopen:		EQU	15h
000000             0070*  mos_uclose:		EQU	16h
000000             0071*  mos_ugetc:		EQU	17h
000000             0072*  mos_uputc:		EQU 	18h
000000             0073*  mos_getfil:		EQU	19h
000000             0074*  mos_fread:		EQU	1Ah
000000             0075*  mos_fwrite:		EQU	1Bh
000000             0076*  mos_flseek:		EQU	1Ch
000000             0077*  mos_setkbvector:	EQU	1Dh
000000             0078*  mos_getkbmap:		EQU	1Eh
000000             0079*  mos_i2c_open:		EQU	1Fh
000000             0080*  mos_i2c_close:		EQU	20h
000000             0081*  mos_i2c_write:		EQU	21h
000000             0082*  mos_i2c_read:		EQU	22h
000000             0083*  
000000             0084*  
000000             0085*  ; FatFS file access functions
000000             0086*  ;
000000             0087*  ffs_fopen:		EQU	80h
000000             0088*  ffs_fclose:		EQU	81h
000000             0089*  ffs_fread:		EQU	82h
000000             0090*  ffs_fwrite:		EQU	83h
000000             0091*  ffs_flseek:		EQU	84h
000000             0092*  ffs_ftruncate:		EQU	85h
000000             0093*  ffs_fsync:		EQU	86h
000000             0094*  ffs_fforward:		EQU	87h
000000             0095*  ffs_fexpand:		EQU	88h
000000             0096*  ffs_fgets:		EQU	89h
000000             0097*  ffs_fputc:		EQU	8Ah
000000             0098*  ffs_fputs:		EQU	8Bh
000000             0099*  ffs_fprintf:		EQU	8Ch
000000             0100*  ffs_ftell:		EQU	8Dh
000000             0101*  ffs_feof:		EQU	8Eh
000000             0102*  ffs_fsize:		EQU	8Fh
000000             0103*  ffs_ferror:		EQU	90h
000000             0104*  
000000             0105*  ; FatFS directory access functions
000000             0106*  ;
000000             0107*  ffs_dopen:		EQU	91h
000000             0108*  ffs_dclose:		EQU	92h
000000             0109*  ffs_dread:		EQU	93h
000000             0110*  ffs_dfindfirst:		EQU	94h
000000             0111*  ffs_dfindnext:		EQU	95h
000000             0112*  
000000             0113*  ; FatFS file and directory management functions
000000             0114*  ;
000000             0115*  ffs_stat:		EQU	96h
000000             0116*  ffs_unlink:		EQU	97h
000000             0117*  ffs_rename:		EQU	98h
000000             0118*  ffs_chmod:		EQU	99h
000000             0119*  ffs_utime:		EQU	9Ah
000000             0120*  ffs_mkdir:		EQU	9Bh
000000             0121*  ffs_chdir:		EQU	9Ch
000000             0122*  ffs_chdrive:		EQU	9Dh
000000             0123*  ffs_getcwd:		EQU	9Eh
000000             0124*  
000000             0125*  ; FatFS volume management and system configuration functions
000000             0126*  ;
000000             0127*  ffs_mount:		EQU	9Fh
000000             0128*  ffs_mkfs:		EQU	A0h
000000             0129*  ffs_fdisk:		EQU	A1h
000000             0130*  ffs_getfree:		EQU	A2h
000000             0131*  ffs_getlabel:		EQU	A3h
000000             0132*  ffs_setlabel:		EQU	A4h
000000             0133*  ffs_setcp:		EQU	A5h
000000             0134*  
000000             0135*  ; File access modes
000000             0136*  ;
000000             0137*  fa_read:		EQU	01h
000000             0138*  fa_write:		EQU	02h
000000             0139*  fa_open_existing:	EQU	00h
000000             0140*  fa_create_new:		EQU	04h
000000             0141*  fa_create_always:	EQU	08h
000000             0142*  fa_open_always:		EQU	10h
000000             0143*  fa_open_append:		EQU	30h
000000             0144*  
000000             0145*  ; System variable indexes for api_sysvars
000000             0146*  ; Index into _sysvars in globals.asm
000000             0147*  ;
000000             0148*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
000000             0149*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
000000             0150*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
000000             0151*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
000000             0152*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
000000             0153*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
000000             0154*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
000000             0155*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
000000             0156*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
000000             0157*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
000000             0158*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
000000             0159*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
000000             0160*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
000000             0161*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
000000             0162*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
000000             0163*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
000000             0164*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
000000             0165*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
000000             0166*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
000000             0167*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
000000             0168*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
000000             0169*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
000000             0170*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
000000             0171*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
000000             0172*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
000000             0173*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
000000             0174*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
000000             0175*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
000000             0176*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
000000             0177*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
000000             0178*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
000000             0179*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
000000             0180*  ;
000000             0181*  ; Flags for the VPD protocol
000000             0182*  ;
000000             0183*  vdp_pflag_cursor:	EQU	00000001b
000000             0184*  vdp_pflag_scrchar:	EQU	00000010b
000000             0185*  vdp_pflag_point:	EQU	00000100b
000000             0186*  vdp_pflag_audio:	EQU	00001000b
000000             0187*  vdp_pflag_mode:		EQU	00010000b
000000             0188*  vdp_pflag_rtc:		EQU	00100000b
000000             0189*  vdp_pflag_mouse:	EQU	01000000b
000000             0190*  ; vdp_pflag_buffered:	EQU	10000000b
000000             0191*  
000000             0192*  
000000             0193*  ; FatFS structures
000000             0194*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
000000             0195*  ;
000000             0196*  ; Object ID and allocation information (FFOBJID)
000000             0197*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
000000             0198*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
000000             0199*  FFOBJID.attr:     EQU 5    ; Object attribute
000000             0200*  FFOBJID.stat:     EQU 6    ; Object chain status
000000             0201*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
000000             0202*  FFOBJID.objsize:  EQU 11   ; Object size
000000             0203*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
000000             0204*  ;
000000             0205*  ; File object structure (FIL)
000000             0206*  ;
000000             0207*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
000000             0208*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
000000             0209*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
000000             0210*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
000000             0211*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
000000             0212*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
000000             0213*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
000000             0214*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
000000             0215*  FIL.obj.objsize:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
000000             0216*  ;
000000             0217*  ; Directory object structure (DIR)
000000             0218*  ;
000000             0219*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
000000             0220*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
000000             0221*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
000000             0222*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
000000             0223*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
000000             0224*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
000000             0225*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
000000             0226*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
000000             0227*  ;
000000             0228*  ; File information structure (FILINFO)
000000             0229*  ;
000000             0230*  FILINFO.fsize:    EQU 0    ; File size
000000             0231*  FILINFO.fdate:    EQU 4    ; Modified date
000000             0232*  FILINFO.ftime:    EQU 6    ; Modified time
000000             0233*  FILINFO.fattrib:  EQU 8    ; File attribute
000000             0234*  FILINFO.altname:  EQU 9    ; Alternative file name
000000             0235*  FILINFO.fname:    EQU 22   ; Primary file name
000000             0236*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
000000             0237*  ;
000000             0238*  ; Macro for calling the API
000000             0239*  ; Parameters:
000000             0240*  ; - function: One of the function numbers listed above
000000             0241*  ;
000000             0242*  			MACRO MOSCALL	function
000000             0243*  			LD	A, function
000000             0244*  			RST.LIS	08h
000000             0245*  			ENDMACRO
000000             0005       include "equs.inc"
000000             0001*  ; ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
000000             0002*  ; STAVAR: EQU 0
000000             0003*  ; ACCS: EQU 0
000000             0004*  ; ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
000000             0005*  
000000             0006*  ;
000000             0007*  ; Title:	BBC Basic for AGON - Equs
000000             0008*  ; Author:	Dean Belfield
000000             0009*  ; Created:	04/12/2024
000000             0010*  ; Last Updated:	05/12/2024
000000             0011*  ;
000000             0012*  ; Modinfo:
000000             0013*  ; 05/12/2024:	Removed Stack_Top
000000             0014*  
000000             0015*  ;			XREF		STAVAR
000000             0016*  ;			XREF		ACCS
000000             0017*  
000000             0018*  RAM_Top:		EQU		0FF00h
000000             0019*  
000000             0020*  ; For GPIO
000000             0021*  ; PA not available on eZ80L92
000000             0022*  ;
000000             0023*  PA_DR:			EQU		96h
000000             0024*  PA_DDR:			EQU		97h
000000             0025*  PA_ALT1:		EQU		98h
000000             0026*  PA_ALT2:		EQU		99h
000000             0027*  PB_DR:          	EQU		9Ah
000000             0028*  PB_DDR:        	 	EQU		9Bh
000000             0029*  PB_ALT1:        	EQU		9Ch
000000             0030*  PB_ALT2:        	EQU		9Dh
000000             0031*  PC_DR:          	EQU		9Eh
000000             0032*  PC_DDR:         	EQU		9Fh
000000             0033*  PC_ALT1:        	EQU		A0h
000000             0034*  PC_ALT2:        	EQU		A1h
000000             0035*  PD_DR:          	EQU		A2h
000000             0036*  PD_DDR:			EQU		A3h
000000             0037*  PD_ALT1:		EQU		A4h
000000             0038*  PD_ALT2:		EQU		A5h
000000             0039*  
000000             0040*  GPIOMODE_OUT:		EQU		0	; Output
000000             0041*  GPIOMODE_IN:		EQU		1	; Input
000000             0042*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
000000             0043*  GPIOMODE_SIO:		EQU		3	; Open Source IO
000000             0044*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
000000             0045*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
000000             0046*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
000000             0047*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
000000             0048*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
000000             0049*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
000000             0050*  
000000             0051*  ; Originally in ram.asm
000000             0052*  ;
000000             0053*  ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%) ; back to data.asm
000000             0054*  ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%) ; back to data.asm
000000             0055*  ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; moved to data.asm
000000             0056*  
000000             0057*  ; Originally in main.asm
000000             0058*  ;
000000             0059*  CR:			EQU     0DH
000000             0060*  LF:			EQU     0AH
000000             0061*  ESC:			EQU     1BH
000000             0006       include "macros.inc"
000000             0001*  ;
000000             0002*  ; Title:	BBC Basic Interpreter - Z80 version
000000             0003*  ;		Useful macros
000000             0004*  ; Author:	Dean Belfield
000000             0005*  ; Created:	04/12/2024
000000             0006*  ; Last Updated:	04/12/2024
000000             0007*  ;
000000             0008*  ; Modinfo:
000000             0009*  
000000             0010*          MACRO EXREG rp1, rp2
000000             0011*          PUSH    rp1
000000             0012*          POP     rp2
000000             0013*          ENDMACRO
000000             0014*  
000000             0015*          MACRO ADD8U_DE ; reg
000000             0016*          ADD     A, E
000000             0017*          LD      E, A
000000             0018*          ADC     A, D
000000             0019*          SUB     E
000000             0020*          LD      D, A
000000             0021*          ENDMACRO
000000             0022*  
000000             0023*          MACRO ADD8U_HL ; reg
000000             0024*          ADD     A, L
000000             0025*          LD      L, A
000000             0026*          ADC     A, H
000000             0027*          SUB     L
000000             0028*          LD      H, A
000000             0029*          ENDMACRO
000000             0030*  
000000             0031*          MACRO VDU VAL
000000             0032*          LD      A, VAL
000000             0033*          CALL    OSWRCH
000000             0034*          ENDMACRO
000000             0035*  
000000             0036*          MACRO SET_GPIO REG, VAL
000000             0037*          IN0     A, (REG)
000000             0038*          OR      VAL
000000             0039*          OUT0    (REG), A
000000             0040*          ENDMACRO
000000             0041*  
000000             0042*          MACRO RES_GPIO REG, VAL
000000             0043*          PUSH    BC
000000             0044*          LD      A, VAL
000000             0045*          CPL
000000             0046*          LD      C, A
000000             0047*          IN0     A, (REG)
000000             0048*          AND     C
000000             0049*          OUT0    (REG), A
000000             0050*          POP     BC
000000             0051*          ENDMACRO
000000             0007       include "agon_init.asm"
000000             0001*  ;
000000             0002*  ; Title:	BBC Basic for AGON - Initialisation Code
000000             0003*  ;		Initialisation Code
000000             0004*  ; Author:	Dean Belfield
000000             0005*  ; Created:	04/12/2024
000000             0006*  ; Last Updated:	14/12/2024
000000             0007*  ;
000000             0008*  ; Modinfo:
000000             0009*  ; 14/12/2024:	Fix for *BYE command
000000             0010*  
000000             0011*  ;			SEGMENT __VECTORS
000000             0012*  
000000             0013*  ;			XREF	START
000000             0014*  ;			XREF	ACCS
000000             0015*  ;			XREF	TELL
000000             0016*  
000000             0017*  			.ASSUME	ADL = 0
000000             0018*  ;	.ORG 0x0000
000000             0019*  
000000             0020*  			; INCLUDE	"equs.inc"
000000             0021*  
000000             0022*  argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
000000             0023*  
000000             0024*  ;
000000             0025*  ; Start in mixed mode. Assumes MBASE is set to correct segment
000000             0026*  ;
000000 C3 52 00    0027*  			JP	_start				; Jump to start
000003             0028*  			DS	5
000008             0029*  
000008 49 CF       0030*  RST_08:			RST.LIS	08h				; API call
00000A C9          0031*  			RET
00000B             0032*  			DS 	5
000010             0033*  
000010 49 D7       0034*  RST_10:			RST.LIS 10h				; Output
000012 C9          0035*  			RET
000013             0036*  			DS	5
000018             0037*  
000018 49 DF       0038*  RST_18:			RST.LIS	18h				; Block Output
00001A C9          0039*  			RET
00001B             0040*  			DS	5
000020             0041*  
000020             0042*  RST_20:			DS	8
000028             0043*  RST_28:			DS	8
000030             0044*  RST_30:			DS	8
000038             0045*  
000038             0046*  ;
000038             0047*  ; The NMI interrupt vector (not currently used by AGON)
000038             0048*  ;
000038 FB          0049*  RST_38:			EI
000039 ED 4D       0050*  			RETI
00003B             0051*  ;
00003B             0052*  ; The header stuff is from byte 64 onwards
00003B             0053*  ;
00003B FF FF FF FF 0054*  			ALIGN	64
       FF          
000040             0055*  
000040 4D 4F 53    0056*  			DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
000043 00          0057*  			DB	00h				; MOS header version 0
000044 00          0058*  			DB	00h				; Flag for run mode (0: Z80, 1: ADL)
000045             0059*  
000045 42 42 43 42 0060*  _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
       41 53 49 43 
       2E 42 49 4E 
       00          
000052             0061*  
000052             0062*  ;
000052             0063*  ; And the code follows on immediately after the header
000052             0064*  ;
000052 5B FD E5    0065*  _start:			PUSH.LIL	IY			; Preserve IY
000055             0066*  
000055 FD 21 00 00 0067*  			LD		IY, 0			; Preserve SPS
000059 FD 39       0068*  			ADD		IY, SP
00005B 5B FD E5    0069*  			PUSH.LIL	IY
00005E             0070*  
00005E E3          0071*  			EX		(SP), HL		; Get the SPS part of the return address
00005F 5B E5       0072*  			PUSH.LIL	HL
000061 E3          0073*  			EX		(SP), HL		; And restore it for BASIC
000062             0074*  
000062 5B F5       0075*  			PUSH.LIL	AF			; Preserve the rest of the registers
000064 5B C5       0076*  			PUSH.LIL	BC
000066 5B D5       0077*  			PUSH.LIL	DE
000068 5B DD E5    0078*  			PUSH.LIL	IX
00006B             0079*  
00006B ED 6E       0080*  			LD		A, MB			; Segment base
00006D DD 21 65 01 0081*  			LD		IX, argv_ptrs		; The argv array pointer address
000071 CD 51 01    0082*  			CALL		_set_aix24		; Convert to a 24-bit address
000074 5B DD E5    0083*  			PUSH.LIL	IX
000077 CD E1 00    0084*  			CALL		_parse_params		; Parse the parameters
00007A 5B DD E1    0085*  			POP.LIL		IX			; IX: argv
00007D 06 00       0086*  			LD		B, 0			;  C: argc
00007F CD 9A 00    0087*  			CALL		_main			; Start user code
000082             0088*  
000082 5B DD E1    0089*  			POP.LIL		IX			; Restore the registers
000085 5B D1       0090*  			POP.LIL		DE
000087 5B C1       0091*  			POP.LIL		BC
000089 5B F1       0092*  			POP.LIL		AF
00008B             0093*  
00008B EB          0094*  			EX		DE, HL 			; DE: Return code from BASIC
00008C 5B E1       0095*  			POP.LIL		HL 			; The SPS part of the return address
00008E 5B FD E1    0096*  			POP.LIL		IY			; Get the preserved SPS
000091 FD F9       0097*  			LD		SP, IY			; Restore SPS
000093 E3          0098*  			EX		(SP), HL		; Store the SPS part of the return address on the stack
000094 EB          0099*  			EX		DE, HL 			; HL: Return code from BASIC
000095             0100*  
000095 5B FD E1    0101*  			POP.LIL		IY			; Restore IY
000098 49 C9       0102*  			RET.L					; Return to MOS
00009A             0103*  
00009A             0104*  ; The main routine
00009A             0105*  ; IXU: argv - pointer to array of parameters
00009A             0106*  ;   C: argc - number of parameters
00009A             0107*  ; Returns:
00009A             0108*  ;  HL: Error code, or 0 if OK
00009A             0109*  ;
00009A 21 00 52    0110*  _main:			LD	HL, ACCS		; Clear the ACCS
00009D 36 00       0111*  			LD	(HL), 0
00009F 79          0112*  			LD	A, C
0000A0 FE 02       0113*  			CP	2
0000A2 28 24       0114*  			JR	Z, _autoload		; 2 parameters = autoload
0000A4 38 35       0115*  			JR	C, _startbasic		; 1 parameter = normal start
0000A6             0116*  ;			CALL	STAR_VERSION		; Output the AGON version
0000A6 CD FA 44    0117*  			CALL	TELL
0000A9 55 73 61 67 0118*  			DB	"Usage:\n\r"
       65 3A 0A 0D 
0000B1 52 55 4E 20 0119*  			DB	"RUN . <filename>\n\r", 0
       2E 20 3C 66 
       69 6C 65 6E 
       61 6D 65 3E 
       0A 0D 00    
0000C4 21 00 00    0120*  			LD	HL, 0			; The error code
0000C7 C9          0121*  			RET
0000C8             0122*  ;
0000C8 5B DD 27 03 0123*  _autoload:		LD.LIL	HL, (IX+3)		; HLU: Address of filename
0000CC 11 00 52    0124*  			LD	DE, ACCS		;  DE: Destination address
0000CF 5B 7E       0125*  @@:			LD.LIL	A, (HL)			; Fetch the filename byte
0000D1 12          0126*  			LD	(DE), A			;
0000D2 5B 23       0127*  			INC.LIL	HL			; Increase the source pointer
0000D4 1C          0128*  			INC	E			; We only need to increase E as ACCS is on a page boundary
0000D5 20 F8       0129*  			JR	NZ, @B			; Loop until we hit a 0 byte
0000D7 1D          0130*  			DEC	E
0000D8 3E 0D       0131*  			LD	A, CR
0000DA 12          0132*  			LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
0000DB             0133*  ;
0000DB E1          0134*  _startbasic:		POP	 HL			; Pop the return address to init off SPS
0000DC 5B E5       0135*  			PUSH.LIL HL 			; Stack it on SPL (*BYE will use this as the return address)
0000DE C3 17 37    0136*  			JP	 START			; And start BASIC
0000E1             0137*  
0000E1             0138*  ; Parse the parameter string into a C array
0000E1             0139*  ; Parameters
0000E1             0140*  ; -   A: Segment base
0000E1             0141*  ; - HLU: Address of parameter string
0000E1             0142*  ; - IXU: Address for array pointer storage
0000E1             0143*  ; Returns:
0000E1             0144*  ; -   C: Number of parameters parsed
0000E1             0145*  ;
0000E1 01 45 00    0146*  _parse_params:		LD		BC, _exec_name		; Get the address of the app name in this segment
0000E4 CD 3F 01    0147*  			CALL		_set_abc24		; Convert it to a 24-bit address based upon segment base
0000E7 5B DD 0F 00 0148*  			LD.LIL		(IX+0), BC		; ARGV[0] = the executable name
0000EB 5B DD 23    0149*  			INC.LIL		IX
0000EE 5B DD 23    0150*  			INC.LIL		IX
0000F1 5B DD 23    0151*  			INC.LIL		IX
0000F4 CD 36 01    0152*  			CALL		_skip_spaces		; Skip HL past any leading spaces
0000F7             0153*  ;
0000F7 01 01 00    0154*  			LD		BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0000FA 06 0F       0155*  			LD		B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0000FC             0156*  ;
0000FC C5          0157*  _parse_params_1:	PUSH		BC			; Stack ARGC
0000FD 5B E5       0158*  			PUSH.LIL	HL			; Stack start address of token
0000FF CD 25 01    0159*  			CALL		_get_token		; Get the next token
000102 79          0160*  			LD		A, C			; A: Length of the token in characters
000103 5B D1       0161*  			POP.LIL		DE			; Start address of token (was in HL)
000105 C1          0162*  			POP		BC			; ARGC
000106 B7          0163*  			OR		A			; Check for A=0 (no token found) OR at end of string
000107 C8          0164*  			RET		Z
000108             0165*  ;
000108 5B DD 1F 00 0166*  			LD.LIL		(IX+0), DE		; Store the pointer to the token
00010C 5B E5       0167*  			PUSH.LIL	HL			; DE=HL
00010E 5B D1       0168*  			POP.LIL		DE
000110 CD 36 01    0169*  			CALL		_skip_spaces		; And skip HL past any spaces onto the next character
000113 AF          0170*  			XOR		A
000114 5B 12       0171*  			LD.LIL		(DE), A			; Zero-terminate the token
000116 5B DD 23    0172*  			INC.LIL		IX
000119 5B DD 23    0173*  			INC.LIL		IX
00011C 5B DD 23    0174*  			INC.LIL		IX			; Advance to next pointer position
00011F 0C          0175*  			INC		C			; Increment ARGC
000120 79          0176*  			LD		A, C			; Check for C >= A
000121 B8          0177*  			CP		B
000122 38 D8       0178*  			JR		C, _parse_params_1	; And loop
000124 C9          0179*  			RET
000125             0180*  
000125             0181*  ; Get the next token
000125             0182*  ; Parameters:
000125             0183*  ; - HL: Address of parameter string
000125             0184*  ; Returns:
000125             0185*  ; - HL: Address of first character after token
000125             0186*  ; -  C: Length of token (in characters)
000125             0187*  ;
000125 0E 00       0188*  _get_token:		LD		C, 0			; Initialise length
000127 5B 7E       0189*  @@:			LD.LIL		A, (HL)			; Get the character from the parameter string
000129 B7          0190*  			OR		A			; Exit if 0 (end of parameter string in MOS)
00012A C8          0191*  			RET 		Z
00012B FE 0D       0192*  			CP		13			; Exit if CR (end of parameter string in BBC BASIC)
00012D C8          0193*  			RET		Z
00012E FE 20       0194*  			CP		' '			; Exit if space (end of token)
000130 C8          0195*  			RET		Z
000131 5B 23       0196*  			INC.LIL		HL			; Advance to next character
000133 0C          0197*  			INC 		C			; Increment length
000134 18 F1       0198*  			JR		@B
000136             0199*  
000136             0200*  ; Skip spaces in the parameter string
000136             0201*  ; Parameters:
000136             0202*  ; - HL: Address of parameter string
000136             0203*  ; Returns:
000136             0204*  ; - HL: Address of next none-space character
000136             0205*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
000136             0206*  ;
000136 5B 7E       0207*  _skip_spaces:		LD.LIL		A, (HL)			; Get the character from the parameter string
000138 FE 20       0208*  			CP		' '			; Exit if not space
00013A C0          0209*  			RET		NZ
00013B 5B 23       0210*  			INC.LIL		HL			; Advance to next character
00013D 18 F7       0211*  			JR		_skip_spaces		; Increment length
00013F             0212*  
00013F             0213*  ; Set the MSB of BC (U) to A
00013F             0214*  ; Parameters:
00013F             0215*  ; - BC: 16-bit address
00013F             0216*  ; -  A: Value to stick in U of BC
00013F             0217*  ; Returns:
00013F             0218*  ; - BCU
00013F             0219*  ;
00013F 5B E5       0220*  _set_abc24:		PUSH.LIL	HL			; Preserve HL
000141 5B C5       0221*  			PUSH.LIL	BC			; Stick BC onto SPL
000143 5B 21 02 00 0222*  			LD.LIL		HL, 2			; HL: SP+2
       00          
000148 5B 39       0223*  			ADD.LIL		HL, SP
00014A 5B 77       0224*  			LD.LIL		(HL), A			; Store A in it
00014C 5B C1       0225*  			POP.LIL		BC			; Fetch ammended BC
00014E 5B E1       0226*  			POP.LIL		HL			; Restore HL
000150 C9          0227*  			RET
000151             0228*  
000151             0229*  ; Set the MSB of BC (U) to A
000151             0230*  ; Parameters:
000151             0231*  ; - IX: 16-bit address
000151             0232*  ; -  A: Value to stick in U of BC
000151             0233*  ; Returns:
000151             0234*  ; - IXU
000151             0235*  ;
000151 5B DD E5    0236*  _set_aix24:		PUSH.LIL	IX			; Stick IX onto SPL
000154 5B DD 21 02 0237*  			LD.LIL		IX, 2			; IX: SP+2
       00 00       
00015A 5B DD 39    0238*  			ADD.LIL		IX, SP
00015D 5B DD 77 00 0239*  			LD.LIL		(IX), A			; Store A in it
000161 5B DD E1    0240*  			POP.LIL		IX			; Fetch ammended IX
000164 C9          0241*  			RET
000165             0242*  
000165             0243*  ; Storage for the argv array pointers
000165             0244*  ;
000165 00 00 00 00 0245*  argv_ptrs:		BLKP	argv_ptrs_max, 0		; Storage for the argv array pointers
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
000195             0246*  ;    include "agon_init.inc"
000195             0008       include "acorn.asm"
000195             0001*  ;
000195             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
000195             0003*  ;
000195             0004*                  .ASSUME ADL = 0
000195             0005*  ;	.ORG 0x0000
000195             0006*  ;                SEGMENT CODE
000195             0007*  ;
000195             0008*  ;PATCH FOR BBC BASIC TO CP/M 2.2 & 3.0
000195             0009*  ;* ACORN COMPUTERS Z80 TUBE VERSION  *
000195             0010*  ;(C) COPYRIGHT R.T.RUSSELL, 02-01-1984
000195             0011*  ;VERSION 5.0, 12-07-2024
000195             0012*  ;
000195             0013*  ;                XREF	OSWRCH
000195             0014*  ;                XREF	OSWORD
000195             0015*  ;                XREF	OSBYTE
000195             0016*  ;
000195             0017*  ; ESC            EQU	1BH
000195             0018*  TBY:            EQU	0FH
000195             0019*  ; TTO:            EQU	0B8H in main.asm
000195             0020*  TFILL:          EQU	03H
000195             0021*  ;
000195             0022*  ;                XREF	ITEMI
000195             0023*  ;                XREF	EXPRI
000195             0024*  ;                XREF	COMMA
000195             0025*  ;                XREF	TERMQ
000195             0026*  ;                XREF	BRAKET
000195             0027*  ;                XREF	EXTERR
000195             0028*  ;                XREF	STOREN
000195             0029*  ;                XREF	TRAP
000195             0030*  ;                XREF	VAR_
000195             0031*  ;                XREF	NXT
000195             0032*  ;                XREF	XEQ
000195             0033*  ;
000195             0034*  ;                XREF	ACCS
000195             0035*  ;                XREF	COUNT
000195             0036*  ;                XREF	WIDTH
000195             0037*  ;                XREF	SCRAP
000195             0038*  ;
000195             0039*  ;                XDEF	OSCALL
000195             0040*  ;                XDEF	CLRSCN
000195             0041*  ;                XDEF	PUTCSR
000195             0042*  ;                XDEF	GETCSR
000195             0043*  ;                XDEF	PUTIME
000195             0044*  ;                XDEF	GETIME
000195             0045*  ;                XDEF	OSKEY
000195             0046*  ;
000195             0047*  ;                XDEF	CLG
000195             0048*  ;                XDEF	MOVE
000195             0049*  ;                XDEF	DRAW
000195             0050*  ;                XDEF	PLOT
000195             0051*  ;                XDEF	MODE
000195             0052*  ;                XDEF	COLOUR
000195             0053*  ;                XDEF	GCOL
000195             0054*  ;                XDEF	ADVAL
000195             0055*  ;                XDEF	SOUND
000195             0056*  ;                XDEF	ENVEL
000195             0057*  ;                XDEF	POINT
000195             0058*  ;
000195             0059*  ;                XDEF	CIRCLE
000195             0060*  ;                XDEF	ELLIPS
000195             0061*  ;                XDEF	FILL
000195             0062*  ;                XDEF	MOUSE
000195             0063*  ;                XDEF	ORIGIN
000195             0064*  ;                XDEF	RECTAN
000195             0065*  ;                XDEF	LINE
000195             0066*  ;                XDEF	TINT
000195             0067*  ;                XDEF	WAIT
000195             0068*  ;                XDEF	SYS
000195             0069*  ;                XDEF	CSRON
000195             0070*  ;                XDEF	CSROFF
000195             0071*  ;
000195             0072*  ;                XDEF	PUTIMS
000195             0073*  ;                XDEF	GETIMS
000195             0074*  ;                XDEF	TINTFN
000195             0075*  ;                XDEF	MODEFN
000195             0076*  ;                XDEF	WIDFN
000195             0077*  ;
000195             0078*  ;GETIME	- Read elapsed-time clock.
000195             0079*  ;  	  Outputs:  DEHL = elapsed time (centiseconds)
000195             0080*  ; 	  Destroys: A,D,E,H,L,F
000195             0081*  ;
000195 3E 01       0082*  GETIME:         LD	A,1
000197 21 17 51    0083*                  LD	HL,SCRAP
00019A CD 4F 14    0084*                  CALL	OSWORD
00019D 21 17 51    0085*                  LD	HL,SCRAP
0001A0 5E          0086*                  LD	E,(HL)
0001A1 23          0087*                  INC	HL
0001A2 56          0088*                  LD	D,(HL)
0001A3 23          0089*                  INC	HL
0001A4 7E          0090*                  LD	A,(HL)
0001A5 23          0091*                  INC	HL
0001A6 66          0092*                  LD	H,(HL)
0001A7 6F          0093*                  LD	L,A
0001A8 EB          0094*                  EX	DE,HL
0001A9 C9          0095*                  RET
0001AA             0096*  ;
0001AA             0097*  ;GETIMS	- Read real-time clock as string.
0001AA             0098*  ;  	  Outputs:  TIME$ in string accumulator
0001AA             0099*  ;                   E = string length (25)
0001AA             0100*  ; 	  Destroys: A,B,C,D,E,H,L,F
0001AA             0101*  ;
0001AA 3E 0E       0102*  GETIMS:         LD	A,14
0001AC 21 17 51    0103*                  LD	HL,SCRAP
0001AF 36 00       0104*                  LD	(HL),0
0001B1 CD 4F 14    0105*                  CALL	OSWORD
0001B4 21 17 51    0106*                  LD	HL,SCRAP
0001B7 11 00 52    0107*                  LD	DE,ACCS
0001BA 7E          0108*                  LD	A,(HL)
0001BB BB          0109*                  CP	E
0001BC C8          0110*                  RET	Z
0001BD 01 19 00    0111*                  LD	BC,25
0001C0 ED B0       0112*                  LDIR
0001C2 C9          0113*                  RET
0001C3             0114*  ;
0001C3             0115*  ;
0001C3             0116*  ;PUTIME	- Load elapsed-time clock.
0001C3             0117*  ;   	  Inputs:   DEHL = time to load (centiseconds)
0001C3             0118*  ; 	  Destroys: A,D,E,H,L,F
0001C3             0119*  ;
0001C3 DD E5       0120*  PUTIME:         PUSH	IX
0001C5 DD 21 17 51 0121*                  LD	IX,SCRAP
0001C9 DD 75 00    0122*                  LD	(IX+0),L
0001CC DD 74 01    0123*                  LD	(IX+1),H
0001CF DD 73 02    0124*                  LD	(IX+2),E
0001D2 DD 72 03    0125*                  LD	(IX+3),D
0001D5 3E 02       0126*                  LD	A,2
0001D7 21 17 51    0127*                  LD	HL,SCRAP
0001DA CD 4F 14    0128*                  CALL	OSWORD
0001DD DD E1       0129*                  POP	IX
0001DF C9          0130*                  RET
0001E0             0131*  ;
0001E0             0132*  ;PUTIMS	- Wtite real-time clock as string.
0001E0             0133*  ;  	  Inputs:   string in string accumulator
0001E0             0134*  ;                   E = string length
0001E0             0135*  ; 	  Destroys: A,B,C,D,E,H,L,F
0001E0             0136*  ;
0001E0 7B          0137*  PUTIMS:         LD	A,E		;Length
0001E1 FE 1A       0138*                  CP	26
0001E3 D0          0139*                  RET	NC
0001E4 06 00       0140*                  LD	B,0
0001E6 4F          0141*                  LD	C,A
0001E7 11 18 51    0142*                  LD	DE,SCRAP+1
0001EA 21 00 52    0143*                  LD	HL,ACCS
0001ED ED B0       0144*                  LDIR
0001EF 21 17 51    0145*                  LD	HL,SCRAP
0001F2 77          0146*                  LD	(HL),A
0001F3 3E 0F       0147*                  LD	A,15
0001F5 C3 4F 14    0148*                  JP	OSWORD
0001F8             0149*  ;
0001F8             0150*  ;
0001F8             0151*  ;CLRSCN	- Clear screen.
0001F8             0152*  ; 	  Destroys: A,D,E,H,L,F
0001F8             0153*  ;
0001F8 3E 0C       0154*  CLRSCN:         LD	A,0CH
0001FA C3 95 11    0155*                  JP	OSWRCH
0001FD             0156*  ;
0001FD             0157*  ;
0001FD             0158*  ;OSKEY	- Sample keyboard with specified wait.
0001FD             0159*  ;   	  Inputs:   HL = Time to wait (centiseconds)
0001FD             0160*  ;  	  Outputs:  Carry reset indicates time-out.
0001FD             0161*  ;                   If carry set, A = character typed.
0001FD             0162*  ; 	  Destroys: A,D,E,H,L,F
0001FD             0163*  ;
0001FD 3E 81       0164*  OSKEY:          LD	A,129
0001FF CD 6D 14    0165*                  CALL	OSBYTE
000202 7C          0166*                  LD	A,H
000203 B7          0167*                  OR	A
000204 C0          0168*                  RET	NZ		;TIME-OUT, CARRY RESET
000205 7D          0169*                  LD	A,L
000206 37          0170*                  SCF
000207 C9          0171*                  RET			;NORMAL, CARRY SET
000208             0172*  ;
000208             0173*  ;PUTCSR	- Move cursor to specified position.
000208             0174*  ;   	  Inputs:   DE = horizontal position (LHS=0)
000208             0175*  ;                   HL = vertical position (TOP=0)
000208             0176*  ; 	  Destroys: A,D,E,H,L,F
000208             0177*  ;
000208 3E 1F       0178*  PUTCSR:         LD	A,1FH
00020A CD 95 11    0179*                  CALL	OSWRCH
00020D 7B          0180*                  LD	A,E
00020E CD 95 11    0181*                  CALL	OSWRCH
000211 7D          0182*                  LD	A,L
000212 C3 95 11    0183*                  JP	OSWRCH
000215             0184*  ;
000215             0185*  ;GETCSR	- Return cursor coordinates.
000215             0186*  ;   	  Outputs:  DE = X coordinate (POS)
000215             0187*  ;                   HL = Y coordinate (VPOS)
000215             0188*  ;  	  Destroys: A,D,E,H,L,F
000215             0189*  ;
000215 3E 86       0190*  GETCSR:         LD	A,134
000217 CD 6D 14    0191*                  CALL	OSBYTE
00021A 5D          0192*                  LD	E,L
00021B 6C          0193*                  LD	L,H
00021C 16 00       0194*                  LD	D,0
00021E 62          0195*                  LD	H,D
00021F C9          0196*                  RET
000220             0197*  ;
000220             0198*  ;POINT - var=POINT(x,y)
000220             0199*  ;
000220 CD 33 18    0200*  POINT:          CALL	EXPRI
000223 D9          0201*                  EXX
000224 E5          0202*                  PUSH	HL
000225 CD 5D 05    0203*                  CALL	CEXPRI
000228 D9          0204*                  EXX
000229 D1          0205*                  POP	DE
00022A CD AE 20    0206*                  CALL	BRAKET
00022D DD 21 17 51 0207*                  LD	IX,SCRAP
000231 DD 73 00    0208*                  LD	(IX+0),E
000234 DD 72 01    0209*                  LD	(IX+1),D
000237 DD 75 02    0210*                  LD	(IX+2),L
00023A DD 74 03    0211*                  LD	(IX+3),H
00023D 21 17 51    0212*                  LD	HL,SCRAP
000240 3E 09       0213*                  LD	A,9
000242 CD 4F 14    0214*                  CALL	OSWORD
000245 DD 7E 04    0215*                  LD	A,(IX+4)
000248 6F          0216*                  LD	L,A
000249 C6 01       0217*                  ADD	A,1
00024B 9F          0218*                  SBC	A,A
00024C 67          0219*                  LD	H,A
00024D D9          0220*  RETEXX:         EXX
00024E 67          0221*                  LD	H,A
00024F 6F          0222*                  LD	L,A
000250 AF          0223*                  XOR	A
000251 4F          0224*                  LD	C,A
000252 C9          0225*                  RET
000253             0226*  ;
000253             0227*  ;ADVAL - var=ADVAL(n)
000253             0228*  ;
000253 CD 60 18    0229*  ADVAL:          CALL	ITEMI
000256 D9          0230*                  EXX
000257 3E 80       0231*                  LD	A,128
000259 CD 6D 14    0232*                  CALL	OSBYTE
00025C AF          0233*                  XOR	A
00025D 18 EE       0234*                  JR	RETEXX
00025F             0235*  ;
00025F             0236*  ;MODEFN - var=MODE
00025F             0237*  ;
00025F 3E 87       0238*  MODEFN:         LD	A,135
000261 CD 6D 14    0239*                  CALL	OSBYTE
000264 6C          0240*                  LD	L,H
000265 AF          0241*  RETU8:          XOR	A
000266 67          0242*                  LD	H,A
000267 18 E4       0243*                  JR	RETEXX
000269             0244*  ;
000269             0245*  ;WIDFN - var=WIDTH
000269             0246*  ;
000269 3A FC 54    0247*  WIDFN:          LD	A,(WIDTH)
00026C 6F          0248*                  LD	L,A
00026D 18 F6       0249*                  JR	RETU8
00026F             0250*  ;
00026F             0251*  ;ENVEL - ENVELOPE var,var,var,var,var,var,var,
00026F             0252*  ;                 var,var,var,var,var,var,var
00026F             0253*  ;
00026F 06 00       0254*  ENVEL:          LD	B,0
000271 DD 21 17 51 0255*                  LD	IX,SCRAP
000275 C5          0256*                  PUSH	BC
000276 DD E5       0257*                  PUSH	IX
000278 CD 33 18    0258*  ENVEL1:         CALL	EXPRI
00027B D9          0259*                  EXX
00027C DD E1       0260*                  POP	IX
00027E C1          0261*                  POP	BC
00027F DD 75 00    0262*                  LD	(IX),L
000282 78          0263*                  LD	A,B
000283 FE 0D       0264*                  CP	13
000285 28 0B       0265*                  JR	Z,ENVEL2
000287 04          0266*                  INC	B
000288 DD 23       0267*                  INC	IX
00028A C5          0268*                  PUSH	BC
00028B DD E5       0269*                  PUSH	IX
00028D CD A2 20    0270*                  CALL	COMMA
000290 18 E6       0271*                  JR	ENVEL1
000292 21 17 51    0272*  ENVEL2:         LD	HL,SCRAP
000295 3E 08       0273*                  LD	A,8
000297 CD 4F 14    0274*                  CALL	OSWORD
00029A C3 99 24    0275*                  JP	XEQ
00029D             0276*  ;
00029D             0277*  ;SOUND - SOUND var,var,var,var
00029D             0278*  ;
00029D 06 00       0279*  SOUND:          LD	B,0
00029F DD 21 17 51 0280*                  LD	IX,SCRAP
0002A3 C5          0281*                  PUSH	BC
0002A4 DD E5       0282*                  PUSH	IX
0002A6 CD 33 18    0283*  SOUND1:         CALL	EXPRI
0002A9 D9          0284*                  EXX
0002AA DD E1       0285*                  POP	IX
0002AC C1          0286*                  POP	BC
0002AD DD 75 00    0287*                  LD	(IX+0),L
0002B0 DD 74 01    0288*                  LD	(IX+1),H
0002B3 DD 23       0289*                  INC	IX
0002B5 DD 23       0290*                  INC	IX
0002B7 04          0291*                  INC	B
0002B8 04          0292*                  INC	B
0002B9 78          0293*                  LD	A,B
0002BA FE 08       0294*                  CP	8
0002BC 28 08       0295*                  JR	Z,SOUND2
0002BE C5          0296*                  PUSH	BC
0002BF DD E5       0297*                  PUSH	IX
0002C1 CD A2 20    0298*                  CALL	COMMA
0002C4 18 E0       0299*                  JR	SOUND1
0002C6 21 17 51    0300*  SOUND2:         LD	HL,SCRAP
0002C9 3E 07       0301*                  LD	A,7
0002CB CD 4F 14    0302*                  CALL	OSWORD
0002CE C3 99 24    0303*                  JP	XEQ
0002D1             0304*  ;
0002D1             0305*  ;MODE - MODE n
0002D1             0306*  ;
0002D1 CD 33 18    0307*  MODE:           CALL	EXPRI
0002D4 AF          0308*                  XOR	A
0002D5 32 FB 54    0309*                  LD	(COUNT),A
0002D8 D9          0310*                  EXX
0002D9 65          0311*                  LD	H,L
0002DA 2E 16       0312*                  LD	L,22
0002DC CD 44 05    0313*                  CALL	WRCH2
0002DF 18 72       0314*                  JR	XEQGO1
0002E1             0315*  ;
0002E1             0316*  ;CLG
0002E1             0317*  ;
0002E1 3E 10       0318*  CLG:            LD	A,16
0002E3 CD 95 11    0319*                  CALL	OSWRCH
0002E6 18 6B       0320*                  JR	XEQGO1
0002E8             0321*  ;
0002E8             0322*  ;ORIGIN x,y
0002E8             0323*  ;
0002E8 CD 33 18    0324*  ORIGIN:         CALL    EXPRI
0002EB D9          0325*                  EXX
0002EC E5          0326*                  PUSH	HL
0002ED CD 5D 05    0327*                  CALL    CEXPRI
0002F0 D9          0328*                  EXX
0002F1 D1          0329*                  POP	DE
0002F2 0E 1D       0330*                  LD	C,29
0002F4 CD 38 05    0331*                  CALL	WRCH5
0002F7 18 5A       0332*                  JR	XEQGO1
0002F9             0333*  ;
0002F9             0334*  ;COLOUR n
0002F9             0335*  ;COLOUR n,p
0002F9             0336*  ;COLOUR n,r,g,b
0002F9             0337*  ;
0002F9 CD 33 18    0338*  COLOUR:         CALL	EXPRI		;n
0002FC D9          0339*                  EXX
0002FD FD 7E 00    0340*                  LD	A,(IY)
000300 FE 2C       0341*                  CP	','
000302 28 08       0342*                  JR      Z,PALCOL
000304 65          0343*                  LD	H,L
000305 2E 11       0344*                  LD	L,17
000307 CD 44 05    0345*                  CALL	WRCH2
00030A 18 47       0346*                  JR	XEQGO1
00030C             0347*  ;
00030C E5          0348*  PALCOL:         PUSH	HL
00030D CD 5D 05    0349*                  CALL	CEXPRI		;p or r
000310 D9          0350*                  EXX
000311 EB          0351*                  EX	DE,HL
000312 21 00 00    0352*                  LD	HL,0
000315 FD 7E 00    0353*                  LD	A,(IY)
000318 FE 2C       0354*                  CP	','
00031A 20 15       0355*                  JR	NZ,PALET1
00031C D5          0356*                  PUSH	DE
00031D CD 5D 05    0357*                  CALL	CEXPRI		;g
000320 D9          0358*                  EXX
000321 E5          0359*                  PUSH	HL
000322 CD 5D 05    0360*                  CALL	CEXPRI		;b
000325 D9          0361*                  EXX
000326 D1          0362*                  POP	DE
000327 C1          0363*                  POP	BC
000328 7D          0364*                  LD	A,L
000329 E1          0365*                  POP	HL
00032A 51          0366*                  LD	D,C		;r
00032B 4D          0367*                  LD	C,L		;n
00032C 6B          0368*                  LD	L,E		;g
00032D 67          0369*                  LD	H,A		;b
00032E 1E 10       0370*                  LD	E,16
000330 C5          0371*                  PUSH	BC
000331 C1          0372*  PALET1:         POP	BC
000332 06 13       0373*                  LD	B,19
000334 CD 34 05    0374*                  CALL	WRCH6
000337 18 1A       0375*                  JR	XEQGO1
000339             0376*  ;
000339             0377*  ;GCOL [a,]b
000339             0378*  ;
000339 CD 33 18    0379*  GCOL:           CALL	EXPRI
00033C D9          0380*                  EXX
00033D 1E 00       0381*                  LD	E,0
00033F FD 7E 00    0382*                  LD	A,(IY)
000342 FE 2C       0383*                  CP	','
000344 20 06       0384*                  JR	NZ,GCOL0
000346 E5          0385*                  PUSH	HL
000347 CD 5D 05    0386*                  CALL	CEXPRI
00034A D9          0387*                  EXX
00034B D1          0388*                  POP	DE
00034C 65          0389*  GCOL0:          LD	H,L
00034D 6B          0390*                  LD	L,E
00034E 16 12       0391*                  LD	D,18
000350 CD 40 05    0392*                  CALL	WRCH3		;DLH
000353 C3 99 24    0393*  XEQGO1:         JP	XEQ
000356             0394*  ;
000356             0395*  ;CSRON  - Turn caret on
000356             0396*  ;CSROFF - Turn caret off
000356             0397*  ;
000356 0E 01       0398*  CSRON:          LD	C,1
000358 18 02       0399*                  JR	CSRGO
00035A             0400*  ;
00035A 0E 00       0401*  CSROFF:         LD	C,0
00035C 3E 17       0402*  CSRGO:          LD	A,23
00035E CD 95 11    0403*                  CALL	OSWRCH
000361 3E 01       0404*                  LD	A,1
000363 CD 95 11    0405*                  CALL	OSWRCH
000366 79          0406*                  LD	A,C
000367 06 08       0407*                  LD	B,8
000369 CD 95 11    0408*  CSRGO1:         CALL	OSWRCH
00036C AF          0409*                  XOR	A
00036D 10 FA       0410*                  DJNZ	CSRGO1
00036F 18 E2       0411*                  JR	XEQGO1
000371             0412*  ;
000371             0413*  ;LINE x1,y1,x2,y2
000371             0414*  ;
000371 CD 33 18    0415*  LINE:           CALL	EXPRI
000374 D9          0416*                  EXX
000375 E5          0417*                  PUSH	HL
000376 CD 4C 05    0418*                  CALL	EXPR3
000379 E3          0419*                  EX	(SP),HL		;HL <- x1, (SP) <- y2
00037A C5          0420*                  PUSH	BC
00037B EB          0421*                  EX	DE,HL
00037C 0E 04       0422*                  LD	C,4
00037E CD 32 05    0423*                  CALL	VDU25
000381 D1          0424*                  POP	DE
000382 E1          0425*                  POP	HL
000383 0E 05       0426*                  LD	C,5
000385 18 2A       0427*                  JR	PLOT4A
000387             0428*  ;
000387             0429*  ;CIRCLE [FILL] x,y,r
000387             0430*  ;
000387 FE 03       0431*  CIRCLE:         CP	TFILL
000389 F5          0432*                  PUSH	AF
00038A 20 02       0433*                  JR	NZ,CIRCL0
00038C FD 23       0434*                  INC	IY
00038E CD 33 18    0435*  CIRCL0:         CALL	EXPRI
000391 D9          0436*                  EXX
000392 E5          0437*                  PUSH	HL
000393 CD 5D 05    0438*                  CALL	CEXPRI
000396 D9          0439*                  EXX
000397 E5          0440*                  PUSH	HL
000398 CD 5D 05    0441*                  CALL	CEXPRI
00039B D9          0442*                  EXX
00039C C1          0443*                  POP	BC		;y
00039D D1          0444*                  POP	DE		;x
00039E E5          0445*                  PUSH	HL
00039F 69          0446*                  LD	L,C
0003A0 60          0447*                  LD	H,B
0003A1 0E 04       0448*                  LD	C,4		; PLOT 4 = MOVE
0003A3 CD 32 05    0449*                  CALL	VDU25
0003A6 D1          0450*                  POP	DE		;r
0003A7 21 00 00    0451*                  LD	HL,0
0003AA F1          0452*                  POP	AF
0003AB 0E 91       0453*                  LD	C,145		; PLOT 145 = outline circle
0003AD 20 02       0454*                  JR	NZ,PLOT4A
0003AF 0E 99       0455*                  LD	C,153		; PLOT 153 = filled circle
0003B1 18 6C       0456*  PLOT4A:         JR	PLOT4
0003B3             0457*  ;
0003B3             0458*  ;ELLIPSE [FILL] x,y,a,b
0003B3             0459*  ;
0003B3 FE 03       0460*  ELLIPS:         CP	TFILL
0003B5 F5          0461*                  PUSH	AF
0003B6 20 02       0462*                  JR	NZ,ELLIP0
0003B8 FD 23       0463*                  INC	IY
0003BA CD 33 18    0464*  ELLIP0:         CALL	EXPRI
0003BD D9          0465*                  EXX
0003BE E5          0466*                  PUSH	HL
0003BF CD 4C 05    0467*                  CALL	EXPR3
0003C2 E3          0468*                  EX	(SP),HL		;HL <- x, (SP) <- b
0003C3 C5          0469*                  PUSH	BC
0003C4 EB          0470*                  EX	DE,HL
0003C5 0E 04       0471*                  LD	C,4		; PLOT 4 = Move absolute
0003C7 CD 32 05    0472*                  CALL	VDU25
0003CA D1          0473*                  POP	DE		;a
0003CB D5          0474*                  PUSH	DE
0003CC 21 00 00    0475*                  LD	HL,0
0003CF 4D          0476*                  LD	C,L		; PLOT 0 - Move relative
0003D0 CD 32 05    0477*                  CALL	VDU25
0003D3 D1          0478*                  POP	DE		;a
0003D4 AF          0479*                  XOR	A
0003D5 6F          0480*                  LD	L,A
0003D6 67          0481*                  LD	H,A
0003D7 ED 52       0482*                  SBC	HL,DE
0003D9 EB          0483*                  EX	DE,HL
0003DA E1          0484*                  POP	HL		;b
0003DB F1          0485*                  POP	AF
0003DC 0E C1       0486*                  LD	C,193		; PLOT 193 = outline ellipse
0003DE 20 3F       0487*                  JR	NZ,PLOT4
0003E0 0E C9       0488*                  LD	C,201		; PLOT 201 = filled ellipse
0003E2 18 3B       0489*                  JR	PLOT4
0003E4             0490*  ;
0003E4             0491*  ;MOVE [BY} x,y
0003E4             0492*  ;DRAW [BY] x,y
0003E4             0493*  ;PLOT [BY] [n,]x,y
0003E4             0494*  ;FILL [BY] x,y
0003E4             0495*  ;
0003E4 0E 04       0496*  MOVE:           LD	C,4
0003E6 18 23       0497*                  JR	PLOT1
0003E8             0498*  ;
0003E8 0E 05       0499*  DRAW:           LD	C,5
0003EA 18 1F       0500*                  JR	PLOT1
0003EC             0501*  ;
0003EC 0E 85       0502*  FILL:           LD	C,133
0003EE 18 1B       0503*                  JR	PLOT1
0003F0             0504*  ;
0003F0 0E 45       0505*  PLOT:           LD	C,69
0003F2 FE 0F       0506*                  CP	TBY
0003F4 28 15       0507*                  JR	Z,PLOT1
0003F6 CD 33 18    0508*                  CALL	EXPRI
0003F9 D9          0509*                  EXX
0003FA E5          0510*                  PUSH	HL
0003FB CD 5D 05    0511*                  CALL	CEXPRI
0003FE D9          0512*                  EXX
0003FF FD 7E 00    0513*                  LD	A,(IY)
000402 FE 2C       0514*                  CP	','
000404 28 12       0515*                  JR	Z,PLOT3
000406 D1          0516*                  POP	DE
000407 0E 45       0517*                  LD	C,69
000409 18 14       0518*                  JR	PLOT4
00040B             0519*  ;
00040B FE 0F       0520*  PLOT1:          CP	TBY
00040D 20 04       0521*                  JR	NZ,PLOT2
00040F FD 23       0522*                  INC	IY
000411 CB 91       0523*                  RES	2,C		;Change absolute to relative
000413 C5          0524*  PLOT2:          PUSH	BC
000414 CD 33 18    0525*                  CALL	EXPRI
000417 D9          0526*                  EXX
000418 E5          0527*  PLOT3:          PUSH	HL
000419 CD 5D 05    0528*                  CALL	CEXPRI
00041C D9          0529*                  EXX
00041D D1          0530*                  POP	DE
00041E C1          0531*                  POP	BC
00041F CD 32 05    0532*  PLOT4:          CALL	VDU25
000422 C3 99 24    0533*                  JP	XEQ
000425             0534*  ;
000425             0535*  ;RECTANGLE [FILL] x,y,w[,h] [TO xnew,ynew]
000425             0536*  ;
000425 FE 03       0537*  RECTAN:         CP	TFILL
000427 F5          0538*                  PUSH	AF
000428 20 02       0539*                  JR	NZ,RECT0
00042A FD 23       0540*                  INC	IY
00042C CD 33 18    0541*  RECT0:          CALL	EXPRI
00042F D9          0542*                  EXX
000430 E5          0543*                  PUSH	HL
000431 CD 5D 05    0544*                  CALL	CEXPRI
000434 D9          0545*                  EXX
000435 E5          0546*                  PUSH	HL
000436 CD 5D 05    0547*                  CALL	CEXPRI
000439 D9          0548*                  EXX
00043A E5          0549*                  PUSH	HL
00043B FD 7E 00    0550*                  LD	A,(IY)
00043E FE 2C       0551*                  CP	','
000440 20 04       0552*                  JR	NZ,RECT1
000442 CD 5D 05    0553*                  CALL	CEXPRI
000445 D9          0554*                  EXX
000446 C1          0555*  RECT1:          POP	BC		;w
000447 D1          0556*                  POP	DE		;y
000448 E3          0557*                  EX	(SP),HL		;HL <- x, (SP) <- h
000449 C5          0558*                  PUSH	BC
00044A EB          0559*                  EX	DE,HL
00044B 0E 04       0560*                  LD	C,4
00044D CD 32 05    0561*                  CALL	VDU25
000450 FD 7E 00    0562*                  LD	A,(IY)
000453 FE B8       0563*                  CP	TTO
000455 28 09       0564*                  JR	Z,RECTTO
000457 D1          0565*                  POP	DE		;w
000458 E1          0566*                  POP	HL		;h
000459 F1          0567*                  POP	AF
00045A 20 22       0568*                  JR	NZ,OUTLIN
00045C 0E 61       0569*                  LD	C,97
00045E 18 BF       0570*                  JR	PLOT4
000460             0571*  ;
000460             0572*  ;Block copy / move:
000460             0573*  ;
000460 FD 23       0574*  RECTTO:         INC	IY		; Bump over TO
000462 CD 33 18    0575*                  CALL	EXPRI
000465 D9          0576*                  EXX
000466 E5          0577*                  PUSH	HL
000467 CD 5D 05    0578*                  CALL	CEXPRI
00046A D9          0579*                  EXX
00046B C1          0580*                  POP	BC		;newx
00046C D1          0581*                  POP	DE		;w
00046D E3          0582*                  EX	(SP),HL		;HL <- h, (SP) <- newy
00046E C5          0583*                  PUSH	BC
00046F 0E 00       0584*                  LD	C,0
000471 CD 32 05    0585*                  CALL	VDU25
000474 D1          0586*                  POP	DE		;newx
000475 E1          0587*                  POP	HL		;newy
000476 F1          0588*                  POP	AF
000477 0E BE       0589*                  LD	C,190		; PLOT 190 - Block copy
000479 20 01       0590*                  JR	NZ,PLOT4B
00047B 0D          0591*                  DEC	C		; PLOT 189 - Block move
00047C 18 A1       0592*  PLOT4B:         JR	PLOT4
00047E             0593*  ;
00047E             0594*  ;Outline rectangle:
00047E             0595*  ;
00047E 0E 09       0596*  OUTLIN:         LD	C,9		; PLOT 9 - draw relative
000480 E5          0597*                  PUSH	HL
000481 21 00 00    0598*                  LD	HL,0
000484 CD 32 05    0599*                  CALL	VDU25		; side 1
000487 E1          0600*                  POP	HL
000488 D5          0601*                  PUSH	DE
000489 11 00 00    0602*                  LD	DE,0
00048C CD 32 05    0603*                  CALL	VDU25		; side 2
00048F D1          0604*                  POP	DE
000490 E5          0605*                  PUSH	HL
000491 AF          0606*                  XOR	A
000492 6F          0607*                  LD	L,A
000493 67          0608*                  LD	H,A
000494 ED 52       0609*                  SBC	HL,DE
000496 EB          0610*                  EX	DE,HL
000497 6F          0611*                  LD	L,A
000498 67          0612*                  LD	H,A
000499 CD 32 05    0613*                  CALL 	VDU25		; side 3
00049C D1          0614*                  POP	DE
00049D AF          0615*                  XOR	A
00049E 6F          0616*                  LD	L,A
00049F 67          0617*                  LD	H,A
0004A0 ED 52       0618*                  SBC	HL,DE
0004A2 5F          0619*                  LD	E,A
0004A3 57          0620*                  LD	D,A
0004A4 18 D6       0621*                  JR	PLOT4B
0004A6             0622*  ;
0004A6             0623*  ;MOUSE x, y, b
0004A6             0624*  ;
0004A6 3E 80       0625*  MOUSE:          LD	A,128
0004A8 21 09 00    0626*                  LD	HL,9
0004AB CD 6D 14    0627*                  CALL	OSBYTE
0004AE E5          0628*                  PUSH	HL
0004AF 3E 80       0629*                  LD	A,128
0004B1 21 08 00    0630*                  LD	HL,8
0004B4 CD 6D 14    0631*                  CALL	OSBYTE
0004B7 E5          0632*                  PUSH	HL
0004B8 3E 80       0633*                  LD	A,128
0004BA 21 07 00    0634*                  LD	HL,7
0004BD CD 6D 14    0635*                  CALL	OSBYTE
0004C0 E5          0636*                  PUSH	HL
0004C1 CD D6 25    0637*                  CALL	VAR_
0004C4 E1          0638*                  POP	HL
0004C5 CD 63 05    0639*                  CALL	STOREI
0004C8 CD A2 20    0640*                  CALL	COMMA
0004CB CD 0B 45    0641*                  CALL	NXT
0004CE CD D6 25    0642*                  CALL	VAR_
0004D1 E1          0643*                  POP	HL
0004D2 CD 63 05    0644*                  CALL	STOREI
0004D5 CD A2 20    0645*                  CALL	COMMA
0004D8 CD 0B 45    0646*                  CALL	NXT
0004DB CD D6 25    0647*                  CALL	VAR_
0004DE E1          0648*                  POP	HL
0004DF CD 63 05    0649*                  CALL	STOREI
0004E2 C3 99 24    0650*  XEQGO2:         JP	XEQ
0004E5             0651*  ;
0004E5             0652*  ;WAIT [n]
0004E5             0653*  ;
0004E5 CD 36 35    0654*  WAIT:           CALL	TERMQ
0004E8 28 F8       0655*                  JR	Z,XEQGO2
0004EA CD 33 18    0656*                  CALL	EXPRI
0004ED D9          0657*                  EXX
0004EE 44          0658*                  LD	B,H
0004EF 4D          0659*                  LD	C,L
0004F0 CD 95 01    0660*                  CALL	GETIME
0004F3 09          0661*                  ADD	HL,BC
0004F4 01 00 00    0662*                  LD	BC,0
0004F7 EB          0663*                  EX	DE,HL
0004F8 ED 4A       0664*                  ADC	HL,BC
0004FA EB          0665*                  EX	DE,HL
0004FB CD 17 12    0666*  WAIT1:          CALL	TRAP
0004FE D5          0667*                  PUSH	DE
0004FF E5          0668*                  PUSH	HL
000500 CD 95 01    0669*                  CALL	GETIME
000503 C1          0670*                  POP	BC
000504 B7          0671*                  OR	A
000505 ED 42       0672*                  SBC	HL,BC
000507 60          0673*                  LD	H,B
000508 69          0674*                  LD	L,C
000509 EB          0675*                  EX	DE,HL
00050A C1          0676*                  POP	BC
00050B ED 42       0677*                  SBC	HL,BC
00050D 30 D3       0678*                  JR	NC,XEQGO2
00050F EB          0679*                  EX	DE,HL
000510 50          0680*                  LD	D,B
000511 59          0681*                  LD	E,C
000512 18 E7       0682*                  JR	WAIT1
000514             0683*  ;
000514             0684*  ;OSCALL - Trap call to FFxx
000514             0685*  ;
000514 E1          0686*  OSCALL:         POP	HL		;DITCH RETURN ADDRESS
000515 21 27 05    0687*                  LD	HL,OSRET
000518 E5          0688*                  PUSH	HL		;NEW RETURN ADDRESS
000519 DD 7E 04    0689*                  LD	A,(IX+4)	;A%
00051C DD 5E 14    0690*                  LD	E,(IX+20)	;E%
00051F DD 66 64    0691*                  LD	H,(IX+100)	;Y%
000522 DD 6E 60    0692*                  LD	L,(IX+96)	;X%
000525 FD E9       0693*                  JP	(IY)
000527 F5          0694*  OSRET:          PUSH	AF
000528 7D          0695*                  LD	A,L		;F  H  L  A
000529 6C          0696*                  LD	L,H		;|  |  |  |
00052A D9          0697*                  EXX			;|  |  |  |
00052B C1          0698*                  POP	BC		;|  |  |  |
00052C 67          0699*                  LD	H,A		;|  |  |  |
00052D 68          0700*                  LD	L,B		;H  L  H' L'
00052E 79          0701*                  LD	A,C
00052F D9          0702*                  EXX
000530 67          0703*                  LD	H,A
000531 C9          0704*                  RET
000532             0705*  ;
000532 06 19       0706*  VDU25:          LD	B,25
000534 78          0707*  WRCH6:          LD	A,B
000535 CD 95 11    0708*                  CALL	OSWRCH
000538 79          0709*  WRCH5:          LD	A,C
000539 CD 95 11    0710*                  CALL	OSWRCH
00053C 7B          0711*  WRCH4:          LD	A,E
00053D CD 95 11    0712*                  CALL	OSWRCH
000540 7A          0713*  WRCH3:          LD	A,D
000541 CD 95 11    0714*                  CALL	OSWRCH
000544 7D          0715*  WRCH2:          LD	A,L
000545 CD 95 11    0716*                  CALL	OSWRCH
000548 7C          0717*                  LD	A,H
000549 C3 95 11    0718*                  JP	OSWRCH
00054C             0719*  ;
00054C CD 5D 05    0720*  EXPR3:          CALL	CEXPRI
00054F D9          0721*                  EXX
000550 E5          0722*                  PUSH	HL
000551 CD 5D 05    0723*                  CALL	CEXPRI
000554 D9          0724*                  EXX
000555 E5          0725*                  PUSH	HL
000556 CD 5D 05    0726*                  CALL	CEXPRI
000559 D9          0727*                  EXX
00055A C1          0728*                  POP	BC		;x2
00055B D1          0729*                  POP	DE		;y1
00055C C9          0730*                  RET
00055D             0731*  ;
00055D CD A2 20    0732*  CEXPRI:         CALL	COMMA
000560 C3 33 18    0733*                  JP	EXPRI
000563             0734*  ;
000563 CB 7F       0735*  STOREI:         BIT	7,A
000565 20 0C       0736*                  JR	NZ,EEK
000567 CB 77       0737*                  BIT	6,A
000569 20 08       0738*                  JR	NZ,EEK
00056B D9          0739*                  EXX
00056C 21 00 00    0740*                  LD	HL,0
00056F 4D          0741*                  LD	C,L
000570 C3 F0 31    0742*                  JP	STOREN
000573             0743*  ;
000573 3E 32       0744*  EEK:            LD	A,50
000575 CD 55 3F    0745*                  CALL	EXTERR
000578 13          0746*                  DB	13H		;'Bad '
000579 04          0747*                  DB	04H		;'MOUSE'
00057A 20          0748*                  DB	20H
00057B 15          0749*                  DB	15H		;'variable'
00057C 00          0750*                  DB	0
00057D             0751*  ;
00057D             0752*  TINT:
00057D             0753*  TINTFN:
00057D             0754*  SYS:
00057D AF          0755*                  XOR	A
00057E CD 55 3F    0756*                  CALL	EXTERR
000581 53 6F 72 72 0757*                  DB	"Sorry"
       79          
000586 00          0758*                  DB	0
000587             0759*  ;
000587             0760*  ;                END
000587             0761*  ;    include "acorn.inc"
000587             0009       include "asmb.asm"
000587             0001*  ;
000587             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
000587             0003*  ;
000587             0004*                  .ASSUME ADL = 0
000587             0005*  ;	.ORG 0x0000
000587             0006*  ;                SEGMENT CODE
000587             0007*  ;
000587             0008*  ;BBC BASIC INTERPRETER - Z80 VERSION
000587             0009*  ;Z80 CPU ASSEMBLER MODULE - "ASMB"
000587             0010*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
000587             0011*  ;
000587             0012*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
000587             0013*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
000587             0014*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
000587             0015*  ;
000587             0016*  ;VERSION 5.0, 14-05-2024
000587             0017*  ;
000587             0018*  ;                XDEF	ASSEM
000587             0019*  ;
000587             0020*  ;                XREF	TABIT
000587             0021*  ;                XREF	CRLF
000587             0022*  ;                XREF	OUT
000587             0023*  ;                XREF	VAR_
000587             0024*  ;                XREF	ZERO
000587             0025*  ;                XREF	STOREN
000587             0026*  ;                XREF	ERROR_
000587             0027*  ;                XREF	EXPRI
000587             0028*  ;                XREF	EXPRS
000587             0029*  ;
000587             0030*  ;                XREF	LISTON
000587             0031*  ;                XREF	COUNT
000587             0032*  ;                XREF	ACCS
000587             0033*  ;                XREF	OC
000587             0034*  ;                XREF	PC
000587             0035*  ;
000587             0036*  ; CR             EQU	0DH	; in equs.inc
000587             0037*  TAND:           EQU	80H
000587             0038*  TOR:            EQU	84H
000587             0039*  ; TERROR:         EQU	85H	; in exec.asm
000587             0040*  TCALL:          EQU	0D6H
000587             0041*  TDEF:           EQU	0DDH
000587             0042*  ;
000587             0043*  ;ASSEMBLER:
000587             0044*  ;LANGUAGE-INDEPENDENT CONTROL SECTION:
000587             0045*  ; Outputs: A=delimiter, carry set if syntax error.
000587             0046*  ;
000587 CD 0F 09    0047*  ASSEM:          CALL	SKIP
00058A FD 23       0048*                  INC	IY
00058C FE 3A       0049*                  CP	':'
00058E 28 F7       0050*                  JR	Z,ASSEM
000590 FE 5D       0051*                  CP	']'
000592 C8          0052*                  RET	Z
000593 FE 0D       0053*                  CP	CR
000595 C8          0054*                  RET	Z
000596 FD 2B       0055*                  DEC	IY
000598 DD 2A 40 54 0056*                  LD	IX,(PC)		;PROGRAM COUNTER
00059C 21 FE 54    0057*                  LD	HL,LISTON
00059F CB 76       0058*                  BIT	6,(HL)
0005A1 28 04       0059*                  JR	Z,ASSEM0
0005A3 DD 2A 3C 54 0060*                  LD	IX,(OC)		;ORIGIN of CODE
0005A7 DD E5       0061*  ASSEM0:         PUSH	IX
0005A9 FD E5       0062*                  PUSH	IY
0005AB CD 3B 06    0063*                  CALL	ASMB
0005AE C1          0064*                  POP	BC
0005AF D1          0065*                  POP	DE
0005B0 D8          0066*                  RET	C
0005B1 CD 0F 09    0067*                  CALL	SKIP
0005B4 37          0068*                  SCF
0005B5 C0          0069*                  RET	NZ
0005B6 FD 2B       0070*                  DEC	IY
0005B8 FD 23       0071*  ASSEM3:         INC	IY
0005BA FD 7E 00    0072*                  LD	A,(IY)
0005BD CD 33 09    0073*                  CALL	TERM0
0005C0 20 F6       0074*                  JR	NZ,ASSEM3
0005C2 3A FE 54    0075*                  LD	A,(LISTON)
0005C5 DD E5       0076*                  PUSH	IX
0005C7 E1          0077*                  POP	HL
0005C8 B7          0078*                  OR	A
0005C9 ED 52       0079*                  SBC	HL,DE
0005CB EB          0080*                  EX	DE,HL		;DE= NO. OF BYTES
0005CC E5          0081*                  PUSH	HL
0005CD 2A 40 54    0082*                  LD	HL,(PC)
0005D0 E5          0083*                  PUSH	HL
0005D1 19          0084*                  ADD	HL,DE
0005D2 22 40 54    0085*                  LD	(PC),HL		;UPDATE PC
0005D5 CB 77       0086*                  BIT	6,A
0005D7 28 07       0087*                  JR	Z,ASSEM5
0005D9 2A 3C 54    0088*                  LD	HL,(OC)
0005DC 19          0089*                  ADD	HL,DE
0005DD 22 3C 54    0090*                  LD	(OC),HL		;UPDATE OC
0005E0 E1          0091*  ASSEM5:         POP	HL		;OLD PC
0005E1 DD E1       0092*                  POP	IX		;CODE HERE
0005E3 CB 67       0093*                  BIT	4,A
0005E5 28 A0       0094*                  JR	Z,ASSEM
0005E7 7C          0095*                  LD	A,H
0005E8 CD 27 06    0096*                  CALL	HEX
0005EB 7D          0097*                  LD	A,L
0005EC CD 20 06    0098*                  CALL	HEXSP
0005EF AF          0099*                  XOR	A
0005F0 BB          0100*                  CP	E
0005F1 28 15       0101*                  JR	Z,ASSEM2
0005F3 3A FB 54    0102*  ASSEM1:         LD	A,(COUNT)
0005F6 FE 11       0103*                  CP	17
0005F8 3E 05       0104*                  LD	A,5
0005FA D4 7D 35    0105*                  CALL	NC,TABIT	;NEXT LINE
0005FD DD 7E 00    0106*                  LD	A,(IX)
000600 CD 20 06    0107*                  CALL	HEXSP
000603 DD 23       0108*                  INC	IX
000605 1D          0109*                  DEC	E
000606 20 EB       0110*                  JR	NZ,ASSEM1
000608 3E 12       0111*  ASSEM2:         LD	A,18
00060A CD 7D 35    0112*                  CALL	TABIT
00060D FD E5       0113*                  PUSH	IY
00060F E1          0114*                  POP	HL
000610 ED 42       0115*                  SBC	HL,BC
000612 0A          0116*  ASSEM4:         LD	A,(BC)
000613 CD 1B 41    0117*                  CALL	OUT
000616 03          0118*                  INC	BC
000617 2D          0119*                  DEC	L
000618 20 F8       0120*                  JR	NZ,ASSEM4
00061A CD FB 40    0121*                  CALL	CRLF
00061D C3 87 05    0122*                  JP	ASSEM
000620             0123*  ;
000620 CD 27 06    0124*  HEXSP:          CALL	HEX
000623 3E 20       0125*                  LD	A,' '
000625 18 11       0126*                  JR	OUTCH1
000627 F5          0127*  HEX:            PUSH	AF
000628 0F          0128*                  RRCA
000629 0F          0129*                  RRCA
00062A 0F          0130*                  RRCA
00062B 0F          0131*                  RRCA
00062C CD 30 06    0132*                  CALL	HEXOUT
00062F F1          0133*                  POP	AF
000630 E6 0F       0134*  HEXOUT:         AND	0FH
000632 C6 90       0135*                  ADD	A,90H
000634 27          0136*                  DAA
000635 CE 40       0137*                  ADC	A,40H
000637 27          0138*                  DAA
000638 C3 1B 41    0139*  OUTCH1:         JP	OUT
00063B             0140*  ;
00063B             0141*  ;PROCESSOR-SPECIFIC TRANSLATION SECTION:
00063B             0142*  ;
00063B             0143*  ;REGISTER USAGE: B - TYPE OF MOST RECENT OPERAND
00063B             0144*  ;                C - OPCODE BEING BUILT
00063B             0145*  ;                D - (IX) OR (IY) FLAG
00063B             0146*  ;                E - OFFSET FROM IX OR IY
00063B             0147*  ;               HL - NUMERIC OPERAND VALUE
00063B             0148*  ;               IX - CODE DESTINATION
00063B             0149*  ;               IY - SOURCE TEXT POINTER
00063B             0150*  ;   Inputs: A = initial character
00063B             0151*  ;  Outputs: Carry set if syntax error.
00063B             0152*  ;
00063B FE 2E       0153*  ASMB:           CP	'.'
00063D 20 28       0154*                  JR	NZ,ASMB1
00063F FD 23       0155*                  INC	IY
000641 DD E5       0156*                  PUSH	IX
000643 CD D6 25    0157*                  CALL	VAR_
000646 F5          0158*                  PUSH	AF
000647 CD F8 1F    0159*                  CALL	ZERO
00064A D9          0160*                  EXX
00064B 2A 40 54    0161*                  LD	HL,(PC)
00064E D9          0162*                  EXX
00064F 3A FE 54    0163*                  LD	A,(LISTON)
000652 E6 20       0164*                  AND	20H
000654 20 0B       0165*                  JR	NZ,ASMB0
000656 DD 7E 00    0166*                  LD	A,(IX)
000659 DD B6 01    0167*                  OR	(IX+1)
00065C 3E 03       0168*                  LD	A,3
00065E C2 44 3F    0169*                  JP	NZ,ERROR_	;Multiple label
000661 F1          0170*  ASMB0:          POP	AF
000662 CD F0 31    0171*                  CALL	STOREN
000665 DD E1       0172*                  POP	IX
000667 CD 0F 09    0173*  ASMB1:          CALL	SKIP
00066A C8          0174*                  RET	Z
00066B FE D6       0175*                  CP	TCALL
00066D 0E C4       0176*                  LD	C,0C4H
00066F FD 23       0177*                  INC	IY
000671 CA 5E 07    0178*                  JP	Z,GRPC
000674 FD 2B       0179*                  DEC	IY
000676 21 39 09    0180*                  LD	HL,OPCODS
000679 CD C6 08    0181*                  CALL	FIND
00067C D8          0182*                  RET	C
00067D 48          0183*                  LD	C,B	;ROOT OPCODE
00067E 16 00       0184*                  LD	D,0	;CLEAR IX/IY FLAG
000680             0185*  ;
000680             0186*  ;GROUP 0 - TRIVIAL CASES REQUIRING NO COMPUTATION
000680             0187*  ;GROUP 1 - AS GROUP 0 BUT WITH "ED" PREFIX
000680             0188*  ;
000680 D6 27       0189*                  SUB	39
000682 30 07       0190*                  JR	NC,GROUP2
000684 FE E8       0191*                  CP	15-39
000686 D4 2C 08    0192*                  CALL	NC,ED
000689 18 68       0193*                  JR	BYTE0
00068B             0194*  ;
00068B             0195*  ;GROUP 2 - BIT, RES, SET
00068B             0196*  ;GROUP 3 - RLC, RRC, RL, RR, SLA, SRA, SRL
00068B             0197*  ;
00068B D6 0A       0198*  GROUP2:         SUB	10
00068D 30 0F       0199*                  JR	NC,GROUP4
00068F FE F9       0200*                  CP	3-10
000691 DC B6 08    0201*                  CALL	C,BIT
000694 D8          0202*                  RET	C
000695 CD 8B 08    0203*                  CALL	REGLO
000698 D8          0204*                  RET	C
000699 CD 30 08    0205*                  CALL	CB
00069C 18 55       0206*                  JR	BYTE0
00069E             0207*  ;
00069E             0208*  ;GROUP 4 - PUSH, POP, EX (SP)
00069E             0209*  ;
00069E D6 03       0210*  GROUP4:         SUB	3
0006A0 30 06       0211*                  JR	NC,GROUP5
0006A2 CD AA 08    0212*  G4:             CALL	PAIRasm
0006A5 D8          0213*                  RET	C
0006A6 18 4B       0214*                  JR	BYTE0
0006A8             0215*  ;
0006A8             0216*  ;GROUP 5 - SUB, AND, XOR, OR, CP
0006A8             0217*  ;GROUP 6 - ADD, ADC, SBC
0006A8             0218*  ;
0006A8 D6 0A       0219*  GROUP5:         SUB	8+2
0006AA 30 32       0220*                  JR	NC,GROUP7
0006AC FE FD       0221*                  CP	5-8
0006AE 06 07       0222*                  LD	B,7
0006B0 D4 3E 08    0223*                  CALL	NC,OPND
0006B3 78          0224*                  LD	A,B
0006B4 FE 07       0225*                  CP	7
0006B6 20 10       0226*                  JR	NZ,G6HL
0006B8 CD 8B 08    0227*  G6:             CALL	REGLO
0006BB 79          0228*                  LD	A,C
0006BC 30 28       0229*                  JR	NC,BIND1
0006BE EE 46       0230*                  XOR	46H
0006C0 CD 32 08    0231*                  CALL	BIND
0006C3 CD 6E 08    0232*  DB:             CALL	NUMBER
0006C6 18 78       0233*                  JR	VAL8
0006C8             0234*  ;
0006C8 E6 3F       0235*  G6HL:           AND	3FH
0006CA FE 0C       0236*                  CP	12
0006CC 37          0237*                  SCF
0006CD C0          0238*                  RET	NZ
0006CE 79          0239*                  LD	A,C
0006CF FE 80       0240*                  CP	80H
0006D1 0E 09       0241*                  LD	C,9
0006D3 28 CD       0242*                  JR	Z,G4
0006D5 EE 1C       0243*                  XOR	1CH
0006D7 0F          0244*                  RRCA
0006D8 4F          0245*                  LD	C,A
0006D9 CD 2C 08    0246*                  CALL	ED
0006DC 18 C4       0247*                  JR	G4
0006DE             0248*  ;
0006DE             0249*  ;GROUP 7 - INC, DEC
0006DE             0250*  ;
0006DE D6 02       0251*  GROUP7:         SUB	2
0006E0 30 14       0252*                  JR	NC,GROUP8
0006E2 CD 91 08    0253*                  CALL	REGHI
0006E5 79          0254*                  LD	A,C
0006E6 D2 32 08    0255*  BIND1:          JP	NC,BIND
0006E9 EE 64       0256*                  XOR	64H
0006EB 07          0257*                  RLCA
0006EC 07          0258*                  RLCA
0006ED 07          0259*                  RLCA
0006EE 4F          0260*                  LD	C,A
0006EF CD AE 08    0261*                  CALL	PAIR1asm
0006F2 D8          0262*                  RET	C
0006F3 79          0263*  BYTE0:          LD	A,C
0006F4 18 7F       0264*                  JR	BYTE2
0006F6             0265*  ;
0006F6             0266*  ;GROUP 8 - IN
0006F6             0267*  ;GROUP 9 - OUT
0006F6             0268*  ;
0006F6 D6 02       0269*  GROUP8:         SUB	2
0006F8 30 21       0270*                  JR	NC,GROUPA
0006FA FE FF       0271*                  CP	1-2
0006FC CC 21 08    0272*                  CALL	Z,CORN
0006FF 08          0273*                  EX	AF,AF'
000700 CD 91 08    0274*                  CALL	REGHI
000703 D8          0275*                  RET	C
000704 08          0276*                  EX	AF,AF'
000705 DC 21 08    0277*                  CALL	C,CORN
000708 24          0278*                  INC	H
000709 28 E8       0279*                  JR	Z,BYTE0
00070B 78          0280*                  LD	A,B
00070C FE 07       0281*                  CP	7
00070E 37          0282*                  SCF
00070F C0          0283*                  RET	NZ
000710 79          0284*                  LD	A,C
000711 EE 03       0285*                  XOR	3
000713 07          0286*                  RLCA
000714 07          0287*                  RLCA
000715 07          0288*                  RLCA
000716 CD 5E 08    0289*                  CALL	BYTE
000719 18 25       0290*                  JR	VAL8
00071B             0291*  ;
00071B             0292*  ;GROUP 10 - JR, DJNZ
00071B             0293*  ;
00071B D6 02       0294*  GROUPA:         SUB	2
00071D 30 24       0295*                  JR	NC,GROUPB
00071F FE FF       0296*                  CP	1-2
000721 C4 97 08    0297*                  CALL	NZ,COND_
000724 79          0298*                  LD	A,C
000725 30 02       0299*                  JR	NC,GRPA
000727 3E 18       0300*                  LD	A,18H
000729 CD 5E 08    0301*  GRPA:           CALL	BYTE
00072C CD 6E 08    0302*                  CALL	NUMBER
00072F ED 5B 40 54 0303*                  LD	DE,(PC)
000733 13          0304*                  INC	DE
000734 37          0305*                  SCF
000735 ED 52       0306*                  SBC	HL,DE
000737 7D          0307*                  LD	A,L
000738 17          0308*                  RLA
000739 9F          0309*                  SBC	A,A
00073A BC          0310*                  CP	H
00073B 3E 01       0311*  TOOFAR:         LD	A,1
00073D C2 44 3F    0312*                  JP	NZ,ERROR_	;"Out of range"
000740 7D          0313*  VAL8:           LD	A,L
000741 18 32       0314*                  JR	BYTE2
000743             0315*  ;
000743             0316*  ;GROUP 11 - JP
000743             0317*  ;
000743 47          0318*  GROUPB:         LD	B,A
000744 20 16       0319*                  JR	NZ,GROUPC
000746 CD 97 08    0320*                  CALL	COND_
000749 79          0321*                  LD	A,C
00074A 30 0B       0322*                  JR	NC,GRPB
00074C 78          0323*                  LD	A,B
00074D E6 3F       0324*                  AND	3FH
00074F FE 06       0325*                  CP	6
000751 3E E9       0326*                  LD	A,0E9H
000753 28 20       0327*                  JR	Z,BYTE2
000755 3E C3       0328*                  LD	A,0C3H
000757 CD 5E 08    0329*  GRPB:           CALL	BYTE
00075A 18 05       0330*                  JR	ADDR_
00075C             0331*  ;
00075C             0332*  ;GROUP 12 - CALL
00075C             0333*  ;
00075C 10 0C       0334*  GROUPC:         DJNZ	GROUPD
00075E CD 79 07    0335*  GRPC:           CALL	GRPE
000761 CD 6E 08    0336*  ADDR_:          CALL	NUMBER
000764 CD 40 07    0337*  VAL16:          CALL	VAL8
000767 7C          0338*                  LD	A,H
000768 18 0B       0339*                  JR	BYTE2
00076A             0340*  ;
00076A             0341*  ;GROUP 13 - RST
00076A             0342*  ;
00076A 10 0B       0343*  GROUPD:         DJNZ	GROUPE
00076C CD 6E 08    0344*                  CALL	NUMBER
00076F A1          0345*                  AND	C
000770 B4          0346*                  OR	H
000771 20 C8       0347*                  JR	NZ,TOOFAR
000773 7D          0348*                  LD	A,L
000774 B1          0349*                  OR	C
000775 18 78       0350*  BYTE2:          JR	BYTE1
000777             0351*  ;
000777             0352*  ;GROUP 14 - RET
000777             0353*  ;
000777 10 0A       0354*  GROUPE:         DJNZ	GROUPF
000779 CD 97 08    0355*  GRPE:           CALL	COND_
00077C 79          0356*                  LD	A,C
00077D 30 70       0357*                  JR	NC,BYTE1
00077F F6 09       0358*                  OR	9
000781 18 6C       0359*                  JR	BYTE1
000783             0360*  ;
000783             0361*  ;GROUP 15 - LD
000783             0362*  ;
000783 10 6C       0363*  GROUPF:         DJNZ	MISC
000785 CD C3 08    0364*                  CALL	LDOP
000788 30 5F       0365*                  JR	NC,LDA
00078A CD 91 08    0366*                  CALL	REGHI
00078D 08          0367*                  EX	AF,AF'
00078E CD 0F 09    0368*                  CALL	SKIP
000791 FE 28       0369*                  CP	'('
000793 28 1D       0370*                  JR	Z,LDIN
000795 08          0371*                  EX	AF,AF'
000796 D2 B8 06    0372*                  JP	NC,G6
000799 0E 01       0373*                  LD	C,1
00079B CD AE 08    0374*                  CALL	PAIR1asm
00079E D8          0375*                  RET	C
00079F 3E 0E       0376*                  LD	A,14
0007A1 B8          0377*                  CP	B
0007A2 47          0378*                  LD	B,A
0007A3 CC AA 08    0379*                  CALL	Z,PAIRasm
0007A6 78          0380*                  LD	A,B
0007A7 E6 3F       0381*                  AND	3FH
0007A9 FE 0C       0382*                  CP	12
0007AB 79          0383*                  LD	A,C
0007AC 20 A9       0384*                  JR	NZ,GRPB
0007AE 3E F9       0385*                  LD	A,0F9H
0007B0 18 3D       0386*                  JR	BYTE1
0007B2             0387*  ;
0007B2 08          0388*  LDIN:           EX	AF,AF'
0007B3 C5          0389*                  PUSH	BC
0007B4 D4 8B 08    0390*                  CALL	NC,REGLO
0007B7 79          0391*                  LD	A,C
0007B8 C1          0392*                  POP	BC
0007B9 30 77       0393*                  JR	NC,BIND
0007BB 0E 0A       0394*                  LD	C,0AH
0007BD CD AE 08    0395*                  CALL	PAIR1asm
0007C0 CD 08 08    0396*                  CALL	LD16
0007C3 30 92       0397*                  JR	NC,GRPB
0007C5 CD 6E 08    0398*                  CALL	NUMBER
0007C8 0E 02       0399*                  LD	C,2
0007CA CD AA 08    0400*                  CALL	PAIRasm
0007CD CD 08 08    0401*                  CALL	LD16
0007D0 D8          0402*                  RET	C
0007D1 CD 5E 08    0403*                  CALL	BYTE
0007D4 18 8E       0404*                  JR	VAL16
0007D6             0405*  ;
0007D6             0406*  ;OPT - SET OPTION
0007D6             0407*  ;
0007D6 05          0408*  OPT:            DEC	B
0007D7 CA C3 06    0409*                  JP	Z,DB
0007DA 10 85       0410*                  DJNZ	ADDR_
0007DC CD 6E 08    0411*                  CALL	NUMBER
0007DF 21 FE 54    0412*                  LD	HL,LISTON
0007E2 4F          0413*                  LD	C,A
0007E3 ED 6F       0414*                  RLD
0007E5 79          0415*                  LD	A,C
0007E6 ED 67       0416*                  RRD
0007E8 C9          0417*                  RET
0007E9             0418*  ;
0007E9 FE 04       0419*  LDA:            CP	4
0007EB DC 2C 08    0420*                  CALL	C,ED
0007EE 78          0421*                  LD	A,B
0007EF 18 6D       0422*  BYTE1:          JR	BYTE
0007F1             0423*  ;
0007F1             0424*  ;MISC - DEFB, DEFW, DEFM
0007F1             0425*  ;
0007F1 10 E3       0426*  MISC:           DJNZ	OPT
0007F3 DD E5       0427*                  PUSH	IX
0007F5 CD 3C 18    0428*                  CALL	EXPRS
0007F8 DD E1       0429*                  POP	IX
0007FA 21 00 52    0430*                  LD	HL,ACCS
0007FD AF          0431*  DEFM1:          XOR	A
0007FE BB          0432*                  CP	E
0007FF C8          0433*                  RET	Z
000800 7E          0434*                  LD	A,(HL)
000801 23          0435*                  INC	HL
000802 CD 5E 08    0436*                  CALL	BYTE
000805 1D          0437*                  DEC	E
000806 18 F5       0438*                  JR	DEFM1
000808             0439*  ;
000808             0440*  ;SUBROUTINES:
000808             0441*  ;
000808 78          0442*  LD16:           LD	A,B
000809 38 0E       0443*                  JR	C,LD8
00080B 78          0444*                  LD	A,B
00080C E6 3F       0445*                  AND	3FH
00080E FE 0C       0446*                  CP	12
000810 79          0447*                  LD	A,C
000811 C8          0448*                  RET	Z
000812 CD 2C 08    0449*                  CALL	ED
000815 79          0450*                  LD	A,C
000816 F6 43       0451*                  OR	43H
000818 C9          0452*                  RET
000819             0453*  ;
000819 FE 07       0454*  LD8:            CP	7
00081B 37          0455*                  SCF
00081C C0          0456*                  RET	NZ
00081D 79          0457*                  LD	A,C
00081E F6 30       0458*                  OR	30H
000820 C9          0459*                  RET
000821             0460*  ;
000821 C5          0461*  CORN:           PUSH	BC
000822 CD 3E 08    0462*                  CALL	OPND
000825 CB 68       0463*                  BIT	5,B
000827 C1          0464*                  POP	BC
000828 28 44       0465*                  JR	Z,NUMBER
00082A 26 FF       0466*                  LD	H,-1
00082C 3E ED       0467*  ED:             LD	A,0EDH
00082E 18 2E       0468*                  JR	BYTE
000830             0469*  ;
000830 3E CB       0470*  CB:             LD	A,0CBH
000832 FE 76       0471*  BIND:           CP	76H
000834 37          0472*                  SCF
000835 C8          0473*                  RET	Z		;REJECT LD (HL),(HL)
000836 CD 5E 08    0474*                  CALL	BYTE
000839 14          0475*                  INC	D
00083A F0          0476*                  RET	P
00083B 7B          0477*                  LD	A,E
00083C 18 20       0478*                  JR	BYTE
00083E             0479*  ;
00083E E5          0480*  OPND:           PUSH	HL
00083F 21 80 0A    0481*                  LD	HL,OPRNDS
000842 CD C6 08    0482*                  CALL	FIND
000845 E1          0483*                  POP	HL
000846 D8          0484*                  RET	C
000847 CB 78       0485*                  BIT	7,B
000849 C8          0486*                  RET	Z
00084A CB 58       0487*                  BIT	3,B
00084C E5          0488*                  PUSH	HL
00084D CC 65 08    0489*                  CALL	Z,OFFSETasm
000850 5D          0490*                  LD	E,L
000851 E1          0491*                  POP	HL
000852 3E DD       0492*                  LD	A,0DDH
000854 CB 70       0493*                  BIT	6,B
000856 28 02       0494*                  JR	Z,OP1
000858 3E FD       0495*                  LD	A,0FDH
00085A B7          0496*  OP1:            OR	A
00085B 14          0497*                  INC	D
00085C 57          0498*                  LD	D,A
00085D F8          0499*                  RET	M
00085E DD 77 00    0500*  BYTE:           LD	(IX),A
000861 DD 23       0501*                  INC	IX
000863 B7          0502*                  OR	A
000864 C9          0503*                  RET
000865             0504*  ;
000865 FD 7E 00    0505*  OFFSETasm:         LD	A,(IY)
000868 FE 29       0506*                  CP	')'
00086A 21 00 00    0507*                  LD	HL,0
00086D C8          0508*                  RET	Z
00086E CD 0F 09    0509*  NUMBER:         CALL	SKIP
000871 C5          0510*                  PUSH	BC
000872 D5          0511*                  PUSH	DE
000873 DD E5       0512*                  PUSH	IX
000875 CD 33 18    0513*                  CALL	EXPRI
000878 DD E1       0514*                  POP	IX
00087A D9          0515*                  EXX
00087B D1          0516*                  POP	DE
00087C C1          0517*                  POP	BC
00087D 7D          0518*                  LD	A,L
00087E B7          0519*                  OR	A
00087F C9          0520*                  RET
000880             0521*  ;
000880 CD 3E 08    0522*  REG:            CALL	OPND
000883 D8          0523*                  RET	C
000884 78          0524*                  LD	A,B
000885 E6 3F       0525*                  AND	3FH
000887 FE 08       0526*                  CP	8
000889 3F          0527*                  CCF
00088A C9          0528*                  RET
00088B             0529*  ;
00088B CD 80 08    0530*  REGLO:          CALL	REG
00088E D8          0531*                  RET	C
00088F 18 2F       0532*                  JR	ORC
000891             0533*  ;
000891 CD 80 08    0534*  REGHI:          CALL	REG
000894 D8          0535*                  RET	C
000895 18 26       0536*                  JR	SHL3
000897             0537*  ;
000897 CD 3E 08    0538*  COND_:          CALL	OPND
00089A D8          0539*                  RET	C
00089B 78          0540*                  LD	A,B
00089C E6 1F       0541*                  AND	1FH
00089E D6 10       0542*                  SUB	16
0008A0 30 1B       0543*                  JR	NC,SHL3
0008A2 FE F1       0544*                  CP	-15
0008A4 37          0545*                  SCF
0008A5 C0          0546*                  RET	NZ
0008A6 3E 03       0547*                  LD	A,3
0008A8 18 13       0548*                  JR	SHL3
0008AA             0549*  ;
0008AA CD 3E 08    0550*  PAIRasm:           CALL	OPND
0008AD D8          0551*                  RET	C
0008AE 78          0552*  PAIR1asm:          LD	A,B
0008AF E6 0F       0553*                  AND	0FH
0008B1 D6 08       0554*                  SUB	8
0008B3 D8          0555*                  RET	C
0008B4 18 07       0556*                  JR	SHL3
0008B6             0557*  ;
0008B6 CD 6E 08    0558*  BIT:            CALL	NUMBER
0008B9 FE 08       0559*                  CP	8
0008BB 3F          0560*                  CCF
0008BC D8          0561*                  RET	C
0008BD 07          0562*  SHL3:           RLCA
0008BE 07          0563*                  RLCA
0008BF 07          0564*                  RLCA
0008C0 B1          0565*  ORC:            OR	C
0008C1 4F          0566*                  LD	C,A
0008C2 C9          0567*                  RET
0008C3             0568*  ;
0008C3 21 C5 0A    0569*  LDOP:           LD	HL,LDOPS
0008C6 CD 0F 09    0570*  FIND:           CALL	SKIP
0008C9 06 00       0571*  EXIT:           LD	B,0
0008CB 37          0572*                  SCF
0008CC C8          0573*                  RET	Z
0008CD FE DD       0574*                  CP	TDEF
0008CF 28 04       0575*                  JR	Z,FIND0
0008D1 FE 85       0576*                  CP	TOR+1
0008D3 3F          0577*                  CCF
0008D4 D8          0578*                  RET	C
0008D5 7E          0579*  FIND0:          LD	A,(HL)
0008D6 B7          0580*                  OR	A
0008D7 28 F0       0581*                  JR	Z,EXIT
0008D9 FD AE 00    0582*                  XOR	(IY)
0008DC E6 5F       0583*                  AND	01011111B
0008DE 28 09       0584*                  JR	Z,FIND2
0008E0 CB 7E       0585*  FIND1:          BIT	7,(HL)
0008E2 23          0586*                  INC	HL
0008E3 28 FB       0587*                  JR	Z,FIND1
0008E5 23          0588*                  INC	HL
0008E6 04          0589*                  INC	B
0008E7 18 EC       0590*                  JR	FIND0
0008E9             0591*  ;
0008E9 FD E5       0592*  FIND2:          PUSH	IY
0008EB CB 7E       0593*  FIND3:          BIT	7,(HL)
0008ED FD 23       0594*                  INC	IY
0008EF 23          0595*                  INC	HL
0008F0 20 10       0596*                  JR	NZ,FIND5
0008F2 BE          0597*                  CP	(HL)
0008F3 CC 0E 09    0598*                  CALL	Z,SKIP0
0008F6 7E          0599*                  LD	A,(HL)
0008F7 FD AE 00    0600*                  XOR	(IY)
0008FA E6 5F       0601*                  AND	01011111B
0008FC 28 ED       0602*                  JR	Z,FIND3
0008FE FD E1       0603*  FIND4:          POP	IY
000900 18 DE       0604*                  JR	FIND1
000902             0605*  ;
000902 CD 21 09    0606*  FIND5:          CALL	DELIM
000905 C4 1B 09    0607*                  CALL	NZ,SIGN
000908 20 F4       0608*                  JR	NZ,FIND4
00090A 78          0609*  FIND6:          LD	A,B
00090B 46          0610*                  LD	B,(HL)
00090C E1          0611*                  POP	HL
00090D C9          0612*                  RET
00090E             0613*  ;
00090E 23          0614*  SKIP0:          INC	HL
00090F CD 21 09    0615*  SKIP:           CALL	DELIM
000912 C0          0616*                  RET	NZ
000913 CD 2D 09    0617*                  CALL	TERM
000916 C8          0618*                  RET	Z
000917 FD 23       0619*                  INC	IY
000919 18 F4       0620*                  JR	SKIP
00091B             0621*  ;
00091B FE 2B       0622*  SIGN:           CP	'+'
00091D C8          0623*                  RET	Z
00091E FE 2D       0624*                  CP	'-'
000920 C9          0625*                  RET
000921             0626*  ;
000921 FD 7E 00    0627*  DELIM:          LD	A,(IY)		;ASSEMBLER DELIMITER
000924 FE 20       0628*                  CP	' '
000926 C8          0629*                  RET	Z
000927 FE 2C       0630*                  CP	','
000929 C8          0631*                  RET	Z
00092A FE 29       0632*                  CP	')'
00092C C8          0633*                  RET	Z
00092D FE 3B       0634*  TERM:           CP	';'		;ASSEMBLER TERMINATOR
00092F C8          0635*                  RET	Z
000930 FE 5C       0636*                  CP	'\'
000932 C8          0637*                  RET	Z
000933 FE 3A       0638*  TERM0:          CP	':'		;ASSEMBLER SEPARATOR
000935 D0          0639*                  RET	NC
000936 FE 0D       0640*                  CP	CR
000938 C9          0641*                  RET
000939             0642*  ;
000939 4E 4F       0643*  OPCODS:         DB	"NO"
00093B D0          0644*                  DB	'P'+80H
00093C 00          0645*                  DB	0
00093D 52 4C 43    0646*                  DB	"RLC"
000940 C1          0647*                  DB	'A'+80H
000941 07          0648*                  DB	7
000942 45 58       0649*                  DB	"EX"
000944 00          0650*                  DB	0
000945 41 46       0651*                  DB	"AF"
000947 00          0652*                  DB	0
000948 41 46       0653*                  DB	"AF"
00094A 27          0654*                  DB	"'"+80H
00094B 08          0655*                  DB	8
00094C 52 52 43    0656*                  DB	"RRC"
00094F C1          0657*                  DB	'A'+80H
000950 0F          0658*                  DB	0FH
000951 52 4C       0659*                  DB	"RL"
000953 C1          0660*                  DB	'A'+80H
000954 17          0661*                  DB	17H
000955 52 52       0662*                  DB	"RR"
000957 C1          0663*                  DB	'A'+80H
000958 1F          0664*                  DB	1FH
000959 44 41       0665*                  DB	"DA"
00095B C1          0666*                  DB	'A'+80H
00095C 27          0667*                  DB	27H
00095D 43 50       0668*                  DB	"CP"
00095F CC          0669*                  DB	'L'+80H
000960 2F          0670*                  DB	2FH
000961 53 43       0671*                  DB	"SC"
000963 C6          0672*                  DB	'F'+80H
000964 37          0673*                  DB	37H
000965 43 43       0674*                  DB	"CC"
000967 C6          0675*                  DB	'F'+80H
000968 3F          0676*                  DB	3FH
000969 48 41 4C    0677*                  DB	"HAL"
00096C D4          0678*                  DB	'T'+80H
00096D 76          0679*                  DB	76H
00096E 45 58       0680*                  DB	"EX"
000970 D8          0681*                  DB	'X'+80H
000971 D9          0682*                  DB	0D9H
000972 45 58       0683*                  DB	"EX"
000974 00          0684*                  DB	0
000975 44 45       0685*                  DB	"DE"
000977 00          0686*                  DB	0
000978 48          0687*                  DB	'H'
000979 CC          0688*                  DB	'L'+80H
00097A EB          0689*                  DB	0EBH
00097B 44          0690*                  DB	'D'
00097C C9          0691*                  DB	'I'+80H
00097D F3          0692*                  DB	0F3H
00097E 45          0693*                  DB	'E'
00097F C9          0694*                  DB	'I'+80H
000980 FB          0695*                  DB	0FBH
000981             0696*  ;
000981 4E 45       0697*                  DB	"NE"
000983 C7          0698*                  DB	'G'+80H
000984 44          0699*                  DB	44H
000985 49 4D       0700*                  DB	"IM"
000987 00          0701*                  DB	0
000988 B0          0702*                  DB	'0'+80H
000989 46          0703*                  DB	46H
00098A 52 45 54    0704*                  DB	"RET"
00098D CE          0705*                  DB	'N'+80H
00098E 45          0706*                  DB	45H
00098F 52 45 54    0707*                  DB	"RET"
000992 C9          0708*                  DB	'I'+80H
000993 4D          0709*                  DB	4DH
000994 49 4D       0710*                  DB	"IM"
000996 00          0711*                  DB	0
000997 B1          0712*                  DB	'1'+80H
000998 56          0713*                  DB	56H
000999 49 4D       0714*                  DB	"IM"
00099B 00          0715*                  DB	0
00099C B2          0716*                  DB	'2'+80H
00099D 5E          0717*                  DB	5EH
00099E 52 52       0718*                  DB	"RR"
0009A0 C4          0719*                  DB	'D'+80H
0009A1 67          0720*                  DB	67H
0009A2 52 4C       0721*                  DB	"RL"
0009A4 C4          0722*                  DB	'D'+80H
0009A5 6F          0723*                  DB	6FH
0009A6 4C 44       0724*                  DB	"LD"
0009A8 C9          0725*                  DB	'I'+80H
0009A9 A0          0726*                  DB	0A0H
0009AA 43 50       0727*                  DB	"CP"
0009AC C9          0728*                  DB	'I'+80H
0009AD A1          0729*                  DB	0A1H
0009AE 49 4E       0730*                  DB	"IN"
0009B0 C9          0731*                  DB	'I'+80H
0009B1 A2          0732*                  DB	0A2H
0009B2 4F 55 54    0733*                  DB	"OUT"
0009B5 C9          0734*                  DB	'I'+80H
0009B6 A3          0735*                  DB	0A3H
0009B7 4C 44       0736*                  DB	"LD"
0009B9 C4          0737*                  DB	'D'+80H
0009BA A8          0738*                  DB	0A8H
0009BB 43 50       0739*                  DB	"CP"
0009BD C4          0740*                  DB	'D'+80H
0009BE A9          0741*                  DB	0A9H
0009BF 49 4E       0742*                  DB	"IN"
0009C1 C4          0743*                  DB	'D'+80H
0009C2 AA          0744*                  DB	0AAH
0009C3 4F 55 54    0745*                  DB	"OUT"
0009C6 C4          0746*                  DB	'D'+80H
0009C7 AB          0747*                  DB	0ABH
0009C8 4C 44 49    0748*                  DB	"LDI"
0009CB D2          0749*                  DB	'R'+80H
0009CC B0          0750*                  DB	0B0H
0009CD 43 50 49    0751*                  DB	"CPI"
0009D0 D2          0752*                  DB	'R'+80H
0009D1 B1          0753*                  DB	0B1H
0009D2 49 4E 49    0754*                  DB	"INI"
0009D5 D2          0755*                  DB	'R'+80H
0009D6 B2          0756*                  DB	0B2H
0009D7 4F 54 49    0757*                  DB	"OTI"
0009DA D2          0758*                  DB	'R'+80H
0009DB B3          0759*                  DB	0B3H
0009DC 4C 44 44    0760*                  DB	"LDD"
0009DF D2          0761*                  DB	'R'+80H
0009E0 B8          0762*                  DB	0B8H
0009E1 43 50 44    0763*                  DB	"CPD"
0009E4 D2          0764*                  DB	'R'+80H
0009E5 B9          0765*                  DB	0B9H
0009E6 49 4E 44    0766*                  DB	"IND"
0009E9 D2          0767*                  DB	'R'+80H
0009EA BA          0768*                  DB	0BAH
0009EB 4F 54 44    0769*                  DB	"OTD"
0009EE D2          0770*                  DB	'R'+80H
0009EF BB          0771*                  DB	0BBH
0009F0             0772*  ;
0009F0 42 49       0773*                  DB	"BI"
0009F2 D4          0774*                  DB	'T'+80H
0009F3 40          0775*                  DB	40H
0009F4 52 45       0776*                  DB	"RE"
0009F6 D3          0777*                  DB	'S'+80H
0009F7 80          0778*                  DB	80H
0009F8 53 45       0779*                  DB	"SE"
0009FA D4          0780*                  DB	'T'+80H
0009FB C0          0781*                  DB	0C0H
0009FC             0782*  ;
0009FC 52 4C       0783*                  DB	"RL"
0009FE C3          0784*                  DB	'C'+80H
0009FF 00          0785*                  DB	0
000A00 52 52       0786*                  DB	"RR"
000A02 C3          0787*                  DB	'C'+80H
000A03 08          0788*                  DB	8
000A04 52          0789*                  DB	'R'
000A05 CC          0790*                  DB	'L'+80H
000A06 10          0791*                  DB	10H
000A07 52          0792*                  DB	'R'
000A08 D2          0793*                  DB	'R'+80H
000A09 18          0794*                  DB	18H
000A0A 53 4C       0795*                  DB	"SL"
000A0C C1          0796*                  DB	'A'+80H
000A0D 20          0797*                  DB	20H
000A0E 53 52       0798*                  DB	"SR"
000A10 C1          0799*                  DB	'A'+80H
000A11 28          0800*                  DB	28H
000A12 53 52       0801*                  DB	"SR"
000A14 CC          0802*                  DB	'L'+80H
000A15 38          0803*                  DB	38H
000A16             0804*  ;
000A16 50 4F       0805*                  DB	"PO"
000A18 D0          0806*                  DB	'P'+80H
000A19 C1          0807*                  DB	0C1H
000A1A 50 55 53    0808*                  DB	"PUS"
000A1D C8          0809*                  DB	'H'+80H
000A1E C5          0810*                  DB	0C5H
000A1F 45 58       0811*                  DB	"EX"
000A21 00          0812*                  DB	0
000A22 28 53       0813*                  DB	"(S"
000A24 D0          0814*                  DB	'P'+80H
000A25 E3          0815*                  DB	0E3H
000A26             0816*  ;
000A26 53 55       0817*                  DB	"SU"
000A28 C2          0818*                  DB	'B'+80H
000A29 90          0819*                  DB	90H
000A2A 41 4E       0820*                  DB	"AN"
000A2C C4          0821*                  DB	'D'+80H
000A2D A0          0822*                  DB	0A0H
000A2E 58 4F       0823*                  DB	"XO"
000A30 D2          0824*                  DB	'R'+80H
000A31 A8          0825*                  DB	0A8H
000A32 4F          0826*                  DB	'O'
000A33 D2          0827*                  DB	'R'+80H
000A34 B0          0828*                  DB	0B0H
000A35 43          0829*                  DB	'C'
000A36 D0          0830*                  DB	'P'+80H
000A37 B8          0831*                  DB	0B8H
000A38 80          0832*                  DB	TAND
000A39 A0          0833*                  DB	0A0H
000A3A 84          0834*                  DB	TOR
000A3B B0          0835*                  DB	0B0H
000A3C             0836*  ;
000A3C 41 44       0837*                  DB	"AD"
000A3E C4          0838*                  DB	'D'+80H
000A3F 80          0839*                  DB	80H
000A40 41 44       0840*                  DB	"AD"
000A42 C3          0841*                  DB	'C'+80H
000A43 88          0842*                  DB	88H
000A44 53 42       0843*                  DB	"SB"
000A46 C3          0844*                  DB	'C'+80H
000A47 98          0845*                  DB	98H
000A48             0846*  ;
000A48 49 4E       0847*                  DB	"IN"
000A4A C3          0848*                  DB	'C'+80H
000A4B 04          0849*                  DB	4
000A4C 44 45       0850*                  DB	"DE"
000A4E C3          0851*                  DB	'C'+80H
000A4F 05          0852*                  DB	5
000A50             0853*  ;
000A50 49          0854*                  DB	'I'
000A51 CE          0855*                  DB	'N'+80H
000A52 40          0856*                  DB	40H
000A53 4F 55       0857*                  DB	"OU"
000A55 D4          0858*                  DB	'T'+80H
000A56 41          0859*                  DB	41H
000A57             0860*  ;
000A57 4A          0861*                  DB	'J'
000A58 D2          0862*                  DB	'R'+80H
000A59 20          0863*                  DB	20H
000A5A 44 4A 4E    0864*                  DB	"DJN"
000A5D DA          0865*                  DB	'Z'+80H
000A5E 10          0866*                  DB	10H
000A5F             0867*  ;
000A5F 4A          0868*                  DB	'J'
000A60 D0          0869*                  DB	'P'+80H
000A61 C2          0870*                  DB	0C2H
000A62             0871*  ;
000A62 43 41 4C    0872*                  DB	"CAL"
000A65 CC          0873*                  DB	'L'+80H
000A66 C4          0874*                  DB	0C4H
000A67             0875*  ;
000A67 52 53       0876*                  DB	"RS"
000A69 D4          0877*                  DB	'T'+80H
000A6A C7          0878*                  DB	0C7H
000A6B             0879*  ;
000A6B 52 45       0880*                  DB	"RE"
000A6D D4          0881*                  DB	'T'+80H
000A6E C0          0882*                  DB	0C0H
000A6F             0883*  ;
000A6F 4C          0884*                  DB	'L'
000A70 C4          0885*                  DB	'D'+80H
000A71 40          0886*                  DB	40H
000A72             0887*  ;
000A72 5D          0888*                  DB	TDEF & 7FH
000A73 CD          0889*                  DB	'M'+80H
000A74 00          0890*                  DB	0
000A75             0891*  ;
000A75 5D          0892*                  DB	TDEF & 7FH
000A76 C2          0893*                  DB	'B'+80H
000A77 00          0894*                  DB	0
000A78             0895*  ;
000A78 4F 50       0896*                  DB	"OP"
000A7A D4          0897*                  DB	'T'+80H
000A7B 00          0898*                  DB	0
000A7C             0899*  ;
000A7C 5D          0900*                  DB	TDEF & 7FH
000A7D D7          0901*                  DB	'W'+80H
000A7E 00          0902*                  DB	0
000A7F             0903*  ;
000A7F 00          0904*                  DB	0
000A80             0905*  ;
000A80 C2          0906*  OPRNDS:         DB	'B'+80H
000A81 00          0907*                  DB	0
000A82 C3          0908*                  DB	'C'+80H
000A83 01          0909*                  DB	1
000A84 C4          0910*                  DB	'D'+80H
000A85 02          0911*                  DB	2
000A86 C5          0912*                  DB	'E'+80H
000A87 03          0913*                  DB	3
000A88 C8          0914*                  DB	'H'+80H
000A89 04          0915*                  DB	4
000A8A CC          0916*                  DB	'L'+80H
000A8B 05          0917*                  DB	5
000A8C 28 48       0918*                  DB	"(H"
000A8E CC          0919*                  DB	'L'+80H
000A8F 06          0920*                  DB	6
000A90 C1          0921*                  DB	'A'+80H
000A91 07          0922*                  DB	7
000A92 28 49       0923*                  DB	"(I"
000A94 D8          0924*                  DB	'X'+80H
000A95 86          0925*                  DB	86H
000A96 28 49       0926*                  DB	"(I"
000A98 D9          0927*                  DB	'Y'+80H
000A99 C6          0928*                  DB	0C6H
000A9A             0929*  ;
000A9A 42          0930*                  DB	'B'
000A9B C3          0931*                  DB	'C'+80H
000A9C 08          0932*                  DB	8
000A9D 44          0933*                  DB	'D'
000A9E C5          0934*                  DB	'E'+80H
000A9F 0A          0935*                  DB	10
000AA0 48          0936*                  DB	'H'
000AA1 CC          0937*                  DB	'L'+80H
000AA2 0C          0938*                  DB	12
000AA3 49          0939*                  DB	'I'
000AA4 D8          0940*                  DB	'X'+80H
000AA5 8C          0941*                  DB	8CH
000AA6 49          0942*                  DB	'I'
000AA7 D9          0943*                  DB	'Y'+80H
000AA8 CC          0944*                  DB	0CCH
000AA9 41          0945*                  DB	'A'
000AAA C6          0946*                  DB	'F'+80H
000AAB 0E          0947*                  DB	14
000AAC 53          0948*                  DB	'S'
000AAD D0          0949*                  DB	'P'+80H
000AAE 0E          0950*                  DB	14
000AAF             0951*  ;
000AAF 4E          0952*                  DB	'N'
000AB0 DA          0953*                  DB	'Z'+80H
000AB1 10          0954*                  DB	16
000AB2 DA          0955*                  DB	'Z'+80H
000AB3 11          0956*                  DB	17
000AB4 4E          0957*                  DB	'N'
000AB5 C3          0958*                  DB	'C'+80H
000AB6 12          0959*                  DB	18
000AB7 50          0960*                  DB	'P'
000AB8 CF          0961*                  DB	'O'+80H
000AB9 14          0962*                  DB	20
000ABA 50          0963*                  DB	'P'
000ABB C5          0964*                  DB	'E'+80H
000ABC 15          0965*                  DB	21
000ABD D0          0966*                  DB	'P'+80H
000ABE 16          0967*                  DB	22
000ABF CD          0968*                  DB	'M'+80H
000AC0 17          0969*                  DB	23
000AC1             0970*  ;
000AC1 28          0971*                  DB	'('
000AC2 C3          0972*                  DB	'C'+80H
000AC3 20          0973*                  DB	20H
000AC4             0974*  ;
000AC4 00          0975*                  DB	0
000AC5             0976*  ;
000AC5 49          0977*  LDOPS:          DB	'I'
000AC6 00          0978*                  DB	0
000AC7 C1          0979*                  DB	'A'+80H
000AC8 47          0980*                  DB	47H
000AC9 52          0981*                  DB	'R'
000ACA 00          0982*                  DB	0
000ACB C1          0983*                  DB	'A'+80H
000ACC 4F          0984*                  DB	4FH
000ACD 41          0985*                  DB	'A'
000ACE 00          0986*                  DB	0
000ACF C9          0987*                  DB	'I'+80H
000AD0 57          0988*                  DB	57H
000AD1 41          0989*                  DB	'A'
000AD2 00          0990*                  DB	0
000AD3 D2          0991*                  DB	'R'+80H
000AD4 5F          0992*                  DB	5FH
000AD5 28 42 43    0993*                  DB	"(BC"
000AD8 00          0994*                  DB	0
000AD9 C1          0995*                  DB	'A'+80H
000ADA 02          0996*                  DB	2
000ADB 28 44 45    0997*                  DB	"(DE"
000ADE 00          0998*                  DB	0
000ADF C1          0999*                  DB	'A'+80H
000AE0 12          1000*                  DB	12H
000AE1 41          1001*                  DB	'A'
000AE2 00          1002*                  DB	0
000AE3 28 42       1003*                  DB	"(B"
000AE5 C3          1004*                  DB	'C'+80H
000AE6 0A          1005*                  DB	0AH
000AE7 41          1006*                  DB	'A'
000AE8 00          1007*                  DB	0
000AE9 28 44       1008*                  DB	"(D"
000AEB C5          1009*                  DB	'E'+80H
000AEC 1A          1010*                  DB	1AH
000AED             1011*  ;
000AED 00          1012*                  DB	0
000AEE             1013*  ;
000AEE             1014*  FIN:            ; END
000AEE             1015*  ;    include "asmb.inc"
000AEE             0010       include "agon_gpio.asm"
000AEE             0001*  ;
000AEE             0002*  ; Title:	BBC Basic for AGON - GPIO functions
000AEE             0003*  ; Author:	Dean Belfield
000AEE             0004*  ; Created:	04/12/2024
000AEE             0005*  ; Last Updated:	04/12/2024
000AEE             0006*  ;
000AEE             0007*  ; Modinfo:
000AEE             0008*  
000AEE             0009*  			; INCLUDE	"macros.inc"
000AEE             0010*  			; INCLUDE	"equs.inc"
000AEE             0011*  
000AEE             0012*  			.ASSUME	ADL = 0
000AEE             0013*  ;	.ORG 0x0000
000AEE             0014*  
000AEE             0015*  ;			SEGMENT CODE
000AEE             0016*  
000AEE             0017*  ;			XDEF	GPIOB_SETMODE
000AEE             0018*  
000AEE             0019*  ;			XREF	SWITCH_A
000AEE             0020*  
000AEE             0021*  ;  A: Mode
000AEE             0022*  ;  B: Pins
000AEE             0023*  ;
000AEE CD 8F 0E    0024*  GPIOB_SETMODE:		CALL	SWITCH_A
000AF1 05 0B       0025*  			DW	GPIOB_M0	; Output
000AF3 2A 0B       0026*  			DW	GPIOB_M1	; Input
000AF5 4A 0B       0027*  			DW	GPIOB_M2	; Open Drain IO
000AF7 6A 0B       0028*  			DW	GPIOB_M3	; Open Source IO
000AF9 85 0B       0029*  			DW	GPIOB_M4	; Interrupt, Dual Edge
000AFB B1 0B       0030*  			DW	GPIOB_M5	; Alt Function
000AFD CC 0B       0031*  			DW	GPIOB_M6	; Interrupt, Active Low
000AFF F3 0B       0032*  			DW	GPIOB_M7	; Interrupt, Active High
000B01 15 0C       0033*  			DW	GPIOB_M8	; Interrupt, Falling Edge
000B03 37 0C       0034*  			DW	GPIOB_M9	; Interrupt, Rising Edge
000B05             0035*  
000B05             0036*  ; Output
000B05             0037*  ;
000B05             0038*  GPIOB_M0:		RES_GPIO PB_DDR,  B
000B05 C5          0001*M         PUSH    BC
000B06 78          0002*M         LD      A, VAL
000B07 2F          0003*M         CPL
000B08 4F          0004*M         LD      C, A
000B09 ED 38 9B    0005*M         IN0     A, (REG)
000B0C A1          0006*M         AND     C
000B0D ED 39 9B    0007*M         OUT0    (REG), A
000B10 C1          0008*M         POP     BC
000B11             0039*  			RES_GPIO PB_ALT1, B
000B11 C5          0001*M         PUSH    BC
000B12 78          0002*M         LD      A, VAL
000B13 2F          0003*M         CPL
000B14 4F          0004*M         LD      C, A
000B15 ED 38 9C    0005*M         IN0     A, (REG)
000B18 A1          0006*M         AND     C
000B19 ED 39 9C    0007*M         OUT0    (REG), A
000B1C C1          0008*M         POP     BC
000B1D             0040*  			RES_GPIO PB_ALT2, B
000B1D C5          0001*M         PUSH    BC
000B1E 78          0002*M         LD      A, VAL
000B1F 2F          0003*M         CPL
000B20 4F          0004*M         LD      C, A
000B21 ED 38 9D    0005*M         IN0     A, (REG)
000B24 A1          0006*M         AND     C
000B25 ED 39 9D    0007*M         OUT0    (REG), A
000B28 C1          0008*M         POP     BC
000B29 C9          0041*  			RET
000B2A             0042*  
000B2A             0043*  ; Input
000B2A             0044*  ;
000B2A             0045*  GPIOB_M1:		SET_GPIO PB_DDR,  B
000B2A ED 38 9B    0001*M         IN0     A, (REG)
000B2D B0          0002*M         OR      VAL
000B2E ED 39 9B    0003*M         OUT0    (REG), A
000B31             0046*  			RES_GPIO PB_ALT1, B
000B31 C5          0001*M         PUSH    BC
000B32 78          0002*M         LD      A, VAL
000B33 2F          0003*M         CPL
000B34 4F          0004*M         LD      C, A
000B35 ED 38 9C    0005*M         IN0     A, (REG)
000B38 A1          0006*M         AND     C
000B39 ED 39 9C    0007*M         OUT0    (REG), A
000B3C C1          0008*M         POP     BC
000B3D             0047*  			RES_GPIO PB_ALT2, B
000B3D C5          0001*M         PUSH    BC
000B3E 78          0002*M         LD      A, VAL
000B3F 2F          0003*M         CPL
000B40 4F          0004*M         LD      C, A
000B41 ED 38 9D    0005*M         IN0     A, (REG)
000B44 A1          0006*M         AND     C
000B45 ED 39 9D    0007*M         OUT0    (REG), A
000B48 C1          0008*M         POP     BC
000B49 C9          0048*  			RET
000B4A             0049*  
000B4A             0050*  ; Open Drain IO
000B4A             0051*  ;
000B4A             0052*  GPIOB_M2:		RES_GPIO PB_DDR,  B
000B4A C5          0001*M         PUSH    BC
000B4B 78          0002*M         LD      A, VAL
000B4C 2F          0003*M         CPL
000B4D 4F          0004*M         LD      C, A
000B4E ED 38 9B    0005*M         IN0     A, (REG)
000B51 A1          0006*M         AND     C
000B52 ED 39 9B    0007*M         OUT0    (REG), A
000B55 C1          0008*M         POP     BC
000B56             0053*  			SET_GPIO PB_ALT1, B
000B56 ED 38 9C    0001*M         IN0     A, (REG)
000B59 B0          0002*M         OR      VAL
000B5A ED 39 9C    0003*M         OUT0    (REG), A
000B5D             0054*  			RES_GPIO PB_ALT2, B
000B5D C5          0001*M         PUSH    BC
000B5E 78          0002*M         LD      A, VAL
000B5F 2F          0003*M         CPL
000B60 4F          0004*M         LD      C, A
000B61 ED 38 9D    0005*M         IN0     A, (REG)
000B64 A1          0006*M         AND     C
000B65 ED 39 9D    0007*M         OUT0    (REG), A
000B68 C1          0008*M         POP     BC
000B69 C9          0055*  			RET
000B6A             0056*  
000B6A             0057*  ; Open Source IO
000B6A             0058*  ;
000B6A             0059*  GPIOB_M3:		SET_GPIO PB_DDR,  B
000B6A ED 38 9B    0001*M         IN0     A, (REG)
000B6D B0          0002*M         OR      VAL
000B6E ED 39 9B    0003*M         OUT0    (REG), A
000B71             0060*  			SET_GPIO PB_ALT1, B
000B71 ED 38 9C    0001*M         IN0     A, (REG)
000B74 B0          0002*M         OR      VAL
000B75 ED 39 9C    0003*M         OUT0    (REG), A
000B78             0061*  			RES_GPIO PB_ALT2, B
000B78 C5          0001*M         PUSH    BC
000B79 78          0002*M         LD      A, VAL
000B7A 2F          0003*M         CPL
000B7B 4F          0004*M         LD      C, A
000B7C ED 38 9D    0005*M         IN0     A, (REG)
000B7F A1          0006*M         AND     C
000B80 ED 39 9D    0007*M         OUT0    (REG), A
000B83 C1          0008*M         POP     BC
000B84 C9          0062*  			RET
000B85             0063*  
000B85             0064*  ; Interrupt, Dual Edge
000B85             0065*  ;
000B85             0066*  GPIOB_M4:		SET_GPIO PB_DR,   B
000B85 ED 38 9A    0001*M         IN0     A, (REG)
000B88 B0          0002*M         OR      VAL
000B89 ED 39 9A    0003*M         OUT0    (REG), A
000B8C             0067*  			RES_GPIO PB_DDR,  B
000B8C C5          0001*M         PUSH    BC
000B8D 78          0002*M         LD      A, VAL
000B8E 2F          0003*M         CPL
000B8F 4F          0004*M         LD      C, A
000B90 ED 38 9B    0005*M         IN0     A, (REG)
000B93 A1          0006*M         AND     C
000B94 ED 39 9B    0007*M         OUT0    (REG), A
000B97 C1          0008*M         POP     BC
000B98             0068*  			RES_GPIO PB_ALT1, B
000B98 C5          0001*M         PUSH    BC
000B99 78          0002*M         LD      A, VAL
000B9A 2F          0003*M         CPL
000B9B 4F          0004*M         LD      C, A
000B9C ED 38 9C    0005*M         IN0     A, (REG)
000B9F A1          0006*M         AND     C
000BA0 ED 39 9C    0007*M         OUT0    (REG), A
000BA3 C1          0008*M         POP     BC
000BA4             0069*  			RES_GPIO PB_ALT2, B
000BA4 C5          0001*M         PUSH    BC
000BA5 78          0002*M         LD      A, VAL
000BA6 2F          0003*M         CPL
000BA7 4F          0004*M         LD      C, A
000BA8 ED 38 9D    0005*M         IN0     A, (REG)
000BAB A1          0006*M         AND     C
000BAC ED 39 9D    0007*M         OUT0    (REG), A
000BAF C1          0008*M         POP     BC
000BB0 C9          0070*  			RET
000BB1             0071*  
000BB1             0072*  ; Alt Function
000BB1             0073*  ;
000BB1             0074*  GPIOB_M5:		SET_GPIO PB_DDR,  B
000BB1 ED 38 9B    0001*M         IN0     A, (REG)
000BB4 B0          0002*M         OR      VAL
000BB5 ED 39 9B    0003*M         OUT0    (REG), A
000BB8             0075*  			RES_GPIO PB_ALT1, B
000BB8 C5          0001*M         PUSH    BC
000BB9 78          0002*M         LD      A, VAL
000BBA 2F          0003*M         CPL
000BBB 4F          0004*M         LD      C, A
000BBC ED 38 9C    0005*M         IN0     A, (REG)
000BBF A1          0006*M         AND     C
000BC0 ED 39 9C    0007*M         OUT0    (REG), A
000BC3 C1          0008*M         POP     BC
000BC4             0076*  			SET_GPIO PB_ALT2, B
000BC4 ED 38 9D    0001*M         IN0     A, (REG)
000BC7 B0          0002*M         OR      VAL
000BC8 ED 39 9D    0003*M         OUT0    (REG), A
000BCB C9          0077*  			RET
000BCC             0078*  
000BCC             0079*  ; Interrupt, Active Low
000BCC             0080*  ;
000BCC             0081*  GPIOB_M6:		RES_GPIO PB_DR,   B
000BCC C5          0001*M         PUSH    BC
000BCD 78          0002*M         LD      A, VAL
000BCE 2F          0003*M         CPL
000BCF 4F          0004*M         LD      C, A
000BD0 ED 38 9A    0005*M         IN0     A, (REG)
000BD3 A1          0006*M         AND     C
000BD4 ED 39 9A    0007*M         OUT0    (REG), A
000BD7 C1          0008*M         POP     BC
000BD8             0082*  			RES_GPIO PB_DDR,  B
000BD8 C5          0001*M         PUSH    BC
000BD9 78          0002*M         LD      A, VAL
000BDA 2F          0003*M         CPL
000BDB 4F          0004*M         LD      C, A
000BDC ED 38 9B    0005*M         IN0     A, (REG)
000BDF A1          0006*M         AND     C
000BE0 ED 39 9B    0007*M         OUT0    (REG), A
000BE3 C1          0008*M         POP     BC
000BE4             0083*  			SET_GPIO PB_ALT1, B
000BE4 ED 38 9C    0001*M         IN0     A, (REG)
000BE7 B0          0002*M         OR      VAL
000BE8 ED 39 9C    0003*M         OUT0    (REG), A
000BEB             0084*  			SET_GPIO PB_ALT2, B
000BEB ED 38 9D    0001*M         IN0     A, (REG)
000BEE B0          0002*M         OR      VAL
000BEF ED 39 9D    0003*M         OUT0    (REG), A
000BF2 C9          0085*  			RET
000BF3             0086*  
000BF3             0087*  
000BF3             0088*  ; Interrupt, Active High
000BF3             0089*  ;
000BF3             0090*  GPIOB_M7:		SET_GPIO PB_DR,   B
000BF3 ED 38 9A    0001*M         IN0     A, (REG)
000BF6 B0          0002*M         OR      VAL
000BF7 ED 39 9A    0003*M         OUT0    (REG), A
000BFA             0091*  			RES_GPIO PB_DDR,  B
000BFA C5          0001*M         PUSH    BC
000BFB 78          0002*M         LD      A, VAL
000BFC 2F          0003*M         CPL
000BFD 4F          0004*M         LD      C, A
000BFE ED 38 9B    0005*M         IN0     A, (REG)
000C01 A1          0006*M         AND     C
000C02 ED 39 9B    0007*M         OUT0    (REG), A
000C05 C1          0008*M         POP     BC
000C06             0092*  			SET_GPIO PB_ALT1, B
000C06 ED 38 9C    0001*M         IN0     A, (REG)
000C09 B0          0002*M         OR      VAL
000C0A ED 39 9C    0003*M         OUT0    (REG), A
000C0D             0093*  			SET_GPIO PB_ALT2, B
000C0D ED 38 9D    0001*M         IN0     A, (REG)
000C10 B0          0002*M         OR      VAL
000C11 ED 39 9D    0003*M         OUT0    (REG), A
000C14 C9          0094*  			RET
000C15             0095*  
000C15             0096*  
000C15             0097*  ; Interrupt, Falling Edge
000C15             0098*  ;
000C15             0099*  GPIOB_M8:		RES_GPIO PB_DR,   B
000C15 C5          0001*M         PUSH    BC
000C16 78          0002*M         LD      A, VAL
000C17 2F          0003*M         CPL
000C18 4F          0004*M         LD      C, A
000C19 ED 38 9A    0005*M         IN0     A, (REG)
000C1C A1          0006*M         AND     C
000C1D ED 39 9A    0007*M         OUT0    (REG), A
000C20 C1          0008*M         POP     BC
000C21             0100*  			SET_GPIO PB_DDR,  B
000C21 ED 38 9B    0001*M         IN0     A, (REG)
000C24 B0          0002*M         OR      VAL
000C25 ED 39 9B    0003*M         OUT0    (REG), A
000C28             0101*  			SET_GPIO PB_ALT1, B
000C28 ED 38 9C    0001*M         IN0     A, (REG)
000C2B B0          0002*M         OR      VAL
000C2C ED 39 9C    0003*M         OUT0    (REG), A
000C2F             0102*  			SET_GPIO PB_ALT2, B
000C2F ED 38 9D    0001*M         IN0     A, (REG)
000C32 B0          0002*M         OR      VAL
000C33 ED 39 9D    0003*M         OUT0    (REG), A
000C36 C9          0103*  			RET
000C37             0104*  
000C37             0105*  ; Interrupt, Rising Edge
000C37             0106*  ;
000C37             0107*  GPIOB_M9:		SET_GPIO PB_DR,   B
000C37 ED 38 9A    0001*M         IN0     A, (REG)
000C3A B0          0002*M         OR      VAL
000C3B ED 39 9A    0003*M         OUT0    (REG), A
000C3E             0108*  			SET_GPIO PB_DDR,  B
000C3E ED 38 9B    0001*M         IN0     A, (REG)
000C41 B0          0002*M         OR      VAL
000C42 ED 39 9B    0003*M         OUT0    (REG), A
000C45             0109*  			SET_GPIO PB_ALT1, B
000C45 ED 38 9C    0001*M         IN0     A, (REG)
000C48 B0          0002*M         OR      VAL
000C49 ED 39 9C    0003*M         OUT0    (REG), A
000C4C             0110*  			SET_GPIO PB_ALT2, B
000C4C ED 38 9D    0001*M         IN0     A, (REG)
000C4F B0          0002*M         OR      VAL
000C50 ED 39 9D    0003*M         OUT0    (REG), A
000C53 C9          0111*  			RET
000C54             0112*  
000C54             0113*  ;			include "agon_gpio.inc"
000C54             0011       include "agon_graphics.asm"
000C54             0001*  ;
000C54             0002*  ; Title:	BBC Basic for AGON - Graphics stuff
000C54             0003*  ; Author:	Dean Belfield
000C54             0004*  ; Created:	04/12/2024
000C54             0005*  ; Last Updated:	11/12/2024
000C54             0006*  ;
000C54             0007*  ; Modinfo:
000C54             0008*  ; 11/12/2024:	Modified POINT_ to work with OSWORD
000C54             0009*  
000C54             0010*  			.ASSUME	ADL = 0
000C54             0011*  ;	.ORG 0x0000
000C54             0012*  
000C54             0013*  			; INCLUDE	"equs.inc"
000C54             0014*  			; INCLUDE "macros.inc"
000C54             0015*  			; INCLUDE "mos_api.inc"	; In MOS/src
000C54             0016*  
000C54             0017*  ;			SEGMENT CODE
000C54             0018*  
000C54             0019*  ;			XDEF	MODE_
000C54             0020*  ;			XDEF	COLOUR_
000C54             0021*  ;			XDEF	POINT_
000C54             0022*  ;			XDEF	GETSCHR
000C54             0023*  ;			XDEF	GETSCHR_1
000C54             0024*  
000C54             0025*  ;			XREF	ACCS
000C54             0026*  ;			XREF	OSWRCH
000C54             0027*  ;			XREF	ASC_TO_NUMBER
000C54             0028*  ;			XREF	EXTERR
000C54             0029*  ;			XREF	EXPRI
000C54             0030*  ;			XREF	COMMA
000C54             0031*  ;			XREF	XEQ
000C54             0032*  ;			XREF	NXT
000C54             0033*  ;			XREF	BRAKET
000C54             0034*  ;			XREF	CRTONULL
000C54             0035*  ;			XREF	NULLTOCR
000C54             0036*  ;			XREF	CRLF
000C54             0037*  ;			XREF	EXPR_W2
000C54             0038*  ;			XREF	INKEY1
000C54             0039*  
000C54             0040*  ; MODE n: Set video mode
000C54             0041*  ;
000C54 DD E5       0042*  MODE_:			PUSH	IX			; Get the system vars in IX
000C56             0043*  			MOSCALL	mos_sysvars		; Reset the semaphore
000C56 3E 08       0001*M 			LD	A, function
000C58 49 CF       0002*M 			RST.LIS	08h
000C5A 5B DD CB 04 0044*  			RES.LIL	4, (IX+sysvar_vpd_pflags)
       A6          
000C5F CD 33 18    0045*  			CALL    EXPRI
000C62 D9          0046*  			EXX
000C63             0047*  			VDU	16H			; Mode change
000C63 3E 16       0001*M         LD      A, VAL
000C65 CD 95 11    0002*M         CALL    OSWRCH
000C68             0048*  			VDU	L
000C68 7D          0001*M         LD      A, VAL
000C69 CD 95 11    0002*M         CALL    OSWRCH
000C6C             0049*  			MOSCALL	mos_sysvars
000C6C 3E 08       0001*M 			LD	A, function
000C6E 49 CF       0002*M 			RST.LIS	08h
000C70 5B DD CB 04 0050*  @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
       66          
000C75 28 F9       0051*  			JR	Z, @B			; Wait for the result
000C77 DD E1       0052*  			POP	IX
000C79 C3 99 24    0053*  			JP	XEQ
000C7C             0054*  
000C7C             0055*  ; GET(x,y): Get the ASCII code of a character on screen
000C7C             0056*  ;
000C7C FD 23       0057*  GETSCHR:		INC	IY
000C7E CD 33 18    0058*  			CALL    EXPRI      		; Get X coordinate
000C81 D9          0059*  			EXX
000C82 E5          0060*  			PUSH	HL			; Stack X
000C83 CD A2 20    0061*  			CALL	COMMA
000C86 CD 33 18    0062*  			CALL	EXPRI			; Get Y coordinate
000C89 D9          0063*  			EXX
000C8A CD AE 20    0064*  			CALL	BRAKET			; Closing bracket
000C8D D1          0065*  			POP	DE			; Pop X back into DE
000C8E CD 9A 0C    0066*  			CALL	GETSCHR_1
000C91             0067*  ;			JP	INKEY1
000C91 11 00 52    0068*  	        	LD	DE,ACCS
000C94 12          0069*  	                LD	(DE),A
000C95 3E 80       0070*  	                LD	A,80H
000C97 D0          0071*          	        RET	NC
000C98 1C          0072*  	                INC	E
000C99 C9          0073*                  	RET
000C9A             0074*  ;
000C9A             0075*  ; Fetch a character from the screen
000C9A             0076*  ; - DE: X coordinate
000C9A             0077*  ; - HL: Y coordinate
000C9A             0078*  ; Returns
000C9A             0079*  ; - A: The character or FFh if no match
000C9A             0080*  ; - F: C if match, otherwise NC
000C9A             0081*  ;
000C9A DD E5       0082*  GETSCHR_1:		PUSH	IX			; Get the system vars in IX
000C9C             0083*  			MOSCALL	mos_sysvars		; Reset the semaphore
000C9C 3E 08       0001*M 			LD	A, function
000C9E 49 CF       0002*M 			RST.LIS	08h
000CA0 5B DD CB 04 0084*  			RES.LIL	1, (IX+sysvar_vpd_pflags)
       8E          
000CA5             0085*  			VDU	23
000CA5 3E 17       0001*M         LD      A, VAL
000CA7 CD 95 11    0002*M         CALL    OSWRCH
000CAA             0086*  			VDU	0
000CAA 3E 00       0001*M         LD      A, VAL
000CAC CD 95 11    0002*M         CALL    OSWRCH
000CAF             0087*  			VDU	vdp_scrchar
000CAF 3E 83       0001*M         LD      A, VAL
000CB1 CD 95 11    0002*M         CALL    OSWRCH
000CB4             0088*  			VDU	E
000CB4 7B          0001*M         LD      A, VAL
000CB5 CD 95 11    0002*M         CALL    OSWRCH
000CB8             0089*  			VDU	D
000CB8 7A          0001*M         LD      A, VAL
000CB9 CD 95 11    0002*M         CALL    OSWRCH
000CBC             0090*  			VDU	L
000CBC 7D          0001*M         LD      A, VAL
000CBD CD 95 11    0002*M         CALL    OSWRCH
000CC0             0091*  			VDU	H
000CC0 7C          0001*M         LD      A, VAL
000CC1 CD 95 11    0002*M         CALL    OSWRCH
000CC4 5B DD CB 04 0092*  @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
       4E          
000CC9 28 F9       0093*  			JR	Z, @B			; Wait for the result
000CCB 5B DD 7E 09 0094*  			LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
000CCF B7          0095*  			OR	A			; Check for 00h
000CD0 37          0096*  			SCF				; C = character map
000CD1 20 01       0097*  			JR	NZ, @F			; We have a character, so skip next bit
000CD3 AF          0098*  			XOR	A			; Clear carry
000CD4 DD E1       0099*  @@:			POP	IX
000CD6 C9          0100*  			RET
000CD7             0101*  
000CD7             0102*  ; POINT(x,y): Get the pixel colour of a point on screen
000CD7             0103*  ; Parameters:
000CD7             0104*  ; - DE: X-coordinate
000CD7             0105*  ; - HL: Y-coordinate
000CD7             0106*  ; Returns:
000CD7             0107*  ; -  A: Pixel colour
000CD7             0108*  ;
000CD7 DD E5       0109*  POINT_:			PUSH	IX			; Get the system vars in IX
000CD9             0110*  			MOSCALL	mos_sysvars		; Reset the semaphore
000CD9 3E 08       0001*M 			LD	A, function
000CDB 49 CF       0002*M 			RST.LIS	08h
000CDD 5B DD CB 04 0111*  			RES.LIL	2, (IX+sysvar_vpd_pflags)
       96          
000CE2             0112*  			VDU	23
000CE2 3E 17       0001*M         LD      A, VAL
000CE4 CD 95 11    0002*M         CALL    OSWRCH
000CE7             0113*  			VDU	0
000CE7 3E 00       0001*M         LD      A, VAL
000CE9 CD 95 11    0002*M         CALL    OSWRCH
000CEC             0114*  			VDU	vdp_scrpixel
000CEC 3E 84       0001*M         LD      A, VAL
000CEE CD 95 11    0002*M         CALL    OSWRCH
000CF1             0115*  			VDU	E
000CF1 7B          0001*M         LD      A, VAL
000CF2 CD 95 11    0002*M         CALL    OSWRCH
000CF5             0116*  			VDU	D
000CF5 7A          0001*M         LD      A, VAL
000CF6 CD 95 11    0002*M         CALL    OSWRCH
000CF9             0117*  			VDU	L
000CF9 7D          0001*M         LD      A, VAL
000CFA CD 95 11    0002*M         CALL    OSWRCH
000CFD             0118*  			VDU	H
000CFD 7C          0001*M         LD      A, VAL
000CFE CD 95 11    0002*M         CALL    OSWRCH
000D01 5B DD CB 04 0119*  @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
       56          
000D06 28 F9       0120*  			JR	Z, @B			; Wait for the result
000D08             0121*  ;
000D08             0122*  ; Return the data as a 1 byte index
000D08             0123*  ;
000D08 5B DD 7E 16 0124*  			LD.LIL	A, (IX+sysvar_scrpixelIndex)
000D0C DD E1       0125*  			POP	IX
000D0E C9          0126*  			RET
000D0F             0127*  
000D0F             0128*  ; COLOUR colour
000D0F             0129*  ; COLOUR L,P
000D0F             0130*  ; COLOUR L,R,G,B
000D0F             0131*  ;
000D0F CD 33 18    0132*  COLOUR_:		CALL	EXPRI			; The colour / mode
000D12 D9          0133*  			EXX
000D13 7D          0134*  			LD	A, L
000D14 32 00 52    0135*  			LD	(VDU_BUFFER+0), A	; Store first parameter
000D17 CD 0B 45    0136*  			CALL	NXT			; Are there any more parameters?
000D1A FE 2C       0137*  			CP	','
000D1C 28 0E       0138*  			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
000D1E             0139*  ;
000D1E             0140*  			VDU	11h			; Just set the colour
000D1E 3E 11       0001*M         LD      A, VAL
000D20 CD 95 11    0002*M         CALL    OSWRCH
000D23             0141*  			VDU	(VDU_BUFFER+0)
000D23 3A 00 52    0001*M         LD      A, VAL
000D26 CD 95 11    0002*M         CALL    OSWRCH
000D29 C3 99 24    0142*  			JP	XEQ
000D2C             0143*  ;
000D2C CD A2 20    0144*  COLOUR_1:		CALL	COMMA
000D2F CD 33 18    0145*  			CALL	EXPRI			; Parse R (OR P)
000D32 D9          0146*  			EXX
000D33 7D          0147*  			LD	A, L
000D34 32 01 52    0148*  			LD	(VDU_BUFFER+1), A
000D37 CD 0B 45    0149*  			CALL	NXT			; Are there any more parameters?
000D3A FE 2C       0150*  			CP	','
000D3C 28 23       0151*  			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
000D3E             0152*  ;
000D3E             0153*  			VDU	13h			; VDU:COLOUR
000D3E 3E 13       0001*M         LD      A, VAL
000D40 CD 95 11    0002*M         CALL    OSWRCH
000D43             0154*  			VDU	(VDU_BUFFER+0)		; Logical Colour
000D43 3A 00 52    0001*M         LD      A, VAL
000D46 CD 95 11    0002*M         CALL    OSWRCH
000D49             0155*  			VDU	(VDU_BUFFER+1)		; Palette Colour
000D49 3A 01 52    0001*M         LD      A, VAL
000D4C CD 95 11    0002*M         CALL    OSWRCH
000D4F             0156*  			VDU	0			; RGB set to 0
000D4F 3E 00       0001*M         LD      A, VAL
000D51 CD 95 11    0002*M         CALL    OSWRCH
000D54             0157*  			VDU	0
000D54 3E 00       0001*M         LD      A, VAL
000D56 CD 95 11    0002*M         CALL    OSWRCH
000D59             0158*  			VDU	0
000D59 3E 00       0001*M         LD      A, VAL
000D5B CD 95 11    0002*M         CALL    OSWRCH
000D5E C3 99 24    0159*  			JP	XEQ
000D61             0160*  ;
000D61 CD A2 20    0161*  COLOUR_2:		CALL	COMMA
000D64 CD 33 18    0162*  			CALL	EXPRI			; Parse G
000D67 D9          0163*  			EXX
000D68 7D          0164*  			LD	A, L
000D69 32 02 52    0165*  			LD	(VDU_BUFFER+2), A
000D6C CD A2 20    0166*  			CALL	COMMA
000D6F CD 33 18    0167*  			CALL	EXPRI			; Parse B
000D72 D9          0168*  			EXX
000D73 7D          0169*  			LD	A, L
000D74 32 03 52    0170*  			LD	(VDU_BUFFER+3), A
000D77             0171*  			VDU	13h			; VDU:COLOUR
000D77 3E 13       0001*M         LD      A, VAL
000D79 CD 95 11    0002*M         CALL    OSWRCH
000D7C             0172*  			VDU	(VDU_BUFFER+0)		; Logical Colour
000D7C 3A 00 52    0001*M         LD      A, VAL
000D7F CD 95 11    0002*M         CALL    OSWRCH
000D82             0173*  			VDU	FFh			; Physical Colour (-1 for RGB mode)
000D82 3E FF       0001*M         LD      A, VAL
000D84 CD 95 11    0002*M         CALL    OSWRCH
000D87             0174*  			VDU	(VDU_BUFFER+1)		; R
000D87 3A 01 52    0001*M         LD      A, VAL
000D8A CD 95 11    0002*M         CALL    OSWRCH
000D8D             0175*  			VDU	(VDU_BUFFER+2)		; G
000D8D 3A 02 52    0001*M         LD      A, VAL
000D90 CD 95 11    0002*M         CALL    OSWRCH
000D93             0176*  			VDU	(VDU_BUFFER+3)		; B
000D93 3A 03 52    0001*M         LD      A, VAL
000D96 CD 95 11    0002*M         CALL    OSWRCH
000D99 C3 99 24    0177*  			JP	XEQ
000D9C             0178*  
000D9C             0179*  ;			include "agon_graphics.inc"
000D9C             0012       include "agon_interrupt.asm"
000D9C             0001*  ;
000D9C             0002*  ; Title:	BBC Basic for AGON - Interrupts
000D9C             0003*  ; Author:	Dean Belfield
000D9C             0004*  ; Created:	04/12/2024
000D9C             0005*  ; Last Updated:	04/12/2024
000D9C             0006*  ;
000D9C             0007*  ; Modinfo:
000D9C             0008*  
000D9C             0009*  			.ASSUME	ADL = 0
000D9C             0010*  ;	.ORG 0x0000
000D9C             0011*  
000D9C             0012*  			; INCLUDE	"macros.inc"
000D9C             0013*  			; INCLUDE	"equs.inc"
000D9C             0014*  			; INCLUDE "mos_api.inc"	; In MOS/src
000D9C             0015*  
000D9C             0016*  ;			SEGMENT CODE
000D9C             0017*  
000D9C             0018*  ;			XDEF	VBLANK_INIT
000D9C             0019*  ;			XDEF	VBLANK_STOP
000D9C             0020*  ;			XDEF	VBLANK_HANDLER
000D9C             0021*  
000D9C             0022*  ;			XREF	ESCSET
000D9C             0023*  ;			XREF	KEYDOWN		; In ram.asm
000D9C             0024*  ;			XREF	KEYASCII 	; In ram.asm
000D9C             0025*  ;			XREF	KEYCOUNT	; In ram.asm
000D9C             0026*  
000D9C             0027*  ; Hook into the MOS VBLANK interrupt
000D9C             0028*  ;
000D9C F3          0029*  VBLANK_INIT:		DI
000D9D             0030*  
000D9D ED 6E       0031*  			LD		A, MB 				; Get a 24-bit pointer to
000D9F 21 1A 0E    0032*  			LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
000DA2 CD DC 0D    0033*  			CALL		SET_AHL16 			; address is a 16-bit pointer in BBC BASIC's segment
000DA5             0034*  
000DA5 1E 32       0035*  			LD		E, 32h				; Set up the VBlank Interrupt Vector
000DA7             0036*  			MOSCALL		mos_setintvector
000DA7 3E 14       0001*M 			LD	A, function
000DA9 49 CF       0002*M 			RST.LIS	08h
000DAB             0037*  
000DAB 5B E5       0038*  			PUSH.LIL	HL				; HLU: Pointer to the MOS interrupt vector
000DAD 5B D1       0039*  			POP.LIL		DE 				; DEU: Pointer to the MOS interrupt vector
000DAF             0040*  
000DAF 21 32 0E    0041*  			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DB2 ED 6E       0042*  			LD		A, MB	 			; Get the segment BBC BASIC is running in
000DB4 32 23 0E    0043*  			LD		(VBLANK_HANDLER_MB + 1), A 	; Store in the interrupt handler
000DB7 CD DC 0D    0044*  			CALL		SET_AHL16 			; Convert pointer to an absolute 24-bit address
000DBA 5B ED 1F    0045*  			LD.LIL		(HL), DE			; Self-modify the code
000DBD FB          0046*  			EI
000DBE C9          0047*  			RET
000DBF             0048*  
000DBF             0049*  ; Unhook the custom VBLANK interrupt
000DBF             0050*  ;
000DBF F3          0051*  VBLANK_STOP:		DI
000DC0 21 32 0E    0052*  			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DC3 3A 23 0E    0053*  			LD		A, (VBLANK_HANDLER_MB + 1)	; The stored MB of the segment BBC BASIC is running in
000DC6 F5          0054*  			PUSH		AF 				; Stack the MB for later
000DC7 CD DC 0D    0055*  			CALL		SET_AHL16			; Convert pointer to an absolute 24-bit address
000DCA 5B ED 17    0056*  			LD.LIL		DE, (HL)			; DEU: Address of MOS interrupt vector
000DCD 5B D5       0057*  			PUSH.LIL	DE				; Transfer to HL
000DCF 5B E1       0058*  			POP.LIL		HL
000DD1 1E 32       0059*  			LD		E, 32h
000DD3             0060*  			MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
000DD3 3E 14       0001*M 			LD	A, function
000DD5 49 CF       0002*M 			RST.LIS	08h
000DD7 F1          0061*  			POP		AF 				; Restore MB to this segment
000DD8 ED 6D       0062*  			LD		MB, A
000DDA FB          0063*  			EI
000DDB C9          0064*  			RET
000DDC             0065*  
000DDC             0066*  ; Set the MSB of HL (U) to A
000DDC             0067*  ;
000DDC 5B E5       0068*  SET_AHL16:		PUSH.LIL	HL
000DDE 5B 21 02 00 0069*  			LD.LIL		HL, 2
       00          
000DE3 5B 39       0070*  			ADD.LIL		HL, SP
000DE5 5B 77       0071*  			LD.LIL		(HL), A
000DE7 5B E1       0072*  			POP.LIL		HL
000DE9 C9          0073*  			RET
000DEA             0074*  
000DEA             0075*  ; A safe LIS call to ESCSET
000DEA             0076*  ;
000DEA             0077*  DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
000DEA 3E 08       0001*M 			LD	A, function
000DEC 49 CF       0002*M 			RST.LIS	08h
000DEE 21 16 51    0078*  			LD		HL, KEYCOUNT 			; Check whether the keycount has changed
000DF1 5B DD 7E 19 0079*  			LD.LIL		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
000DF5 BE          0080*  			CP 		(HL)				; with our local copy
000DF6 20 09       0081*  			JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
000DF8             0082*  ;
000DF8 AF          0083*  DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
000DF9 32 15 51    0084*  			LD		(KEYASCII), A
000DFC 32 14 51    0085*  			LD		(KEYDOWN), A
000DFF 5B C9       0086*  			RET.LIL 					; And return
000E01             0087*  ;
000E01 77          0088*  DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
000E02 5B DD 7E 18 0089*  			LD.LIL		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
000E06 B7          0090*  			OR		A
000E07 28 EF       0091*  			JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
000E09             0092*  ;
000E09 32 14 51    0093*  			LD		(KEYDOWN), A 			; Store the keydown value
000E0C 5B DD 7E 05 0094*  			LD.LIL		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
000E10 32 15 51    0095*  			LD		(KEYASCII), A 			; Store locally
000E13 FE 1B       0096*  			CP		1Bh				; Is it escape?
000E15 CC FA 11    0097*  			CALL		Z, ESCSET			; Yes, so set the escape flags
000E18 49 C9       0098*  			RET.LIS						; Return to the interrupt handler
000E1A             0099*  
000E1A             0100*  ;
000E1A             0101*  ; Interrupts in mixed mode always run in ADL mode
000E1A             0102*  ;
000E1A             0103*  			.ASSUME	ADL = 1
000E1A             0104*  
000E1A F3          0105*  VBLANK_HANDLER:		DI
000E1B F5          0106*  			PUSH		AF
000E1C E5          0107*  			PUSH		HL
000E1D DD E5       0108*  			PUSH		IX
000E1F ED 6E       0109*  			LD		A, MB
000E21 F5          0110*  			PUSH		AF
000E22 3E 00       0111*  VBLANK_HANDLER_MB:	LD		A, 0				; This is self-modified by VBLANK_INIT
000E24 ED 6D       0112*  			LD		MB, A
000E26 49 CD EA 0D 0113*  			CALL.LIS	DO_KEYBOARD
000E2A F1          0114*  			POP		AF
000E2B ED 6D       0115*  			LD		MB, A
000E2D DD E1       0116*  			POP		IX
000E2F E1          0117*  			POP		HL
000E30 F1          0118*  			POP		AF
000E31             0119*  ;
000E31             0120*  ; Finally jump to the MOS interrupt
000E31             0121*  ;
000E31 C3 00 00 00 0122*  VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
000E35             0123*  
000E35             0124*  ;				    include "agon_interrupt.inc"
000E35             0013       include "agon_misc.asm"
000E35             0001*  ;
000E35             0002*  ; Title:	BBC Basic for AGON - Miscellaneous helper functions
000E35             0003*  ; Author:	Dean Belfield
000E35             0004*  ; Created:	04/12/2024
000E35             0005*  ; Last Updated:	04/12/2024
000E35             0006*  ;
000E35             0007*  ; Modinfo:
000E35             0008*  
000E35             0009*  			; INCLUDE	"equs.inc"
000E35             0010*  			; INCLUDE	"macros.inc"
000E35             0011*  
000E35             0012*  			.ASSUME	ADL = 0
000E35             0013*  ;	.ORG 0x0000
000E35             0014*  
000E35             0015*  ;			SEGMENT CODE
000E35             0016*  
000E35             0017*  ;			XDEF	ASC_TO_NUMBER
000E35             0018*  ;			XDEF	SWITCH_A
000E35             0019*  ;			XDEF	NULLTOCR
000E35             0020*  ;			XDEF	CRTONULL
000E35             0021*  ;			XDEF	CSTR_FNAME
000E35             0022*  ;			XDEF	CSTR_LINE
000E35             0023*  ;			XDEF	CSTR_FINDCH
000E35             0024*  ;			XDEF	CSTR_ENDSWITH
000E35             0025*  ;			XDEF	CSTR_CAT
000E35             0026*  
000E35             0027*  ;			XREF	OSWRCH
000E35             0028*  ;			XREF	KEYWDS
000E35             0029*  ;			XREF	KEYWDL
000E35             0030*  
000E35             0031*  ; Read a number and convert to binary
000E35             0032*  ; If prefixed with &, will read as hex, otherwise decimal
000E35             0033*  ;   Inputs: HL: Pointer in string buffer
000E35             0034*  ;  Outputs: HL: Updated text pointer
000E35             0035*  ;           DE: Value
000E35             0036*  ;            A: Terminator (spaces skipped)
000E35             0037*  ; Destroys: A,D,E,H,L,F
000E35             0038*  ;
000E35 C5          0039*  ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
000E36 11 00 00    0040*  			LD	DE, 0			; Initialise DE
000E39 CD 79 0E    0041*  			CALL	SKIPSPmisc			; Skip whitespace
000E3C 7E          0042*  			LD	A, (HL)			; Read first character
000E3D FE 26       0043*  			CP	'&'			; Is it prefixed with '&' (HEX number)?
000E3F 20 1E       0044*  			JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
000E41 23          0045*  			INC	HL			; Otherwise fall through to ASC_TO_HEX
000E42             0046*  ;
000E42 7E          0047*  ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
000E43 CD 87 0E    0048*  			CALL    UPPRCmisc			; Convert to uppercase
000E46 D6 30       0049*  			SUB	'0'			; Normalise to 0
000E48 38 2E       0050*  			JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E4A FE 0A       0051*  			CP 	10			; Check if >= 10
000E4C 38 06       0052*  			JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
000E4E D6 07       0053*  			SUB 	7			; Adjust ASCII A-F to nibble
000E50 FE 10       0054*  			CP 	16			; Check for > F
000E52 30 24       0055*  			JR 	NC, ASC_TO_NUMBER4	; Return if out of range
000E54 EB          0056*  ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
000E55 29          0057*  			ADD	HL, HL
000E56 29          0058*  			ADD	HL, HL
000E57 29          0059*  			ADD	HL, HL
000E58 29          0060*  			ADD	HL, HL
000E59 EB          0061*  			EX	DE, HL
000E5A B3          0062*  			OR      E			; OR the new digit in to the least significant nibble
000E5B 5F          0063*  			LD      E, A
000E5C 23          0064*  			INC     HL			; Onto the next character
000E5D 18 E3       0065*  			JR      ASC_TO_NUMBER1		; And loop
000E5F             0066*  ;
000E5F 7E          0067*  ASC_TO_NUMBER3:		LD	A, (HL)
000E60 D6 30       0068*  			SUB	'0'			; Normalise to 0
000E62 38 14       0069*  			JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E64 FE 0A       0070*  			CP	10			; Check if >= 10
000E66 30 10       0071*  			JR	NC, ASC_TO_NUMBER4	; Return if >= 10
000E68 EB          0072*  			EX 	DE, HL 			; Stick DE in HL
000E69 44          0073*  			LD	B, H 			; And copy HL into BC
000E6A 4D          0074*  			LD	C, L
000E6B 29          0075*  			ADD	HL, HL 			; x 2
000E6C 29          0076*  			ADD	HL, HL 			; x 4
000E6D 09          0077*  			ADD	HL, BC 			; x 5
000E6E 29          0078*  			ADD	HL, HL 			; x 10
000E6F EB          0079*  			EX	DE, HL
000E70             0080*  			ADD8U_DE 			; Add A to DE (macro)
000E70 83          0001*M         ADD     A, E
000E71 5F          0002*M         LD      E, A
000E72 8A          0003*M         ADC     A, D
000E73 93          0004*M         SUB     E
000E74 57          0005*M         LD      D, A
000E75 23          0081*  			INC	HL
000E76 18 E7       0082*  			JR	ASC_TO_NUMBER3
000E78 C1          0083*  ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSP here
000E79             0084*  
000E79             0085*  ; Skip a space
000E79             0086*  ; HL: Pointer in string buffer
000E79             0087*  ;
000E79 7E          0088*  SKIPSPmisc:			LD      A, (HL)
000E7A FE 20       0089*  			CP      ' '
000E7C C0          0090*  			RET     NZ
000E7D 23          0091*  			INC     HL
000E7E 18 F9       0092*  			JR      SKIPSPmisc
000E80             0093*  
000E80             0094*  ; Skip a string
000E80             0095*  ; HL: Pointer in string buffer
000E80             0096*  ;
000E80 7E          0097*  SKIPNOTSP:		LD	A, (HL)
000E81 FE 20       0098*  			CP	' '
000E83 C8          0099*  			RET	Z
000E84 23          0100*  			INC	HL
000E85 18 F9       0101*  			JR	SKIPNOTSP
000E87             0102*  
000E87             0103*  ; Convert a character to upper case
000E87             0104*  ;  A: Character to convert
000E87             0105*  ;
000E87 E6 7F       0106*  UPPRCmisc:  		AND     7FH
000E89 FE 60       0107*  			CP      '`'
000E8B D8          0108*  			RET     C
000E8C E6 5F       0109*  			AND     5FH			; Convert to upper case
000E8E C9          0110*  			RET
000E8F             0111*  
000E8F             0112*  ; Switch on A - lookup table immediately after call
000E8F             0113*  ;  A: Index into lookup table
000E8F             0114*  ;
000E8F E3          0115*  SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
000E90 87          0116*  			ADD	A, A			; Multiply A by two
000E91             0117*  			ADD8U_HL 			; Add to HL (macro)
000E91 85          0001*M         ADD     A, L
000E92 6F          0002*M         LD      L, A
000E93 8C          0003*M         ADC     A, H
000E94 95          0004*M         SUB     L
000E95 67          0005*M         LD      H, A
000E96 7E          0118*  			LD	A, (HL)			; follow the call. Fetch an address from the
000E97 23          0119*  			INC	HL 			; table.
000E98 66          0120*  			LD	H, (HL)
000E99 6F          0121*  			LD	L, A
000E9A E3          0122*  			EX	(SP), HL		; Swap this new address back, restores HL
000E9B C9          0123*  			RET				; Return program control to this new address
000E9C             0124*  
000E9C             0125*  ; Convert the buffer to a null terminated string and back
000E9C             0126*  ; HL: Buffer address
000E9C             0127*  ;
000E9C C5          0128*  NULLTOCR:		PUSH 	BC
000E9D 06 00       0129*  			LD	B, 0
000E9F 0E 0D       0130*  			LD	C, CR
000EA1 18 05       0131*  			JR	CRTONULL0
000EA3             0132*  ;
000EA3 C5          0133*  CRTONULL:		PUSH	BC
000EA4 06 0D       0134*  			LD	B, CR
000EA6 0E 00       0135*  			LD	C, 0
000EA8             0136*  ;
000EA8 E5          0137*  CRTONULL0:		PUSH	HL
000EA9 7E          0138*  CRTONULL1:		LD	A, (HL)
000EAA B8          0139*  			CP 	B
000EAB 28 03       0140*  			JR	Z, CRTONULL2
000EAD 23          0141*  			INC	HL
000EAE 18 F9       0142*  			JR	CRTONULL1
000EB0 71          0143*  CRTONULL2:		LD	(HL), C
000EB1 E1          0144*  			POP 	HL
000EB2 C1          0145*  			POP	BC
000EB3 C9          0146*  			RET
000EB4             0147*  
000EB4             0148*  ; Copy a filename to DE and zero terminate it
000EB4             0149*  ; HL: Source
000EB4             0150*  ; DE: Destination (ACCS)
000EB4             0151*  ;
000EB4 7E          0152*  CSTR_FNAME:		LD	A, (HL)			; Get source
000EB5 FE 20       0153*  			CP	32			; Is it space
000EB7 28 09       0154*  			JR	Z, @F
000EB9 FE 0D       0155*  			CP	CR			; Or is it CR
000EBB 28 05       0156*  			JR	Z, @F
000EBD 12          0157*  			LD	(DE), A			; No, so store
000EBE 23          0158*  			INC	HL			; Increment
000EBF 13          0159*  			INC	DE
000EC0 18 F2       0160*  			JR	CSTR_FNAME		; And loop
000EC2 AF          0161*  @@:			XOR	A			; Zero terminate the target string
000EC3 12          0162*  			LD	(DE), A
000EC4 13          0163*  			INC	DE			; And point to next free address
000EC5 C9          0164*  			RET
000EC6             0165*  
000EC6             0166*  ; Copy a CR terminated line to DE and zero terminate it
000EC6             0167*  ; HL: Source
000EC6             0168*  ; DE: Destination (ACCS)
000EC6             0169*  ;
000EC6 7E          0170*  CSTR_LINE:		LD	A, (HL)			; Get source
000EC7 FE 0D       0171*  			CP	CR			; Is it CR
000EC9 28 05       0172*  			JR	Z, @F
000ECB 12          0173*  			LD	(DE), A			; No, so store
000ECC 23          0174*  			INC	HL			; Increment
000ECD 13          0175*  			INC	DE
000ECE 18 F6       0176*  			JR	CSTR_LINE		; And loop
000ED0 AF          0177*  @@:			XOR	A			; Zero terminate the target string
000ED1 12          0178*  			LD	(DE), A
000ED2 13          0179*  			INC	DE			; And point to next free address
000ED3 C9          0180*  			RET
000ED4             0181*  
000ED4             0182*  ; Find the first occurrence of a character (case sensitive)
000ED4             0183*  ; HL: Source
000ED4             0184*  ;  C: Character to find
000ED4             0185*  ; Returns:
000ED4             0186*  ; HL: Pointer to character, or end of string marker
000ED4             0187*  ;
000ED4 7E          0188*  CSTR_FINDCH:		LD	A, (HL)			; Get source
000ED5 B9          0189*  			CP	C			; Is it our character?
000ED6 C8          0190*  			RET	Z			; Yes, so exit
000ED7 B7          0191*  			OR	A			; Is it the end of string?
000ED8 C8          0192*  			RET	Z			; Yes, so exit
000ED9 23          0193*  			INC	HL
000EDA 18 F8       0194*  			JR	CSTR_FINDCH
000EDC             0195*  
000EDC             0196*  ; Check whether a string ends with another string (case insensitive)
000EDC             0197*  ; HL: Source
000EDC             0198*  ; DE: The substring we want to test with
000EDC             0199*  ; Returns:
000EDC             0200*  ;  F: Z if HL ends with DE, otherwise NZ
000EDC             0201*  ;
000EDC 7E          0202*  CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
000EDD CD 87 0E    0203*  			CALL	UPPRCmisc			; Convert to upper case
000EE0 4F          0204*  			LD	C, A
000EE1 1A          0205*  			LD	A, (DE)			; Get the substring byte
000EE2 B9          0206*  			CP	C
000EE3 C0          0207*  			RET	NZ			; Return NZ if at any point the strings don't match
000EE4 B1          0208*  			OR	C			; Check whether both bytes are zero
000EE5 C8          0209*  			RET	Z			; If so, return, as we have reached the end of both strings
000EE6 23          0210*  			INC	HL
000EE7 13          0211*  			INC	DE
000EE8 18 F2       0212*  			JR	CSTR_ENDSWITH		; And loop
000EEA             0213*  
000EEA             0214*  ; Concatenate a string onto the end of another string
000EEA             0215*  ; HL: Source
000EEA             0216*  ; DE: Second string
000EEA             0217*  ;
000EEA 7E          0218*  CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
000EEB B7          0219*  			OR	A
000EEC 28 03       0220*  			JR	Z, CSTR_CAT_1
000EEE 23          0221*  			INC	HL
000EEF 18 F9       0222*  			JR	CSTR_CAT
000EF1             0223*  ;
000EF1 1A          0224*  CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
000EF2 77          0225*  			LD	(HL), A
000EF3 B7          0226*  			OR	A			; Check for end of string
000EF4 C8          0227*  			RET	Z			; And return
000EF5 23          0228*  			INC	HL
000EF6 13          0229*  			INC	DE
000EF7 18 F8       0230*  			JR	CSTR_CAT_1		; Loop until finished
000EF9             0231*  
000EF9             0232*  ;			include "agon_misc.inc"
000EF9             0014       include "agon_sound.asm"
000EF9             0001*  ;
000EF9             0002*  ; Title:	BBC Basic for AGON - Audio stuff
000EF9             0003*  ; Author:	Dean Belfield
000EF9             0004*  ; Created:	04/12/2024
000EF9             0005*  ; Last Updated:	11/12/2024
000EF9             0006*  ;
000EF9             0007*  ; Modinfo:
000EF9             0008*  ; 11/12/2024:	Modified SOUND_ to work with OSWORD
000EF9             0009*  
000EF9             0010*  			.ASSUME	ADL = 0
000EF9             0011*  ;	.ORG 0x0000
000EF9             0012*  
000EF9             0013*  			; INCLUDE	"equs.inc"
000EF9             0014*  			; INCLUDE "macros.inc"
000EF9             0015*  			; INCLUDE "mos_api.inc"	; In MOS/src
000EF9             0016*  
000EF9             0017*  ;			SEGMENT CODE
000EF9             0018*  
000EF9             0019*  ;			XDEF	SOUND_
000EF9             0020*  
000EF9             0021*  ;			XREF	OSWRCH
000EF9             0022*  ;			XREF	VDU_BUFFER
000EF9             0023*  ;			XREF	LTRAP
000EF9             0024*  
000EF9             0025*  ; SOUND channel,volume,pitch,duration
000EF9             0026*  ; Parameters:
000EF9             0027*  ; - HL: Pointer to data
000EF9             0028*  ;   - 0,1: Channel
000EF9             0029*  ;   - 2,3: Volume 0 (off) to 15 (full volume)
000EF9             0030*  ;   - 4,5: Pitch 0 - 255
000EF9             0031*  ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000EF9             0032*  ;
000EF9 7E          0033*  SOUND_:			LD	A, (HL)			; Channel
000EFA 32 00 52    0034*  			LD	(VDU_BUFFER+0), A
000EFD AF          0035*  			XOR	A			; Waveform
000EFE 32 01 52    0036*  			LD	(VDU_BUFFER+1), A
000F01 23          0037*  			INC	HL
000F02 23          0038*  			INC	HL
000F03             0039*  ;
000F03             0040*  ; Calculate the volume
000F03             0041*  ;
000F03 4E          0042*  			LD	C, (HL)			; Volume
000F04 06 06       0043*  			LD	B, 6			; C already contains the volume
000F06 ED 4C       0044*  			MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
000F08 79          0045*  			LD	A, C
000F09 32 02 52    0046*  			LD	(VDU_BUFFER+2), A
000F0C 23          0047*  			INC	HL
000F0D 23          0048*  			INC	HL
000F0E             0049*  ;
000F0E             0050*  ; And the frequency
000F0E             0051*  ;
000F0E E5          0052*  			PUSH	HL
000F0F 6E          0053*  			LD	L, (HL)
000F10 26 00       0054*  			LD	H, 0
000F12 11 84 0F    0055*  			LD	DE, SOUND_FREQ_LOOKUP
000F15 29          0056*  			ADD	HL, HL
000F16 19          0057*  			ADD	HL, DE
000F17 7E          0058*  			LD	A, (HL)
000F18 32 03 52    0059*  			LD	(VDU_BUFFER+3), A
000F1B 23          0060*  			INC	HL
000F1C 7E          0061*  			LD	A, (HL)
000F1D 32 04 52    0062*  			LD	(VDU_BUFFER+4), A
000F20 E1          0063*  			POP	HL
000F21 23          0064*  			INC	HL
000F22 23          0065*  			INC	HL
000F23             0066*  ;
000F23             0067*  ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
000F23             0068*  ;
000F23 4E          0069*  			LD	C, (HL)
000F24 06 32       0070*  			LD	B, 50			; C contains the duration, so MLT by 50
000F26 ED 4C       0071*  			MLT	BC
000F28 ED 43 05 52 0072*  			LD	(VDU_BUFFER+5), BC
000F2C             0073*  ;
000F2C DD E5       0074*  			PUSH	IX			; Get the system vars in IX
000F2E             0075*  			MOSCALL	mos_sysvars		; Reset the semaphore
000F2E 3E 08       0001*M 			LD	A, function
000F30 49 CF       0002*M 			RST.LIS	08h
000F32 5B DD CB 04 0076*  SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
       9E          
000F37             0077*  ;
000F37             0078*  			VDU	23			; Send the sound command
000F37 3E 17       0001*M         LD      A, VAL
000F39 CD 95 11    0002*M         CALL    OSWRCH
000F3C             0079*  			VDU	0
000F3C 3E 00       0001*M         LD      A, VAL
000F3E CD 95 11    0002*M         CALL    OSWRCH
000F41             0080*  			VDU	vdp_audio
000F41 3E 85       0001*M         LD      A, VAL
000F43 CD 95 11    0002*M         CALL    OSWRCH
000F46             0081*  			VDU	(VDU_BUFFER+0)		; 0: Channel
000F46 3A 00 52    0001*M         LD      A, VAL
000F49 CD 95 11    0002*M         CALL    OSWRCH
000F4C             0082*  			VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
000F4C 3A 01 52    0001*M         LD      A, VAL
000F4F CD 95 11    0002*M         CALL    OSWRCH
000F52             0083*  			VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
000F52 3A 02 52    0001*M         LD      A, VAL
000F55 CD 95 11    0002*M         CALL    OSWRCH
000F58             0084*  			VDU	(VDU_BUFFER+3)		; 3: Frequency L
000F58 3A 03 52    0001*M         LD      A, VAL
000F5B CD 95 11    0002*M         CALL    OSWRCH
000F5E             0085*  			VDU	(VDU_BUFFER+4)		; 4: Frequency H
000F5E 3A 04 52    0001*M         LD      A, VAL
000F61 CD 95 11    0002*M         CALL    OSWRCH
000F64             0086*  			VDU	(VDU_BUFFER+5)		; 5: Duration L
000F64 3A 05 52    0001*M         LD      A, VAL
000F67 CD 95 11    0002*M         CALL    OSWRCH
000F6A             0087*  			VDU	(VDU_BUFFER+6)		; 6: Duration H
000F6A 3A 06 52    0001*M         LD      A, VAL
000F6D CD 95 11    0002*M         CALL    OSWRCH
000F70             0088*  ;
000F70             0089*  ; Wait for acknowledgement
000F70             0090*  ;
000F70 5B DD CB 04 0091*  @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
       5E          
000F75 28 F9       0092*  			JR	Z, @B			; Wait for the result
000F77 CD 1A 12    0093*  			CALL	LTRAP			; Check for ESC
000F7A 5B DD 7E 0E 0094*  			LD.LIL	A, (IX+sysvar_audioSuccess)
000F7E A7          0095*  			AND	A			; Check if VDP has queued the note
000F7F 28 B1       0096*  			JR	Z, SOUND0		; No, so loop back and send again
000F81             0097*  ;
000F81 DD E1       0098*  			POP	IX
000F83 C9          0099*  			RET
000F84             0100*  
000F84             0101*  ; Frequency Lookup Table
000F84             0102*  ; Set up to replicate the BBC Micro audio frequencies
000F84             0103*  ;
000F84             0104*  ; Split over 5 complete octaves, with 53 being middle C
000F84             0105*  ; * C4: 262hz
000F84             0106*  ; + A4: 440hz
000F84             0107*  ;
000F84             0108*  ;	2	3	4	5	6	7	8
000F84             0109*  ;
000F84             0110*  ; B	1	49	97	145	193	241
000F84             0111*  ; A#	0	45	93	141	189	237
000F84             0112*  ; A		41	89+	137	185	233
000F84             0113*  ; G#		37	85	133	181	229
000F84             0114*  ; G		33	81	129	177	225
000F84             0115*  ; F#		29	77	125	173	221
000F84             0116*  ; F		25	73	121	169	217
000F84             0117*  ; E		21	69	117	165	213
000F84             0118*  ; D#		17	65	113	161	209
000F84             0119*  ; D		13	61	109	157	205	253
000F84             0120*  ; C#		9	57	105	153	201	249
000F84             0121*  ; C		5	53*	101	149	197	245
000F84             0122*  ;
000F84 75 00 76 00 0123*  SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
       78 00 7A 00 
       7B 00 83 00 
       85 00 87 00 
000F94 89 00 8B 00 0124*  			DW	 137,  139,  141,  143,  145,  147,  149,  151
       8D 00 8F 00 
       91 00 93 00 
       95 00 97 00 
000FA4 99 00 9C 00 0125*  			DW	 153,  156,  158,  160,  162,  165,  167,  170
       9E 00 A0 00 
       A2 00 A5 00 
       A7 00 AA 00 
000FB4 AC 00 AF 00 0126*  			DW	 172,  175,  177,  180,  182,  185,  188,  190
       B1 00 B4 00 
       B6 00 B9 00 
       BC 00 BE 00 
000FC4 C1 00 C4 00 0127*  			DW	 193,  196,  199,  202,  205,  208,  211,  214
       C7 00 CA 00 
       CD 00 D0 00 
       D3 00 D6 00 
000FD4 D9 00 DC 00 0128*  			DW	 217,  220,  223,  226,  230,  233,  236,  240
       DF 00 E2 00 
       E6 00 E9 00 
       EC 00 F0 00 
000FE4 F3 00 F7 00 0129*  			DW	 243,  247,  251,  254,  258,  262,  265,  269
       FB 00 FE 00 
       02 01 06 01 
       09 01 0D 01 
000FF4 11 01 15 01 0130*  			DW	 273,  277,  281,  285,  289,  294,  298,  302
       19 01 1D 01 
       21 01 26 01 
       2A 01 2E 01 
001004 33 01 37 01 0131*  			DW	 307,  311,  316,  320,  325,  330,  334,  339
       3C 01 40 01 
       45 01 4A 01 
       4E 01 53 01 
001014 58 01 5D 01 0132*  			DW	 344,  349,  354,  359,  365,  370,  375,  381
       62 01 67 01 
       6D 01 72 01 
       77 01 7D 01 
001024 82 01 88 01 0133*  			DW	 386,  392,  398,  403,  409,  415,  421,  427
       8E 01 93 01 
       99 01 9F 01 
       A5 01 AB 01 
001034 B2 01 B8 01 0134*  			DW	 434,  440,  446,  453,  459,  466,  473,  480
       BE 01 C5 01 
       CB 01 D2 01 
       D9 01 E0 01 
001044 E7 01 EE 01 0135*  			DW	 487,  494,  501,  508,  516,  523,  531,  539
       F5 01 FC 01 
       04 02 0B 02 
       13 02 1B 02 
001054 22 02 2A 02 0136*  			DW	 546,  554,  562,  571,  579,  587,  596,  605
       32 02 3B 02 
       43 02 4B 02 
       54 02 5D 02 
001064 65 02 6E 02 0137*  			DW	 613,  622,  631,  641,  650,  659,  669,  679
       77 02 81 02 
       8A 02 93 02 
       9D 02 A7 02 
001074 B1 02 BB 02 0138*  			DW	 689,  699,  709,  719,  729,  740,  751,  762
       C5 02 CF 02 
       D9 02 E4 02 
       EF 02 FA 02 
001084 05 03 10 03 0139*  			DW	 773,  784,  795,  807,  819,  831,  843,  855
       1B 03 27 03 
       33 03 3F 03 
       4B 03 57 03 
001094 63 03 70 03 0140*  			DW	 867,  880,  893,  906,  919,  932,  946,  960
       7D 03 8A 03 
       97 03 A4 03 
       B2 03 C0 03 
0010A4 CE 03 DC 03 0141*  			DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
       EA 03 F9 03 
       08 04 17 04 
       26 04 36 04 
0010B4 45 04 55 04 0142*  			DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
       65 04 76 04 
       86 04 97 04 
       A8 04 BA 04 
0010C4 CB 04 DD 04 0143*  			DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
       EF 04 02 05 
       14 05 27 05 
       3A 05 4E 05 
0010D4 62 05 76 05 0144*  			DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
       8A 05 9F 05 
       B3 05 C9 05 
       DE 05 F4 05 
0010E4 0A 06 21 06 0145*  			DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
       38 06 4F 06 
       66 06 7E 06 
       96 06 AF 06 
0010F4 C8 06 E1 06 0146*  			DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
       FA 06 14 07 
       2F 07 4A 07 
       65 07 80 07 
001104 9C 07 B8 07 0147*  			DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
       D5 07 F2 07 
       10 08 2D 08 
       4B 08 6A 08 
001114 8A 08 A9 08 0148*  			DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
       CA 08 EA 08 
       0C 09 2D 09 
       4F 09 72 09 
001124 95 09 B9 09 0149*  			DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
       DD 09 02 0A 
       27 0A 4D 0A 
       73 0A 9A 0A 
001134 C2 0A EA 0A 0150*  			DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
       12 0B 3C 0B 
       66 0B 90 0B 
       BB 0B E7 0B 
001144 13 0C 40 0C 0151*  			DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
       6E 0C 9C 0C 
       CB 0C FA 0C 
       2B 0D 5C 0D 
001154 8E 0D C0 0D 0152*  			DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
       F3 0D 27 0E 
       5C 0E 91 0E 
       C8 0E FF 0E 
001164 36 0F 6F 0F 0153*  			DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
       A9 0F E3 0F 
       1E 10 5A 10 
       97 10 D5 10 
001174 13 11 53 11 0154*  			DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
       93 11 D5 11 
       17 12 5B 12 
       9F 12 E4 12 
001184             0155*  
001184             0156*  
001184             0157*  ;    include "agon_sound.inc"
001184             0015       include "agon_os.asm"
001184             0001*  ;
001184             0002*  ; Title:	BBC Basic for AGON - MOS stuff
001184             0003*  ; Author:	Dean Belfield
001184             0004*  ; Created:	04/12/2024
001184             0005*  ; Last Updated:	12/12/2024
001184             0006*  ;
001184             0007*  ; Modinfo:
001184             0008*  ; 08/12/2024:	Added OSCLI and file I/O
001184             0009*  ; 11/12/2024:	Added ESC key handling
001184             0010*  ; 		Added OSWORD
001184             0011*  ; 12/12/2024:	Added OSRDCH, OSBYTE_81 and fixed *EDIT
001184             0012*  
001184             0013*  			.ASSUME	ADL = 0
001184             0014*  ;			.ORG 0x0000
001184             0015*  
001184             0016*  			; INCLUDE	"equs.inc"
001184             0017*  			; INCLUDE "macros.inc"
001184             0018*  			; INCLUDE "mos_api.inc"	; In MOS/src
001184             0019*  
001184             0020*  ;			include "agon_os.inc"
001184             0021*  
001184             0022*  ;			SEGMENT CODE
001184             0023*  
001184             0024*  ;			XDEF	OSWORD
001184             0025*  ;			XDEF	OSBYTE
001184             0026*  ;			XDEF	OSINIT
001184             0027*  ;			XDEF	OSOPEN
001184             0028*  ;			XDEF	OSSHUT
001184             0029*  ;			XDEF	OSLOAD
001184             0030*  ;			XDEF	OSSAVE
001184             0031*  ;			XDEF	OSLINE
001184             0032*  ;			XDEF	OSSTAT
001184             0033*  ;			XDEF	OSWRCH
001184             0034*  ;			XDEF	OSRDCH
001184             0035*  ;			XDEF	OSBGET
001184             0036*  ;			XDEF	OSBPUT
001184             0037*  ;			XDEF	OSCLI
001184             0038*  ;			XDEF	PROMPT
001184             0039*  ;			XDEF	GETPTR
001184             0040*  ;			XDEF	PUTPTR
001184             0041*  ;			XDEF	GETEXT
001184             0042*  ;			XDEF	TRAP
001184             0043*  ;			XDEF	LTRAP
001184             0044*  ;			XDEF	BYE
001184             0045*  ;			XDEF	RESET
001184             0046*  ;			XDEF	ESCSET
001184             0047*  
001184             0048*  ;			XREF	EXTERR
001184             0049*  ;			XREF	VBLANK_INIT
001184             0050*  ;			XREF	VBLANK_STOP
001184             0051*  ;			XREF	USER
001184             0052*  ;			XREF	COUNT
001184             0053*  ;			XREF	COUNT0
001184             0054*  ;			XREF	COUNT1
001184             0055*  ;			XREF	GETCSR
001184             0056*  ;			XREF	GETSCHR_1
001184             0057*  ;			XREF	NULLTOCR
001184             0058*  ;			XREF	CRLF
001184             0059*  ;			XREF	FLAGS
001184             0060*  ;			XREF	OSWRCHPT
001184             0061*  ;			XREF	OSWRCHCH
001184             0062*  ;			XREF	OSWRCHFH
001184             0063*  ;			XREF	KEYASCII
001184             0064*  ;			XREF	KEYDOWN
001184             0065*  ;			XREF	LISTON
001184             0066*  ;			XREF	PAGE_
001184             0067*  ;			XREF	CSTR_FNAME
001184             0068*  ;			XREF	CSTR_FINDCH
001184             0069*  ;			XREF	CSTR_CAT
001184             0070*  ;			XREF	CSTR_ENDSWITH
001184             0071*  ;			XREF	CSTR_LINE
001184             0072*  ;			XREF	NEWIT
001184             0073*  ;			XREF	BAD
001184             0074*  ;			XREF	CLEAN
001184             0075*  ;			XREF	LINNUM
001184             0076*  ;			XREF	BUFFER
001184             0077*  ;			XREF	NXT
001184             0078*  ;			XREF	ERROR_
001184             0079*  ;			XREF	XEQ
001184             0080*  ;			XREF	LEXAN2
001184             0081*  ;			XREF	GETTOP
001184             0082*  ;			XREF	FINDL
001184             0083*  ;			XREF	DEL
001184             0084*  ;			XREF	LISTIT
001184             0085*  ;			XREF	ESCAPE
001184             0086*  ;			XREF	ASC_TO_NUMBER
001184             0087*  ;			XREF	CLOOP
001184             0088*  ;			XREF	SCRAP
001184             0089*  ;			XREF	POINT_
001184             0090*  ;			XREF	SOUND_
001184             0091*  
001184             0092*  ;OSINIT - Initialise RAM mapping etc.
001184             0093*  ;If BASIC is entered by BBCBASIC FILENAME then file
001184             0094*  ;FILENAME.BBC is automatically CHAINed.
001184             0095*  ;   Outputs: DE = initial value of HIMEM (top of RAM)
001184             0096*  ;            HL = initial value of PAGE (user program)
001184             0097*  ;            Z-flag reset indicates AUTO-RUN.
001184             0098*  ;  Destroys: A,D,E,H,L,F
001184             0099*  ;
001184 CD 9C 0D    0100*  OSINIT:			CALL	VBLANK_INIT
001187 AF          0101*  			XOR	A
001188 32 0F 51    0102*  			LD	(FLAGS), A		; Clear flags and set F = Z
00118B 21 00 55    0103*  			LD 	HL, USER
00118E 11 00 FF    0104*  			LD	DE, RAM_Top
001191 5F          0105*  			LD	E, A			; Page boundary
001192 C9          0106*  			RET
001193             0107*  
001193             0108*  ; PROMPT: output the input prompt
001193             0109*  ;
001193 3E 3E       0110*  PROMPT: 		LD	A,'>'			; Falls through to OSWRCH
001195             0111*  
001195             0112*  ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
001195             0113*  ; Parameters:
001195             0114*  ; - A: Character to write
001195             0115*  ;
001195 E5          0116*  OSWRCH:			PUSH	HL
001196 21 FE 54    0117*  			LD	HL, LISTON		; Fetch the LISTON variable
001199 CB 5E       0118*  			BIT	3, (HL)			; Check whether we are in *EDIT mode
00119B 20 0A       0119*  			JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
00119D             0120*  ;
00119D 2A 12 51    0121*  			LD	HL, (OSWRCHCH)		; L: Channel #
0011A0 2D          0122*  			DEC	L			; If it is 1
0011A1 28 17       0123*  			JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0011A3             0124*  ;
0011A3 E1          0125*  			POP	HL			; Otherwise
0011A4 49 D7       0126*  			RST.LIS	10h			; Output the character to MOS
0011A6 C9          0127*  			RET
0011A7             0128*  ;
0011A7 2A 10 51    0129*  OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0011AA FE 0A       0130*  			CP	0AH			; Just ignore this
0011AC 28 0A       0131*  			JR	Z, OSWRCH_BUFFER2
0011AE FE 0D       0132*  			CP	0DH			; Is it the end of line?
0011B0 20 01       0133*  			JR	NZ, OSWRCH_BUFFER1	; No, so carry on
0011B2 AF          0134*  			XOR	A			; Turn it into a NUL character
0011B3 77          0135*  OSWRCH_BUFFER1:		LD	(HL), A			; Echo the character into the buffer
0011B4 23          0136*  			INC	HL			; Increment pointer
0011B5 22 10 51    0137*  			LD	(OSWRCHPT), HL		; Write pointer back
0011B8 E1          0138*  OSWRCH_BUFFER2:		POP	HL
0011B9 C9          0139*  			RET
0011BA             0140*  ;
0011BA D5          0141*  OSWRCH_FILE:		PUSH	DE
0011BB 5C          0142*  			LD	E, H			; Filehandle to E
0011BC CD 47 12    0143*  			CALL	OSBPUT			; Write the byte out
0011BF D1          0144*  			POP	DE
0011C0 E1          0145*  			POP	HL
0011C1 C9          0146*  			RET
0011C2             0147*  
0011C2             0148*  ; OSRDCH
0011C2             0149*  ;
0011C2             0150*  OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0011C2 3E 00       0001*M 			LD	A, function
0011C4 49 CF       0002*M 			RST.LIS	08h
0011C6 FE 1B       0151*  			CP	1Bh
0011C8 28 55       0152*  			JR	Z, LTRAP1
0011CA C9          0153*  			RET
0011CB             0154*  
0011CB             0155*  ; OSLINE: Invoke the line editor
0011CB             0156*  ;
0011CB 1E 01       0157*  OSLINE:			LD 	E, 1			; Default is to clear the buffer
0011CD             0158*  
0011CD             0159*  ; Entry point to line editor that does not clear the buffer
0011CD             0160*  ; Parameters:
0011CD             0161*  ; - HL: addresses destination buffer (on page boundary)
0011CD             0162*  ; Returns:
0011CD             0163*  ; -  A: 0
0011CD             0164*  ; NB: Buffer filled, terminated by CR
0011CD             0165*  ;
0011CD FD E5       0166*  OSLINE1:		PUSH	IY
0011CF E5          0167*  			PUSH	HL			; Buffer address
0011D0 01 00 01    0168*  			LD	BC, 256			; Buffer length
0011D3             0169*  			MOSCALL	mos_editline		; Call the MOS line editor
0011D3 3E 09       0001*M 			LD	A, function
0011D5 49 CF       0002*M 			RST.LIS	08h
0011D7 E1          0170*  			POP	HL			; Pop the address
0011D8 FD E1       0171*  			POP	IY
0011DA F5          0172*  			PUSH	AF			; Stack the return value (key pressed)
0011DB CD 9C 0E    0173*  			CALL	NULLTOCR		; Turn the 0 character to a CR
0011DE CD FB 40    0174*  			CALL	CRLF			; Display CRLF
0011E1 F1          0175*  			POP	AF
0011E2 FE 1B       0176*  			CP	1Bh 			; Check if ESC terminated the input
0011E4 CA 1F 12    0177*  			JP	Z, LTRAP1 		; Yes, so do the ESC thing
0011E7 3A 0F 51    0178*  			LD	A, (FLAGS)		; Otherwise
0011EA CB BF       0179*  			RES	7, A 			; Clear the escape flag
0011EC 32 0F 51    0180*  			LD	(FLAGS), A
0011EF CD 6F 16    0181*  			CALL	WAIT_VBLANK 		; Wait a frame
0011F2 AF          0182*   			XOR	A			; Return A = 0
0011F3 32 14 51    0183*  			LD	(KEYDOWN), A
0011F6 32 15 51    0184*  			LD	(KEYASCII), A
0011F9 C9          0185*  			RET
0011FA             0186*  
0011FA             0187*  ;
0011FA             0188*  ; ESCSET
0011FA             0189*  ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
0011FA             0190*  ;
0011FA E5          0191*  ESCSET: 		PUSH    HL
0011FB 21 0F 51    0192*          		LD      HL,FLAGS		; Pointer to FLAGS
0011FE CB 76       0193*          		BIT     6,(HL)			; If bit 6 is set, then
001200 20 02       0194*          		JR      NZ,ESCDIS		; escape is disabled, so skip
001202 CB FE       0195*          		SET     7,(HL)			; Set bit 7, the escape flag
001204 E1          0196*  ESCDIS: 		POP     HL
001205 C9          0197*          		RET
001206             0198*  
001206             0199*  ;
001206             0200*  ; ESCTEST
001206             0201*  ; Test for ESC key
001206             0202*  ;
001206 CD 0F 12    0203*  ESCTEST:		CALL	READKEY			; Read the keyboard
001209 C0          0204*  			RET	NZ			; Skip if no key is pressed
00120A FE 1B       0205*  			CP	1BH			; If ESC pressed then
00120C 28 EC       0206*  			JR	Z,ESCSET		; jump to the escape set routine
00120E C9          0207*  			RET
00120F             0208*  
00120F             0209*  ; Read the keyboard
00120F             0210*  ; Returns:
00120F             0211*  ; - A: ASCII of the pressed key
00120F             0212*  ; - F: Z if the key is pressed, otherwise NZ
00120F             0213*  ;
00120F 3A 14 51    0214*  READKEY:		LD	A, (KEYDOWN)		; Get key down
001212 3D          0215*  			DEC	A 			; Set Z flag if keydown is 1
001213 3A 15 51    0216*  			LD	A, (KEYASCII)		; Get key ASCII value
001216 C9          0217*  			RET
001217             0218*  ;
001217             0219*  ; TRAP
001217             0220*  ; This is called whenever BASIC needs to check for ESC
001217             0221*  ;
001217 CD 06 12    0222*  TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
00121A             0223*  ;
00121A 3A 0F 51    0224*  LTRAP:			LD	A,(FLAGS)		; Get FLAGS
00121D B7          0225*  			OR	A			; This checks for bit 7; if it is not set then the result will
00121E F0          0226*  			RET	P			; be positive (bit 7 is the sign bit in Z80), so return
00121F 21 0F 51    0227*  LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
001222 CB BE       0228*  			RES	7,(HL)			; Clear the escape pressed flag and
001224 C3 E3 25    0229*  			JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
001227             0230*  
001227             0231*  ; RESET
001227             0232*  ;
001227 C9          0233*  RESET:			RET				; Yes this is fine
001228             0234*  
001228             0235*  ; OSOPEN
001228             0236*  ; HL: Pointer to path
001228             0237*  ;  F: C Z
001228             0238*  ;     x x OPENIN
001228             0239*  ; 	  OPENOUT
001228             0240*  ;     x	  OPENUP
001228             0241*  ; Returns:
001228             0242*  ;  A: Filehandle, 0 if cannot open
001228             0243*  ;
001228 0E 01       0244*  OSOPEN:			LD	C, fa_read
00122A 28 06       0245*  			JR	Z, @F
00122C 0E 32       0246*  			LD	C, fa_write | fa_open_append
00122E 38 02       0247*  			JR	C, @F
001230 0E 0A       0248*  			LD	C, fa_write | fa_create_always
001232             0249*  @@:			MOSCALL	mos_fopen
001232 3E 0A       0001*M 			LD	A, function
001234 49 CF       0002*M 			RST.LIS	08h
001236 C9          0250*  			RET
001237             0251*  
001237             0252*  ;OSSHUT - Close disk file(s).
001237             0253*  ; E = file channel
001237             0254*  ;  If E=0 all files are closed (except SPOOL)
001237             0255*  ; Destroys: A,B,C,D,E,H,L,F
001237             0256*  ;
001237 C5          0257*  OSSHUT:			PUSH	BC
001238 4B          0258*  			LD	C, E
001239             0259*  			MOSCALL	mos_fclose
001239 3E 0B       0001*M 			LD	A, function
00123B 49 CF       0002*M 			RST.LIS	08h
00123D C1          0260*  			POP	BC
00123E C9          0261*  			RET
00123F             0262*  
00123F             0263*  ; OSBGET - Read a byte from a random disk file.
00123F             0264*  ;  E = file channel
00123F             0265*  ; Returns
00123F             0266*  ;  A = byte read
00123F             0267*  ;  Carry set if LAST BYTE of file
00123F             0268*  ; Destroys: A,B,C,F
00123F             0269*  ;
00123F C5          0270*  OSBGET:			PUSH	BC
001240 4B          0271*  			LD	C, E
001241             0272*  			MOSCALL	mos_fgetc
001241 3E 0C       0001*M 			LD	A, function
001243 49 CF       0002*M 			RST.LIS	08h
001245 C1          0273*  			POP	BC
001246 C9          0274*  			RET
001247             0275*  
001247             0276*  ; OSBPUT - Write a byte to a random disk file.
001247             0277*  ;  E = file channel
001247             0278*  ;  A = byte to write
001247             0279*  ; Destroys: A,B,C,F
001247             0280*  ;
001247 C5          0281*  OSBPUT:			PUSH	BC
001248 4B          0282*  			LD	C, E
001249 47          0283*  			LD	B, A
00124A             0284*  			MOSCALL	mos_fputc
00124A 3E 0D       0001*M 			LD	A, function
00124C 49 CF       0002*M 			RST.LIS	08h
00124E C1          0285*  			POP	BC
00124F C9          0286*  			RET
001250             0287*  
001250             0288*  ; OSSTAT - Read file status
001250             0289*  ;  E = file channel
001250             0290*  ; Returns
001250             0291*  ;  F: Z flag set - EOF
001250             0292*  ;  A: If Z then A = 0
001250             0293*  ; Destroys: A,D,E,H,L,F
001250             0294*  ;
001250 C5          0295*  OSSTAT:			PUSH	BC
001251 4B          0296*  			LD	C, E
001252             0297*  			MOSCALL	mos_feof
001252 3E 0E       0001*M 			LD	A, function
001254 49 CF       0002*M 			RST.LIS	08h
001256 C1          0298*  			POP	BC
001257 FE 01       0299*  			CP	1
001259 C9          0300*  			RET
00125A             0301*  
00125A             0302*  ; GETPTR - Return file pointer.
00125A             0303*  ;    E = file channel
00125A             0304*  ; Returns:
00125A             0305*  ; DEHL = pointer (0-&7FFFFF)
00125A             0306*  ; Destroys: A,B,C,D,E,H,L,F
00125A             0307*  ;
00125A FD E5       0308*  GETPTR:			PUSH		IY
00125C 4B          0309*  			LD		C, E
00125D             0310*  			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
00125D 3E 19       0001*M 			LD	A, function
00125F 49 CF       0002*M 			RST.LIS	08h
001261 5B E5       0311*  			PUSH.LIL	HL
001263 5B FD E1    0312*  			POP.LIL		IY		; IYU: Pointer to FIL structure
001266 5B FD 6E 11 0313*  			LD.LIL		L, (IY + FIL.fptr + 0)
00126A 5B FD 66 12 0314*  			LD.LIL		H, (IY + FIL.fptr + 1)
00126E 5B FD 5E 13 0315*  			LD.LIL		E, (IY + FIL.fptr + 2)
001272 5B FD 56 14 0316*  			LD.LIL		D, (IY + FIL.fptr + 3)
001276 FD E1       0317*  			POP		IY
001278 C9          0318*  			RET
001279             0319*  
001279             0320*  ; PUTPTR - Update file pointer.
001279             0321*  ;    A = file channel
001279             0322*  ; DEHL = new pointer (0-&7FFFFF)
001279             0323*  ; Destroys: A,B,C,D,E,H,L,F
001279             0324*  ;
001279 FD E5       0325*  PUTPTR:			PUSH		IY
00127B 4F          0326*  			LD		C, A  		; C: Filehandle
00127C 5B E5       0327*  			PUSH.LIL	HL
00127E 5B 21 02 00 0328*  			LD.LIL		HL, 2
       00          
001283 5B 39       0329*  			ADD.LIL		HL, SP
001285 5B 73       0330*  			LD.LIL		(HL), E 	; 3rd byte of DWORD set to E
001287 5B E1       0331*  			POP.LIL		HL
001289 5A          0332*  			LD		E, D  		; 4th byte passed as E
00128A             0333*  			MOSCALL		mos_flseek
00128A 3E 1C       0001*M 			LD	A, function
00128C 49 CF       0002*M 			RST.LIS	08h
00128E FD E1       0334*  			POP		IY
001290 C9          0335*  			RET
001291             0336*  
001291             0337*  ; GETEXT - Find file size.
001291             0338*  ;    E = file channel
001291             0339*  ; Returns:
001291             0340*  ; DEHL = file size (0-&800000)
001291             0341*  ; Destroys: A,B,C,D,E,H,L,F
001291             0342*  ;
001291 FD E5       0343*  GETEXT:			PUSH		IY
001293 4B          0344*  			LD		C, E
001294             0345*  			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
001294 3E 19       0001*M 			LD	A, function
001296 49 CF       0002*M 			RST.LIS	08h
001298 5B E5       0346*  			PUSH.LIL	HL
00129A 5B FD E1    0347*  			POP.LIL		IY		; IYU: Pointer to FIL structure
00129D 5B FD 6E 24 0348*  			LD.LIL		L, (IY + FIL.obj.objsize + 0)
0012A1 5B FD 66 25 0349*  			LD.LIL		H, (IY + FIL.obj.objsize + 1)
0012A5 5B FD 5E 26 0350*  			LD.LIL		E, (IY + FIL.obj.objsize + 2)
0012A9 5B FD 56 27 0351*  			LD.LIL		D, (IY + FIL.obj.objsize + 3)
0012AD FD E1       0352*  			POP		IY
0012AF C9          0353*  			RET
0012B0             0354*  
0012B0             0355*  ;OSLOAD - Load an area of memory from a file.
0012B0             0356*  ;   Inputs: HL addresses filename (CR terminated)
0012B0             0357*  ;           DE = address at which to load
0012B0             0358*  ;           BC = maximum allowed size (bytes)
0012B0             0359*  ;  Outputs: Carry reset indicates no room for file.
0012B0             0360*  ; Destroys: A,B,C,D,E,H,L,F
0012B0             0361*  ;
0012B0 C5          0362*  OSLOAD:			PUSH	BC			; Stack the size
0012B1 D5          0363*  			PUSH	DE			; Stack the load address
0012B2 11 00 52    0364*  			LD	DE, ACCS		; Buffer address for filename
0012B5 CD B4 0E    0365*  			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0012B8 21 00 52    0366*  			LD	HL, ACCS		; HL: Filename
0012BB CD F9 13    0367*  			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0012BE CD 0A 14    0368*  			CALL	EXT_HANDLER		; Get the default handler
0012C1 D1          0369*  			POP	DE			; Restore the load address
0012C2 C1          0370*  			POP	BC			; Restore the size
0012C3 B7          0371*  			OR	A
0012C4 CA 8B 13    0372*  			JP 	Z, OSLOAD_BBC
0012C7             0373*  ;
0012C7             0374*  ; Load the file in as a text file
0012C7             0375*  ;
0012C7 AF          0376*  OSLOAD_TXT:		XOR	A			; Set file attributes to read
0012C8 CD 28 12    0377*  			CALL	OSOPEN			; Open the file
0012CB 5F          0378*  			LD 	E, A 			; The filehandle
0012CC B7          0379*  			OR	A
0012CD 3E 04       0380*  			LD	A, 4			; File not found error
0012CF CA 93 13    0381*  			JP	Z, OSERROR		; Jump to error handler
0012D2 CD 3E 40    0382*  			CALL	NEWIT			; Call NEW to clear the program space
0012D5             0383*  ;
0012D5 21 00 52    0384*  OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0012D8             0385*  ;
0012D8             0386*  ; First skip any whitespace (indents) at the beginning of the input
0012D8             0387*  ;
0012D8 CD 3F 12    0388*  @@:			CALL	OSBGET			; Read the byte into A
0012DB 38 1C       0389*  			JR	C, OSLOAD_TXT3		; Is it EOF?
0012DD FE 0A       0390*  			CP	LF 			; Is it LF?
0012DF 28 18       0391*  			JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0012E1 FE 21       0392*  			CP	21h			; Is it less than or equal to ASCII space?
0012E3 38 F3       0393*  			JR	C, @B 			; Yes, so keep looping
0012E5 77          0394*  			LD	(HL), A 		; Store the first character
0012E6 2C          0395*  			INC	L
0012E7             0396*  ;
0012E7             0397*  ; Now read the rest of the line in
0012E7             0398*  ;
0012E7 CD 3F 12    0399*  OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
0012EA 38 26       0400*  			JR	C, OSLOAD_TXT4		; Is it EOF?
0012EC FE 20       0401*  			CP	20h			; Skip if not an ASCII character
0012EE 38 05       0402*  			JR	C, @F
0012F0 77          0403*  			LD	(HL), A 		; Store in the input buffer
0012F1 2C          0404*  			INC	L			; Increment the buffer pointer
0012F2 CA EF 3E    0405*  			JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
0012F5 FE 0A       0406*  @@:			CP	LF			; Check for LF
0012F7 20 EE       0407*  			JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
0012F9             0408*  ;
0012F9             0409*  ; Finally, handle EOL/EOF
0012F9             0410*  ;
0012F9 36 0D       0411*  OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
0012FB 7D          0412*  			LD	A, L			; Check for minimum line length
0012FC FE 02       0413*  			CP	2			; If it is 2 characters or less (including CR)
0012FE 38 08       0414*  			JR	C, @F			; Then don't bother entering it
001300 D5          0415*  			PUSH	DE			; Preserve the filehandle
001301 CD 1D 13    0416*  			CALL	OSEDIT			; Enter the line in memory
001304 DC 1A 40    0417*  			CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
001307 D1          0418*  			POP	DE
001308 CD 50 12    0419*  @@:			CALL	OSSTAT			; End of file?
00130B 20 C8       0420*  			JR	NZ, OSLOAD_TXT1		; No, so loop
00130D CD 37 12    0421*  			CALL	OSSHUT			; Close the file
001310 37          0422*  			SCF				; Flag to BASIC that we're good
001311 C9          0423*  			RET
001312             0424*  ;
001312             0425*  ; Special case for BASIC programs with no blank line at the end
001312             0426*  ;
001312 FE 20       0427*  OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
001314 38 05       0428*  			JR	C, @F
001316 77          0429*  			LD	(HL), A			; Store the character
001317 2C          0430*  			INC	L
001318 CA EF 3E    0431*  			JP	Z, BAD
00131B 18 DC       0432*  @@:			JR	OSLOAD_TXT3
00131D             0433*  ;
00131D             0434*  ; This bit enters the line into memory
00131D             0435*  ; Also called from OSLOAD_TXT
00131D             0436*  ; Returns:
00131D             0437*  ; F: C if a new line has been entered (CLEAN will need to be called)
00131D             0438*  ;
00131D AF          0439*  OSEDIT:			XOR	A			; Entry point after *EDIT
00131E 32 FB 54    0440*  			LD      (COUNT),A
001321 FD 21 00 52 0441*  			LD      IY,ACCS
001325 CD 8A 43    0442*  			CALL    LINNUM			; HL: The line number from the input buffer
001328 CD 0B 45    0443*  			CALL    NXT			; Skip spaces
00132B 7C          0444*  			LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
00132C B5          0445*  			OR      L
00132D 28 00       0446*  			JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
00132F             0447*  ;
00132F             0448*  ; This bit does the lexical analysis and tokenisation
00132F             0449*  ;
00132F 11 00 53    0450*  LNZERO:			LD	DE,BUFFER
001332 0E 01       0451*                  	LD	C,1			; LEFT MODE
001334 E5          0452*                  	PUSH	HL
001335 CD 18 44    0453*                  	CALL	LEXAN2			; LEXICAL ANALYSIS
001338 E1          0454*                  	POP	HL
001339 12          0455*                  	LD	(DE),A			; TERMINATOR
00133A AF          0456*                  	XOR	A
00133B 47          0457*                  	LD	B,A
00133C 4B          0458*                  	LD	C,E			; BC=LINE LENGTH
00133D 13          0459*                  	INC	DE
00133E 12          0460*                  	LD	(DE),A			; ZERO NEXT
00133F 7C          0461*                  	LD	A,H
001340 B5          0462*                  	OR	L
001341 FD 21 00 53 0463*                  	LD	IY,BUFFER		; FOR XEQ
001345 CA 99 24    0464*                  	JP	Z,XEQ			; DIRECT MODE
001348 C5          0465*                  	PUSH	BC
001349 CD 43 41    0466*                  	CALL	FINDL
00134C CC E9 3F    0467*                  	CALL	Z,DEL
00134F C1          0468*                  	POP	BC
001350 79          0469*                  	LD	A,C
001351 B7          0470*                  	OR	A
001352 C8          0471*                  	RET	Z
001353 C6 04       0472*                  	ADD	A,4
001355 4F          0473*                  	LD	C,A			; LENGTH INCLUSIVE
001356 D5          0474*                  	PUSH	DE			; LINE NUMBER
001357 C5          0475*                  	PUSH	BC			; SAVE LINE LENGTH
001358 EB          0476*                  	EX	DE,HL
001359 C5          0477*                  	PUSH	BC
00135A CD 25 40    0478*                  	CALL	GETTOP
00135D C1          0479*                  	POP	BC
00135E E5          0480*                  	PUSH	HL
00135F 09          0481*                  	ADD	HL,BC
001360 E5          0482*                  	PUSH	HL
001361 24          0483*                  	INC	H
001362 AF          0484*                  	XOR	A
001363 ED 72       0485*                  	SBC	HL,SP
001365 E1          0486*                  	POP	HL
001366 D2 44 3F    0487*                  	JP	NC,ERROR_		; "No room"
001369 E3          0488*                  	EX	(SP),HL
00136A E5          0489*                  	PUSH	HL
00136B 23          0490*                  	INC	HL
00136C B7          0491*                  	OR	A
00136D ED 52       0492*                  	SBC	HL,DE
00136F 44          0493*                  	LD	B,H			; BC=AMOUNT TO MOVE
001370 4D          0494*                  	LD	C,L
001371 E1          0495*                  	POP	HL
001372 D1          0496*                  	POP	DE
001373 28 02       0497*                  	JR	Z,ATENDos
001375 ED B8       0498*                  	LDDR				; MAKE SPACE
001377 C1          0499*  ATENDos:          	POP	BC			; LINE LENGTH
001378 D1          0500*                  	POP	DE			; LINE NUMBER
001379 23          0501*                  	INC	HL
00137A 71          0502*                  	LD	(HL),C			; STORE LENGTH
00137B 23          0503*                  	INC	HL
00137C 73          0504*                  	LD	(HL),E			; STORE LINE NUMBER
00137D 23          0505*                  	INC	HL
00137E 72          0506*                  	LD	(HL),D
00137F 23          0507*                  	INC	HL
001380 11 00 53    0508*                  	LD	DE,BUFFER
001383 EB          0509*                  	EX	DE,HL
001384 0D          0510*                  	DEC	C
001385 0D          0511*                  	DEC	C
001386 0D          0512*                  	DEC	C
001387 ED B0       0513*                  	LDIR				; ADD LINE
001389 37          0514*  			SCF
00138A C9          0515*  			RET
00138B             0516*  ;
00138B             0517*  ; Load the file in as a tokenised binary blob
00138B             0518*  ;
00138B             0519*  OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
00138B 3E 01       0001*M 			LD	A, function
00138D 49 CF       0002*M 			RST.LIS	08h
00138F D0          0520*  			RET	NC			; If load returns with carry reset - NO ROOM
001390 B7          0521*  			OR	A			; If there is no error (A=0)
001391 37          0522*  			SCF				; Need to set carry indicating there was room
001392 C8          0523*  			RET	Z			; Return
001393             0524*  ;
001393 F5          0525*  OSERROR:		PUSH	AF			; Handle the MOS error
001394 21 00 52    0526*  			LD	HL, ACCS		; Address of the buffer
001397 01 00 01    0527*  			LD	BC, 256			; Length of the buffer
00139A 5F          0528*  			LD	E, A			; The error code
00139B             0529*  			MOSCALL	mos_getError		; Copy the error message into the buffer
00139B 3E 0F       0001*M 			LD	A, function
00139D 49 CF       0002*M 			RST.LIS	08h
00139F F1          0530*  			POP	AF
0013A0 E5          0531*  			PUSH	HL			; Stack the address of the error (now in ACCS)
0013A1 C6 7F       0532*  			ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0013A3 C3 55 3F    0533*  			JP	EXTERR			; Trigger an external error
0013A6             0534*  
0013A6             0535*  ;OSSAVE - Save an area of memory to a file.
0013A6             0536*  ;   Inputs: HL addresses filename (term CR)
0013A6             0537*  ;           DE = start address of data to save
0013A6             0538*  ;           BC = length of data to save (bytes)
0013A6             0539*  ; Destroys: A,B,C,D,E,H,L,F
0013A6             0540*  ;
0013A6 C5          0541*  OSSAVE:			PUSH	BC			; Stack the size
0013A7 D5          0542*  			PUSH	DE			; Stack the save address
0013A8 11 00 52    0543*  			LD	DE, ACCS		; Buffer address for filename
0013AB CD B4 0E    0544*  			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0013AE 21 00 52    0545*  			LD	HL, ACCS		; HL: Filename
0013B1 CD F9 13    0546*  			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0013B4 CD 0A 14    0547*  			CALL	EXT_HANDLER		; Get the default handler
0013B7 D1          0548*  			POP	DE			; Restore the save address
0013B8 C1          0549*  			POP	BC			; Restore the size
0013B9 B7          0550*  			OR	A			; Is the extension .BBC
0013BA 28 35       0551*  			JR	Z, OSSAVE_BBC		; Yes, so use that
0013BC             0552*  ;
0013BC             0553*  ; Save the file out as a text file
0013BC             0554*  ;
0013BC 3A 12 51    0555*  OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0013BF F5          0556*  			PUSH	AF
0013C0 AF          0557*  			XOR	A
0013C1 3C          0558*  			INC	A			; Make sure C is clear, A is 1, for OPENOUT
0013C2 32 12 51    0559*  			LD	(OSWRCHCH), A
0013C5 CD 28 12    0560*  			CALL	OSOPEN			; Open the file
0013C8 32 13 51    0561*  			LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0013CB DD 21 FE 54 0562*  			LD	IX, LISTON		; Required for LISTIT
0013CF 2A DC 54    0563*  			LD	HL, (PAGE_)		; Get start of program area
0013D2 D9          0564*  			EXX
0013D3 01 00 00    0565*  			LD	BC, 0			; Set the initial indent counters
0013D6 D9          0566*  			EXX
0013D7 7E          0567*  OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0013D8 B7          0568*  			OR	A
0013D9 28 0A       0569*  			JR	Z, OSSAVE_TXT2
0013DB 23          0570*  			INC	HL			; Skip the length byte
0013DC 5E          0571*  			LD	E, (HL)			; Get the line number
0013DD 23          0572*  			INC	HL
0013DE 56          0573*  			LD	D, (HL)
0013DF 23          0574*  			INC	HL
0013E0 CD 5D 40    0575*  			CALL	LISTIT			; List the line
0013E3 18 F2       0576*  			JR	OSSAVE_TXT1
0013E5 3A 13 51    0577*  OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
0013E8 5F          0578*  			LD	E, A
0013E9 CD 37 12    0579*  			CALL	OSSHUT			; Close it
0013EC F1          0580*  			POP	AF			; Restore the channel
0013ED 32 12 51    0581*  			LD	(OSWRCHCH), A
0013F0 C9          0582*  			RET
0013F1             0583*  ;
0013F1             0584*  ; Save the file out as a tokenised binary blob
0013F1             0585*  ;
0013F1             0586*  OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
0013F1 3E 02       0001*M 			LD	A, function
0013F3 49 CF       0002*M 			RST.LIS	08h
0013F5 B7          0587*  			OR	A			; If there is no error (A=0)
0013F6 C8          0588*  			RET	Z			; Just return
0013F7 18 9A       0589*  			JR	OSERROR			; Trip an error
0013F9             0590*  
0013F9             0591*  ; Check if an extension is specified in the filename
0013F9             0592*  ; Add a default if not specified
0013F9             0593*  ; HL: Filename (CSTR format)
0013F9             0594*  ;
0013F9 E5          0595*  EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
0013FA 0E 2E       0596*  			LD	C, '.'			; Search for dot (marks start of extension)
0013FC CD D4 0E    0597*  			CALL	CSTR_FINDCH
0013FF B7          0598*  			OR	A			; Check for end of string marker
001400 20 06       0599*  			JR	NZ, @F			; No, so skip as we have an extension at this point
001402 11 36 14    0600*  			LD	DE, EXT_LOOKUP		; Get the first (default extension)
001405 CD EA 0E    0601*  			CALL	CSTR_CAT		; Concat it to string pointed to by HL
001408 E1          0602*  @@:			POP	HL			; Restore the filename pointer
001409 C9          0603*  			RET
00140A             0604*  
00140A             0605*  ; Check if an extension is valid and, if so, provide a pointer to a handler
00140A             0606*  ; HL: Filename (CSTR format)
00140A             0607*  ; Returns:
00140A             0608*  ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
00140A             0609*  ;
00140A E5          0610*  EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
00140B 0E 2E       0611*  			LD	C, '.'			; Find the '.'
00140D CD D4 0E    0612*  			CALL	CSTR_FINDCH
001410 11 36 14    0613*  			LD	DE, EXT_LOOKUP		; The lookup table
001413             0614*  ;
001413 E5          0615*  EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
001414 CD DC 0E    0616*  			CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
001417 E1          0617*  			POP	HL			; Restore the pointer to the extension
001418 28 18       0618*  			JR	Z, EXT_HANDLER_2	; We have a match!
00141A             0619*  ;
00141A 1A          0620*  @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
00141B 13          0621*  			INC	DE
00141C B7          0622*  			OR	A
00141D 20 FB       0623*  			JR	NZ, @B
00141F 13          0624*  			INC	DE			; Skip the file extension # byte
001420             0625*  ;
001420 1A          0626*  			LD	A, (DE)			; Are we at the end of the table?
001421 B7          0627*  			OR	A
001422 20 EF       0628*  			JR	NZ, EXT_HANDLER_1	; No, so loop
001424             0629*  ;
001424 3E CC       0630*  			LD      A,204			; Throw a "Bad name" error
001426 CD 55 3F    0631*          		CALL    EXTERR
001429 42 61 64 20 0632*          		DB    	"Bad name", 0
       6E 61 6D 65 
       00          
001432             0633*  ;
001432 13          0634*  EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
001433 1A          0635*  			LD	A, (DE)
001434 E1          0636*  			POP	HL			; Restore the filename pointer
001435 C9          0637*  			RET
001436             0638*  
001436             0639*  ; Extension lookup table
001436             0640*  ; CSTR, TYPE
001436             0641*  ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
001436             0642*  ; 	- 1: Human readable plain text
001436             0643*  ;
001436 2E 42 42 43 0644*  EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
       00 00       
00143C 2E 54 58 54 0645*  			DB	".TXT", 0, 1
       00 01       
001442 2E 41 53 43 0646*  			DB	".ASC", 0, 1
       00 01       
001448 2E 42 41 53 0647*  			DB	".BAS", 0, 1
       00 01       
00144E 00          0648*  			DB	0			; End of table
00144F             0649*  
00144F             0650*  ; OSWORD
00144F             0651*  ;
00144F FE 07       0652*  OSWORD:			CP	07H			; SOUND
001451             0653*  			; JR	Z, OSWORD_07
001451 CA F9 0E    0654*  			JP	Z, OSWORD_07 ; JR WAS TOO LARGE
001454 FE 08       0655*  			CP	08H			; ENVELOPE
001456 28 14       0656*  			JR	Z, OSWORD_08
001458 FE 09       0657*  			CP	09H			; POINT
00145A 28 03       0658*  			JR	Z, OSWORD_09
00145C C3 91 14    0659*  			JP	HUH			; Anything else trips an error
00145F             0660*  
00145F             0661*  ; SOUND channel,volume,pitch,duration
00145F             0662*  ; Parameters:
00145F             0663*  ; - HL: Pointer to data
00145F             0664*  ;   - 0,1: Channel
00145F             0665*  ;   - 2,3: Volume 0 (off) to 15 (full volume)
00145F             0666*  ;   - 4,5: Pitch 0 - 255
00145F             0667*  ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
00145F             0668*  ;
00145F             0669*  OSWORD_07:		EQU	SOUND_
00145F             0670*  
00145F             0671*  ; OSWORD 0x09: POINT
00145F             0672*  ; Parameters:
00145F             0673*  ; - HL: Address of data
00145F             0674*  ;   - 0,1: X coordinate
00145F             0675*  ;   - 2,3: Y coordinate
00145F             0676*  ;
00145F ED 5B 17 51 0677*  OSWORD_09:		LD	DE,(SCRAP+0)
001463 2A 19 51    0678*  			LD	HL,(SCRAP+2)
001466 CD D7 0C    0679*  			CALL	POINT_
001469 32 1B 51    0680*  			LD	(SCRAP+4),A
00146C C9          0681*  OSWORD_08:		RET				; Envelope not currently implemented
00146D             0682*  
00146D             0683*  ;
00146D             0684*  ; OSBYTE
00146D             0685*  ; Parameters:
00146D             0686*  ; - A: FX #
00146D             0687*  ; - L: First parameter
00146D             0688*  ; - H: Second parameter
00146D             0689*  ;
00146D FE 0B       0690*  OSBYTE:			CP	0BH			; Keyboard auto-repeat delay
00146F 28 31       0691*  			JR	Z, OSBYTE_0B
001471 FE 0C       0692*  			CP	0CH			; Keyboard auto-repeat rate
001473 28 54       0693*  			JR	Z, OSBYTE_0C
001475 FE 13       0694*  			CP	13H			; Wait for vblank
001477 28 77       0695*  			JR	Z, OSBYTE_13
001479 FE 76       0696*  			CP	76H			; Set keyboard LED
00147B 28 7B       0697*  			JR	Z, OSBYTE_76
00147D FE 81       0698*  			CP	81H			; Read the keyboard
00147F CA 20 15    0699*  			JP	Z, OSBYTE_81
001482 FE 86       0700*  			CP	86H			; Get cursor coordinates
001484 CA 3A 15    0701*  			JP	Z, OSBYTE_86
001487 FE 87       0702*  			CP	87H			; Fetch current mode and character under cursor
001489 CA 69 15    0703*  			JP	Z, OSBYTE_87
00148C FE A0       0704*  			CP	A0H			; Fetch system variable
00148E CA 7F 15    0705*  			JP	Z, OSBYTE_A0
001491             0706*  ;
001491             0707*  ; Anything else trips an error
001491             0708*  ;
001491 3E FE       0709*  HUH:    		LD      A,254			; Bad command error
001493 CD 55 3F    0710*          		CALL    EXTERR
001496 42 61 64 20 0711*          		DB    	"Bad command"
       63 6F 6D 6D 
       61 6E 64    
0014A1 00          0712*          		DEFB    0
0014A2             0713*  
0014A2             0714*  ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
0014A2             0715*  ; Parameters:
0014A2             0716*  ; - HL: Repeat delay
0014A2             0717*  ;
0014A2             0718*  OSBYTE_0B:		VDU	23
0014A2 3E 17       0001*M         LD      A, VAL
0014A4 CD 95 11    0002*M         CALL    OSWRCH
0014A7             0719*  			VDU	0
0014A7 3E 00       0001*M         LD      A, VAL
0014A9 CD 95 11    0002*M         CALL    OSWRCH
0014AC             0720*  			VDU	vdp_keystate
0014AC 3E 88       0001*M         LD      A, VAL
0014AE CD 95 11    0002*M         CALL    OSWRCH
0014B1             0721*  			VDU	L
0014B1 7D          0001*M         LD      A, VAL
0014B2 CD 95 11    0002*M         CALL    OSWRCH
0014B5             0722*  			VDU	H
0014B5 7C          0001*M         LD      A, VAL
0014B6 CD 95 11    0002*M         CALL    OSWRCH
0014B9             0723*  			VDU	0
0014B9 3E 00       0001*M         LD      A, VAL
0014BB CD 95 11    0002*M         CALL    OSWRCH
0014BE             0724*  			VDU 	0
0014BE 3E 00       0001*M         LD      A, VAL
0014C0 CD 95 11    0002*M         CALL    OSWRCH
0014C3             0725*  			VDU	255
0014C3 3E FF       0001*M         LD      A, VAL
0014C5 CD 95 11    0002*M         CALL    OSWRCH
0014C8 C9          0726*  			RET
0014C9             0727*  
0014C9             0728*  ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
0014C9             0729*  ; Parameters:
0014C9             0730*  ; - HL: Repeat rate
0014C9             0731*  ;
0014C9             0732*  OSBYTE_0C:		VDU	23
0014C9 3E 17       0001*M         LD      A, VAL
0014CB CD 95 11    0002*M         CALL    OSWRCH
0014CE             0733*  			VDU	0
0014CE 3E 00       0001*M         LD      A, VAL
0014D0 CD 95 11    0002*M         CALL    OSWRCH
0014D3             0734*  			VDU	vdp_keystate
0014D3 3E 88       0001*M         LD      A, VAL
0014D5 CD 95 11    0002*M         CALL    OSWRCH
0014D8             0735*  			VDU	0
0014D8 3E 00       0001*M         LD      A, VAL
0014DA CD 95 11    0002*M         CALL    OSWRCH
0014DD             0736*  			VDU 	0
0014DD 3E 00       0001*M         LD      A, VAL
0014DF CD 95 11    0002*M         CALL    OSWRCH
0014E2             0737*  			VDU	L
0014E2 7D          0001*M         LD      A, VAL
0014E3 CD 95 11    0002*M         CALL    OSWRCH
0014E6             0738*  			VDU	H
0014E6 7C          0001*M         LD      A, VAL
0014E7 CD 95 11    0002*M         CALL    OSWRCH
0014EA             0739*  			VDU	255
0014EA 3E FF       0001*M         LD      A, VAL
0014EC CD 95 11    0002*M         CALL    OSWRCH
0014EF C9          0740*  			RET
0014F0             0741*  
0014F0             0742*  ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
0014F0             0743*  ;
0014F0 CD 6F 16    0744*  OSBYTE_13:		CALL	WAIT_VBLANK
0014F3 2E 00       0745*  			LD	L, 0			; Returns 0
0014F5 C3 4E 1B    0746*  			JP	COUNT0
0014F8             0747*  ;
0014F8             0748*  ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
0014F8             0749*  ; Parameters:
0014F8             0750*  ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
0014F8             0751*  ;
0014F8             0752*  OSBYTE_76:		VDU	23
0014F8 3E 17       0001*M         LD      A, VAL
0014FA CD 95 11    0002*M         CALL    OSWRCH
0014FD             0753*  			VDU	0
0014FD 3E 00       0001*M         LD      A, VAL
0014FF CD 95 11    0002*M         CALL    OSWRCH
001502             0754*  			VDU	vdp_keystate
001502 3E 88       0001*M         LD      A, VAL
001504 CD 95 11    0002*M         CALL    OSWRCH
001507             0755*  			VDU	0
001507 3E 00       0001*M         LD      A, VAL
001509 CD 95 11    0002*M         CALL    OSWRCH
00150C             0756*  			VDU 	0
00150C 3E 00       0001*M         LD      A, VAL
00150E CD 95 11    0002*M         CALL    OSWRCH
001511             0757*  			VDU	0
001511 3E 00       0001*M         LD      A, VAL
001513 CD 95 11    0002*M         CALL    OSWRCH
001516             0758*  			VDU	0
001516 3E 00       0001*M         LD      A, VAL
001518 CD 95 11    0002*M         CALL    OSWRCH
00151B             0759*  			VDU	L
00151B 7D          0001*M         LD      A, VAL
00151C CD 95 11    0002*M         CALL    OSWRCH
00151F C9          0760*  			RET
001520             0761*  
001520             0762*  ; OSBYTE 0x81: Read the keyboard
001520             0763*  ; Parameters:
001520             0764*  ; - HL = Time to wait (centiseconds)
001520             0765*  ; Returns:
001520             0766*  ; - F: Carry reset indicates time-out
001520             0767*  ; - A: If carry set, A = character typed
001520             0768*  ; Destroys: A,D,E,H,L,F
001520             0769*  ;
001520 CD 0F 12    0770*  OSBYTE_81:		CALL	READKEY			; Read the keyboard
001523 28 09       0771*  			JR	Z, @F 			; Skip if we have a key
001525 7C          0772*  			LD	A, H 			; Check loop counter
001526 B5          0773*  			OR 	L
001527 C8          0774*  			RET 	Z 			; Return, we've not got a key at this point
001528 CD 6F 16    0775*  			CALL	WAIT_VBLANK 		; Wait a frame
00152B 2B          0776*  			DEC 	HL			; Decrement
00152C 18 F2       0777*  			JR	OSBYTE_81		; And loop
00152E             0778*  ;
00152E 21 14 51    0779*  @@:			LD	HL, KEYDOWN		; We have a key, so
001531 36 00       0780*  			LD	(HL), 0			; clear the keydown flag
001533 FE 1B       0781*  			CP	1BH			; If we are not pressing ESC,
001535 37          0782*  			SCF 				; then flag we've got a character
001536 C0          0783*  			RET	NZ
001537 C3 FA 11    0784*  			JP	ESCSET			; Handle ESC
00153A             0785*  
00153A             0786*  ; OSBYTE 0x86: Fetch cursor coordinates
00153A             0787*  ; Returns:
00153A             0788*  ; - DE: X Coordinate (POS)
00153A             0789*  ; - HL: Y Coordinate (VPOS)
00153A             0790*  ;
00153A DD E5       0791*  OSBYTE_86:		PUSH	IX			; Get the system vars in IX
00153C             0792*  			MOSCALL	mos_sysvars		; Reset the semaphore
00153C 3E 08       0001*M 			LD	A, function
00153E 49 CF       0002*M 			RST.LIS	08h
001540 5B DD CB 04 0793*  			RES.LIL	0, (IX+sysvar_vpd_pflags)
       86          
001545             0794*  			VDU	23
001545 3E 17       0001*M         LD      A, VAL
001547 CD 95 11    0002*M         CALL    OSWRCH
00154A             0795*  			VDU	0
00154A 3E 00       0001*M         LD      A, VAL
00154C CD 95 11    0002*M         CALL    OSWRCH
00154F             0796*  			VDU	vdp_cursor
00154F 3E 82       0001*M         LD      A, VAL
001551 CD 95 11    0002*M         CALL    OSWRCH
001554 5B DD CB 04 0797*  @@:			BIT.LIL	0, (IX+sysvar_vpd_pflags)
       46          
001559 28 F9       0798*  			JR	Z, @B			; Wait for the result
00155B 16 00       0799*  			LD 	D, 0
00155D 62          0800*  			LD	H, D
00155E 5B DD 5E 07 0801*  			LD.LIL	E, (IX + sysvar_cursorX)
001562 5B DD 6E 08 0802*  			LD.LIL	L, (IX + sysvar_cursorY)
001566 DD E1       0803*  			POP	IX
001568 C9          0804*  			RET
001569             0805*  
001569             0806*  ; OSBYTE 0x87: Fetch current mode and character under cursor
001569             0807*  ;
001569 DD E5       0808*  OSBYTE_87:		PUSH	IX
00156B CD 15 02    0809*  			CALL	GETCSR			; Get the current screen position
00156E CD 9A 0C    0810*  			CALL	GETSCHR_1		; Read character from screen
001571 6F          0811*  			LD	L, A
001572             0812*  			MOSCALL	mos_sysvars
001572 3E 08       0001*M 			LD	A, function
001574 49 CF       0002*M 			RST.LIS	08h
001576 5B DD 66 27 0813*  			LD.LIL	H, (IX+sysvar_scrMode)	; H: Screen mode
00157A DD E1       0814*  			POP	IX
00157C C3 50 1B    0815*  			JP	COUNT1
00157F             0816*  
00157F             0817*  ; OSBYTE 0xA0: Fetch system variable
00157F             0818*  ; Parameters:
00157F             0819*  ; - L: The system variable to fetch
00157F             0820*  ;
00157F DD E5       0821*  OSBYTE_A0:		PUSH	IX
001581             0822*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
001581 3E 08       0001*M 			LD	A, function
001583 49 CF       0002*M 			RST.LIS	08h
001585 5B 01 00 00 0823*  			LD.LIL	BC, 0
       00          
00158A 4D          0824*  			LD	C, L			; BCU = L
00158B 5B DD 09    0825*  			ADD.LIL	IX, BC			; Add to IX
00158E 5B DD 6E 00 0826*  			LD.LIL	L, (IX + 0)		; Fetch the return value
001592 DD E1       0827*  			POP	IX
001594 C3 4E 1B    0828*  			JP 	COUNT0
001597             0829*  
001597             0830*  ; OSCLI
001597             0831*  ;
001597             0832*  ;
001597             0833*  ;OSCLI - Process a MOS command
001597             0834*  ;
001597 CD F1 15    0835*  OSCLI: 			CALL    SKIPSP
00159A FE 0D       0836*  			CP      CR
00159C C8          0837*  			RET     Z
00159D FE 7C       0838*  			CP      '|'
00159F C8          0839*  			RET     Z
0015A0 EB          0840*  			EX      DE,HL
0015A1 21 00 16    0841*  			LD      HL,COMDS
0015A4 1A          0842*  OSCLI0:			LD      A,(DE)
0015A5 CD F8 15    0843*  			CALL    UPPRC
0015A8 BE          0844*  			CP      (HL)
0015A9 28 0B       0845*  			JR      Z,OSCLI2
0015AB 38 2E       0846*  			JR      C,OSCLI6
0015AD CB 7E       0847*  OSCLI1:			BIT     7,(HL)
0015AF 23          0848*  			INC     HL
0015B0 28 FB       0849*  			JR      Z,OSCLI1
0015B2 23          0850*  			INC     HL
0015B3 23          0851*  			INC     HL
0015B4 18 EE       0852*  			JR      OSCLI0
0015B6             0853*  ;
0015B6 D5          0854*  OSCLI2:			PUSH    DE
0015B7 13          0855*  OSCLI3:			INC     DE
0015B8 23          0856*  			INC     HL
0015B9 1A          0857*  			LD      A,(DE)
0015BA CD F8 15    0858*  			CALL    UPPRC
0015BD FE 2E       0859*  			CP      '.'			; ABBREVIATED?
0015BF 28 0A       0860*  			JR      Z,OSCLI4
0015C1 AE          0861*  			XOR     (HL)
0015C2 28 F3       0862*  			JR      Z,OSCLI3
0015C4 FE 80       0863*  			CP      80H
0015C6 28 03       0864*  			JR      Z,OSCLI4
0015C8 D1          0865*  			POP     DE
0015C9 18 E2       0866*  			JR      OSCLI1
0015CB             0867*  ;
0015CB F1          0868*  OSCLI4:			POP     AF
0015CC 13          0869*  		        INC     DE
0015CD CB 7E       0870*  OSCLI5:			BIT     7,(HL)
0015CF 23          0871*  			INC     HL
0015D0 28 FB       0872*  			JR      Z,OSCLI5
0015D2 7E          0873*  			LD      A,(HL)
0015D3 23          0874*  			INC     HL
0015D4 66          0875*  			LD      H,(HL)
0015D5 6F          0876*  			LD      L,A
0015D6 E5          0877*  			PUSH    HL
0015D7 EB          0878*  			EX      DE,HL
0015D8 C3 F1 15    0879*  			JP      SKIPSP
0015DB             0880*  ;
0015DB EB          0881*  OSCLI6:			EX	DE, HL			; HL: Buffer for command
0015DC 11 00 52    0882*  			LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0015DF D5          0883*  			PUSH	DE			; Store buffer address
0015E0 CD C6 0E    0884*  			CALL	CSTR_LINE		; Fetch the line
0015E3 E1          0885*  			POP	HL			; HL: Pointer to command string in ACCS
0015E4 FD E5       0886*  			PUSH	IY
0015E6             0887*  			MOSCALL	mos_oscli		; Returns OSCLI error in A
0015E6 3E 10       0001*M 			LD	A, function
0015E8 49 CF       0002*M 			RST.LIS	08h
0015EA FD E1       0888*  			POP	IY
0015EC B7          0889*  			OR	A			; 0 means MOS returned OK
0015ED C8          0890*  			RET	Z			; So don't do anything
0015EE C3 93 13    0891*  			JP 	OSERROR			; Otherwise it's a MOS error
0015F1             0892*  
0015F1 7E          0893*  SKIPSP:			LD      A,(HL)
0015F2 FE 20       0894*          		CP      ' '
0015F4 C0          0895*          		RET     NZ
0015F5 23          0896*          		INC     HL
0015F6 18 F9       0897*          		JR      SKIPSP
0015F8             0898*  
0015F8 E6 7F       0899*  UPPRC:  		AND     7FH
0015FA FE 60       0900*  			CP      '`'
0015FC D8          0901*  			RET     C
0015FD E6 5F       0902*  			AND     5FH			; CONVERT TO UPPER CASE
0015FF C9          0903*  			RET
001600             0904*  
001600             0905*  ; Each command has bit 7 of the last character set, and is followed by the address of the handler
001600             0906*  ; These must be in alphabetical order
001600             0907*  ;
001600 42 59 45    0908*  COMDS:  		DB	"BY","E"+80h		; BYE
001603 10 16       0909*  			DW	BYE
001605 45 44 49 54 0910*  			DB	"EDI","T"+80h		; EDIT
001609 1B 16       0911*  			DW	STAR_EDIT
00160B 46 58       0912*  			DB	"F","X"+80h		; FX
00160D 57 16       0913*  			DW	STAR_FX
00160F             0914*  ;			DB	'VERSIO','N'+80h	; VERSION
00160F             0915*  ;			DW	STAR_VERSION
00160F FF          0916*  			DB	FFh
001610             0917*  
001610             0918*  ; *BYE
001610             0919*  ;
001610 CD BF 0D    0920*  BYE:			CALL	VBLANK_STOP		; Restore MOS interrupts
001613 5B DD E1    0921*  			POP.LIL	IX 			; The return address to init
001616 21 00 00    0922*  			LD	HL, 0			; The return code
001619 DD E9       0923*  			JP	(IX)
00161B             0924*  
00161B             0925*  ; *EDIT linenum
00161B             0926*  ;
00161B CD 35 0E    0927*  STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
00161E EB          0928*  			EX	DE, HL			; HL: Line number
00161F CD 43 41    0929*  			CALL	FINDL			; HL: Address in RAM of tokenised line
001622 3E 29       0930*  			LD	A, 41			; F:NZ If the line is not found
001624 C2 44 3F    0931*  			JP	NZ, ERROR_		; Do error 41: No such line in that case
001627             0932*  ;
001627             0933*  ; Use LISTIT to output the line to the ACCS buffer
001627             0934*  ;
001627 23          0935*  			INC	HL			; Skip the length byte
001628 5E          0936*  			LD	E, (HL)			; Fetch the line number
001629 23          0937*  			INC	HL
00162A 56          0938*  			LD	D, (HL)
00162B 23          0939*  			INC	HL
00162C DD 21 00 52 0940*  			LD	IX, ACCS		; Pointer to where the copy is to be stored
001630 DD 22 10 51 0941*  			LD	(OSWRCHPT), IX
001634 DD 21 FE 54 0942*  			LD	IX, LISTON		; Pointer to LISTON variable in RAM
001638 DD 7E 00    0943*  			LD	A, (IX)			; Store that variable
00163B F5          0944*  			PUSH	AF
00163C DD 36 00 09 0945*  			LD	(IX), 09h		; Set to echo to buffer
001640 CD 5D 40    0946*  			CALL	LISTIT
001643 F1          0947*  			POP	AF
001644 DD 77 00    0948*  			LD	(IX), A			; Restore the original LISTON variable
001647 21 00 52    0949*  			LD	HL, ACCS		; HL: ACCS
00164A 5D          0950*  			LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
00164B CD CD 11    0951*  			CALL	OSLINE1			; Invoke the editor
00164E CD 1D 13    0952*  			CALL	OSEDIT
001651 DC 1A 40    0953*  			CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
001654 C3 B0 37    0954*  			JP      CLOOP			; Jump back to immediate mode
001657             0955*  
001657             0956*  ; OSCLI FX n
001657             0957*  ;
001657 CD 35 0E    0958*  STAR_FX:		CALL	ASC_TO_NUMBER
00165A 4B          0959*  			LD	C, E			; C: Save FX #
00165B CD 35 0E    0960*  			CALL	ASC_TO_NUMBER
00165E 7A          0961*  			LD	A, D  			; Is first parameter > 255?
00165F B7          0962*  			OR 	A
001660 28 03       0963*  			JR	Z, STAR_FX1		; Yes, so skip next bit
001662 EB          0964*  			EX	DE, HL 			; Parameter is 16-bit
001663 18 06       0965*  			JR	STAR_FX2
001665             0966*  ;
001665 43          0967*  STAR_FX1:		LD	B, E 			; B: Save First parameter
001666 CD 35 0E    0968*  			CALL	ASC_TO_NUMBER		; Fetch second parameter
001669 68          0969*  			LD	L, B 			; L: First parameter
00166A 63          0970*  			LD	H, E 			; H: Second parameter
00166B             0971*  ;
00166B 79          0972*  STAR_FX2:		LD	A, C 			; A: FX #
00166C C3 6D 14    0973*  			JP	OSBYTE
00166F             0974*  
00166F             0975*  ; Helper Functions
00166F             0976*  ;
00166F DD E5       0977*  WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
001671             0978*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
001671 3E 08       0001*M 			LD	A, function
001673 49 CF       0002*M 			RST.LIS	08h
001675 5B DD 7E 00 0979*  			LD.LIL	A, (IX + sysvar_time + 0)
001679 5B DD BE 00 0980*  @@:			CP.LIL 	A, (IX + sysvar_time + 0)
00167D 28 FA       0981*  			JR	Z, @B
00167F DD E1       0982*  			POP	IX
001681 C9          0983*  			RET
001682             0984*  
001682             0016       include "eval.asm"
001682             0001*  ;
001682             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
001682             0003*  ;
001682             0004*                  .ASSUME ADL = 0
001682             0005*  ;	.ORG 0x0000
001682             0006*  ;                SEGMENT CODE
001682             0007*  ;
001682             0008*  ;                XDEF	COUNT0
001682             0009*  ;                XDEF	COUNT1
001682             0010*  ;
001682             0011*  ;BBC BASIC INTERPRETER - Z80 VERSION
001682             0012*  ;EVALUATE EXPRESSION MODULE - "EVAL"
001682             0013*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
001682             0014*  ;
001682             0015*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
001682             0016*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
001682             0017*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
001682             0018*  ;
001682             0019*  ;VERSION 2.3, 07-05-1984
001682             0020*  ;VERSION 3.0, 08-03-1987
001682             0021*  ;VERSION 5.0, 31-05-2024
001682             0022*  ;
001682             0023*  ;BINARY FLOATING POINT REPRESENTATION:
001682             0024*  ; 32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
001682             0025*  ; 8 BIT EXCESS-128 SIGNED EXPONENT
001682             0026*  ; SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
001682             0027*  ; MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
001682             0028*  ;
001682             0029*  ;BINARY INTEGER REPRESENTATION:
001682             0030*  ; 32 BIT 2'S-COMPLEMENT SIGNED INTEGER
001682             0031*  ; "EXPONENT" BYTE = 0 (WHEN PRESENT)
001682             0032*  ;
001682             0033*  ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
001682             0034*  ;                            EXPONENT - C
001682             0035*  ;
001682             0036*  ;                XDEF	EXPR
001682             0037*  ;                XDEF	EXPRN
001682             0038*  ;                XDEF	EXPRI
001682             0039*  ;                XDEF	EXPRS
001682             0040*  ;                XDEF	ITEMI
001682             0041*  ;                XDEF	CONS
001682             0042*  ;                XDEF	LOADS
001682             0043*  ;                XDEF	VAL0
001682             0044*  ;                XDEF	SFIX
001682             0045*  ;                XDEF	STR
001682             0046*  ;                XDEF	HEXSTR
001682             0047*  ;                XDEF	LOAD4
001682             0048*  ;                XDEF	LOADN
001682             0049*  ;                XDEF	DLOAD5
001682             0050*  ;                XDEF	TEST
001682             0051*  ;                XDEF	ZERO
001682             0052*  ;                XDEF	COMMA
001682             0053*  ;                XDEF	BRAKET
001682             0054*  ;                XDEF	DECODE
001682             0055*  ;                XDEF	PUSHS
001682             0056*  ;                XDEF	POPS
001682             0057*  ;                XDEF	SEARCH
001682             0058*  ;                XDEF	SCP
001682             0059*  ;                XDEF	LETARR
001682             0060*  ;
001682             0061*  ;                XREF	MUL16
001682             0062*  ;                XREF	ERROR_
001682             0063*  ;                XREF	SYNTAX
001682             0064*  ;                XREF	CHANEL
001682             0065*  ;                XREF	CHNL
001682             0066*  ;                XREF	STOREN
001682             0067*  ;                XREF	STORE4
001682             0068*  ;                XREF	STORE5
001682             0069*  ;                XREF	STACCS
001682             0070*  ;                XREF	CHECK
001682             0071*  ;                XREF	USR
001682             0072*  ;                XREF	VAR_
001682             0073*  ;                XREF	FN
001682             0074*  ;                XREF	XEQ
001682             0075*  ;                XREF	NXT
001682             0076*  ;                XREF	X14OR5
001682             0077*  ;                XREF	MODIFY
001682             0078*  ;                XREF	MODIFS
001682             0079*  ;                XREF	TERMQ
001682             0080*  ;
001682             0081*  ;                XREF	GETVAR
001682             0082*  ;                XREF	LEXAN2
001682             0083*  ;                XREF	RANGE
001682             0084*  ;                XREF	GETTOP
001682             0085*  ;
001682             0086*  ;                XREF	STAVAR
001682             0087*  ;                XREF	PAGE_
001682             0088*  ;                XREF	LOMEM
001682             0089*  ;                XREF	HIMEM
001682             0090*  ;                XREF	RANDOM
001682             0091*  ;                XREF	COUNT
001682             0092*  ;                XREF	LISTON
001682             0093*  ;                XREF	PC
001682             0094*  ;                XREF	ERL
001682             0095*  ;                XREF	ERR
001682             0096*  ;                XREF	ACCS
001682             0097*  ;                XREF	ERRTXT
001682             0098*  ;                XREF	KEYWDS
001682             0099*  ;                XREF	KEYWDL
001682             0100*  ;                XREF	FREE
001682             0101*  ;                XREF	BUFFER
001682             0102*  ;
001682             0103*  ;                XREF	OSRDCH
001682             0104*  ;                XREF	OSOPEN
001682             0105*  ;                XREF	OSBGET
001682             0106*  ;                XREF	OSSTAT
001682             0107*  ;                XREF	GETCSR
001682             0108*  ;                XREF	GETIME
001682             0109*  ;                XREF	GETIMS
001682             0110*  ;                XREF	GETEXT
001682             0111*  ;                XREF	GETPTR
001682             0112*  ;                XREF	OSKEY
001682             0113*  ;
001682             0114*  ;                XREF	POINT
001682             0115*  ;                XREF	ADVAL
001682             0116*  ;                XREF	TINTFN
001682             0117*  ;                XREF	MODEFN
001682             0118*  ;                XREF	WIDFN
001682             0119*  ;
001682             0120*  ;                XREF	FPP
001682             0121*  ;
001682             0122*  FUNTOK:         EQU	8DH		;1st FUNCTION TOKEN
001682             0123*  TMOD:           EQU	83H
001682             0124*  TLEN:           EQU	0A9H
001682             0125*  ; TTO:            EQU	0B8H	; IN main.asm
001682             0126*  ; TDIM:           EQU	0DEH	; IN main.asm
001682             0127*  TEND:           EQU	0E0H
001682             0128*  TMODE:          EQU	0EBH
001682             0129*  TREPORT:        EQU	0F6H
001682             0130*  TWIDTH:         EQU	0FEH
001682             0131*  TTINT:          EQU	0AH
001682             0132*  ; TBY:            EQU	0FH	; IN main.asm
001682             0133*  ;
001682             0134*  ;TABLE OF ADDRESSES FOR FUNCTIONS:
001682             0135*  ;
001682 60 1F       0136*  FUNTBL:         DW	DECODE		;Line number
001684 5B 1B       0137*                  DW	OPENIN		;OPENIN
001686 78 1B       0138*                  DW	PTRev		;PTR
001688 2D 1B       0139*                  DW	PAGEVev		;PAGE
00168A 80 1B       0140*                  DW	TIMEVev		;TIME
00168C 23 1B       0141*                  DW	LOMEMVev		;LOMEM
00168E 28 1B       0142*                  DW	HIMEMVev		;HIMEM
001690 CC 1B       0143*                  DW	ABSev		;ABS
001692 08 1C       0144*                  DW	ACSev		;ACS
001694 53 02       0145*                  DW	ADVAL		;ADVAL
001696 10 1B       0146*                  DW	ASC		;ASC
001698 00 1C       0147*                  DW	ASNev		;ASN
00169A 04 1C       0148*                  DW	ATNev		;ATN
00169C EC 1A       0149*                  DW	BGET		;BGET
00169E EC 1B       0150*                  DW	COSev		;COS
0016A0 4B 1B       0151*                  DW	COUNTV		;COUNT
0016A2 D4 1B       0152*                  DW	DEGev		;DEG
0016A4 41 1B       0153*                  DW	ERLV		;ERL
0016A6 46 1B       0154*                  DW	ERRV		;ERR
0016A8 2C 1C       0155*                  DW	EVAL_		;EVAL_
0016AA F4 1B       0156*                  DW	EXPev		;EXP
0016AC 70 1B       0157*                  DW	EXTev		;EXT
0016AE F8 1F       0158*                  DW	ZERO		;FALSE
0016B0 E3 29       0159*                  DW	FN		;FN
0016B2 FA 1A       0160*                  DW	GET		;GET
0016B4 F5 1A       0161*                  DW	INKEY		;INKEY
0016B6 A5 1D       0162*                  DW	INSTR		;INSTR(
0016B8 E0 1B       0163*                  DW	INT_ev		;INT_
0016BA 1D 1B       0164*                  DW	LEN		;LEN
0016BC F8 1B       0165*                  DW	LNev		;LN
0016BE FC 1B       0166*                  DW	LOGev		;LOG
0016C0 D0 1B       0167*                  DW	CPL_ev		;NOT
0016C2 58 1B       0168*                  DW	OPENUP		;OPENUP
0016C4 56 1B       0169*                  DW	OPENOT		;OPENOUT
0016C6 C8 1B       0170*                  DW	PIev		;PI
0016C8 20 02       0171*                  DW	POINT		;POINT(
0016CA D5 1A       0172*                  DW	POS		;POS
0016CC D8 1B       0173*                  DW	RADev		;RAD
0016CE 59 1C       0174*                  DW	RND		;RND
0016D0 DC 1B       0175*                  DW	SGNev		;SGN
0016D2 F0 1B       0176*                  DW	SINev		;SIN
0016D4 E4 1B       0177*                  DW	SQRev		;SQR
0016D6 E8 1B       0178*                  DW	TANev		;TAN
0016D8 32 1B       0179*                  DW	TOPV		;TO(P)
0016DA BD 1B       0180*                  DW	TRUEev		;TRUE
0016DC 3F 30       0181*                  DW	USR		;USR
0016DE 1F 1C       0182*                  DW	VALev		;VAL
0016E0 DB 1A       0183*                  DW	VPOS		;VPOS
0016E2 26 1E       0184*                  DW	CHRS		;CHR$
0016E4 2D 1E       0185*                  DW	GETS		;GET$
0016E6 8E 1E       0186*                  DW	INKEYS		;INKEY$
0016E8 CE 1E       0187*                  DW	LEFTS		;LEFT$(
0016EA 9E 1E       0188*                  DW	MIDS		;MID$(
0016EC FC 1E       0189*                  DW	RIGHTS		;RIGHT$(
0016EE B8 1F       0190*                  DW	STRS		;STR$
0016F0 26 1F       0191*                  DW	STRING_		;STRING_$(
0016F2 E0 1A       0192*                  DW	EOF		;EOF
0016F4 E9 1C       0193*                  DW	SUM		;SUM
0016F6             0194*  ;
0016F6             0195*  FUNTBL_END:     EQU	$
0016F6             0196*  ; TCMD:           EQU	FUNTOK+(FUNTBL_END-FUNTBL)/2
0016F6             0197*  TCMD:           EQU	FUNTBL_END-FUNTBL/2+FUNTOK
0016F6             0198*  ;
0016F6             0199*  ; CR             EQU	0DH
0016F6             0200*  ; LF             EQU	0AH
0016F6             0201*  AND_:           EQU	80H
0016F6             0202*  DIV_:           EQU	81H
0016F6             0203*  EOR:            EQU	82H
0016F6             0204*  MOD_:           EQU	83H
0016F6             0205*  OR_:            EQU	84H
0016F6             0206*  ;
0016F6 AB 1B       0207*  SOPTBL:         DW	SLE		;<= (STRING)
0016F8 B3 1B       0208*                  DW	SNE		;<>
0016FA A5 1B       0209*                  DW	SGE		;>=
0016FC 98 1B       0210*                  DW	SLT		;<
0016FE B9 1B       0211*                  DW	SEQ		;=
001700 9E 1B       0212*                  DW	SGT		;>
001702             0213*  ;
001702             0214*  ;EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
001702             0215*  ; Expression type is returned in A'F':
001702             0216*  ; Numeric - A' bit 7=0, F' sign bit cleared.
001702             0217*  ; String - A' bit 7=1, F' sign bit set.
001702             0218*  ;Floating-point or integer result returned in HLH'L'C
001702             0219*  ; Integer result denoted by C=0 and HLH'L' non-zero.
001702             0220*  ;String result returned in string accumulator, DE set.
001702             0221*  ;
001702             0222*  ;Hierarchy is: (1) Variables, functions,
001702             0223*  ; constants, bracketed expressions.
001702             0224*  ; (2) ^
001702             0225*  ; (3) * / MOD DIV
001702             0226*  ; (4) + -
001702             0227*  ; (5) = <> <= >= > <
001702             0228*  ; (6) AND
001702             0229*  ; (7) EOR OR
001702             0230*  ;
001702 CD 17 17    0231*  EXPR:           CALL	EXPR1		;GET FIRST OPERAND
001705 FE 82       0232*  EXPR0A:         CP	EOR		;CHECK OPERATOR
001707 28 03       0233*                  JR	Z,EXPR0B
001709 FE 84       0234*                  CP	OR_
00170B C0          0235*                  RET	NZ
00170C CD 73 20    0236*  EXPR0B:         CALL	SAVEev		;SAVE FIRST OPERAND
00170F CD 17 17    0237*                  CALL	EXPR1		;GET SECOND OPERAND
001712 CD 83 20    0238*                  CALL	DOIT		;DO OPERATION
001715 18 EE       0239*                  JR	EXPR0A		;CONTINUE
001717             0240*  ;
001717 CD 28 17    0241*  EXPR1:          CALL	EXPR2
00171A FE 80       0242*  EXPR1A:         CP	AND_
00171C C0          0243*                  RET	NZ
00171D CD 73 20    0244*                  CALL	SAVEev
001720 CD 28 17    0245*                  CALL	EXPR2
001723 CD 83 20    0246*                  CALL	DOIT
001726 18 F2       0247*                  JR	EXPR1A
001728             0248*  ;
001728 CD A0 17    0249*  EXPR2:          CALL	EXPR3ev
00172B CD 6A 20    0250*                  CALL	RELOPQ
00172E C0          0251*                  RET	NZ
00172F 47          0252*                  LD	B,A
001730 FD 23       0253*                  INC	IY		;BUMP OVER OPERATOR
001732 CD 0B 45    0254*                  CALL	NXT
001735 CD 6A 20    0255*                  CALL	RELOPQ		;COMPOUND OPERATOR?
001738 20 07       0256*                  JR	NZ,EXPR2B
00173A FD 23       0257*                  INC	IY
00173C B8          0258*                  CP	B
00173D 28 1C       0259*                  JR	Z,SHIFT		;SHIFT | ==
00173F 80          0260*                  ADD	A,B
001740 47          0261*                  LD	B,A
001741 78          0262*  EXPR2B:         LD	A,B
001742 08          0263*                  EX	AF,AF'
001743 FA 73 17    0264*                  JP	M,EXPR2S
001746 08          0265*                  EX	AF,AF'
001747 D6 04       0266*                  SUB	4
001749 FE 3A       0267*                  CP	'>'-4
00174B 20 02       0268*                  JR	NZ,EXPR2C
00174D C6 02       0269*                  ADD	A,2
00174F E6 0F       0270*  EXPR2C:         AND	0FH
001751 CD 77 20    0271*  EXPR2D:         CALL	SAVE1
001754 CD A0 17    0272*                  CALL	EXPR3ev
001757 CD 83 20    0273*                  CALL	DOIT		;Must NOT be "JP DOIT"
00175A C9          0274*                  RET
00175B             0275*  ;
00175B FE 3D       0276*  SHIFT:          CP	'='
00175D 28 E2       0277*                  JR	Z,EXPR2B	;==
00175F CD 0B 45    0278*                  CALL	NXT
001762 CD 6A 20    0279*                  CALL	RELOPQ
001765 20 07       0280*                  JR	NZ,SHIFT1
001767 B8          0281*                  CP	B
001768 C2 E0 25    0282*                  JP	NZ,SYNTAX
00176B FD 23       0283*                  INC	IY
00176D 04          0284*                  INC	B
00176E 78          0285*  SHIFT1:         LD	A,B
00176F D6 12       0286*                  SUB	18
001771 18 DE       0287*                  JR	EXPR2D
001773             0288*  ;
001773 08          0289*  EXPR2S:         EX	AF,AF'
001774 3D          0290*                  DEC	A
001775 E6 07       0291*                  AND	7
001777 CD 19 20    0292*                  CALL	PUSHS		;SAVE STRING ON STACK
00177A F5          0293*                  PUSH	AF		;SAVE OPERATOR
00177B CD A0 17    0294*                  CALL	EXPR3ev		;SECOND STRING
00177E 08          0295*                  EX	AF,AF'
00177F F2 6E 18    0296*                  JP	P,MISMATev
001782 F1          0297*                  POP	AF
001783 4B          0298*                  LD	C,E		;LENGTH OF STRING #2
001784 D1          0299*                  POP	DE
001785 21 00 00    0300*                  LD	HL,0
001788 39          0301*                  ADD	HL,SP
001789 43          0302*                  LD	B,E		;LENGTH OF STRING #1
00178A D5          0303*                  PUSH	DE
00178B 11 00 52    0304*                  LD	DE,ACCS
00178E EB          0305*                  EX	DE,HL
00178F CD BB 20    0306*                  CALL	DISPT2
001792 D1          0307*                  POP	DE
001793 EB          0308*                  EX	DE,HL
001794 26 00       0309*                  LD	H,0
001796 39          0310*                  ADD	HL,SP
001797 F9          0311*                  LD	SP,HL
001798 EB          0312*                  EX	DE,HL
001799 AF          0313*                  XOR	A		;NUMERIC MARKER
00179A 4F          0314*                  LD	C,A		;INTEGER MARKER
00179B 08          0315*                  EX	AF,AF'
00179C FD 7E 00    0316*                  LD	A,(IY)
00179F C9          0317*                  RET
0017A0             0318*  ;
0017A0 CD EE 17    0319*  EXPR3ev:          CALL	EXPR4
0017A3 FE 2D       0320*  EXPR3A:         CP	'-'
0017A5 28 08       0321*                  JR	Z,EXPR3B
0017A7 FE 2B       0322*                  CP	'+'
0017A9 C0          0323*                  RET	NZ
0017AA 08          0324*                  EX	AF,AF'
0017AB FA BA 17    0325*                  JP	M,EXPR3S
0017AE 08          0326*                  EX	AF,AF'
0017AF CD 73 20    0327*  EXPR3B:         CALL	SAVEev
0017B2 CD EE 17    0328*                  CALL	EXPR4
0017B5 CD 83 20    0329*                  CALL	DOIT
0017B8 18 E9       0330*                  JR	EXPR3A
0017BA             0331*  ;
0017BA 08          0332*  EXPR3S:         EX	AF,AF'
0017BB FD 23       0333*                  INC	IY		;BUMP PAST '+'
0017BD CD 19 20    0334*                  CALL	PUSHS		;SAVE STRING ON STACK
0017C0 CD EE 17    0335*                  CALL	EXPR4		;SECOND STRING
0017C3 08          0336*                  EX	AF,AF'
0017C4 F2 6E 18    0337*                  JP	P,MISMATev
0017C7 4B          0338*                  LD	C,E		;C=LENGTH
0017C8 D1          0339*                  POP	DE
0017C9 D5          0340*                  PUSH	DE
0017CA 21 00 52    0341*                  LD	HL,ACCS
0017CD 54          0342*                  LD	D,H
0017CE 79          0343*                  LD	A,C
0017CF B7          0344*                  OR	A
0017D0 28 0E       0345*                  JR	Z,EXP3S3
0017D2 45          0346*                  LD	B,L
0017D3 6F          0347*                  LD	L,A		;SOURCE
0017D4 83          0348*                  ADD	A,E
0017D5 5F          0349*                  LD	E,A		;DESTINATION
0017D6 3E 13       0350*                  LD	A,19
0017D8 38 6B       0351*                  JR	C,ERROR2ev	;"String too long"
0017DA D5          0352*                  PUSH	DE
0017DB 1D          0353*                  DEC	E
0017DC 2D          0354*                  DEC	L
0017DD ED B8       0355*                  LDDR			;COPY
0017DF D1          0356*                  POP	DE
0017E0 D9          0357*  EXP3S3:         EXX
0017E1 C1          0358*                  POP	BC
0017E2 CD 37 20    0359*                  CALL	POPS		;RESTORE FROM STACK
0017E5 D9          0360*                  EXX
0017E6 F6 80       0361*                  OR	80H		;FLAG STRING
0017E8 08          0362*                  EX	AF,AF'
0017E9 FD 7E 00    0363*                  LD	A,(IY)
0017EC 18 B5       0364*                  JR	EXPR3A
0017EE             0365*  ;
0017EE CD 14 18    0366*  EXPR4:          CALL	EXPR5
0017F1 FE 2A       0367*  EXPR4A:         CP	'*'
0017F3 28 0B       0368*                  JR	Z,EXPR4B
0017F5 FE 2F       0369*                  CP	'/'
0017F7 28 07       0370*                  JR	Z,EXPR4B
0017F9 FE 83       0371*                  CP	MOD_
0017FB 28 03       0372*                  JR	Z,EXPR4B
0017FD FE 81       0373*                  CP	DIV_
0017FF C0          0374*                  RET	NZ
001800 CD 73 20    0375*  EXPR4B:         CALL	SAVEev
001803 CD 14 18    0376*                  CALL	EXPR5
001806 CD 83 20    0377*                  CALL	DOIT
001809 18 E6       0378*                  JR	EXPR4A
00180B             0379*  ;
00180B 7B          0380*  EXPR45:         LD	A,E
00180C FE 2B       0381*                  CP	'+'
00180E 28 DE       0382*                  JR	Z,EXPR4
001810 FE 2D       0383*                  CP	'-'
001812 28 DA       0384*                  JR	Z,EXPR4
001814 CD D0 18    0385*  EXPR5:          CALL	ITEM
001817 B7          0386*                  OR	A		;TEST TYPE
001818 08          0387*                  EX	AF,AF'		;SAVE TYPE
001819 CD 0B 45    0388*  EXPR5A:         CALL	NXT
00181C FE 5E       0389*                  CP	'^'
00181E C0          0390*                  RET	NZ
00181F CD 73 20    0391*                  CALL	SAVEev
001822 CD D0 18    0392*                  CALL	ITEM
001825 B7          0393*                  OR	A
001826 08          0394*                  EX	AF,AF'
001827 CD 83 20    0395*                  CALL	DOIT
00182A 18 ED       0396*                  JR	EXPR5A
00182C             0397*  ;
00182C CD 02 17    0398*  EXPRN:          CALL	EXPR
00182F 08          0399*                  EX	AF,AF'
001830 F0          0400*                  RET	P
001831 18 3B       0401*                  JR	MISMATev
001833             0402*  ;
001833 CD 02 17    0403*  EXPRI:          CALL	EXPR
001836 08          0404*                  EX	AF,AF'
001837 F2 17 1C    0405*                  JP	P,SFIX
00183A 18 32       0406*                  JR	MISMATev
00183C             0407*  ;
00183C CD 02 17    0408*  EXPRS:          CALL	EXPR
00183F 08          0409*                  EX	AF,AF'
001840 F8          0410*                  RET	M
001841 18 2B       0411*                  JR	MISMATev
001843             0412*  ;
001843 3E 1C       0413*  BADHEX:         LD	A,28
001845 C3 44 3F    0414*  ERROR2ev:         JP	ERROR_		;"Bad HEX or binary"
001848             0415*  ;
001848 D9          0416*  NEGATEev:         EXX
001849 7C          0417*                  LD	A,H
00184A 2F          0418*                  CPL
00184B 67          0419*                  LD	H,A
00184C 7D          0420*                  LD	A,L
00184D 2F          0421*                  CPL
00184E 6F          0422*                  LD	L,A
00184F D9          0423*                  EXX
001850 7C          0424*                  LD	A,H
001851 2F          0425*                  CPL
001852 67          0426*                  LD	H,A
001853 7D          0427*                  LD	A,L
001854 2F          0428*                  CPL
001855 6F          0429*                  LD	L,A
001856 D9          0430*  ADD1ev:           EXX
001857 23          0431*                  INC	HL
001858 7C          0432*                  LD	A,H
001859 B5          0433*                  OR	L
00185A D9          0434*                  EXX
00185B 3E 00       0435*                  LD	A,0		;NUMERIC MARKER
00185D C0          0436*                  RET	NZ
00185E 23          0437*                  INC	HL
00185F C9          0438*                  RET
001860             0439*  ;
001860 CD D0 18    0440*  ITEMI:          CALL	ITEM
001863 B7          0441*                  OR	A
001864 F2 17 1C    0442*                  JP	P,SFIX
001867 18 05       0443*                  JR	MISMATev
001869             0444*  ;
001869 CD D0 18    0445*  ITEMS:          CALL	ITEM
00186C B7          0446*                  OR	A
00186D F8          0447*                  RET	M
00186E 3E 06       0448*  MISMATev:         LD	A,6
001870 18 D3       0449*                  JR	ERROR2ev		;"Type mismatch"
001872             0450*  ;
001872 CD 02 17    0451*  ITEM1:          CALL	EXPR		;BRACKETED EXPR
001875 CD AE 20    0452*                  CALL	BRAKET
001878 08          0453*                  EX	AF,AF'
001879 C9          0454*                  RET
00187A             0455*  ;
00187A CD D0 18    0456*  ITEMN:          CALL	ITEM
00187D B7          0457*                  OR	A
00187E F0          0458*                  RET	P
00187F 18 ED       0459*                  JR	MISMATev
001881             0460*  ;
001881             0461*  ;HEX - Get hexadecimal constant.
001881             0462*  ;   Inputs: ASCII string at (IY)
001881             0463*  ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
001881             0464*  ;           IY updated (points to delimiter)
001881             0465*  ;
001881 CD F8 1F    0466*  HEXev:            CALL	ZERO
001884 CD 57 20    0467*                  CALL	HEXDIG
001887 38 BA       0468*                  JR	C,BADHEX
001889 FD 23       0469*  HEX1:           INC	IY
00188B E6 0F       0470*                  AND	0FH
00188D 06 04       0471*                  LD	B,4
00188F D9          0472*  HEX2:           EXX
001890 29          0473*                  ADD	HL,HL
001891 D9          0474*                  EXX
001892 ED 6A       0475*                  ADC	HL,HL
001894 10 F9       0476*                  DJNZ	HEX2
001896 D9          0477*                  EXX
001897 B5          0478*                  OR	L
001898 6F          0479*                  LD	L,A
001899 D9          0480*                  EXX
00189A CD 57 20    0481*                  CALL	HEXDIG
00189D 30 EA       0482*                  JR	NC,HEX1
00189F AF          0483*                  XOR	A
0018A0 C9          0484*                  RET
0018A1             0485*  ;
0018A1             0486*  ;BIN - Get binary constant.
0018A1             0487*  ;   Inputs: ASCII string at (IY)
0018A1             0488*  ;  Outputs: Integer result in H'L'HL, C=0, A=0.
0018A1             0489*  ;           IY updated (points to delimiter)
0018A1             0490*  ;
0018A1 CD F8 1F    0491*  BIN:            CALL	ZERO
0018A4 CD 4A 20    0492*                  CALL	BINDIG
0018A7 38 9A       0493*                  JR	C,BADHEX
0018A9 FD 23       0494*  BIN1:           INC	IY
0018AB CB 1F       0495*                  RR	A
0018AD D9          0496*                  EXX
0018AE ED 6A       0497*                  ADC	HL,HL
0018B0 D9          0498*                  EXX
0018B1 ED 6A       0499*                  ADC	HL,HL
0018B3 CD 4A 20    0500*                  CALL	BINDIG
0018B6 30 F1       0501*                  JR	NC,BIN1
0018B8 AF          0502*                  XOR	A
0018B9 C9          0503*                  RET
0018BA             0504*  ;
0018BA             0505*  ;MINUS - Unary minus.
0018BA             0506*  ;   Inputs: IY = text pointer
0018BA             0507*  ;  Outputs: Numeric result, same type as argument.
0018BA             0508*  ;           Result in H'L'HLC
0018BA             0509*  ;
0018BA CD 7A 18    0510*  MINUS:          CALL	ITEMN
0018BD 0D          0511*  MINUS0:         DEC	C
0018BE 0C          0512*                  INC	C
0018BF 28 87       0513*                  JR	Z,NEGATEev	;ZERO/INTEGER
0018C1 7C          0514*                  LD	A,H
0018C2 EE 80       0515*                  XOR	80H		;CHANGE SIGN (FP)
0018C4 67          0516*                  LD	H,A
0018C5 AF          0517*                  XOR	A		;NUMERIC MARKER
0018C6 C9          0518*                  RET
0018C7             0519*  ;
0018C7 CD D6 25    0520*  ADDROF:         CALL	VAR_
0018CA E5          0521*                  PUSH	HL
0018CB D9          0522*                  EXX
0018CC E1          0523*                  POP	HL
0018CD C3 50 1B    0524*                  JP	COUNT1
0018D0             0525*  ;
0018D0             0526*  ;ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
0018D0             0527*  ;Item type is returned in A: Bit 7=0 numeric.
0018D0             0528*  ; Bit 7=1 string.
0018D0             0529*  ;Numeric item returned in HLH'L'C.
0018D0             0530*  ;String item returned in string accumulator,
0018D0             0531*  ; DE addresses byte after last (E=length).
0018D0             0532*  ;
0018D0 CD 86 32    0533*  ITEM:           CALL	CHECK
0018D3 CD 0B 45    0534*                  CALL	NXT
0018D6 FD 23       0535*                  INC	IY
0018D8 FE 8D       0536*                  CP	FUNTOK
0018DA 38 08       0537*                  JR	C,ITEM0
0018DC FE C7       0538*                  CP	TCMD
0018DE DA C1 20    0539*                  JP	C,DISPATev	;FUNCTIONS
0018E1 C3 30 1A    0540*                  JP	EXTRASev		;DIM, END, MODE, REPORT$, WIDTH
0018E4             0541*  ;
0018E4 FE 3A       0542*  ITEM0:          CP	':'
0018E6 30 25       0543*                  JR	NC,ITEM2	;VARIABLES
0018E8 FE 30       0544*                  CP	'0'
0018EA 30 7B       0545*                  JR	NC,CONev		;NUMERIC CONSTANT
0018EC FE 28       0546*                  CP	'('
0018EE 28 82       0547*                  JR	Z,ITEM1		;EXPRESSION
0018F0 FE 2D       0548*                  CP	'-'
0018F2 28 C6       0549*                  JR	Z,MINUS		;UNARY MINUS
0018F4 FE 2B       0550*                  CP	'+'
0018F6 28 82       0551*                  JR	Z,ITEMN		;UNARY PLUS
0018F8 FE 2E       0552*                  CP	'.'
0018FA 28 6B       0553*                  JR	Z,CONev		;NUMERIC CONSTANT
0018FC FE 26       0554*                  CP	'&'
0018FE 28 81       0555*                  JR	Z,HEXev		;HEX CONSTANT
001900 FE 25       0556*                  CP	'%'
001902 28 9D       0557*                  JR	Z,BIN		;BINARY CONSTANT
001904 FE 22       0558*                  CP	'"'
001906 28 72       0559*                  JR	Z,CONS		;STRING CONSTANT
001908 FE 0A       0560*                  CP	TTINT
00190A CA D0 1A    0561*                  JP	Z,TINTev		;TINT FUNCTION
00190D FE 83       0562*  ITEM2:          CP	TMOD
00190F CA 4D 1D    0563*                  JP	Z,MODFUN	;MOD
001912 FE 5E       0564*                  CP	'^'
001914 28 B1       0565*                  JR	Z,ADDROF	;^ OPERATOR
001916 FD 2B       0566*                  DEC	IY
001918 CD E3 41    0567*                  CALL	GETVAR		;VARIABLE
00191B 20 2F       0568*                  JR	NZ,NOSUCHev
00191D CB 77       0569*                  BIT	6,A
00191F 20 7E       0570*                  JR	NZ,ARRAYev
001921 B7          0571*                  OR	A
001922 FA 0E 1A    0572*                  JP	M,LOADS		;STRING VARIABLE
001925 CB 57       0573*  LOADN:          BIT	2,A
001927 0E 00       0574*                  LD	C,0
001929 28 16       0575*                  JR	Z,LOAD1		;BYTE VARIABLE
00192B CB 47       0576*                  BIT	0,A
00192D 28 03       0577*                  JR	Z,LOAD4		;INTEGER VARIABLE
00192F DD 4E 04    0578*  LOAD5:          LD	C,(IX+4)
001932 D9          0579*  LOAD4:          EXX
001933 DD 6E 00    0580*                  LD	L,(IX+0)
001936 DD 66 01    0581*                  LD	H,(IX+1)
001939 D9          0582*                  EXX
00193A DD 6E 02    0583*                  LD	L,(IX+2)
00193D DD 66 03    0584*                  LD	H,(IX+3)
001940 C9          0585*                  RET
001941             0586*  ;
001941 21 00 00    0587*  LOAD1:          LD	HL,0
001944 D9          0588*                  EXX
001945 26 00       0589*                  LD	H,0
001947 DD 6E 00    0590*                  LD	L,(IX+0)
00194A D9          0591*                  EXX
00194B C9          0592*                  RET
00194C             0593*  ;
00194C DA E0 25    0594*  NOSUCHev:         JP	C,SYNTAX
00194F 3A FE 54    0595*                  LD	A,(LISTON)
001952 CB 6F       0596*                  BIT	5,A
001954 3E 1A       0597*                  LD	A,26
001956 20 36       0598*                  JR	NZ,ERROR0ev	;"No such variable"
001958 FD 23       0599*  NOS1:           INC	IY
00195A CD EF 43    0600*                  CALL	RANGE
00195D 30 F9       0601*                  JR	NC,NOS1
00195F DD 21 40 54 0602*                  LD	IX,PC
001963 AF          0603*                  XOR	A
001964 4F          0604*                  LD	C,A
001965 18 CB       0605*                  JR	LOAD4
001967             0606*  ;
001967             0607*  ;CON - Get unsigned numeric constant from ASCII string.
001967             0608*  ;   Inputs: ASCII string at (IY-1)
001967             0609*  ;  Outputs: Variable-type result in HLH'L'C
001967             0610*  ;           IY updated (points to delimiter)
001967             0611*  ;           A7 = 0 (numeric marker)
001967             0612*  ;
001967 FD 2B       0613*  CONev:            DEC	IY
001969 FD E5       0614*                  PUSH	IY
00196B DD E1       0615*                  POP	IX
00196D 3E 24       0616*                  LD	A,36
00196F CD 15 45    0617*                  CALL	FPP
001972 38 1A       0618*                  JR	C,ERROR0ev
001974 DD E5       0619*                  PUSH	IX
001976 FD E1       0620*                  POP	IY
001978 AF          0621*                  XOR	A
001979 C9          0622*                  RET
00197A             0623*  ;
00197A             0624*  ;CONS - Get string constant from ASCII string.
00197A             0625*  ;   Inputs: ASCII string at (IY)
00197A             0626*  ;  Outputs: Result in string accumulator.
00197A             0627*  ;           D = MS byte of ACCS, E = string length
00197A             0628*  ;           A7 = 1 (string marker)
00197A             0629*  ;           IY updated
00197A             0630*  ;
00197A 11 00 52    0631*  CONS:           LD	DE,ACCS
00197D FD 7E 00    0632*  CONS3:          LD	A,(IY)
001980 FD 23       0633*                  INC	IY
001982 FE 22       0634*                  CP	'"'
001984 28 0B       0635*                  JR	Z,CONS2
001986 12          0636*  CONS1:          LD	(DE),A
001987 1C          0637*                  INC	E
001988 FE 0D       0638*                  CP	CR
00198A 20 F1       0639*                  JR	NZ,CONS3
00198C 3E 09       0640*                  LD	A,9
00198E C3 44 3F    0641*  ERROR0ev:         JP	ERROR_		;"Missing """
001991             0642*  ;
001991 FD 7E 00    0643*  CONS2:          LD	A,(IY)
001994 FE 22       0644*                  CP	'"'
001996 FD 23       0645*                  INC	IY
001998 28 EC       0646*                  JR	Z,CONS1
00199A FD 2B       0647*                  DEC	IY
00199C 3E 80       0648*                  LD	A,80H		;STRING MARKER
00199E C9          0649*                  RET
00199F             0650*  ;
00199F 3E 0E       0651*  ARRAYev:          LD	A,14		;'Bad use of array'
0019A1 C3 44 3F    0652*                  JP	ERROR_
0019A4             0653*  ;
0019A4             0654*  ; ARRLEN - Get start address and number of elements of an array
0019A4             0655*  ;   Inputs: HL addresses array descriptor
0019A4             0656*  ;  Outputs: HL = address of first element
0019A4             0657*  ;           DE = total number of elements
0019A4             0658*  ;           A = 0
0019A4             0659*  ; Destroys: A,B,C,D,E,H,L,flags
0019A4             0660*  ;
0019A4 7E          0661*  ARRLEN:         LD	A,(HL)		;Number of dimensions
0019A5 23          0662*                  INC	HL
0019A6 B7          0663*                  OR	A
0019A7 28 F6       0664*                  JR	Z,ARRAYev
0019A9 11 01 00    0665*                  LD	DE,1
0019AC 4E          0666*  ARLOOP:         LD	C,(HL)
0019AD 23          0667*                  INC	HL
0019AE 46          0668*                  LD	B,(HL)		;BC = size of this dimension
0019AF 23          0669*                  INC	HL
0019B0 EB          0670*                  EX	DE,HL
0019B1 F5          0671*                  PUSH	AF
0019B2 D5          0672*                  PUSH	DE
0019B3 CD BD 36    0673*                  CALL	MUL16		;HL=HL*BC
0019B6 D1          0674*                  POP	DE
0019B7 F1          0675*                  POP	AF
0019B8 EB          0676*                  EX	DE,HL
0019B9 3D          0677*                  DEC	A
0019BA 20 F0       0678*                  JR	NZ,ARLOOP
0019BC C9          0679*                  RET
0019BD             0680*  ;
0019BD CD 0B 45    0681*  GETARR:         CALL	NXT
0019C0 CD E3 41    0682*                  CALL	GETVAR
0019C3 20 87       0683*                  JR	NZ,NOSUCHev
0019C5 CB 77       0684*                  BIT	6,A
0019C7 37          0685*                  SCF
0019C8 28 82       0686*                  JR	Z,NOSUCHev
0019CA E6 8F       0687*                  AND	8FH
0019CC 47          0688*                  LD	B,A		;Type + size
0019CD 7E          0689*  GETAR1:         LD	A,(HL)
0019CE 23          0690*                  INC	HL
0019CF 66          0691*                  LD	H,(HL)
0019D0 6F          0692*                  LD	L,A
0019D1 E6 FE       0693*                  AND	0FEH
0019D3 B4          0694*                  OR	H
0019D4 28 C9       0695*                  JR	Z,ARRAYev		;Bad use of array
0019D6 C9          0696*                  RET
0019D7             0697*  ;
0019D7 CD 0B 45    0698*  GETARB:         CALL	NXT
0019DA FE 28       0699*                  CP	'('
0019DC 20 DF       0700*                  JR	NZ,GETARR
0019DE FD 23       0701*                  INC	IY
0019E0 CD BD 19    0702*                  CALL	GETARR
0019E3 CD AE 20    0703*                  CALL	BRAKET
0019E6 C9          0704*                  RET
0019E7             0705*  ;
0019E7 CB 57       0706*  DLOADN:         BIT	2,A
0019E9 06 00       0707*                  LD	B,0
0019EB 28 16       0708*                  JR	Z,DLOAD1	;BYTE VARIABLE
0019ED CB 47       0709*                  BIT	0,A
0019EF 28 03       0710*                  JR	Z,DLOAD4	;INTEGER VARIABLE
0019F1 DD 46 04    0711*  DLOAD5:         LD	B,(IX+4)
0019F4 D9          0712*  DLOAD4:         EXX
0019F5 DD 5E 00    0713*                  LD	E,(IX+0)
0019F8 DD 56 01    0714*                  LD	D,(IX+1)
0019FB D9          0715*                  EXX
0019FC DD 5E 02    0716*                  LD	E,(IX+2)
0019FF DD 56 03    0717*                  LD	D,(IX+3)
001A02 C9          0718*                  RET
001A03             0719*  ;
001A03 11 00 00    0720*  DLOAD1:         LD	DE,0
001A06 D9          0721*                  EXX
001A07 16 00       0722*                  LD	D,0
001A09 DD 5E 00    0723*                  LD	E,(IX+0)
001A0C D9          0724*                  EXX
001A0D C9          0725*                  RET
001A0E             0726*  ;
001A0E 11 00 52    0727*  LOADS:          LD	DE,ACCS
001A11 1F          0728*                  RRA
001A12 30 10       0729*                  JR	NC,LOADS2	;FIXED STRING
001A14 CD 32 19    0730*                  CALL	LOAD4
001A17 D9          0731*                  EXX
001A18 7D          0732*                  LD	A,L
001A19 D9          0733*                  EXX
001A1A B7          0734*                  OR	A
001A1B 4F          0735*                  LD	C,A
001A1C 3E 80       0736*                  LD	A,80H		;STRING MARKER
001A1E C8          0737*                  RET	Z
001A1F 06 00       0738*                  LD	B,0
001A21 ED B0       0739*                  LDIR
001A23 C9          0740*                  RET
001A24             0741*  ;
001A24 7E          0742*  LOADS2:         LD	A,(HL)
001A25 12          0743*                  LD	(DE),A
001A26 23          0744*                  INC	HL
001A27 FE 0D       0745*                  CP	CR
001A29 3E 80       0746*  REPDUN:         LD	A,80H		;STRING MARKER
001A2B C8          0747*                  RET	Z
001A2C 1C          0748*                  INC	E
001A2D 20 F5       0749*                  JR	NZ,LOADS2
001A2F C9          0750*                  RET			;RETURN NULL STRING
001A30             0751*  ;
001A30             0752*  ; Version 5 extensions:
001A30             0753*  ;
001A30 FE EB       0754*  EXTRASev:         CP	TMODE
001A32 CA 5F 02    0755*                  JP	Z,MODEFN	;MODE
001A35 FE FE       0756*                  CP	TWIDTH
001A37 CA 69 02    0757*                  JP	Z,WIDFN		;WIDTH
001A3A FE F6       0758*                  CP	TREPORT
001A3C 28 11       0759*                  JR	Z,REPORS	;REPORT$
001A3E FE E0       0760*                  CP	TEND
001A40 28 07       0761*                  JR	Z,ENDFUN	;END
001A42 FE DE       0762*                  CP	TDIM
001A44 28 44       0763*                  JR	Z,DIMFUN	;DIM
001A46 C3 E0 25    0764*  SYNERR:         JP	SYNTAX		; 'Syntax error'
001A49             0765*  ;
001A49             0766*  ; END (function)
001A49             0767*  ;
001A49 2A E0 54    0768*  ENDFUN:         LD	HL,(FREE)
001A4C C3 50 1B    0769*                  JP	COUNT1
001A4F             0770*  ;
001A4F             0771*  ; REPORT$
001A4F             0772*  ;
001A4F FD 7E 00    0773*  REPORS:         LD	A,(IY)
001A52 FE 24       0774*                  CP	'$'
001A54 20 F0       0775*                  JR	NZ,SYNERR
001A56 FD 23       0776*                  INC	IY
001A58 2A EE 54    0777*                  LD	HL,(ERRTXT)
001A5B 11 00 52    0778*                  LD	DE,ACCS
001A5E 7E          0779*  REPCPY:         LD	A,(HL)
001A5F B7          0780*                  OR	A
001A60 28 C7       0781*                  JR	Z,REPDUN
001A62 ED A0       0782*                  LDI
001A64 FE A0       0783*                  CP	160
001A66 EA 5E 1A    0784*                  JP	PE,REPCPY
001A69 FE 0A       0785*                  CP	LF
001A6B 28 F1       0786*                  JR	Z,REPCPY
001A6D 1D          0787*                  DEC	E
001A6E E5          0788*                  PUSH	HL
001A6F 21 84 38    0789*                  LD	HL,KEYWDS
001A72 01 5B 03    0790*                  LD	BC,KEYWDL
001A75 ED B1       0791*                  CPIR
001A77 06 A0       0792*                  LD	B,160
001A79 FE 91       0793*                  CP	145
001A7B EA 7F 1A    0794*                  JP	PE,REPTOK
001A7E 04          0795*                  INC	B
001A7F 7E          0796*  REPTOK:         LD	A,(HL)
001A80 ED A0       0797*                  LDI
001A82 B8          0798*                  CP	B
001A83 EA 7F 1A    0799*                  JP	PE,REPTOK
001A86 E1          0800*                  POP	HL
001A87 1D          0801*                  DEC	E
001A88 18 D4       0802*                  JR	REPCPY
001A8A             0803*  ;
001A8A             0804*  ; DIM(array()[,sub])
001A8A             0805*  ;
001A8A CD 0B 45    0806*  DIMFUN:         CALL	NXT
001A8D FE 28       0807*                  CP	'('
001A8F 20 09       0808*                  JR	NZ,DIMF0
001A91 FD 23       0809*                  INC	IY
001A93 CD 9A 1A    0810*                  CALL	DIMF0
001A96 CD AE 20    0811*                  CALL	BRAKET
001A99 C9          0812*                  RET
001A9A             0813*  ;
001A9A CD BD 19    0814*  DIMF0:          CALL	GETARR
001A9D E5          0815*                  PUSH	HL
001A9E CD 0B 45    0816*                  CALL	NXT
001AA1 1E 00       0817*                  LD	E,0
001AA3 FE 2C       0818*                  CP	','
001AA5 20 0B       0819*                  JR	NZ,DIMF1
001AA7 FD 23       0820*                  INC	IY
001AA9 CD 33 18    0821*                  CALL	EXPRI
001AAC D9          0822*                  EXX
001AAD EB          0823*                  EX	DE,HL
001AAE 1C          0824*                  INC	E
001AAF 1D          0825*                  DEC	E
001AB0 28 19       0826*                  JR	Z,BADSUB
001AB2 E1          0827*  DIMF1:          POP	HL
001AB3 7E          0828*                  LD	A,(HL)
001AB4 23          0829*                  INC	HL
001AB5 BB          0830*                  CP	E
001AB6 38 13       0831*                  JR	C,BADSUB
001AB8 1D          0832*                  DEC	E
001AB9 FA C6 1A    0833*                  JP	M,DIMF3
001ABC 19          0834*                  ADD	HL,DE
001ABD 19          0835*                  ADD	HL,DE
001ABE 7E          0836*                  LD	A,(HL)
001ABF 23          0837*                  INC	HL
001AC0 66          0838*                  LD	H,(HL)
001AC1 6F          0839*                  LD	L,A
001AC2 2B          0840*                  DEC	HL
001AC3 C3 50 1B    0841*  DIMF2:          JP	COUNT1
001AC6 6F          0842*  DIMF3:          LD	L,A
001AC7 26 00       0843*                  LD	H,0
001AC9 18 F8       0844*                  JR	DIMF2
001ACB             0845*  ;
001ACB 3E 0F       0846*  BADSUB:         LD	A,15
001ACD C3 44 3F    0847*                  JP	ERROR_			;"Bad subscript"
001AD0             0848*  ;
001AD0             0849*  ;VARIABLE-TYPE FUNCTIONS:
001AD0             0850*  ;
001AD0             0851*  ;Result returned in HLH'L'C (floating point)
001AD0             0852*  ;Result returned in HLH'L' (C=0) (integer)
001AD0             0853*  ;Result returned in string accumulator & DE (string)
001AD0             0854*  ;All registers destroyed.
001AD0             0855*  ;IY (text pointer) updated.
001AD0             0856*  ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
001AD0             0857*  ;
001AD0             0858*  ;
001AD0             0859*  ;POS - horizontal cursor position.
001AD0             0860*  ;VPOS - vertical cursor position.
001AD0             0861*  ;EOF - return status of file.
001AD0             0862*  ;BGET - read byte from file.
001AD0             0863*  ;INKEY - as GET but wait only n centiseconds.
001AD0             0864*  ;GET - wait for keypress and return ASCII value.
001AD0             0865*  ;GET(n) - input from Z80 port n.
001AD0             0866*  ;ASC - ASCII value of string.
001AD0             0867*  ;LEN - length of string.
001AD0             0868*  ;LOMEM - location of dynamic variables.
001AD0             0869*  ;HIMEM - top of available RAM.
001AD0             0870*  ;PAGE - start of current text page.
001AD0             0871*  ;TOP - address of first free byte after program.
001AD0             0872*  ;ERL - line number where last error occurred.
001AD0             0873*  ;ERR - number of last error.
001AD0             0874*  ;COUNT - number of printing characters since CR.
001AD0             0875*  ;Results are integer numeric.
001AD0             0876*  ;
001AD0 CD 7D 05    0877*  TINTev:           CALL	TINTFN
001AD3 18 7B       0878*                  JR	COUNT1
001AD5 CD 15 02    0879*  POS:            CALL	GETCSR
001AD8 EB          0880*                  EX	DE,HL
001AD9 18 75       0881*                  JR	COUNT1
001ADB CD 15 02    0882*  VPOS:           CALL	GETCSR
001ADE 18 70       0883*                  JR	COUNT1
001AE0 CD D1 36    0884*  EOF:            CALL	CHANEL
001AE3 CD 50 12    0885*                  CALL	OSSTAT
001AE6 CA BD 1B    0886*                  JP	Z,TRUEev
001AE9 C3 F8 1F    0887*                  JP	ZERO
001AEC CD D1 36    0888*  BGET:           CALL	CHANEL		;CHANNEL NUMBER
001AEF CD 3F 12    0889*                  CALL	OSBGET
001AF2 6F          0890*                  LD	L,A
001AF3 18 59       0891*                  JR	COUNT0
001AF5 CD 8E 1E    0892*  INKEY:          CALL	INKEYS
001AF8 18 19       0893*                  JR	ASC0
001AFA CD 0B 45    0894*  GET:            CALL	NXT
001AFD FE 28       0895*                  CP	'('
001AFF 20 0A       0896*                  JR	NZ,GET0
001B01 CD 60 18    0897*                  CALL	ITEMI		;PORT ADDRESS
001B04 D9          0898*                  EXX
001B05 44          0899*                  LD	B,H
001B06 4D          0900*                  LD	C,L
001B07 ED 68       0901*                  IN	L,(C)		;INPUT FROM PORT BC
001B09 18 43       0902*                  JR	COUNT0
001B0B CD 2D 1E    0903*  GET0:           CALL	GETS
001B0E 18 08       0904*                  JR	ASC1
001B10 CD 69 18    0905*  ASC:            CALL	ITEMS
001B13 AF          0906*  ASC0:           XOR	A
001B14 BB          0907*                  CP	E
001B15 CA BD 1B    0908*                  JP	Z,TRUEev		;NULL STRING
001B18 2A 00 52    0909*  ASC1:           LD	HL,(ACCS)
001B1B 18 31       0910*                  JR	COUNT0
001B1D CD 69 18    0911*  LEN:            CALL	ITEMS
001B20 EB          0912*                  EX	DE,HL
001B21 18 2B       0913*                  JR	COUNT0
001B23 2A DE 54    0914*  LOMEMVev:         LD	HL,(LOMEM)
001B26 18 28       0915*                  JR	COUNT1
001B28 2A E2 54    0916*  HIMEMVev:         LD	HL,(HIMEM)
001B2B 18 23       0917*                  JR	COUNT1
001B2D 2A DC 54    0918*  PAGEVev:          LD	HL,(PAGE_)
001B30 18 1E       0919*                  JR	COUNT1
001B32 FD 7E 00    0920*  TOPV:           LD	A,(IY)
001B35 FD 23       0921*                  INC	IY		;SKIP "P"
001B37 FE 50       0922*                  CP	'P'
001B39 C2 E0 25    0923*                  JP	NZ,SYNTAX	;"Syntax Error"
001B3C CD 25 40    0924*                  CALL	GETTOP
001B3F 18 0F       0925*                  JR	COUNT1
001B41 2A F2 54    0926*  ERLV:           LD	HL,(ERL)
001B44 18 0A       0927*                  JR	COUNT1
001B46 2A FD 54    0928*  ERRV:           LD	HL,(ERR)
001B49 18 03       0929*                  JR	COUNT0
001B4B 2A FB 54    0930*  COUNTV:         LD	HL,(COUNT)
001B4E 26 00       0931*  COUNT0:         LD	H,0
001B50 D9          0932*  COUNT1:         EXX
001B51 AF          0933*                  XOR	A
001B52 4F          0934*                  LD	C,A		;INTEGER MARKER
001B53 67          0935*                  LD	H,A
001B54 6F          0936*                  LD	L,A
001B55 C9          0937*                  RET
001B56             0938*  ;
001B56             0939*  ;OPENIN - Open a file for reading.
001B56             0940*  ;OPENOUT - Open a file for writing.
001B56             0941*  ;OPENUP - Open a file for reading or writing.
001B56             0942*  ;Result is integer channel number (0 if error)
001B56             0943*  ;
001B56 AF          0944*  OPENOT:         XOR	A
001B57 21          0945*                  DB	21H		;SKIP NEXT 2 BYTES
001B58 3E 02       0946*  OPENUP:         LD	A,2
001B5A 21          0947*                  DB	21H		;SKIP NEXT 2 BYTES
001B5B 3E 01       0948*  OPENIN:         LD	A,1
001B5D F5          0949*                  PUSH	AF		;SAVE OPEN TYPE
001B5E CD 69 18    0950*                  CALL	ITEMS		;FILENAME
001B61 3E 0D       0951*                  LD	A,CR
001B63 12          0952*                  LD	(DE),A
001B64 F1          0953*                  POP	AF		;RESTORE OPEN TYPE
001B65 C6 FF       0954*                  ADD	A,-1		;AFFECT FLAGS
001B67 21 00 52    0955*                  LD	HL,ACCS
001B6A CD 28 12    0956*                  CALL	OSOPEN
001B6D 6F          0957*                  LD	L,A
001B6E 18 DE       0958*                  JR	COUNT0
001B70             0959*  ;
001B70             0960*  ;EXT - Return length of file.
001B70             0961*  ;PTR - Return current file pointer.
001B70             0962*  ;Results are integer numeric.
001B70             0963*  ;
001B70 CD D1 36    0964*  EXTev:            CALL	CHANEL
001B73 CD 91 12    0965*                  CALL	GETEXT
001B76 18 12       0966*                  JR	TIME0
001B78             0967*  ;
001B78 CD D1 36    0968*  PTRev:            CALL	CHANEL
001B7B CD 5A 12    0969*                  CALL	GETPTR
001B7E 18 0A       0970*                  JR	TIME0
001B80             0971*  ;
001B80             0972*  ;TIME - Return current value of elapsed time.
001B80             0973*  ;Result is integer numeric.
001B80             0974*  ;
001B80 FD 7E 00    0975*  TIMEVev:          LD	A,(IY)
001B83 FE 24       0976*                  CP	'$'
001B85 28 09       0977*                  JR	Z,TIMEVSev
001B87 CD 95 01    0978*                  CALL	GETIME
001B8A D5          0979*  TIME0:          PUSH	DE
001B8B D9          0980*                  EXX
001B8C E1          0981*                  POP	HL
001B8D AF          0982*                  XOR	A
001B8E 4F          0983*                  LD	C,A
001B8F C9          0984*                  RET
001B90             0985*  ;
001B90             0986*  ;TIME$ - Return date/time string.
001B90             0987*  ;Result is string
001B90             0988*  ;
001B90 FD 23       0989*  TIMEVSev:         INC	IY		;SKIP $
001B92 CD AA 01    0990*                  CALL	GETIMS
001B95 3E 80       0991*                  LD	A,80H		;MARK STRING
001B97 C9          0992*                  RET
001B98             0993*  ;
001B98             0994*  ;String comparison:
001B98             0995*  ;
001B98 CD F5 1F    0996*  SLT:            CALL	SCP
001B9B D0          0997*                  RET	NC
001B9C 18 1F       0998*                  JR	TRUEev
001B9E             0999*  ;
001B9E CD F5 1F    1000*  SGT:            CALL	SCP
001BA1 C8          1001*                  RET	Z
001BA2 D8          1002*                  RET	C
001BA3 18 18       1003*                  JR	TRUEev
001BA5             1004*  ;
001BA5 CD F5 1F    1005*  SGE:            CALL	SCP
001BA8 D8          1006*                  RET	C
001BA9 18 12       1007*                  JR	TRUEev
001BAB             1008*  ;
001BAB CD F5 1F    1009*  SLE:            CALL	SCP
001BAE 28 0D       1010*                  JR	Z,TRUEev
001BB0 D0          1011*                  RET	NC
001BB1 18 0A       1012*                  JR	TRUEev
001BB3             1013*  ;
001BB3 CD F5 1F    1014*  SNE:            CALL	SCP
001BB6 C8          1015*                  RET	Z
001BB7 18 04       1016*                  JR	TRUEev
001BB9             1017*  ;
001BB9 CD F5 1F    1018*  SEQ:            CALL	SCP
001BBC C0          1019*                  RET	NZ
001BBD 3E FF       1020*  TRUEev:           LD	A,-1
001BBF D9          1021*                  EXX
001BC0 67          1022*                  LD	H,A
001BC1 6F          1023*                  LD	L,A
001BC2 D9          1024*                  EXX
001BC3 67          1025*                  LD	H,A
001BC4 6F          1026*                  LD	L,A
001BC5 3C          1027*                  INC	A
001BC6 4F          1028*                  LD	C,A
001BC7 C9          1029*                  RET
001BC8             1030*  ;
001BC8             1031*  ;PI - Return PI (3.141592654)
001BC8             1032*  ;Result is floating-point numeric.
001BC8             1033*  ;
001BC8 3E 23       1034*  PIev:             LD	A,35
001BCA 18 43       1035*                  JR	FPP1
001BCC             1036*  ;
001BCC             1037*  ;ABS - Absolute value
001BCC             1038*  ;Result is numeric, variable type.
001BCC             1039*  ;
001BCC 3E 10       1040*  ABSev:            LD	A,16
001BCE 18 3A       1041*                  JR	FPPN
001BD0             1042*  ;
001BD0             1043*  ;NOT - Complement integer.
001BD0             1044*  ;Result is integer numeric.
001BD0             1045*  ;
001BD0 3E 1A       1046*  CPL_ev:           LD	A,26
001BD2 18 36       1047*                  JR	FPPN
001BD4             1048*  ;
001BD4             1049*  ;DEG - Convert radians to degrees
001BD4             1050*  ;Result is floating-point numeric.
001BD4             1051*  ;
001BD4 3E 15       1052*  DEGev:            LD	A,21
001BD6 18 32       1053*                  JR	FPPN
001BD8             1054*  ;
001BD8             1055*  ;RAD - Convert degrees to radians
001BD8             1056*  ;Result is floating-point numeric.
001BD8             1057*  ;
001BD8 3E 1B       1058*  RADev:            LD	A,27
001BDA 18 2E       1059*                  JR	FPPN
001BDC             1060*  ;
001BDC             1061*  ;SGN - Return -1, 0 or +1
001BDC             1062*  ;Result is integer numeric.
001BDC             1063*  ;
001BDC 3E 1C       1064*  SGNev:            LD	A,28
001BDE 18 2A       1065*                  JR	FPPN
001BE0             1066*  ;
001BE0             1067*  ;INT - Floor function
001BE0             1068*  ;Result is integer numeric.
001BE0             1069*  ;
001BE0 3E 17       1070*  INT_ev:           LD	A,23
001BE2 18 26       1071*                  JR	FPPN
001BE4             1072*  ;
001BE4             1073*  ;SQR - square root
001BE4             1074*  ;Result is floating-point numeric.
001BE4             1075*  ;
001BE4 3E 1E       1076*  SQRev:            LD	A,30
001BE6 18 22       1077*                  JR	FPPN
001BE8             1078*  ;
001BE8             1079*  ;TAN - Tangent function
001BE8             1080*  ;Result is floating-point numeric.
001BE8             1081*  ;
001BE8 3E 1F       1082*  TANev:            LD	A,31
001BEA 18 1E       1083*                  JR	FPPN
001BEC             1084*  ;
001BEC             1085*  ;COS - Cosine function
001BEC             1086*  ;Result is floating-point numeric.
001BEC             1087*  ;
001BEC 3E 14       1088*  COSev:            LD	A,20
001BEE 18 1A       1089*                  JR	FPPN
001BF0             1090*  ;
001BF0             1091*  ;SIN - Sine function
001BF0             1092*  ;Result is floating-point numeric.
001BF0             1093*  ;
001BF0 3E 1D       1094*  SINev:            LD	A,29
001BF2 18 16       1095*                  JR	FPPN
001BF4             1096*  ;
001BF4             1097*  ;EXP - Exponential function
001BF4             1098*  ;Result is floating-point numeric.
001BF4             1099*  ;
001BF4 3E 16       1100*  EXPev:            LD	A,22
001BF6 18 12       1101*                  JR	FPPN
001BF8             1102*  ;
001BF8             1103*  ;LN - Natural log.
001BF8             1104*  ;Result is floating-point numeric.
001BF8             1105*  ;
001BF8 3E 18       1106*  LNev:             LD	A,24
001BFA 18 0E       1107*                  JR	FPPN
001BFC             1108*  ;
001BFC             1109*  ;LOG - base-10 logarithm.
001BFC             1110*  ;Result is floating-point numeric.
001BFC             1111*  ;
001BFC 3E 19       1112*  LOGev:            LD	A,25
001BFE 18 0A       1113*                  JR	FPPN
001C00             1114*  ;
001C00             1115*  ;ASN - Arc-sine
001C00             1116*  ;Result is floating-point numeric.
001C00             1117*  ;
001C00 3E 12       1118*  ASNev:            LD	A,18
001C02 18 06       1119*                  JR	FPPN
001C04             1120*  ;
001C04             1121*  ;ATN - arc-tangent
001C04             1122*  ;Result is floating-point numeric.
001C04             1123*  ;
001C04 3E 13       1124*  ATNev:            LD	A,19
001C06 18 02       1125*                  JR	FPPN
001C08             1126*  ;
001C08             1127*  ;ACS - arc-cosine
001C08             1128*  ;Result is floating point numeric.
001C08             1129*  ;
001C08 3E 11       1130*  ACSev:            LD	A,17
001C0A F5          1131*  FPPN:           PUSH	AF
001C0B CD 7A 18    1132*                  CALL	ITEMN
001C0E F1          1133*                  POP	AF
001C0F CD 15 45    1134*  FPP1:           CALL	FPP
001C12 DA 44 3F    1135*                  JP	C,ERROR_
001C15 AF          1136*                  XOR	A
001C16 C9          1137*                  RET
001C17             1138*  ;
001C17             1139*  ;SFIX - Convert to fixed-point notation
001C17             1140*  ;
001C17 3E 26       1141*  SFIX:           LD	A,38
001C19 18 F4       1142*                  JR	FPP1
001C1B             1143*  ;
001C1B             1144*  ;SFLOAT - Convert to floating-point notation
001C1B             1145*  ;
001C1B 3E 27       1146*  SFLOATev:         LD	A,39
001C1D 18 F0       1147*                  JR	FPP1
001C1F             1148*  ;
001C1F             1149*  ;VAL - Return numeric value of string.
001C1F             1150*  ;Result is variable type numeric.
001C1F             1151*  ;
001C1F CD 69 18    1152*  VALev:            CALL	ITEMS
001C22 AF          1153*  VAL0:           XOR	A
001C23 12          1154*                  LD	(DE),A
001C24 DD 21 00 52 1155*                  LD	IX,ACCS
001C28 3E 24       1156*                  LD	A,36
001C2A 18 E3       1157*                  JR	FPP1
001C2C             1158*  ;
001C2C             1159*  ;EVAL - Pass string to expression evaluator.
001C2C             1160*  ;Result is variable type (numeric or string).
001C2C             1161*  ;
001C2C CD 69 18    1162*  EVAL_:          CALL	ITEMS
001C2F 3E 0D       1163*                  LD	A,CR
001C31 12          1164*                  LD	(DE),A
001C32 FD E5       1165*                  PUSH	IY
001C34 11 00 52    1166*                  LD	DE,ACCS
001C37 FD 21 00 52 1167*                  LD	IY,ACCS
001C3B 0E 00       1168*                  LD	C,0
001C3D CD 18 44    1169*                  CALL	LEXAN2		;TOKENISE
001C40 12          1170*                  LD	(DE),A
001C41 13          1171*                  INC	DE
001C42 AF          1172*                  XOR	A
001C43 CD 19 20    1173*                  CALL	PUSHS		;PUT ON STACK
001C46 FD 21 02 00 1174*                  LD	IY,2
001C4A FD 39       1175*                  ADD	IY,SP
001C4C CD 02 17    1176*                  CALL	EXPR
001C4F FD E1       1177*                  POP	IY
001C51 FD 39       1178*                  ADD	IY,SP
001C53 FD F9       1179*                  LD	SP,IY		;ADJUST STACK POINTER
001C55 FD E1       1180*                  POP	IY
001C57 08          1181*                  EX	AF,AF'
001C58 C9          1182*                  RET
001C59             1183*  ;
001C59             1184*  ;RND - Random number function.
001C59             1185*  ; RND gives random integer 0-&FFFFFFFF
001C59             1186*  ; RND(-n) seeds random number & returns -n.
001C59             1187*  ; RND(0) returns last value in RND(1) form.
001C59             1188*  ; RND(1) returns floating-point 0-0.99999999.
001C59             1189*  ; RND(n) returns random integer 1-n.
001C59             1190*  ;
001C59 DD 21 F6 54 1191*  RND:            LD	IX,RANDOM
001C5D CD 0B 45    1192*                  CALL	NXT
001C60 FE 28       1193*                  CP	'('
001C62 28 1C       1194*                  JR	Z,RND5		;ARGUMENT FOLLOWS
001C64 CD 2F 19    1195*                  CALL	LOAD5
001C67 CB 19       1196*  RND1:           RR	C
001C69 06 20       1197*                  LD	B,32
001C6B D9          1198*  RND2:           EXX			;CALCULATE NEXT
001C6C ED 6A       1199*                  ADC	HL,HL
001C6E D9          1200*                  EXX
001C6F ED 6A       1201*                  ADC	HL,HL
001C71 CB 5D       1202*                  BIT	3,L
001C73 28 01       1203*                  JR	Z,RND3
001C75 3F          1204*                  CCF
001C76 10 F3       1205*  RND3:           DJNZ	RND2
001C78 CB 11       1206*  RND4:           RL	C		;SAVE CARRY
001C7A CD 06 32    1207*                  CALL	STORE5		;STORE NEW NUMBER
001C7D AF          1208*                  XOR	A
001C7E 4F          1209*                  LD	C,A
001C7F C9          1210*                  RET
001C80 CD 60 18    1211*  RND5:           CALL	ITEMI
001C83 DD 21 F6 54 1212*                  LD	IX,RANDOM
001C87 CB 7C       1213*                  BIT	7,H		;NEGATIVE?
001C89 37          1214*                  SCF
001C8A 20 EC       1215*                  JR	NZ,RND4		;SEED
001C8C CD 59 1F    1216*                  CALL	TEST
001C8F F5          1217*                  PUSH	AF
001C90 41          1218*                  LD	B,C
001C91 EB          1219*                  EX	DE,HL
001C92 D9          1220*                  EXX
001C93 EB          1221*                  EX	DE,HL
001C94 CD 2F 19    1222*                  CALL	LOAD5
001C97 C4 67 1C    1223*                  CALL	NZ,RND1		;NEXT IF NON-ZERO
001C9A D9          1224*                  EXX			;SCRAMBLE (CARE!)
001C9B 0E 7F       1225*                  LD	C,7FH
001C9D CB 7C       1226*  RND6:           BIT	7,H		;FLOAT
001C9F 20 08       1227*                  JR	NZ,RND7
001CA1 D9          1228*                  EXX
001CA2 29          1229*                  ADD	HL,HL
001CA3 D9          1230*                  EXX
001CA4 ED 6A       1231*                  ADC	HL,HL
001CA6 0D          1232*                  DEC	C
001CA7 20 F4       1233*                  JR	NZ,RND6
001CA9 CB BC       1234*  RND7:           RES	7,H		;POSITIVE 0-0.999999
001CAB F1          1235*                  POP	AF
001CAC C8          1236*                  RET	Z		;ZERO ARGUMENT
001CAD D9          1237*                  EXX
001CAE 7B          1238*                  LD	A,E
001CAF 3D          1239*                  DEC	A
001CB0 B2          1240*                  OR	D
001CB1 D9          1241*                  EXX
001CB2 B3          1242*                  OR	E
001CB3 B2          1243*                  OR	D
001CB4 C8          1244*                  RET	Z		;ARGUMENT=1
001CB5 06 00       1245*                  LD	B,0		;INTEGER MARKER
001CB7 3E 0A       1246*                  LD	A,10
001CB9 CD 15 45    1247*                  CALL	FPP		;MULTIPLY
001CBC DA 44 3F    1248*                  JP	C,ERROR_
001CBF CD 17 1C    1249*                  CALL	SFIX
001CC2 C3 56 18    1250*                  JP	ADD1ev
001CC5             1251*  ;
001CC5             1252*  ;SUMLEN(array())
001CC5             1253*  ;
001CC5 FD 23       1254*  SUMLEN:         INC	IY		;Skip LEN
001CC7 CD D7 19    1255*                  CALL	GETARB
001CCA CB 78       1256*                  BIT	7,B
001CCC CA 6E 18    1257*                  JP	Z,MISMATev	;Type mismatch
001CCF CD A4 19    1258*                  CALL	ARRLEN
001CD2 E5          1259*                  PUSH	HL
001CD3 DD E1       1260*                  POP	IX		;IX addresses array
001CD5 AF          1261*                  XOR	A
001CD6 67          1262*                  LD	H,A
001CD7 6F          1263*                  LD	L,A
001CD8 47          1264*                  LD	B,A
001CD9 DD 4E 00    1265*  SUMLN1:         LD	C,(IX)
001CDC 09          1266*                  ADD	HL,BC
001CDD 0E 04       1267*                  LD	C,4
001CDF DD 09       1268*                  ADD	IX,BC
001CE1 1B          1269*                  DEC	DE		;Count elements
001CE2 7A          1270*                  LD	A,D
001CE3 B3          1271*                  OR	E
001CE4 20 F3       1272*                  JR	NZ,SUMLN1
001CE6 C3 50 1B    1273*                  JP	COUNT1
001CE9             1274*  ;
001CE9             1275*  ;SUM(array())
001CE9             1276*  ;
001CE9 CD 0B 45    1277*  SUM:            CALL	NXT
001CEC FE A9       1278*                  CP	TLEN
001CEE 28 D5       1279*                  JR	Z,SUMLEN
001CF0 CD D7 19    1280*                  CALL	GETARB
001CF3 CB 78       1281*                  BIT	7,B
001CF5 20 27       1282*                  JR	NZ,SUMSTR
001CF7 C5          1283*                  PUSH	BC
001CF8 CD A4 19    1284*                  CALL	ARRLEN
001CFB E5          1285*                  PUSH	HL
001CFC DD E1       1286*                  POP	IX		;IX addresses array
001CFE CD F8 1F    1287*                  CALL	ZERO
001D01 F1          1288*                  POP	AF		;A = element size
001D02 D5          1289*  SUMUP:          PUSH	DE
001D03 F5          1290*                  PUSH	AF
001D04 CD E7 19    1291*                  CALL	DLOADN
001D07 3E 0B       1292*                  LD	A,11
001D09 CD 15 45    1293*                  CALL	FPP
001D0C DA 44 3F    1294*                  JP	C,ERROR_
001D0F F1          1295*                  POP	AF
001D10 16 00       1296*                  LD	D,0
001D12 5F          1297*                  LD	E,A
001D13 DD 19       1298*                  ADD	IX,DE		;Bump to next element
001D15 D1          1299*                  POP	DE
001D16 1B          1300*                  DEC	DE		;Count elements
001D17 47          1301*                  LD	B,A
001D18 7A          1302*                  LD	A,D
001D19 B3          1303*                  OR	E
001D1A 78          1304*                  LD	A,B
001D1B 20 E5       1305*                  JR	NZ,SUMUP
001D1D C9          1306*                  RET
001D1E             1307*  ;
001D1E             1308*  ;SUM(string array)
001D1E             1309*  ;
001D1E CD A4 19    1310*  SUMSTR:         CALL	ARRLEN
001D21 E5          1311*                  PUSH	HL
001D22 DD E1       1312*                  POP	IX		;IX addresses array
001D24 EB          1313*                  EX	DE,HL
001D25 11 00 52    1314*                  LD	DE,ACCS
001D28 06 00       1315*                  LD	B,0
001D2A E5          1316*  SUMST1:         PUSH	HL
001D2B DD 4E 00    1317*                  LD	C,(IX)
001D2E 79          1318*                  LD	A,C
001D2F B7          1319*                  OR	A
001D30 28 0E       1320*                  JR	Z,SUMST2
001D32 83          1321*                  ADD	A,E
001D33 3E 13       1322*                  LD	A,19
001D35 DA 44 3F    1323*                  JP	C,ERROR_		;"String too long"
001D38 DD 6E 02    1324*                  LD	L,(IX+2)
001D3B DD 66 03    1325*                  LD	H,(IX+3)
001D3E ED B0       1326*                  LDIR
001D40 E1          1327*  SUMST2:         POP	HL
001D41 0E 04       1328*                  LD	C,4
001D43 DD 09       1329*                  ADD	IX,BC
001D45 2B          1330*                  DEC	HL		;Count elements
001D46 7C          1331*                  LD	A,H
001D47 B5          1332*                  OR	L
001D48 20 E0       1333*                  JR	NZ,SUMST1
001D4A F6 80       1334*                  OR	80H
001D4C C9          1335*                  RET
001D4D             1336*  ;
001D4D             1337*  ;MOD(array())
001D4D             1338*  ;
001D4D CD D7 19    1339*  MODFUN:         CALL	GETARB
001D50 CB 78       1340*                  BIT	7,B
001D52 C2 6E 18    1341*                  JP	NZ,MISMATev
001D55 C5          1342*                  PUSH	BC
001D56 CD A4 19    1343*                  CALL	ARRLEN
001D59 E5          1344*                  PUSH	HL
001D5A DD E1       1345*                  POP	IX		;IX addresses array
001D5C CD F8 1F    1346*                  CALL	ZERO
001D5F F1          1347*                  POP	AF		;A = element size
001D60 D5          1348*  MODUP:          PUSH	DE
001D61 F5          1349*                  PUSH	AF
001D62 C5          1350*                  PUSH	BC
001D63 E5          1351*                  PUSH	HL
001D64 D9          1352*                  EXX
001D65 E5          1353*                  PUSH	HL
001D66 D9          1354*                  EXX
001D67 CD 25 19    1355*                  CALL	LOADN
001D6A AF          1356*                  XOR	A
001D6B 47          1357*                  LD	B,A
001D6C 57          1358*                  LD	D,A
001D6D 5F          1359*                  LD	E,A
001D6E D9          1360*                  EXX
001D6F 57          1361*                  LD	D,A
001D70 1E 02       1362*                  LD	E,2
001D72 D9          1363*                  EXX
001D73 3E 0E       1364*                  LD	A,14
001D75 DD E5       1365*                  PUSH	IX
001D77 CD 15 45    1366*                  CALL	FPP		;Square
001D7A DD E1       1367*                  POP	IX
001D7C DA 44 3F    1368*                  JP	C,ERROR_
001D7F D9          1369*                  EXX
001D80 EB          1370*                  EX	DE,HL
001D81 E1          1371*                  POP	HL
001D82 D9          1372*                  EXX
001D83 EB          1373*                  EX	DE,HL
001D84 E1          1374*                  POP	HL
001D85 79          1375*                  LD	A,C
001D86 C1          1376*                  POP	BC
001D87 47          1377*                  LD	B,A
001D88 3E 0B       1378*                  LD	A,11
001D8A CD 15 45    1379*                  CALL	FPP		;Accumulate
001D8D DA 44 3F    1380*                  JP	C,ERROR_
001D90 F1          1381*                  POP	AF
001D91 16 00       1382*                  LD	D,0
001D93 5F          1383*                  LD	E,A
001D94 DD 19       1384*                  ADD	IX,DE		;Bump to next element
001D96 D1          1385*                  POP	DE
001D97 1B          1386*                  DEC	DE		;Count elements
001D98 47          1387*                  LD	B,A
001D99 7A          1388*                  LD	A,D
001D9A B3          1389*                  OR	E
001D9B 78          1390*                  LD	A,B
001D9C 20 C2       1391*                  JR	NZ,MODUP
001D9E 3E 1E       1392*                  LD	A,30
001DA0 CD 15 45    1393*                  CALL	FPP		;Square root
001DA3 AF          1394*                  XOR	A
001DA4 C9          1395*                  RET
001DA5             1396*  ;
001DA5             1397*  ;INSTR - String search.
001DA5             1398*  ;Result is integer numeric.
001DA5             1399*  ;
001DA5 CD 3C 18    1400*  INSTR:          CALL	EXPRS		;STRING TO SEARCH
001DA8 CD A2 20    1401*                  CALL	COMMA
001DAB CD 19 20    1402*                  CALL	PUSHS		;SAVE STRING ON STACK
001DAE CD 3C 18    1403*                  CALL	EXPRS		;SUB-STRING
001DB1 C1          1404*                  POP	BC
001DB2 21 00 00    1405*                  LD	HL,0
001DB5 39          1406*                  ADD	HL,SP		;HL ADDRESSES MAIN
001DB6 C5          1407*                  PUSH	BC		;C = MAIN STRING LENGTH
001DB7 43          1408*                  LD	B,E		;B = SUB-STRING LENGTH
001DB8 CD 0B 45    1409*                  CALL	NXT
001DBB FE 2C       1410*                  CP	','
001DBD 3E 00       1411*                  LD	A,0
001DBF 20 17       1412*                  JR	NZ,INSTR1
001DC1 FD 23       1413*                  INC	IY		;SKIP COMMA
001DC3 C5          1414*                  PUSH	BC		;SAVE LENGTHS
001DC4 E5          1415*                  PUSH	HL		;SAVE MAIN ADDRESS
001DC5 CD 19 20    1416*                  CALL	PUSHS
001DC8 CD 33 18    1417*                  CALL	EXPRI
001DCB C1          1418*                  POP	BC
001DCC CD 37 20    1419*                  CALL	POPS
001DCF E1          1420*                  POP	HL		;RESTORE MAIN ADDRESS
001DD0 C1          1421*                  POP	BC		;RESTORE LENGTHS
001DD1 D9          1422*                  EXX
001DD2 7D          1423*                  LD	A,L
001DD3 D9          1424*                  EXX
001DD4 B7          1425*                  OR	A
001DD5 28 01       1426*                  JR	Z,INSTR1
001DD7 3D          1427*                  DEC	A
001DD8 11 00 52    1428*  INSTR1:         LD	DE,ACCS		;DE ADDRESSES SUB
001DDB CD F2 1D    1429*                  CALL	SEARCH
001DDE D1          1430*                  POP	DE
001DDF 28 03       1431*                  JR	Z,INSTR2	;N.B. CARRY CLEARED
001DE1 ED 62       1432*                  SBC	HL,HL
001DE3 39          1433*                  ADD	HL,SP
001DE4 ED 72       1434*  INSTR2:         SBC	HL,SP
001DE6 EB          1435*                  EX	DE,HL
001DE7 26 00       1436*                  LD	H,0
001DE9 39          1437*                  ADD	HL,SP
001DEA F9          1438*                  LD	SP,HL
001DEB EB          1439*                  EX	DE,HL
001DEC CD AE 20    1440*                  CALL	BRAKET
001DEF C3 50 1B    1441*                  JP	COUNT1
001DF2             1442*  ;
001DF2             1443*  ;SEARCH - Search string for sub-string
001DF2             1444*  ;   Inputs: Main string at HL length C
001DF2             1445*  ;           Sub-string at DE length B
001DF2             1446*  ;           Starting offset A
001DF2             1447*  ;  Outputs: NZ - not found
001DF2             1448*  ;           Z - found at location HL-1
001DF2             1449*  ;           Carry always cleared
001DF2             1450*  ;
001DF2 C5          1451*  SEARCH:         PUSH	BC
001DF3 06 00       1452*                  LD	B,0
001DF5 4F          1453*                  LD	C,A
001DF6 09          1454*                  ADD	HL,BC		;NEW START ADDRESS
001DF7 C1          1455*                  POP	BC
001DF8 91          1456*                  SUB	C
001DF9 30 28       1457*                  JR	NC,SRCH4
001DFB ED 44       1458*                  NEG
001DFD 4F          1459*                  LD	C,A		;REMAINING LENGTH
001DFE 1A          1460*  SRCH1ev:          LD	A,(DE)
001DFF C5          1461*                  PUSH	BC
001E00 06 00       1462*                  LD	B,0
001E02 ED B1       1463*                  CPIR			;FIND FIRST CHARACTER
001E04 79          1464*                  LD	A,C
001E05 C1          1465*                  POP	BC
001E06 20 1B       1466*                  JR	NZ,SRCH4
001E08 4F          1467*                  LD	C,A
001E09 05          1468*                  DEC	B		;Bug fix
001E0A B8          1469*                  CP	B		;Bug fix
001E0B 04          1470*                  INC	B		;Bug fix
001E0C 38 15       1471*                  JR	C,SRCH4		;Bug fix
001E0E C5          1472*                  PUSH	BC
001E0F D5          1473*                  PUSH	DE
001E10 E5          1474*                  PUSH	HL
001E11 05          1475*                  DEC	B
001E12 28 08       1476*                  JR	Z,SRCH3		;FOUND !
001E14 13          1477*  SRCH2ev:          INC	DE
001E15 1A          1478*                  LD	A,(DE)
001E16 BE          1479*                  CP	(HL)
001E17 20 03       1480*                  JR	NZ,SRCH3
001E19 23          1481*                  INC	HL
001E1A 10 F8       1482*                  DJNZ	SRCH2ev
001E1C E1          1483*  SRCH3:          POP	HL
001E1D D1          1484*                  POP	DE
001E1E C1          1485*                  POP	BC
001E1F 20 DD       1486*                  JR	NZ,SRCH1ev
001E21 AF          1487*                  XOR	A		;Z, NC
001E22 C9          1488*                  RET			;FOUND
001E23             1489*  ;
001E23 F6 FF       1490*  SRCH4:          OR	0FFH		;NZ, NC
001E25 C9          1491*                  RET			;NOT FOUND
001E26             1492*  ;
001E26             1493*  ;CHR$ - Return character with given ASCII value.
001E26             1494*  ;Result is string.
001E26             1495*  ;
001E26 CD 60 18    1496*  CHRS:           CALL	ITEMI
001E29 D9          1497*                  EXX
001E2A 7D          1498*                  LD	A,L
001E2B 18 0A       1499*                  JR	GET1
001E2D             1500*  ;
001E2D             1501*  ;GET$ - Return key pressed as string, or read from file
001E2D             1502*  ;Result is string.
001E2D             1503*  ;
001E2D CD 0B 45    1504*  GETS:           CALL	NXT
001E30 FE 23       1505*                  CP	'#'
001E32 28 06       1506*                  JR	Z,GET2
001E34 CD C2 11    1507*                  CALL	OSRDCH
001E37 37          1508*  GET1:           SCF
001E38 18 5B       1509*                  JR	INKEY1
001E3A             1510*  ;
001E3A CD DB 36    1511*  GET2:           CALL	CHNL		;File channel
001E3D CD 0B 45    1512*                  CALL	NXT
001E40 FE 0F       1513*                  CP	TBY
001E42 28 04       1514*                  JR	Z,GET3
001E44 FE B8       1515*                  CP	TTO
001E46 20 0C       1516*                  JR	NZ,GET4
001E48 FD 23       1517*  GET3:           INC	IY
001E4A F5          1518*                  PUSH	AF
001E4B D5          1519*                  PUSH	DE
001E4C CD 60 18    1520*                  CALL	ITEMI		;Get BY or TO qualifier
001E4F D9          1521*                  EXX
001E50 44          1522*                  LD	B,H
001E51 4D          1523*                  LD	C,L
001E52 D1          1524*                  POP	DE
001E53 F1          1525*                  POP	AF
001E54 21 00 52    1526*  GET4:           LD	HL,ACCS
001E57 FE B8       1527*                  CP	TTO
001E59 28 08       1528*                  JR	Z,GET5
001E5B 51          1529*                  LD	D,C		;Maximum count
001E5C 01 00 01    1530*                  LD	BC,100H		;Default
001E5F FE 0F       1531*                  CP	TBY
001E61 28 04       1532*                  JR	Z,GET6
001E63 16 00       1533*  GET5:           LD	D,0
001E65 CB C8       1534*                  SET	1,B		;Flag no count
001E67 C5          1535*  GET6:           PUSH	BC
001E68 CD 3F 12    1536*                  CALL	OSBGET
001E6B C1          1537*                  POP	BC
001E6C 38 1C       1538*                  JR	C,GET9		;EOF
001E6E CB 48       1539*                  BIT	1,B
001E70 28 13       1540*                  JR	Z,GET8
001E72 B9          1541*                  CP	C
001E73 28 15       1542*                  JR	Z,GET9		;NUL (or supplied term)
001E75 CB 78       1543*                  BIT	7,B
001E77 20 08       1544*                  JR	NZ,GET7
001E79 CB 40       1545*                  BIT	0,B
001E7B 28 08       1546*                  JR	Z,GET8
001E7D FE 0A       1547*                  CP	LF
001E7F 28 09       1548*                  JR	Z,GET9		;LF
001E81 FE 0D       1549*  GET7:           CP	CR
001E83 28 05       1550*                  JR	Z,GET9		;CR
001E85 77          1551*  GET8:           LD	(HL),A
001E86 2C          1552*                  INC	L
001E87 15          1553*                  DEC	D
001E88 20 DD       1554*                  JR	NZ,GET6
001E8A EB          1555*  GET9:           EX	DE,HL
001E8B 3E 80       1556*                  LD	A,80H
001E8D C9          1557*                  RET
001E8E             1558*  ;
001E8E             1559*  ;INKEY$ - Wait up to n centiseconds for keypress.
001E8E             1560*  ; Return key pressed as string or null
001E8E             1561*  ; string if time elapsed.
001E8E             1562*  ;Result is string.
001E8E             1563*  ;
001E8E CD 60 18    1564*  INKEYS:         CALL	ITEMI
001E91 D9          1565*                  EXX
001E92 CD FD 01    1566*                  CALL	OSKEY
001E95 11 00 52    1567*  INKEY1:         LD	DE,ACCS
001E98 12          1568*                  LD	(DE),A
001E99 3E 80       1569*                  LD	A,80H
001E9B D0          1570*                  RET	NC
001E9C 1C          1571*                  INC	E
001E9D C9          1572*                  RET
001E9E             1573*  ;
001E9E             1574*  ;MID$ - Return sub-string.
001E9E             1575*  ;Result is string.
001E9E             1576*  ;
001E9E CD 3C 18    1577*  MIDS:           CALL	EXPRS
001EA1 CD A2 20    1578*                  CALL	COMMA
001EA4 CD 19 20    1579*                  CALL	PUSHS		;SAVE STRING ON STACK
001EA7 CD 33 18    1580*                  CALL	EXPRI
001EAA C1          1581*                  POP	BC
001EAB CD 37 20    1582*                  CALL	POPS
001EAE D9          1583*                  EXX
001EAF 7D          1584*                  LD	A,L
001EB0 D9          1585*                  EXX
001EB1 B7          1586*                  OR	A
001EB2 28 0D       1587*                  JR	Z,MIDS1
001EB4 3D          1588*                  DEC	A
001EB5 6F          1589*                  LD	L,A
001EB6 93          1590*                  SUB	E
001EB7 1E 00       1591*                  LD	E,0
001EB9 30 06       1592*                  JR	NC,MIDS1
001EBB ED 44       1593*                  NEG
001EBD 4F          1594*                  LD	C,A
001EBE CD 1D 1F    1595*                  CALL	RIGHT1
001EC1 CD 0B 45    1596*  MIDS1:          CALL	NXT
001EC4 FE 2C       1597*                  CP	','
001EC6 28 1A       1598*                  JR	Z,LEFT1
001EC8 CD AE 20    1599*                  CALL	BRAKET
001ECB 3E 80       1600*                  LD	A,80H
001ECD C9          1601*                  RET
001ECE             1602*  ;
001ECE             1603*  ;LEFT$ - Return left part of string.
001ECE             1604*  ;Carry cleared if entire string returned.
001ECE             1605*  ;Result is string.
001ECE             1606*  ;
001ECE CD 3C 18    1607*  LEFTS:          CALL	EXPRS
001ED1 CD 0B 45    1608*                  CALL	NXT
001ED4 FE 2C       1609*                  CP	','
001ED6 28 0A       1610*                  JR	Z,LEFT1
001ED8 CD AE 20    1611*                  CALL	BRAKET
001EDB 7B          1612*                  LD	A,E
001EDC B7          1613*                  OR	A
001EDD 28 1A       1614*                  JR	Z,LEFT3
001EDF 1D          1615*                  DEC	E
001EE0 18 17       1616*                  JR	LEFT3
001EE2             1617*  ;
001EE2 FD 23       1618*  LEFT1:          INC	IY
001EE4 CD 19 20    1619*                  CALL	PUSHS		;SAVE STRING ON STACK
001EE7 CD 33 18    1620*                  CALL	EXPRI
001EEA C1          1621*                  POP	BC
001EEB CD 37 20    1622*                  CALL	POPS
001EEE CD AE 20    1623*                  CALL	BRAKET
001EF1 D9          1624*                  EXX
001EF2 7D          1625*                  LD	A,L
001EF3 D9          1626*                  EXX
001EF4 BB          1627*                  CP	E
001EF5 30 02       1628*                  JR	NC,LEFT3
001EF7 6B          1629*                  LD	L,E		;FOR RIGHT$
001EF8 5F          1630*  LEFT2:          LD	E,A
001EF9 3E 80       1631*  LEFT3:          LD	A,80H		;STRING MARKER
001EFB C9          1632*                  RET
001EFC             1633*  ;
001EFC             1634*  ;RIGHT$ - Return right part of string.
001EFC             1635*  ;Result is string.
001EFC             1636*  ;
001EFC CD 3C 18    1637*  RIGHTS:         CALL	EXPRS
001EFF CD 0B 45    1638*                  CALL	NXT
001F02 FE 2C       1639*                  CP	','
001F04 28 0C       1640*                  JR	Z,RIGHT0
001F06 CD AE 20    1641*                  CALL	BRAKET
001F09 7B          1642*                  LD	A,E
001F0A B7          1643*                  OR	A
001F0B 28 EC       1644*                  JR	Z,LEFT3
001F0D 3D          1645*                  DEC	A
001F0E 0E 01       1646*                  LD	C,1
001F10 18 0A       1647*                  JR	RIGHT2
001F12             1648*  ;
001F12 CD E2 1E    1649*  RIGHT0:         CALL	LEFT1
001F15 D0          1650*                  RET	NC
001F16 1C          1651*                  INC	E
001F17 1D          1652*                  DEC	E
001F18 C8          1653*                  RET	Z
001F19 4B          1654*                  LD	C,E
001F1A 7D          1655*                  LD	A,L
001F1B 93          1656*                  SUB	E
001F1C 6F          1657*  RIGHT2:         LD	L,A
001F1D 06 00       1658*  RIGHT1:         LD	B,0
001F1F 62          1659*                  LD	H,D
001F20 58          1660*                  LD	E,B
001F21 ED B0       1661*                  LDIR			;MOVE
001F23 3E 80       1662*                  LD	A,80H
001F25 C9          1663*                  RET
001F26             1664*  ;
001F26             1665*  ;STRING$ - Return n concatenations of a string.
001F26             1666*  ;Result is string.
001F26             1667*  ;
001F26 CD 33 18    1668*  STRING_:        CALL	EXPRI
001F29 CD A2 20    1669*                  CALL	COMMA
001F2C D9          1670*                  EXX
001F2D 7D          1671*                  LD	A,L
001F2E D9          1672*                  EXX
001F2F F5          1673*                  PUSH	AF
001F30 CD 3C 18    1674*                  CALL	EXPRS
001F33 CD AE 20    1675*                  CALL	BRAKET
001F36 F1          1676*                  POP	AF
001F37 B7          1677*                  OR	A
001F38 28 BE       1678*                  JR	Z,LEFT2		;N=0
001F3A 3D          1679*                  DEC	A
001F3B 4F          1680*                  LD	C,A
001F3C 3E 80       1681*                  LD	A,80H		;STRING MARKER
001F3E C8          1682*                  RET	Z
001F3F 1C          1683*                  INC	E
001F40 1D          1684*                  DEC	E
001F41 C8          1685*                  RET	Z		;NULL STRING
001F42 43          1686*                  LD	B,E
001F43 62          1687*                  LD	H,D
001F44 2E 00       1688*                  LD	L,0
001F46 C5          1689*  STRIN1:         PUSH	BC
001F47 7E          1690*  STRIN2:         LD	A,(HL)
001F48 23          1691*                  INC	HL
001F49 12          1692*                  LD	(DE),A
001F4A 1C          1693*                  INC	E
001F4B 3E 13       1694*                  LD	A,19
001F4D CA 44 3F    1695*                  JP	Z,ERROR_		;"String too long"
001F50 10 F5       1696*                  DJNZ	STRIN2
001F52 C1          1697*                  POP	BC
001F53 0D          1698*                  DEC	C
001F54 20 F0       1699*                  JR	NZ,STRIN1
001F56 3E 80       1700*                  LD	A,80H
001F58 C9          1701*                  RET
001F59             1702*  ;
001F59             1703*  ;SUBROUTINES
001F59             1704*  ;
001F59             1705*  ;TEST - Test HLH'L' for zero
001F59             1706*  ;  Outputs: Z-flag set & A=0 if zero
001F59             1707*  ; Destroys: A,F
001F59             1708*  ;
001F59 7C          1709*  TEST:           LD	A,H
001F5A B5          1710*                  OR	L
001F5B D9          1711*                  EXX
001F5C B4          1712*                  OR	H
001F5D B5          1713*                  OR	L
001F5E D9          1714*                  EXX
001F5F C9          1715*                  RET
001F60             1716*  ;
001F60             1717*  ;DECODE - Decode line number in pseudo-binary.
001F60             1718*  ;   Inputs: IY = Text pointer.
001F60             1719*  ;  Outputs: HL=0, H'L'=line number, C=0.
001F60             1720*  ; Destroys: A,C,H,L,H',L',IY,F
001F60             1721*  ;
001F60 D9          1722*  DECODE:         EXX
001F61 FD 7E 00    1723*                  LD	A,(IY)
001F64 FD 23       1724*                  INC	IY
001F66 17          1725*                  RLA
001F67 17          1726*                  RLA
001F68 67          1727*                  LD	H,A
001F69 E6 C0       1728*                  AND	0C0H
001F6B FD AE 00    1729*                  XOR	(IY)
001F6E FD 23       1730*                  INC	IY
001F70 6F          1731*                  LD	L,A
001F71 7C          1732*                  LD	A,H
001F72 17          1733*                  RLA
001F73 17          1734*                  RLA
001F74 E6 C0       1735*                  AND	0C0H
001F76 FD AE 00    1736*                  XOR	(IY)
001F79 FD 23       1737*                  INC	IY
001F7B 67          1738*                  LD	H,A
001F7C D9          1739*                  EXX
001F7D AF          1740*                  XOR	A
001F7E 4F          1741*                  LD	C,A
001F7F 67          1742*                  LD	H,A
001F80 6F          1743*                  LD	L,A
001F81 C9          1744*                  RET
001F82             1745*  ;
001F82             1746*  ;HEXSTR - convert numeric value to HEX string.
001F82             1747*  ;   Inputs: HLH'L'C = integer or floating-point number
001F82             1748*  ;  Outputs: String in string accumulator.
001F82             1749*  ;           E = string length. D = ACCS/256
001F82             1750*  ;
001F82 FD 23       1751*  HEXSTS:         INC	IY		;SKIP TILDE
001F84 CD 7A 18    1752*                  CALL	ITEMN
001F87 CD 8D 1F    1753*                  CALL	HEXSTR
001F8A 3E 80       1754*                  LD	A,80H
001F8C C9          1755*                  RET
001F8D             1756*  ;
001F8D CD 17 1C    1757*  HEXSTR:         CALL	SFIX
001F90 01 08 00    1758*                  LD	BC,8
001F93 11 00 52    1759*                  LD	DE,ACCS
001F96 C5          1760*  HEXST1:         PUSH	BC
001F97 06 04       1761*                  LD	B,4
001F99 AF          1762*                  XOR	A
001F9A D9          1763*  HEXST2:         EXX
001F9B 29          1764*                  ADD	HL,HL
001F9C D9          1765*                  EXX
001F9D ED 6A       1766*                  ADC	HL,HL
001F9F 17          1767*                  RLA
001FA0 10 F8       1768*                  DJNZ	HEXST2
001FA2 C1          1769*                  POP	BC
001FA3 0D          1770*                  DEC	C
001FA4 F8          1771*                  RET	M
001FA5 28 06       1772*                  JR	Z,HEXST3
001FA7 B7          1773*                  OR	A
001FA8 20 03       1774*                  JR	NZ,HEXST3
001FAA B8          1775*                  CP	B
001FAB 28 E9       1776*                  JR	Z,HEXST1
001FAD C6 90       1777*  HEXST3:         ADD	A,90H
001FAF 27          1778*                  DAA
001FB0 CE 40       1779*                  ADC	A,40H
001FB2 27          1780*                  DAA
001FB3 12          1781*                  LD	(DE),A
001FB4 13          1782*                  INC	DE
001FB5 47          1783*                  LD	B,A
001FB6 18 DE       1784*                  JR	HEXST1
001FB8             1785*  ;
001FB8             1786*  ;Function STR - convert numeric value to ASCII string.
001FB8             1787*  ;   Inputs: HLH'L'C = integer or floating-point number.
001FB8             1788*  ;  Outputs: String in string accumulator.
001FB8             1789*  ;           E = length, D = ACCS/256
001FB8             1790*  ;           A = 80H (type=string)
001FB8             1791*  ;
001FB8             1792*  ;First normalise for decimal output:
001FB8             1793*  ;
001FB8 CD 0B 45    1794*  STRS:           CALL	NXT
001FBB FE 7E       1795*                  CP	'~'
001FBD 28 C3       1796*                  JR	Z,HEXSTS
001FBF CD 7A 18    1797*                  CALL	ITEMN
001FC2 DD 21 00 54 1798*                  LD	IX,STAVAR
001FC6 DD 7E 03    1799*                  LD	A,(IX+3)
001FC9 B7          1800*                  OR	A
001FCA DD 21 F2 1F 1801*                  LD	IX,G9-1		;G9 FORMAT
001FCE 28 04       1802*                  JR	Z,STR0
001FD0 DD 21 00 54 1803*  STR:            LD	IX,STAVAR
001FD4 11 00 52    1804*  STR0:           LD	DE,ACCS
001FD7 3E 25       1805*                  LD	A,37
001FD9 CD 15 45    1806*                  CALL	FPP
001FDC DA 44 3F    1807*                  JP	C,ERROR_
001FDF DD CB 02 46 1808*                  BIT	0,(IX+2)
001FE3 3E 80       1809*  STR1:           LD	A,80H		;STRING MARKER
001FE5 C8          1810*                  RET	Z
001FE6 79          1811*                  LD	A,C
001FE7 C6 04       1812*                  ADD	A,4
001FE9 BB          1813*  STR2:           CP	E
001FEA 28 F7       1814*                  JR	Z,STR1
001FEC EB          1815*                  EX	DE,HL
001FED 36 20       1816*                  LD	(HL),' '	;TRAILING SPACE
001FEF 23          1817*                  INC	HL
001FF0 EB          1818*                  EX	DE,HL
001FF1 18 F6       1819*                  JR	STR2
001FF3             1820*  ;
001FF3 09 00       1821*  G9:             DW	9
001FF5             1822*  ;
001FF5             1823*  ;STRING COMPARE
001FF5             1824*  ;Compare string (DE) length B with string (HL) length C.
001FF5             1825*  ;Result preset to false.
001FF5             1826*  ;
001FF5 CD 02 20    1827*  SCP:            CALL	SCP0
001FF8 3E 00       1828*  ZERO:           LD	A,0
001FFA D9          1829*                  EXX
001FFB 67          1830*                  LD	H,A
001FFC 6F          1831*                  LD	L,A
001FFD D9          1832*                  EXX
001FFE 67          1833*                  LD	H,A
001FFF 6F          1834*                  LD	L,A
002000 4F          1835*                  LD	C,A
002001 C9          1836*                  RET
002002             1837*  ;
002002 04          1838*  SCP0:           INC	B
002003 0C          1839*                  INC	C
002004 05          1840*  SCP1:           DEC	B
002005 28 0A       1841*                  JR	Z,SCP2
002007 0D          1842*                  DEC	C
002008 28 0C       1843*                  JR	Z,SCP3
00200A 1A          1844*                  LD	A,(DE)
00200B BE          1845*                  CP	(HL)
00200C C0          1846*                  RET	NZ
00200D 13          1847*                  INC	DE
00200E 23          1848*                  INC	HL
00200F 18 F3       1849*                  JR	SCP1
002011 B7          1850*  SCP2:           OR	A
002012 0D          1851*                  DEC	C
002013 C8          1852*                  RET	Z
002014 37          1853*                  SCF
002015 C9          1854*                  RET
002016 B7          1855*  SCP3:           OR	A
002017 0C          1856*                  INC	C
002018 C9          1857*                  RET
002019             1858*  ;
002019             1859*  ;PUSH$ - SAVE STRING ON STACK.
002019             1860*  ;   Inputs: String in string accumulator.
002019             1861*  ;           E = string length.
002019             1862*  ;           A - saved on stack.
002019             1863*  ; Destroys: B,C,D,E,H,L,IX,SP,F
002019             1864*  ;
002019 21 00 52    1865*  PUSHS:          LD	HL,ACCS
00201C CD 86 32    1866*                  CALL	CHECK
00201F DD E1       1867*                  POP	IX		;RETURN ADDRESS
002021 B7          1868*                  OR	A		;CLEAR CARRY
002022 54          1869*                  LD	D,H
002023 4B          1870*                  LD	C,E
002024 ED 52       1871*                  SBC	HL,DE
002026 39          1872*                  ADD	HL,SP
002027 F9          1873*                  LD	SP,HL
002028 47          1874*                  LD	B,A
002029 C5          1875*                  PUSH	BC
00202A 28 09       1876*                  JR	Z,PUSHS1	;ZERO LENGTH
00202C EB          1877*                  EX	DE,HL
00202D 06 00       1878*                  LD	B,0
00202F 68          1879*                  LD	L,B		;L=0
002030 ED B0       1880*                  LDIR			;COPY TO STACK
002032 CD 86 32    1881*                  CALL	CHECK
002035 DD E9       1882*  PUSHS1:         JP	(IX)		;"RETURN"
002037             1883*  ;
002037             1884*  ;POP$ - RESTORE STRING FROM STACK.
002037             1885*  ;   Inputs: C = string length.
002037             1886*  ;  Outputs: String in string accumulator.
002037             1887*  ;           E = string length.
002037             1888*  ; Destroys: B,C,D,E,H,L,IX,SP,F
002037             1889*  ;
002037 DD E1       1890*  POPS:           POP	IX		;RETURN ADDRESS
002039 21 00 00    1891*                  LD	HL,0
00203C 44          1892*                  LD	B,H		;B=0
00203D 39          1893*                  ADD	HL,SP
00203E 11 00 52    1894*                  LD	DE,ACCS
002041 0C          1895*                  INC	C
002042 0D          1896*                  DEC	C
002043 28 02       1897*                  JR	Z,POPS1		;ZERO LENGTH
002045 ED B0       1898*                  LDIR			;COPY FROM STACK
002047 F9          1899*  POPS1:          LD	SP,HL
002048 DD E9       1900*                  JP	(IX)		;"RETURN"
00204A             1901*  ;
00204A FD 7E 00    1902*  BINDIG:         LD	A,(IY)
00204D FE 30       1903*                  CP	'0'
00204F D8          1904*                  RET	C
002050 FE 32       1905*                  CP	'1'+1
002052 3F          1906*                  CCF
002053 D8          1907*                  RET	C
002054 D6 30       1908*                  SUB	'0'
002056 C9          1909*                  RET
002057             1910*  ;
002057 FD 7E 00    1911*  HEXDIG:         LD	A,(IY)
00205A FE 30       1912*                  CP	'0'
00205C D8          1913*                  RET	C
00205D FE 3A       1914*                  CP	'9'+1
00205F 3F          1915*                  CCF
002060 D0          1916*                  RET	NC
002061 FE 41       1917*                  CP	'A'
002063 D8          1918*                  RET	C
002064 D6 37       1919*                  SUB	'A'-10
002066 FE 10       1920*                  CP	16
002068 3F          1921*                  CCF
002069 C9          1922*                  RET
00206A             1923*  ;
00206A FE 3E       1924*  RELOPQ:         CP	'>'
00206C D0          1925*                  RET	NC
00206D FE 3D       1926*                  CP	'='
00206F D0          1927*                  RET	NC
002070 FE 3C       1928*                  CP	'<'
002072 C9          1929*                  RET
002073             1930*  ;
002073 FD 23       1931*  SAVEev:           INC	IY
002075 E6 0F       1932*                  AND	0FH
002077 08          1933*  SAVE1:          EX	AF,AF'
002078 FA 6E 18    1934*                  JP	M,MISMATev
00207B 08          1935*                  EX	AF,AF'
00207C E3          1936*                  EX	(SP),HL
00207D D9          1937*                  EXX
00207E E5          1938*                  PUSH	HL
00207F D9          1939*                  EXX
002080 F5          1940*                  PUSH	AF
002081 C5          1941*                  PUSH	BC
002082 E9          1942*                  JP	(HL)
002083             1943*  ;
002083 08          1944*  DOIT:           EX	AF,AF'
002084 FA 6E 18    1945*                  JP	M,MISMATev
002087 D9          1946*                  EXX
002088 C1          1947*                  POP	BC		;RETURN ADDRESS
002089 D9          1948*                  EXX
00208A 79          1949*                  LD	A,C
00208B C1          1950*                  POP	BC
00208C 47          1951*                  LD	B,A
00208D F1          1952*                  POP	AF		;OPERATOR
00208E D9          1953*                  EXX
00208F EB          1954*                  EX	DE,HL
002090 E1          1955*                  POP	HL
002091 D9          1956*                  EXX
002092 EB          1957*                  EX	DE,HL
002093 E1          1958*                  POP	HL
002094 D9          1959*                  EXX
002095 C5          1960*                  PUSH	BC
002096 D9          1961*                  EXX
002097 CD 15 45    1962*                  CALL	FPP
00209A 38 1C       1963*                  JR	C,ERROR1ev
00209C AF          1964*                  XOR	A
00209D 08          1965*                  EX	AF,AF'		;TYPE
00209E FD 7E 00    1966*                  LD	A,(IY)
0020A1 C9          1967*                  RET
0020A2             1968*  ;
0020A2 CD 0B 45    1969*  COMMA:          CALL	NXT
0020A5 FD 23       1970*                  INC	IY
0020A7 FE 2C       1971*                  CP	','
0020A9 C8          1972*                  RET	Z
0020AA 3E 05       1973*                  LD	A,5
0020AC 18 0A       1974*                  JR	ERROR1ev		;"Missing ,"
0020AE             1975*  ;
0020AE CD 0B 45    1976*  BRAKET:         CALL	NXT
0020B1 FD 23       1977*                  INC	IY
0020B3 FE 29       1978*                  CP	')'
0020B5 C8          1979*                  RET	Z
0020B6 3E 1B       1980*                  LD	A,27
0020B8 C3 44 3F    1981*  ERROR1ev:         JP	ERROR_		;"Missing )"
0020BB             1982*  ;
0020BB E5          1983*  DISPT2:         PUSH	HL
0020BC 21 F6 16    1984*                  LD	HL,SOPTBL
0020BF 18 06       1985*                  JR	DISPT0
0020C1             1986*  ;
0020C1 E5          1987*  DISPATev:         PUSH	HL
0020C2 D6 8D       1988*                  SUB	FUNTOK
0020C4 21 82 16    1989*                  LD	HL,FUNTBL
0020C7 C5          1990*  DISPT0:         PUSH	BC
0020C8 87          1991*                  ADD	A,A
0020C9 4F          1992*                  LD	C,A
0020CA 06 00       1993*                  LD	B,0
0020CC 09          1994*                  ADD	HL,BC
0020CD 7E          1995*                  LD	A,(HL)
0020CE 23          1996*                  INC	HL
0020CF 66          1997*                  LD	H,(HL)
0020D0 6F          1998*                  LD	L,A
0020D1 C1          1999*                  POP	BC
0020D2 E3          2000*                  EX	(SP),HL
0020D3 C9          2001*                  RET			;OFF TO ROUTINE
0020D4             2002*  ;
0020D4 7A          2003*  STOREA:         LD	A,D
0020D5 D5          2004*                  PUSH	DE
0020D6 E5          2005*                  PUSH	HL
0020D7 DD E3       2006*                  EX	(SP),IX
0020D9 B7          2007*                  OR	A
0020DA FA EB 20    2008*                  JP	M,STORA1
0020DD CD 25 19    2009*                  CALL	LOADN
0020E0 DD E3       2010*                  EX	(SP),IX
0020E2 CD CE 31    2011*                  CALL	MODIFY
0020E5 E1          2012*                  POP	HL
0020E6 D1          2013*                  POP	DE
0020E7 4A          2014*                  LD	C,D
0020E8 06 00       2015*                  LD	B,0
0020EA C9          2016*                  RET
0020EB             2017*  ;
0020EB D5          2018*  STORA1:         PUSH	DE
0020EC CD 0E 1A    2019*                  CALL	LOADS
0020EF E1          2020*                  POP	HL
0020F0 DD E3       2021*                  EX	(SP),IX
0020F2 CD 18 32    2022*                  CALL	MODIFS
0020F5 E1          2023*                  POP	HL
0020F6 D1          2024*                  POP	DE
0020F7 01 04 00    2025*                  LD	BC,4
0020FA C9          2026*                  RET
0020FB             2027*  ;
0020FB             2028*  ; Assign to whole array:
0020FB             2029*  ; array1() = array expression
0020FB             2030*  ; array1() = n1,n2,n3,n4...
0020FB             2031*  ; array1() = n (n copied into all elements)
0020FB             2032*  ;
0020FB             2033*  ; Inputs: D = type (65, 68, 69, 193)
0020FB             2034*  ;         E = opcode ('=' for store, '+','-' etc. for modify)
0020FB             2035*  ;         HL = IX = VARPTR
0020FB             2036*  ;         IY = text pointer
0020FB             2037*  ;
0020FB CB B2       2038*  LETARR:         RES	6,D		;Lose array marker
0020FD D5          2039*                  PUSH	DE		;Save type & opcode
0020FE CD CD 19    2040*                  CALL	GETAR1		;Get and check indirect link
002101 CD A4 19    2041*                  CALL	ARRLEN		;DE = elements, HL addresses first
002104 C1          2042*                  POP	BC
002105 78          2043*                  LD	A,B		;A = type
002106 D5          2044*                  PUSH	DE
002107 C5          2045*                  PUSH	BC
002108 E5          2046*                  PUSH	HL
002109 CD AD 36    2047*                  CALL	X14OR5		;DE = size in bytes
00210C 42          2048*                  LD	B,D
00210D 4B          2049*                  LD	C,E
00210E DD E1       2050*                  POP	IX
002110 D1          2051*                  POP	DE
002111             2052*  ;
002111             2053*  ; (SP) = number of elements
002111             2054*  ; BC = size in bytes
002111             2055*  ; DE = type & opcode
002111             2056*  ; IX = address of first element
002111             2057*  ;
002111             2058*  ; allocate space on stack and zero it:
002111             2059*  ;
002111 AF          2060*                  XOR	A		;Clear carry and zero error code
002112 ED 62       2061*                  SBC	HL,HL
002114 39          2062*                  ADD	HL,SP		;HL = SP
002115 ED 42       2063*                  SBC	HL,BC
002117 38 9F       2064*                  JR	C,ERROR1ev	;'No room'
002119 C5          2065*                  PUSH	BC
00211A ED 4B E0 54 2066*                  LD	BC,(FREE)
00211E 04          2067*                  INC	B		;Safety margin
00211F ED 42       2068*                  SBC	HL,BC
002121 09          2069*                  ADD	HL,BC
002122 C1          2070*                  POP	BC
002123 38 93       2071*                  JR	C,ERROR1ev	;'No room'
002125 F9          2072*                  LD	SP,HL
002126 36 00       2073*  LETA0:          LD	(HL),0
002128 23          2074*                  INC	HL
002129 0B          2075*                  DEC	BC
00212A 78          2076*                  LD	A,B
00212B B1          2077*                  OR	C
00212C 20 F8       2078*                  JR	NZ,LETA0	;Clear allocated stack
00212E 4E          2079*                  LD	C,(HL)
00212F 23          2080*                  INC	HL
002130 46          2081*                  LD	B,(HL)
002131 67          2082*                  LD	H,A
002132 6F          2083*                  LD	L,A
002133 39          2084*                  ADD	HL,SP
002134             2085*  ;
002134             2086*  ;	CALL	NXT
002134             2087*  ;	CP	TEVAL		;;EVAL not currently supported
002134             2088*  ;
002134 CD 3C 21    2089*                  CALL	EXPRA
002137 F9          2090*                  LD	SP,HL		;Update stack pointer
002138 C1          2091*                  POP	BC		;Level stack
002139 C3 99 24    2092*                  JP	XEQ
00213C             2093*  ;
00213C             2094*  ; EXPRA - Evaluate array expression, strictly left-to-right;
00213C             2095*  ; Note: String array arithmetic (concatenation) is not supported
00213C             2096*  ; because it would require a way of recovering freed string space.
00213C             2097*  ;
00213C             2098*  ;   Inputs: BC = number of elements
00213C             2099*  ;           DE = type & opcode
00213C             2100*  ;           HL = address of temporary stack space
00213C             2101*  ;           IX = address of first element of array
00213C             2102*  ;  Outputs: HL = value to set stack pointer to
00213C             2103*  ;
00213C 3E 3D       2104*  EXPRA:          LD	A,'='
00213E FD 2B       2105*                  DEC	IY
002140 FD 23       2106*  EXPRA1:         INC	IY
002142 D5          2107*                  PUSH	DE
002143 C5          2108*                  PUSH	BC
002144 E5          2109*                  PUSH	HL
002145 DD E5       2110*                  PUSH	IX
002147 5F          2111*                  LD	E,A		;Operator
002148 CD B6 21    2112*                  CALL	ITEMA
00214B DD E1       2113*                  POP	IX
00214D E1          2114*                  POP	HL
00214E C1          2115*                  POP	BC
00214F D1          2116*                  POP	DE
002150 CD 0B 45    2117*                  CALL	NXT
002153 FE 2C       2118*                  CP	','		;List?
002155 28 13       2119*                  JR	Z,EXPRA3
002157 CD 36 35    2120*                  CALL	TERMQ
00215A 20 E4       2121*                  JR	NZ,EXPRA1
00215C             2122*  ;
00215C             2123*  ; Update destination array from stack:
00215C             2124*  ;
00215C C5          2125*  EXPRA2:         PUSH	BC
00215D CD D4 20    2126*                  CALL	STOREA		;(IX) <- (HL)
002160 09          2127*                  ADD	HL,BC
002161 DD 09       2128*                  ADD	IX,BC
002163 C1          2129*                  POP	BC
002164 0B          2130*                  DEC	BC
002165 78          2131*                  LD	A,B
002166 B1          2132*                  OR	C
002167 20 F3       2133*                  JR	NZ,EXPRA2
002169 C9          2134*                  RET
00216A             2135*  ;
00216A             2136*  ; Update destination array from list (n.b. not transferred via stack):
00216A             2137*  ;
00216A C5          2138*  EXPRA3:         PUSH	BC
00216B CD D4 20    2139*                  CALL	STOREA		;(IX) <- (HL)
00216E FD 23       2140*  EXPRA4:         INC	IY		;Bump past comma
002170 09          2141*                  ADD	HL,BC
002171 DD 09       2142*                  ADD	IX,BC
002173 C1          2143*                  POP	BC
002174 0B          2144*                  DEC	BC
002175 78          2145*                  LD	A,B
002176 B1          2146*                  OR	C
002177 C8          2147*                  RET	Z
002178 C5          2148*                  PUSH	BC
002179 D5          2149*                  PUSH	DE
00217A E5          2150*                  PUSH	HL
00217B DD E5       2151*                  PUSH	IX
00217D CB 7A       2152*                  BIT	7,D
00217F 20 0E       2153*                  JR	NZ,EXPRA5
002181 D5          2154*                  PUSH	DE
002182 CD 2C 18    2155*                  CALL	EXPRN
002185 D1          2156*                  POP	DE
002186 DD E1       2157*                  POP	IX
002188 DD E5       2158*                  PUSH	IX
00218A CD CE 31    2159*                  CALL	MODIFY
00218D 18 0C       2160*                  JR	EXPRA6
00218F             2161*  ;
00218F D5          2162*  EXPRA5:         PUSH	DE
002190 CD 3C 18    2163*                  CALL	EXPRS
002193 E1          2164*                  POP	HL
002194 DD E1       2165*                  POP	IX
002196 DD E5       2166*                  PUSH	IX
002198 CD 18 32    2167*                  CALL	MODIFS
00219B DD E1       2168*  EXPRA6:         POP	IX
00219D E1          2169*                  POP	HL
00219E D1          2170*                  POP	DE
00219F 01 04 00    2171*                  LD	BC,4
0021A2 CB 7A       2172*                  BIT	7,D
0021A4 20 01       2173*                  JR	NZ,EXPRA7
0021A6 4A          2174*                  LD	C,D
0021A7 CD 0B 45    2175*  EXPRA7:         CALL	NXT
0021AA FE 2C       2176*                  CP	','
0021AC 28 C0       2177*                  JR	Z,EXPRA4
0021AE D1          2178*                  POP	DE
0021AF 09          2179*  EXPRA8:         ADD	HL,BC		;Skip remaining elements
0021B0 1B          2180*                  DEC	DE
0021B1 7A          2181*                  LD	A,D
0021B2 B3          2182*                  OR	E
0021B3 20 FA       2183*                  JR	NZ,EXPRA8
0021B5 C9          2184*                  RET
0021B6             2185*  ;
0021B6             2186*  ; ITEMA: evaluate and operate on array item
0021B6             2187*  ;   Inputs: D = type
0021B6             2188*  ;           E = operator ('=' for first item)
0021B6             2189*  ;           BC = number of elements
0021B6             2190*  ;           HL = pointer to destination on stack
0021B6             2191*  ;           IY = text pointer
0021B6             2192*  ;  Outputs: IY updated
0021B6             2193*  ; Destroys: Everything except SP
0021B6             2194*  ;
0021B6 CD 0B 45    2195*  ITEMA:          CALL	NXT
0021B9 E5          2196*                  PUSH	HL		;Pointer to destination
0021BA C5          2197*                  PUSH	BC		;Number of elements
0021BB FD E5       2198*                  PUSH	IY		;In case normal expression
0021BD D5          2199*                  PUSH	DE		;Ditto
0021BE FE 2D       2200*                  CP	'-'
0021C0 20 0C       2201*                  JR	NZ,ITEMA1	;Not unary minus
0021C2 7B          2202*                  LD	A,E
0021C3 FE 3D       2203*                  CP	'='
0021C5 20 07       2204*                  JR	NZ,ITEMA1	;Not unary minus
0021C7 FD 23       2205*                  INC	IY		;Bump past '-'
0021C9 CD 0B 45    2206*                  CALL	NXT
0021CC 1E 2D       2207*                  LD	E,'-'		;Unary minus
0021CE D5          2208*  ITEMA1:         PUSH	DE		;Type and operator
0021CF CD E3 41    2209*                  CALL	GETVAR
0021D2 D1          2210*                  POP	DE		;Type & operator
0021D3 20 56       2211*                  JR	NZ,ITEMA4	;Non-array expression
0021D5 CB 77       2212*                  BIT	6,A
0021D7 28 52       2213*                  JR	Z,ITEMA4	;Not a whole array
0021D9 C1          2214*                  POP	BC		;Junk saved original op
0021DA C1          2215*                  POP	BC		;Junk saved text pointer
0021DB CB B7       2216*                  RES	6,A
0021DD BA          2217*                  CP	D
0021DE C2 6E 18    2218*                  JP	NZ,MISMATev	;'Type mismatch'
0021E1 D5          2219*                  PUSH	DE		;Save type & operator again
0021E2 CD CD 19    2220*                  CALL	GETAR1
0021E5 CD A4 19    2221*                  CALL	ARRLEN
0021E8 42          2222*                  LD	B,D		;BC = number of elements
0021E9 4B          2223*                  LD	C,E
0021EA D1          2224*                  POP	DE		;Restore type & operator
0021EB E3          2225*                  EX	(SP),HL
0021EC CD 0B 45    2226*                  CALL	NXT
0021EF DD E1       2227*                  POP	IX		;Pointer to source
0021F1 FE 2E       2228*                  CP	'.'
0021F3 CA 83 22    2229*                  JP	Z,ARRDOT	;Dot product
0021F6 B7          2230*                  OR	A
0021F7 ED 42       2231*                  SBC	HL,BC		;Same number of elements?
0021F9 C2 6E 18    2232*                  JP	NZ,MISMATev	;'Type mismatch'
0021FC E1          2233*                  POP	HL		;Pointer to destination
0021FD CB 7A       2234*                  BIT	7,D
0021FF 20 1D       2235*                  JR	NZ,ITEMA3
002201             2236*  ;
002201             2237*  ; Process numeric array item:
002201             2238*  ;
002201 C5          2239*  ITEMA2:         PUSH	BC
002202 E5          2240*                  PUSH	HL
002203 7A          2241*                  LD	A,D
002204 CD 25 19    2242*                  CALL	LOADN
002207 DD E3       2243*                  EX	(SP),IX
002209 D5          2244*                  PUSH	DE
00220A CD CE 31    2245*                  CALL	MODIFY
00220D D1          2246*                  POP	DE
00220E DD E3       2247*                  EX	(SP),IX
002210 E1          2248*                  POP	HL
002211 4A          2249*                  LD	C,D
002212 06 00       2250*                  LD	B,0
002214 DD 09       2251*                  ADD	IX,BC
002216 09          2252*                  ADD	HL,BC
002217 C1          2253*                  POP	BC
002218 0B          2254*                  DEC	BC
002219 78          2255*                  LD	A,B
00221A B1          2256*                  OR	C
00221B 20 E4       2257*                  JR	NZ,ITEMA2
00221D C9          2258*                  RET
00221E             2259*  ;
00221E             2260*  ; Process string array item (just copy descriptors):
00221E             2261*  ;
00221E EB          2262*  ITEMA3:         EX	DE,HL		;DE = destination
00221F 60          2263*                  LD	H,B
002220 69          2264*                  LD	L,C
002221 29          2265*                  ADD	HL,HL
002222 29          2266*                  ADD	HL,HL
002223 44          2267*                  LD	B,H
002224 4D          2268*                  LD	C,L
002225 DD E5       2269*                  PUSH	IX
002227 E1          2270*                  POP	HL		;HL = source
002228 ED B0       2271*                  LDIR
00222A C9          2272*                  RET
00222B             2273*  ;
00222B             2274*  ; Process numeric non-array item:
00222B             2275*  ;
00222B D1          2276*  ITEMA4:         POP	DE		;Restore original operator
00222C FD E1       2277*                  POP	IY		;Restore original text pointer
00222E CB 7A       2278*                  BIT	7,D
002230 20 28       2279*                  JR	NZ,ITEMA5
002232 D5          2280*                  PUSH	DE
002233 CD 0B 18    2281*                  CALL	EXPR45		;; should be EXP345
002236 79          2282*                  LD	A,C		;Exponent
002237 D1          2283*                  POP	DE		;Type / operator
002238 C1          2284*                  POP	BC		;Count
002239 DD E1       2285*                  POP	IX
00223B E5          2286*  ITEMA7:         PUSH	HL
00223C C5          2287*                  PUSH	BC
00223D D5          2288*                  PUSH	DE
00223E D9          2289*                  EXX
00223F E5          2290*                  PUSH	HL
002240 D9          2291*                  EXX
002241 F5          2292*                  PUSH	AF
002242 4F          2293*                  LD	C,A
002243 CD CE 31    2294*                  CALL	MODIFY
002246 F1          2295*                  POP	AF
002247 D9          2296*                  EXX
002248 E1          2297*                  POP	HL
002249 D9          2298*                  EXX
00224A D1          2299*                  POP	DE
00224B 4A          2300*                  LD	C,D
00224C 06 00       2301*                  LD	B,0
00224E DD 09       2302*                  ADD	IX,BC
002250 C1          2303*                  POP	BC
002251 0B          2304*                  DEC	BC
002252 ED 62       2305*                  SBC	HL,HL
002254 ED 42       2306*                  SBC	HL,BC
002256 E1          2307*                  POP	HL
002257 20 E2       2308*                  JR	NZ,ITEMA7	;Copy into every element!
002259 C9          2309*                  RET
00225A             2310*  ;
00225A             2311*  ; Process string non-array item:
00225A             2312*  ;
00225A CD 3C 18    2313*  ITEMA5:         CALL	EXPRS
00225D 7B          2314*                  LD	A,E
00225E B7          2315*                  OR	A
00225F 28 0B       2316*                  JR	Z,ITEMA0
002261 21 00 52    2317*                  LD	HL,ACCS
002264 11 00 53    2318*                  LD	DE,BUFFER
002267 4F          2319*                  LD	C,A
002268 06 00       2320*                  LD	B,0
00226A ED B0       2321*                  LDIR
00226C C1          2322*  ITEMA0:         POP	BC
00226D DD E1       2323*                  POP	IX
00226F D9          2324*                  EXX
002270 6F          2325*                  LD	L,A
002271 D9          2326*                  EXX
002272 11 04 00    2327*                  LD	DE,4
002275 21 00 53    2328*                  LD	HL,BUFFER
002278 CD 09 32    2329*  ITEMA6:         CALL	STORE4
00227B DD 19       2330*                  ADD	IX,DE
00227D 0B          2331*                  DEC	BC
00227E 78          2332*                  LD	A,B
00227F B1          2333*                  OR	C
002280 20 F6       2334*                  JR	NZ,ITEMA6	;Copy into every element!
002282 C9          2335*                  RET
002283             2336*  ;
002283             2337*  ; Array dot-product:
002283             2338*  ;
002283 FD 23       2339*  ARRDOT:         INC	IY		;Bump past dot
002285 7A          2340*                  LD	A,D		;Type
002286 B7          2341*                  OR	A
002287 FA 6E 18    2342*                  JP	M,MISMATev	;'Type mismatch'
00228A EB          2343*                  EX	DE,HL
00228B E1          2344*                  POP	HL
00228C             2345*  ;
00228C             2346*  ; A = type
00228C             2347*  ; DE = no. of elements in destination array (outer loop counter)
00228C             2348*  ; IX = pointer to first source array data
00228C             2349*  ; HL = pointer to destination data
00228C             2350*  ; IY = text pointer
00228C             2351*  ;
00228C D5          2352*                  PUSH	DE
00228D E5          2353*                  PUSH	HL
00228E DD E5       2354*                  PUSH	IX
002290 F5          2355*                  PUSH	AF
002291 CD BD 19    2356*                  CALL	GETARR
002294 CD A4 19    2357*                  CALL	ARRLEN
002297 F1          2358*                  POP	AF
002298 EB          2359*                  EX	DE,HL
002299 DD 6E 00    2360*                  LD	L,(IX)
00229C DD 66 01    2361*                  LD	H,(IX+1)	;Indirect pointer
00229F 6E          2362*                  LD	L,(HL)		;No. of dimensions
0022A0 2D          2363*                  DEC	L
0022A1 EB          2364*                  EX	DE,HL
0022A2 DD E1       2365*                  POP	IX
0022A4 C1          2366*                  POP	BC
0022A5 D1          2367*                  POP	DE
0022A6             2368*  ;
0022A6 FD E5       2369*                  PUSH	IY		;Save text pointer
0022A8 C5          2370*                  PUSH	BC		;Save destination pointer
0022A9 E5          2371*                  PUSH	HL
0022AA FD E1       2372*                  POP	IY
0022AC             2373*  ;
0022AC             2374*  ; Get row counts:
0022AC             2375*  ;
0022AC 21 01 00    2376*                  LD	HL,1
0022AF 28 06       2377*                  JR	Z,ARR1D
0022B1 FD 66 FF    2378*                  LD	H,(IY-1)
0022B4 FD 6E FE    2379*                  LD	L,(IY-2)
0022B7 D5          2380*  ARR1D:          PUSH	DE
0022B8 EB          2381*                  EX	DE,HL
0022B9 CD AD 36    2382*                  CALL	X14OR5
0022BC EB          2383*                  EX	DE,HL
0022BD D1          2384*                  POP	DE
0022BE DD 46 FF    2385*                  LD	B,(IX-1)
0022C1 DD 4E FE    2386*                  LD	C,(IX-2)
0022C4             2387*  ;
0022C4             2388*  ; A = type, Z-flag set if first array is one-dimensional
0022C4             2389*  ; BC = no. of rows of first source array (inner loop counter)
0022C4             2390*  ; DE = no. of elements in destination array (outer loop counter)
0022C4             2391*  ; HL = no. of rows of second source array * size of each element
0022C4             2392*  ; IX = pointer to first source array
0022C4             2393*  ; IY = pointer to second source array
0022C4             2394*  ; (SP) = pointer to destination data
0022C4             2395*  ;
0022C4             2396*  ; Dot-product outer loop:
0022C4             2397*  ;
0022C4 C5          2398*  OUTER:          PUSH	BC		;1
0022C5 D5          2399*                  PUSH	DE		;2
0022C6 E5          2400*                  PUSH	HL		;3
0022C7 DD E5       2401*                  PUSH	IX		;4
0022C9 FD E5       2402*                  PUSH	IY		;5
0022CB 50          2403*                  LD	D,B
0022CC 59          2404*                  LD	E,C
0022CD F5          2405*                  PUSH	AF
0022CE CD F8 1F    2406*                  CALL	ZERO		;Zero accumulator
0022D1 F1          2407*                  POP	AF
0022D2 D5          2408*  INNER:          PUSH	DE		;6
0022D3 C5          2409*                  PUSH	BC		;Save accumulator
0022D4 E5          2410*                  PUSH	HL
0022D5 D9          2411*                  EXX
0022D6 E5          2412*                  PUSH	HL
0022D7 D9          2413*                  EXX
0022D8             2414*  ;
0022D8 CD 25 19    2415*                  CALL	LOADN		;Load from (IX)
0022DB DD E5       2416*                  PUSH	IX
0022DD FD E3       2417*                  EX	(SP),IY
0022DF DD E1       2418*                  POP	IX
0022E1             2419*  ;
0022E1 CD E7 19    2420*                  CALL	DLOADN		;Load from (IY)
0022E4 DD E5       2421*                  PUSH	IX
0022E6 FD E3       2422*                  EX	(SP),IY
0022E8 DD E1       2423*                  POP	IX
0022EA             2424*  ;
0022EA F5          2425*                  PUSH	AF
0022EB 3E 0A       2426*                  LD	A,10
0022ED CD 15 45    2427*                  CALL	FPP		;Multiply
0022F0 DA 44 3F    2428*                  JP	C,ERROR_
0022F3 F1          2429*                  POP	AF
0022F4             2430*  ;
0022F4 D9          2431*                  EXX			;Restore accumulator
0022F5 EB          2432*                  EX	DE,HL
0022F6 E1          2433*                  POP	HL
0022F7 D9          2434*                  EXX
0022F8 EB          2435*                  EX	DE,HL
0022F9 E1          2436*                  POP	HL
0022FA 08          2437*                  EX	AF,AF'
0022FB 79          2438*                  LD	A,C
0022FC C1          2439*                  POP	BC
0022FD 47          2440*                  LD	B,A
0022FE 08          2441*                  EX	AF,AF'
0022FF             2442*  ;
0022FF F5          2443*                  PUSH	AF
002300 3E 0B       2444*                  LD	A,11
002302 CD 15 45    2445*                  CALL	FPP		;Accumulate
002305 DA 44 3F    2446*                  JP	C,ERROR_
002308 F1          2447*                  POP	AF
002309             2448*  ;
002309             2449*  ; Bump pointers:
002309             2450*  ;
002309 D1          2451*                  POP	DE		;5
00230A             2452*  ;
00230A D9          2453*                  EXX
00230B 4F          2454*                  LD	C,A
00230C 06 00       2455*                  LD	B,0
00230E DD 09       2456*                  ADD	IX,BC
002310 D1          2457*                  POP	DE
002311 C1          2458*                  POP	BC
002312 E3          2459*                  EX	(SP),HL
002313 EB          2460*                  EX	DE,HL
002314 FD 19       2461*                  ADD	IY,DE
002316 EB          2462*                  EX	DE,HL
002317 E3          2463*                  EX	(SP),HL
002318 C5          2464*                  PUSH	BC
002319 D5          2465*                  PUSH	DE
00231A D9          2466*                  EXX
00231B             2467*  ;
00231B             2468*  ; Count inner loops:
00231B             2469*  ;
00231B 1B          2470*                  DEC	DE		;Inner loop counter
00231C 1C          2471*                  INC	E
00231D 1D          2472*                  DEC	E
00231E 20 B2       2473*                  JR	NZ,INNER
002320 14          2474*                  INC	D
002321 15          2475*                  DEC	D
002322 20 AE       2476*                  JR	NZ,INNER
002324             2477*  ;
002324 FD E1       2478*                  POP	IY		;4
002326 DD E1       2479*                  POP	IX		;3
002328             2480*  ;
002328             2481*  ; Swap pointers:
002328             2482*  ;
002328 D9          2483*                  EXX
002329 08          2484*                  EX	AF,AF'
00232A F1          2485*                  POP	AF
00232B C1          2486*                  POP	BC
00232C D1          2487*                  POP	DE
00232D DD E3       2488*                  EX	(SP),IX
00232F D5          2489*                  PUSH	DE
002330 C5          2490*                  PUSH	BC
002331 F5          2491*                  PUSH	AF
002332 08          2492*                  EX	AF,AF'
002333 D9          2493*                  EXX
002334             2494*  ;
002334             2495*  ; Save to destination array and bump pointer:
002334             2496*  ;
002334 F5          2497*                  PUSH	AF
002335 D5          2498*                  PUSH	DE
002336 CD F0 31    2499*                  CALL	STOREN
002339 D1          2500*                  POP	DE
00233A F1          2501*                  POP	AF
00233B 4F          2502*                  LD	C,A
00233C 06 00       2503*                  LD	B,0
00233E DD 09       2504*                  ADD	IX,BC
002340             2505*  ;
002340             2506*  ; Swap pointers:
002340             2507*  ;
002340 D9          2508*                  EXX
002341 08          2509*                  EX	AF,AF'
002342 F1          2510*                  POP	AF
002343 C1          2511*                  POP	BC
002344 D1          2512*                  POP	DE
002345 DD E3       2513*                  EX	(SP),IX
002347 D5          2514*                  PUSH	DE
002348 C5          2515*                  PUSH	BC
002349 F5          2516*                  PUSH	AF
00234A 08          2517*                  EX	AF,AF'
00234B D9          2518*                  EXX
00234C             2519*  ;
00234C E1          2520*                  POP	HL		;2
00234D D1          2521*                  POP	DE		;1 Outer loop counter
00234E C1          2522*                  POP	BC		;0
00234F 1B          2523*                  DEC	DE		;Count outer loops
002350             2524*  ;
002350             2525*  ; Adjust IX & IY
002350             2526*  ;
002350 C5          2527*                  PUSH	BC
002351 D5          2528*                  PUSH	DE
002352 E5          2529*                  PUSH	HL
002353 4F          2530*                  LD	C,A
002354 06 00       2531*                  LD	B,0
002356 FD 09       2532*                  ADD	IY,BC
002358 F5          2533*                  PUSH	AF
002359 E5          2534*                  PUSH	HL
00235A CD AD 36    2535*                  CALL	X14OR5
00235D C1          2536*                  POP	BC
00235E CD 90 23    2537*                  CALL	MOD16
002361 F1          2538*                  POP	AF
002362 B7          2539*                  OR	A
002363 01 00 00    2540*                  LD	BC,0
002366 ED 42       2541*                  SBC	HL,BC
002368 E1          2542*                  POP	HL
002369 D1          2543*                  POP	DE
00236A C1          2544*                  POP	BC
00236B 20 15       2545*                  JR	NZ,MODNZ
00236D D5          2546*                  PUSH	DE
00236E E5          2547*                  PUSH	HL
00236F EB          2548*                  EX	DE,HL
002370 FD E5       2549*                  PUSH	IY
002372 E1          2550*                  POP	HL
002373 B7          2551*                  OR	A
002374 ED 52       2552*                  SBC	HL,DE
002376 E5          2553*                  PUSH	HL
002377 FD E1       2554*                  POP	IY
002379 50          2555*                  LD	D,B
00237A 59          2556*                  LD	E,C
00237B CD AD 36    2557*                  CALL	X14OR5
00237E DD 19       2558*                  ADD	IX,DE
002380 E1          2559*                  POP	HL
002381 D1          2560*                  POP	DE
002382             2561*  MODNZ:
002382             2562*  ;
002382             2563*  ; Count outer loops:
002382             2564*  ;
002382 1C          2565*                  INC	E
002383 1D          2566*                  DEC	E
002384 C2 C4 22    2567*                  JP	NZ,OUTER
002387 14          2568*                  INC	D
002388 15          2569*                  DEC	D
002389 C2 C4 22    2570*                  JP	NZ,OUTER
00238C             2571*  ;
00238C             2572*  ; Exit:
00238C             2573*  ;
00238C E1          2574*                  POP	HL
00238D FD E1       2575*                  POP	IY
00238F C9          2576*                  RET
002390             2577*  ;
002390             2578*  ; HL = DE MOD BC
002390             2579*  ;
002390 AF          2580*  MOD16:          XOR	A
002391 67          2581*                  LD	H,A
002392 6F          2582*                  LD	L,A
002393 3E 11       2583*                  LD	A,17
002395 ED 42       2584*  MOD160:         SBC	HL,BC
002397 30 01       2585*                  JR	NC,MOD161
002399 09          2586*                  ADD	HL,BC
00239A 3F          2587*  MOD161:         CCF
00239B CB 13       2588*                  RL	E
00239D CB 12       2589*                  RL	D
00239F 3D          2590*                  DEC	A
0023A0 C8          2591*                  RET	Z
0023A1 ED 6A       2592*                  ADC	HL,HL
0023A3 18 F0       2593*                  JR	MOD160
0023A5             2594*  ;
0023A5             2595*  ;                END
0023A5             2596*  ;    include "eval.inc"
0023A5             0017       include "exec.asm"
0023A5             0001*  ;
0023A5             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
0023A5             0003*  ;
0023A5             0004*                  .ASSUME ADL = 0
0023A5             0005*  ;	.ORG 0x0000
0023A5             0006*  ;                SEGMENT CODE
0023A5             0007*  ;
0023A5             0008*  ;BBC BASIC INTERPRETER - Z80 VERSION
0023A5             0009*  ;STATEMENT EXECUTION MODULE - "EXEC"
0023A5             0010*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0023A5             0011*  ;
0023A5             0012*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0023A5             0013*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0023A5             0014*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0023A5             0015*  ;
0023A5             0016*  ;VERSION 2.1, 22-01-1984
0023A5             0017*  ;VERSION 3.1, 11-06-1987
0023A5             0018*  ;VERSION 5.0, 12-07-2024
0023A5             0019*  ;
0023A5             0020*  ;                XDEF	XEQ
0023A5             0021*  ;                XDEF	RUN0
0023A5             0022*  ;                XDEF	CHAIN0
0023A5             0023*  ;                XDEF	CHECK
0023A5             0024*  ;                XDEF	MUL16
0023A5             0025*  ;                XDEF	X14OR5
0023A5             0026*  ;                XDEF	TERMQ
0023A5             0027*  ;                XDEF	STOREN
0023A5             0028*  ;                XDEF	STORE4
0023A5             0029*  ;                XDEF	STORE5
0023A5             0030*  ;                XDEF	STACCS
0023A5             0031*  ;                XDEF	SPACES
0023A5             0032*  ;                XDEF	FN
0023A5             0033*  ;                XDEF	USR
0023A5             0034*  ;                XDEF	ESCAPE
0023A5             0035*  ;                XDEF	SYNTAX
0023A5             0036*  ;                XDEF	CHANEL
0023A5             0037*  ;                XDEF	CHNL
0023A5             0038*  ;                XDEF	VAR_
0023A5             0039*  ;                XDEF	TABIT
0023A5             0040*  ;                XDEF	MODIFY
0023A5             0041*  ;                XDEF	MODIFS
0023A5             0042*  ;
0023A5             0043*  ;                XREF	ASSEM
0023A5             0044*  ;                XREF	ERROR_
0023A5             0045*  ;                XREF	REPORT
0023A5             0046*  ;                XREF	WARM
0023A5             0047*  ;                XREF	CLOOP
0023A5             0048*  ;                XREF	SAYLN
0023A5             0049*  ;                XREF	LOAD0
0023A5             0050*  ;                XREF	CRLF
0023A5             0051*  ;                XREF	PBCDL
0023A5             0052*  ;                XREF	TELL
0023A5             0053*  ;                XREF	FINDL
0023A5             0054*  ;                XREF	SETLIN
0023A5             0055*  ;                XREF	CLEAR
0023A5             0056*  ;                XREF	GETVAR
0023A5             0057*  ;                XREF	PUTVAR
0023A5             0058*  ;                XREF	GETDEF
0023A5             0059*  ;                XREF	LOCATE
0023A5             0060*  ;                XREF	CREATE
0023A5             0061*  ;                XREF	OUTCHR
0023A5             0062*  ;                XREF	EXTERR
0023A5             0063*  ;                XREF	BYE
0023A5             0064*  ;                XREF	NXT
0023A5             0065*  ;                XREF	NLIST
0023A5             0066*  ;                XREF	CSRON
0023A5             0067*  ;                XREF	CSROFF
0023A5             0068*  ;
0023A5             0069*  ;                XREF	OSWRCH
0023A5             0070*  ;                XREF	OSLINE
0023A5             0071*  ;                XREF	OSSHUT
0023A5             0072*  ;                XREF	OSBPUT
0023A5             0073*  ;                XREF	OSBGET
0023A5             0074*  ;                XREF	CLRSCN
0023A5             0075*  ;                XREF	PUTCSR
0023A5             0076*  ;                XREF	PUTIME
0023A5             0077*  ;                XREF	PUTIMS
0023A5             0078*  ;                XREF	PUTPTR
0023A5             0079*  ;                XREF	OSCALL
0023A5             0080*  ;                XREF	OSCLI
0023A5             0081*  ;                XREF	TRAP
0023A5             0082*  ;
0023A5             0083*  ;                XREF	SOUND
0023A5             0084*  ;                XREF	CLG
0023A5             0085*  ;                XREF	DRAW
0023A5             0086*  ;                XREF	ENVEL
0023A5             0087*  ;                XREF	GCOL
0023A5             0088*  ;                XREF	MODE
0023A5             0089*  ;                XREF	MOVE
0023A5             0090*  ;                XREF	PLOT
0023A5             0091*  ;                XREF	COLOUR
0023A5             0092*  ;                XREF	CIRCLE
0023A5             0093*  ;                XREF	ELLIPS
0023A5             0094*  ;                XREF	FILL
0023A5             0095*  ;                XREF	MOUSE
0023A5             0096*  ;                XREF	ORIGIN
0023A5             0097*  ;                XREF	RECTAN
0023A5             0098*  ;                XREF	LINE
0023A5             0099*  ;                XREF	WAIT
0023A5             0100*  ;                XREF	TINT
0023A5             0101*  ;                XREF	SYS
0023A5             0102*  ;
0023A5             0103*  ;                XREF	STR
0023A5             0104*  ;                XREF	HEXSTR
0023A5             0105*  ;                XREF	EXPR
0023A5             0106*  ;                XREF	EXPRN
0023A5             0107*  ;                XREF	EXPRI
0023A5             0108*  ;                XREF	EXPRS
0023A5             0109*  ;                XREF	ITEMI
0023A5             0110*  ;                XREF	CONS
0023A5             0111*  ;                XREF	LOADS
0023A5             0112*  ;                XREF	VAL0
0023A5             0113*  ;                XREF	SFIX
0023A5             0114*  ;                XREF	TEST
0023A5             0115*  ;                XREF	LOAD4
0023A5             0116*  ;                XREF	LOADN
0023A5             0117*  ;                XREF	DLOAD5
0023A5             0118*  ;                XREF	FPP
0023A5             0119*  ;                XREF	COMMA
0023A5             0120*  ;                XREF	BRAKET
0023A5             0121*  ;                XREF	PUSHS
0023A5             0122*  ;                XREF	POPS
0023A5             0123*  ;                XREF	ZERO
0023A5             0124*  ;                XREF	SCP
0023A5             0125*  ;                XREF	LETARR
0023A5             0126*  ;
0023A5             0127*  ;                XREF	ACCS
0023A5             0128*  ;                XREF	PAGE_
0023A5             0129*  ;                XREF	LOMEM
0023A5             0130*  ;                XREF	HIMEM
0023A5             0131*  ;                XREF	FREE
0023A5             0132*  ;                XREF	BUFFER
0023A5             0133*  ;                XREF	ERRTRP
0023A5             0134*  ;                XREF	ONERSP
0023A5             0135*  ;                XREF	CURLIN
0023A5             0136*  ;                XREF	COUNT
0023A5             0137*  ;                XREF	WIDTH
0023A5             0138*  ;                XREF	STAVAR
0023A5             0139*  ;                XREF	DATPTR
0023A5             0140*  ;                XREF	RANDOM
0023A5             0141*  ;                XREF	TRACEN
0023A5             0142*  ;                XREF	LISTON
0023A5             0143*  ;                XREF	PC
0023A5             0144*  ;                XREF	OC
0023A5             0145*  ;
0023A5             0146*  ; LF             EQU	0AH	; in equs.inc
0023A5             0147*  ; CR             EQU	0DH	; in equs.inc
0023A5             0148*  ; IN main.asm
0023A5             0149*  ; TAND:           EQU	80H
0023A5             0150*  ; TOR:            EQU	84H
0023A5             0151*  ; TERROR:         EQU	85H
0023A5             0152*  ; TLINE:          EQU	86H
0023A5             0153*  TOFF:           EQU	87H
0023A5             0154*  TSTEP:          EQU	88H
0023A5             0155*  TSPC:           EQU	89H
0023A5             0156*  TTAB:           EQU	8AH
0023A5             0157*  ; TELSE:          EQU	8BH
0023A5             0158*  ; TTHEN:          EQU	8CH
0023A5             0159*  ; TLINO:          EQU	8DH
0023A5             0160*  ; TTO:            EQU	0B8H
0023A5             0161*  ; TBY:           EQU	0C0H
0023A5             0162*  ; TWHILE:         EQU	0C7H
0023A5             0163*  ; TWHEN:          EQU	0C9H
0023A5             0164*  ; TOF:            EQU	0CAH
0023A5             0165*  ; TENDCASE:       EQU	0CBH
0023A5             0166*  ; TOTHERWISE:     EQU	0CCH
0023A5             0167*  ; TENDIF:         EQU	0CDH
0023A5             0168*  ; TENDWHILE:      EQU	0CEH
0023A5             0169*  ; TCALL:          EQU	0D6H
0023A5             0170*  ; TDATA:          EQU	0DCH
0023A5             0171*  ; TDEF:           EQU	0DDH
0023A5             0172*  ; TFOR:           EQU	0E3H
0023A5             0173*  ; TGOSUB:         EQU	0E4H
0023A5             0174*  ; TGOTO:          EQU	0E5H
0023A5             0175*  ; TLOCAL:         EQU	0EAH
0023A5             0176*  ; TNEXT:          EQU	0EDH
0023A5             0177*  ; TON:            EQU	0EEH
0023A5             0178*  ; TPROC:          EQU	0F2H
0023A5             0179*  ; TREM:           EQU	0F4H
0023A5             0180*  ; TREPEAT:        EQU	0F5H
0023A5             0181*  TRETURN:        EQU	0F8H
0023A5             0182*  TSTOP:          EQU	0FAH
0023A5             0183*  ; TUNTIL:         EQU	0FDH
0023A5             0184*  ; TEXIT:          EQU	10H
0023A5             0185*  ; END in main.asm
0023A5             0186*  ;
0023A5 77 30       0187*  CMDTAB:         DW	LEFTSL
0023A7 8B 30       0188*                  DW	MIDSL
0023A9 81 30       0189*                  DW	RITESL
0023AB E0 25       0190*                  DW	SYNTAX	;STR$
0023AD E0 25       0191*                  DW	SYNTAX	;STRING$
0023AF E0 25       0192*                  DW	SYNTAX	;EOF
0023B1 E0 25       0193*                  DW	SYNTAX	;SUM
0023B3 26 2E       0194*                  DW	WHILE
0023B5 57 2D       0195*                  DW	CASE
0023B7 E0 25       0196*                  DW	SYNTAX	;WHEN
0023B9 E0 25       0197*                  DW	SYNTAX	;OF
0023BB 99 24       0198*                  DW	XEQ	;ENDCASE
0023BD E0 25       0199*                  DW	SYNTAX	;OTHERWISE
0023BF 99 24       0200*                  DW	XEQ	;ENDIF
0023C1 43 2E       0201*                  DW	ENDWHI	;ENDWHILE
0023C3 01 2F       0202*                  DW	PTR
0023C5 15 2F       0203*                  DW	PAGEV
0023C7 23 2F       0204*                  DW	TIMEV
0023C9 42 2F       0205*                  DW	LOMEMV
0023CB 54 2F       0206*                  DW	HIMEMV
0023CD 9D 02       0207*                  DW	SOUND
0023CF D3 2F       0208*                  DW	BPUT
0023D1 0C 30       0209*                  DW	CALL
0023D3 4C 24       0210*                  DW	CHAIN
0023D5 96 2E       0211*                  DW	CLR
0023D7 CB 2F       0212*                  DW	CLOSE
0023D9 E1 02       0213*                  DW	CLG
0023DB 75 2E       0214*                  DW	CLS
0023DD 31 25       0215*                  DW	REM		;DATA
0023DF 31 25       0216*                  DW	REM		;DEF
0023E1 3E 26       0217*                  DW	DIM
0023E3 E8 03       0218*                  DW	DRAW
0023E5 D3 24       0219*                  DW	END
0023E7 7D 2B       0220*                  DW	ENDPRO
0023E9 6F 02       0221*                  DW	ENVEL
0023EB 14 29       0222*                  DW	FORex
0023ED CB 28       0223*                  DW	GOSUB
0023EF B4 28       0224*                  DW	GOTO
0023F1 39 03       0225*                  DW	GCOL
0023F3 C9 2C       0226*                  DW	IF_
0023F5 E2 2B       0227*                  DW	INPUT
0023F7 A1 25       0228*                  DW	LET
0023F9 13 2B       0229*                  DW	LOCAL
0023FB D1 02       0230*                  DW	MODE
0023FD E4 03       0231*                  DW	MOVE
0023FF 61 29       0232*                  DW	NEXT
002401 3A 28       0233*                  DW	ON
002403 9C 2F       0234*                  DW	VDU
002405 F0 03       0235*                  DW	PLOT
002407 46 27       0236*                  DW	PRINT
002409 E7 29       0237*                  DW	PROC
00240B 80 2C       0238*                  DW	READ
00240D 31 25       0239*                  DW	REM
00240F E5 28       0240*                  DW	REPEAT
002411 91 2E       0241*                  DW	REPOR
002413 BC 2E       0242*                  DW	RESTOR
002415 D6 28       0243*                  DW	RETURN
002417 47 24       0244*                  DW	RUN
002419 7E 2E       0245*                  DW	STOP
00241B F9 02       0246*                  DW	COLOUR
00241D 83 2F       0247*                  DW	TRACE
00241F ED 28       0248*                  DW	UNTIL
002421 79 2F       0249*                  DW	WIDTHV
002423 08 25       0250*                  DW	CLI		;OSCLI
002425 31 25       0251*                  DW	REM		;NUL
002427 87 03       0252*                  DW	CIRCLE
002429 B3 03       0253*                  DW	ELLIPS
00242B EC 03       0254*                  DW	FILL
00242D A6 04       0255*                  DW	MOUSE
00242F E8 02       0256*                  DW	ORIGIN
002431 10 16       0257*                  DW	BYE		;QUIT
002433 25 04       0258*                  DW	RECTAN
002435 5E 25       0259*                  DW	SWAPex
002437 7D 05       0260*                  DW	SYS
002439 7D 05       0261*                  DW	TINT
00243B E5 04       0262*                  DW	WAIT
00243D E0 25       0263*                  DW	SYNTAX		;INSTALL
00243F 31 25       0264*                  DW	REM		;CR
002441 9D 31       0265*                  DW	PUT		;Token changed
002443 E0 25       0266*                  DW	SYNTAX		;BY
002445 23 31       0267*                  DW	EXITex
002447             0268*  ;
002447             0269*  CMDTAB_END:     EQU	$
002447             0270*  ; TLAST:          EQU	TCMD-128+(CMDTAB_END-CMDTAB)/2
002447             0271*  TLAST:          EQU	CMDTAB_END-CMDTAB/2+TCMD-128
002447             0272*  ;
002447 CD 36 35    0273*  RUN:            CALL	TERMQ
00244A 28 0D       0274*                  JR	Z,RUN0
00244C CD 3C 18    0275*  CHAIN:          CALL	EXPRS
00244F 3E 0D       0276*                  LD	A,CR
002451 12          0277*                  LD	(DE),A
002452 ED 7B E2 54 0278*  CHAIN0:         LD	SP,(HIMEM)
002456 CD 00 40    0279*                  CALL	LOAD0
002459 ED 7B E2 54 0280*  RUN0:           LD	SP,(HIMEM)	;PREPARE FOR RUN
00245D DD 21 F6 54 0281*                  LD	IX,RANDOM
002461 ED 5F       0282*  RAND:           LD	A,R		;RANDOMISE (CARE!)
002463 28 FC       0283*                  JR	Z,RAND
002465 07          0284*                  RLCA
002466 07          0285*                  RLCA
002467 DD 77 03    0286*                  LD	(IX+3),A
00246A 9F          0287*                  SBC	A,A
00246B DD 77 04    0288*                  LD	(IX+4),A
00246E CD 43 40    0289*                  CALL	CLEAR
002471 21 00 00    0290*                  LD	HL,0
002474 22 EA 54    0291*                  LD	(ERRTRP),HL
002477 2A DC 54    0292*                  LD	HL,(PAGE_)
00247A CD F9 35    0293*                  CALL	DSRCH		;LOOK FOR "DATA"
00247D 22 F0 54    0294*                  LD	(DATPTR),HL	;SET DATA POINTER
002480 FD 2A DC 54 0295*                  LD	IY,(PAGE_)
002484 CD DB 24    0296*  XEQ0:           CALL	NEWLIN
002487 FD 7E 00    0297*                  LD	A,(IY)
00248A FE 8B       0298*                  CP	TELSE
00248C CA 30 2D    0299*                  JP	Z,MELSE		;ELSE
00248F FE C9       0300*                  CP	TWHEN
002491 CA 43 2D    0301*                  JP	Z,WHEN		;WHEN
002494 FE CC       0302*                  CP	TOTHERWISE
002496 CA 43 2D    0303*                  JP	Z,WHEN
002499 FD 22 F4 54 0304*  XEQ:            LD	(CURLIN),IY	;ERROR POINTER
00249D CD 17 12    0305*                  CALL	TRAP		;CHECK KEYBOARD
0024A0 CD 0B 45    0306*  XEQ1:           CALL	NXT
0024A3 FD 23       0307*                  INC	IY
0024A5 FE 3A       0308*                  CP	':'		;SEPARATOR
0024A7 28 F7       0309*                  JR	Z,XEQ1
0024A9 FE 0D       0310*                  CP	CR
0024AB 28 D7       0311*                  JR	Z,XEQ0		;NEW PROGRAM LINE
0024AD FE 98       0312*                  CP	TLAST
0024AF EA 93 25    0313*                  JP	PE,LET0		;IMPLIED LET
0024B2 D6 C7       0314*                  SUB	TCMD
0024B4 FA 16 25    0315*                  JP	M,EXTRAS
0024B7 87          0316*                  ADD	A,A
0024B8 4F          0317*                  LD	C,A
0024B9 06 00       0318*                  LD	B,0
0024BB 21 A5 23    0319*                  LD	HL,CMDTAB
0024BE 09          0320*                  ADD	HL,BC
0024BF 7E          0321*                  LD	A,(HL)		;TABLE ENTRY
0024C0 23          0322*                  INC	HL
0024C1 66          0323*                  LD	H,(HL)
0024C2 6F          0324*                  LD	L,A
0024C3 CD 0B 45    0325*                  CALL	NXT
0024C6 E9          0326*                  JP	(HL)		;EXECUTE STATEMENT
0024C7             0327*  ;
0024C7             0328*  ;END
0024C7             0329*  ;
0024C7 FD E5       0330*  ENDIM:          PUSH	IY
0024C9 E1          0331*                  POP	HL
0024CA ED 4B DC 54 0332*                  LD	BC,(PAGE_)
0024CE ED 42       0333*                  SBC	HL,BC		;IMMEDIATE MODE ?
0024D0 DA B0 37    0334*                  JP	C,CLOOP
0024D3 1E 00       0335*  END:            LD	E,0
0024D5 CD 37 12    0336*                  CALL	OSSHUT		;CLOSE ALL FILES
0024D8 C3 AF 37    0337*                  JP	WARM		;"Ready"
0024DB             0338*  ;
0024DB FD 7E 00    0339*  NEWLIN:         LD	A,(IY+0)	;A=LINE LENGTH
0024DE 01 03 00    0340*                  LD	BC,3
0024E1 FD 09       0341*                  ADD	IY,BC
0024E3 B7          0342*                  OR	A
0024E4 28 E1       0343*                  JR	Z,ENDIM		;LENGTH=0, EXITex
0024E6 2A E6 54    0344*                  LD	HL,(TRACEN)
0024E9 7C          0345*                  LD	A,H
0024EA B5          0346*                  OR	L
0024EB C8          0347*                  RET	Z
0024EC FD 56 FF    0348*                  LD	D,(IY-1)	;DE = LINE NUMBER
0024EF FD 5E FE    0349*                  LD	E,(IY-2)
0024F2 ED 52       0350*                  SBC	HL,DE
0024F4 D8          0351*                  RET	C
0024F5 EB          0352*                  EX	DE,HL
0024F6 3E 5B       0353*                  LD	A,'['		;TRACE
0024F8 CD 02 41    0354*                  CALL	OUTCHR
0024FB CD 92 41    0355*                  CALL	PBCDL
0024FE 3E 5D       0356*                  LD	A,']'
002500 CD 02 41    0357*                  CALL	OUTCHR
002503 3E 20       0358*                  LD	A,' '
002505 C3 02 41    0359*                  JP	OUTCHR
002508             0360*  ;
002508             0361*  ;ROUTINES FOR EACH STATEMENT:
002508             0362*  ;
002508             0363*  ;OSCLI
002508             0364*  ;
002508 CD 3C 18    0365*  CLI:            CALL	EXPRS
00250B 3E 0D       0366*                  LD	A,CR
00250D 12          0367*                  LD	(DE),A
00250E 21 00 52    0368*                  LD	HL,ACCS
002511 CD 97 15    0369*                  CALL	OSCLI
002514 18 83       0370*                  JR	XEQ
002516             0371*  ;
002516 FE C4       0372*  EXTRAS:         CP	TELSE-TCMD
002518 28 17       0373*                  JR	Z,REM		;ELSE
00251A FE BE       0374*                  CP	TERROR-TCMD
00251C 28 21       0375*                  JR	Z,THROW		;ERROR
00251E FE BF       0376*                  CP	TLINE-TCMD
002520 CA 71 03    0377*                  JP	Z,LINE		;LINE
002523 FE C0       0378*                  CP	TOFF-TCMD
002525 CA 5A 03    0379*                  JP	Z,CSROFF	;OFF
002528 C3 E0 25    0380*                  JP	SYNTAX
00252B             0381*  ;
00252B             0382*  ;REM, *
00252B             0383*  ;
00252B FD E5       0384*  EXT:            PUSH	IY
00252D E1          0385*                  POP	HL
00252E CD 97 15    0386*                  CALL	OSCLI
002531 FD E5       0387*  REM:            PUSH	IY
002533 E1          0388*                  POP	HL
002534 3E 0D       0389*                  LD	A,CR
002536 47          0390*                  LD	B,A
002537 ED B1       0391*                  CPIR			;FIND LINE END
002539 E5          0392*                  PUSH	HL
00253A FD E1       0393*                  POP	IY
00253C C3 84 24    0394*                  JP	XEQ0
00253F             0395*  ;
00253F             0396*  ;ERROR num,string$
00253F             0397*  ;
00253F CD 33 18    0398*  THROW:          CALL	EXPRI
002542 D9          0399*                  EXX
002543 E5          0400*                  PUSH	HL
002544 D9          0401*                  EXX
002545 CD A2 20    0402*                  CALL	COMMA
002548 CD 3C 18    0403*                  CALL	EXPRS
00254B E1          0404*                  POP	HL
00254C AF          0405*                  XOR	A
00254D 12          0406*                  LD	(DE),A
00254E 7D          0407*                  LD	A,L
00254F 21 00 52    0408*                  LD	HL,ACCS
002552 11 00 53    0409*                  LD	DE,BUFFER
002555 D5          0410*                  PUSH	DE
002556 01 00 01    0411*                  LD	BC,256
002559 ED B0       0412*                  LDIR
00255B C3 55 3F    0413*                  JP	EXTERR
00255E             0414*  ;
00255E             0415*  ; SWAP
00255E             0416*  ;
00255E CD E3 41    0417*  SWAPex:           CALL	GETVAR
002561 20 0B       0418*                  JR	NZ,SWAPNZ
002563 F5          0419*                  PUSH	AF
002564 E5          0420*                  PUSH	HL
002565 CD A2 20    0421*                  CALL	COMMA
002568 CD 0B 45    0422*                  CALL	NXT
00256B CD E3 41    0423*                  CALL	GETVAR
00256E 20 6D       0424*  SWAPNZ:         JR	NZ,NOSUCH
002570 D1          0425*                  POP	DE
002571 C1          0426*                  POP	BC
002572 B8          0427*                  CP	B
002573 20 74       0428*                  JR	NZ,MISMAT
002575 E6 0F       0429*                  AND	00001111B
002577 28 70       0430*                  JR	Z,MISMAT
002579 78          0431*                  LD	A,B
00257A E6 C0       0432*                  AND	11000000B
00257C 28 0A       0433*                  JR	Z,SWAP1ex
00257E 06 02       0434*                  LD	B,2
002580 F2 88 25    0435*                  JP	P,SWAP1ex
002583 EA 88 25    0436*                  JP	PE,SWAP1ex
002586 06 04       0437*                  LD	B,4
002588 4E          0438*  SWAP1ex:          LD	C,(HL)
002589 1A          0439*                  LD	A,(DE)
00258A 77          0440*                  LD	(HL),A
00258B 79          0441*                  LD	A,C
00258C 12          0442*                  LD	(DE),A
00258D 13          0443*                  INC	DE
00258E 23          0444*                  INC	HL
00258F 10 F7       0445*                  DJNZ	SWAP1ex
002591 18 28       0446*                  JR	XEQGO4
002593             0447*  ;
002593             0448*  ;[LET] var = expr
002593             0449*  ;
002593 FE 2A       0450*  LET0:           CP	'*'
002595 28 94       0451*                  JR	Z,EXT
002597 FE 3D       0452*                  CP	'='
002599 28 71       0453*                  JR	Z,FNEND
00259B FE 5B       0454*                  CP	'['
00259D 28 52       0455*                  JR	Z,ASM
00259F FD 2B       0456*                  DEC	IY
0025A1 CD AF 31    0457*  LET:            CALL	ASSIGN
0025A4 CA 99 24    0458*                  JP	Z,XEQ
0025A7 38 37       0459*                  JR	C,SYNTAX	;"Syntax error"
0025A9 F2 FB 20    0460*                  JP	P,LETARR	;Numeric array
0025AC EA FB 20    0461*                  JP	PE,LETARR	;String array
0025AF 7A          0462*                  LD	A,D		;Type
0025B0 D5          0463*                  PUSH	DE
0025B1 E5          0464*                  PUSH	HL
0025B2 CD 3C 18    0465*                  CALL	EXPRS
0025B5 DD E1       0466*                  POP	IX
0025B7 E1          0467*                  POP	HL
0025B8 CD 18 32    0468*                  CALL	MODIFS
0025BB C3 99 24    0469*  XEQGO4:         JP	XEQ
0025BE             0470*  ;
0025BE             0471*  ; GETSTR - Get string variable
0025BE             0472*  ;   Inputs: IY = text pointer
0025BE             0473*  ;  Outputs: B = type
0025BE             0474*  ;           Z-flag set if comma
0025BE             0475*  ;
0025BE CD E3 41    0476*  GETSTR:         CALL	GETVAR
0025C1 20 1A       0477*                  JR	NZ,NOSUCH
0025C3 47          0478*                  LD	B,A
0025C4 E6 C0       0479*                  AND	11000000B
0025C6 F2 E9 25    0480*                  JP	P,MISMAT
0025C9 EA E6 25    0481*                  JP	PE,BADUSE
0025CC CB 40       0482*                  BIT	0,B
0025CE 28 19       0483*                  JR	Z,MISMAT
0025D0 CD 0B 45    0484*                  CALL	NXT
0025D3 FE 2C       0485*                  CP	','
0025D5 C9          0486*                  RET
0025D6             0487*  ;
0025D6 CD E3 41    0488*  VAR_:           CALL	GETVAR
0025D9 C8          0489*                  RET	Z
0025DA D2 CD 41    0490*                  JP	NC,PUTVAR
0025DD 3E 1A       0491*  NOSUCH:         LD	A,26		;'No such variable'
0025DF 21          0492*                  DB	21H
0025E0 3E 10       0493*  SYNTAX:         LD	A,16		;"Syntax error"
0025E2 21          0494*                  DB	21H
0025E3 3E 11       0495*  ESCAPE:         LD	A,17		;"Escape"
0025E5 21          0496*                  DB	21H
0025E6 3E 0E       0497*  BADUSE:         LD	A,14		;'Bad use of array'
0025E8 21          0498*                  DB	21H
0025E9 3E 06       0499*  MISMAT:         LD	A,6		;'Type mismatch'
0025EB C3 44 3F    0500*  ERROR0ex:         JP	ERROR_
0025EE             0501*  ;
0025EE CD DB 24    0502*  ASM0:           CALL	NEWLIN
0025F1 FD 22 F4 54 0503*  ASM:            LD	(CURLIN),IY
0025F5 CD 17 12    0504*                  CALL	TRAP
0025F8 CD 87 05    0505*                  CALL	ASSEM
0025FB 38 E3       0506*                  JR	C,SYNTAX
0025FD FE 0D       0507*                  CP	CR
0025FF 28 ED       0508*                  JR	Z,ASM0
002601 21 FE 54    0509*                  LD	HL,LISTON
002604 7E          0510*                  LD	A,(HL)
002605 E6 0F       0511*                  AND	0FH
002607 F6 30       0512*                  OR	30H
002609 77          0513*                  LD	(HL),A
00260A 18 AF       0514*                  JR	XEQGO4
00260C             0515*  ;
00260C             0516*  ;=
00260C             0517*  ;
00260C CD 02 17    0518*  FNEND:          CALL	EXPR		;FUNCTION RESULT
00260F 08          0519*                  EX	AF,AF'
002610 87          0520*                  ADD	A,A
002611 7B          0521*                  LD	A,E
002612 38 01       0522*                  JR	C,FNEND1
002614 79          0523*                  LD	A,C
002615 08          0524*  FNEND1:         EX	AF,AF'
002616 E5          0525*                  PUSH	HL
002617 D9          0526*                  EXX
002618 C1          0527*                  POP	BC
002619 EB          0528*                  EX	DE,HL		;SAVE RESULT IN A'B'C'D'E'
00261A D9          0529*                  EXX
00261B C1          0530*  FNEND2:         POP	BC
00261C 21 E7 29    0531*                  LD	HL,FNCHK
00261F AF          0532*                  XOR	A
002620 ED 42       0533*                  SBC	HL,BC
002622 28 0A       0534*                  JR	Z,FNEND3
002624 C5          0535*                  PUSH	BC
002625 CD 31 34    0536*                  CALL	RESLOC
002628 20 F1       0537*                  JR	NZ,FNEND2
00262A 3E 07       0538*                  LD	A,7
00262C 18 BD       0539*                  JR	ERROR0ex		;"No FN"
00262E             0540*  ;
00262E FD E1       0541*  FNEND3:         POP	IY
002630 FD 22 F4 54 0542*                  LD	(CURLIN),IY	;IN CASE OF ERROR
002634 D9          0543*                  EXX
002635 EB          0544*                  EX	DE,HL
002636 C5          0545*                  PUSH	BC
002637 D9          0546*                  EXX
002638 E1          0547*                  POP	HL
002639 08          0548*                  EX	AF,AF'
00263A 5F          0549*                  LD	E,A
00263B 4F          0550*                  LD	C,A
00263C 1F          0551*                  RRA
00263D C9          0552*                  RET
00263E             0553*  ;
00263E             0554*  ;DIM var(dim1[,dim2[,...]])[,var(...]
00263E             0555*  ;DIM var expr[,var expr...]
00263E             0556*  ;
00263E FD E5       0557*  DIM:            PUSH	IY
002640 FE 21       0558*                  CP	'!'
002642 CA 0F 27    0559*                  JP	Z,DIM4
002645 CD B0 42    0560*                  CALL	LOCATE		;VARIABLE
002648 DA F9 26    0561*                  JP	C,BADDIM
00264B C4 3C 43    0562*                  CALL	NZ,CREATE
00264E FD 7E 00    0563*                  LD	A,(IY)
002651 FE 28       0564*                  CP	'('
002653 C2 0F 27    0565*                  JP	NZ,DIM4
002656 E5          0566*                  PUSH	HL
002657 DD E1       0567*                  POP	IX
002659 7E          0568*                  LD	A,(HL)
00265A E6 FE       0569*                  AND	0FEH
00265C 23          0570*                  INC	HL
00265D B6          0571*                  OR	(HL)
00265E C2 0F 27    0572*                  JP	NZ,DIM4
002661 C1          0573*                  POP	BC		;LEVEL STACK
002662 7A          0574*                  LD	A,D
002663 2A E0 54    0575*                  LD	HL,(FREE)
002666 E5          0576*                  PUSH	HL
002667 DD E3       0577*                  EX	(SP),IX
002669 E5          0578*                  PUSH	HL
00266A F5          0579*                  PUSH	AF		;SAVE TYPE
00266B 11 01 00    0580*                  LD	DE,1
00266E 42          0581*                  LD	B,D		;DIMENSION COUNTER
00266F FD 23       0582*  DIM1:           INC	IY
002671 C5          0583*                  PUSH	BC
002672 D5          0584*                  PUSH	DE
002673 DD E5       0585*                  PUSH	IX
002675 CD 33 18    0586*                  CALL	EXPRI		;DIMENSION SIZE
002678 CB 7C       0587*                  BIT	7,H
00267A 20 7D       0588*                  JR	NZ,BADDIM
00267C D9          0589*                  EXX
00267D 23          0590*                  INC	HL
00267E DD E1       0591*                  POP	IX
002680 DD 23       0592*                  INC	IX
002682 DD 75 00    0593*                  LD	(IX),L		;SAVE SIZE
002685 DD 23       0594*                  INC	IX
002687 DD 74 00    0595*                  LD	(IX),H
00268A C1          0596*                  POP	BC
00268B CD BD 36    0597*                  CALL	MUL16		;HL=HL*BC
00268E 38 6C       0598*                  JR	C,NOROOM	;TOO LARGE
002690 EB          0599*                  EX	DE,HL		;DE=PRODUCT
002691 C1          0600*                  POP	BC
002692 04          0601*                  INC	B		;DIMENSION COUNTER
002693 FD 7E 00    0602*                  LD	A,(IY)
002696 FE 2C       0603*                  CP	','		;ANOTHER
002698 28 D5       0604*                  JR	Z,DIM1
00269A DD 23       0605*                  INC	IX
00269C CD AE 20    0606*                  CALL	BRAKET		;CLOSING BRACKET
00269F F1          0607*                  POP	AF		;RESTORE TYPE
0026A0 CD AD 36    0608*                  CALL	X14OR5		;DE=DE*n
0026A3 38 57       0609*                  JR	C,NOROOM
0026A5 E1          0610*                  POP	HL
0026A6 70          0611*                  LD	(HL),B		;NO. OF DIMENSIONS
0026A7 DD E3       0612*                  EX	(SP),IX
0026A9 E1          0613*                  POP	HL
0026AA E6 80       0614*                  AND	80H
0026AC DD B6 00    0615*                  OR	(IX)		;FLAGS
0026AF             0616*  ;
0026AF             0617*  ;  A = flags: bit 7 = string, bit 0 = LOCAL
0026AF             0618*  ; DE = amount to allocate
0026AF             0619*  ; HL = where to allocate (if not LOCAL)
0026AF             0620*  ; (HL - FREE is size of 'descriptor')
0026AF             0621*  ; IX = where to store pointer
0026AF             0622*  ;
0026AF E5          0623*  DIM3:           PUSH	HL
0026B0 24          0624*                  INC	H		;Safety margin
0026B1 19          0625*                  ADD	HL,DE
0026B2 38 48       0626*                  JR	C,NOROOM
0026B4 ED 72       0627*                  SBC	HL,SP
0026B6 30 44       0628*                  JR	NC,NOROOM
0026B8 E1          0629*                  POP	HL
0026B9 E5          0630*                  PUSH	HL
0026BA ED 4B E0 54 0631*                  LD	BC,(FREE)
0026BE B7          0632*                  OR	A
0026BF ED 42       0633*                  SBC	HL,BC
0026C1 44          0634*                  LD	B,H
0026C2 4D          0635*                  LD	C,L
0026C3 E1          0636*                  POP	HL
0026C4 ED 42       0637*                  SBC	HL,BC
0026C6 CB 47       0638*                  BIT	0,A
0026C8 28 12       0639*                  JR	Z,ARRCHK	;NOT LOCAL
0026CA 21 00 00    0640*                  LD	HL,0
0026CD ED 52       0641*                  SBC	HL,DE
0026CF B7          0642*                  OR	A
0026D0 ED 42       0643*                  SBC	HL,BC
0026D2 39          0644*                  ADD	HL,SP
0026D3 28 07       0645*                  JR	Z,ARRCHK	;RESERVE NOTHING
0026D5 F9          0646*                  LD	SP,HL
0026D6 D5          0647*                  PUSH	DE
0026D7 C5          0648*                  PUSH	BC
0026D8 F5          0649*                  PUSH	AF
0026D9 CD DC 26    0650*                  CALL	ARRCHK
0026DC DD 75 00    0651*  ARRCHK:         LD	(IX+0),L	;SAVE POINTER
0026DF DD 74 01    0652*                  LD	(IX+1),H
0026E2 78          0653*                  LD	A,B
0026E3 B1          0654*                  OR	C
0026E4 28 09       0655*                  JR	Z,DIM2
0026E6 D5          0656*                  PUSH	DE
0026E7 EB          0657*                  EX	DE,HL
0026E8 2A E0 54    0658*                  LD	HL,(FREE)
0026EB ED B0       0659*                  LDIR			;COPY DESCRIPTOR
0026ED EB          0660*                  EX	DE,HL
0026EE D1          0661*                  POP	DE
0026EF 7A          0662*  DIM2:           LD	A,D
0026F0 B3          0663*                  OR	E
0026F1 28 0E       0664*                  JR	Z,DIM5
0026F3 36 00       0665*                  LD	(HL),0		;INITIALISE ARRAY
0026F5 23          0666*                  INC	HL
0026F6 1B          0667*                  DEC	DE
0026F7 18 F6       0668*                  JR	DIM2
0026F9             0669*  ;
0026F9 3E 0A       0670*  BADDIM:         LD	A,10		;"Bad DIM"
0026FB 21          0671*                  DB	21H
0026FC 3E 0B       0672*  NOROOM:         LD	A,11		;"DIM space"
0026FE C3 44 3F    0673*  ERROR1ex:         JP	ERROR_
002701             0674*  ;
002701 ED 72       0675*  DIM5:           SBC	HL,SP
002703 30 04       0676*                  JR	NC,DIM7		;LOCAL
002705 39          0677*                  ADD	HL,SP
002706 22 E0 54    0678*                  LD	(FREE),HL
002709 CD 00 45    0679*  DIM7:           CALL	NLIST		;ANOTHER VARIABLE?
00270C C3 3E 26    0680*                  JP	DIM
00270F             0681*  ;
00270F FD E1       0682*  DIM4:           POP	IY
002711 CD D6 25    0683*                  CALL	VAR_
002714 B7          0684*                  OR	A
002715 28 E2       0685*                  JR	Z,BADDIM
002717 FA F9 26    0686*                  JP	M,BADDIM
00271A CB 77       0687*                  BIT	6,A
00271C 20 DB       0688*                  JR	NZ,BADDIM
00271E 47          0689*                  LD	B,A		;TYPE
00271F CD 0B 45    0690*                  CALL	NXT
002722 FE EA       0691*                  CP	TLOCAL
002724 3E 00       0692*                  LD	A,0		;PRESET TO NOT LOCAL
002726 20 03       0693*                  JR	NZ,DIM8
002728 FD 23       0694*                  INC	IY
00272A 3C          0695*                  INC	A		;FLAG LOCAL
00272B F5          0696*  DIM8:           PUSH	AF
00272C 78          0697*                  LD	A,B		;TYPE
00272D D9          0698*                  EXX
00272E 21 00 00    0699*                  LD	HL,0
002731 4C          0700*                  LD	C,H
002732 CD F0 31    0701*                  CALL	STOREN		;RESERVED AREA
002735 DD E5       0702*                  PUSH	IX
002737 CD 33 18    0703*                  CALL	EXPRI
00273A DD E1       0704*                  POP	IX
00273C D9          0705*                  EXX
00273D 23          0706*                  INC	HL
00273E EB          0707*                  EX	DE,HL
00273F 2A E0 54    0708*                  LD	HL,(FREE)
002742 F1          0709*                  POP	AF		;LOCAL FLAG
002743 C3 AF 26    0710*                  JP	DIM3
002746             0711*  ;
002746             0712*  ;PRINT list...
002746             0713*  ;PRINT #channel,list...
002746             0714*  ;
002746 FE 23       0715*  PRINT:          CP	'#'
002748 20 64       0716*                  JR	NZ,PRINT0
00274A CD DB 36    0717*                  CALL	CHNL		;CHANNEL NO. = E
00274D CD 00 45    0718*  PRNTN1:         CALL	NLIST
002750 D5          0719*                  PUSH	DE
002751 CD 02 17    0720*                  CALL	EXPR		;ITEM TO PRINT
002754 08          0721*                  EX	AF,AF'
002755 FA 75 27    0722*                  JP	M,PRNTN2	;STRING
002758 D1          0723*                  POP	DE
002759 C5          0724*                  PUSH	BC
00275A D9          0725*                  EXX
00275B 7D          0726*                  LD	A,L
00275C D9          0727*                  EXX
00275D CD 47 12    0728*                  CALL	OSBPUT
002760 D9          0729*                  EXX
002761 7C          0730*                  LD	A,H
002762 D9          0731*                  EXX
002763 CD 47 12    0732*                  CALL	OSBPUT
002766 7D          0733*                  LD	A,L
002767 CD 47 12    0734*                  CALL	OSBPUT
00276A 7C          0735*                  LD	A,H
00276B CD 47 12    0736*                  CALL	OSBPUT
00276E C1          0737*                  POP	BC
00276F 79          0738*                  LD	A,C
002770 CD 47 12    0739*                  CALL	OSBPUT
002773 18 D8       0740*                  JR	PRNTN1
002775 4B          0741*  PRNTN2:         LD	C,E
002776 D1          0742*                  POP	DE
002777 21 00 52    0743*                  LD	HL,ACCS
00277A 0C          0744*                  INC	C
00277B 0D          0745*  PRNTN3:         DEC	C
00277C 28 09       0746*                  JR	Z,PRNTN4
00277E 7E          0747*                  LD	A,(HL)
00277F 23          0748*                  INC	HL
002780 C5          0749*                  PUSH	BC
002781 CD 47 12    0750*                  CALL	OSBPUT
002784 C1          0751*                  POP	BC
002785 18 F4       0752*                  JR	PRNTN3
002787 3E 0D       0753*  PRNTN4:         LD	A,CR
002789 CD 47 12    0754*                  CALL	OSBPUT
00278C 18 BF       0755*                  JR	PRNTN1
00278E             0756*  ;
00278E 06 02       0757*  PRINT6:         LD	B,2
002790 18 22       0758*                  JR	PRINTC
002792 01 00 01    0759*  PRINT8:         LD	BC,100H
002795 18 1D       0760*                  JR	PRINTC
002797 21 00 54    0761*  PRINT9:         LD	HL,STAVAR
00279A AF          0762*                  XOR	A
00279B BE          0763*                  CP	(HL)
00279C 28 10       0764*                  JR	Z,PRINT0
00279E 3A FB 54    0765*                  LD	A,(COUNT)
0027A1 B7          0766*                  OR	A
0027A2 28 0A       0767*                  JR	Z,PRINT0
0027A4 96          0768*  PRINTA:         SUB	(HL)
0027A5 28 07       0769*                  JR	Z,PRINT0
0027A7 30 FB       0770*                  JR	NC,PRINTA
0027A9 ED 44       0771*                  NEG
0027AB CD A3 35    0772*                  CALL	SPACES
0027AE 3A 00 54    0773*  PRINT0:         LD	A,(STAVAR)
0027B1 4F          0774*                  LD	C,A		;PRINTS
0027B2 06 00       0775*                  LD	B,0		;PRINTF
0027B4 CD 36 35    0776*  PRINTC:         CALL	TERMQ
0027B7 28 38       0777*                  JR	Z,PRINT4
0027B9 CB 80       0778*                  RES	0,B
0027BB FD 23       0779*                  INC	IY
0027BD FE 7E       0780*                  CP	'~'
0027BF 28 CD       0781*                  JR	Z,PRINT6
0027C1 FE 3B       0782*                  CP	';'
0027C3 28 CD       0783*                  JR	Z,PRINT8
0027C5 FE 2C       0784*                  CP	','
0027C7 28 CE       0785*                  JR	Z,PRINT9
0027C9 CD 5C 35    0786*                  CALL	FORMAT		;SPC, TAB, '
0027CC 28 E6       0787*                  JR	Z,PRINTC
0027CE FD 2B       0788*                  DEC	IY
0027D0 C5          0789*                  PUSH	BC
0027D1 CD 02 17    0790*                  CALL	EXPR		;VARIABLE TYPE
0027D4 08          0791*                  EX	AF,AF'
0027D5 FA EB 27    0792*                  JP	M,PRINT3	;STRING
0027D8 D1          0793*                  POP	DE
0027D9 D5          0794*                  PUSH	DE
0027DA CB 4A       0795*                  BIT	1,D
0027DC F5          0796*                  PUSH	AF
0027DD CC D0 1F    0797*                  CALL	Z,STR		;DECIMAL
0027E0 F1          0798*                  POP	AF
0027E1 C4 8D 1F    0799*                  CALL	NZ,HEXSTR	;HEX
0027E4 C1          0800*                  POP	BC
0027E5 C5          0801*                  PUSH	BC
0027E6 79          0802*                  LD	A,C
0027E7 93          0803*                  SUB	E
0027E8 D4 A3 35    0804*                  CALL	NC,SPACES		;RIGHT JUSTIFY
0027EB C1          0805*  PRINT3:         POP	BC
0027EC CD B1 35    0806*                  CALL	PTEXT		;PRINT
0027EF 18 C3       0807*                  JR	PRINTC
0027F1 CB 40       0808*  PRINT4:         BIT	0,B
0027F3 CC FB 40    0809*                  CALL	Z,CRLF
0027F6 18 3F       0810*                  JR	XEQGO3
0027F8             0811*  ;
0027F8 FD 23       0812*  ONERR:          INC	IY		;SKIP "ERROR"
0027FA CD 0B 45    0813*                  CALL	NXT
0027FD 21 00 00    0814*                  LD	HL,0		;FLAG NOT LOCAL
002800 FE EA       0815*                  CP	TLOCAL
002802 20 1D       0816*                  JR	NZ,ONERR1
002804 FD 23       0817*                  INC	IY		;SKIP "LOCAL"
002806 2A EA 54    0818*                  LD	HL,(ERRTRP)
002809 E5          0819*                  PUSH	HL
00280A 2A EC 54    0820*                  LD	HL,(ONERSP)
00280D E5          0821*                  PUSH	HL
00280E 21 00 04    0822*                  LD	HL,400H		;TYPE = 4, 'EXPONENT' = 0
002811 E5          0823*                  PUSH	HL
002812 21 EA 54    0824*                  LD	HL,ERRTRP
002815 E5          0825*                  PUSH	HL
002816 21 2A 35    0826*                  LD	HL,LOCCHK
002819 E5          0827*                  PUSH	HL
00281A 21 00 00    0828*                  LD	HL,0
00281D 39          0829*                  ADD	HL,SP
00281E CD 0B 45    0830*                  CALL	NXT
002821 22 EC 54    0831*  ONERR1:         LD	(ONERSP),HL
002824 FD 22 EA 54 0832*                  LD	(ERRTRP),IY
002828 FE 87       0833*                  CP	TOFF
00282A C2 31 25    0834*                  JP	NZ,REM
00282D FD 23       0835*                  INC	IY		;SKIP "OFF"
00282F ED 62       0836*                  SBC	HL,HL
002831 22 EC 54    0837*                  LD	(ONERSP),HL
002834 22 EA 54    0838*                  LD	(ERRTRP),HL
002837 C3 99 24    0839*  XEQGO3:         JP	XEQ
00283A             0840*  ;
00283A             0841*  ;ON expr GOTO line[,line...] [ELSE statement]
00283A             0842*  ;ON expr GOTO line[,line...] [ELSE line]
00283A             0843*  ;ON expr GOSUB line[,line...] [ELSE statement]
00283A             0844*  ;ON expr GOSUB line[,line...] [ELSE line]
00283A             0845*  ;ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
00283A             0846*  ;ON ERROR [LOCAL] statement [:statement...]
00283A             0847*  ;ON ERROR [LOCAL] OFF
00283A             0848*  ;
00283A CD 36 35    0849*  ON:             CALL	TERMQ
00283D CA 56 03    0850*                  JP	Z,CSRON
002840 FE 85       0851*                  CP	TERROR
002842 28 B4       0852*                  JR	Z,ONERR		;"ON ERROR"
002844 CD 33 18    0853*                  CALL	EXPRI
002847 FD 7E 00    0854*                  LD	A,(IY)
00284A FD 23       0855*                  INC	IY
00284C 1E 2C       0856*                  LD	E,','		;SEPARATOR
00284E FE E5       0857*                  CP	TGOTO
002850 28 0B       0858*                  JR	Z,ON1
002852 FE E4       0859*                  CP	TGOSUB
002854 28 07       0860*                  JR	Z,ON1
002856 1E F2       0861*                  LD	E,TPROC
002858 BB          0862*                  CP	E
002859 3E 27       0863*                  LD	A,39
00285B 20 4F       0864*                  JR	NZ,ERROR2ex	;"ON syntax"
00285D 57          0865*  ON1:            LD	D,A
00285E D9          0866*                  EXX
00285F E5          0867*                  PUSH	HL
002860 D9          0868*                  EXX
002861 C1          0869*                  POP	BC		;ON INDEX
002862 78          0870*                  LD	A,B
002863 B4          0871*                  OR	H
002864 B5          0872*                  OR	L
002865 20 32       0873*                  JR	NZ,ON4		;OUT OF RANGE
002867 B1          0874*                  OR	C
002868 28 2F       0875*                  JR	Z,ON4
00286A 0D          0876*                  DEC	C
00286B 28 11       0877*                  JR	Z,ON3		;INDEX=1
00286D CD 36 35    0878*  ON2:            CALL	TERMQ
002870 28 27       0879*                  JR	Z,ON4		;OUT OF RANGE
002872 FD 23       0880*                  INC	IY		;SKIP DELIMITER
002874 FE 22       0881*                  CP	'"'
002876 28 1A       0882*                  JR	Z,ON5
002878 BB          0883*                  CP	E
002879 20 F2       0884*                  JR	NZ,ON2
00287B 0D          0885*                  DEC	C
00287C 20 EF       0886*                  JR	NZ,ON2
00287E 7B          0887*  ON3:            LD	A,E
00287F FE F2       0888*                  CP	TPROC
002881 28 2C       0889*                  JR	Z,ONPROC
002883 D5          0890*                  PUSH	DE
002884 CD 60 18    0891*                  CALL	ITEMI		;LINE NUMBER
002887 D1          0892*                  POP	DE
002888 7A          0893*                  LD	A,D
002889 FE E5       0894*                  CP	TGOTO
00288B 28 30       0895*                  JR	Z,GOTO2
00288D CD 42 35    0896*                  CALL	SPAN		;SKIP REST OF LIST
002890 18 3C       0897*                  JR	GOSUB1
002892             0898*  ;
002892 CD 99 36    0899*  ON5:            CALL	QUOTE
002895 FD 23       0900*                  INC	IY
002897 18 D4       0901*                  JR	ON2
002899             0902*  ;
002899 FD 7E 00    0903*  ON4:            LD	A,(IY)
00289C FD 23       0904*                  INC	IY
00289E FE 8B       0905*                  CP	TELSE
0028A0 CA E2 2C    0906*                  JP	Z,IF1		;ELSE CLAUSE
0028A3 FE 0D       0907*                  CP	CR
0028A5 20 F2       0908*                  JR	NZ,ON4
0028A7 3E 28       0909*                  LD	A,40		;'ON range'
0028A9 21          0910*                  DB	21H
0028AA 3E 22       0911*  FORVAR:         LD	A,34		;'FOR variable'
0028AC C3 44 3F    0912*  ERROR2ex:         JP	ERROR_
0028AF             0913*  ;
0028AF 3E EE       0914*  ONPROC:         LD	A,TON
0028B1 C3 E7 29    0915*                  JP	PROC
0028B4             0916*  ;
0028B4             0917*  ;GOTO line
0028B4             0918*  ;
0028B4 CD 60 18    0919*  GOTO:           CALL	ITEMI		;LINE NUMBER
0028B7 CD 36 35    0920*  GOTO1:          CALL	TERMQ
0028BA C2 E0 25    0921*                  JP	NZ,SYNTAX
0028BD D9          0922*  GOTO2:          EXX
0028BE CD 43 41    0923*                  CALL	FINDL
0028C1 E5          0924*                  PUSH	HL
0028C2 FD E1       0925*                  POP	IY
0028C4 CA 84 24    0926*                  JP	Z,XEQ0
0028C7 3E 29       0927*                  LD	A,41
0028C9 18 E1       0928*                  JR	ERROR2ex		;"No such line"
0028CB             0929*  ;
0028CB             0930*  ;GOSUB line
0028CB             0931*  ;
0028CB CD 60 18    0932*  GOSUB:          CALL	ITEMI		;LINE NUMBER
0028CE FD E5       0933*  GOSUB1:         PUSH	IY		;TEXT POINTER
0028D0 CD 86 32    0934*                  CALL	CHECK		;CHECK ROOM
0028D3 CD B7 28    0935*                  CALL	GOTO1		;SAVE MARKER
0028D6             0936*  GOSCHK:         EQU	$
0028D6             0937*  ;
0028D6             0938*  ;RETURN
0028D6             0939*  ;
0028D6 D1          0940*  RETURN:         POP	DE		;MARKER
0028D7 21 D6 28    0941*                  LD	HL,GOSCHK
0028DA B7          0942*                  OR	A
0028DB ED 52       0943*                  SBC	HL,DE
0028DD FD E1       0944*                  POP	IY
0028DF 28 30       0945*                  JR	Z,XEQGO2ex
0028E1 3E 26       0946*                  LD	A,38
0028E3 18 C7       0947*                  JR	ERROR2ex		;"No GOSUB"
0028E5             0948*  ;
0028E5             0949*  ;REPEAT
0028E5             0950*  ;
0028E5 FD E5       0951*  REPEAT:         PUSH	IY
0028E7 CD 86 32    0952*                  CALL	CHECK
0028EA CD 99 24    0953*                  CALL	XEQ
0028ED             0954*  REPCHK:         EQU	$
0028ED             0955*  ;
0028ED             0956*  ;UNTIL expr
0028ED             0957*  ;
0028ED C1          0958*  UNTIL:          POP	BC
0028EE C5          0959*                  PUSH	BC
0028EF 21 ED 28    0960*                  LD	HL,REPCHK
0028F2 B7          0961*                  OR	A
0028F3 ED 42       0962*                  SBC	HL,BC
0028F5 28 0B       0963*                  JR	Z,UNTIL1
0028F7 3E 03       0964*                  LD	A,3
0028F9 CD 31 34    0965*                  CALL	RESLOC
0028FC 20 EF       0966*                  JR	NZ,UNTIL
0028FE 3E 2B       0967*                  LD	A,43
002900 18 AA       0968*                  JR	ERROR2ex		;"Not in a REPEAT loop"
002902             0969*  ;
002902 CD 33 18    0970*  UNTIL1:         CALL	EXPRI
002905 CD 59 1F    0971*                  CALL	TEST
002908 C1          0972*                  POP	BC
002909 D1          0973*                  POP	DE
00290A 20 05       0974*                  JR	NZ,XEQGO2ex		;TRUE
00290C D5          0975*                  PUSH	DE
00290D C5          0976*                  PUSH	BC
00290E D5          0977*                  PUSH	DE
00290F FD E1       0978*                  POP	IY
002911 C3 99 24    0979*  XEQGO2ex:         JP	XEQ
002914             0980*  ;
002914             0981*  ;FOR var = expr TO expr [STEP expr]
002914             0982*  ;
002914 CD AF 31    0983*  FORex:            CALL	ASSIGN
002917 20 91       0984*                  JR	NZ,FORVAR	;"FOR variable"
002919 F5          0985*                  PUSH	AF		;SAVE TYPE
00291A FD 7E 00    0986*                  LD	A,(IY)
00291D FE B8       0987*                  CP	TTO
00291F 3E 24       0988*                  LD	A,36
002921 20 89       0989*                  JR	NZ,ERROR2ex	;"No TO"
002923 FD 23       0990*                  INC	IY
002925 DD E5       0991*                  PUSH	IX
002927 CD 2C 18    0992*                  CALL	EXPRN		;LIMIT
00292A DD E1       0993*                  POP	IX
00292C F1          0994*                  POP	AF
00292D 47          0995*                  LD	B,A		;TYPE
00292E C5          0996*                  PUSH	BC		;SAVE ON STACK
00292F E5          0997*                  PUSH	HL
002930 21 00 00    0998*                  LD	HL,0
002933 4C          0999*                  LD	C,H
002934 D9          1000*                  EXX
002935 E5          1001*                  PUSH	HL
002936 21 01 00    1002*                  LD	HL,1		;PRESET STEP
002939 D9          1003*                  EXX
00293A FD 7E 00    1004*                  LD	A,(IY)
00293D FE 88       1005*                  CP	TSTEP
00293F 20 09       1006*                  JR	NZ,FOR1
002941 FD 23       1007*                  INC	IY
002943 DD E5       1008*                  PUSH	IX
002945 CD 2C 18    1009*                  CALL	EXPRN		;STEP
002948 DD E1       1010*                  POP	IX
00294A 06 08       1011*  FOR1:           LD	B,8		;FPP '>'
00294C CB 7C       1012*                  BIT	7,H
00294E 20 02       1013*                  JR	NZ,FOR2		;STEP SIGN
002950 06 0C       1014*                  LD	B,12		;FPP '<'
002952 C5          1015*  FOR2:           PUSH	BC
002953 E5          1016*                  PUSH	HL
002954 D9          1017*                  EXX
002955 E5          1018*                  PUSH	HL
002956 D9          1019*                  EXX
002957 FD E5       1020*                  PUSH	IY		;SAVE TEXT POINTER
002959 DD E5       1021*                  PUSH	IX		;LOOP VARIABLE
00295B CD 86 32    1022*                  CALL	CHECK
00295E CD 99 24    1023*                  CALL	XEQ
002961             1024*  FORCHK:         EQU	$
002961             1025*  ;
002961             1026*  ;NEXT [var[,var...]]
002961             1027*  ;
002961 C1          1028*  NEXT:           POP	BC		;MARKER
002962 21 61 29    1029*                  LD	HL,FORCHK
002965 B7          1030*                  OR	A
002966 ED 42       1031*                  SBC	HL,BC
002968 28 0C       1032*                  JR	Z,NEXT2
00296A C5          1033*                  PUSH	BC
00296B 3E 03       1034*                  LD	A,3
00296D CD 31 34    1035*                  CALL	RESLOC
002970 20 EF       1036*                  JR	NZ,NEXT
002972 3E 20       1037*                  LD	A,32
002974 18 6A       1038*                  JR	ERROR3ex		;"Not in a FOR loop"
002976             1039*  ;
002976 CD 36 35    1040*  NEXT2:          CALL	TERMQ
002979 E1          1041*                  POP	HL
00297A E5          1042*                  PUSH	HL
00297B C5          1043*                  PUSH	BC
00297C E5          1044*                  PUSH	HL
00297D C4 E3 41    1045*                  CALL	NZ,GETVAR	;VARIABLE
002980 D1          1046*                  POP	DE
002981 EB          1047*                  EX	DE,HL
002982 B7          1048*                  OR	A
002983 ED 52       1049*  NEXT0:          SBC	HL,DE
002985 20 47       1050*                  JR	NZ,NEXT1
002987 D5          1051*                  PUSH	DE
002988 DD 21 08 00 1052*                  LD	IX,6+2
00298C DD 39       1053*                  ADD	IX,SP
00298E CD F1 19    1054*                  CALL	DLOAD5		;STEP
002991 DD 7E 0B    1055*                  LD	A,(IX+11)	;TYPE
002994 DD E1       1056*                  POP	IX
002996 CD 25 19    1057*                  CALL	LOADN		;LOOP VARIABLE
002999 F5          1058*                  PUSH	AF
00299A 3E 0B       1059*                  LD	A,'+' & 0FH
00299C CD 15 45    1060*                  CALL	FPP		;ADD STEP
00299F 38 3F       1061*                  JR	C,ERROR3ex
0029A1 F1          1062*                  POP	AF		;RESTORE TYPE
0029A2 CD F0 31    1063*                  CALL	STOREN		;UPDATE VARIABLE
0029A5 DD 21 0C 00 1064*                  LD	IX,12
0029A9 DD 39       1065*                  ADD	IX,SP
0029AB CD F1 19    1066*                  CALL	DLOAD5		;LIMIT
0029AE DD 7E FF    1067*                  LD	A,(IX-1)
0029B1 CD 15 45    1068*                  CALL	FPP		;TEST AGAINST LIMIT
0029B4 38 2A       1069*                  JR	C,ERROR3ex
0029B6 24          1070*                  INC	H
0029B7 20 0A       1071*                  JR	NZ,LOOP		;KEEP LOOPING
0029B9 21 12 00    1072*                  LD	HL,18
0029BC 39          1073*                  ADD	HL,SP
0029BD F9          1074*                  LD	SP,HL
0029BE CD 00 45    1075*                  CALL	NLIST
0029C1 18 9E       1076*                  JR	NEXT
0029C3             1077*  ;
0029C3 C1          1078*  LOOP:           POP	BC
0029C4 D1          1079*                  POP	DE
0029C5 FD E1       1080*                  POP	IY
0029C7 FD E5       1081*                  PUSH	IY
0029C9 D5          1082*                  PUSH	DE
0029CA C5          1083*                  PUSH	BC
0029CB C3 99 24    1084*                  JP	XEQ
0029CE             1085*  ;
0029CE 21 12 00    1086*  NEXT1:          LD	HL,18
0029D1 39          1087*                  ADD	HL,SP
0029D2 F9          1088*                  LD	SP,HL		;"POP" THE STACK
0029D3 C1          1089*                  POP	BC
0029D4 21 61 29    1090*                  LD	HL,FORCHK
0029D7 ED 42       1091*                  SBC	HL,BC
0029D9 E1          1092*                  POP	HL		;VARIABLE POINTER
0029DA E5          1093*                  PUSH	HL
0029DB C5          1094*                  PUSH	BC
0029DC 28 A5       1095*                  JR	Z,NEXT0
0029DE 3E 21       1096*                  LD	A,33
0029E0 C3 44 3F    1097*  ERROR3ex:         JP	ERROR_		;"Can't match FOR"
0029E3             1098*  ;
0029E3             1099*  ;FNname
0029E3             1100*  ;N.B. ENTERED WITH A <> TON
0029E3             1101*  ;
0029E3 F5          1102*  FN:             PUSH	AF		;MAKE SPACE ON STACK
0029E4 CD EB 29    1103*                  CALL	PROC1
0029E7             1104*  FNCHK:          EQU	$
0029E7             1105*  ;
0029E7             1106*  ;PROCname
0029E7             1107*  ;N.B. ENTERED WITH A = ON PROC FLAG
0029E7             1108*  ;
0029E7 F5          1109*  PROC:           PUSH	AF		;MAKE SPACE ON STACK
0029E8 CD EB 29    1110*                  CALL	PROC1
0029EB             1111*  PROCHK:         EQU	$
0029EB CD 86 32    1112*  PROC1:          CALL	CHECK
0029EE FD 2B       1113*                  DEC	IY
0029F0 FD E5       1114*                  PUSH	IY
0029F2 CD 96 42    1115*                  CALL	GETDEF
0029F5 C1          1116*                  POP	BC
0029F6 28 39       1117*                  JR	Z,PROC4
0029F8 3E 1E       1118*                  LD	A,30
0029FA 38 E4       1119*                  JR	C,ERROR3ex	;"Bad call"
0029FC C5          1120*                  PUSH	BC
0029FD 2A DC 54    1121*                  LD	HL,(PAGE_)
002A00 3E DD       1122*  PROC2:          LD	A,TDEF
002A02 CD FB 35    1123*                  CALL	SEARCHex		;LOOK FOR "DEF"
002A05 38 21       1124*                  JR	C,PROC3
002A07 E5          1125*                  PUSH	HL
002A08 FD E1       1126*                  POP	IY
002A0A FD 23       1127*                  INC	IY		;SKIP DEF
002A0C CD 0B 45    1128*                  CALL	NXT
002A0F CD 96 42    1129*                  CALL	GETDEF
002A12 FD E5       1130*                  PUSH	IY
002A14 D1          1131*                  POP	DE
002A15 38 09       1132*                  JR	C,PROC6
002A17 C4 3C 43    1133*                  CALL	NZ,CREATE
002A1A FD E5       1134*                  PUSH	IY
002A1C D1          1135*                  POP	DE
002A1D 73          1136*                  LD	(HL),E
002A1E 23          1137*                  INC	HL
002A1F 72          1138*                  LD	(HL),D		;SAVE ADDRESS
002A20 EB          1139*  PROC6:          EX	DE,HL
002A21 3E 0D       1140*                  LD	A,CR
002A23 47          1141*                  LD	B,A
002A24 ED B1       1142*                  CPIR			;SKIP TO END OF LINE
002A26 18 D8       1143*                  JR	PROC2
002A28 FD E1       1144*  PROC3:          POP	IY		;RESTORE TEXT POINTER
002A2A CD 96 42    1145*                  CALL	GETDEF
002A2D 3E 1D       1146*                  LD	A,29
002A2F 20 AF       1147*                  JR	NZ,ERROR3ex	;"No such FN/PROC"
002A31 5E          1148*  PROC4:          LD	E,(HL)
002A32 23          1149*                  INC	HL
002A33 56          1150*                  LD	D,(HL)		;GET ADDRESS
002A34 21 02 00    1151*                  LD	HL,2
002A37 39          1152*                  ADD	HL,SP
002A38 CD 0B 45    1153*                  CALL	NXT		;ALLOW SPACE BEFORE (
002A3B D5          1154*                  PUSH	DE		;EXCHANGE DE,IY
002A3C FD E3       1155*                  EX	(SP),IY
002A3E D1          1156*                  POP	DE
002A3F FE 28       1157*                  CP	'('		;ARGUMENTS?
002A41 C2 E5 2A    1158*                  JP	NZ,PROC5
002A44 CD 0B 45    1159*                  CALL	NXT		;ALLOW SPACE BEFORE (
002A47 FE 28       1160*                  CP	'('
002A49 C2 E0 25    1161*                  JP	NZ,SYNTAX	;"Syntax error"
002A4C FD E5       1162*                  PUSH	IY
002A4E C1          1163*                  POP	BC		;SAVE IY IN BC
002A4F D9          1164*                  EXX
002A50 08          1165*                  EX	AF,AF'
002A51 AF          1166*                  XOR	A		;INITIALISE RETURN COUNT
002A52 08          1167*                  EX	AF,AF'
002A53 CD BE 34    1168*                  CALL	SAVLOC		;SAVE DUMMY VARIABLES
002A56 08          1169*                  EX	AF,AF'
002A57 B7          1170*                  OR	A
002A58 28 16       1171*                  JR	Z,RETCHK	;NO RETURNS
002A5A E5          1172*                  PUSH	HL
002A5B ED 44       1173*                  NEG
002A5D 6F          1174*                  LD	L,A
002A5E ED 44       1175*                  NEG
002A60 26 FF       1176*                  LD	H,-1		;HL = -RETURNS
002A62 29          1177*                  ADD	HL,HL
002A63 29          1178*                  ADD	HL,HL
002A64 29          1179*                  ADD	HL,HL		;-RETURNS * 8
002A65 E3          1180*                  EX	(SP),HL
002A66 DD E1       1181*                  POP	IX
002A68 DD 39       1182*                  ADD	IX,SP
002A6A DD F9       1183*                  LD	SP,IX
002A6C F5          1184*                  PUSH	AF		;PUSH RETURN COUNT
002A6D CD 70 2A    1185*                  CALL	RETCHK		;PUSH MARKER
002A70 08          1186*  RETCHK:         EX	AF,AF'
002A71 CD AE 20    1187*                  CALL	BRAKET		;CLOSING BRACKET
002A74 D9          1188*                  EXX
002A75 C5          1189*                  PUSH	BC
002A76 FD E1       1190*                  POP	IY		;RESTORE IY
002A78 E5          1191*                  PUSH	HL
002A79 CD CD 32    1192*                  CALL	ARGUE		;TRANSFER ARGUMENTS
002A7C E1          1193*                  POP	HL
002A7D             1194*  ;
002A7D             1195*  ; If any of the dummy arguments is the same as a passed-by-reference
002A7D             1196*  ; variable, then it must not be restored on exit (it would overwrite
002A7D             1197*  ; the wanted returned values), therefore search the saved values on
002A7D             1198*  ; the stack and if a match is found set bit 4 of the type.  On exit
002A7D             1199*  ; from the FN/PROC this will prevent the dummies from being restored.
002A7D             1200*  ;
002A7D E3          1201*                  EX	(SP),HL
002A7E B7          1202*                  OR	A
002A7F 01 70 2A    1203*                  LD	BC,RETCHK
002A82 ED 42       1204*                  SBC	HL,BC
002A84 09          1205*                  ADD	HL,BC
002A85 E3          1206*                  EX	(SP),HL
002A86 20 5D       1207*                  JR	NZ,PROC5	;No RETURNs
002A88             1208*  ;
002A88 D5          1209*                  PUSH	DE
002A89 E5          1210*                  PUSH	HL
002A8A 21 07 00    1211*                  LD	HL,7		;Skip two PUSHes and RETCHK
002A8D 39          1212*                  ADD	HL,SP
002A8E 7E          1213*                  LD	A,(HL)		;RETURN count
002A8F 23          1214*                  INC	HL
002A90 E5          1215*                  PUSH	HL
002A91 DD E1       1216*                  POP	IX		;Address RETURNs table
002A93 5F          1217*  PROC0:          LD	E,A
002A94 16 00       1218*                  LD	D,0
002A96 EB          1219*                  EX	DE,HL
002A97 29          1220*                  ADD	HL,HL
002A98 29          1221*                  ADD	HL,HL
002A99 29          1222*                  ADD	HL,HL
002A9A 19          1223*                  ADD	HL,DE		;HL addresses SAVLOC stack
002A9B 23          1224*                  INC	HL
002A9C 23          1225*                  INC	HL		;Bump past LOCCHK
002A9D 5E          1226*  PROC7:          LD	E,(HL)
002A9E 23          1227*                  INC	HL
002A9F 56          1228*                  LD	D,(HL)		;DE = SAVLOC VARPTR
002AA0 23          1229*                  INC	HL
002AA1 4E          1230*                  LD	C,(HL)		;Length (if string)
002AA2 23          1231*                  INC	HL
002AA3 46          1232*                  LD	B,(HL)		;Variable type
002AA4             1233*  ;
002AA4             1234*  ; Scan RETURNs table for VARPTR match
002AA4             1235*  ;
002AA4 C5          1236*                  PUSH	BC		;Save type
002AA5 E5          1237*                  PUSH	HL
002AA6 DD E5       1238*                  PUSH	IX
002AA8 47          1239*                  LD	B,A		;B = RETURN count
002AA9 DD 6E 04    1240*  PROC8:          LD	L,(IX+4)
002AAC DD 66 05    1241*                  LD	H,(IX+5)	;HL = RETURNed VARPTR
002AAF B7          1242*                  OR	A
002AB0 ED 52       1243*                  SBC	HL,DE
002AB2 28 09       1244*                  JR	Z,PROC9
002AB4 EB          1245*                  EX	DE,HL
002AB5 11 08 00    1246*                  LD	DE,8
002AB8 DD 19       1247*                  ADD	IX,DE
002ABA EB          1248*                  EX	DE,HL
002ABB 10 EC       1249*                  DJNZ	PROC8
002ABD DD E1       1250*  PROC9:          POP	IX
002ABF E1          1251*                  POP	HL
002AC0 C1          1252*                  POP	BC		;Restore type
002AC1             1253*  ;
002AC1             1254*  ; If match, set bit 4 of type:
002AC1             1255*  ;
002AC1 20 02       1256*                  JR	NZ,PROCA
002AC3 CB E6       1257*                  SET	4,(HL)		;Flag don't restore
002AC5             1258*  ;
002AC5             1259*  ; Increment past stacked data:
002AC5             1260*  ;
002AC5 11 03 00    1261*  PROCA:          LD	DE,3
002AC8 CB 70       1262*                  BIT	6,B
002ACA 20 08       1263*                  JR	NZ,PROCB	;Whole array
002ACC 1E 05       1264*                  LD	E,5
002ACE CB 78       1265*                  BIT	7,B
002AD0 28 02       1266*                  JR	Z,PROCB		;Numeric
002AD2 59          1267*                  LD	E,C
002AD3 13          1268*                  INC	DE
002AD4 19          1269*  PROCB:          ADD	HL,DE
002AD5 4E          1270*                  LD	C,(HL)
002AD6 23          1271*                  INC	HL
002AD7 46          1272*                  LD	B,(HL)
002AD8 23          1273*                  INC	HL		; BC = marker ?
002AD9 EB          1274*                  EX	DE,HL
002ADA 21 2A 35    1275*                  LD	HL,LOCCHK
002ADD B7          1276*                  OR	A
002ADE ED 42       1277*                  SBC	HL,BC
002AE0 EB          1278*                  EX	DE,HL
002AE1 28 BA       1279*                  JR	Z,PROC7		;Another
002AE3 E1          1280*                  POP	HL
002AE4 D1          1281*                  POP	DE
002AE5             1282*  ;
002AE5 73          1283*  PROC5:          LD	(HL),E		;SAVE "RETURN ADDRESS"
002AE6 23          1284*                  INC	HL
002AE7 7E          1285*                  LD	A,(HL)
002AE8 72          1286*                  LD	(HL),D
002AE9 FE EE       1287*                  CP	TON		;WAS IT "ON PROC" ?
002AEB 20 0C       1288*                  JR	NZ,XEQGO
002AED D5          1289*                  PUSH	DE
002AEE FD E3       1290*                  EX	(SP),IY
002AF0 CD 42 35    1291*                  CALL	SPAN		;SKIP REST OF ON LIST
002AF3 FD E3       1292*                  EX	(SP),IY
002AF5 D1          1293*                  POP	DE
002AF6 72          1294*                  LD	(HL),D
002AF7 2B          1295*                  DEC	HL
002AF8 73          1296*                  LD	(HL),E
002AF9 C3 99 24    1297*  XEQGO:          JP	XEQ
002AFC             1298*  ;
002AFC FD 23       1299*  LOCERR:         INC	IY
002AFE 18 F9       1300*                  JR	XEQGO
002B00             1301*  ;
002B00             1302*  ;LOCAL DATA
002B00             1303*  ;
002B00 FD 23       1304*  LOCDAT:         INC	IY
002B02 2A F0 54    1305*                  LD	HL,(DATPTR)
002B05 E5          1306*                  PUSH	HL
002B06 3E 40       1307*                  LD	A,40H
002B08 F5          1308*                  PUSH	AF
002B09 21 F0 54    1309*                  LD	HL,DATPTR
002B0C E5          1310*                  PUSH	HL
002B0D 21 2A 35    1311*                  LD	HL,LOCCHK
002B10 E5          1312*                  PUSH	HL
002B11 18 E6       1313*                  JR	XEQGO
002B13             1314*  ;
002B13             1315*  ;LOCAL var[,var...]
002B13             1316*  ;
002B13 FE 85       1317*  LOCAL:          CP	TERROR
002B15 28 E5       1318*                  JR	Z,LOCERR
002B17 FE DC       1319*                  CP	TDATA
002B19 28 E5       1320*                  JR	Z,LOCDAT
002B1B C1          1321*                  POP	BC
002B1C C5          1322*                  PUSH	BC
002B1D 21 E7 29    1323*                  LD	HL,FNCHK
002B20 B7          1324*                  OR	A
002B21 ED 42       1325*                  SBC	HL,BC
002B23 28 23       1326*                  JR	Z,LOCAL1
002B25 21 EB 29    1327*                  LD	HL,PROCHK
002B28 B7          1328*                  OR	A
002B29 ED 42       1329*                  SBC	HL,BC
002B2B 28 1B       1330*                  JR	Z,LOCAL1
002B2D 21 2A 35    1331*                  LD	HL,LOCCHK
002B30 B7          1332*                  OR	A
002B31 ED 42       1333*                  SBC	HL,BC
002B33 28 13       1334*                  JR	Z,LOCAL1
002B35 21 DC 26    1335*                  LD	HL,ARRCHK
002B38 B7          1336*                  OR	A
002B39 ED 42       1337*                  SBC	HL,BC
002B3B 28 0B       1338*                  JR	Z,LOCAL1
002B3D 21 70 2A    1339*                  LD	HL,RETCHK
002B40 B7          1340*                  OR	A
002B41 ED 42       1341*                  SBC	HL,BC
002B43 3E 0C       1342*                  LD	A,12
002B45 C2 44 3F    1343*                  JP	NZ,ERROR_	;"Not LOCAL"
002B48 FD E5       1344*  LOCAL1:         PUSH	IY
002B4A C1          1345*                  POP	BC
002B4B D9          1346*                  EXX
002B4C FD 2B       1347*                  DEC	IY
002B4E CD BE 34    1348*                  CALL	SAVLOC
002B51 D9          1349*                  EXX
002B52 C5          1350*                  PUSH	BC
002B53 FD E1       1351*                  POP	IY
002B55 CD E3 41    1352*  LOCAL2:         CALL	GETVAR
002B58 C2 E0 25    1353*                  JP	NZ,SYNTAX
002B5B CB 77       1354*                  BIT	6,A		;ARRAY?
002B5D 20 14       1355*                  JR	NZ,LOCAL4
002B5F B7          1356*                  OR	A		;TYPE
002B60 08          1357*                  EX	AF,AF'
002B61 CD F8 1F    1358*                  CALL	ZERO
002B64 08          1359*                  EX	AF,AF'
002B65 F5          1360*                  PUSH	AF
002B66 F4 F0 31    1361*                  CALL	P,STOREN	;ZERO
002B69 F1          1362*                  POP	AF
002B6A 59          1363*                  LD	E,C
002B6B FC 41 32    1364*                  CALL	M,STORES
002B6E CD 00 45    1365*  LOCAL3:         CALL	NLIST
002B71 18 E2       1366*                  JR	LOCAL2
002B73             1367*  ;
002B73 DD 36 00 01 1368*  LOCAL4:         LD	(IX+0),1	;FLAG LOCAL ARRAY
002B77 DD 36 01 00 1369*                  LD	(IX+1),0
002B7B 18 F1       1370*                  JR	LOCAL3
002B7D             1371*  ;
002B7D             1372*  ;ENDPROC
002B7D             1373*  ;
002B7D C1          1374*  ENDPRO:         POP	BC
002B7E 21 EB 29    1375*                  LD	HL,PROCHK	;PROC MARKER
002B81 AF          1376*                  XOR	A
002B82 ED 42       1377*                  SBC	HL,BC
002B84 28 0B       1378*                  JR	Z,ENDPR1
002B86 C5          1379*                  PUSH	BC		;PUT BACK
002B87 CD 31 34    1380*                  CALL	RESLOC
002B8A 20 F1       1381*                  JR	NZ,ENDPRO
002B8C 3E 0D       1382*                  LD	A,13
002B8E C3 44 3F    1383*                  JP	ERROR_		;"No PROC"
002B91             1384*  ;
002B91 FD E1       1385*  ENDPR1:         POP	IY
002B93 C3 99 24    1386*  XEQGO6:         JP	XEQ
002B96             1387*  ;
002B96             1388*  ;INPUT #channel,var,var...
002B96             1389*  ;
002B96 CD DB 36    1390*  INPUTN:         CALL	CHNL		;E = CHANNEL NUMBER
002B99 CD 00 45    1391*  INPN1:          CALL	NLIST
002B9C D5          1392*                  PUSH	DE
002B9D CD D6 25    1393*                  CALL	VAR_
002BA0 D1          1394*                  POP	DE
002BA1 F5          1395*                  PUSH	AF		;SAVE TYPE
002BA2 E5          1396*                  PUSH	HL		;VARPTR
002BA3 B7          1397*                  OR	A
002BA4 FA C9 2B    1398*                  JP	M,INPN2		;STRING
002BA7 CD 3F 12    1399*                  CALL	OSBGET
002BAA D9          1400*                  EXX
002BAB 6F          1401*                  LD	L,A
002BAC D9          1402*                  EXX
002BAD CD 3F 12    1403*                  CALL	OSBGET
002BB0 D9          1404*                  EXX
002BB1 67          1405*                  LD	H,A
002BB2 D9          1406*                  EXX
002BB3 CD 3F 12    1407*                  CALL	OSBGET
002BB6 6F          1408*                  LD	L,A
002BB7 CD 3F 12    1409*                  CALL	OSBGET
002BBA 67          1410*                  LD	H,A
002BBB CD 3F 12    1411*                  CALL	OSBGET
002BBE 4F          1412*                  LD	C,A
002BBF DD E1       1413*                  POP	IX
002BC1 F1          1414*                  POP	AF		;RESTORE TYPE
002BC2 D5          1415*                  PUSH	DE		;SAVE CHANNEL
002BC3 CD F0 31    1416*                  CALL	STOREN
002BC6 D1          1417*                  POP	DE
002BC7 18 D0       1418*                  JR	INPN1
002BC9 21 00 52    1419*  INPN2:          LD	HL,ACCS
002BCC CD 3F 12    1420*  INPN3:          CALL	OSBGET
002BCF FE 0D       1421*                  CP	CR
002BD1 28 04       1422*                  JR	Z,INPN4
002BD3 77          1423*                  LD	(HL),A
002BD4 2C          1424*                  INC	L
002BD5 20 F5       1425*                  JR	NZ,INPN3
002BD7 DD E1       1426*  INPN4:          POP	IX
002BD9 F1          1427*                  POP	AF
002BDA D5          1428*                  PUSH	DE
002BDB EB          1429*                  EX	DE,HL
002BDC CD 3E 32    1430*                  CALL	STACCS
002BDF D1          1431*                  POP	DE
002BE0 18 B7       1432*                  JR	INPN1
002BE2             1433*  ;
002BE2             1434*  ;INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BE2             1435*  ;INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002BE2             1436*  ;
002BE2 FE 23       1437*  INPUT:          CP	'#'
002BE4 28 B0       1438*                  JR	Z,INPUTN
002BE6 0E 00       1439*                  LD	C,0		;FLAG PROMPT
002BE8 FE 86       1440*                  CP	TLINE
002BEA 20 04       1441*                  JR	NZ,INPUT0
002BEC FD 23       1442*                  INC	IY		;SKIP "LINE"
002BEE 0E 80       1443*                  LD	C,80H
002BF0 21 00 53    1444*  INPUT0:         LD	HL,BUFFER
002BF3 36 0D       1445*                  LD	(HL),CR		;INITIALISE EMPTY
002BF5 CD 36 35    1446*  INPUT1:         CALL	TERMQ
002BF8 28 99       1447*                  JR	Z,XEQGO6	;DONE
002BFA FD 23       1448*                  INC	IY
002BFC FE 2C       1449*                  CP	','
002BFE 28 51       1450*                  JR	Z,INPUT3	;SKIP COMMA
002C00 FE 3B       1451*                  CP	';'
002C02 28 4D       1452*                  JR	Z,INPUT3
002C04 E5          1453*                  PUSH	HL		;SAVE BUFFER POINTER
002C05 FE 22       1454*                  CP	'"'
002C07 20 0A       1455*                  JR	NZ,INPUT6
002C09 C5          1456*                  PUSH	BC
002C0A CD 7A 19    1457*                  CALL	CONS
002C0D C1          1458*                  POP	BC
002C0E CD B1 35    1459*                  CALL	PTEXT		;PRINT PROMPT
002C11 18 05       1460*                  JR	INPUT9
002C13 CD 5C 35    1461*  INPUT6:         CALL	FORMAT		;SPC, TAB, '
002C16 20 05       1462*                  JR	NZ,INPUT2
002C18 E1          1463*  INPUT9:         POP	HL
002C19 CB C1       1464*                  SET	0,C		;FLAG NO PROMPT
002C1B 18 D3       1465*                  JR	INPUT0
002C1D FD 2B       1466*  INPUT2:         DEC	IY
002C1F C5          1467*                  PUSH	BC
002C20 CD D6 25    1468*                  CALL	VAR_
002C23 C1          1469*                  POP	BC
002C24 E1          1470*                  POP	HL
002C25 F5          1471*                  PUSH	AF		;SAVE TYPE
002C26 7E          1472*                  LD	A,(HL)
002C27 23          1473*                  INC	HL
002C28 FE 0D       1474*                  CP	CR		;BUFFER EMPTY?
002C2A CC 55 2C    1475*                  CALL	Z,REFILL
002C2D CB 79       1476*                  BIT	7,C
002C2F F5          1477*                  PUSH	AF
002C30 C4 CF 35    1478*                  CALL	NZ,LINES
002C33 F1          1479*                  POP	AF
002C34 CC BE 35    1480*                  CALL	Z,FETCHS
002C37 F1          1481*                  POP	AF		;RESTORE TYPE
002C38 C5          1482*                  PUSH	BC
002C39 E5          1483*                  PUSH	HL
002C3A B7          1484*                  OR	A
002C3B FA 4C 2C    1485*                  JP	M,INPUT4	;STRING
002C3E F5          1486*                  PUSH	AF
002C3F DD E5       1487*                  PUSH	IX
002C41 CD 22 1C    1488*                  CALL	VAL0
002C44 DD E1       1489*                  POP	IX
002C46 F1          1490*                  POP	AF
002C47 CD F0 31    1491*                  CALL	STOREN
002C4A 18 03       1492*                  JR	INPUT5
002C4C CD 3E 32    1493*  INPUT4:         CALL	STACCS
002C4F E1          1494*  INPUT5:         POP	HL
002C50 C1          1495*                  POP	BC
002C51 CB 81       1496*  INPUT3:         RES	0,C
002C53 18 A0       1497*                  JR	INPUT1
002C55             1498*  ;
002C55 CB 41       1499*  REFILL:         BIT	0,C
002C57 20 0A       1500*                  JR	NZ,REFIL0	;NO PROMPT
002C59 3E 3F       1501*                  LD	A,'?'
002C5B CD 02 41    1502*                  CALL	OUTCHR		;PROMPT
002C5E 3E 20       1503*                  LD	A,' '
002C60 CD 02 41    1504*                  CALL	OUTCHR
002C63 21 00 53    1505*  REFIL0:         LD	HL,BUFFER
002C66 C5          1506*                  PUSH	BC
002C67 E5          1507*                  PUSH	HL
002C68 DD E5       1508*                  PUSH	IX
002C6A CD CB 11    1509*                  CALL	OSLINE
002C6D DD E1       1510*                  POP	IX
002C6F E1          1511*                  POP	HL
002C70 C1          1512*                  POP	BC
002C71 47          1513*                  LD	B,A		;POS AT ENTRY
002C72 AF          1514*                  XOR	A
002C73 32 FB 54    1515*                  LD	(COUNT),A
002C76 B8          1516*                  CP	B
002C77 C8          1517*                  RET	Z
002C78 7E          1518*  REFIL1:         LD	A,(HL)
002C79 FE 0D       1519*                  CP	CR
002C7B C8          1520*                  RET	Z
002C7C 23          1521*                  INC	HL
002C7D 10 F9       1522*                  DJNZ	REFIL1
002C7F C9          1523*                  RET
002C80             1524*  ;
002C80             1525*  ;READ var[,var...]
002C80             1526*  ;
002C80 FE 23       1527*  READ:           CP	'#'
002C82 CA 96 2B    1528*                  JP	Z,INPUTN
002C85 2A F0 54    1529*                  LD	HL,(DATPTR)
002C88 7E          1530*  READ0:          LD	A,(HL)
002C89 FE 3A       1531*                  CP	':'
002C8B CC 78 2C    1532*                  CALL	Z,REFIL1
002C8E 23          1533*                  INC	HL		;SKIP COMMA | "DATA"
002C8F FE 0D       1534*                  CP	CR		;END OF DATA STMT?
002C91 CC C0 2C    1535*                  CALL	Z,GETDAT
002C94 E5          1536*                  PUSH	HL
002C95 CD D6 25    1537*                  CALL	VAR_
002C98 E1          1538*                  POP	HL
002C99 B7          1539*                  OR	A
002C9A FA B0 2C    1540*                  JP	M,READ1		;STRING
002C9D E5          1541*                  PUSH	HL
002C9E FD E3       1542*                  EX	(SP),IY
002CA0 F5          1543*                  PUSH	AF		;SAVE TYPE
002CA1 DD E5       1544*                  PUSH	IX
002CA3 CD 2C 18    1545*                  CALL	EXPRN
002CA6 DD E1       1546*                  POP	IX
002CA8 F1          1547*                  POP	AF
002CA9 CD F0 31    1548*                  CALL	STOREN
002CAC FD E3       1549*                  EX	(SP),IY
002CAE 18 07       1550*                  JR	READ2
002CB0 CD BE 35    1551*  READ1:          CALL	FETCHS
002CB3 E5          1552*                  PUSH	HL
002CB4 CD 3E 32    1553*                  CALL	STACCS
002CB7 E1          1554*  READ2:          POP	HL
002CB8 22 F0 54    1555*                  LD	(DATPTR),HL
002CBB CD 00 45    1556*                  CALL	NLIST
002CBE 18 C8       1557*                  JR	READ0
002CC0             1558*  ;
002CC0 CD F9 35    1559*  GETDAT:         CALL	DSRCH
002CC3 23          1560*                  INC	HL
002CC4 D0          1561*                  RET	NC
002CC5 3E 2A       1562*                  LD	A,42
002CC7 18 64       1563*                  JR	ERROR4ex		;"Out of DATA"
002CC9             1564*  ;
002CC9             1565*  ;IF expr statement
002CC9             1566*  ;IF expr THEN statement [ELSE statement]
002CC9             1567*  ;IF expr THEN line [ELSE line]
002CC9             1568*  ;IF expr THEN
002CC9             1569*  ;
002CC9 CD 33 18    1570*  IF_:            CALL	EXPRI
002CCC CD 59 1F    1571*                  CALL	TEST
002CCF 28 2A       1572*                  JR	Z,IFNOT		;FALSE
002CD1 FD 7E 00    1573*                  LD	A,(IY)
002CD4 FE 8C       1574*                  CP	TTHEN
002CD6 C2 99 24    1575*                  JP	NZ,XEQ
002CD9 FD 23       1576*  IF0:            INC	IY		;SKIP "THEN"
002CDB FD 7E 00    1577*                  LD	A,(IY)
002CDE FE 3B       1578*                  CP	';'
002CE0 28 F7       1579*                  JR	Z,IF0
002CE2 CD 0B 45    1580*  IF1:            CALL	NXT
002CE5 FE 8D       1581*                  CP	TLINO
002CE7 C2 99 24    1582*                  JP	NZ,XEQ		;STATEMENT FOLLOWS
002CEA C3 B4 28    1583*                  JP	GOTO		;LINE NO. FOLLOWS
002CED             1584*  ;
002CED FD 7E 00    1585*  IFELSE:         LD	A,(IY)
002CF0 FD 23       1586*                  INC	IY
002CF2 FE 3B       1587*                  CP	';'
002CF4 20 0A       1588*                  JR	NZ,IFNEXT
002CF6 18 1E       1589*                  JR	IFTHEN
002CF8             1590*  ;
002CF8 CD 99 36    1591*  IF2:            CALL	QUOTE		;SKIP STRING
002CFB FD 7E 00    1592*  IFNOT:          LD	A,(IY)
002CFE FD 23       1593*                  INC	IY
002D00 FE 22       1594*  IFNEXT:         CP	'"'
002D02 28 F4       1595*                  JR	Z,IF2		;QUOTED STRING
002D04 FE F4       1596*                  CP	TREM
002D06 CA 31 25    1597*                  JP	Z,REM		;REM
002D09 FE 0D       1598*                  CP	CR
002D0B CA 84 24    1599*                  JP	Z,XEQ0		;END OF LINE
002D0E FE 8B       1600*                  CP	TELSE
002D10 28 D0       1601*                  JR	Z,IF1		;ELSE CLAUSE
002D12 FE 8C       1602*                  CP	TTHEN
002D14 20 E5       1603*                  JR	NZ,IFNOT	;TRY FOR END AGAIN
002D16 FD 7E 00    1604*  IFTHEN:         LD	A,(IY)
002D19 FE 0D       1605*                  CP	CR
002D1B 20 D0       1606*                  JR	NZ,IFELSE
002D1D 01 8B 00    1607*                  LD	BC,TELSE
002D20 11 8C CD    1608*                  LD	DE,TENDIF*256+TTHEN
002D23 FD 23       1609*                  INC	IY
002D25 CD 11 36    1610*                  CALL	NSCAN
002D28 CA A0 24    1611*                  JP	Z,XEQ1
002D2B 3E 31       1612*  NENDIF:         LD	A,49
002D2D C3 44 3F    1613*  ERROR4ex:         JP	ERROR_		;"Missing ENDIF"
002D30             1614*  ;
002D30             1615*  ; ELSE (multi-line)
002D30             1616*  ;
002D30 01 FD FF    1617*  MELSE:          LD	BC,-3
002D33 FD 09       1618*                  ADD	IY,BC
002D35 01 CD 00    1619*                  LD	BC,TENDIF
002D38 11 8C CD    1620*                  LD	DE,TENDIF*256+TTHEN
002D3B CD 11 36    1621*                  CALL	NSCAN
002D3E 20 EB       1622*                  JR	NZ,NENDIF
002D40 C3 99 24    1623*  XEQGO7:         JP	XEQ
002D43             1624*  ;
002D43             1625*  ; WHEN and OTHERWISE:
002D43             1626*  ;
002D43 01 FD FF    1627*  WHEN:           LD	BC,-3
002D46 FD 09       1628*                  ADD	IY,BC
002D48 01 CB 00    1629*                  LD	BC,TENDCASE
002D4B 11 CA CB    1630*                  LD	DE,TENDCASE*256+TOF
002D4E CD 11 36    1631*                  CALL	NSCAN
002D51 28 ED       1632*                  JR	Z,XEQGO7
002D53 3E 2F       1633*                  LD	A,47
002D55 18 D6       1634*                  JR	ERROR4ex		;"Missing ENDCASE"
002D57             1635*  ;
002D57             1636*  ; CASE
002D57             1637*  ;
002D57 CD 02 17    1638*  CASE:           CALL	EXPR		;String or numeric
002D5A 08          1639*                  EX	AF,AF'
002D5B 06 00       1640*                  LD	B,0		;Flag numeric
002D5D F2 66 2D    1641*                  JP	P,CASE6		;numeric
002D60 CD 19 20    1642*                  CALL	PUSHS		;put string on stack
002D63 C1          1643*                  POP	BC		;C = length
002D64 06 01       1644*                  LD	B,1		;Flag string
002D66 FD 7E 00    1645*  CASE6:          LD	A,(IY)
002D69 FD 23       1646*                  INC	IY
002D6B FE CA       1647*                  CP	TOF
002D6D 3E 25       1648*                  LD	A,37
002D6F 20 BC       1649*                  JR	NZ,ERROR4ex	;"Missing OF"
002D71 FD 7E 00    1650*                  LD	A,(IY)
002D74 FD 23       1651*                  INC	IY		;Address line-length byte
002D76 FE 0D       1652*                  CP	CR
002D78 3E 30       1653*                  LD	A,48
002D7A 20 B1       1654*                  JR	NZ,ERROR4ex	;"OF not last"
002D7C AF          1655*  CASE1:          XOR	A		;Level
002D7D D9          1656*  CASE0:          EXX
002D7E E5          1657*                  PUSH	HL		;Push to stack
002D7F D9          1658*                  EXX
002D80 E5          1659*                  PUSH	HL
002D81 C5          1660*                  PUSH	BC
002D82 6F          1661*                  LD	L,A		;Level
002D83 01 C9 CC    1662*                  LD	BC,TOTHERWISE*256+TWHEN
002D86 11 CA CB    1663*                  LD	DE,TENDCASE*256+TOF
002D89 CD 13 36    1664*                  CALL	NSCAN1
002D8C C1          1665*                  POP	BC		;Restore from stack
002D8D E1          1666*                  POP	HL
002D8E D9          1667*                  EXX
002D8F E1          1668*                  POP	HL
002D90 D9          1669*                  EXX
002D91 3E 2F       1670*                  LD	A,47
002D93 C2 44 3F    1671*                  JP	NZ,ERROR_	;Missing ENDCASE
002D96 FD 7E FF    1672*                  LD	A,(IY-1)
002D99 FE CB       1673*                  CP	TENDCASE
002D9B 28 56       1674*                  JR	Z,CASE9
002D9D FE CC       1675*                  CP	TOTHERWISE
002D9F 28 52       1676*                  JR	Z,CASE9
002DA1 CB 40       1677*  CASE4:          BIT	0,B		;Numeric or string?
002DA3 20 69       1678*                  JR	NZ,CASE3
002DA5 C5          1679*                  PUSH	BC		;Type/exponent/length
002DA6 E5          1680*                  PUSH	HL		;MS 32 bits
002DA7 D9          1681*                  EXX
002DA8 E5          1682*                  PUSH	HL		;LS 32 bits
002DA9 D9          1683*                  EXX
002DAA CD 2C 18    1684*                  CALL	EXPRN
002DAD DD 21 00 00 1685*                  LD	IX,0
002DB1 DD 39       1686*                  ADD	IX,SP		;Address stack
002DB3 D9          1687*                  EXX
002DB4 DD 5E 00    1688*                  LD	E,(IX+0)	;Get LS 32-bits
002DB7 DD 56 01    1689*                  LD	D,(IX+1)
002DBA D9          1690*                  EXX
002DBB DD 5E 02    1691*                  LD	E,(IX+2)
002DBE DD 56 03    1692*                  LD	D,(IX+3)	;Get MS 32-bits
002DC1 DD 46 04    1693*                  LD	B,(IX+4)	;Get exponent
002DC4 3E 09       1694*                  LD	A,9
002DC6 CD 15 45    1695*                  CALL	FPP		;In case integer vs float
002DC9 7D          1696*                  LD	A,L
002DCA B7          1697*                  OR	A		;NZ if equal
002DCB D9          1698*                  EXX
002DCC E1          1699*                  POP	HL
002DCD D9          1700*                  EXX
002DCE E1          1701*                  POP	HL
002DCF C1          1702*                  POP	BC
002DD0 20 2C       1703*                  JR	NZ,CASE5	;Match found
002DD2 FD 7E 00    1704*  CASE2:          LD	A,(IY)
002DD5 FD 23       1705*                  INC	IY
002DD7 FE 2C       1706*                  CP	','
002DD9 28 C6       1707*                  JR	Z,CASE4		;Not found, try another
002DDB D9          1708*                  EXX
002DDC FD E5       1709*                  PUSH	IY
002DDE E3          1710*                  EX	(SP),HL
002DDF 3E 0D       1711*                  LD	A,CR
002DE1 47          1712*                  LD	B,A
002DE2 ED B1       1713*                  CPIR			;Find CR
002DE4 E3          1714*                  EX	(SP),HL
002DE5 FD E1       1715*                  POP	IY
002DE7 D9          1716*                  EXX
002DE8 FD 7E FE    1717*                  LD	A,(IY-2)	;Last token in previous line
002DEB FE CA       1718*                  CP	TOF		;CASE statement in WHEN line
002DED 20 8D       1719*                  JR	NZ,CASE1
002DEF 3E 01       1720*                  LD	A,1
002DF1 18 8A       1721*                  JR	CASE0
002DF3             1722*  ;
002DF3             1723*  ;Finished, level stack if string:
002DF3             1724*  ;
002DF3 CB 40       1725*  CASE9:          BIT	0,B
002DF5 28 49       1726*                  JR	Z,XEQGO5
002DF7 26 00       1727*                  LD	H,0
002DF9 69          1728*                  LD	L,C
002DFA 39          1729*                  ADD	HL,SP
002DFB F9          1730*                  LD	SP,HL
002DFC 18 42       1731*                  JR	XEQGO5
002DFE             1732*  ;
002DFE             1733*  ;Matched, so skip any more expressions:
002DFE             1734*  ;
002DFE CD 0B 45    1735*  CASE5:          CALL	NXT
002E01 FE 2C       1736*                  CP	','
002E03 20 EE       1737*                  JR	NZ,CASE9	;End of list
002E05 FD 23       1738*                  INC	IY
002E07 C5          1739*                  PUSH	BC		;Save type and string length
002E08 CD 02 17    1740*                  CALL	EXPR		;Evaluate but discard
002E0B C1          1741*                  POP	BC
002E0C 18 F0       1742*                  JR	CASE5
002E0E             1743*  ;
002E0E             1744*  ;String compare:
002E0E             1745*  ;
002E0E C5          1746*  CASE3:          PUSH	BC
002E0F CD 3C 18    1747*                  CALL	EXPRS
002E12 C1          1748*                  POP	BC
002E13 21 00 00    1749*                  LD	HL,0
002E16 39          1750*                  ADD	HL,SP
002E17 43          1751*                  LD	B,E
002E18 11 00 52    1752*                  LD	DE,ACCS
002E1B C5          1753*                  PUSH	BC
002E1C CD F5 1F    1754*                  CALL	SCP		;String compare
002E1F C1          1755*                  POP	BC
002E20 06 01       1756*                  LD	B,1
002E22 20 AE       1757*                  JR	NZ,CASE2
002E24 18 D8       1758*                  JR	CASE5
002E26             1759*  ;
002E26             1760*  ; WHILE
002E26             1761*  ;
002E26 FD E5       1762*  WHILE:          PUSH	IY		;Save current position
002E28 CD 86 32    1763*                  CALL	CHECK
002E2B CD 2E 2E    1764*                  CALL	WHICHK		;Push marker
002E2E CD 33 18    1765*  WHICHK:         CALL	EXPRI
002E31 CD 59 1F    1766*                  CALL	TEST
002E34 20 0A       1767*                  JR	NZ,XEQGO5
002E36 C1          1768*                  POP	BC		;Pop marker
002E37 C1          1769*                  POP	BC		;Level stack
002E38 01 00 95    1770*                  LD	BC,TWHILE+TENDWHILE*256
002E3B 16 01       1771*                  LD	D,1
002E3D CD 50 36    1772*                  CALL	WSRCH
002E40 C3 99 24    1773*  XEQGO5:         JP	XEQ
002E43             1774*  ;
002E43             1775*  ; ENDWHILE
002E43             1776*  ;
002E43 C1          1777*  ENDWHI:         POP	BC		;Marker
002E44 D1          1778*                  POP	DE		;Saved text pointer
002E45 D5          1779*                  PUSH	DE
002E46 C5          1780*                  PUSH	BC
002E47 B7          1781*                  OR	A
002E48 21 2E 2E    1782*                  LD	HL,WHICHK
002E4B ED 42       1783*                  SBC	HL,BC
002E4D 28 0B       1784*                  JR	Z,ENDWH1
002E4F 3E 03       1785*                  LD	A,3
002E51 CD 31 34    1786*                  CALL	RESLOC
002E54 20 ED       1787*                  JR	NZ,ENDWHI
002E56 3E 2E       1788*                  LD	A,46
002E58 18 4F       1789*                  JR	ERROR5		;"Not in a WHILE loop"
002E5A             1790*  ;
002E5A FD E5       1791*  ENDWH1:         PUSH	IY
002E5C FD 21 00 00 1792*                  LD	IY,0
002E60 FD 19       1793*                  ADD	IY,DE
002E62 CD 33 18    1794*                  CALL	EXPRI
002E65 CD 59 1F    1795*                  CALL	TEST
002E68 D1          1796*                  POP	DE		;Text pointer
002E69 20 D5       1797*                  JR	NZ,XEQGO5
002E6B C1          1798*                  POP	BC		;Junk marker
002E6C C1          1799*                  POP	BC		;Junk pointer
002E6D FD 21 00 00 1800*                  LD	IY,0
002E71 FD 19       1801*                  ADD	IY,DE
002E73 18 CB       1802*                  JR	XEQGO5
002E75             1803*  ;
002E75             1804*  ;CLS
002E75             1805*  ;
002E75 CD F8 01    1806*  CLS:            CALL	CLRSCN
002E78 AF          1807*                  XOR	A
002E79 32 FB 54    1808*                  LD	(COUNT),A
002E7C 18 C2       1809*                  JR	XEQGO5
002E7E             1810*  ;
002E7E             1811*  ;STOP
002E7E             1812*  ;
002E7E CD FA 44    1813*  STOP:           CALL	TELL
002E81 0D          1814*                  DB	CR
002E82 0A          1815*                  DB	LF
002E83 FA          1816*                  DB	TSTOP
002E84 00          1817*                  DB	0
002E85 CD 5B 41    1818*                  CALL	SETLIN		;FIND CURRENT LINE
002E88 CD 82 41    1819*                  CALL	SAYLN
002E8B CD FB 40    1820*                  CALL	CRLF
002E8E C3 B0 37    1821*                  JP	CLOOP
002E91             1822*  ;
002E91             1823*  ;REPORT
002E91             1824*  ;
002E91 CD E5 44    1825*  REPOR:          CALL	REPORT
002E94 18 AA       1826*                  JR	XEQGO5
002E96             1827*  ;
002E96             1828*  ;CLEAR
002E96             1829*  ;
002E96 CD 43 40    1830*  CLR:            CALL	CLEAR
002E99 2A DC 54    1831*                  LD	HL,(PAGE_)
002E9C 18 3B       1832*                  JR	RESTR1
002E9E             1833*  ;
002E9E             1834*  ;RESTORE ERROR
002E9E             1835*  ;
002E9E FD 23       1836*  RESERR:         INC	IY
002EA0 3E 02       1837*                  LD	A,2
002EA2 CD 31 34    1838*                  CALL	RESLOC
002EA5 20 99       1839*                  JR	NZ,XEQGO5
002EA7 3E 35       1840*                  LD	A,53		;ON ERROR not LOCAL
002EA9 C3 44 3F    1841*  ERROR5:         JP	ERROR_
002EAC             1842*  ;
002EAC             1843*  ;RESTORE DATA
002EAC             1844*  ;
002EAC FD 23       1845*  RESDAT:         INC	IY
002EAE 3E 01       1846*                  LD	A,1
002EB0 CD 31 34    1847*                  CALL	RESLOC
002EB3 20 8B       1848*                  JR	NZ,XEQGO5
002EB5 3E 36       1849*                  LD	A,54		;'DATA not LOCAL'
002EB7 21          1850*                  DB	21H
002EB8 3E 29       1851*  NOLINE:         LD	A,41		;'No such line'
002EBA 18 ED       1852*                  JR	ERROR5
002EBC             1853*  ;
002EBC             1854*  ;RESTORE [line]
002EBC             1855*  ;
002EBC FE 85       1856*  RESTOR:         CP	TERROR
002EBE 28 DE       1857*                  JR	Z,RESERR
002EC0 FE DC       1858*                  CP	TDATA
002EC2 28 E8       1859*                  JR	Z,RESDAT
002EC4 FE 2B       1860*                  CP	'+'
002EC6 28 1A       1861*                  JR	Z,RESREL
002EC8 2A DC 54    1862*                  LD	HL,(PAGE_)
002ECB CD 36 35    1863*                  CALL	TERMQ
002ECE 28 09       1864*                  JR	Z,RESTR1
002ED0 CD 60 18    1865*                  CALL	ITEMI
002ED3 D9          1866*                  EXX
002ED4 CD 43 41    1867*                  CALL	FINDL		;SEARCH FOR LINE
002ED7 20 DF       1868*                  JR	NZ,NOLINE
002ED9 CD F9 35    1869*  RESTR1:         CALL	DSRCH
002EDC 22 F0 54    1870*                  LD	(DATPTR),HL
002EDF C3 99 24    1871*                  JP	XEQ
002EE2             1872*  ;
002EE2 CD 33 18    1873*  RESREL:         CALL	EXPRI
002EE5 D9          1874*                  EXX
002EE6 EB          1875*                  EX	DE,HL
002EE7 FD E5       1876*                  PUSH	IY
002EE9 E1          1877*                  POP	HL
002EEA 3E 0D       1878*                  LD	A,CR
002EEC 47          1879*                  LD	B,A
002EED ED B1       1880*                  CPIR			;FIND LINE END
002EEF 1D          1881*                  DEC	E
002EF0 28 E7       1882*                  JR	Z,RESTR1
002EF2 FA D9 2E    1883*                  JP	M,RESTR1
002EF5 AF          1884*                  XOR	A
002EF6 47          1885*                  LD	B,A
002EF7 4E          1886*  RESTR2:         LD	C,(HL)
002EF8 B9          1887*                  CP	C
002EF9 28 BD       1888*                  JR	Z,NOLINE
002EFB 09          1889*                  ADD	HL,BC
002EFC 1D          1890*                  DEC	E
002EFD 20 F8       1891*                  JR	NZ,RESTR2
002EFF 18 D8       1892*                  JR	RESTR1
002F01             1893*  ;
002F01             1894*  ;PTR#channel=expr
002F01             1895*  ;PAGE=expr
002F01             1896*  ;TIME=expr
002F01             1897*  ;LOMEM=expr
002F01             1898*  ;HIMEM=expr
002F01             1899*  ;
002F01 CD D1 36    1900*  PTR:            CALL	CHANEL
002F04 CD 4F 35    1901*                  CALL	EQUALS
002F07 7B          1902*                  LD	A,E
002F08 F5          1903*                  PUSH	AF
002F09 CD 33 18    1904*                  CALL	EXPRI
002F0C E5          1905*                  PUSH	HL
002F0D D9          1906*                  EXX
002F0E D1          1907*                  POP	DE
002F0F F1          1908*                  POP	AF
002F10 CD 79 12    1909*                  CALL	PUTPTR
002F13 18 61       1910*                  JR	XEQGO1ex
002F15             1911*  ;
002F15 CD 4F 35    1912*  PAGEV:          CALL	EQUALS
002F18 CD 33 18    1913*                  CALL	EXPRI
002F1B D9          1914*                  EXX
002F1C 2E 00       1915*                  LD	L,0
002F1E 22 DC 54    1916*                  LD	(PAGE_),HL
002F21 18 53       1917*                  JR	XEQGO1ex
002F23             1918*  ;
002F23 FE 24       1919*  TIMEV:          CP	'$'
002F25 28 0E       1920*                  JR	Z,TIMEVS
002F27 CD 4F 35    1921*                  CALL	EQUALS
002F2A CD 33 18    1922*                  CALL	EXPRI
002F2D E5          1923*                  PUSH	HL
002F2E D9          1924*                  EXX
002F2F D1          1925*                  POP	DE
002F30 CD C3 01    1926*                  CALL	PUTIME
002F33 18 41       1927*                  JR	XEQGO1ex
002F35             1928*  ;
002F35 FD 23       1929*  TIMEVS:         INC	IY		;SKIP '$'
002F37 CD 4F 35    1930*                  CALL	EQUALS
002F3A CD 3C 18    1931*                  CALL	EXPRS
002F3D CD E0 01    1932*                  CALL	PUTIMS
002F40 18 34       1933*                  JR	XEQGO1ex
002F42             1934*  ;
002F42 CD 4F 35    1935*  LOMEMV:         CALL	EQUALS
002F45 CD 33 18    1936*                  CALL	EXPRI
002F48 CD 43 40    1937*                  CALL	CLEAR
002F4B D9          1938*                  EXX
002F4C 22 DE 54    1939*                  LD	(LOMEM),HL
002F4F 22 E0 54    1940*                  LD	(FREE),HL
002F52 18 22       1941*                  JR	XEQGO1ex
002F54             1942*  ;
002F54 CD 4F 35    1943*  HIMEMV:         CALL	EQUALS
002F57 CD 33 18    1944*                  CALL	EXPRI
002F5A D9          1945*                  EXX
002F5B ED 5B E0 54 1946*                  LD	DE,(FREE)
002F5F 14          1947*                  INC	D
002F60 AF          1948*                  XOR	A
002F61 ED 52       1949*                  SBC	HL,DE
002F63 19          1950*                  ADD	HL,DE
002F64 DA 44 3F    1951*                  JP	C,ERROR_		;"No room"
002F67 ED 5B E2 54 1952*                  LD	DE,(HIMEM)
002F6B 22 E2 54    1953*                  LD	(HIMEM),HL
002F6E EB          1954*                  EX	DE,HL
002F6F ED 72       1955*                  SBC	HL,SP
002F71 C2 99 24    1956*                  JP	NZ,XEQ
002F74 EB          1957*                  EX	DE,HL
002F75 F9          1958*                  LD	SP,HL		;LOAD STACK POINTER
002F76 C3 99 24    1959*  XEQGO1ex:         JP	XEQ
002F79             1960*  ;
002F79             1961*  ;WIDTH expr
002F79             1962*  ;
002F79 CD 33 18    1963*  WIDTHV:         CALL	EXPRI
002F7C D9          1964*                  EXX
002F7D 7D          1965*                  LD	A,L
002F7E 32 FC 54    1966*                  LD	(WIDTH),A
002F81 18 F3       1967*                  JR	XEQGO1ex
002F83             1968*  ;
002F83             1969*  ;TRACE ON
002F83             1970*  ;TRACE OFF
002F83             1971*  ;TRACE line
002F83             1972*  ;
002F83 FD 23       1973*  TRACE:          INC	IY
002F85 21 00 00    1974*                  LD	HL,0
002F88 FE EE       1975*                  CP	TON
002F8A 28 0A       1976*                  JR	Z,TRACE0
002F8C FE 87       1977*                  CP	TOFF
002F8E 28 07       1978*                  JR	Z,TRACE1
002F90 FD 2B       1979*                  DEC	IY
002F92 CD 33 18    1980*                  CALL	EXPRI
002F95 D9          1981*                  EXX
002F96 2B          1982*  TRACE0:         DEC	HL
002F97 22 E6 54    1983*  TRACE1:         LD	(TRACEN),HL
002F9A 18 DA       1984*                  JR	XEQGO1ex
002F9C             1985*  ;
002F9C             1986*  ;VDU expr,expr;....[|]
002F9C             1987*  ;
002F9C CD 33 18    1988*  VDU:            CALL	EXPRI
002F9F D9          1989*                  EXX
002FA0 7D          1990*                  LD	A,L
002FA1 06 01       1991*                  LD	B,1
002FA3 CD 95 11    1992*  VDU1:           CALL	OSWRCH
002FA6 10 FB       1993*                  DJNZ	VDU1
002FA8 FD 7E 00    1994*                  LD	A,(IY)
002FAB FE 7C       1995*                  CP	'|'
002FAD 28 15       1996*                  JR	Z,VDU4
002FAF FE 2C       1997*                  CP	','
002FB1 28 08       1998*                  JR	Z,VDU2
002FB3 FE 3B       1999*                  CP	';'
002FB5 20 06       2000*                  JR	NZ,VDU3
002FB7 7C          2001*                  LD	A,H
002FB8 CD 95 11    2002*                  CALL	OSWRCH
002FBB FD 23       2003*  VDU2:           INC	IY
002FBD CD 36 35    2004*  VDU3:           CALL	TERMQ
002FC0 20 DA       2005*                  JR	NZ,VDU
002FC2 18 B2       2006*                  JR	XEQGO1ex
002FC4             2007*  ;
002FC4 FD 23       2008*  VDU4:           INC	IY
002FC6 AF          2009*                  XOR	A
002FC7 06 09       2010*                  LD	B,9
002FC9 18 D8       2011*                  JR	VDU1
002FCB             2012*  ;
002FCB             2013*  ;CLOSE channel number
002FCB             2014*  ;
002FCB CD D1 36    2015*  CLOSE:          CALL	CHANEL
002FCE CD 37 12    2016*                  CALL	OSSHUT
002FD1 18 A3       2017*                  JR	XEQGO1ex
002FD3             2018*  ;
002FD3             2019*  ;BPUT #channel,byte
002FD3             2020*  ;BPUT #channel,string[;]
002FD3             2021*  ;
002FD3 CD D1 36    2022*  BPUT:           CALL	CHANEL		;CHANNEL NUMBER
002FD6 D5          2023*                  PUSH	DE
002FD7 CD A2 20    2024*                  CALL	COMMA
002FDA CD 02 17    2025*                  CALL	EXPR
002FDD 08          2026*                  EX	AF,AF'
002FDE FA EC 2F    2027*                  JP	M,BPUTS
002FE1 CD 17 1C    2028*                  CALL	SFIX
002FE4 D9          2029*                  EXX
002FE5 7D          2030*                  LD	A,L
002FE6 D1          2031*                  POP	DE
002FE7 CD 47 12    2032*                  CALL	OSBPUT
002FEA 18 8A       2033*  BPUTX:          JR	XEQGO1ex
002FEC             2034*  ;
002FEC 7B          2035*  BPUTS:          LD	A,E
002FED D1          2036*                  POP	DE
002FEE 57          2037*                  LD	D,A
002FEF 21 00 52    2038*                  LD	HL,ACCS
002FF2 7E          2039*  BPUTS1:         LD	A,(HL)
002FF3 23          2040*                  INC	HL
002FF4 CD 47 12    2041*                  CALL	OSBPUT
002FF7 15          2042*                  DEC	D
002FF8 20 F8       2043*                  JR	NZ,BPUTS1
002FFA CD 0B 45    2044*                  CALL	NXT
002FFD FE 3B       2045*                  CP	';'
002FFF FD 23       2046*                  INC	IY
003001 28 E7       2047*                  JR	Z,BPUTX
003003 3E 0A       2048*                  LD	A,LF
003005 CD 47 12    2049*                  CALL	OSBPUT
003008 FD 2B       2050*                  DEC	IY
00300A 18 DE       2051*                  JR	BPUTX
00300C             2052*  ;
00300C             2053*  ;CALL address[,var[,var...]]
00300C             2054*  ;
00300C CD 33 18    2055*  CALL:           CALL	EXPRI		;ADDRESS
00300F D9          2056*                  EXX
003010 E5          2057*                  PUSH	HL		;SAVE IT
003011 06 00       2058*                  LD	B,0		;PARAMETER COUNTER
003013 11 00 53    2059*                  LD	DE,BUFFER	;VECTOR
003016 CD 0B 45    2060*  CALL1:          CALL	NXT
003019 FE 2C       2061*                  CP	','
00301B 20 17       2062*                  JR	NZ,CALL2
00301D FD 23       2063*                  INC	IY
00301F 04          2064*                  INC	B
003020 CD 0B 45    2065*                  CALL	NXT
003023 C5          2066*                  PUSH	BC
003024 D5          2067*                  PUSH	DE
003025 CD D6 25    2068*                  CALL	VAR_
003028 D1          2069*                  POP	DE
003029 C1          2070*                  POP	BC
00302A 13          2071*                  INC	DE
00302B 12          2072*                  LD	(DE),A		;PARAMETER TYPE
00302C 13          2073*                  INC	DE
00302D EB          2074*                  EX	DE,HL
00302E 73          2075*                  LD	(HL),E		;PARAMETER ADDRESS
00302F 23          2076*                  INC	HL
003030 72          2077*                  LD	(HL),D
003031 EB          2078*                  EX	DE,HL
003032 18 E2       2079*                  JR	CALL1
003034 78          2080*  CALL2:          LD	A,B
003035 32 00 53    2081*                  LD	(BUFFER),A	;PARAMETER COUNT
003038 E1          2082*                  POP	HL		;RESTORE ADDRESS
003039 CD 43 30    2083*                  CALL	USR1
00303C C3 99 24    2084*                  JP	XEQ
00303F             2085*  ;
00303F             2086*  ;USR(address)
00303F             2087*  ;
00303F CD 60 18    2088*  USR:            CALL	ITEMI
003042 D9          2089*                  EXX
003043 E5          2090*  USR1:           PUSH	HL		;ADDRESS ON STACK
003044 FD E3       2091*                  EX	(SP),IY
003046 24          2092*                  INC	H		;PAGE &FF?
003047 21 72 30    2093*                  LD	HL,USR2		;RETURN ADDRESS
00304A E5          2094*                  PUSH	HL
00304B DD 21 00 54 2095*                  LD	IX,STAVAR
00304F CC 14 05    2096*                  CALL	Z,OSCALL	;INTERCEPT PAGE &FF
003052 DD 4E 18    2097*                  LD	C,(IX+24)
003055 C5          2098*                  PUSH	BC
003056 F1          2099*                  POP	AF		;LOAD FLAGS
003057 DD 7E 04    2100*                  LD	A,(IX+4)	;LOAD Z80 REGISTERS
00305A DD 46 08    2101*                  LD	B,(IX+8)
00305D DD 4E 0C    2102*                  LD	C,(IX+12)
003060 DD 56 10    2103*                  LD	D,(IX+16)
003063 DD 5E 14    2104*                  LD	E,(IX+20)
003066 DD 66 20    2105*                  LD	H,(IX+32)
003069 DD 6E 30    2106*                  LD	L,(IX+48)
00306C DD 21 00 53 2107*                  LD	IX,BUFFER
003070 FD E9       2108*                  JP	(IY)		;OFF TO USER ROUTINE
003072 FD E1       2109*  USR2:           POP	IY
003074 AF          2110*                  XOR	A
003075 4F          2111*                  LD	C,A
003076 C9          2112*                  RET
003077             2113*  ;
003077             2114*  ; LEFT$(A$[,N]) = string
003077             2115*  ; MID$(A$,N[,M]) = string
003077             2116*  ; RIGHT$(A$[,N]) = string
003077             2117*  ;
003077 CD BE 25    2118*  LEFTSL:         CALL    GETSTR
00307A 21 00 FF    2119*                  LD	HL,0FF00H	;Default all but last
00307D 20 48       2120*                  JR	NZ,MIDSL1
00307F 18 26       2121*                  JR	MIDSL0
003081             2122*  ;
003081 CD BE 25    2123*  RITESL:         CALL	GETSTR
003084 21 FF FF    2124*                  LD	HL,0FFFFH	;Default last char only
003087 20 3E       2125*                  JR	NZ,MIDSL1
003089 18 1C       2126*                  JR	MIDSL0
00308B             2127*  ;
00308B CD BE 25    2128*  MIDSL:          CALL	GETSTR
00308E 3E 05       2129*                  LD	A,5
003090 C2 44 3F    2130*                  JP	NZ,ERROR_	;'Missing comma'
003093 FD 23       2131*                  INC	IY
003095 DD E5       2132*                  PUSH	IX
003097 CD 33 18    2133*                  CALL	EXPRI
00309A DD E1       2134*                  POP	IX
00309C D9          2135*                  EXX
00309D CD 0B 45    2136*                  CALL	NXT
0030A0 2D          2137*                  DEC	L
0030A1 26 FE       2138*                  LD	H,254		;Default rest of string
0030A3 FE 2C       2139*                  CP	','
0030A5 20 20       2140*                  JR	NZ,MIDSL1
0030A7 FD 23       2141*  MIDSL0:         INC	IY
0030A9 E5          2142*                  PUSH	HL
0030AA DD E5       2143*                  PUSH	IX
0030AC CD 33 18    2144*                  CALL	EXPRI
0030AF DD E1       2145*                  POP	IX
0030B1 D9          2146*                  EXX
0030B2 7D          2147*                  LD	A,L
0030B3 E1          2148*                  POP	HL
0030B4 B7          2149*                  OR	A
0030B5 28 0D       2150*                  JR	Z,MIDSL2	;Zero length
0030B7 3D          2151*                  DEC	A
0030B8 85          2152*                  ADD	A,L
0030B9 67          2153*                  LD	H,A
0030BA 30 0B       2154*                  JR	NC,MIDSL1
0030BC 7D          2155*                  LD	A,L
0030BD 3C          2156*                  INC	A
0030BE 28 07       2157*                  JR	Z,MIDSL1
0030C0 26 FE       2158*                  LD	H,254
0030C2 18 03       2159*                  JR	MIDSL1
0030C4             2160*  ;
0030C4 21 01 00    2161*  MIDSL2:         LD	HL,1
0030C7 CD AE 20    2162*  MIDSL1:         CALL	BRAKET
0030CA CD 4F 35    2163*                  CALL	EQUALS
0030CD E5          2164*                  PUSH	HL
0030CE DD E5       2165*                  PUSH	IX
0030D0 CD 3C 18    2166*                  CALL	EXPRS
0030D3 DD E1       2167*                  POP	IX
0030D5 E1          2168*                  POP	HL
0030D6 4B          2169*                  LD	C,E
0030D7 DD 46 00    2170*                  LD	B,(IX+0)
0030DA DD 5E 02    2171*                  LD	E,(IX+2)
0030DD DD 56 03    2172*                  LD	D,(IX+3)
0030E0             2173*  ;
0030E0             2174*  ; Source string at ACCS, length C
0030E0             2175*  ; Destination string at DE, length B
0030E0             2176*  ; L = first character to modify 0-254
0030E0             2177*  ; H =  last character to modify 0-254
0030E0             2178*  ; IF L=255 THEN modify rightmost H + 2 chars
0030E0             2179*  ; ELSE IF H=255 modify all but last character
0030E0             2180*  ; ELSE IF L > H do nothing
0030E0             2181*  ; IX = destination VARPTR
0030E0             2182*  ;
0030E0 7D          2183*                  LD	A,L
0030E1 3C          2184*                  INC	A
0030E2 20 0F       2185*                  JR	NZ,SUBSL1
0030E4 24          2186*                  INC	H
0030E5 24          2187*                  INC	H
0030E6 79          2188*                  LD	A,C
0030E7 BC          2189*                  CP	H
0030E8 30 01       2190*                  JR	NC,SUBSL0
0030EA 67          2191*                  LD	H,A
0030EB 78          2192*  SUBSL0:         LD	A,B
0030EC 94          2193*                  SUB	H
0030ED 30 01       2194*                  JR	NC,SUBSL6
0030EF AF          2195*                  XOR	A
0030F0 6F          2196*  SUBSL6:         LD	L,A
0030F1 18 12       2197*                  JR	SUBSL5
0030F3             2198*  ;
0030F3 7C          2199*  SUBSL1:         LD	A,H
0030F4 3C          2200*                  INC	A
0030F5 20 06       2201*                  JR	NZ,SUBSL2
0030F7 78          2202*                  LD	A,B
0030F8 D6 02       2203*                  SUB	2
0030FA 38 24       2204*                  JR	C,SUBSL9
0030FC 67          2205*                  LD	H,A
0030FD 7D          2206*  SUBSL2:         LD	A,L
0030FE B8          2207*                  CP	B
0030FF 30 1F       2208*                  JR	NC,SUBSL9
003101 7C          2209*                  LD	A,H
003102 B8          2210*                  CP	B
003103 38 03       2211*                  JR	C,SUBSL3
003105 78          2212*  SUBSL5:         LD	A,B
003106 3D          2213*                  DEC	A
003107 67          2214*                  LD	H,A
003108 7C          2215*  SUBSL3:         LD	A,H
003109 95          2216*                  SUB	L
00310A 38 14       2217*                  JR	C,SUBSL9
00310C 3C          2218*                  INC	A
00310D B9          2219*                  CP	C
00310E 38 01       2220*                  JR	C,SUBSL4
003110 79          2221*                  LD	A,C
003111 06 00       2222*  SUBSL4:         LD	B,0
003113 60          2223*                  LD	H,B
003114 4F          2224*                  LD	C,A
003115 B7          2225*                  OR	A
003116 28 08       2226*                  JR	Z,SUBSL9
003118 EB          2227*                  EX	DE,HL
003119 19          2228*                  ADD	HL,DE
00311A EB          2229*                  EX	DE,HL
00311B 21 00 52    2230*                  LD	HL,ACCS
00311E ED B0       2231*                  LDIR
003120 C3 99 24    2232*  SUBSL9:         JP	XEQ
003123             2233*  ;
003123             2234*  ; EXITex FOR [var]
003123             2235*  ; EXITex REPEAT
003123             2236*  ; EXITex WHILE
003123             2237*  ;
003123 FD 23       2238*  EXITex:           INC	IY		;Skip FOR/REPEAT/WHILE
003125 FE E3       2239*                  CP	TFOR
003127 20 0C       2240*                  JR	NZ,EXIT0
003129 DD 21 00 00 2241*                  LD	IX,0		;For EXITex FOR <var>
00312D CD 36 35    2242*                  CALL	TERMQ
003130 C4 E3 41    2243*                  CALL	NZ,GETVAR
003133 3E E3       2244*                  LD	A,TFOR
003135 16 01       2245*  EXIT0:          LD	D,1		;Level for WSRCH
003137 5F          2246*                  LD	E,A
003138 7B          2247*  EXIT1:          LD	A,E
003139 C1          2248*                  POP	BC		;Marker
00313A 21 61 29    2249*                  LD	HL,FORCHK
00313D B7          2250*                  OR	A
00313E ED 42       2251*                  SBC	HL,BC
003140 28 25       2252*                  JR	Z,EXIT4
003142 21 ED 28    2253*                  LD	HL,REPCHK
003145 B7          2254*                  OR	A
003146 ED 42       2255*                  SBC	HL,BC
003148 28 38       2256*                  JR	Z,EXIT6
00314A 21 2E 2E    2257*                  LD	HL,WHICHK
00314D B7          2258*                  OR	A
00314E ED 42       2259*                  SBC	HL,BC
003150 28 3A       2260*                  JR	Z,EXIT7
003152 C5          2261*                  PUSH	BC		;Put back marker
003153 DD E5       2262*                  PUSH	IX
003155 C1          2263*                  POP	BC
003156 D9          2264*                  EXX
003157 3E 03       2265*                  LD	A,3
003159 CD 31 34    2266*                  CALL	RESLOC
00315C D9          2267*                  EXX
00315D C5          2268*                  PUSH	BC
00315E DD E1       2269*                  POP	IX
003160 20 D6       2270*                  JR	NZ,EXIT1
003162 3E 2C       2271*                  LD	A,44
003164 C3 44 3F    2272*                  JP	ERROR_		;'Bad EXITex'
003167             2273*  ;
003167 C1          2274*  EXIT4:          POP	BC		;VARPTR
003168 21 0E 00    2275*                  LD	HL,14		;Skip text pointer, limit & step
00316B 39          2276*                  ADD	HL,SP
00316C F9          2277*                  LD	SP,HL		;Pop FOR record
00316D FE E3       2278*                  CP	TFOR
00316F 20 C7       2279*                  JR	NZ,EXIT1
003171 DD E5       2280*                  PUSH	IX
003173 E1          2281*                  POP	HL
003174 7C          2282*                  LD	A,H
003175 B5          2283*                  OR	L
003176 28 02       2284*                  JR	Z,EXIT5
003178 ED 42       2285*                  SBC	HL,BC
00317A 01 00 D0    2286*  EXIT5:          LD	BC,TFOR+TNEXT*256
00317D 28 15       2287*                  JR	Z,EXIT8
00317F 14          2288*                  INC	D		;Count nested FOR loops
003180 18 B6       2289*                  JR	EXIT1
003182             2290*  ;
003182 C1          2291*  EXIT6:          POP	BC		;Text pointer
003183 FE F5       2292*                  CP	TREPEAT
003185 20 B1       2293*                  JR	NZ,EXIT1
003187 01 00 F2    2294*                  LD	BC,TREPEAT+TUNTIL*256
00318A 18 08       2295*                  JR	EXIT8
00318C             2296*  ;
00318C C1          2297*  EXIT7:          POP	BC		;Text pointer
00318D FE C7       2298*                  CP	TWHILE
00318F 20 A7       2299*                  JR	NZ,EXIT1
003191 01 00 95    2300*                  LD	BC,TWHILE+TENDWHILE*256
003194 CD 50 36    2301*  EXIT8:          CALL	WSRCH
003197 CD 42 35    2302*                  CALL	SPAN		;Skip UNTIL expression
00319A C3 99 24    2303*                  JP	XEQ
00319D             2304*  ;
00319D             2305*  ;PUT port,data
00319D             2306*  ;
00319D CD 33 18    2307*  PUT:            CALL	EXPRI		;PORT ADDRESS
0031A0 D9          2308*                  EXX
0031A1 E5          2309*                  PUSH	HL
0031A2 CD A2 20    2310*                  CALL	COMMA
0031A5 CD 33 18    2311*                  CALL	EXPRI		;DATA
0031A8 D9          2312*                  EXX
0031A9 C1          2313*                  POP	BC
0031AA ED 69       2314*                  OUT	(C),L		;OUTPUT TO PORT BC
0031AC C3 99 24    2315*                  JP	XEQ
0031AF             2316*  ;
0031AF             2317*  ;SUBROUTINES:
0031AF             2318*  ;
0031AF             2319*  ;ASSIGN - Assign a numeric value to a variable.
0031AF             2320*  ;Outputs: NC,  Z     - OK, numeric scalar
0031AF             2321*  ;         NC, NZ, PE - OK, string array  (D = type, E = operator)
0031AF             2322*  ; else if NC, NZ, P  - OK, numeric array (D = type, E = operator)
0031AF             2323*  ; else if NC, NZ     - OK, string scalar
0031AF             2324*  ;          C, NZ     - illegal / invalid
0031AF             2325*  ;
0031AF CD E3 41    2326*  ASSIGN:         CALL	GETVAR		;VARIABLE
0031B2 D8          2327*                  RET	C		;ILLEGAL VARIABLE
0031B3 C4 CD 41    2328*                  CALL	NZ,PUTVAR
0031B6 57          2329*                  LD	D,A		;Type
0031B7 CD 0B 45    2330*                  CALL	NXT
0031BA FD 23       2331*                  INC	IY
0031BC 5F          2332*                  LD	E,A		;Operator (or =)
0031BD FE 3D       2333*                  CP	'='
0031BF C4 4F 35    2334*                  CALL	NZ,EQUALS
0031C2 7A          2335*                  LD	A,D
0031C3 E6 C0       2336*                  AND	11000000B
0031C5 C0          2337*                  RET	NZ		;String or array
0031C6 D5          2338*                  PUSH	DE
0031C7 E5          2339*                  PUSH	HL
0031C8 CD 2C 18    2340*                  CALL	EXPRN
0031CB DD E1       2341*                  POP	IX
0031CD D1          2342*                  POP	DE
0031CE             2343*  ;
0031CE             2344*  ; Falls through to...
0031CE             2345*  ;
0031CE             2346*  ; MODIFY - Update numeric variable according to operator:
0031CE             2347*  ;   Inputs: D = type
0031CE             2348*  ;           E = operator
0031CE             2349*  ;           HLH'L'C = value
0031CE             2350*  ;           IX = destination VARPTR
0031CE             2351*  ; Destroys: Everything except IX,IY,SP
0031CE             2352*  ;
0031CE 7B          2353*  MODIFY:         LD	A,E
0031CF FE 3D       2354*                  CP	'='
0031D1 28 1C       2355*                  JR	Z,STORE0	;Simple assignment
0031D3 D5          2356*                  PUSH	DE
0031D4 D9          2357*                  EXX
0031D5 EB          2358*                  EX	DE,HL
0031D6 D9          2359*                  EXX
0031D7 EB          2360*                  EX	DE,HL
0031D8 41          2361*                  LD	B,C
0031D9 E3          2362*                  EX	(SP),HL
0031DA 7C          2363*                  LD	A,H
0031DB E3          2364*                  EX	(SP),HL
0031DC CD 25 19    2365*                  CALL	LOADN
0031DF E3          2366*                  EX	(SP),HL
0031E0 7D          2367*                  LD	A,L
0031E1 E3          2368*                  EX	(SP),HL
0031E2 E6 0F       2369*                  AND	15
0031E4 DD E5       2370*                  PUSH	IX
0031E6 CD 15 45    2371*                  CALL	FPP
0031E9 DD E1       2372*                  POP	IX
0031EB D1          2373*                  POP	DE
0031EC DA 44 3F    2374*                  JP	C,ERROR_
0031EF 7A          2375*  STORE0:         LD	A,D		;Type
0031F0 FE 05       2376*  STOREN:         CP	5
0031F2 28 12       2377*                  JR	Z,STORE5
0031F4 F5          2378*                  PUSH	AF
0031F5 0C          2379*                  INC	C		;SPEED - & PRESERVE F'
0031F6 0D          2380*                  DEC	C		; WHEN CALLED BY FNEND0
0031F7 C4 17 1C    2381*                  CALL	NZ,SFIX		;CONVERT TO INTEGER
0031FA F1          2382*                  POP	AF
0031FB FE 04       2383*                  CP	4
0031FD 28 0A       2384*                  JR	Z,STORE4
0031FF BF          2385*                  CP	A		;SET ZERO
003200 D9          2386*  STORE1:         EXX
003201 DD 75 00    2387*                  LD	(IX+0),L
003204 D9          2388*                  EXX
003205 C9          2389*                  RET
003206             2390*  ;
003206 DD 71 04    2391*  STORE5:         LD	(IX+4),C
003209 D9          2392*  STORE4:         EXX
00320A DD 75 00    2393*                  LD	(IX+0),L
00320D DD 74 01    2394*                  LD	(IX+1),H
003210 D9          2395*                  EXX
003211 DD 75 02    2396*                  LD	(IX+2),L
003214 DD 74 03    2397*                  LD	(IX+3),H
003217 C9          2398*                  RET
003218             2399*  ;
003218             2400*  ; MODIFS - Update string variable according to operator:
003218             2401*  ;   Inputs: H = type
003218             2402*  ;           L = operator (= or +)
003218             2403*  ;           E = string length (string in accumulator)
003218             2404*  ;           IX = destination VARPTR
003218             2405*  ; Destroys: Everything except SP, IY
003218             2406*  ;
003218 7D          2407*  MODIFS:         LD	A,L		;Operator
003219 FE 2B       2408*                  CP	'+'
00321B 7C          2409*                  LD	A,H		;Type
00321C 20 20       2410*                  JR	NZ,STACCS
00321E FD E5       2411*                  PUSH	IY
003220 DD E5       2412*                  PUSH	IX
003222 FD E1       2413*                  POP	IY
003224 CD 19 20    2414*                  CALL	PUSHS
003227 FD E5       2415*                  PUSH	IY
003229 DD E1       2416*                  POP	IX
00322B CD 0E 1A    2417*                  CALL	LOADS
00322E C1          2418*                  POP	BC
00322F 78          2419*                  LD	A,B		;Type
003230 0C          2420*                  INC	C
003231 0D          2421*                  DEC	C
003232 28 08       2422*                  JR	Z,MODFS1	;Zero length
003234 21 00 00    2423*                  LD	HL,0
003237 44          2424*                  LD	B,H
003238 39          2425*                  ADD	HL,SP
003239 ED B0       2426*                  LDIR
00323B F9          2427*                  LD	SP,HL
00323C FD E1       2428*  MODFS1:         POP	IY
00323E             2429*  ;
00323E             2430*  ; Falls through to:
00323E             2431*  ;
00323E 21 00 52    2432*  STACCS:         LD	HL,ACCS
003241 1F          2433*  STORES:         RRA
003242 30 4F       2434*                  JR	NC,STORS3	;FIXED STRING
003244 E5          2435*                  PUSH	HL
003245 CD 32 19    2436*                  CALL	LOAD4
003248 7B          2437*                  LD	A,E		;LENGTH OF STRING
003249 D9          2438*                  EXX
00324A 6F          2439*                  LD	L,A
00324B 7C          2440*                  LD	A,H		;LENGTH ALLOCATED
00324C D9          2441*                  EXX
00324D BB          2442*                  CP	E
00324E 30 24       2443*                  JR	NC,STORS1	;ENOUGH ROOM
003250 D9          2444*                  EXX
003251 65          2445*                  LD	H,L
003252 D9          2446*                  EXX
003253 E5          2447*                  PUSH	HL
003254 06 00       2448*                  LD	B,0
003256 4F          2449*                  LD	C,A
003257 09          2450*                  ADD	HL,BC
003258 ED 4B E0 54 2451*                  LD	BC,(FREE)
00325C ED 42       2452*                  SBC	HL,BC		;IS STRING LAST?
00325E E1          2453*                  POP	HL
00325F 28 12       2454*                  JR	Z,STORS0
003261 60          2455*                  LD	H,B
003262 69          2456*                  LD	L,C		;DESTINATION
003263             2457*  ;
003263 B7          2458*                  OR	A		;V5 optimisation
003264 28 0D       2459*                  JR	Z,STORS0
003266 7B          2460*                  LD	A,E
003267 5F          2461*  STORS2:         LD	E,A
003268 1D          2462*                  DEC	E
003269 A3          2463*                  AND	E
00326A 20 FB       2464*                  JR	NZ,STORS2
00326C 37          2465*                  SCF
00326D CB 13       2466*                  RL	E
00326F 7B          2467*                  LD	A,E
003270 D9          2468*                  EXX
003271 67          2469*                  LD	H,A
003272 D9          2470*                  EXX
003273             2471*  ;
003273 37          2472*  STORS0:         SCF
003274 CD 09 32    2473*  STORS1:         CALL	STORE4		;PRESERVES CARRY!
003277 06 00       2474*                  LD	B,0
003279 4B          2475*                  LD	C,E
00327A EB          2476*                  EX	DE,HL
00327B E1          2477*                  POP	HL
00327C 0D          2478*                  DEC	C
00327D 0C          2479*                  INC	C
00327E C8          2480*                  RET	Z		;NULL STRING
00327F ED B0       2481*                  LDIR
003281 D0          2482*                  RET	NC		;STRING REPLACED
003282 ED 53 E0 54 2483*                  LD	(FREE),DE
003286 E5          2484*  CHECK:          PUSH	HL
003287 2A E0 54    2485*                  LD	HL,(FREE)
00328A 24          2486*                  INC	H
00328B ED 72       2487*                  SBC	HL,SP
00328D E1          2488*                  POP	HL
00328E D8          2489*                  RET	C
00328F AF          2490*                  XOR	A
003290 C3 44 3F    2491*                  JP	ERROR_		;"No room"
003293             2492*  ;
003293 4B          2493*  STORS3:         LD	C,E
003294 DD E5       2494*                  PUSH	IX
003296 D1          2495*                  POP	DE
003297 AF          2496*                  XOR	A
003298 47          2497*                  LD	B,A
003299 B9          2498*                  CP	C
00329A 28 02       2499*                  JR	Z,STORS5
00329C ED B0       2500*                  LDIR
00329E 3E 0D       2501*  STORS5:         LD	A,CR
0032A0 12          2502*                  LD	(DE),A
0032A1 C9          2503*                  RET
0032A2             2504*  ;
0032A2             2505*  ; SAVRET - SAVE 'RETURNed' PARAMETER INFO
0032A2             2506*  ;
0032A2 DD 75 00    2507*  SAVRET:         LD	(IX+0),L		;Formal VARPTR
0032A5 DD 74 01    2508*                  LD	(IX+1),H
0032A8 DD 77 02    2509*                  LD	(IX+2),A
0032AB FD E3       2510*                  EX	(SP),IY
0032AD F5          2511*                  PUSH	AF
0032AE FD E5       2512*                  PUSH	IY
0032B0 DD E5       2513*                  PUSH	IX
0032B2 CD 0B 45    2514*                  CALL	NXT
0032B5 CD D6 25    2515*                  CALL	VAR_
0032B8 DD E1       2516*                  POP	IX
0032BA DD 75 04    2517*                  LD	(IX+4),L		;Actual VARPTR
0032BD DD 74 05    2518*                  LD	(IX+5),H
0032C0 DD 77 06    2519*                  LD	(IX+6),A
0032C3 FD E1       2520*                  POP	IY
0032C5 F1          2521*                  POP	AF
0032C6 01 08 00    2522*                  LD	BC,8
0032C9 DD 09       2523*                  ADD	IX,BC
0032CB 18 2D       2524*                  JR	ARGUE0
0032CD             2525*  ;
0032CD             2526*  ;ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
0032CD             2527*  ; CALLING STATEMENT TO THE DUMMY VARIABLES VIA
0032CD             2528*  ; THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
0032CD             2529*  ; PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
0032CD             2530*  ;   Inputs: DE addresses parameter list
0032CD             2531*  ;           IY addresses dummy variable list
0032CD             2532*  ;           IX addresses RETURNed parameter data block
0032CD             2533*  ;  Outputs: DE,IY updated
0032CD             2534*  ; Destroys: Everything
0032CD             2535*  ;
0032CD 3E FF       2536*  ARGUE:          LD	A,-1
0032CF F5          2537*                  PUSH	AF		;PUT MARKER ON STACK
0032D0 FD 23       2538*  ARGUE1:         INC	IY		;BUMP PAST ( | ,
0032D2 13          2539*                  INC	DE
0032D3 D5          2540*                  PUSH	DE
0032D4 06 00       2541*                  LD	B,0
0032D6 CD 0B 45    2542*                  CALL	NXT
0032D9 FE F8       2543*                  CP	TRETURN
0032DB 20 06       2544*                  JR	NZ,ARGUE9
0032DD FD 23       2545*                  INC	IY		;SKIP 'RETURN'
0032DF CD 0B 45    2546*                  CALL	NXT
0032E2 04          2547*                  INC	B		;FLAG 'RETURN'
0032E3 C5          2548*  ARGUE9:         PUSH	BC
0032E4 DD E5       2549*                  PUSH	IX
0032E6 CD E3 41    2550*                  CALL	GETVAR		;FORMAL PARAMETER
0032E9 38 49       2551*                  JR	C,ARGERR
0032EB C4 CD 41    2552*                  CALL	NZ,PUTVAR
0032EE DD E1       2553*                  POP	IX
0032F0 C1          2554*                  POP	BC
0032F1 D1          2555*                  POP	DE
0032F2 E5          2556*                  PUSH	HL		;VARPTR
0032F3 F5          2557*                  PUSH	AF
0032F4 D5          2558*                  PUSH	DE
0032F5 05          2559*                  DEC	B
0032F6 28 AA       2560*                  JR	Z,SAVRET
0032F8 FD E3       2561*                  EX	(SP),IY
0032FA CB 77       2562*  ARGUE0:         BIT	6,A		;ARRAY?
0032FC 20 3B       2563*                  JR	NZ,ARGUE3
0032FE B7          2564*                  OR	A		;TYPE
0032FF FA 15 33    2565*                  JP	M,ARGUE2	;STRING
003302 DD E5       2566*                  PUSH	IX
003304 CD 2C 18    2567*                  CALL	EXPRN		;ACTUAL PARAMETER
003307 DD E1       2568*                  POP	IX
003309 FD E3       2569*                  EX	(SP),IY
00330B D1          2570*                  POP	DE
00330C F1          2571*                  POP	AF
00330D D9          2572*                  EXX
00330E E5          2573*                  PUSH	HL
00330F D9          2574*                  EXX
003310 E5          2575*                  PUSH	HL
003311 47          2576*                  LD	B,A
003312 C5          2577*                  PUSH	BC
003313 18 13       2578*                  JR	ARGUE4
003315             2579*  ;
003315 DD E5       2580*  ARGUE2:         PUSH	IX
003317 CD 3C 18    2581*                  CALL	EXPRS
00331A D9          2582*                  EXX
00331B C1          2583*                  POP	BC
00331C FD E3       2584*                  EX	(SP),IY
00331E D1          2585*                  POP	DE
00331F D9          2586*                  EXX
003320 F1          2587*                  POP	AF
003321 CD 19 20    2588*                  CALL	PUSHS
003324 D9          2589*                  EXX
003325 C5          2590*                  PUSH	BC
003326 DD E1       2591*                  POP	IX
003328 CD 0B 45    2592*  ARGUE4:         CALL	NXT
00332B FE 2C       2593*                  CP	','
00332D 20 27       2594*                  JR	NZ,ARGUE5
00332F 1A          2595*                  LD	A,(DE)
003330 FE 2C       2596*                  CP	','
003332 28 9C       2597*                  JR	Z,ARGUE1	;ANOTHER
003334 3E 1F       2598*  ARGERR:         LD	A,31
003336 C3 44 3F    2599*                  JP	ERROR_		;"Bad arguments"
003339             2600*  ;
003339 DD E5       2601*  ARGUE3:         PUSH	IX
00333B CD 0B 45    2602*                  CALL	NXT
00333E CD E3 41    2603*                  CALL	GETVAR
003341 38 F1       2604*                  JR	C,ARGERR
003343 DD 4E 00    2605*                  LD	C,(IX+0)
003346 DD 46 01    2606*                  LD	B,(IX+1)
003349 DD E1       2607*                  POP	IX
00334B CD 0B 45    2608*                  CALL	NXT
00334E FD E3       2609*                  EX	(SP),IY
003350 D1          2610*                  POP	DE
003351 F1          2611*                  POP	AF
003352 C5          2612*                  PUSH	BC		;STACK ARRAY POINTER
003353 F5          2613*                  PUSH	AF		;STACK TYPE
003354 18 D2       2614*                  JR	ARGUE4
003356             2615*  ;
003356 CD AE 20    2616*  ARGUE5:         CALL	BRAKET
003359 1A          2617*                  LD	A,(DE)
00335A FE 29       2618*                  CP	')'
00335C 20 D6       2619*                  JR	NZ,ARGERR
00335E 13          2620*                  INC	DE
00335F D9          2621*  UNSTAK:         EXX
003360 C1          2622*  ARGUE6:         POP	BC
003361 78          2623*                  LD	A,B
003362 3C          2624*                  INC	A
003363 D9          2625*                  EXX
003364 C8          2626*                  RET	Z		;MARKER POPPED
003365 D9          2627*                  EXX
003366 3D          2628*                  DEC	A
003367 CB 77       2629*                  BIT	6,A		;ARRAY
003369 20 19       2630*                  JR	NZ,ARGUE8
00336B B7          2631*                  OR	A
00336C FA 7A 33    2632*                  JP	M,ARGUE7	;STRING
00336F E1          2633*                  POP	HL
003370 D9          2634*                  EXX
003371 E1          2635*                  POP	HL
003372 D9          2636*                  EXX
003373 DD E1       2637*                  POP	IX
003375 CD F0 31    2638*                  CALL	STOREN		;WRITE TO DUMMY
003378 18 E6       2639*                  JR	ARGUE6
00337A             2640*  ;
00337A CD 37 20    2641*  ARGUE7:         CALL	POPS
00337D DD E1       2642*                  POP	IX
00337F CD 3E 32    2643*                  CALL	STACCS
003382 18 DC       2644*                  JR	ARGUE6
003384             2645*  ;
003384 C1          2646*  ARGUE8:         POP	BC		;ARRAY POINTER
003385 DD E1       2647*                  POP	IX
003387 DD 71 00    2648*                  LD	(IX+0),C
00338A DD 70 01    2649*                  LD	(IX+1),B
00338D 18 D1       2650*                  JR	ARGUE6
00338F             2651*  ;
00338F             2652*  ;Restore RETURNed parameters, via the stack to ensure that
00338F             2653*  ; PROCFRED(A,B)    DEF PROCFRED(RETURN B,RETURN A)  works.
00338F             2654*  ;
00338F 3E FF       2655*  RETXFR:         LD	A,-1
003391 F5          2656*                  PUSH	AF		;PUT MARKER ON STACK
003392 D9          2657*  RETXF1:         EXX
003393 DD 6E 04    2658*                  LD	L,(IX+4)	;Actual parameter (destination)
003396 DD 66 05    2659*                  LD	H,(IX+5)
003399 E5          2660*                  PUSH	HL		;STACK VARPTR
00339A DD 6E 00    2661*                  LD	L,(IX+0)	;Formal parameter (source)
00339D DD 66 01    2662*                  LD	H,(IX+1)
0033A0 DD 7E 02    2663*                  LD	A,(IX+2)
0033A3 CB 77       2664*                  BIT	6,A		;ARRAY?
0033A5 20 19       2665*                  JR	NZ,RETXF3
0033A7 B7          2666*                  OR	A		;TYPE
0033A8 FA C6 33    2667*                  JP	M,RETXF2	;STRING
0033AB E5          2668*                  PUSH	HL
0033AC DD E3       2669*                  EX	(SP),IX
0033AE CD 25 19    2670*                  CALL	LOADN
0033B1 DD E1       2671*                  POP	IX
0033B3 D9          2672*                  EXX			;STACK VALUE
0033B4 E5          2673*                  PUSH	HL
0033B5 D9          2674*                  EXX
0033B6 E5          2675*                  PUSH	HL
0033B7 DD 46 06    2676*  RETXF6:         LD	B,(IX+6)
0033BA C5          2677*                  PUSH	BC		;TYPE & EXPONENT
0033BB CD 86 32    2678*  RETXF5:         CALL	CHECK		;CHECK ROOM
0033BE 18 1E       2679*                  JR	RETXF4
0033C0             2680*  ;
0033C0 5E          2681*  RETXF3:         LD	E,(HL)
0033C1 23          2682*                  INC	HL
0033C2 56          2683*                  LD	D,(HL)
0033C3 D5          2684*                  PUSH	DE		;STACK ARRAY POINTER
0033C4 18 F1       2685*                  JR	RETXF6
0033C6             2686*  ;
0033C6 E5          2687*  RETXF2:         PUSH	HL
0033C7 DD E3       2688*                  EX	(SP),IX
0033C9 CD 0E 1A    2689*                  CALL	LOADS
0033CC DD E1       2690*                  POP	IX
0033CE DD 7E 06    2691*                  LD	A,(IX+6)
0033D1 D9          2692*                  EXX
0033D2 DD E5       2693*                  PUSH	IX
0033D4 E1          2694*                  POP	HL
0033D5 D9          2695*                  EXX
0033D6 CD 19 20    2696*                  CALL	PUSHS
0033D9 D9          2697*                  EXX
0033DA E5          2698*                  PUSH	HL
0033DB DD E1       2699*                  POP	IX
0033DD D9          2700*                  EXX
0033DE 11 08 00    2701*  RETXF4:         LD	DE,8
0033E1 DD 19       2702*                  ADD	IX,DE
0033E3 D9          2703*                  EXX
0033E4 10 AC       2704*                  DJNZ	RETXF1
0033E6 C3 5F 33    2705*                  JP	UNSTAK
0033E9             2706*  ;
0033E9             2707*  ;Restore 'RETURNed' parameters,
0033E9             2708*  ;
0033E9 C1          2709*  RESRET:         POP	BC		;B = 'RETURN' COUNT
0033EA 26 00       2710*                  LD	H,0
0033EC 68          2711*                  LD	L,B
0033ED 29          2712*                  ADD	HL,HL
0033EE 29          2713*                  ADD	HL,HL
0033EF 29          2714*                  ADD	HL,HL		;RETURN COUNT * 8
0033F0 39          2715*                  ADD	HL,SP
0033F1 DD 21 00 00 2716*                  LD	IX,0
0033F5 DD 39       2717*                  ADD	IX,SP		;ADDRESS PARAMETER LIST
0033F7 F5          2718*                  PUSH	AF
0033F8 D5          2719*                  PUSH	DE
0033F9 E5          2720*                  PUSH	HL
0033FA D9          2721*                  EXX
0033FB C5          2722*                  PUSH	BC
0033FC D5          2723*                  PUSH	DE
0033FD D9          2724*                  EXX
0033FE 78          2725*                  LD	A,B
0033FF 21 00 52    2726*                  LD	HL,ACCS
003402 11 00 53    2727*                  LD	DE,BUFFER
003405 01 FF 00    2728*                  LD	BC,255
003408 ED B0       2729*                  LDIR
00340A 47          2730*                  LD	B,A
00340B CD 8F 33    2731*                  CALL	RETXFR		;TRANSFER VIA STACK
00340E 21 00 53    2732*                  LD	HL,BUFFER
003411 11 00 52    2733*                  LD	DE,ACCS
003414 01 FF 00    2734*                  LD	BC,255
003417 ED B0       2735*                  LDIR
003419 D9          2736*                  EXX
00341A D1          2737*                  POP	DE
00341B C1          2738*                  POP	BC
00341C D9          2739*                  EXX
00341D E1          2740*                  POP	HL
00341E D1          2741*                  POP	DE
00341F F1          2742*                  POP	AF
003420 18 0A       2743*                  JR	RESAR1
003422             2744*  ;
003422             2745*  ; Restore LOCAL array or memory block:
003422             2746*  ;
003422 C1          2747*  RESARR:         POP	BC
003423 CB 78       2748*                  BIT	7,B		;String array?
003425 E1          2749*                  POP	HL
003426 C1          2750*                  POP	BC
003427 09          2751*                  ADD	HL,BC
003428 39          2752*                  ADD	HL,SP
003429 C4 E3 36    2753*                  CALL	NZ,FREESA	;Free string array
00342C F9          2754*  RESAR1:         LD	SP,HL
00342D DD 23       2755*                  INC	IX		;Flag something restored
00342F 18 05       2756*                  JR	RESLO1
003431             2757*  ;
003431             2758*  ; RESLOC - Restore local variables/arrays or DATA/ERROR status from stack
003431             2759*  ;   Inputs: A = 0 if everything OK, bit0 set if DATPTR, bit1 set if ERRTRP
003431             2760*  ;  Outputs: Z if nothing was restored, NZ if something was restored
003431             2761*  ; Destroys: A,B,C,D,E,H,L,H',L',IX,SP,flags
003431             2762*  ;
003431 D1          2763*  RESLOC:         POP	DE		;Return address
003432 DD 21 00 00 2764*                  LD	IX,0		;To flag nothing was restored
003436 C1          2765*  RESLO1:         POP	BC		;Marker ?
003437 21 2A 35    2766*                  LD	HL,LOCCHK
00343A B7          2767*                  OR	A
00343B ED 42       2768*                  SBC	HL,BC
00343D 28 1A       2769*                  JR	Z,RESLO2	;Something to restore
00343F B7          2770*                  OR	A
003440 20 0F       2771*                  JR	NZ,RESLO8
003442 21 70 2A    2772*                  LD	HL,RETCHK
003445 ED 42       2773*                  SBC	HL,BC
003447 28 A0       2774*                  JR	Z,RESRET
003449 21 DC 26    2775*                  LD	HL,ARRCHK
00344C B7          2776*                  OR	A
00344D ED 42       2777*                  SBC	HL,BC
00344F 28 D1       2778*                  JR	Z,RESARR
003451 DD E5       2779*  RESLO8:         PUSH	IX
003453 E1          2780*                  POP	HL
003454 7C          2781*                  LD	A,H
003455 B5          2782*                  OR	L
003456 C5          2783*  RESLO0:         PUSH	BC		;Put back marker
003457 EB          2784*                  EX	DE,HL
003458 E9          2785*                  JP	(HL)		;Return
003459             2786*  ;
003459 DD E1       2787*  RESLO2:         POP	IX		;Variable pointer
00345B B7          2788*                  OR	A
00345C 28 20       2789*                  JR	Z,RESLO3	;Everything allowed
00345E DD E5       2790*                  PUSH	IX
003460 C1          2791*                  POP	BC
003461 CB 47       2792*                  BIT	0,A
003463 28 07       2793*                  JR	Z,RESLO6	;Bit 0 set, so
003465 21 F0 54    2794*                  LD	HL,DATPTR	;test for DATPTR
003468 ED 42       2795*                  SBC	HL,BC
00346A 28 12       2796*                  JR	Z,RESLO3
00346C B7          2797*  RESLO6:         OR	A
00346D CB 4F       2798*                  BIT	1,A
00346F 28 07       2799*                  JR	Z,RESLO7	;Bit 1 set, so
003471 21 EA 54    2800*                  LD	HL,ERRTRP	;test for ERRPTR
003474 ED 42       2801*                  SBC	HL,BC
003476 28 06       2802*                  JR	Z,RESLO3
003478 C5          2803*  RESLO7:         PUSH	BC		;Put back pointer
003479 01 2A 35    2804*                  LD	BC,LOCCHK
00347C 18 D8       2805*                  JR	RESLO0
00347E             2806*  ;
00347E C1          2807*  RESLO3:         POP	BC		;Type / exponent
00347F CB 70       2808*                  BIT	6,B
003481 20 14       2809*                  JR	NZ,RESLO4	;Array?
003483 CB 78       2810*                  BIT	7,B
003485 20 23       2811*                  JR	NZ,RESLO5	;String?
003487 E1          2812*                  POP	HL
003488 D9          2813*                  EXX
003489 E1          2814*                  POP	HL
00348A D9          2815*                  EXX
00348B CB 60       2816*                  BIT	4,B
00348D 20 A7       2817*                  JR	NZ,RESLO1
00348F F5          2818*                  PUSH	AF
003490 78          2819*                  LD	A,B
003491 CD F0 31    2820*                  CALL	STOREN		;Numeric
003494 F1          2821*                  POP	AF
003495 18 9F       2822*                  JR	RESLO1
003497             2823*  ;
003497 E1          2824*  RESLO4:         POP	HL
003498 CB 60       2825*                  BIT	4,B
00349A 20 9A       2826*                  JR	NZ,RESLO1
00349C DD 75 00    2827*                  LD	(IX+0),L	;Array
00349F DD 74 01    2828*                  LD	(IX+1),H
0034A2 18 92       2829*                  JR	RESLO1
0034A4             2830*  ;
0034A4 06 00       2831*  RESLO9:         LD	B,0
0034A6 09          2832*                  ADD	HL,BC
0034A7 F9          2833*                  LD	SP,HL
0034A8 18 8C       2834*  RESLGO:         JR	RESLO1
0034AA             2835*  ;
0034AA 21 00 00    2836*  RESLO5:         LD	HL,0
0034AD 39          2837*                  ADD	HL,SP
0034AE CB 60       2838*                  BIT	4,B
0034B0 20 F2       2839*                  JR	NZ,RESLO9
0034B2 F5          2840*                  PUSH	AF
0034B3 D5          2841*                  PUSH	DE
0034B4 59          2842*                  LD	E,C
0034B5 78          2843*                  LD	A,B
0034B6 CD 41 32    2844*                  CALL	STORES		;String
0034B9 D1          2845*                  POP	DE
0034BA F1          2846*                  POP	AF
0034BB F9          2847*                  LD	SP,HL
0034BC 18 EA       2848*                  JR	RESLGO
0034BE             2849*  ;
0034BE             2850*  ;SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
0034BE             2851*  ;  OF A FUNCTION OR PROCEDURE.
0034BE             2852*  ;THERE IS A LOT OF STACK MANIPULATION - CARE!!
0034BE             2853*  ;   Inputs: IY is parameters pointer
0034BE             2854*  ;  Outputs: IY updated
0034BE             2855*  ;           A' incremented for each RETURN
0034BE             2856*  ; Destroys: A',A,B,C,D,E,H,L,IX,IY,F,SP
0034BE             2857*  ;
0034BE D1          2858*  SAVLOC:         POP	DE		;RETURN ADDRESS
0034BF FD 23       2859*  SAVLO1:         INC	IY		;BUMP PAST ( | ,
0034C1 CD 0B 45    2860*                  CALL	NXT
0034C4 FE F8       2861*                  CP	TRETURN
0034C6 20 08       2862*                  JR	NZ,SAVLO6
0034C8 08          2863*                  EX	AF,AF'
0034C9 3C          2864*                  INC	A		;RETURN counter
0034CA 08          2865*                  EX	AF,AF'
0034CB FD 23       2866*                  INC	IY		;Bump past RETURN
0034CD CD 0B 45    2867*                  CALL	NXT
0034D0 D5          2868*  SAVLO6:         PUSH	DE
0034D1 D9          2869*                  EXX
0034D2 C5          2870*                  PUSH	BC
0034D3 D5          2871*                  PUSH	DE
0034D4 E5          2872*                  PUSH	HL
0034D5 D9          2873*                  EXX
0034D6 CD D6 25    2874*                  CALL	VAR_		;DUMMY VARIABLE
0034D9 D9          2875*                  EXX
0034DA E1          2876*                  POP	HL
0034DB D1          2877*                  POP	DE
0034DC C1          2878*                  POP	BC
0034DD D9          2879*                  EXX
0034DE D1          2880*                  POP	DE
0034DF CB 77       2881*                  BIT	6,A		;ARRAY?
0034E1 20 12       2882*                  JR	NZ,SAVLO3
0034E3 B7          2883*                  OR	A		;TYPE
0034E4 FA FF 34    2884*                  JP	M,SAVLO2	;STRING
0034E7 D9          2885*                  EXX
0034E8 E5          2886*                  PUSH	HL		;SAVE H'L'
0034E9 D9          2887*                  EXX
0034EA 47          2888*                  LD	B,A		;TYPE
0034EB CD 25 19    2889*                  CALL	LOADN
0034EE D9          2890*                  EXX
0034EF E3          2891*                  EX	(SP),HL
0034F0 D9          2892*                  EXX
0034F1 E5          2893*                  PUSH	HL
0034F2 C5          2894*                  PUSH	BC
0034F3 18 30       2895*                  JR	SAVLO4
0034F5             2896*  ;
0034F5 DD 4E 00    2897*  SAVLO3:         LD	C,(IX+0)	;ARRAY POINTER
0034F8 DD 46 01    2898*                  LD	B,(IX+1)
0034FB C5          2899*                  PUSH	BC		;SAVE TO STACK
0034FC F5          2900*                  PUSH	AF		;SAVE TYPE
0034FD 18 26       2901*                  JR	SAVLO4
0034FF             2902*  ;
0034FF F5          2903*  SAVLO2:         PUSH	AF		;STRING TYPE
003500 D5          2904*                  PUSH	DE
003501 D9          2905*                  EXX
003502 E5          2906*                  PUSH	HL
003503 D9          2907*                  EXX
003504 CD 0E 1A    2908*                  CALL	LOADS
003507 D9          2909*                  EXX
003508 E1          2910*                  POP	HL
003509 D9          2911*                  EXX
00350A 4B          2912*                  LD	C,E
00350B D1          2913*                  POP	DE
00350C CD 86 32    2914*                  CALL	CHECK
00350F F1          2915*                  POP	AF		;LEVEL STACK
003510 21 00 00    2916*                  LD	HL,0
003513 45          2917*                  LD	B,L
003514 ED 42       2918*                  SBC	HL,BC
003516 39          2919*                  ADD	HL,SP
003517 F9          2920*                  LD	SP,HL
003518 47          2921*                  LD	B,A		;TYPE
003519 C5          2922*                  PUSH	BC
00351A 28 09       2923*                  JR	Z,SAVLO4
00351C D5          2924*                  PUSH	DE
00351D 11 00 52    2925*                  LD	DE,ACCS
003520 EB          2926*                  EX	DE,HL
003521 45          2927*                  LD	B,L
003522 ED B0       2928*                  LDIR			;SAVE STRING ON STACK
003524 D1          2929*                  POP	DE
003525 DD E5       2930*  SAVLO4:         PUSH	IX		;VARPTR
003527 CD 2A 35    2931*                  CALL	SAVLO5
00352A             2932*  LOCCHK:         EQU	$
00352A CD 86 32    2933*  SAVLO5:         CALL	CHECK
00352D CD 0B 45    2934*                  CALL	NXT
003530 FE 2C       2935*                  CP	','		;MORE?
003532 28 8B       2936*                  JR	Z,SAVLO1
003534 EB          2937*                  EX	DE,HL
003535 E9          2938*                  JP	(HL)		;"RETURN"
003536             2939*  ;
003536 CD 0B 45    2940*  TERMQ:          CALL	NXT
003539 FE 8B       2941*                  CP	TELSE
00353B D0          2942*                  RET	NC
00353C FE 3A       2943*                  CP	':'		;ASSEMBLER SEPARATOR
00353E D0          2944*                  RET	NC
00353F FE 0D       2945*                  CP	CR
003541 C9          2946*                  RET
003542             2947*  ;
003542 CD 36 35    2948*  SPAN:           CALL	TERMQ
003545 C8          2949*                  RET	Z
003546 FD 23       2950*                  INC	IY
003548 FE 22       2951*                  CP	'"'
00354A CC 99 36    2952*                  CALL	Z,QUOTE
00354D 18 F3       2953*                  JR	SPAN
00354F             2954*  ;
00354F CD 0B 45    2955*  EQUALS:         CALL	NXT
003552 FD 23       2956*                  INC	IY
003554 FE 3D       2957*                  CP	'='
003556 C8          2958*                  RET	Z
003557 3E 04       2959*                  LD	A,4
003559 C3 44 3F    2960*                  JP	ERROR_		;"Mistake"
00355C             2961*  ;
00355C FE 8A       2962*  FORMAT:         CP	TTAB
00355E 28 0C       2963*                  JR	Z,DOTAB
003560 FE 89       2964*                  CP	TSPC
003562 28 38       2965*                  JR	Z,DOSPC
003564 FE 27       2966*                  CP	'''
003566 C0          2967*                  RET	NZ
003567 CD FB 40    2968*                  CALL	CRLF
00356A AF          2969*                  XOR	A
00356B C9          2970*                  RET
00356C             2971*  ;
00356C C5          2972*  DOTAB:          PUSH	BC
00356D CD 33 18    2973*                  CALL	EXPRI
003570 D9          2974*                  EXX
003571 C1          2975*                  POP	BC
003572 FD 7E 00    2976*                  LD	A,(IY)
003575 FE 2C       2977*                  CP	','
003577 28 11       2978*                  JR	Z,DOTAB1
003579 CD AE 20    2979*                  CALL	BRAKET
00357C 7D          2980*                  LD	A,L
00357D 21 FB 54    2981*  TABIT:          LD	HL,COUNT
003580 BE          2982*                  CP	(HL)
003581 C8          2983*                  RET	Z
003582 F5          2984*                  PUSH	AF
003583 DC FB 40    2985*                  CALL	C,CRLF
003586 F1          2986*                  POP	AF
003587 96          2987*                  SUB	(HL)
003588 18 19       2988*                  JR	SPACES
00358A FD 23       2989*  DOTAB1:         INC	IY
00358C C5          2990*                  PUSH	BC
00358D E5          2991*                  PUSH	HL
00358E CD 33 18    2992*                  CALL	EXPRI
003591 D9          2993*                  EXX
003592 D1          2994*                  POP	DE
003593 C1          2995*                  POP	BC
003594 CD AE 20    2996*                  CALL	BRAKET
003597 CD 08 02    2997*                  CALL	PUTCSR
00359A AF          2998*                  XOR	A
00359B C9          2999*                  RET
00359C             3000*  ;
00359C C5          3001*  DOSPC:          PUSH	BC
00359D CD 60 18    3002*                  CALL	ITEMI
0035A0 D9          3003*                  EXX
0035A1 7D          3004*                  LD	A,L
0035A2 C1          3005*                  POP	BC
0035A3 B7          3006*  SPACES:         OR	A
0035A4 C8          3007*                  RET	Z
0035A5 C5          3008*                  PUSH	BC
0035A6 47          3009*                  LD	B,A
0035A7 3E 20       3010*  FILL1:          LD	A,' '
0035A9 CD 02 41    3011*                  CALL	OUTCHR
0035AC 10 F9       3012*                  DJNZ	FILL1
0035AE C1          3013*                  POP	BC
0035AF AF          3014*                  XOR	A
0035B0 C9          3015*                  RET
0035B1             3016*  ;
0035B1 21 00 52    3017*  PTEXT:          LD	HL,ACCS
0035B4 1C          3018*                  INC	E
0035B5 1D          3019*  PTEXT1:         DEC	E
0035B6 C8          3020*                  RET	Z
0035B7 7E          3021*                  LD	A,(HL)
0035B8 23          3022*                  INC	HL
0035B9 CD 02 41    3023*                  CALL	OUTCHR
0035BC 18 F7       3024*                  JR	PTEXT1
0035BE             3025*  ;
0035BE F5          3026*  FETCHS:         PUSH	AF
0035BF C5          3027*                  PUSH	BC
0035C0 E5          3028*                  PUSH	HL
0035C1 FD E3       3029*                  EX	(SP),IY
0035C3 CD DB 35    3030*                  CALL	XTRACT
0035C6 CD 0B 45    3031*                  CALL	NXT
0035C9 FD E3       3032*                  EX	(SP),IY
0035CB E1          3033*                  POP	HL
0035CC C1          3034*                  POP	BC
0035CD F1          3035*                  POP	AF
0035CE C9          3036*                  RET
0035CF             3037*  ;
0035CF 11 00 52    3038*  LINES:          LD	DE,ACCS
0035D2 7E          3039*  LINE1S:         LD	A,(HL)
0035D3 12          3040*                  LD	(DE),A
0035D4 FE 0D       3041*                  CP	CR
0035D6 C8          3042*                  RET	Z
0035D7 23          3043*                  INC	HL
0035D8 1C          3044*                  INC	E
0035D9 18 F7       3045*                  JR	LINE1S
0035DB             3046*  ;
0035DB CD 0B 45    3047*  XTRACT:         CALL	NXT
0035DE FE 22       3048*                  CP	'"'
0035E0 FD 23       3049*                  INC	IY
0035E2 CA 7A 19    3050*                  JP	Z,CONS
0035E5 FD 2B       3051*                  DEC	IY
0035E7 11 00 52    3052*                  LD	DE,ACCS
0035EA FD 7E 00    3053*  XTRAC1:         LD	A,(IY)
0035ED 12          3054*                  LD	(DE),A
0035EE FE 2C       3055*                  CP	','
0035F0 C8          3056*                  RET	Z
0035F1 FE 0D       3057*                  CP	CR
0035F3 C8          3058*                  RET	Z
0035F4 FD 23       3059*                  INC	IY
0035F6 1C          3060*                  INC	E
0035F7 18 F1       3061*                  JR	XTRAC1
0035F9             3062*  ;
0035F9 3E DC       3063*  DSRCH:          LD	A,TDATA
0035FB 06 00       3064*  SEARCHex:         LD	B,0
0035FD 4E          3065*  SRCH1:          LD	C,(HL)
0035FE 0C          3066*                  INC	C
0035FF 0D          3067*                  DEC	C
003600 28 0C       3068*                  JR	Z,SRCH2		;FAIL
003602 23          3069*                  INC	HL
003603 23          3070*                  INC	HL
003604 23          3071*                  INC	HL
003605 BE          3072*                  CP	(HL)
003606 C8          3073*                  RET	Z
003607 0D          3074*                  DEC	C
003608 0D          3075*                  DEC	C
003609 0D          3076*                  DEC	C
00360A 09          3077*                  ADD	HL,BC
00360B C3 FD 35    3078*                  JP	SRCH1
00360E 2B          3079*  SRCH2:          DEC	HL		;POINT TO CR
00360F 37          3080*                  SCF
003610 C9          3081*                  RET
003611             3082*  ;
003611             3083*  ; NSCAN - scan for token at start of line, with nesting of inner structures
003611             3084*  ; Alternative entry at NSCAN1 with L = level (used by CASE)
003611             3085*  ;
003611             3086*  ;   Inputs: B = token to find (1, start of line)
003611             3087*  ;           C = token to find (2, start of line)
003611             3088*  ;           E = token to nest (end of line)
003611             3089*  ;           D = token to unnest (start of line)
003611             3090*  ;           IY = start search area (line length byte)
003611             3091*  ;  Outputs: NZ if not found
003611             3092*  ;           Z if found, IY points to byte after token
003611             3093*  ; Destroys: A,B,C,L,IY,F
003611             3094*  ;
003611 2E 00       3095*  NSCAN:          LD	L,0		;nest level
003613 FD 7E 00    3096*  NSCAN1:         LD	A,(IY)		;get line length
003616 B7          3097*                  OR	A		;test zero = end of prog
003617 28 34       3098*                  JR	Z,NSCAN6
003619 FD 7E 03    3099*                  LD	A,(IY+3)	;initial token
00361C B8          3100*                  CP	B		;test value reqd
00361D 28 1D       3101*                  JR	Z,NSCAN3	;found (1)
00361F B9          3102*                  CP	C
003620 28 1A       3103*                  JR	Z,NSCAN3	;found (2)
003622 BA          3104*  NSCAN7:         CP	D		;unnest?
003623 28 22       3105*                  JR	Z,NSCAN5
003625 C5          3106*  NSCAN2:         PUSH	BC
003626 06 00       3107*                  LD	B,0
003628 FD 4E 00    3108*                  LD	C,(IY)
00362B FD 09       3109*                  ADD	IY,BC		;go to next line
00362D FD 7E FE    3110*                  LD	A,(IY-2)
003630 BB          3111*                  CP	E		;nest?
003631 79          3112*                  LD	A,C
003632 C1          3113*                  POP	BC
003633 20 DE       3114*                  JR	NZ,NSCAN1	;continue
003635 FE 05       3115*                  CP	5		;empty line ?
003637 38 DA       3116*                  JR	C,NSCAN1	;continue
003639 2C          3117*                  INC	L		;increment nest level
00363A 18 D7       3118*                  JR	NSCAN1		;continue
00363C             3119*  ;
00363C 2C          3120*  NSCAN3:         INC	L
00363D 2D          3121*                  DEC	L
00363E 20 E2       3122*                  JR	NZ,NSCAN7
003640 01 04 00    3123*  NSCAN4:         LD	BC,4
003643 FD 09       3124*                  ADD	IY,BC
003645 AF          3125*                  XOR	A		;Z
003646 C9          3126*                  RET
003647             3127*  ;
003647 2D          3128*  NSCAN5:         DEC	L		;decrement nest level
003648 F2 25 36    3129*                  JP	P,NSCAN2
00364B 18 F3       3130*                  JR	NSCAN4
00364D             3131*  ;
00364D F6 01       3132*  NSCAN6:         OR	1		;NZ
00364F C9          3133*                  RET
003650             3134*  ;
003650             3135*  ; WSRCH - search for token, with nesting of inner structures
003650             3136*  ;
003650             3137*  ;   Inputs: B = token to find or unnest (anywhere)
003650             3138*  ;           C = token to nest (anywhere), ignore after EXITex
003650             3139*  ;           D = ordinal (1 = find first token, 2 = second)
003650             3140*  ;           IY = address to start looking
003650             3141*  ;  Outputs: IY points to byte after that found
003650             3142*  ;           if not found abort to END
003650             3143*  ; Destroys: A,D,IY,F
003650             3144*  ;
003650 FD 7E 00    3145*  WSRCH:          LD	A,(IY)
003653 FD 23       3146*                  INC	IY
003655 FE 22       3147*                  CP	'"'
003657 CC 99 36    3148*                  CALL	Z,QUOTE
00365A FE F4       3149*                  CP	TREM
00365C 28 22       3150*                  JR	Z,WSRCHM
00365E FE 10       3151*                  CP	TEXIT
003660 28 30       3152*                  JR	Z,WSRCHE
003662 B8          3153*                  CP	B
003663 28 29       3154*                  JR	Z,WSRCHX
003665 B9          3155*                  CP	C
003666 28 23       3156*                  JR	Z,WSRCHP
003668 FE 0D       3157*                  CP	CR
00366A 20 E4       3158*                  JR	NZ,WSRCH
00366C FD 7E 00    3159*  WSRCH1:         LD	A,(IY)			;Line length
00366F FD 23       3160*                  INC	IY
003671 B7          3161*                  OR	A
003672 CA D3 24    3162*                  JP	Z,END
003675 FD 23       3163*                  INC	IY
003677 FD 23       3164*                  INC	IY			;Skip line number
003679 FD 7E 00    3165*                  LD	A,(IY)
00367C FE DC       3166*                  CP	TDATA
00367E 20 D0       3167*                  JR	NZ,WSRCH
003680 FD 7E 00    3168*  WSRCHM:         LD	A,(IY)
003683 FD 23       3169*                  INC	IY
003685 FE 0D       3170*                  CP	CR
003687 20 F7       3171*                  JR	NZ,WSRCHM		;Skip to end of line
003689 18 E1       3172*                  JR	WSRCH1
00368B             3173*  ;
00368B 14          3174*  WSRCHP:         INC	D
00368C 18 C2       3175*                  JR	WSRCH
00368E             3176*  ;
00368E 15          3177*  WSRCHX:         DEC	D
00368F 20 BF       3178*                  JR	NZ,WSRCH
003691 C9          3179*                  RET
003692             3180*  ;
003692 CD 0B 45    3181*  WSRCHE:         CALL	NXT
003695 FD 23       3182*                  INC	IY
003697 18 B7       3183*                  JR	WSRCH
003699             3184*  ;
003699             3185*  ; QUOTE - skip quoted string
003699             3186*  ;
003699 FD 7E 00    3187*  QUOTE:          LD	A,(IY)
00369C FD 23       3188*                  INC	IY
00369E FE 0D       3189*                  CP	CR
0036A0 CA A8 36    3190*                  JP	Z,MISQUO
0036A3 FE 22       3191*                  CP	'"'
0036A5 20 F2       3192*                  JR	NZ,QUOTE
0036A7 C9          3193*                  RET
0036A8             3194*  ;
0036A8 3E 09       3195*  MISQUO:         LD	A,9
0036AA C3 44 3F    3196*                  JP	ERROR_		;"Missing quote"
0036AD             3197*  ;
0036AD             3198*  ; X14OR5 - multiply by 1, 4 or 5
0036AD             3199*  ;   Inputs: DE = number to be multiplied
0036AD             3200*  ;           A = 1, 4 or 5 (else multiply by 4)
0036AD             3201*  ;  Outputs: DE = DE * A
0036AD             3202*  ;           Carry set if overflow
0036AD             3203*  ; Destroys: D,E,H,L,F
0036AD             3204*  ;
0036AD 62          3205*  X14OR5:         LD	H,D
0036AE 6B          3206*                  LD	L,E
0036AF FE 01       3207*                  CP	1
0036B1 C8          3208*                  RET	Z
0036B2 FE 05       3209*                  CP	5
0036B4 29          3210*                  ADD	HL,HL
0036B5 D8          3211*                  RET	C
0036B6 29          3212*                  ADD	HL,HL
0036B7 D8          3213*                  RET	C
0036B8 EB          3214*                  EX	DE,HL
0036B9 C0          3215*                  RET	NZ
0036BA 19          3216*                  ADD	HL,DE
0036BB EB          3217*                  EX	DE,HL
0036BC C9          3218*                  RET
0036BD             3219*  ;
0036BD             3220*  ; MUL16 - 16-bit multiply
0036BD             3221*  ;   Inputs: HL = number to be multiplied
0036BD             3222*  ;           BC = multiplier
0036BD             3223*  ;  Outputs: HL = HL * BC
0036BD             3224*  ;           Carry set if overflow
0036BD             3225*  ; Destroys: A,D,E,H,L,F
0036BD             3226*  ;
0036BD EB          3227*  MUL16:          EX	DE,HL
0036BE 21 00 00    3228*                  LD	HL,0
0036C1 3E 10       3229*                  LD	A,16
0036C3 29          3230*  MUL161:         ADD	HL,HL
0036C4 D8          3231*                  RET	C		;OVERFLOW
0036C5 CB 23       3232*                  SLA	E
0036C7 CB 12       3233*                  RL	D
0036C9 30 02       3234*                  JR	NC,MUL162
0036CB 09          3235*                  ADD	HL,BC
0036CC D8          3236*                  RET	C
0036CD 3D          3237*  MUL162:         DEC	A
0036CE 20 F3       3238*                  JR	NZ,MUL161
0036D0 C9          3239*                  RET
0036D1             3240*  ;
0036D1 CD 0B 45    3241*  CHANEL:         CALL	NXT
0036D4 FE 23       3242*                  CP	'#'
0036D6 3E 2D       3243*                  LD	A,45
0036D8 C2 44 3F    3244*                  JP	NZ,ERROR_	;"Missing #"
0036DB FD 23       3245*  CHNL:           INC	IY		;SKIP '#'
0036DD CD 60 18    3246*                  CALL	ITEMI
0036E0 D9          3247*                  EXX
0036E1 EB          3248*                  EX	DE,HL
0036E2 C9          3249*                  RET
0036E3             3250*  ;
0036E3             3251*  ; FREESA - Free members of a string array if adjacent to the top of heap
0036E3             3252*  ;   Inputs: BC = length of array (= 4 * number of elements)
0036E3             3253*  ;           HL addresses array first byte *above* array
0036E3             3254*  ;  Outputs: NZ if any array element freed, Z if none
0036E3             3255*  ; Destroys: nothing
0036E3             3256*  ;
0036E3 F5          3257*  FREESA:         PUSH	AF
0036E4 C5          3258*  FREES0:         PUSH	BC
0036E5 D5          3259*                  PUSH	DE
0036E6 E5          3260*                  PUSH	HL
0036E7 AF          3261*                  XOR	A
0036E8 50          3262*                  LD	D,B
0036E9 59          3263*                  LD	E,C
0036EA 47          3264*                  LD	B,A
0036EB D5          3265*  FREES1:         PUSH	DE
0036EC 2B          3266*                  DEC	HL
0036ED 56          3267*                  LD	D,(HL)
0036EE 2B          3268*                  DEC	HL
0036EF 5E          3269*                  LD	E,(HL)
0036F0 2B          3270*                  DEC	HL
0036F1 4E          3271*                  LD	C,(HL)
0036F2 2B          3272*                  DEC	HL
0036F3 E5          3273*                  PUSH	HL
0036F4 2A E0 54    3274*                  LD	HL,(FREE)
0036F7 EB          3275*                  EX	DE,HL
0036F8 09          3276*                  ADD	HL,BC
0036F9 ED 52       3277*                  SBC	HL,DE
0036FB 20 07       3278*                  JR	NZ,FREES2
0036FD 19          3279*                  ADD	HL,DE
0036FE ED 42       3280*                  SBC	HL,BC
003700 22 E0 54    3281*                  LD	(FREE),HL
003703 B4          3282*                  OR	H
003704 D1          3283*  FREES2:         POP	DE
003705 E1          3284*                  POP	HL
003706 0E 04       3285*                  LD	C,4
003708 B7          3286*                  OR	A
003709 ED 42       3287*                  SBC	HL,BC
00370B EB          3288*                  EX	DE,HL
00370C 20 DD       3289*                  JR	NZ,FREES1
00370E B7          3290*                  OR	A
00370F E1          3291*                  POP	HL
003710 D1          3292*                  POP	DE
003711 C1          3293*                  POP	BC
003712 B7          3294*                  OR	A
003713 20 CF       3295*                  JR	NZ,FREES0
003715 F1          3296*                  POP	AF
003716 C9          3297*                  RET
003717             3298*  ;
003717             3299*  ;                END
003717             3300*  ;    include "exec.inc"
003717             0018       include "main.asm"
003717             0001*  ;
003717             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
003717             0003*  ;
003717             0004*                  .ASSUME ADL = 0
003717             0005*  ;	.ORG 0x0000
003717             0006*  ;                SEGMENT CODE
003717             0007*  ;
003717             0008*  ;                XDEF	NEWIT
003717             0009*  ;                XDEF	BAD
003717             0010*  ;                XDEF	CLEAN
003717             0011*  ;                XDEF	LINNUM
003717             0012*  ;                XDEF	ERROR_
003717             0013*  ;                XDEF	GETTOP
003717             0014*  ;                XDEF	DEL
003717             0015*  ;                XDEF	LISTIT
003717             0016*  ;
003717             0017*  ;BBC BASIC INTERPRETER - Z80 VERSION
003717             0018*  ;COMMANDS AND COMMON MODULE - "MAIN"
003717             0019*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
003717             0020*  ;
003717             0021*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
003717             0022*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
003717             0023*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
003717             0024*  ;
003717             0025*  ;VERSION 2.3, 07-05-1984
003717             0026*  ;VERSION 3.0, 01-03-1987
003717             0027*  ;VERSION 5.0, 31-05-2024
003717             0028*  ;VERSION 5.1, 10-08-2024
003717             0029*  ;
003717             0030*  ;                XREF	XEQ
003717             0031*  ;                XREF	RUN0
003717             0032*  ;                XREF	CHAIN0
003717             0033*  ;                XREF	TERMQ
003717             0034*  ;                XREF	MUL16
003717             0035*  ;                XREF	X14OR5
003717             0036*  ;                XREF	SPACES
003717             0037*  ;                XREF	ESCAPE
003717             0038*  ;                XREF	CHECK
003717             0039*  ;                XREF	SEARCH
003717             0040*  ;
003717             0041*  ;                XREF	OSWRCH
003717             0042*  ;                XREF	OSLINE
003717             0043*  ;                XREF	OSINIT
003717             0044*  ;                XREF	OSLOAD
003717             0045*  ;                XREF	OSSAVE
003717             0046*  ;                XREF	OSBGET
003717             0047*  ;                XREF	OSBPUT
003717             0048*  ;                XREF	OSSHUT
003717             0049*  ;                XREF	OSSTAT
003717             0050*  ;                XREF	PROMPT
003717             0051*  ;                XREF	LTRAP
003717             0052*  ;                XREF	OSCLI
003717             0053*  ;                XREF	RESET
003717             0054*  ;
003717             0055*  ;                XREF	COMMA
003717             0056*  ;                XREF	BRAKET
003717             0057*  ;                XREF	ZERO
003717             0058*  ;                XREF	ITEMI
003717             0059*  ;                XREF	EXPRI
003717             0060*  ;                XREF	EXPRS
003717             0061*  ;                XREF	DECODE
003717             0062*  ;                XREF	LOADN
003717             0063*  ;                XREF	SFIX
003717             0064*  ;
003717             0065*  ;                XDEF	NXT
003717             0066*  ;                XDEF	NLIST
003717             0067*  ;                XDEF	START
003717             0068*  ;                XDEF	OUTCHR
003717             0069*  ;                XDEF	OUT
003717             0070*  ;                XDEF	ERROR_
003717             0071*  ;                XDEF	EXTERR
003717             0072*  ;                XDEF	REPORT
003717             0073*  ;                XDEF	CLOOP
003717             0074*  ;                XDEF	WARM
003717             0075*  ;                XDEF	CLEAR
003717             0076*  ;                XDEF	CRLF
003717             0077*  ;                XDEF	SAYLN
003717             0078*  ;                XDEF	LOAD0
003717             0079*  ;                XDEF	TELL
003717             0080*  ;                XDEF	FINDL
003717             0081*  ;                XDEF	GETTOP
003717             0082*  ;                XDEF	SETLIN
003717             0083*  ;                XDEF	GETVAR
003717             0084*  ;                XDEF	PUTVAR
003717             0085*  ;                XDEF	GETDEF
003717             0086*  ;                XDEF	LOCATE
003717             0087*  ;                XDEF	CREATE
003717             0088*  ;                XDEF	PBCDL
003717             0089*  ;                XDEF	LEXAN2
003717             0090*  ;                XDEF	RANGE
003717             0091*  ;                XDEF	VERMSG
003717             0092*  ;                XDEF	KEYWDS
003717             0093*  ;                XDEF	KEYWDL
003717             0094*  ;
003717             0095*  ;                XREF	PAGE_
003717             0096*  ;                XREF	ACCS
003717             0097*  ;                XREF	BUFFER
003717             0098*  ;                XREF	LOMEM
003717             0099*  ;                XREF	HIMEM
003717             0100*  ;                XREF	COUNT
003717             0101*  ;                XREF	WIDTH
003717             0102*  ;                XREF	FREE
003717             0103*  ;                XREF	STAVAR
003717             0104*  ;                XREF	DYNVAR
003717             0105*  ;                XREF	ERRTXT
003717             0106*  ;                XREF	ERR
003717             0107*  ;                XREF	ERL
003717             0108*  ;                XREF	CURLIN
003717             0109*  ;                XREF	ERRTRP
003717             0110*  ;                XREF	ONERSP
003717             0111*  ;                XREF	FNPTR
003717             0112*  ;                XREF	PROPTR
003717             0113*  ;                XREF	AUTONO
003717             0114*  ;                XREF	INCREM
003717             0115*  ;                XREF	LISTON
003717             0116*  ;                XREF	TRACEN
003717             0117*  ;
003717             0118*  ; CR             EQU	0DH
003717             0119*  ; LF             EQU	0AH
003717             0120*  ; ESC            EQU	1BH
003717             0121*  ;
003717             0122*  TERROR:         EQU	85H
003717             0123*  TLINE:          EQU	86H
003717             0124*  TELSE:          EQU	8BH
003717             0125*  TTHEN:          EQU	8CH
003717             0126*  TLINO:          EQU	8DH
003717             0127*  TFN:            EQU	0A4H
003717             0128*  TTO:            EQU	0B8H
003717             0129*  TWHILE:         EQU	0C7H
003717             0130*  TCASE:          EQU	0C8H
003717             0131*  TWHEN:          EQU	0C9H
003717             0132*  TOF:            EQU	0CAH
003717             0133*  TENDCASE:       EQU	0CBH
003717             0134*  TOTHERWISE:     EQU	0CCH
003717             0135*  TENDIF:         EQU	0CDH
003717             0136*  TENDWHILE:      EQU	0CEH
003717             0137*  TDATA:          EQU	0DCH
003717             0138*  TDIM:           EQU	0DEH
003717             0139*  TFOR:           EQU	0E3H
003717             0140*  TGOSUB:         EQU	0E4H
003717             0141*  TGOTO:          EQU	0E5H
003717             0142*  TIF:            EQU	0E7H
003717             0143*  TLOCAL:         EQU	0EAH
003717             0144*  TNEXT:          EQU	0EDH
003717             0145*  TON:            EQU	0EEH
003717             0146*  TPROC:          EQU	0F2H
003717             0147*  TREM:           EQU	0F4H
003717             0148*  TREPEAT:        EQU	0F5H
003717             0149*  TRESTORE:       EQU	0F7H
003717             0150*  TTRACE:         EQU	0FCH
003717             0151*  TUNTIL:         EQU	0FDH
003717             0152*  TEXIT:          EQU	10H
003717             0153*  ;
003717             0154*  TOKLO:          EQU	8FH
003717             0155*  TOKHI:          EQU	93H
003717             0156*  OFFSET:         EQU	0CFH-TOKLO
003717             0157*  ;
003717 C3 41 37    0158*  START:          JP	COLD
00371A C3 AF 37    0159*                  JP	WARM
00371D C3 E3 25    0160*                  JP	ESCAPE
003720 C3 55 3F    0161*                  JP	EXTERR
003723 C3 FA 44    0162*                  JP	TELL
003726 C3 E8 44    0163*                  JP	TEXT_
003729 C3 60 18    0164*                  JP	ITEMI
00372C C3 33 18    0165*                  JP	EXPRI
00372F C3 3C 18    0166*                  JP	EXPRS
003732 C3 97 15    0167*                  JP	OSCLI
003735 C3 3F 12    0168*                  JP	OSBGET
003738 C3 47 12    0169*                  JP	OSBPUT
00373B C3 50 12    0170*                  JP	OSSTAT
00373E C3 37 12    0171*                  JP	OSSHUT
003741 21 00 54    0172*  COLD:           LD	HL,STAVAR	;COLD START
003744 F9          0173*                  LD	SP,HL
003745 36 0A       0174*                  LD	(HL),10
003747 2C          0175*                  INC	L
003748 36 09       0176*                  LD	(HL),9
00374A 2C          0177*                  INC	L
00374B AF          0178*                  XOR	A
00374C 77          0179*  PURGE:          LD	(HL),A		;CLEAR SCRATCHPAD
00374D 2C          0180*                  INC	L
00374E 20 FC       0181*                  JR	NZ,PURGE
003750 3E 37       0182*                  LD	A,37H		;V3.0
003752 32 FE 54    0183*                  LD	(LISTON),A
003755 21 8E 37    0184*                  LD	HL,NOTICE
003758 22 EE 54    0185*                  LD	(ERRTXT),HL
00375B CD 84 11    0186*                  CALL	OSINIT
00375E ED 53 E2 54 0187*                  LD	(HIMEM),DE
003762 22 DC 54    0188*                  LD	(PAGE_),HL
003765 CD 3E 40    0189*                  CALL	NEWIT
003768 C2 52 24    0190*                  JP	NZ,CHAIN0	;AUTO-RUN
00376B CD FA 44    0191*                  CALL	TELL
00376E 42 42 43 20 0192*  VERMSG:         DB	"BBC BASIC (Z80) Version 5.00  "
       42 41 53 49 
       43 20 28 5A 
       38 30 29 20 
       56 65 72 73 
       69 6F 6E 20 
       35 2E 30 30 
       20 20       
00378C 0D          0193*                  DB	CR
00378D 0A          0194*                  DB	LF
00378E 28 43 29 20 0195*  NOTICE:         DB	"(C) Copyright R.T.Russell 2024"
       43 6F 70 79 
       72 69 67 68 
       74 20 52 2E 
       54 2E 52 75 
       73 73 65 6C 
       6C 20 32 30 
       32 34       
0037AC 0D          0196*                  DB	CR
0037AD 0A          0197*                  DB	LF
0037AE 00          0198*                  DB	0
0037AF F6          0199*  WARM:           DB	0F6H
0037B0 37          0200*  CLOOP:          SCF
0037B1 ED 7B E2 54 0201*                  LD	SP,(HIMEM)
0037B5 CD 93 11    0202*                  CALL	PROMPT		;PROMPT USER
0037B8 21 FE 54    0203*                  LD	HL,LISTON
0037BB 7E          0204*                  LD	A,(HL)
0037BC E6 0F       0205*                  AND	0FH		;LISTO
0037BE F6 30       0206*                  OR	30H		;OPT 3
0037C0 77          0207*                  LD	(HL),A
0037C1 ED 62       0208*                  SBC	HL,HL		;HL <- 0 (V3.0)
0037C3 22 EA 54    0209*                  LD	(ERRTRP),HL
0037C6 22 EC 54    0210*                  LD	(ONERSP),HL
0037C9 22 F4 54    0211*                  LD	(CURLIN),HL	;For CMOS EDIT->LIST
0037CC 2A E8 54    0212*                  LD	HL,(AUTONO)
0037CF E5          0213*                  PUSH	HL
0037D0 7C          0214*                  LD	A,H
0037D1 B5          0215*                  OR	L
0037D2 28 17       0216*                  JR	Z,NOAUTO
0037D4 E5          0217*                  PUSH	HL
0037D5 CD 96 41    0218*                  CALL	PBCD		;AUTO NUMBER
0037D8 E1          0219*                  POP	HL
0037D9 ED 4B FF 54 0220*                  LD	BC,(INCREM)
0037DD 06 00       0221*                  LD	B,0
0037DF 09          0222*                  ADD	HL,BC
0037E0 DA AF 43    0223*                  JP	C,TOOBIGmn
0037E3 22 E8 54    0224*                  LD	(AUTONO),HL
0037E6 3E 20       0225*                  LD	A,' '
0037E8 CD 02 41    0226*                  CALL	OUTCHR
0037EB 21 00 52    0227*  NOAUTO:         LD	HL,ACCS
0037EE CD CB 11    0228*                  CALL	OSLINE		;GET CONSOLE INPUT
0037F1 AF          0229*                  XOR	A
0037F2 32 FB 54    0230*                  LD	(COUNT),A
0037F5 FD 21 00 52 0231*                  LD	IY,ACCS
0037F9 21 E1 3B    0232*                  LD	HL,COMNDS
0037FC CD A6 3F    0233*                  CALL	LEX0
0037FF E1          0234*                  POP	HL
003800 20 19       0235*                  JR	NZ,NOTCMD
003802 87          0236*                  ADD	A,A
003803 4F          0237*                  LD	C,A
003804 7C          0238*                  LD	A,H
003805 B5          0239*                  OR	L
003806 20 0F       0240*                  JR	NZ,INAUTO
003808 47          0241*                  LD	B,A
003809 21 11 3C    0242*                  LD	HL,CMDTABmn
00380C 09          0243*                  ADD	HL,BC
00380D 7E          0244*                  LD	A,(HL)		;TABLE ENTRY
00380E 23          0245*                  INC	HL
00380F 66          0246*                  LD	H,(HL)
003810 6F          0247*                  LD	L,A
003811 FD 23       0248*                  INC	IY
003813 CD 0B 45    0249*                  CALL	NXT
003816 E9          0250*                  JP	(HL)		;EXECUTE COMMAND
003817             0251*  ;
003817 FD 21 00 52 0252*  INAUTO:         LD	IY,ACCS
00381B 7C          0253*  NOTCMD:         LD	A,H
00381C B5          0254*                  OR	L
00381D CC 8A 43    0255*                  CALL	Z,LINNUM
003820 CD 0B 45    0256*                  CALL	NXT
003823 11 00 53    0257*                  LD	DE,BUFFER
003826 0E 01       0258*                  LD	C,1		;LEFT MODE
003828 E5          0259*                  PUSH	HL
003829 CD 18 44    0260*                  CALL	LEXAN2		;LEXICAL ANALYSIS
00382C E1          0261*                  POP	HL
00382D 12          0262*                  LD	(DE),A		;TERMINATOR
00382E AF          0263*                  XOR	A
00382F 47          0264*                  LD	B,A
003830 4B          0265*                  LD	C,E		;BC=LINE LENGTH
003831 13          0266*                  INC	DE
003832 12          0267*                  LD	(DE),A		;ZERO NEXT
003833 7C          0268*                  LD	A,H
003834 B5          0269*                  OR	L
003835 FD 21 00 53 0270*                  LD	IY,BUFFER	;FOR XEQ
003839 CA 99 24    0271*                  JP	Z,XEQ		;DIRECT MODE
00383C C5          0272*                  PUSH	BC
00383D CD 43 41    0273*                  CALL	FINDL
003840 CC E9 3F    0274*                  CALL	Z,DEL
003843 C1          0275*                  POP	BC
003844 79          0276*                  LD	A,C
003845 B7          0277*                  OR	A
003846 28 39       0278*                  JR	Z,CLOOP2	;DELETE LINE ONLY
003848 C6 04       0279*                  ADD	A,4
00384A 4F          0280*                  LD	C,A		;LENGTH INCLUSIVE
00384B D5          0281*                  PUSH	DE		;LINE NUMBER
00384C C5          0282*                  PUSH	BC		;SAVE LINE LENGTH
00384D EB          0283*                  EX	DE,HL
00384E C5          0284*                  PUSH	BC
00384F CD 25 40    0285*                  CALL	GETTOP
003852 C1          0286*                  POP	BC
003853 E5          0287*                  PUSH	HL
003854 09          0288*                  ADD	HL,BC
003855 E5          0289*                  PUSH	HL
003856 24          0290*                  INC	H
003857 AF          0291*                  XOR	A
003858 ED 72       0292*                  SBC	HL,SP
00385A E1          0293*                  POP	HL
00385B D2 44 3F    0294*                  JP	NC,ERROR_	;"No room"
00385E E3          0295*                  EX	(SP),HL
00385F E5          0296*                  PUSH	HL
003860 23          0297*                  INC	HL
003861 B7          0298*                  OR	A
003862 ED 52       0299*                  SBC	HL,DE
003864 44          0300*                  LD	B,H		;BC=AMOUNT TO MOVE
003865 4D          0301*                  LD	C,L
003866 E1          0302*                  POP	HL
003867 D1          0303*                  POP	DE
003868 28 02       0304*                  JR	Z,ATEND
00386A ED B8       0305*                  LDDR			;MAKE SPACE
00386C C1          0306*  ATEND:          POP	BC		;LINE LENGTH
00386D D1          0307*                  POP	DE		;LINE NUMBER
00386E 23          0308*                  INC	HL
00386F 71          0309*                  LD	(HL),C		;STORE LENGTH
003870 23          0310*                  INC	HL
003871 73          0311*                  LD	(HL),E		;STORE LINE NUMBER
003872 23          0312*                  INC	HL
003873 72          0313*                  LD	(HL),D
003874 23          0314*                  INC	HL
003875 11 00 53    0315*                  LD	DE,BUFFER
003878 EB          0316*                  EX	DE,HL
003879 0D          0317*                  DEC	C
00387A 0D          0318*                  DEC	C
00387B 0D          0319*                  DEC	C
00387C ED B0       0320*                  LDIR			;ADD LINE
00387E CD 1A 40    0321*                  CALL	CLEAN
003881 C3 B0 37    0322*  CLOOP2:         JP	CLOOP
003884             0323*  ;
003884             0324*  ;LIST OF TOKENS AND KEYWORDS.
003884             0325*  ;IF A KEYWORD IS FOLLOWED BY NUL THEN IT WILL
003884             0326*  ; ONLY MATCH WITH THE WORD FOLLOWED IMMEDIATELY
003884             0327*  ; BY A DELIMITER.
003884             0328*  ;
003884 80          0329*  KEYWDS:         DB	80H
003885 41 4E 44    0330*                  DB	"AND"
003888 94          0331*                  DB	94H
003889 41 42 53    0332*                  DB	"ABS"
00388C 95          0333*                  DB	95H
00388D 41 43 53    0334*                  DB	"ACS"
003890 96          0335*                  DB	96H
003891 41 44 56 41 0336*                  DB	"ADVAL"
       4C          
003896 97          0337*                  DB	97H
003897 41 53 43    0338*                  DB	"ASC"
00389A 98          0339*                  DB	98H
00389B 41 53 4E    0340*                  DB	"ASN"
00389E 99          0341*                  DB	99H
00389F 41 54 4E    0342*                  DB	"ATN"
0038A2 9A          0343*                  DB	9AH
0038A3 42 47 45 54 0344*                  DB	"BGET "
       20          
0038A8 D5          0345*                  DB	0D5H
0038A9 42 50 55 54 0346*                  DB	"BPUT "
       20          
0038AE 0F          0347*                  DB	0FH
0038AF 42 59 20    0348*                  DB	"BY "		; v5
0038B2 FB          0349*                  DB	0FBH
0038B3 43 4F 4C 4F 0350*                  DB	"COLOUR"
       55 52       
0038B9 FB          0351*                  DB	0FBH
0038BA 43 4F 4C 4F 0352*                  DB	"COLOR"
       52          
0038BF D6          0353*                  DB	0D6H
0038C0 43 41 4C 4C 0354*                  DB	"CALL"
0038C4 C8          0355*                  DB	0C8H
0038C5 43 41 53 45 0356*                  DB	"CASE"		; v5
0038C9 D7          0357*                  DB	0D7H
0038CA 43 48 41 49 0358*                  DB	"CHAIN"
       4E          
0038CF BD          0359*                  DB	0BDH
0038D0 43 48 52 24 0360*                  DB	"CHR$"
0038D4 D8          0361*                  DB	0D8H
0038D5 43 4C 45 41 0362*                  DB	"CLEAR "
       52 20       
0038DB D9          0363*                  DB	0D9H
0038DC 43 4C 4F 53 0364*                  DB	"CLOSE "
       45 20       
0038E2 DA          0365*                  DB	0DAH
0038E3 43 4C 47 20 0366*                  DB	"CLG "
0038E7 DB          0367*                  DB	0DBH
0038E8 43 4C 53 20 0368*                  DB	"CLS "
0038EC 9B          0369*                  DB	9BH
0038ED 43 4F 53    0370*                  DB	"COS"
0038F0 9C          0371*                  DB	9CH
0038F1 43 4F 55 4E 0372*                  DB	"COUNT "
       54 20       
0038F7 01          0373*                  DB	01H
0038F8 43 49 52 43 0374*                  DB	"CIRCLE"	; v5
       4C 45       
0038FE DC          0375*                  DB	0DCH
0038FF 44 41 54 41 0376*                  DB	"DATA"
003903 9D          0377*                  DB	9DH
003904 44 45 47    0378*                  DB	"DEG"
003907 DD          0379*                  DB	0DDH
003908 44 45 46    0380*                  DB	"DEF"
00390B 81          0381*                  DB	81H
00390C 44 49 56    0382*                  DB	"DIV"
00390F DE          0383*                  DB	0DEH
003910 44 49 4D    0384*                  DB	"DIM"
003913 DF          0385*                  DB	0DFH
003914 44 52 41 57 0386*                  DB	"DRAW"
003918 E1          0387*                  DB	0E1H
003919 45 4E 44 50 0388*                  DB	"ENDPROC "
       52 4F 43 20 
003921 CE          0389*                  DB	0CEH
003922 45 4E 44 57 0390*                  DB	"ENDWHILE "	; v5
       48 49 4C 45 
       20          
00392B CB          0391*                  DB	0CBH
00392C 45 4E 44 43 0392*                  DB	"ENDCASE "	; v5
       41 53 45 20 
003934 CD          0393*                  DB	0CDH
003935 45 4E 44 49 0394*                  DB	"ENDIF "	; v5
       46 20       
00393B E0          0395*                  DB	0E0H
00393C 45 4E 44 20 0396*                  DB	"END "
003940 E2          0397*                  DB	0E2H
003941 45 4E 56 45 0398*                  DB	"ENVELOPE"
       4C 4F 50 45 
003949 8B          0399*                  DB	8BH
00394A 45 4C 53 45 0400*                  DB	"ELSE"
00394E A0          0401*                  DB	0A0H
00394F 45 56 41 4C 0402*                  DB	"EVAL"
003953 9E          0403*                  DB	9EH
003954 45 52 4C 20 0404*                  DB	"ERL "
003958 85          0405*                  DB	85H
003959 45 52 52 4F 0406*                  DB	"ERROR"
       52          
00395E C5          0407*                  DB	0C5H
00395F 45 4F 46 20 0408*                  DB	"EOF "
003963 82          0409*                  DB	82H
003964 45 4F 52    0410*                  DB	"EOR"
003967 9F          0411*                  DB	9FH
003968 45 52 52 20 0412*                  DB	"ERR "
00396C 10          0413*                  DB	10H
00396D 45 58 49 54 0414*                  DB	"EXIT "		; v5
       20          
003972 A1          0415*                  DB	0A1H
003973 45 58 50    0416*                  DB	"EXP"
003976 A2          0417*                  DB	0A2H
003977 45 58 54 20 0418*                  DB	"EXT "
00397B 02          0419*                  DB	02H
00397C 45 4C 4C 49 0420*                  DB	"ELLIPSE"	; v5
       50 53 45    
003983 E3          0421*                  DB	0E3H
003984 46 4F 52    0422*                  DB	"FOR"
003987 A3          0423*                  DB	0A3H
003988 46 41 4C 53 0424*                  DB	"FALSE "
       45 20       
00398E 03          0425*                  DB	03H
00398F 46 49 4C 4C 0426*                  DB	"FILL"		; v5
003993 A4          0427*                  DB	0A4H
003994 46 4E       0428*                  DB	"FN"
003996 E5          0429*                  DB	0E5H
003997 47 4F 54 4F 0430*                  DB	"GOTO"
00399B BE          0431*                  DB	0BEH
00399C 47 45 54 24 0432*                  DB	"GET$"
0039A0 A5          0433*                  DB	0A5H
0039A1 47 45 54    0434*                  DB	"GET"
0039A4 E4          0435*                  DB	0E4H
0039A5 47 4F 53 55 0436*                  DB	"GOSUB"
       42          
0039AA E6          0437*                  DB	0E6H
0039AB 47 43 4F 4C 0438*                  DB	"GCOL"
0039AF 93          0439*                  DB	93H
0039B0 48 49 4D 45 0440*                  DB	"HIMEM "
       4D 20       
0039B6 E8          0441*                  DB	0E8H
0039B7 49 4E 50 55 0442*                  DB	"INPUT"
       54          
0039BC E7          0443*                  DB	0E7H
0039BD 49 46       0444*                  DB	"IF"
0039BF BF          0445*                  DB	0BFH
0039C0 49 4E 4B 45 0446*                  DB	"INKEY$"
       59 24       
0039C6 A6          0447*                  DB	0A6H
0039C7 49 4E 4B 45 0448*                  DB	"INKEY"
       59          
0039CC A8          0449*                  DB	0A8H
0039CD 49 4E 54    0450*                  DB	"INT"
0039D0 A7          0451*                  DB	0A7H
0039D1 49 4E 53 54 0452*                  DB	"INSTR("
       52 28       
0039D7 0C          0453*                  DB	0CH
0039D8 49 4E 53 54 0454*                  DB	"INSTALL"	; v5
       41 4C 4C    
0039DF 86          0455*                  DB	86H
0039E0 4C 49 4E 45 0456*                  DB	"LINE"
0039E4 92          0457*                  DB	92H
0039E5 4C 4F 4D 45 0458*                  DB	"LOMEM "
       4D 20       
0039EB EA          0459*                  DB	0EAH
0039EC 4C 4F 43 41 0460*                  DB	"LOCAL"
       4C          
0039F1 C0          0461*                  DB	0C0H
0039F2 4C 45 46 54 0462*                  DB	"LEFT$("
       24 28       
0039F8 A9          0463*                  DB	0A9H
0039F9 4C 45 4E    0464*                  DB	"LEN"
0039FC E9          0465*                  DB	0E9H
0039FD 4C 45 54    0466*                  DB	"LET"
003A00 AB          0467*                  DB	0ABH
003A01 4C 4F 47    0468*                  DB	"LOG"
003A04 AA          0469*                  DB	0AAH
003A05 4C 4E       0470*                  DB	"LN"
003A07 C1          0471*                  DB	0C1H
003A08 4D 49 44 24 0472*                  DB	"MID$("
       28          
003A0D EB          0473*                  DB	0EBH
003A0E 4D 4F 44 45 0474*                  DB	"MODE"
003A12 83          0475*                  DB	83H
003A13 4D 4F 44    0476*                  DB	"MOD"
003A16 EC          0477*                  DB	0ECH
003A17 4D 4F 56 45 0478*                  DB	"MOVE"
003A1B 04          0479*                  DB	04H
003A1C 4D 4F 55 53 0480*                  DB	"MOUSE"		; v5
       45          
003A21 ED          0481*                  DB	0EDH
003A22 4E 45 58 54 0482*                  DB	"NEXT"
003A26 AC          0483*                  DB	0ACH
003A27 4E 4F 54    0484*                  DB	"NOT"
003A2A EE          0485*                  DB	0EEH
003A2B 4F 4E       0486*                  DB	"ON"
003A2D 87          0487*                  DB	87H
003A2E 4F 46 46 20 0488*                  DB	"OFF "
003A32 CA          0489*                  DB	0CAH
003A33 4F 46 20    0490*                  DB	"OF "		; v5
003A36 05          0491*                  DB	05H
003A37 4F 52 49 47 0492*                  DB	"ORIGIN"	; v5
       49 4E       
003A3D 84          0493*                  DB	84H
003A3E 4F 52       0494*                  DB	"OR"
003A40 8E          0495*                  DB	8EH
003A41 4F 50 45 4E 0496*                  DB	"OPENIN"
       49 4E       
003A47 AE          0497*                  DB	0AEH
003A48 4F 50 45 4E 0498*                  DB	"OPENOUT"
       4F 55 54    
003A4F AD          0499*                  DB	0ADH
003A50 4F 50 45 4E 0500*                  DB	"OPENUP"
       55 50       
003A56 FF          0501*                  DB	0FFH
003A57 4F 53 43 4C 0502*                  DB	"OSCLI"
       49          
003A5C CC          0503*                  DB	0CCH
003A5D 4F 54 48 45 0504*                  DB	"OTHERWISE"	; v5
       52 57 49 53 
       45          
003A66 F1          0505*                  DB	0F1H
003A67 50 52 49 4E 0506*                  DB	"PRINT"
       54          
003A6C 90          0507*                  DB	90H
003A6D 50 41 47 45 0508*                  DB	"PAGE "
       20          
003A72 8F          0509*                  DB	8FH
003A73 50 54 52 20 0510*                  DB	"PTR "
003A77 AF          0511*                  DB	0AFH
003A78 50 49 20    0512*                  DB	"PI "
003A7B F0          0513*                  DB	0F0H
003A7C 50 4C 4F 54 0514*                  DB	"PLOT"
003A80 B0          0515*                  DB	0B0H
003A81 50 4F 49 4E 0516*                  DB	"POINT("
       54 28       
003A87 F2          0517*                  DB	0F2H
003A88 50 52 4F 43 0518*                  DB	"PROC"
003A8C B1          0519*                  DB	0B1H
003A8D 50 4F 53 20 0520*                  DB	"POS "
003A91 0E          0521*                  DB	0EH
003A92 50 55 54    0522*                  DB	"PUT"		; Token changed
003A95 06          0523*                  DB	06H
003A96 51 55 49 54 0524*                  DB	"QUIT "		; v5
       20          
003A9B F8          0525*                  DB	0F8H
003A9C 52 45 54 55 0526*                  DB	"RETURN "
       52 4E 20    
003AA3 F5          0527*                  DB	0F5H
003AA4 52 45 50 45 0528*                  DB	"REPEAT"
       41 54       
003AAA F6          0529*                  DB	0F6H
003AAB 52 45 50 4F 0530*                  DB	"REPORT "
       52 54 20    
003AB2 F3          0531*                  DB	0F3H
003AB3 52 45 41 44 0532*                  DB	"READ"
003AB7 F4          0533*                  DB	0F4H
003AB8 52 45 4D    0534*                  DB	"REM"
003ABB F9          0535*                  DB	0F9H
003ABC 52 55 4E 20 0536*                  DB	"RUN "
003AC0 B2          0537*                  DB	0B2H
003AC1 52 41 44    0538*                  DB	"RAD"
003AC4 F7          0539*                  DB	0F7H
003AC5 52 45 53 54 0540*                  DB	"RESTORE"
       4F 52 45    
003ACC C2          0541*                  DB	0C2H
003ACD 52 49 47 48 0542*                  DB	"RIGHT$("
       54 24 28    
003AD4 B3          0543*                  DB	0B3H
003AD5 52 4E 44 20 0544*                  DB	"RND "
003AD9 07          0545*                  DB	07H
003ADA 52 45 43 54 0546*                  DB	"RECTANGLE"	; v5
       41 4E 47 4C 
       45          
003AE3 88          0547*                  DB	88H
003AE4 53 54 45 50 0548*                  DB	"STEP"
003AE8 B4          0549*                  DB	0B4H
003AE9 53 47 4E    0550*                  DB	"SGN"
003AEC B5          0551*                  DB	0B5H
003AED 53 49 4E    0552*                  DB	"SIN"
003AF0 B6          0553*                  DB	0B6H
003AF1 53 51 52    0554*                  DB	"SQR"
003AF4 89          0555*                  DB	89H
003AF5 53 50 43    0556*                  DB	"SPC"
003AF8 C3          0557*                  DB	0C3H
003AF9 53 54 52 24 0558*                  DB	"STR$"
003AFD C4          0559*                  DB	0C4H
003AFE 53 54 52 49 0560*                  DB	"STRING$("
       4E 47 24 28 
003B06 D4          0561*                  DB	0D4H
003B07 53 4F 55 4E 0562*                  DB	"SOUND"
       44          
003B0C FA          0563*                  DB	0FAH
003B0D 53 54 4F 50 0564*                  DB	"STOP "
       20          
003B12 C6          0565*                  DB	0C6H
003B13 53 55 4D    0566*                  DB	"SUM"		; v5
003B16 08          0567*                  DB	08H
003B17 53 57 41 50 0568*                  DB	"SWAP"		; v5
003B1B 09          0569*                  DB	09H
003B1C 53 59 53    0570*                  DB	"SYS"		; v5
003B1F B7          0571*                  DB	0B7H
003B20 54 41 4E    0572*                  DB	"TAN"
003B23 8A          0573*                  DB	8AH
003B24 54 41 42 28 0574*                  DB	"TAB("
003B28 8C          0575*                  DB	8CH
003B29 54 48 45 4E 0576*                  DB	"THEN"
003B2D 91          0577*                  DB	91H
003B2E 54 49 4D 45 0578*                  DB	"TIME "
       20          
003B33 0A          0579*                  DB	0AH
003B34 54 49 4E 54 0580*                  DB	"TINT"
003B38 B8          0581*                  DB	0B8H
003B39 54 4F       0582*                  DB	"TO"
003B3B FC          0583*                  DB	0FCH
003B3C 54 52 41 43 0584*                  DB	"TRACE"
       45          
003B41 B9          0585*                  DB	0B9H
003B42 54 52 55 45 0586*                  DB	"TRUE "
       20          
003B47 FD          0587*                  DB	0FDH
003B48 55 4E 54 49 0588*                  DB	"UNTIL"
       4C          
003B4D BA          0589*                  DB	0BAH
003B4E 55 53 52    0590*                  DB	"USR"
003B51 EF          0591*                  DB	0EFH
003B52 56 44 55    0592*                  DB	"VDU"
003B55 BB          0593*                  DB	0BBH
003B56 56 41 4C    0594*                  DB	"VAL"
003B59 BC          0595*                  DB	0BCH
003B5A 56 50 4F 53 0596*                  DB	"VPOS "
       20          
003B5F C7          0597*                  DB	0C7H
003B60 57 48 49 4C 0598*                  DB	"WHILE"		; v5
       45          
003B65 C9          0599*                  DB	0C9H
003B66 57 48 45 4E 0600*                  DB	"WHEN"		; v5
003B6A 0B          0601*                  DB	0BH
003B6B 57 41 49 54 0602*                  DB	"WAIT "		; v5
       20          
003B70 FE          0603*                  DB	0FEH
003B71 57 49 44 54 0604*                  DB	"WIDTH"
       48          
003B76             0605*  ;'LEFT' TOKENS:
003B76 CF          0606*                  DB	0CFH
003B77 50 54 52    0607*                  DB	"PTR"
003B7A D1          0608*                  DB	0D1H
003B7B 54 49 4D 45 0609*                  DB	"TIME"
003B7F D3          0610*                  DB	0D3H
003B80 48 49 4D 45 0611*                  DB	"HIMEM"
       4D          
003B85 D2          0612*                  DB	0D2H
003B86 4C 4F 4D 45 0613*                  DB	"LOMEM"
       4D          
003B8B D0          0614*                  DB	0D0H
003B8C 50 41 47 45 0615*                  DB	"PAGE"
003B90             0616*  ;
003B90 11          0617*                  DB	11H
003B91 4D 69 73 73 0618*                  DB	"Missing "
       69 6E 67 20 
003B99 12          0619*                  DB	12H
003B9A 4E 6F 20 73 0620*                  DB	"No such "
       75 63 68 20 
003BA2 13          0621*                  DB	13H
003BA3 42 61 64 20 0622*                  DB	"Bad "
003BA7 14          0623*                  DB	14H
003BA8 20 72 61 6E 0624*                  DB	" range"
       67 65       
003BAE 15          0625*                  DB	15H
003BAF 76 61 72 69 0626*                  DB	"variable"
       61 62 6C 65 
003BB7 16          0627*                  DB	16H
003BB8 4F 75 74 20 0628*                  DB	"Out of"
       6F 66       
003BBE 17          0629*                  DB	17H
003BBF 4E 6F 20    0630*                  DB	"No "
003BC2 18          0631*                  DB	18H
003BC3 20 73 70 61 0632*                  DB	" space"
       63 65       
003BC9 19          0633*                  DB	19H
003BCA 4E 6F 74 20 0634*                  DB	"Not in a "
       69 6E 20 61 
       20          
003BD3 1A          0635*                  DB	1AH
003BD4 20 6C 6F 6F 0636*                  DB	" loop"
       70          
003BD9 1B          0637*                  DB	1BH
003BDA 20 6E 6F 74 0638*                  DB	" not "
       20          
003BDF             0639*  KEYWDL:         EQU	$-KEYWDS
003BDF FF FF       0640*                  DW	-1
003BE1             0641*  ;
003BE1             0642*  ;LIST OF IMMEDIATE MODE COMMANDS:
003BE1             0643*  ;
003BE1 80          0644*  COMNDS:         DB	80H
003BE2 41 55 54 4F 0645*                  DB	"AUTO"
003BE6 81          0646*                  DB	81H
003BE7 44 45 4C 45 0647*                  DB	"DELETE"
       54 45       
003BED 82          0648*                  DB	82H
003BEE 4C 49 53 54 0649*                  DB	"LIST"
003BF2 83          0650*                  DB	83H
003BF3 4C 4F 41 44 0651*                  DB	"LOAD"
003BF7 84          0652*                  DB	84H
003BF8 4E 45 57 20 0653*                  DB	"NEW "
003BFC 85          0654*                  DB	85H
003BFD 4F 4C 44 20 0655*                  DB	"OLD "
003C01 86          0656*                  DB	86H
003C02 52 45 4E 55 0657*                  DB	"RENUMBER"
       4D 42 45 52 
003C0A 87          0658*                  DB	87H
003C0B 53 41 56 45 0659*                  DB	"SAVE"
003C0F FF FF       0660*                  DW	-1
003C11             0661*  ;
003C11             0662*  ;IMMEDIATE MODE COMMANDS:
003C11             0663*  ;
003C11 E3 3E       0664*  CMDTABmn:         DW	AUTO
003C13 86 3D       0665*                  DW	DELETE
003C15 AE 3D       0666*                  DW	LIST
003C17 02 3F       0667*                  DW	LOAD
003C19 FD 3E       0668*                  DW	NEW
003C1B 10 3F       0669*                  DW	OLD
003C1D 33 3E       0670*                  DW	RENUM
003C1F 29 3F       0671*                  DW	SAVE
003C21             0672*  ;
003C21             0673*  ;ERROR MESSAGES:
003C21             0674*  ;
003C21 17          0675*  ERRWDS:         DB	17H
003C22 72 6F 6F 6D 0676*                  DB	"room"
003C26 00          0677*                  DB	0
003C27 16          0678*                  DB	16H
003C28 14          0679*                  DB	14H
003C29 00 00       0680*                  DW	0
003C2B 4D 75 6C 74 0681*                  DB	"Multiple label"
       69 70 6C 65 
       20 6C 61 62 
       65 6C       
003C39 00          0682*                  DB	0
003C3A 4D 69 73 74 0683*                  DB	"Mistake"
       61 6B 65    
003C41 00          0684*                  DB	0
003C42 11          0685*                  DB	11H
003C43 2C          0686*                  DB	','
003C44 00          0687*                  DB	0
003C45 54 79 70 65 0688*                  DB	"Type mismatch"
       20 6D 69 73 
       6D 61 74 63 
       68          
003C52 00          0689*                  DB	0
003C53 19          0690*                  DB	19H
003C54 A4          0691*                  DB	TFN
003C55 00 00       0692*                  DW	0
003C57 11          0693*                  DB	11H
003C58 22          0694*                  DB	'"'
003C59 00          0695*                  DB	0
003C5A 13          0696*                  DB	13H
003C5B DE          0697*                  DB	TDIM
003C5C 00          0698*                  DB	0
003C5D DE          0699*                  DB	TDIM
003C5E 18          0700*                  DB	18H
003C5F 00          0701*                  DB	0
003C60 19          0702*                  DB	19H
003C61 A4          0703*                  DB	TFN
003C62 20 6F 72 20 0704*                  DB	" or "
003C66 F2          0705*                  DB	TPROC
003C67 00          0706*                  DB	0
003C68 19          0707*                  DB	19H
003C69 F2          0708*                  DB	TPROC
003C6A 00          0709*                  DB	0
003C6B 13          0710*                  DB	13H
003C6C 75 73 65 20 0711*                  DB	"use of array"
       6F 66 20 61 
       72 72 61 79 
003C78 00          0712*                  DB	0
003C79 13          0713*                  DB	13H
003C7A 73 75 62 73 0714*                  DB	"subscript"
       63 72 69 70 
       74          
003C83 00          0715*                  DB	0
003C84 53 79 6E 74 0716*                  DB	"Syntax error"
       61 78 20 65 
       72 72 6F 72 
003C90 00          0717*                  DB	0
003C91 45 73 63 61 0718*                  DB	"Escape"
       70 65       
003C97 00          0719*                  DB	0
003C98 44 69 76 69 0720*                  DB	"Division by zero"
       73 69 6F 6E 
       20 62 79 20 
       7A 65 72 6F 
003CA8 00          0721*                  DB	0
003CA9 53 74 72 69 0722*                  DB	"String too long"
       6E 67 20 74 
       6F 6F 20 6C 
       6F 6E 67    
003CB8 00          0723*                  DB	0
003CB9 4E 75 6D 62 0724*                  DB	"Number too big"
       65 72 20 74 
       6F 6F 20 62 
       69 67       
003CC7 00          0725*                  DB	0
003CC8 2D 76 65 20 0726*                  DB	"-ve root"
       72 6F 6F 74 
003CD0 00          0727*                  DB	0
003CD1 4C 6F 67    0728*                  DB	"Log"
003CD4 14          0729*                  DB	14H
003CD5 00          0730*                  DB	0
003CD6 41 63 63 75 0731*                  DB	"Accuracy lost"
       72 61 63 79 
       20 6C 6F 73 
       74          
003CE3 00          0732*                  DB	0
003CE4 45 78 70 6F 0733*                  DB	"Exponent"
       6E 65 6E 74 
003CEC 14          0734*                  DB	14H
003CED 00 00       0735*                  DW	0
003CEF 12          0736*                  DB	12H
003CF0 15          0737*                  DB	15H
003CF1 00          0738*                  DB	0
003CF2 11          0739*                  DB	11H
003CF3 29          0740*                  DB	')'
003CF4 00          0741*                  DB	0
003CF5 13          0742*                  DB	13H
003CF6 68 65 78 20 0743*                  DB	"hex or binary"
       6F 72 20 62 
       69 6E 61 72 
       79          
003D03 00          0744*                  DB	0
003D04 12          0745*                  DB	12H
003D05 A4          0746*                  DB	TFN
003D06 2F          0747*                  DB	'/'
003D07 F2          0748*                  DB	TPROC
003D08 00          0749*                  DB	0
003D09 13          0750*                  DB	13H
003D0A 63 61 6C 6C 0751*                  DB	"call"
003D0E 00          0752*                  DB	0
003D0F 13          0753*                  DB	13H
003D10 61 72 67 75 0754*                  DB	"arguments"
       6D 65 6E 74 
       73          
003D19 00          0755*                  DB	0
003D1A 19          0756*                  DB	19H
003D1B E3          0757*                  DB	TFOR
003D1C 1A          0758*                  DB	1AH
003D1D 00          0759*                  DB	0
003D1E 43 61 6E 27 0760*                  DB	"Can't match "
       74 20 6D 61 
       74 63 68 20 
003D2A E3          0761*                  DB	TFOR
003D2B 00          0762*                  DB	0
003D2C 13          0763*                  DB	13H
003D2D E3          0764*                  DB	TFOR
003D2E 20          0765*                  DB	' '
003D2F 15          0766*                  DB	15H
003D30 00 00       0767*                  DW	0
003D32 11          0768*                  DB	11H
003D33 B8          0769*                  DB	TTO
003D34 00 00       0770*                  DW	0
003D36 17          0771*                  DB	17H
003D37 E4          0772*                  DB	TGOSUB
003D38 00          0773*                  DB	0
003D39 EE          0774*                  DB	TON
003D3A 20 73 79 6E 0775*                  DB	" syntax"
       74 61 78    
003D41 00          0776*                  DB	0
003D42 EE          0777*                  DB	TON
003D43 14          0778*                  DB	14H
003D44 00          0779*                  DB	0
003D45 12          0780*                  DB	12H
003D46 6C 69 6E 65 0781*                  DB	"line"
003D4A 00          0782*                  DB	0
003D4B 16          0783*                  DB	16H
003D4C 20          0784*                  DB	' '
003D4D DC          0785*                  DB	TDATA
003D4E 00          0786*                  DB	0
003D4F 19          0787*                  DB	19H
003D50 F5          0788*                  DB	TREPEAT
003D51 1A          0789*                  DB	1AH
003D52 00          0790*                  DB	0
003D53 13          0791*                  DB	13H
003D54 10          0792*                  DB	TEXIT
003D55 00          0793*                  DB	0
003D56 11          0794*                  DB	11H
003D57 23          0795*                  DB	'#'
003D58 00          0796*                  DB	0
003D59 19          0797*                  DB	19H		;46 Not in a WHILE loop
003D5A C7          0798*                  DB	TWHILE
003D5B 1A          0799*                  DB	1AH
003D5C 00          0800*                  DB	0
003D5D 11          0801*                  DB	11H		;47 Missing ENDCASE
003D5E CB          0802*                  DB	TENDCASE
003D5F 00          0803*                  DB	0
003D60 CA          0804*                  DB	TOF		;48 OF not last
003D61 1B          0805*                  DB	1BH
003D62 6C 61 73 74 0806*                  DB	"last"
003D66 00          0807*                  DB	0
003D67 11          0808*                  DB	11H		;49 Missing ENDIF
003D68 CD          0809*                  DB	TENDIF
003D69 00          0810*                  DB	0
003D6A 00 00       0811*                  DW	0
003D6C 00          0812*                  DB	0
003D6D EE          0813*                  DB	TON		;53 ON ERROR not LOCAL
003D6E 20          0814*                  DB	' '
003D6F 85          0815*                  DB	TERROR
003D70 1B          0816*                  DB	1BH
003D71 EA          0817*                  DB	TLOCAL
003D72 00          0818*                  DB	0
003D73 DC          0819*                  DB	TDATA		;54 DATA not LOCAL
003D74 1B          0820*                  DB	1BH
003D75 EA          0821*                  DB	TLOCAL
003D76 00          0822*                  DB	0
003D77             0823*  ;
003D77             0824*  ;Indent tokens (first four needn't be at start of line):
003D77             0825*  ;
003D77 E3          0826*  TOKADD:         DB	TFOR
003D78 F5          0827*                  DB	TREPEAT
003D79 C7          0828*                  DB	TWHILE
003D7A C8          0829*                  DB	TCASE
003D7B 8B          0830*                  DB	TELSE
003D7C C9          0831*                  DB	TWHEN
003D7D CC          0832*                  DB	TOTHERWISE
003D7E             0833*  LENADD:         EQU	$-TOKADD
003D7E             0834*  ;
003D7E             0835*  ;Outdent tokens (first three needn't be at start of line):
003D7E             0836*  ;
003D7E ED          0837*  TOKSUB:         DB	TNEXT
003D7F FD          0838*                  DB	TUNTIL
003D80 CE          0839*                  DB	TENDWHILE
003D81 CB          0840*                  DB	TENDCASE
003D82 CD          0841*                  DB	TENDIF
003D83 8B          0842*                  DB	TELSE
003D84 C9          0843*                  DB	TWHEN
003D85 CC          0844*                  DB	TOTHERWISE
003D86             0845*  LENSUB:         EQU	$-TOKSUB
003D86             0846*  ;
003D86             0847*  ;COMMANDS:
003D86             0848*  ;
003D86             0849*  ;DELETE line,line
003D86             0850*  ;
003D86 CD D7 43    0851*  DELETE:         CALL	DLPAIR
003D89 7E          0852*  DELET1:         LD	A,(HL)
003D8A B7          0853*                  OR	A
003D8B 28 79       0854*                  JR	Z,WARMNC
003D8D 23          0855*                  INC	HL
003D8E 5E          0856*                  LD	E,(HL)
003D8F 23          0857*                  INC	HL
003D90 56          0858*                  LD	D,(HL)
003D91 2B          0859*                  DEC	HL
003D92 2B          0860*                  DEC	HL
003D93 EB          0861*                  EX	DE,HL
003D94 37          0862*                  SCF
003D95 ED 42       0863*                  SBC	HL,BC
003D97 EB          0864*                  EX	DE,HL
003D98 30 6C       0865*                  JR	NC,WARMNC
003D9A C5          0866*                  PUSH	BC
003D9B CD E9 3F    0867*                  CALL	DEL
003D9E C1          0868*                  POP	BC
003D9F 18 E8       0869*                  JR	DELET1
003DA1             0870*  ;
003DA1             0871*  ;LISTO expr
003DA1             0872*  ;
003DA1 FD 23       0873*  LISTO:          INC	IY		;SKIP "O"
003DA3 CD 33 18    0874*                  CALL	EXPRI
003DA6 D9          0875*                  EXX
003DA7 7D          0876*                  LD	A,L
003DA8 32 FE 54    0877*                  LD	(LISTON),A
003DAB C3 B0 37    0878*                  JP	CLOOP
003DAE             0879*  ;
003DAE             0880*  ;LIST
003DAE             0881*  ;LIST line
003DAE             0882*  ;LIST line,line [IF string]
003DAE             0883*  ;LIST ,line
003DAE             0884*  ;LIST line,
003DAE             0885*  ;
003DAE FE 4F       0886*  LIST:           CP	'O'
003DB0 28 EF       0887*                  JR	Z,LISTO
003DB2 0E 01       0888*                  LD	C,1
003DB4 11 00 53    0889*                  LD	DE,BUFFER
003DB7 CD 18 44    0890*                  CALL	LEXAN2
003DBA 12          0891*                  LD	(DE),A
003DBB FD 21 00 53 0892*                  LD	IY,BUFFER
003DBF CD D7 43    0893*                  CALL	DLPAIR
003DC2 CD 0B 45    0894*                  CALL	NXT
003DC5 FE E7       0895*                  CP	TIF		;IF CLAUSE ?
003DC7 3E 00       0896*                  LD	A,0		;INIT IF-CLAUSE LENGTH
003DC9 20 15       0897*                  JR	NZ,LISTB
003DCB FD 23       0898*                  INC	IY		;SKIP IF
003DCD CD 0B 45    0899*                  CALL	NXT		;SKIP SPACES (IF ANY)
003DD0 EB          0900*                  EX	DE,HL
003DD1 FD E5       0901*                  PUSH	IY
003DD3 E1          0902*                  POP	HL		;HL ADDRESSES IF CLAUSE
003DD4 3E 0D       0903*                  LD	A,CR
003DD6 C5          0904*                  PUSH	BC
003DD7 01 00 01    0905*                  LD	BC,256
003DDA ED B1       0906*                  CPIR			;LOCATE CR
003DDC 79          0907*                  LD	A,C
003DDD 2F          0908*                  CPL			;A = SUBSTRING LENGTH
003DDE C1          0909*                  POP	BC
003DDF EB          0910*                  EX	DE,HL
003DE0 5F          0911*  LISTB:          LD	E,A		;IF-CLAUSE LENGTH
003DE1 78          0912*                  LD	A,B
003DE2 B1          0913*                  OR	C
003DE3 20 01       0914*                  JR	NZ,LISTA
003DE5 0B          0915*                  DEC	BC
003DE6 D9          0916*  LISTA:          EXX
003DE7 DD 21 FE 54 0917*                  LD	IX,LISTON
003DEB 1E 00       0918*                  LD	E,0		;INDENTATION COUNT
003DED D9          0919*                  EXX
003DEE 3E 14       0920*                  LD	A,20
003DF0             0921*  ;
003DF0 C5          0922*  LISTC:          PUSH	BC		;SAVE HIGH LINE NUMBER
003DF1 D5          0923*                  PUSH	DE		;SAVE IF-CLAUSE LENGTH
003DF2 E5          0924*                  PUSH	HL		;SAVE PROGRAM POINTER
003DF3 08          0925*                  EX	AF,AF'
003DF4 7E          0926*                  LD	A,(HL)
003DF5 B7          0927*                  OR	A
003DF6 28 0E       0928*                  JR	Z,WARMNC
003DF8             0929*  ;
003DF8             0930*  ;CHECK IF PAST TERMINATING LINE NUMBER:
003DF8             0931*  ;
003DF8 7B          0932*                  LD	A,E		;A = IF-CLAUSE LENGTH
003DF9 23          0933*                  INC	HL
003DFA 5E          0934*                  LD	E,(HL)
003DFB 23          0935*                  INC	HL
003DFC 56          0936*                  LD	D,(HL)		;DE = LINE NUMBER
003DFD 2B          0937*                  DEC	HL
003DFE 2B          0938*                  DEC	HL
003DFF D5          0939*                  PUSH	DE		;SAVE LINE NUMBER
003E00 EB          0940*                  EX	DE,HL
003E01 37          0941*                  SCF
003E02 ED 42       0942*                  SBC	HL,BC
003E04 EB          0943*                  EX	DE,HL
003E05 D1          0944*                  POP	DE		;RESTORE LINE NUMBER
003E06 D2 AF 37    0945*  WARMNC:         JP	NC,WARM
003E09 4E          0946*                  LD	C,(HL)		;C = LINE LENGTH + 4
003E0A 47          0947*                  LD	B,A		;B = IF-CLAUSE LENGTH
003E0B             0948*  ;
003E0B             0949*  ;CHECK FOR IF CLAUSE:
003E0B             0950*  ;
003E0B 23          0951*                  INC	HL
003E0C 23          0952*                  INC	HL
003E0D 23          0953*                  INC	HL		;HL ADDRESSES LINE TEXT
003E0E 0D          0954*                  DEC	C
003E0F 0D          0955*                  DEC	C
003E10 0D          0956*                  DEC	C
003E11 0D          0957*                  DEC	C		;C = LINE LENGTH
003E12 D5          0958*                  PUSH	DE		;SAVE LINE NUMBER
003E13 E5          0959*                  PUSH	HL		;SAVE LINE ADDRESS
003E14 AF          0960*                  XOR	A		;A <- 0
003E15 B8          0961*                  CP	B		;WAS THERE AN IF-CLAUSE
003E16 FD E5       0962*                  PUSH	IY
003E18 D1          0963*                  POP	DE		;DE ADDRESSES IF-CLAUSE
003E19 C4 F2 1D    0964*                  CALL	NZ,SEARCH	;SEARCH FOR IF CLAUSE
003E1C E1          0965*                  POP	HL		;RESTORE LINE ADDRESS
003E1D D1          0966*                  POP	DE		;RESTORE LINE NUMBER
003E1E FD E5       0967*                  PUSH	IY
003E20 CC 5D 40    0968*                  CALL	Z,LISTIT	;LIST IF MATCH
003E23 FD E1       0969*                  POP	IY
003E25             0970*  ;
003E25 08          0971*                  EX	AF,AF'
003E26 3D          0972*                  DEC	A
003E27 CD 1A 12    0973*                  CALL	LTRAP
003E2A E1          0974*                  POP	HL		;RESTORE POINTER
003E2B 5E          0975*                  LD	E,(HL)
003E2C 16 00       0976*                  LD	D,0
003E2E 19          0977*                  ADD	HL,DE		;ADDRESS NEXT LINE
003E2F D1          0978*                  POP	DE		;RESTORE IF-CLAUSE LEN
003E30 C1          0979*                  POP	BC		;RESTORE HI LINE NUMBER
003E31 18 BD       0980*                  JR	LISTC
003E33             0981*  ;
003E33             0982*  ;RENUMBER
003E33             0983*  ;RENUMBER start
003E33             0984*  ;RENUMBER start,increment
003E33             0985*  ;RENUMBER ,increment
003E33             0986*  ;
003E33 CD 43 40    0987*  RENUM:          CALL	CLEAR		;USES DYNAMIC AREA
003E36 CD B4 43    0988*                  CALL	PAIR		;LOAD HL,BC
003E39 D9          0989*                  EXX
003E3A 2A DC 54    0990*                  LD	HL,(PAGE_)
003E3D ED 5B DE 54 0991*                  LD	DE,(LOMEM)
003E41 7E          0992*  RENUM1:         LD	A,(HL)		;BUILD TABLE
003E42 B7          0993*                  OR	A
003E43 28 28       0994*                  JR	Z,RENUM2
003E45 23          0995*                  INC	HL
003E46 4E          0996*                  LD	C,(HL)		;OLD LINE NUMBER
003E47 23          0997*                  INC	HL
003E48 46          0998*                  LD	B,(HL)
003E49 EB          0999*                  EX	DE,HL
003E4A 71          1000*                  LD	(HL),C
003E4B 23          1001*                  INC	HL
003E4C 70          1002*                  LD	(HL),B
003E4D 23          1003*                  INC	HL
003E4E D9          1004*                  EXX
003E4F E5          1005*                  PUSH	HL
003E50 09          1006*                  ADD	HL,BC		;ADD INCREMENT
003E51 DA AF 43    1007*                  JP	C,TOOBIGmn	;"Too big"
003E54 D9          1008*                  EXX
003E55 C1          1009*                  POP	BC
003E56 71          1010*                  LD	(HL),C
003E57 23          1011*                  INC	HL
003E58 70          1012*                  LD	(HL),B
003E59 23          1013*                  INC	HL
003E5A EB          1014*                  EX	DE,HL
003E5B 2B          1015*                  DEC	HL
003E5C 2B          1016*                  DEC	HL
003E5D AF          1017*                  XOR	A
003E5E 47          1018*                  LD	B,A
003E5F 4E          1019*                  LD	C,(HL)
003E60 09          1020*                  ADD	HL,BC		;NEXT LINE
003E61 EB          1021*                  EX	DE,HL
003E62 E5          1022*                  PUSH	HL
003E63 24          1023*                  INC	H
003E64 ED 72       1024*                  SBC	HL,SP
003E66 E1          1025*                  POP	HL
003E67 EB          1026*                  EX	DE,HL
003E68 38 D7       1027*                  JR	C,RENUM1	;CONTINUE
003E6A C3 44 3F    1028*                  JP	ERROR_		;'No room' (A = 0)
003E6D             1029*  ;
003E6D EB          1030*  RENUM2:         EX	DE,HL
003E6E 36 FF       1031*                  LD	(HL),-1
003E70 23          1032*                  INC	HL
003E71 36 FF       1033*                  LD	(HL),-1
003E73 ED 5B DE 54 1034*                  LD	DE,(LOMEM)
003E77 D9          1035*                  EXX
003E78 2A DC 54    1036*                  LD	HL,(PAGE_)
003E7B 4E          1037*  RENUM3:         LD	C,(HL)
003E7C 79          1038*                  LD	A,C
003E7D B7          1039*                  OR	A
003E7E 28 86       1040*                  JR	Z,WARMNC
003E80 D9          1041*                  EXX
003E81 EB          1042*                  EX	DE,HL
003E82 23          1043*                  INC	HL
003E83 23          1044*                  INC	HL
003E84 5E          1045*                  LD	E,(HL)
003E85 23          1046*                  INC	HL
003E86 56          1047*                  LD	D,(HL)
003E87 23          1048*                  INC	HL
003E88 D5          1049*                  PUSH	DE
003E89 EB          1050*                  EX	DE,HL
003E8A D9          1051*                  EXX
003E8B D1          1052*                  POP	DE
003E8C 23          1053*                  INC	HL
003E8D 73          1054*                  LD	(HL),E		;NEW LINE NUMBER
003E8E 23          1055*                  INC	HL
003E8F 72          1056*                  LD	(HL),D
003E90 23          1057*                  INC	HL
003E91 0D          1058*                  DEC	C
003E92 0D          1059*                  DEC	C
003E93 0D          1060*                  DEC	C
003E94 06 00       1061*                  LD	B,0
003E96 3E 8D       1062*  RENUM7:         LD	A,TLINO
003E98 ED B1       1063*                  CPIR			;SEARCH FOR LINE NUMBER
003E9A 20 DF       1064*                  JR	NZ,RENUM3
003E9C C5          1065*                  PUSH	BC
003E9D E5          1066*                  PUSH	HL
003E9E E5          1067*                  PUSH	HL
003E9F FD E1       1068*                  POP	IY
003EA1 D9          1069*                  EXX
003EA2 E5          1070*                  PUSH	HL
003EA3 CD 60 1F    1071*                  CALL	DECODE		;DECODE LINE NUMBER
003EA6 E1          1072*                  POP	HL
003EA7 D9          1073*                  EXX
003EA8 44          1074*                  LD	B,H
003EA9 4D          1075*                  LD	C,L
003EAA 2A DE 54    1076*                  LD	HL,(LOMEM)
003EAD 5E          1077*  RENUM4:         LD	E,(HL)		;CROSS-REFERENCE TABLE
003EAE 23          1078*                  INC	HL
003EAF 56          1079*                  LD	D,(HL)
003EB0 23          1080*                  INC	HL
003EB1 EB          1081*                  EX	DE,HL
003EB2 B7          1082*                  OR	A		;CLEAR CARRY
003EB3 ED 42       1083*                  SBC	HL,BC
003EB5 EB          1084*                  EX	DE,HL
003EB6 5E          1085*                  LD	E,(HL)		;NEW NUMBER
003EB7 23          1086*                  INC	HL
003EB8 56          1087*                  LD	D,(HL)
003EB9 23          1088*                  INC	HL
003EBA 38 F1       1089*                  JR	C,RENUM4
003EBC EB          1090*                  EX	DE,HL
003EBD 28 1A       1091*                  JR	Z,RENUM5	;FOUND
003EBF CD FA 44    1092*                  CALL	TELL
003EC2 46 61 69 6C 1093*                  DB	"Failed at "
       65 64 20 61 
       74 20       
003ECC 00          1094*                  DB	0
003ECD D9          1095*                  EXX
003ECE E5          1096*                  PUSH	HL
003ECF D9          1097*                  EXX
003ED0 E1          1098*                  POP	HL
003ED1 CD 92 41    1099*                  CALL	PBCDL
003ED4 CD FB 40    1100*                  CALL	CRLF
003ED7 18 06       1101*                  JR	RENUM6
003ED9 D1          1102*  RENUM5:         POP	DE
003EDA D5          1103*                  PUSH	DE
003EDB 1B          1104*                  DEC	DE
003EDC CD BF 44    1105*                  CALL	ENCODE		;RE-WRITE NUMBER
003EDF E1          1106*  RENUM6:         POP	HL
003EE0 C1          1107*                  POP	BC
003EE1 18 B3       1108*                  JR	RENUM7
003EE3             1109*  ;
003EE3             1110*  ;AUTO
003EE3             1111*  ;AUTO start,increment
003EE3             1112*  ;AUTO start
003EE3             1113*  ;AUTO ,increment
003EE3             1114*  ;
003EE3 CD B4 43    1115*  AUTO:           CALL	PAIR
003EE6 22 E8 54    1116*                  LD	(AUTONO),HL
003EE9 79          1117*                  LD	A,C
003EEA 32 FF 54    1118*                  LD	(INCREM),A
003EED 18 37       1119*                  JR	CLOOP0
003EEF             1120*  ;
003EEF             1121*  ;BAD
003EEF             1122*  ;NEW
003EEF             1123*  ;
003EEF CD FA 44    1124*  BAD:            CALL	TELL		;"Bad program'
003EF2 13          1125*                  DB	13H
003EF3 70 72 6F 67 1126*                  DB	"program"
       72 61 6D    
003EFA 0D          1127*                  DB	CR
003EFB 0A          1128*                  DB	LF
003EFC 00          1129*                  DB	0
003EFD CD 3E 40    1130*  NEW:            CALL	NEWIT
003F00 18 24       1131*                  JR	CLOOP0
003F02             1132*  ;
003F02             1133*  ;LOAD filename
003F02             1134*  ;
003F02 CD 3C 18    1135*  LOAD:           CALL	EXPRS		;GET FILENAME
003F05 3E 0D       1136*                  LD	A,CR
003F07 12          1137*                  LD	(DE),A
003F08 CD 00 40    1138*                  CALL	LOAD0
003F0B CD 43 40    1139*                  CALL	CLEAR
003F0E 18 31       1140*                  JR	WARM0
003F10             1141*  ;
003F10             1142*  ;OLD
003F10             1143*  ;
003F10 2A DC 54    1144*  OLD:            LD	HL,(PAGE_)
003F13 E5          1145*                  PUSH	HL
003F14 23          1146*                  INC	HL
003F15 23          1147*                  INC	HL
003F16 23          1148*                  INC	HL
003F17 01 FC 00    1149*                  LD	BC,252
003F1A 3E 0D       1150*                  LD	A,CR
003F1C ED B1       1151*                  CPIR
003F1E 20 CF       1152*                  JR	NZ,BAD
003F20 7D          1153*                  LD	A,L
003F21 E1          1154*                  POP	HL
003F22 77          1155*                  LD	(HL),A
003F23 CD 1A 40    1156*                  CALL	CLEAN
003F26 C3 B0 37    1157*  CLOOP0:         JP	CLOOP
003F29             1158*  ;
003F29             1159*  ;SAVE filename
003F29             1160*  ;
003F29 CD 3C 18    1161*  SAVE:           CALL	EXPRS		;FILENAME
003F2C 3E 0D       1162*                  LD	A,CR
003F2E 12          1163*                  LD	(DE),A
003F2F ED 5B DC 54 1164*                  LD	DE,(PAGE_)
003F33 CD 25 40    1165*                  CALL	GETTOP
003F36 B7          1166*                  OR	A
003F37 ED 52       1167*                  SBC	HL,DE
003F39 44          1168*                  LD	B,H		;LENGTH OF PROGRAM
003F3A 4D          1169*                  LD	C,L
003F3B 21 00 52    1170*                  LD	HL,ACCS
003F3E CD A6 13    1171*                  CALL	OSSAVE
003F41 C3 AF 37    1172*  WARM0:          JP	WARM
003F44             1173*  ;
003F44             1174*  ;ERROR
003F44             1175*  ;N.B. CARE NEEDED BECAUSE SP MAY NOT BE VALID (E.G. ABOVE HIMEM)
003F44             1176*  ;
003F44 21 21 3C    1177*  ERROR_:         LD	HL,ERRWDS
003F47 4F          1178*                  LD	C,A
003F48 B7          1179*                  OR	A
003F49 28 0C       1180*                  JR	Z,ERROR1
003F4B 47          1181*                  LD	B,A		;ERROR NUMBER
003F4C AF          1182*                  XOR	A
003F4D BE          1183*  ERROR0:         CP	(HL)
003F4E 23          1184*                  INC	HL
003F4F 20 FC       1185*                  JR	NZ,ERROR0
003F51 10 FA       1186*                  DJNZ	ERROR0
003F53 18 02       1187*                  JR	ERROR1		;MUST NOT PUSH HL HERE
003F55             1188*  ;
003F55 E1          1189*  EXTERR:         POP	HL
003F56 4F          1190*                  LD	C,A
003F57 22 EE 54    1191*  ERROR1:         LD	(ERRTXT),HL
003F5A 2A EC 54    1192*                  LD	HL,(ONERSP)
003F5D 7C          1193*                  LD	A,H
003F5E B5          1194*                  OR	L
003F5F ED 7B E2 54 1195*                  LD	SP,(HIMEM)	;MUST SET SP BEFORE 'CALL'
003F63 28 01       1196*                  JR	Z,ERROR4
003F65 F9          1197*                  LD	SP,HL
003F66 79          1198*  ERROR4:         LD	A,C		;ERROR NUMBER
003F67 CD 5B 41    1199*                  CALL	SETLIN		;SP IS SET NOW
003F6A 32 FD 54    1200*                  LD	(ERR),A
003F6D 22 F2 54    1201*                  LD	(ERL),HL
003F70 B7          1202*                  OR	A
003F71 28 0B       1203*                  JR	Z,ERROR2	;'FATAL' ERROR
003F73 2A EA 54    1204*                  LD	HL,(ERRTRP)
003F76 7C          1205*                  LD	A,H
003F77 B5          1206*                  OR	L
003F78 E5          1207*                  PUSH	HL
003F79 FD E1       1208*                  POP	IY
003F7B C2 99 24    1209*                  JP	NZ,XEQ		;ERROR TRAPPED
003F7E ED 7B E2 54 1210*  ERROR2:         LD	SP,(HIMEM)
003F82 ED 62       1211*                  SBC	HL,HL
003F84 22 E8 54    1212*                  LD	(AUTONO),HL
003F87 22 E6 54    1213*                  LD	(TRACEN),HL	;CANCEL TRACE
003F8A CD 27 12    1214*                  CALL	RESET		;RESET OPSYS
003F8D CD FB 40    1215*                  CALL	CRLF
003F90 CD E5 44    1216*                  CALL	REPORT		;MESSAGE
003F93 2A F2 54    1217*                  LD	HL,(ERL)
003F96 CD 82 41    1218*                  CALL	SAYLN
003F99 1E 00       1219*                  LD	E,0
003F9B DC 37 12    1220*                  CALL	C,OSSHUT	;CLOSE ALL FILES
003F9E CD FB 40    1221*                  CALL	CRLF
003FA1 18 83       1222*                  JR	CLOOP0
003FA3             1223*  ;
003FA3             1224*  ;SUBROUTINES:
003FA3             1225*  ;
003FA3             1226*  ;
003FA3             1227*  ;LEX - SEARCH FOR KEYWORDS
003FA3             1228*  ;   Inputs: HL = start of keyword table
003FA3             1229*  ;           IY = start of match text
003FA3             1230*  ;  Outputs: If found, Z-flag set, A=token.
003FA3             1231*  ;           If not found, Z-flag reset, A=(IY).
003FA3             1232*  ;           IY updated (if NZ, IY unchanged).
003FA3             1233*  ; Destroys: A,B,H,L,IY,F
003FA3             1234*  ;
003FA3 21 84 38    1235*  LEX:            LD	HL,KEYWDS
003FA6 FD 7E 00    1236*  LEX0:           LD	A,(IY)
003FA9 46          1237*                  LD	B,(HL)
003FAA 23          1238*                  INC	HL
003FAB BE          1239*                  CP	(HL)
003FAC 28 0A       1240*                  JR	Z,LEX2
003FAE D8          1241*                  RET	C		;FAIL EXIT
003FAF 23          1242*  LEX1:           INC	HL
003FB0 7E          1243*                  LD	A,(HL)
003FB1 FE A0       1244*                  CP	160
003FB3 EA AF 3F    1245*                  JP	PE,LEX1
003FB6 18 EE       1246*                  JR	LEX0
003FB8             1247*  ;
003FB8 FD E5       1248*  LEX2:           PUSH	IY		;SAVE POINTER
003FBA 23          1249*  LEX3:           INC	HL
003FBB 7E          1250*                  LD	A,(HL)
003FBC FE A0       1251*                  CP	160
003FBE E2 E5 3F    1252*                  JP	PO,LEX6		;FOUND
003FC1 FD 23       1253*                  INC	IY
003FC3 FD 7E 00    1254*                  LD	A,(IY)
003FC6 BE          1255*                  CP	(HL)
003FC7 20 05       1256*                  JR	NZ,LEX7
003FC9 FE A1       1257*                  CP	161
003FCB EA BA 3F    1258*                  JP	PE,LEX3
003FCE FD 7E 00    1259*  LEX7:           LD	A,(IY)
003FD1 FE 2E       1260*                  CP	'.'
003FD3 28 10       1261*                  JR	Z,LEX6		;FOUND (ABBREV.)
003FD5 CD FC 43    1262*                  CALL	RANGE1
003FD8 38 04       1263*                  JR	C,LEX5
003FDA FD E1       1264*  LEX4:           POP	IY		;RESTORE POINTER
003FDC 18 D1       1265*                  JR	LEX1
003FDE             1266*  ;
003FDE 7E          1267*  LEX5:           LD	A,(HL)
003FDF FE 20       1268*                  CP	' '
003FE1 20 F7       1269*                  JR	NZ,LEX4
003FE3 FD 2B       1270*                  DEC	IY
003FE5 F1          1271*  LEX6:           POP	AF
003FE6 AF          1272*                  XOR	A
003FE7 78          1273*                  LD	A,B
003FE8 C9          1274*                  RET
003FE9             1275*  ;
003FE9             1276*  ;DEL - DELETE A PROGRAM LINE.
003FE9             1277*  ;   Inputs: HL addresses program line.
003FE9             1278*  ; Destroys: B,C,F
003FE9             1279*  ;
003FE9 D5          1280*  DEL:            PUSH	DE
003FEA E5          1281*                  PUSH	HL
003FEB E5          1282*                  PUSH	HL
003FEC 06 00       1283*                  LD	B,0
003FEE 4E          1284*                  LD	C,(HL)
003FEF 09          1285*                  ADD	HL,BC
003FF0 E5          1286*                  PUSH	HL
003FF1 EB          1287*                  EX	DE,HL
003FF2 CD 25 40    1288*                  CALL	GETTOP
003FF5 ED 52       1289*                  SBC	HL,DE
003FF7 44          1290*                  LD	B,H
003FF8 4D          1291*                  LD	C,L
003FF9 E1          1292*                  POP	HL
003FFA D1          1293*                  POP	DE
003FFB ED B0       1294*                  LDIR			;DELETE LINE
003FFD E1          1295*                  POP	HL
003FFE D1          1296*                  POP	DE
003FFF C9          1297*                  RET
004000             1298*  ;
004000             1299*  ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
004000             1300*  ;   Inputs: Filename in ACCS (term CR)
004000             1301*  ; Destroys: A,B,C,D,E,H,L,F
004000             1302*  ;
004000             1303*  ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
004000             1304*  ; AND WRITE FF FF.
004000             1305*  ; Destroys: A,B,C,H,L,F
004000             1306*  ;
004000 ED 5B DC 54 1307*  LOAD0:          LD	DE,(PAGE_)
004004 21 00 FF    1308*                  LD	HL,-256
004007 39          1309*                  ADD	HL,SP
004008 ED 52       1310*                  SBC	HL,DE		;FIND AVAILABLE SPACE
00400A 44          1311*                  LD	B,H
00400B 4D          1312*                  LD	C,L
00400C 21 00 52    1313*                  LD	HL,ACCS
00400F CD B0 12    1314*                  CALL	OSLOAD		;LOAD
004012 D4 3E 40    1315*                  CALL	NC,NEWIT
004015 3E 00       1316*                  LD	A,0
004017 D2 44 3F    1317*                  JP	NC,ERROR_	;"No room"
00401A CD 25 40    1318*  CLEAN:          CALL	GETTOP
00401D 2B          1319*                  DEC	HL
00401E 36 FF       1320*                  LD	(HL),-1		;WRITE &FFFF
004020 2B          1321*                  DEC	HL
004021 36 FF       1322*                  LD	(HL),-1
004023 18 1E       1323*                  JR	CLEAR
004025             1324*  ;
004025 2A DC 54    1325*  GETTOP:         LD	HL,(PAGE_)
004028 06 00       1326*                  LD	B,0
00402A 3E 0D       1327*                  LD	A,CR
00402C 4E          1328*  GETOP1:         LD	C,(HL)
00402D 0C          1329*                  INC	C
00402E 0D          1330*                  DEC	C
00402F 28 09       1331*                  JR	Z,GETOP2
004031 09          1332*                  ADD	HL,BC
004032 2B          1333*                  DEC	HL
004033 BE          1334*                  CP	(HL)
004034 23          1335*                  INC	HL
004035 28 F5       1336*                  JR	Z,GETOP1
004037 C3 EF 3E    1337*                  JP	BAD
00403A 23          1338*  GETOP2:         INC	HL		;N.B. CALLED FROM NEWIT
00403B 23          1339*                  INC	HL
00403C 23          1340*                  INC	HL
00403D C9          1341*                  RET
00403E             1342*  ;
00403E             1343*  ;NEWIT - NEW PROGRAM THEN CLEAR
00403E             1344*  ;   Destroys: H,L
00403E             1345*  ;
00403E             1346*  ;CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
00403E             1347*  ; FUNCTION AND PROCEDURE POINTERS.
00403E             1348*  ;   Destroys: Nothing
00403E             1349*  ;
00403E 2A DC 54    1350*  NEWIT:          LD	HL,(PAGE_)
004041 36 00       1351*                  LD	(HL),0
004043 E5          1352*  CLEAR:          PUSH	HL
004044 C5          1353*                  PUSH	BC
004045 F5          1354*                  PUSH	AF
004046 CD 25 40    1355*                  CALL	GETTOP
004049 22 DE 54    1356*                  LD	(LOMEM),HL
00404C 22 E0 54    1357*                  LD	(FREE),HL
00404F 21 6C 54    1358*                  LD	HL,DYNVAR
004052             1359*                  ; LD	B,2*(54+2)
004052 06 70       1360*                  LD	B,54+2*2
004054 36 00       1361*  CLEAR1:         LD	(HL),0
004056 23          1362*                  INC	HL
004057 10 FB       1363*                  DJNZ	CLEAR1
004059 F1          1364*                  POP	AF
00405A C1          1365*                  POP	BC
00405B E1          1366*                  POP	HL
00405C C9          1367*                  RET
00405D             1368*  ;
00405D             1369*  ;LISTIT - LIST A PROGRAM LINE.
00405D             1370*  ;    Inputs: HL addresses line
00405D             1371*  ;            DE = line number (binary)
00405D             1372*  ;	     E' = indentation count
00405D             1373*  ;            IX addresses LISTON
00405D             1374*  ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
00405D             1375*  ;
00405D E5          1376*  LISTIT:         PUSH	HL
00405E EB          1377*                  EX	DE,HL
00405F C5          1378*                  PUSH	BC
004060 CD 96 41    1379*                  CALL	PBCD
004063 C1          1380*                  POP	BC
004064 E1          1381*                  POP	HL
004065 7E          1382*                  LD	A,(HL)
004066 D9          1383*                  EXX
004067 21 7E 3D    1384*                  LD	HL,TOKSUB
00406A 01 08 00    1385*                  LD	BC,LENSUB
00406D ED B1       1386*                  CPIR
00406F CC F5 40    1387*                  CALL	Z,INDSUB
004072 FE CB       1388*                  CP	TENDCASE
004074 CC F5 40    1389*                  CALL	Z,INDSUB
004077 3E 20       1390*                  LD	A,' '
004079 DD CB 00 46 1391*                  BIT	0,(IX)
00407D C4 02 41    1392*                  CALL	NZ,OUTCHR
004080 7B          1393*                  LD	A,E
004081 87          1394*                  ADD	A,A
004082 DD CB 00 4E 1395*                  BIT	1,(IX)
004086 C4 A3 35    1396*                  CALL	NZ,SPACES
004089 D9          1397*                  EXX
00408A 7E          1398*                  LD	A,(HL)
00408B 1E 00       1399*                  LD	E,0
00408D D9          1400*                  EXX
00408E 01 07 00    1401*                  LD	BC,LENADD
004091 21 77 3D    1402*  LIST5:          LD	HL,TOKADD
004094 ED B1       1403*                  CPIR
004096 CC F9 40    1404*                  CALL	Z,INDADD
004099 FE C8       1405*                  CP	TCASE
00409B CC F9 40    1406*                  CALL	Z,INDADD
00409E D9          1407*                  EXX
00409F 7E          1408*  LIST8:          LD	A,(HL)
0040A0 23          1409*                  INC	HL
0040A1 FE 0D       1410*                  CP	CR
0040A3 28 25       1411*                  JR	Z,LIST9
0040A5 57          1412*                  LD	D,A
0040A6 FE 10       1413*                  CP	TEXIT
0040A8 20 02       1414*                  JR	NZ,LIST6
0040AA CB FB       1415*                  SET	7,E
0040AC FE 22       1416*  LIST6:          CP	'"'
0040AE 20 01       1417*                  JR	NZ,LIST7
0040B0 1C          1418*                  INC	E
0040B1 CD E9 40    1419*  LIST7:          CALL	LOUT
0040B4 7B          1420*                  LD	A,E
0040B5 E6 81       1421*                  AND	81H
0040B7 20 E6       1422*                  JR	NZ,LIST8
0040B9 7E          1423*                  LD	A,(HL)
0040BA D9          1424*                  EXX
0040BB 21 7E 3D    1425*                  LD	HL,TOKSUB
0040BE 01 03 00    1426*                  LD	BC,3
0040C1 ED B1       1427*                  CPIR
0040C3 CC F5 40    1428*                  CALL	Z,INDSUB
0040C6 0E 04       1429*                  LD	C,4
0040C8 18 C7       1430*                  JR	LIST5
0040CA             1431*  ;
0040CA 7A          1432*  LIST9:          LD	A,D
0040CB FE 8C       1433*                  CP	TTHEN
0040CD D9          1434*                  EXX
0040CE CC F9 40    1435*                  CALL	Z,INDADD
0040D1 D9          1436*                  EXX
0040D2 18 27       1437*                  JR	CRLF
0040D4             1438*  ;
0040D4 E5          1439*  PRLINO:         PUSH	HL
0040D5 FD E1       1440*                  POP	IY
0040D7 C5          1441*                  PUSH	BC
0040D8 CD 60 1F    1442*                  CALL	DECODE
0040DB C1          1443*                  POP	BC
0040DC D9          1444*                  EXX
0040DD C5          1445*                  PUSH	BC
0040DE D5          1446*                  PUSH	DE
0040DF CD 92 41    1447*                  CALL	PBCDL
0040E2 D1          1448*                  POP	DE
0040E3 C1          1449*                  POP	BC
0040E4 D9          1450*                  EXX
0040E5 FD E5       1451*                  PUSH	IY
0040E7 E1          1452*                  POP	HL
0040E8 C9          1453*                  RET
0040E9             1454*  ;
0040E9 CB 43       1455*  LOUT:           BIT	0,E
0040EB 20 15       1456*                  JR	NZ,OUTCHR
0040ED FE 8D       1457*                  CP	TLINO
0040EF 28 E3       1458*                  JR	Z,PRLINO
0040F1 CD 1B 41    1459*                  CALL	OUT
0040F4 C9          1460*                  RET
0040F5             1461*  ;
0040F5 1D          1462*  INDSUB:         DEC	E
0040F6 F2 FA 40    1463*                  JP	P,INDRET
0040F9 1C          1464*  INDADD:         INC	E
0040FA C9          1465*  INDRET:         RET
0040FB             1466*  ;
0040FB             1467*  ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
0040FB             1468*  ;  Destroys: A,F
0040FB             1469*  ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
0040FB             1470*  ;    Inputs: A = character
0040FB             1471*  ;  Destroys: A,F
0040FB             1472*  ;
0040FB 3E 0D       1473*  CRLF:           LD	A,CR
0040FD CD 02 41    1474*                  CALL	OUTCHR
004100 3E 0A       1475*                  LD	A,LF
004102 CD 95 11    1476*  OUTCHR:         CALL	OSWRCH
004105 D6 0D       1477*                  SUB	CR
004107 28 05       1478*                  JR	Z,CARRET
004109 D8          1479*                  RET	C		;NON-PRINTING
00410A 3A FB 54    1480*                  LD	A,(COUNT)
00410D 3C          1481*                  INC	A
00410E 32 FB 54    1482*  CARRET:         LD	(COUNT),A
004111 C8          1483*                  RET	Z
004112 E5          1484*                  PUSH	HL
004113 2A FC 54    1485*                  LD	HL,(WIDTH)
004116 BD          1486*                  CP	L
004117 E1          1487*                  POP	HL
004118 C0          1488*                  RET	NZ
004119 18 E0       1489*                  JR	CRLF
00411B             1490*  ;
00411B             1491*  ;OUT - SEND CHARACTER OR KEYWORD
00411B             1492*  ;   Inputs: A = character (>=10, <128)
00411B             1493*  ;           A = Token (<10, >=128)
00411B             1494*  ;  Destroys: A,F
00411B             1495*  ;
00411B FE A0       1496*  OUT:            CP	160
00411D EA 02 41    1497*                  JP	PE,OUTCHR
004120 C5          1498*                  PUSH	BC
004121 E5          1499*                  PUSH	HL
004122 21 84 38    1500*                  LD	HL,KEYWDS
004125 01 5B 03    1501*                  LD	BC,KEYWDL
004128 ED B1       1502*                  CPIR
00412A C4 02 41    1503*                  CALL	NZ,OUTCHR
00412D 06 A0       1504*                  LD	B,160
00412F FE 91       1505*                  CP	145
004131 EA 35 41    1506*                  JP	PE,TOKEN1
004134 04          1507*                  INC	B
004135 7E          1508*  TOKEN1:         LD	A,(HL)
004136 23          1509*                  INC	HL
004137 B8          1510*                  CP	B
004138 F5          1511*                  PUSH	AF
004139 EC 02 41    1512*                  CALL	PE,OUTCHR
00413C F1          1513*                  POP	AF
00413D EA 35 41    1514*                  JP	PE,TOKEN1
004140 E1          1515*                  POP	HL
004141 C1          1516*                  POP	BC
004142 C9          1517*                  RET
004143             1518*  ;
004143             1519*  ;FINDL - FIND PROGRAM LINE.
004143             1520*  ;   Inputs: HL = line number (binary)
004143             1521*  ;  Outputs: HL addresses line (if found)
004143             1522*  ;           DE = line number
004143             1523*  ;           Z-flag set if found.
004143             1524*  ; Destroys: A,B,C,D,E,H,L,F
004143             1525*  ;
004143 EB          1526*  FINDL:          EX	DE,HL
004144 2A DC 54    1527*                  LD	HL,(PAGE_)
004147 AF          1528*                  XOR	A		;A=0
004148 BE          1529*                  CP	(HL)
004149 3C          1530*                  INC	A
00414A D0          1531*                  RET	NC
00414B AF          1532*                  XOR	A		;CLEAR CARRY
00414C 47          1533*                  LD	B,A
00414D 4E          1534*  FINDL1:         LD	C,(HL)
00414E E5          1535*                  PUSH	HL
00414F 23          1536*                  INC	HL
004150 7E          1537*                  LD	A,(HL)
004151 23          1538*                  INC	HL
004152 66          1539*                  LD	H,(HL)
004153 6F          1540*                  LD	L,A
004154 ED 52       1541*                  SBC	HL,DE
004156 E1          1542*                  POP	HL
004157 D0          1543*                  RET	NC		;FOUND | PAST
004158 09          1544*                  ADD	HL,BC
004159 18 F2       1545*                  JR	FINDL1
00415B             1546*  ;
00415B             1547*  ;SETLIN - Search program for line containing address.
00415B             1548*  ;   Inputs: Address in (CURLIN)
00415B             1549*  ;  Outputs: Line number in HL
00415B             1550*  ; Destroys: B,C,D,E,H,L,F
00415B             1551*  ;
00415B 06 00       1552*  SETLIN:         LD	B,0
00415D ED 5B F4 54 1553*                  LD	DE,(CURLIN)
004161 2A DC 54    1554*                  LD	HL,(PAGE_)
004164 B7          1555*                  OR	A
004165 ED 52       1556*                  SBC	HL,DE
004167 19          1557*                  ADD	HL,DE
004168 30 13       1558*                  JR	NC,SET3
00416A 4E          1559*  SET1:           LD	C,(HL)
00416B 0C          1560*                  INC	C
00416C 0D          1561*                  DEC	C
00416D 28 0E       1562*                  JR	Z,SET3
00416F 09          1563*                  ADD	HL,BC
004170 ED 52       1564*                  SBC	HL,DE
004172 19          1565*                  ADD	HL,DE
004173 38 F5       1566*                  JR	C,SET1
004175 ED 42       1567*                  SBC	HL,BC
004177 23          1568*                  INC	HL
004178 5E          1569*                  LD	E,(HL)		;LINE NUMBER
004179 23          1570*                  INC	HL
00417A 56          1571*                  LD	D,(HL)
00417B EB          1572*                  EX	DE,HL
00417C C9          1573*  SET2:           RET
00417D             1574*  ;
00417D 21 00 00    1575*  SET3:           LD	HL,0
004180 18 FA       1576*                  JR	SET2
004182             1577*  ;
004182             1578*  ;SAYLN - PRINT " at line nnnn" MESSAGE.
004182             1579*  ;   Inputs: HL = line number
004182             1580*  ;  Outputs: Carry=0 if line number is zero.
004182             1581*  ;           Carry=1 if line number is non-zero.
004182             1582*  ; Destroys: A,B,C,D,E,H,L,F
004182             1583*  ;
004182 7C          1584*  SAYLN:          LD	A,H
004183 B5          1585*                  OR	L
004184 C8          1586*                  RET	Z
004185 CD FA 44    1587*                  CALL	TELL
004188 20 61 74 20 1588*                  DB	" at line "
       6C 69 6E 65 
       20          
004191 00          1589*                  DB	0
004192 0E 00       1590*  PBCDL:          LD	C,0
004194 18 02       1591*                  JR	PBCD0
004196             1592*  ;
004196             1593*  ;PBCD - PRINT NUMBER AS DECIMAL INTEGER.
004196             1594*  ;   Inputs: HL = number (binary).
004196             1595*  ;  Outputs: Carry = 1
004196             1596*  ; Destroys: A,B,C,D,E,H,L,F
004196             1597*  ;
004196 0E 20       1598*  PBCD:           LD	C,' '
004198 06 05       1599*  PBCD0:          LD	B,5
00419A 11 10 27    1600*                  LD	DE,10000
00419D AF          1601*  PBCD1:          XOR	A
00419E ED 52       1602*  PBCD2:          SBC	HL,DE
0041A0 3C          1603*                  INC	A
0041A1 30 FB       1604*                  JR	NC,PBCD2
0041A3 19          1605*                  ADD	HL,DE
0041A4 3D          1606*                  DEC	A
0041A5 28 04       1607*                  JR	Z,PBCD3
0041A7 CB E1       1608*                  SET	4,C
0041A9 CB E9       1609*                  SET	5,C
0041AB B1          1610*  PBCD3:          OR	C
0041AC C4 02 41    1611*                  CALL	NZ,OUTCHR
0041AF 78          1612*                  LD	A,B
0041B0 FE 05       1613*                  CP	5
0041B2 28 06       1614*                  JR	Z,PBCD4
0041B4 29          1615*                  ADD	HL,HL
0041B5 54          1616*                  LD	D,H
0041B6 5D          1617*                  LD	E,L
0041B7 29          1618*                  ADD	HL,HL
0041B8 29          1619*                  ADD	HL,HL
0041B9 19          1620*                  ADD	HL,DE
0041BA 11 E8 03    1621*  PBCD4:          LD	DE,1000
0041BD 10 DE       1622*                  DJNZ	PBCD1
0041BF 37          1623*                  SCF
0041C0 C9          1624*                  RET
0041C1             1625*  ;
0041C1             1626*  ;HANDLE WHOLE ARRAY:
0041C1             1627*  ;
0041C1 FD 23       1628*  GETV1:          INC	IY
0041C3 FD 23       1629*                  INC	IY		;SKIP ()
0041C5 E5          1630*                  PUSH	HL		;SET EXIT CONDITIONS
0041C6 DD E1       1631*                  POP	IX
0041C8 7A          1632*                  LD	A,D
0041C9 F6 40       1633*                  OR	64		;FLAG ARRAY
0041CB BF          1634*                  CP	A
0041CC C9          1635*                  RET
0041CD             1636*  ;
0041CD             1637*  ;PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
0041CD             1638*  ;   Inputs: HL, IY as returned from GETVAR (NZ).
0041CD             1639*  ;  Outputs: As GETVAR.
0041CD             1640*  ; Destroys: everything
0041CD             1641*  ;
0041CD CD 3C 43    1642*  PUTVAR:         CALL	CREATE
0041D0 FD 7E 00    1643*                  LD	A,(IY)
0041D3 FE 28       1644*                  CP	'('
0041D5 20 7D       1645*                  JR	NZ,GETVZ	;SET EXIT CONDITIONS
0041D7 FD 7E 01    1646*                  LD	A,(IY+1)
0041DA FE 29       1647*                  CP	')'		;WHOLE ARRAY?
0041DC 28 E3       1648*                  JR	Z,GETV1
0041DE 3E 0E       1649*  ARRAY:          LD	A,14		;'Bad use of array'
0041E0 C3 44 3F    1650*  ERROR3:         JP	ERROR_
0041E3             1651*  ;
0041E3             1652*  ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
0041E3             1653*  ;   Inputs: IY addresses first character.
0041E3             1654*  ;  Outputs: Carry set and NZ if illegal character.
0041E3             1655*  ;           Z-flag set if variable found, then:
0041E3             1656*  ;            A = variable type (0,4,5,128 or 129)
0041E3             1657*  ;                (68,69 or 193 for whole array)
0041E3             1658*  ;            HL = IX = variable pointer.
0041E3             1659*  ;            IY updated
0041E3             1660*  ;           If Z-flag & carry reset, then:
0041E3             1661*  ;            HL, IY set for subsequent PUTVAR call.
0041E3             1662*  ; Destroys: everything
0041E3             1663*  ;
0041E3 FD 7E 00    1664*  GETVAR:         LD	A,(IY)
0041E6 FE 21       1665*                  CP	'!'
0041E8 28 76       1666*                  JR	Z,GETV5
0041EA FE 3F       1667*                  CP	'?'
0041EC 28 76       1668*                  JR	Z,GETV6
0041EE FE 7C       1669*                  CP	'|'
0041F0 28 75       1670*                  JR	Z,GETVF
0041F2 FE 24       1671*                  CP	'$'
0041F4 28 75       1672*                  JR	Z,GETV4
0041F6 CD B0 42    1673*                  CALL	LOCATE
0041F9 C0          1674*                  RET	NZ
0041FA FD 7E 00    1675*                  LD	A,(IY)
0041FD FE 28       1676*                  CP	'('		;ARRAY?
0041FF 20 4B       1677*                  JR	NZ,GETVX	;EXIT
004201 FD 7E 01    1678*                  LD	A,(IY+1)
004204 FE 29       1679*                  CP	')'		;WHOLE ARRAY?
004206 28 B9       1680*                  JR	Z,GETV1
004208 D5          1681*                  PUSH	DE		;SAVE TYPE
004209 7E          1682*                  LD	A,(HL)
00420A 23          1683*                  INC	HL
00420B 66          1684*                  LD	H,(HL)
00420C 6F          1685*                  LD	L,A		;INDIRECT LINK
00420D E6 FE       1686*                  AND	0FEH
00420F B4          1687*                  OR	H
004210 28 CC       1688*                  JR	Z,ARRAY
004212 7E          1689*                  LD	A,(HL)		;NO. OF DIMENSIONS
004213 B7          1690*                  OR	A
004214 28 C8       1691*                  JR	Z,ARRAY
004216 23          1692*                  INC	HL
004217 11 00 00    1693*                  LD	DE,0		;ACCUMULATOR
00421A F5          1694*                  PUSH	AF
00421B FD 23       1695*                  INC	IY		;SKIP (
00421D E5          1696*  GETV3:          PUSH	HL
00421E D5          1697*                  PUSH	DE
00421F CD 33 18    1698*                  CALL	EXPRI		;SUBSCRIPT
004222 D9          1699*                  EXX
004223 D1          1700*                  POP	DE
004224 E3          1701*                  EX	(SP),HL
004225 4E          1702*                  LD	C,(HL)
004226 23          1703*                  INC	HL
004227 46          1704*                  LD	B,(HL)
004228 23          1705*                  INC	HL
004229 E3          1706*                  EX	(SP),HL
00422A EB          1707*                  EX	DE,HL
00422B D5          1708*                  PUSH	DE
00422C CD BD 36    1709*                  CALL	MUL16		;HL=HL*BC
00422F D1          1710*                  POP	DE
004230 19          1711*                  ADD	HL,DE
004231 EB          1712*                  EX	DE,HL
004232 B7          1713*                  OR	A
004233 ED 42       1714*                  SBC	HL,BC
004235 3E 0F       1715*                  LD	A,15
004237 30 A7       1716*                  JR	NC,ERROR3	;"Subscript"
004239 E1          1717*                  POP	HL
00423A F1          1718*                  POP	AF
00423B 3D          1719*                  DEC	A		;DIMENSION COUNTER
00423C 20 1C       1720*                  JR	NZ,GETV2
00423E CD AE 20    1721*                  CALL	BRAKET		;CLOSING BRACKET
004241 F1          1722*                  POP	AF		;RESTORE TYPE
004242 E5          1723*                  PUSH	HL
004243 CD AD 36    1724*                  CALL	X14OR5		;DE=DE*n
004246 E1          1725*                  POP	HL
004247 19          1726*                  ADD	HL,DE
004248 57          1727*                  LD	D,A		;TYPE
004249 FD 7E 00    1728*                  LD	A,(IY)
00424C FE 3F       1729*  GETVX:          CP	'?'
00424E 28 26       1730*                  JR	Z,GETV9
004250 FE 21       1731*                  CP	'!'
004252 28 1E       1732*                  JR	Z,GETV8
004254 E5          1733*  GETVZ:          PUSH	HL		;SET EXIT CONDITIONS
004255 DD E1       1734*                  POP	IX
004257 7A          1735*                  LD	A,D
004258 BF          1736*                  CP	A
004259 C9          1737*                  RET
00425A             1738*  ;
00425A F5          1739*  GETV2:          PUSH	AF
00425B CD A2 20    1740*                  CALL	COMMA
00425E 18 BD       1741*                  JR	GETV3
004260             1742*  ;
004260             1743*  ;PROCESS UNARY & BINARY INDIRECTION:
004260             1744*  ;
004260 3E 04       1745*  GETV5:          LD	A,4		;UNARY 32-BIT INDIRN.
004262 18 09       1746*                  JR	GETV7
004264 AF          1747*  GETV6:          XOR	A		;UNARY 8-BIT INDIRECTION
004265 18 06       1748*                  JR	GETV7
004267 3E 05       1749*  GETVF:          LD	A,5		;VARIANT INDIRECTION
004269 18 02       1750*                  JR	GETV7
00426B 3E 80       1751*  GETV4:          LD	A,128		;STATIC STRING
00426D ED 62       1752*  GETV7:          SBC	HL,HL
00426F F5          1753*                  PUSH	AF
004270 18 15       1754*                  JR	GETV0
004272             1755*  ;
004272 06 04       1756*  GETV8:          LD	B,4		;32-BIT BINARY INDIRN.
004274 18 02       1757*                  JR	GETVA
004276 06 00       1758*  GETV9:          LD	B,0		;8-BIT BINARY INDIRN.
004278 E5          1759*  GETVA:          PUSH	HL
004279 DD E1       1760*                  POP	IX
00427B 7A          1761*                  LD	A,D		;TYPE
00427C FE 81       1762*                  CP	129
00427E C8          1763*                  RET	Z		;STRING!
00427F C5          1764*                  PUSH	BC
004280 CD 25 19    1765*                  CALL	LOADN		;LEFT OPERAND
004283 CD 17 1C    1766*                  CALL	SFIX
004286 D9          1767*                  EXX
004287 E5          1768*  GETV0:          PUSH	HL
004288 FD 23       1769*                  INC	IY
00428A CD 60 18    1770*                  CALL	ITEMI
00428D D9          1771*                  EXX
00428E D1          1772*                  POP	DE
00428F F1          1773*                  POP	AF
004290 19          1774*                  ADD	HL,DE
004291 E5          1775*                  PUSH	HL
004292 DD E1       1776*                  POP	IX
004294 BF          1777*                  CP	A
004295 C9          1778*                  RET
004296             1779*  ;
004296             1780*  ;GETDEF - Find entry for FN or PROC in dynamic area.
004296             1781*  ;   Inputs: IY addresses byte following "DEF" token.
004296             1782*  ;  Outputs: Z flag set if found
004296             1783*  ;           Carry set if neither FN or PROC first.
004296             1784*  ;           If Z: HL points to entry
004296             1785*  ;                 IY addresses delimiter
004296             1786*  ; Destroys: A,D,E,H,L,IY,F
004296             1787*  ;
004296 FD 7E 01    1788*  GETDEF:         LD	A,(IY+1)
004299 CD FC 43    1789*                  CALL	RANGE1
00429C D8          1790*                  RET	C
00429D FD 7E 00    1791*                  LD	A,(IY)
0042A0 21 D8 54    1792*                  LD	HL,FNPTR
0042A3 FE A4       1793*                  CP	TFN
0042A5 28 43       1794*                  JR	Z,LOC2
0042A7 21 DA 54    1795*                  LD	HL,PROPTR
0042AA FE F2       1796*                  CP	TPROC
0042AC 28 3C       1797*                  JR	Z,LOC2
0042AE 37          1798*                  SCF
0042AF C9          1799*                  RET
0042B0             1800*  ;
0042B0             1801*  ;LOCATE - Try to locate variable name in static or
0042B0             1802*  ;dynamic variables.  If illegal first character return
0042B0             1803*  ;carry, non-zero.  If found, return no-carry, zero.
0042B0             1804*  ;If not found, return no-carry, non-zero.
0042B0             1805*  ;   Inputs: IY addresses first character of name.
0042B0             1806*  ;           A=(IY)
0042B0             1807*  ;  Outputs: Z-flag set if found, then:
0042B0             1808*  ;            IY addresses terminator
0042B0             1809*  ;            HL addresses location of variable
0042B0             1810*  ;            D=type of variable:  4 = integer
0042B0             1811*  ;                                 5 = floating point
0042B0             1812*  ;                               129 = string
0042B0             1813*  ; Destroys: A,D,E,H,L,IY,F
0042B0             1814*  ;
0042B0 D6 40       1815*  LOCATE:         SUB	'@'
0042B2 D8          1816*                  RET	C
0042B3 26 00       1817*                  LD	H,0
0042B5 FE 1B       1818*                  CP	'Z'-'@'+1
0042B7 30 1D       1819*                  JR	NC,LOC0		;NOT STATIC
0042B9 87          1820*                  ADD	A,A
0042BA 6F          1821*                  LD	L,A
0042BB FD 7E 01    1822*                  LD	A,(IY+1)	;2nd CHARACTER
0042BE FE 25       1823*                  CP	'%'
0042C0 20 20       1824*                  JR	NZ,LOC1		;NOT STATIC
0042C2 FD 7E 02    1825*                  LD	A,(IY+2)
0042C5 FE 28       1826*                  CP	'('
0042C7 28 19       1827*                  JR	Z,LOC1		;NOT STATIC
0042C9 29          1828*                  ADD	HL,HL
0042CA 11 00 54    1829*                  LD	DE,STAVAR	;STATIC VARIABLES
0042CD 19          1830*                  ADD	HL,DE
0042CE FD 23       1831*                  INC	IY
0042D0 FD 23       1832*                  INC	IY
0042D2 16 04       1833*                  LD	D,4		;INTEGER TYPE
0042D4 AF          1834*                  XOR	A
0042D5 C9          1835*                  RET
0042D6             1836*  ;
0042D6 FE 1F       1837*  LOC0:           CP	'_'-'@'
0042D8 D8          1838*                  RET	C
0042D9 FE 3B       1839*                  CP	'z'-'@'+1
0042DB 3F          1840*                  CCF
0042DC 3D          1841*                  DEC	A		;SET NZ
0042DD D8          1842*                  RET	C
0042DE D6 03       1843*                  SUB	3
0042E0 87          1844*                  ADD	A,A
0042E1 6F          1845*                  LD	L,A
0042E2 11 6C 54    1846*  LOC1:           LD	DE,DYNVAR	;DYNAMIC VARIABLES
0042E5 2D          1847*                  DEC	L
0042E6 2D          1848*                  DEC	L
0042E7 37          1849*                  SCF
0042E8 F8          1850*                  RET	M
0042E9 19          1851*                  ADD	HL,DE
0042EA 5E          1852*  LOC2:           LD	E,(HL)
0042EB 23          1853*                  INC	HL
0042EC 56          1854*                  LD	D,(HL)
0042ED 7A          1855*                  LD	A,D
0042EE B3          1856*                  OR	E
0042EF 28 49       1857*                  JR	Z,LOC6		;UNDEFINED VARIABLE
0042F1 62          1858*                  LD	H,D
0042F2 6B          1859*                  LD	L,E
0042F3 23          1860*                  INC	HL		;SKIP LINK
0042F4 23          1861*                  INC	HL
0042F5 FD E5       1862*                  PUSH	IY
0042F7 7E          1863*  LOC3:           LD	A,(HL)		;COMPARE
0042F8 23          1864*                  INC	HL
0042F9 FD 23       1865*                  INC	IY
0042FB FD BE 00    1866*                  CP	(IY)
0042FE 28 F7       1867*                  JR	Z,LOC3
004300 B7          1868*                  OR	A		;0=TERMINATOR
004301 28 05       1869*                  JR	Z,LOC5		;FOUND (MAYBE)
004303 FD E1       1870*  LOC4:           POP	IY
004305 EB          1871*                  EX	DE,HL
004306 18 E2       1872*                  JR	LOC2		;TRY NEXT ENTRY
004308             1873*  ;
004308 FD 2B       1874*  LOC5:           DEC	IY
00430A FD 7E 00    1875*                  LD	A,(IY)
00430D FE 28       1876*                  CP	'('
00430F 28 13       1877*                  JR	Z,LOCX		;FOUND
004311 FD 23       1878*                  INC	IY
004313 CD EF 43    1879*                  CALL	RANGE
004316 38 0C       1880*                  JR	C,LOCX		;FOUND
004318 FE 28       1881*                  CP	'('
00431A 28 E7       1882*                  JR	Z,LOC4		;KEEP LOOKING
00431C FD 7E FF    1883*                  LD	A,(IY-1)
00431F CD FC 43    1884*                  CALL	RANGE1
004322 30 DF       1885*                  JR	NC,LOC4		;KEEP LOOKING
004324 D1          1886*  LOCX:           POP	DE
004325 FD 7E FF    1887*  TYPE:           LD	A,(IY-1)
004328 FE 24       1888*                  CP	'$'
00432A 16 81       1889*                  LD	D,129
00432C C8          1890*                  RET	Z		;STRING
00432D FE 26       1891*                  CP	'&'
00432F 16 01       1892*                  LD	D,1
004331 C8          1893*                  RET	Z		;BYTE
004332 FE 25       1894*                  CP	'%'
004334 16 04       1895*                  LD	D,4
004336 C8          1896*                  RET	Z		;INTEGER
004337 14          1897*                  INC	D
004338 BF          1898*                  CP	A
004339 C9          1899*                  RET
00433A             1900*  ;
00433A 3C          1901*  LOC6:           INC	A		;SET NZ
00433B C9          1902*                  RET
00433C             1903*  ;
00433C             1904*  ;CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
00433C             1905*  ;   Inputs: HL, IY as returned from LOCATE (NZ).
00433C             1906*  ;  Outputs: As LOCATE, GETDEF.
00433C             1907*  ; Destroys: As LOCATE, GETDEF.
00433C             1908*  ;
00433C AF          1909*  CREATE:         XOR	A
00433D ED 5B E0 54 1910*                  LD	DE,(FREE)
004341 72          1911*                  LD	(HL),D
004342 2B          1912*                  DEC	HL
004343 73          1913*                  LD	(HL),E
004344 EB          1914*                  EX	DE,HL
004345 77          1915*                  LD	(HL),A
004346 23          1916*                  INC	HL
004347 77          1917*                  LD	(HL),A
004348 23          1918*                  INC	HL
004349 FD 23       1919*  LOC7:           INC	IY
00434B CD EF 43    1920*                  CALL	RANGE		;END OF VARIABLE?
00434E 38 14       1921*                  JR	C,LOC8
004350 77          1922*                  LD	(HL),A
004351 23          1923*                  INC	HL
004352 CD FC 43    1924*                  CALL	RANGE1
004355 30 F2       1925*                  JR	NC,LOC7
004357 FE 28       1926*                  CP	'('
004359 28 09       1927*                  JR	Z,LOC8
00435B FD 7E 01    1928*                  LD	A,(IY+1)
00435E FE 28       1929*                  CP	'('
004360 28 E7       1930*                  JR	Z,LOC7
004362 FD 23       1931*                  INC	IY
004364 36 00       1932*  LOC8:           LD	(HL),0		;TERMINATOR
004366 23          1933*                  INC	HL
004367 E5          1934*                  PUSH	HL
004368 CD 25 43    1935*                  CALL	TYPE
00436B FD 7E 00    1936*                  LD	A,(IY)
00436E FE 28       1937*                  CP	'('
004370 3E 02       1938*                  LD	A,2		;SIZE OF INDIRECT LINK
004372 28 07       1939*                  JR	Z,LOC9
004374 7A          1940*                  LD	A,D
004375 B7          1941*                  OR	A		;STRING?
004376 F2 7B 43    1942*                  JP	P,LOC9
004379 3E 04       1943*                  LD	A,4
00437B 36 00       1944*  LOC9:           LD	(HL),0		;INITIALISE TO ZERO
00437D 23          1945*                  INC	HL
00437E 3D          1946*                  DEC	A
00437F 20 FA       1947*                  JR	NZ,LOC9
004381 22 E0 54    1948*                  LD	(FREE),HL
004384 CD 86 32    1949*                  CALL	CHECK
004387 E1          1950*                  POP	HL
004388 AF          1951*                  XOR	A
004389 C9          1952*                  RET
00438A             1953*  ;
00438A             1954*  ;LINNUM - GET LINE NUMBER FROM TEXT STRING
00438A             1955*  ;   Inputs: IY = Text Pointer
00438A             1956*  ;  Outputs: HL = Line number (zero if none)
00438A             1957*  ;           IY updated
00438A             1958*  ; Destroys: A,D,E,H,L,IY,F
00438A             1959*  ;
00438A CD 0B 45    1960*  LINNUM:         CALL	NXT
00438D 21 00 00    1961*                  LD	HL,0
004390 FD 7E 00    1962*  LINNM1:         LD	A,(IY)
004393 D6 30       1963*                  SUB	'0'
004395 D8          1964*                  RET	C
004396 FE 0A       1965*                  CP	10
004398 D0          1966*                  RET	NC
004399 FD 23       1967*                  INC	IY
00439B 54          1968*                  LD	D,H
00439C 5D          1969*                  LD	E,L
00439D 29          1970*                  ADD	HL,HL		;*2
00439E 38 0F       1971*                  JR	C,TOOBIGmn
0043A0 29          1972*                  ADD	HL,HL		;*4
0043A1 38 0C       1973*                  JR	C,TOOBIGmn
0043A3 19          1974*                  ADD	HL,DE		;*5
0043A4 38 09       1975*                  JR	C,TOOBIGmn
0043A6 29          1976*                  ADD	HL,HL		;*10
0043A7 38 06       1977*                  JR	C,TOOBIGmn
0043A9 5F          1978*                  LD	E,A
0043AA 16 00       1979*                  LD	D,0
0043AC 19          1980*                  ADD	HL,DE		;ADD IN DIGIT
0043AD 30 E1       1981*                  JR	NC,LINNM1
0043AF 3E 14       1982*  TOOBIGmn:         LD	A,20
0043B1 C3 44 3F    1983*                  JP	ERROR_		;"Too big"
0043B4             1984*  ;
0043B4             1985*  ;PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
0043B4             1986*  ;   Inputs: IY = text pointer
0043B4             1987*  ;  Outputs: HL = first number (10 by default)
0043B4             1988*  ;           BC = second number (10 by default)
0043B4             1989*  ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
0043B4             1990*  ;
0043B4 CD 8A 43    1991*  PAIR:           CALL	LINNUM		;FIRST
0043B7 7C          1992*                  LD	A,H
0043B8 B5          1993*                  OR	L
0043B9 20 02       1994*                  JR	NZ,PAIR1
0043BB 2E 0A       1995*                  LD	L,10
0043BD CD 36 35    1996*  PAIR1:          CALL	TERMQ
0043C0 FD 23       1997*                  INC	IY
0043C2 E5          1998*                  PUSH	HL
0043C3 21 0A 00    1999*                  LD	HL,10
0043C6 C4 8A 43    2000*                  CALL	NZ,LINNUM	;SECOND
0043C9 E3          2001*                  EX	(SP),HL
0043CA C1          2002*                  POP	BC
0043CB 78          2003*                  LD	A,B
0043CC B1          2004*                  OR	C
0043CD C0          2005*                  RET	NZ
0043CE CD 55 3F    2006*                  CALL	EXTERR
0043D1 53 69 6C 6C 2007*                  DB	"Silly"
       79          
0043D6 00          2008*                  DB	0
0043D7             2009*  ;
0043D7             2010*  ;DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
0043D7             2011*  ;   Inputs: IY = text pointer
0043D7             2012*  ;  Outputs: HL = points to program text
0043D7             2013*  ;           BC = second number (0 by default)
0043D7             2014*  ; Destroys: A,B,C,D,E,H,L,IY,F
0043D7             2015*  ;
0043D7 CD 8A 43    2016*  DLPAIR:         CALL	LINNUM
0043DA E5          2017*                  PUSH	HL
0043DB CD 36 35    2018*                  CALL	TERMQ
0043DE 28 09       2019*                  JR	Z,DLP1
0043E0 FE E7       2020*                  CP	TIF
0043E2 28 05       2021*                  JR	Z,DLP1
0043E4 FD 23       2022*                  INC	IY
0043E6 CD 8A 43    2023*                  CALL	LINNUM
0043E9 E3          2024*  DLP1:           EX	(SP),HL
0043EA CD 43 41    2025*                  CALL	FINDL
0043ED C1          2026*                  POP	BC
0043EE C9          2027*                  RET
0043EF             2028*  ;
0043EF             2029*  ;TEST FOR VALID CHARACTER IN VARIABLE NAME:
0043EF             2030*  ;   Inputs: IY addresses character
0043EF             2031*  ;  Outputs: Carry set if out-of-range.
0043EF             2032*  ; Destroys: A,F
0043EF             2033*  ;
0043EF FD 7E 00    2034*  RANGE:          LD	A,(IY)
0043F2 FE 24       2035*                  CP	'$'
0043F4 D8          2036*                  RET	C
0043F5 FE 27       2037*                  CP	'&'+1
0043F7 3F          2038*                  CCF
0043F8 D0          2039*                  RET	NC
0043F9 FE 28       2040*                  CP	'('
0043FB C8          2041*                  RET	Z
0043FC FE 30       2042*  RANGE1:         CP	'0'
0043FE D8          2043*                  RET	C
0043FF FE 3A       2044*                  CP	'9'+1
004401 3F          2045*                  CCF
004402 D0          2046*                  RET	NC
004403 FE 40       2047*                  CP	'@'		;V2.4
004405 C8          2048*                  RET	Z
004406 FE 41       2049*  RANGE2:         CP	'A'
004408 D8          2050*                  RET	C
004409 FE 5B       2051*                  CP	'Z'+1
00440B 3F          2052*                  CCF
00440C D0          2053*                  RET	NC
00440D FE 5F       2054*                  CP	'_'
00440F D8          2055*                  RET	C
004410 FE 7B       2056*                  CP	'z'+1
004412 3F          2057*                  CCF
004413 C9          2058*                  RET
004414             2059*  ;
004414             2060*  ;LEXAN - LEXICAL ANALYSIS.
004414             2061*  ;  Bit 0,C: 1=left, 0=right
004414             2062*  ;  Bit 3,C: 1=in HEX
004414             2063*  ;  Bit 4,C: 1=accept line number
004414             2064*  ;  Bit 5,C: 1=in variable, FN, PROC
004414             2065*  ;  Bit 6,C: 1=in REM, DATA, *
004414             2066*  ;  Bit 7,C: 1=in quotes
004414             2067*  ;   Inputs: IY addresses source string
004414             2068*  ;           DE addresses destination string
004414             2069*  ;           (must be page boundary)
004414             2070*  ;           C  sets initial mode
004414             2071*  ;  Outputs: DE, IY updated
004414             2072*  ;           A holds carriage return
004414             2073*  ;
004414 12          2074*  LEXAN1:         LD	(DE),A		;TRANSFER TO BUFFER
004415 13          2075*                  INC	DE		;INCREMENT POINTERS
004416 FD 23       2076*                  INC	IY
004418 7B          2077*  LEXAN2:         LD	A,E		;MAIN ENTRY
004419 FE FC       2078*                  CP	252		;TEST LENGTH
00441B 3E 13       2079*                  LD	A,19
00441D D2 44 3F    2080*                  JP	NC,ERROR_	;'String too long'
004420 FD 7E 00    2081*                  LD	A,(IY)
004423 FE 0D       2082*                  CP	CR
004425 C8          2083*                  RET	Z		;END OF LINE
004426 CD FC 43    2084*                  CALL	RANGE1
004429 30 04       2085*                  JR	NC,LEXAN3
00442B CB A9       2086*                  RES	5,C		;NOT IN VARIABLE
00442D CB 99       2087*                  RES	3,C		;NOT IN HEX
00442F FE 20       2088*  LEXAN3:         CP	' '
004431 28 E1       2089*                  JR	Z,LEXAN1	;PASS SPACES
004433 FE 2C       2090*                  CP	','
004435 28 DD       2091*                  JR	Z,LEXAN1	;PASS COMMAS
004437 FE 47       2092*                  CP	'G'
004439 38 02       2093*                  JR	C,LEXAN4
00443B CB 99       2094*                  RES	3,C		;NOT IN HEX
00443D FE 22       2095*  LEXAN4:         CP	'"'
00443F 20 05       2096*                  JR	NZ,LEXAN5
004441 CB 11       2097*                  RL	C
004443 3F          2098*                  CCF			;TOGGLE C7
004444 CB 19       2099*                  RR	C
004446 CB 61       2100*  LEXAN5:         BIT	4,C
004448 28 10       2101*                  JR	Z,LEXAN6
00444A CB A1       2102*                  RES	4,C
00444C C5          2103*                  PUSH	BC
00444D D5          2104*                  PUSH	DE
00444E CD 8A 43    2105*                  CALL	LINNUM		;GET LINE NUMBER
004451 D1          2106*                  POP	DE
004452 C1          2107*                  POP	BC
004453 7C          2108*                  LD	A,H
004454 B5          2109*                  OR	L
004455 C4 BF 44    2110*                  CALL	NZ,ENCODE	;ENCODE LINE NUMBER
004458 18 BE       2111*                  JR	LEXAN2		;CONTINUE
00445A             2112*  ;
00445A 0D          2113*  LEXAN6:         DEC	C
00445B 28 09       2114*                  JR	Z,LEXAN7	;C=1 (LEFT)
00445D 0C          2115*                  INC	C
00445E 20 B4       2116*                  JR	NZ,LEXAN1
004460 B7          2117*                  OR	A
004461 F4 A3 3F    2118*                  CALL	P,LEX		;TOKENISE IF POSS.
004464 18 12       2119*                  JR	LEXAN8
004466             2120*  ;
004466 FE 2A       2121*  LEXAN7:         CP	'*'
004468 28 16       2122*                  JR	Z,LEXAN9
00446A B7          2123*                  OR	A
00446B F4 A3 3F    2124*                  CALL	P,LEX		;TOKENISE IF POSS.
00446E FE 8F       2125*                  CP	TOKLO
004470 38 06       2126*                  JR	C,LEXAN8
004472 FE 94       2127*                  CP	TOKHI+1
004474 30 02       2128*                  JR	NC,LEXAN8
004476 C6 40       2129*                  ADD	A,OFFSET	;LEFT VERSION
004478 FE F4       2130*  LEXAN8:         CP	TREM
00447A 28 04       2131*                  JR	Z,LEXAN9
00447C FE DC       2132*                  CP	TDATA
00447E 20 02       2133*                  JR	NZ,LEXANA
004480 CB F1       2134*  LEXAN9:         SET	6,C		;QUIT TOKENISING
004482 FE A4       2135*  LEXANA:         CP	TFN
004484 28 09       2136*                  JR	Z,LEXANB
004486 FE F2       2137*                  CP	TPROC
004488 28 05       2138*                  JR	Z,LEXANB
00448A CD 06 44    2139*                  CALL	RANGE2
00448D 38 02       2140*                  JR	C,LEXANC
00448F CB E9       2141*  LEXANB:         SET	5,C		;IN VARIABLE/FN/PROC
004491 FE 26       2142*  LEXANC:         CP	'&'
004493 20 02       2143*                  JR	NZ,LEXAND
004495 CB D9       2144*                  SET	3,C		;IN HEX
004497 21 B6 44    2145*  LEXAND:         LD	HL,LIST1
00449A C5          2146*                  PUSH	BC
00449B 01 06 00    2147*                  LD	BC,LIST1L
00449E ED B1       2148*                  CPIR
0044A0 C1          2149*                  POP	BC
0044A1 20 02       2150*                  JR	NZ,LEXANE
0044A3 CB E1       2151*                  SET	4,C		;ACCEPT LINE NUMBER
0044A5 21 BA 44    2152*  LEXANE:         LD	HL,LIST2
0044A8 C5          2153*                  PUSH	BC
0044A9 01 05 00    2154*                  LD	BC,LIST2L
0044AC ED B1       2155*                  CPIR
0044AE C1          2156*                  POP	BC
0044AF 20 02       2157*                  JR	NZ,LEXANF
0044B1 CB C1       2158*                  SET	0,C		;ENTER LEFT MODE
0044B3 C3 14 44    2159*  LEXANF:         JP	LEXAN1
0044B6             2160*  ;
0044B6 E5          2161*  LIST1:          DB	TGOTO
0044B7 E4          2162*                  DB	TGOSUB
0044B8 F7          2163*                  DB	TRESTORE
0044B9 FC          2164*                  DB	TTRACE
0044BA 8C          2165*  LIST2:          DB	TTHEN
0044BB 8B          2166*                  DB	TELSE
0044BC             2167*  LIST1L:         EQU	$-LIST1
0044BC F5          2168*                  DB	TREPEAT
0044BD 85          2169*                  DB	TERROR
0044BE 3A          2170*                  DB	':'
0044BF             2171*  LIST2L:         EQU	$-LIST2
0044BF             2172*  ;
0044BF             2173*  ;ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
0044BF             2174*  ;   Inputs: HL=line number, DE=string pointer
0044BF             2175*  ;  Outputs: DE updated, BIT 4,C set.
0044BF             2176*  ; Destroys: A,B,C,D,E,H,L,F
0044BF             2177*  ;
0044BF CB E1       2178*  ENCODE:         SET	4,C
0044C1 EB          2179*                  EX	DE,HL
0044C2 36 8D       2180*                  LD	(HL),TLINO
0044C4 23          2181*                  INC	HL
0044C5 7A          2182*                  LD	A,D
0044C6 E6 C0       2183*                  AND	0C0H
0044C8 0F          2184*                  RRCA
0044C9 0F          2185*                  RRCA
0044CA 47          2186*                  LD	B,A
0044CB 7B          2187*                  LD	A,E
0044CC E6 C0       2188*                  AND	0C0H
0044CE B0          2189*                  OR	B
0044CF 0F          2190*                  RRCA
0044D0 0F          2191*                  RRCA
0044D1 EE 54       2192*                  XOR	01010100B
0044D3 77          2193*                  LD	(HL),A
0044D4 23          2194*                  INC	HL
0044D5 7B          2195*                  LD	A,E
0044D6 E6 3F       2196*                  AND	3FH
0044D8 F6 40       2197*                  OR	'@'
0044DA 77          2198*                  LD	(HL),A
0044DB 23          2199*                  INC	HL
0044DC 7A          2200*                  LD	A,D
0044DD E6 3F       2201*                  AND	3FH
0044DF F6 40       2202*                  OR	'@'
0044E1 77          2203*                  LD	(HL),A
0044E2 23          2204*                  INC	HL
0044E3 EB          2205*                  EX	DE,HL
0044E4 C9          2206*                  RET
0044E5             2207*  ;
0044E5             2208*  ;TEXT - OUTPUT MESSAGE.
0044E5             2209*  ;   Inputs: HL addresses text (terminated by nul)
0044E5             2210*  ;  Outputs: HL addresses character following nul.
0044E5             2211*  ; Destroys: A,H,L,F
0044E5             2212*  ;
0044E5 2A EE 54    2213*  REPORT:         LD	HL,(ERRTXT)
0044E8 7E          2214*  TEXT_:          LD	A,(HL)
0044E9 23          2215*                  INC	HL
0044EA B7          2216*                  OR	A
0044EB C8          2217*                  RET	Z
0044EC FE 0A       2218*                  CP	LF
0044EE 28 05       2219*                  JR	Z,TEXTLF	;Token for TINT
0044F0 CD 1B 41    2220*                  CALL	OUT
0044F3 18 F3       2221*                  JR	TEXT_
0044F5             2222*  ;
0044F5 CD 02 41    2223*  TEXTLF:         CALL	OUTCHR
0044F8 18 EE       2224*                  JR	TEXT_
0044FA             2225*  ;
0044FA             2226*  ;TELL - OUTPUT MESSAGE.
0044FA             2227*  ;   Inputs: Text follows subroutine call (term=nul)
0044FA             2228*  ; Destroys: A,F
0044FA             2229*  ;
0044FA E3          2230*  TELL:           EX	(SP),HL		;GET RETURN ADDRESS
0044FB CD E8 44    2231*                  CALL	TEXT_
0044FE E3          2232*                  EX	(SP),HL
0044FF C9          2233*                  RET
004500             2234*  ;
004500             2235*  ; NLIST - Check for end of list
004500             2236*  ;
004500 CD 0B 45    2237*  NLIST:          CALL	NXT
004503 FE 2C       2238*                  CP	','		;ANOTHER VARIABLE?
004505 28 0A       2239*                  JR	Z,NXT1
004507 C1          2240*                  POP	BC		;DITCH RETURN ADDRESS
004508 C3 99 24    2241*                  JP	XEQ
00450B             2242*  ;
00450B FD 7E 00    2243*  NXT:            LD	A,(IY)
00450E FE 20       2244*                  CP	' '
004510 C0          2245*                  RET	NZ
004511 FD 23       2246*  NXT1:           INC	IY
004513 18 F6       2247*                  JR	NXT
004515             2248*  ;
004515             2249*  ;                END	START
004515             2250*  ;    include "main.inc"
004515             0019       include "math.asm"
004515             0001*  ;
004515             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
004515             0003*  ;
004515             0004*                  .ASSUME ADL = 0
004515             0005*  ;	.ORG 0x0000
004515             0006*  ;                SEGMENT CODE
004515             0007*  ;
004515             0008*  ;Z80 FLOATING POINT PACKAGE
004515             0009*  ;(C) COPYRIGHT  R.T.RUSSELL  1986-2024
004515             0010*  ;VERSION 0.0, 26-10-1986
004515             0011*  ;VERSION 0.1, 14-12-1988 (BUG FIX)
004515             0012*  ;VERSION 5.0, 16-06-2024 (SHIFTS ADDED)
004515             0013*  ;
004515             0014*  ;BINARY FLOATING POINT REPRESENTATION:
004515             0015*  ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
004515             0016*  ;    8 BIT EXCESS-128 SIGNED EXPONENT
004515             0017*  ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
004515             0018*  ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
004515             0019*  ;
004515             0020*  ;BINARY INTEGER REPRESENTATION:
004515             0021*  ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
004515             0022*  ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
004515             0023*  ;
004515             0024*  ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
004515             0025*  ;                            EXPONENT - C
004515             0026*  ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
004515             0027*  ;                               EXPONENT - B
004515             0028*  ;
004515             0029*  ;Error codes:
004515             0030*  ;
004515             0031*  BADOP:          EQU	1		;Bad operation code
004515             0032*  DIVBY0:         EQU	18		;Division by zero
004515             0033*  TOOBIG:         EQU	20		;Too big
004515             0034*  NGROOT:         EQU	21		;Negative root
004515             0035*  LOGRNG:         EQU	22		;Log range
004515             0036*  ACLOST:         EQU	23		;Accuracy lost
004515             0037*  EXPRNG:         EQU	24		;Exp range
004515             0038*  ;
004515             0039*  ;                XDEF	FPP
004515             0040*  ;                XREF	STORE5
004515             0041*  ;                XREF	DLOAD5
004515             0042*  ;
004515             0043*  ;Call entry and despatch code:
004515             0044*  ;
004515 FD E5       0045*  FPP:            PUSH	IY		;Save IY
004517 FD 21 00 00 0046*                  LD	IY,0
00451B FD 39       0047*                  ADD	IY,SP		;Save SP in IY
00451D CD 2C 45    0048*                  CALL	OP		;Perform operation
004520 BF          0049*                  CP	A		;Good return (Z, NC)
004521 FD E1       0050*  EXITmat:           POP	IY		;Restore IY
004523 C9          0051*                  RET			;Return to caller
004524             0052*  ;
004524             0053*  ;Error exit:
004524             0054*  ;
004524 3E 01       0055*  BADmat:            LD	A,BADOP		;"Bad operation code"
004526 FD F9       0056*  ERROR_mat:         LD	SP,IY		;Restore SP from IY
004528 B7          0057*                  OR	A		;Set NZ
004529 37          0058*                  SCF			;Set C
00452A 18 F5       0059*                  JR	EXITmat
00452C             0060*  ;
00452C             0061*  ;Perform operation or function:
00452C             0062*  ;
00452C             0063*  ; OP:             CP	(RTABLE-DTABLE)/2
00452C FE 2E       0064*  OP:             CP	RTABLE-DTABLE/2
00452E 30 F4       0065*                  JR	NC,BADmat
004530             0066*                  ; CP	(FTABLE-DTABLE)/2
004530 FE 10       0067*                  CP	FTABLE-DTABLE/2
004532 30 07       0068*                  JR	NC,DISPAT
004534 08          0069*                  EX	AF,AF'
004535 78          0070*                  LD	A,B
004536 B1          0071*                  OR	C		;Both integer?
004537 C4 A5 4E    0072*                  CALL	NZ,FLOATA	;No, so float both
00453A 08          0073*                  EX	AF,AF'
00453B E5          0074*  DISPAT:         PUSH	HL
00453C 21 4C 45    0075*                  LD	HL,DTABLE
00453F C5          0076*                  PUSH	BC
004540 87          0077*                  ADD	A,A		;A = op-code * 2
004541 4F          0078*                  LD	C,A
004542 06 00       0079*                  LD	B,0		;BC = op-code * 2
004544 09          0080*                  ADD	HL,BC
004545 7E          0081*                  LD	A,(HL)		;Get low byte
004546 23          0082*                  INC	HL
004547 66          0083*                  LD	H,(HL)		;Get high byte
004548 6F          0084*                  LD	L,A
004549 C1          0085*                  POP	BC
00454A E3          0086*                  EX	(SP),HL
00454B C9          0087*                  RET			;Off to routine
00454C             0088*  ;
00454C             0089*  ;Despatch table:
00454C             0090*  ;
00454C CB 45       0091*  DTABLE:         DW	IAND		;0  & (INTEGER)
00454E 18 46       0092*                  DW	IBDIV		;1  DIV
004550 DD 45       0093*                  DW	IEOR		;2  EOR
004552 01 46       0094*                  DW	IMOD		;3  MOD
004554 EF 45       0095*                  DW	IOR		;4  |
004556 16 48       0096*                  DW	ILE		;5  <=
004558 23 48       0097*                  DW	INE		;6  <>
00455A 0B 48       0098*                  DW	IGE		;7  >=
00455C F4 47       0099*                  DW	ILT		;8  <
00455E 2E 48       0100*                  DW	IEQ		;9  =
004560 E2 46       0101*                  DW	IMUL		;10 *
004562 3B 46       0102*                  DW	IADD		;11 +
004564 FF 47       0103*                  DW	IGT		;12 >
004566 25 46       0104*                  DW	ISUB		;13 -
004568 5D 47       0105*                  DW	IPOW		;14 ^
00456A 9A 46       0106*                  DW	IDIV		;15 /
00456C             0107*  ;
00456C 7E 48       0108*  FTABLE:         DW	ABS		;16 ABS
00456E DA 4B       0109*                  DW	ACS		;17 ACS
004570 36 4B       0110*                  DW	ASN		;18 ASN
004572 5B 4B       0111*                  DW	ATN		;19 ATN
004574 74 49       0112*                  DW	COS		;20 COS
004576 A8 48       0113*                  DW	DEG		;21 DEG
004578 19 4A       0114*                  DW	EXP		;22 EXP
00457A EE 48       0115*                  DW	INT_		;23 INT_
00457C A4 4A       0116*                  DW	LN		;24 LN
00457E 24 4B       0117*                  DW	LOG		;25 LOG
004580 89 48       0118*                  DW	CPL_		;26 NOT
004582 B0 48       0119*                  DW	RAD		;27 RAD
004584 C6 48       0120*                  DW	SGN		;28 SGN
004586 7F 49       0121*                  DW	SIN		;29 SIN
004588 04 49       0122*                  DW	SQR		;30 SQR
00458A 57 49       0123*                  DW	TAN		;31 TAN
00458C             0124*  ;
00458C 21 4F       0125*                  DW	ZEROmat		;32 ZERO
00458E F8 49       0126*                  DW	FONE		;33 FONE
004590 32 48       0127*                  DW	TRUE		;34 TRUE
004592 9C 48       0128*                  DW	PI		;35 PI
004594             0129*  ;
004594 D6 48       0130*                  DW	VAL		;36 VAL
004596 E2 4B       0131*                  DW	STRmat		;37 STR$
004598             0132*  ;
004598 F7 4D       0133*                  DW	SFIXmat		;38 FIX
00459A B2 4E       0134*                  DW	SFLOAT		;39 FLOAT
00459C             0135*  ;
00459C F7 4E       0136*                  DW	FTEST		;40 TEST
00459E 08 4F       0137*                  DW	FCOMP		;41 COMPARE
0045A0             0138*  ;
0045A0 3D 48       0139*                  DW	ISHL		;42 <<
0045A2 3D 48       0140*                  DW	ISHX		;43 <<<
0045A4 4A 48       0141*                  DW	ISAR		;44 >>
0045A6 5C 48       0142*                  DW	ISHR		;45 >>>
0045A8             0143*  ;
0045A8 C8 45       0144*  RTABLE:         DW	FAND		;& (FLOATING-POINT)
0045AA 15 46       0145*                  DW	FBDIV		;DIV
0045AC DA 45       0146*                  DW	FEOR		;EOR
0045AE FE 45       0147*                  DW	FMOD		;MOD
0045B0 EC 45       0148*                  DW	FOR		;|
0045B2 11 48       0149*                  DW	FLE		;<=
0045B4 1E 48       0150*                  DW	FNE		;<>
0045B6 06 48       0151*                  DW	FGE		;>=
0045B8 EF 47       0152*                  DW	FLT		;<
0045BA 29 48       0153*                  DW	FEQ		;=
0045BC 0D 47       0154*                  DW	FMUL		;*
0045BE 45 46       0155*                  DW	FADD		;+
0045C0 FA 47       0156*                  DW	FGT		;>
0045C2 2F 46       0157*                  DW	FSUB		;-
0045C4 C5 47       0158*                  DW	FPOW		;^
0045C6 9D 46       0159*                  DW	FDIV		;/
0045C8             0160*  ;
0045C8             0161*  ;ARITHMETIC AND LOGICAL OPERATORS:
0045C8             0162*  ;All take two arguments, in HLH'L'C & DED'E'B.
0045C8             0163*  ;Output in HLH'L'C
0045C8             0164*  ;All registers except IX, IY destroyed.
0045C8             0165*  ; (N.B. FPOW destroys IX).
0045C8             0166*  ;
0045C8             0167*  ;FAND - Floating-point AND.
0045C8             0168*  ;IAND - Integer AND.
0045C8             0169*  ;
0045C8 CD EE 4D    0170*  FAND:           CALL	FIX2
0045CB 7C          0171*  IAND:           LD	A,H
0045CC A2          0172*                  AND	D
0045CD 67          0173*                  LD	H,A
0045CE 7D          0174*                  LD	A,L
0045CF A3          0175*                  AND	E
0045D0 6F          0176*                  LD	L,A
0045D1 D9          0177*                  EXX
0045D2 7C          0178*                  LD	A,H
0045D3 A2          0179*                  AND	D
0045D4 67          0180*                  LD	H,A
0045D5 7D          0181*                  LD	A,L
0045D6 A3          0182*                  AND	E
0045D7 6F          0183*                  LD	L,A
0045D8 D9          0184*                  EXX
0045D9 C9          0185*                  RET
0045DA             0186*  ;
0045DA             0187*  ;FEOR - Floating-point exclusive-OR.
0045DA             0188*  ;IEOR - Integer exclusive-OR.
0045DA             0189*  ;
0045DA CD EE 4D    0190*  FEOR:           CALL	FIX2
0045DD 7C          0191*  IEOR:           LD	A,H
0045DE AA          0192*                  XOR	D
0045DF 67          0193*                  LD	H,A
0045E0 7D          0194*                  LD	A,L
0045E1 AB          0195*                  XOR	E
0045E2 6F          0196*                  LD	L,A
0045E3 D9          0197*                  EXX
0045E4 7C          0198*                  LD	A,H
0045E5 AA          0199*                  XOR	D
0045E6 67          0200*                  LD	H,A
0045E7 7D          0201*                  LD	A,L
0045E8 AB          0202*                  XOR	E
0045E9 6F          0203*                  LD	L,A
0045EA D9          0204*                  EXX
0045EB C9          0205*                  RET
0045EC             0206*  ;
0045EC             0207*  ;FOR - Floating-point OR.
0045EC             0208*  ;IOR - Integer OR.
0045EC             0209*  ;
0045EC CD EE 4D    0210*  FOR:            CALL	FIX2
0045EF 7C          0211*  IOR:            LD	A,H
0045F0 B2          0212*                  OR	D
0045F1 67          0213*                  LD	H,A
0045F2 7D          0214*                  LD	A,L
0045F3 B3          0215*                  OR	E
0045F4 6F          0216*                  LD	L,A
0045F5 D9          0217*                  EXX
0045F6 7C          0218*                  LD	A,H
0045F7 B2          0219*                  OR	D
0045F8 67          0220*                  LD	H,A
0045F9 7D          0221*                  LD	A,L
0045FA B3          0222*                  OR	E
0045FB 6F          0223*                  LD	L,A
0045FC D9          0224*                  EXX
0045FD C9          0225*                  RET
0045FE             0226*  ;
0045FE             0227*  ;FMOD - Floating-point remainder.
0045FE             0228*  ;IMOD - Integer remainder.
0045FE             0229*  ;
0045FE CD EE 4D    0230*  FMOD:           CALL	FIX2
004601 7C          0231*  IMOD:           LD	A,H
004602 AA          0232*                  XOR	D		;DIV RESULT SIGN
004603 CB 7C       0233*                  BIT	7,H
004605 CD F5 50    0234*                  CALL	ABS2		;MAKE BOTH POSITIVE
004608 3E DF       0235*                  LD	A,-33
00460A CD 31 50    0236*                  CALL	DIVA		;DIVIDE
00460D D9          0237*                  EXX
00460E 0E 00       0238*                  LD	C,0		;INTEGER MARKER
004610 08          0239*                  EX	AF,AF'
004611 C8          0240*                  RET	Z
004612 C3 06 4E    0241*                  JP	NEGATE
004615             0242*  ;
004615             0243*  ;BDIV - Integer division.
004615             0244*  ;
004615 CD EE 4D    0245*  FBDIV:          CALL	FIX2
004618 CD 01 46    0246*  IBDIV:          CALL	IMOD
00461B B7          0247*                  OR	A
00461C CD DC 4E    0248*                  CALL	SWAP
00461F 0E 00       0249*                  LD	C,0
004621 F0          0250*                  RET	P
004622 C3 06 4E    0251*                  JP	NEGATE
004625             0252*  ;
004625             0253*  ;ISUB - Integer subtraction.
004625             0254*  ;FSUB - Floating point subtraction with rounding.
004625             0255*  ;
004625 CD 64 4F    0256*  ISUB:           CALL	SUB
004628 E0          0257*                  RET	PO
004629 CD 5E 4F    0258*                  CALL	ADD
00462C CD A9 4E    0259*                  CALL	FLOAT2
00462F 7A          0260*  FSUB:           LD	A,D
004630 EE 80       0261*                  XOR	80H		;CHANGE SIGN THEN ADD
004632 57          0262*                  LD	D,A
004633 18 10       0263*                  JR	FADD
004635             0264*  ;
004635             0265*  ;Reverse subtract.
004635             0266*  ;
004635 7C          0267*  RSUB:           LD	A,H
004636 EE 80       0268*                  XOR	80H
004638 67          0269*                  LD	H,A
004639 18 0A       0270*                  JR	FADD
00463B             0271*  ;
00463B             0272*  ;IADD - Integer addition.
00463B             0273*  ;FADD - Floating point addition with rounding.
00463B             0274*  ;
00463B CD 5E 4F    0275*  IADD:           CALL	ADD
00463E E0          0276*                  RET	PO
00463F CD 64 4F    0277*                  CALL	SUB
004642 CD A9 4E    0278*                  CALL	FLOAT2
004645 05          0279*  FADD:           DEC	B
004646 04          0280*                  INC	B
004647 C8          0281*                  RET	Z		;ARG 2 ZERO
004648 0D          0282*                  DEC	C
004649 0C          0283*                  INC	C
00464A CA DC 4E    0284*                  JP	Z,SWAP		;ARG 1 ZERO
00464D D9          0285*                  EXX
00464E 01 00 00    0286*                  LD	BC,0		;INITIALISE
004651 D9          0287*                  EXX
004652 7C          0288*                  LD	A,H
004653 AA          0289*                  XOR	D		;XOR SIGNS
004654 F5          0290*                  PUSH	AF
004655 78          0291*                  LD	A,B
004656 B9          0292*                  CP	C		;COMPARE EXPONENTS
004657 DC DC 4E    0293*                  CALL	C,SWAP		;MAKE DED'E'B LARGEST
00465A 78          0294*                  LD	A,B
00465B CB FC       0295*                  SET	7,H		;IMPLIED 1
00465D C4 DE 4D    0296*                  CALL	NZ,FIX		;ALIGN
004660 F1          0297*                  POP	AF
004661 7A          0298*                  LD	A,D		;SIGN OF LARGER
004662 CB FA       0299*                  SET	7,D		;IMPLIED 1
004664 FA 71 46    0300*                  JP	M,FADD3		;SIGNS DIFFERENT
004667 CD 5E 4F    0301*                  CALL	ADD		;HLH'L'=HLH'L'+DED'E'
00466A DC E4 4E    0302*                  CALL	C,DIV2		;NORMALISE
00466D CB FC       0303*                  SET	7,H
00466F 18 0A       0304*                  JR	FADD4
004671             0305*  ;
004671 CD 64 4F    0306*  FADD3:          CALL	SUB		;HLH'L'=HLH'L'-DED'E'
004674 DC 1A 4E    0307*                  CALL	C,NEG		;NEGATE HLH'L'B'C'
004677 CD 86 4E    0308*                  CALL	FLO48
00467A 2F          0309*                  CPL			;CHANGE RESULT SIGN
00467B D9          0310*  FADD4:          EXX
00467C EB          0311*                  EX	DE,HL
00467D 21 00 80    0312*                  LD	HL,8000H
004680 B7          0313*                  OR	A		;CLEAR CARRY
004681 ED 42       0314*                  SBC	HL,BC
004683 EB          0315*                  EX	DE,HL
004684 D9          0316*                  EXX
004685 CC D6 4E    0317*                  CALL	Z,ODD		;ROUND UNBIASSED
004688 DC C8 4E    0318*                  CALL	C,ADD1		;ROUND UP
00468B DC F0 4E    0319*                  CALL	C,INCC
00468E CB BC       0320*                  RES	7,H
004690 0D          0321*                  DEC	C
004691 0C          0322*                  INC	C
004692 CA 21 4F    0323*                  JP	Z,ZEROmat
004695 B7          0324*                  OR	A		;RESULT SIGNQ
004696 F0          0325*                  RET	P		;POSITIVE
004697 CB FC       0326*                  SET	7,H		;NEGATIVE
004699 C9          0327*                  RET
00469A             0328*  ;
00469A             0329*  ;IDIV - Integer division.
00469A             0330*  ;FDIV - Floating point division with rounding.
00469A             0331*  ;
00469A CD A9 4E    0332*  IDIV:           CALL	FLOAT2
00469D 05          0333*  FDIV:           DEC	B		;TEST FOR ZERO
00469E 04          0334*                  INC	B
00469F 3E 12       0335*                  LD	A,DIVBY0
0046A1 CA 26 45    0336*                  JP	Z,ERROR_mat		;"Division by zero"
0046A4 0D          0337*                  DEC	C		;TEST FOR ZERO
0046A5 0C          0338*                  INC	C
0046A6 C8          0339*                  RET	Z
0046A7 7C          0340*                  LD	A,H
0046A8 AA          0341*                  XOR	D		;CALC. RESULT SIGN
0046A9 08          0342*                  EX	AF,AF'		;SAVE SIGN
0046AA CB FA       0343*                  SET	7,D		;REPLACE IMPLIED 1's
0046AC CB FC       0344*                  SET	7,H
0046AE C5          0345*                  PUSH	BC		;SAVE EXPONENTS
0046AF 42          0346*                  LD	B,D		;LOAD REGISTERS
0046B0 4B          0347*                  LD	C,E
0046B1 11 00 00    0348*                  LD	DE,0
0046B4 D9          0349*                  EXX
0046B5 42          0350*                  LD	B,D
0046B6 4B          0351*                  LD	C,E
0046B7 11 00 00    0352*                  LD	DE,0
0046BA 3E E0       0353*                  LD	A,-32		;LOOP COUNTER
0046BC CD 31 50    0354*                  CALL	DIVA		;DIVIDE
0046BF D9          0355*                  EXX
0046C0 CB 7A       0356*                  BIT	7,D
0046C2 D9          0357*                  EXX
0046C3 CC 4C 50    0358*                  CALL	Z,DIVB		;NORMALISE & INC A
0046C6 EB          0359*                  EX	DE,HL
0046C7 D9          0360*                  EXX
0046C8 CB 38       0361*                  SRL	B		;DIVISOR/2
0046CA CB 19       0362*                  RR	C
0046CC B7          0363*                  OR	A		;CLEAR CARRY
0046CD ED 42       0364*                  SBC	HL,BC		;REMAINDER-DIVISOR/2
0046CF 3F          0365*                  CCF
0046D0 EB          0366*                  EX	DE,HL		;RESULT IN HLH'L'
0046D1 CC D6 4E    0367*                  CALL	Z,ODD		;ROUND UNBIASSED
0046D4 DC C8 4E    0368*                  CALL	C,ADD1		;ROUND UP
0046D7 C1          0369*                  POP	BC		;RESTORE EXPONENTS
0046D8 DC F0 4E    0370*                  CALL	C,INCC
0046DB 1F          0371*                  RRA			;LSB OF A TO CARRY
0046DC 79          0372*                  LD	A,C		;COMPUTE NEW EXPONENT
0046DD 98          0373*                  SBC	A,B
0046DE 3F          0374*                  CCF
0046DF C3 46 47    0375*                  JP	CHKOVF
0046E2             0376*  ;
0046E2             0377*  ;IMUL - Integer multiplication.
0046E2             0378*  ;
0046E2 7C          0379*  IMUL:           LD	A,H
0046E3 AA          0380*                  XOR	D
0046E4 CD F5 50    0381*                  CALL	ABS2		;MAKE BOTH POSITIVE
0046E7 3E DF       0382*                  LD	A,-33
0046E9 CD 5F 50    0383*                  CALL	MULA		;MULTIPLY
0046EC D9          0384*                  EXX
0046ED 0E BF       0385*                  LD	C,191		;PRESET EXPONENT
0046EF CD 01 4F    0386*                  CALL	TESTmat		;TEST RANGE
0046F2 20 0D       0387*                  JR	NZ,IMUL1	;TOO BIG
0046F4 CB 7A       0388*                  BIT	7,D
0046F6 20 09       0389*                  JR	NZ,IMUL1
0046F8 CD DC 4E    0390*                  CALL	SWAP
0046FB 4A          0391*                  LD	C,D		;INTEGER MARKER
0046FC 08          0392*                  EX	AF,AF'
0046FD F0          0393*                  RET	P
0046FE C3 06 4E    0394*                  JP	NEGATE
004701             0395*  ;
004701 0D          0396*  IMUL1:          DEC	C
004702 CD C8 50    0397*                  CALL	SLA8
004705 F2 01 47    0398*                  JP	P,IMUL1		;NORMALISE
004708 08          0399*                  EX	AF,AF'
004709 F8          0400*                  RET	M
00470A CB BC       0401*                  RES	7,H		;POSITIVE
00470C C9          0402*                  RET
00470D             0403*  ;
00470D             0404*  ;FMUL - Floating point multiplication with rounding.
00470D             0405*  ;
00470D 05          0406*  FMUL:           DEC	B		;TEST FOR ZERO
00470E 04          0407*                  INC	B
00470F CA 21 4F    0408*                  JP	Z,ZEROmat
004712 0D          0409*                  DEC	C		;TEST FOR ZERO
004713 0C          0410*                  INC	C
004714 C8          0411*                  RET	Z
004715 7C          0412*                  LD	A,H
004716 AA          0413*                  XOR	D		;CALC. RESULT SIGN
004717 08          0414*                  EX	AF,AF'
004718 CB FA       0415*                  SET	7,D		;REPLACE IMPLIED 1's
00471A CB FC       0416*                  SET	7,H
00471C C5          0417*                  PUSH	BC		;SAVE EXPONENTS
00471D 44          0418*                  LD	B,H		;LOAD REGISTERS
00471E 4D          0419*                  LD	C,L
00471F 21 00 00    0420*                  LD	HL,0
004722 D9          0421*                  EXX
004723 44          0422*                  LD	B,H
004724 4D          0423*                  LD	C,L
004725 21 00 00    0424*                  LD	HL,0
004728 3E E0       0425*                  LD	A,-32		;LOOP COUNTER
00472A CD 5F 50    0426*                  CALL	MULA		;MULTIPLY
00472D DC 73 50    0427*                  CALL	C,MULB		;NORMALISE & INC A
004730 D9          0428*                  EXX
004731 E5          0429*                  PUSH	HL
004732 21 00 80    0430*                  LD	HL,8000H
004735 B7          0431*                  OR	A		;CLEAR CARRY
004736 ED 52       0432*                  SBC	HL,DE
004738 E1          0433*                  POP	HL
004739 CC D6 4E    0434*                  CALL	Z,ODD		;ROUND UNBIASSED
00473C DC C8 4E    0435*                  CALL	C,ADD1		;ROUND UP
00473F C1          0436*                  POP	BC		;RESTORE EXPONENTS
004740 DC F0 4E    0437*                  CALL	C,INCC
004743 1F          0438*                  RRA			;LSB OF A TO CARRY
004744 79          0439*                  LD	A,C		;COMPUTE NEW EXPONENT
004745 88          0440*                  ADC	A,B
004746 38 05       0441*  CHKOVF:         JR	C,CHKO1
004748 F2 21 4F    0442*                  JP	P,ZEROmat		;UNDERFLOW
00474B 18 03       0443*                  JR	CHKO2
00474D FA F2 4E    0444*  CHKO1:          JP	M,OFLOW		;OVERFLOW
004750 C6 80       0445*  CHKO2:          ADD	A,80H
004752 4F          0446*                  LD	C,A
004753 CA 21 4F    0447*                  JP	Z,ZEROmat
004756 08          0448*                  EX	AF,AF'		;RESTORE SIGN BIT
004757 CB BC       0449*                  RES	7,H
004759 F0          0450*                  RET	P
00475A CB FC       0451*                  SET	7,H
00475C C9          0452*                  RET
00475D             0453*  ;
00475D             0454*  ;IPOW - Integer involution.
00475D             0455*  ;
00475D CD DC 4E    0456*  IPOW:           CALL	SWAP
004760 CB 7C       0457*                  BIT	7,H
004762 F5          0458*                  PUSH	AF		;SAVE SIGN
004763 C4 06 4E    0459*                  CALL	NZ,NEGATE
004766 48          0460*  IPOW0:          LD	C,B
004767 06 20       0461*                  LD	B,32		;LOOP COUNTER
004769 CD 7B 4F    0462*  IPOW1:          CALL	X2
00476C 38 08       0463*                  JR	C,IPOW2
00476E 10 F9       0464*                  DJNZ	IPOW1
004770 F1          0465*                  POP	AF
004771 D9          0466*                  EXX
004772 2C          0467*                  INC	L		;RESULT=1
004773 D9          0468*                  EXX
004774 4C          0469*                  LD	C,H
004775 C9          0470*                  RET
004776             0471*  ;
004776 F1          0472*  IPOW2:          POP	AF
004777 C5          0473*                  PUSH	BC
004778 EB          0474*                  EX	DE,HL
004779 E5          0475*                  PUSH	HL
00477A D9          0476*                  EXX
00477B EB          0477*                  EX	DE,HL
00477C E5          0478*                  PUSH	HL
00477D D9          0479*                  EXX
00477E DD 21 00 00 0480*                  LD	IX,0
004782 DD 39       0481*                  ADD	IX,SP
004784 28 34       0482*                  JR	Z,IPOW4
004786 C5          0483*                  PUSH	BC
004787 D9          0484*                  EXX
004788 D5          0485*                  PUSH	DE
004789 D9          0486*                  EXX
00478A D5          0487*                  PUSH	DE
00478B CD B2 4E    0488*                  CALL	SFLOAT
00478E CD 90 4A    0489*                  CALL	RECIP
004791 CD 06 32    0490*                  CALL	STORE5
004794 18 1D       0491*                  JR	IPOW5
004796             0492*  ;
004796 C5          0493*  IPOW3:          PUSH	BC
004797 D9          0494*                  EXX
004798 CB 23       0495*                  SLA	E
00479A CB 12       0496*                  RL	D
00479C D5          0497*                  PUSH	DE
00479D D9          0498*                  EXX
00479E CB 13       0499*                  RL	E
0047A0 CB 12       0500*                  RL	D
0047A2 D5          0501*                  PUSH	DE
0047A3 3E 0A       0502*                  LD	A,'*' & 0FH
0047A5 F5          0503*                  PUSH	AF
0047A6 CD 8D 4F    0504*                  CALL	COPY
0047A9 CD 2C 45    0505*                  CALL	OP		;SQUARE
0047AC F1          0506*                  POP	AF
0047AD CD F1 19    0507*                  CALL	DLOAD5
0047B0 DC 2C 45    0508*                  CALL	C,OP		;MULTIPLY BY X
0047B3 D1          0509*  IPOW5:          POP	DE
0047B4 D9          0510*                  EXX
0047B5 D1          0511*                  POP	DE
0047B6 D9          0512*                  EXX
0047B7 79          0513*                  LD	A,C
0047B8 C1          0514*                  POP	BC
0047B9 4F          0515*                  LD	C,A
0047BA 10 DA       0516*  IPOW4:          DJNZ	IPOW3
0047BC F1          0517*                  POP	AF
0047BD F1          0518*                  POP	AF
0047BE F1          0519*                  POP	AF
0047BF C9          0520*                  RET
0047C0             0521*  ;
0047C0 F1          0522*  FPOW0:          POP	AF
0047C1 F1          0523*                  POP	AF
0047C2 F1          0524*                  POP	AF
0047C3 18 A1       0525*                  JR	IPOW0
0047C5             0526*  ;
0047C5             0527*  ;FPOW - Floating-point involution.
0047C5             0528*  ;
0047C5 CB 7A       0529*  FPOW:           BIT	7,D
0047C7 F5          0530*                  PUSH	AF
0047C8 CD DC 4E    0531*                  CALL	SWAP
0047CB CD 9B 4F    0532*                  CALL	PUSH5
0047CE 0D          0533*                  DEC	C
0047CF 0C          0534*                  INC	C
0047D0 28 EE       0535*                  JR	Z,FPOW0
0047D2 3E 9E       0536*                  LD	A,158
0047D4 B9          0537*                  CP	C
0047D5 38 08       0538*                  JR	C,FPOW1
0047D7 3C          0539*                  INC	A
0047D8 CD DE 4D    0540*                  CALL	FIX
0047DB 08          0541*                  EX	AF,AF'
0047DC F2 C0 47    0542*                  JP	P,FPOW0
0047DF CD DC 4E    0543*  FPOW1:          CALL	SWAP
0047E2 CD A7 4A    0544*                  CALL	LN0
0047E5 CD A4 4F    0545*                  CALL	POP5
0047E8 F1          0546*                  POP	AF
0047E9 CD 0D 47    0547*                  CALL	FMUL
0047EC C3 1C 4A    0548*                  JP	EXP0
0047EF             0549*  ;
0047EF             0550*  ;Integer and floating-point compare.
0047EF             0551*  ;Result is TRUE (-1) or FALSE (0).
0047EF             0552*  ;
0047EF CD 2B 4F    0553*  FLT:            CALL	FCP
0047F2 18 03       0554*                  JR	ILT1
0047F4 CD 1E 4F    0555*  ILT:            CALL	ICP
0047F7 D0          0556*  ILT1:           RET	NC
0047F8 18 38       0557*                  JR	TRUE
0047FA             0558*  ;
0047FA CD 2B 4F    0559*  FGT:            CALL	FCP
0047FD 18 03       0560*                  JR	IGT1
0047FF CD 1E 4F    0561*  IGT:            CALL	ICP
004802 C8          0562*  IGT1:           RET	Z
004803 D8          0563*                  RET	C
004804 18 2C       0564*                  JR	TRUE
004806             0565*  ;
004806 CD 2B 4F    0566*  FGE:            CALL	FCP
004809 18 03       0567*                  JR	IGE1
00480B CD 1E 4F    0568*  IGE:            CALL	ICP
00480E D8          0569*  IGE1:           RET	C
00480F 18 21       0570*                  JR	TRUE
004811             0571*  ;
004811 CD 2B 4F    0572*  FLE:            CALL	FCP
004814 18 03       0573*                  JR	ILE1
004816 CD 1E 4F    0574*  ILE:            CALL	ICP
004819 28 17       0575*  ILE1:           JR	Z,TRUE
00481B D0          0576*                  RET	NC
00481C 18 14       0577*                  JR	TRUE
00481E             0578*  ;
00481E CD 2B 4F    0579*  FNE:            CALL	FCP
004821 18 03       0580*                  JR	INE1
004823 CD 1E 4F    0581*  INE:            CALL	ICP
004826 C8          0582*  INE1:           RET	Z
004827 18 09       0583*                  JR	TRUE
004829             0584*  ;
004829 CD 2B 4F    0585*  FEQ:            CALL	FCP
00482C 18 03       0586*                  JR	IEQ1
00482E CD 1E 4F    0587*  IEQ:            CALL	ICP
004831 C0          0588*  IEQ1:           RET	NZ
004832 21 FF FF    0589*  TRUE:           LD	HL,-1
004835 D9          0590*                  EXX
004836 21 FF FF    0591*                  LD	HL,-1
004839 D9          0592*                  EXX
00483A AF          0593*                  XOR	A
00483B 4F          0594*                  LD	C,A
00483C C9          0595*                  RET
00483D             0596*  ;
00483D             0597*  ;Integer shifts:
00483D             0598*  ;
00483D             0599*  ISHX:
00483D CD 6E 48    0600*  ISHL:           CALL	SHIFTS
004840 28 07       0601*                  JR	Z,SHRET
004842 D9          0602*  ISHL1:          EXX
004843 29          0603*                  ADD	HL,HL
004844 D9          0604*                  EXX
004845 ED 6A       0605*                  ADC	HL,HL
004847 10 F9       0606*                  DJNZ	ISHL1
004849 C9          0607*  SHRET:          RET
00484A             0608*  ;
00484A CD 6E 48    0609*  ISAR:           CALL	SHIFTS
00484D 28 FA       0610*                  JR	Z,SHRET
00484F CB 2C       0611*  ISAR1:          SRA	H
004851 CB 1D       0612*                  RR	L
004853 D9          0613*                  EXX
004854 CB 1C       0614*                  RR	H
004856 CB 1D       0615*                  RR	L
004858 D9          0616*                  EXX
004859 10 F4       0617*                  DJNZ	ISAR1
00485B C9          0618*                  RET
00485C             0619*  ;
00485C CD 6E 48    0620*  ISHR:           CALL	SHIFTS
00485F 28 E8       0621*                  JR	Z,SHRET
004861 CB 3C       0622*  ISHR1:          SRL	H
004863 CB 1D       0623*                  RR	L
004865 D9          0624*                  EXX
004866 CB 1C       0625*                  RR	H
004868 CB 1D       0626*                  RR	L
00486A D9          0627*                  EXX
00486B 10 F4       0628*                  DJNZ	ISHR1
00486D C9          0629*                  RET
00486E             0630*  ;
00486E CD EE 4D    0631*  SHIFTS:         CALL	FIX2
004871 7A          0632*                  LD	A,D
004872 B3          0633*                  OR	E
004873 D9          0634*                  EXX
004874 B2          0635*                  OR	D
004875 7B          0636*                  LD	A,E
004876 D9          0637*                  EXX
004877 06 20       0638*                  LD	B,32
004879 20 02       0639*                  JR	NZ,SHMAX
00487B 47          0640*                  LD	B,A
00487C B7          0641*                  OR	A
00487D C9          0642*  SHMAX:          RET
00487E             0643*  ;
00487E             0644*  ;FUNCTIONS:
00487E             0645*  ;
00487E             0646*  ;Result returned in HLH'L'C (floating point)
00487E             0647*  ;Result returned in HLH'L' (C=0) (integer)
00487E             0648*  ;All registers except IY destroyed.
00487E             0649*  ;
00487E             0650*  ;ABS - Absolute value
00487E             0651*  ;Result is numeric, variable type.
00487E             0652*  ;
00487E CB 7C       0653*  ABS:            BIT	7,H
004880 C8          0654*                  RET	Z		;POSITIVE/ZERO
004881 0D          0655*                  DEC	C
004882 0C          0656*                  INC	C
004883 CA 06 4E    0657*                  JP	Z,NEGATE	;INTEGER
004886 CB BC       0658*                  RES	7,H
004888 C9          0659*                  RET
004889             0660*  ;
004889             0661*  ;NOT - Complement integer.
004889             0662*  ;Result is integer numeric.
004889             0663*  ;
004889 CD F7 4D    0664*  CPL_:           CALL	SFIXmat
00488C 7C          0665*                  LD	A,H
00488D 2F          0666*                  CPL
00488E 67          0667*                  LD	H,A
00488F 7D          0668*                  LD	A,L
004890 2F          0669*                  CPL
004891 6F          0670*                  LD	L,A
004892 D9          0671*                  EXX
004893 7C          0672*                  LD	A,H
004894 2F          0673*                  CPL
004895 67          0674*                  LD	H,A
004896 7D          0675*                  LD	A,L
004897 2F          0676*                  CPL
004898 6F          0677*                  LD	L,A
004899 D9          0678*                  EXX
00489A AF          0679*                  XOR	A		;NUMERIC MARKER
00489B C9          0680*                  RET
00489C             0681*  ;
00489C             0682*  ;PI - Return PI (3.141592654)
00489C             0683*  ;Result is floating-point numeric.
00489C             0684*  ;
00489C 21 0F 49    0685*  PI:             LD	HL,490FH
00489F D9          0686*                  EXX
0048A0 21 A2 DA    0687*                  LD	HL,0DAA2H
0048A3 D9          0688*                  EXX
0048A4 0E 81       0689*                  LD	C,81H
0048A6 AF          0690*                  XOR	A		;NUMERIC MARKER
0048A7 C9          0691*                  RET
0048A8             0692*  ;
0048A8             0693*  ;DEG - Convert radians to degrees
0048A8             0694*  ;Result is floating-point numeric.
0048A8             0695*  ;
0048A8 CD B8 48    0696*  DEG:            CALL	FPI180
0048AB CD 0D 47    0697*                  CALL	FMUL
0048AE AF          0698*                  XOR	A
0048AF C9          0699*                  RET
0048B0             0700*  ;
0048B0             0701*  ;RAD - Convert degrees to radians
0048B0             0702*  ;Result is floating-point numeric.
0048B0             0703*  ;
0048B0 CD B8 48    0704*  RAD:            CALL	FPI180
0048B3 CD 9D 46    0705*                  CALL	FDIV
0048B6 AF          0706*                  XOR	A
0048B7 C9          0707*                  RET
0048B8             0708*  ;
0048B8             0709*  ;180/PI
0048B8             0710*  ;
0048B8 CD B2 4E    0711*  FPI180:         CALL	SFLOAT
0048BB 11 2E 65    0712*                  LD	DE,652EH
0048BE D9          0713*                  EXX
0048BF 11 D3 E0    0714*                  LD	DE,0E0D3H
0048C2 D9          0715*                  EXX
0048C3 06 85       0716*                  LD	B,85H
0048C5 C9          0717*                  RET
0048C6             0718*  ;
0048C6             0719*  ;SGN - Return -1, 0 or +1
0048C6             0720*  ;Result is integer numeric.
0048C6             0721*  ;
0048C6 CD 01 4F    0722*  SGN:            CALL	TESTmat
0048C9 B1          0723*                  OR	C
0048CA C8          0724*                  RET	Z		;ZERO
0048CB CB 7C       0725*                  BIT	7,H
0048CD C2 32 48    0726*                  JP	NZ,TRUE		;-1
0048D0 CD 21 4F    0727*                  CALL	ZEROmat
0048D3 C3 C8 4E    0728*                  JP	ADD1		;1
0048D6             0729*  ;
0048D6             0730*  ;VAL - Return numeric value of string.
0048D6             0731*  ;Input: ASCII string at IX
0048D6             0732*  ;Result is variable type numeric.
0048D6             0733*  ;
0048D6 CD E3 50    0734*  VAL:            CALL	SIGNQ
0048D9 F5          0735*                  PUSH	AF
0048DA CD 34 4D    0736*                  CALL	CON
0048DD F1          0737*                  POP	AF
0048DE FE 2D       0738*                  CP	'-'
0048E0 3E 00       0739*                  LD	A,0		;NUMERIC MARKER
0048E2 C0          0740*                  RET	NZ
0048E3 0D          0741*                  DEC	C
0048E4 0C          0742*                  INC	C
0048E5 CA 06 4E    0743*                  JP	Z,NEGATE	;ZERO/INTEGER
0048E8 7C          0744*                  LD	A,H
0048E9 EE 80       0745*                  XOR	80H		;CHANGE SIGN (FP)
0048EB 67          0746*                  LD	H,A
0048EC AF          0747*                  XOR	A
0048ED C9          0748*                  RET
0048EE             0749*  ;
0048EE             0750*  ;INT - Floor function
0048EE             0751*  ;Result is integer numeric.
0048EE             0752*  ;
0048EE 0D          0753*  INT_:           DEC	C
0048EF 0C          0754*                  INC	C
0048F0 C8          0755*                  RET	Z		;ZERO/INTEGER
0048F1 3E 9F       0756*                  LD	A,159
0048F3 44          0757*                  LD	B,H		;B7=SIGN BIT
0048F4 CD DE 4D    0758*                  CALL	FIX
0048F7 08          0759*                  EX	AF,AF'
0048F8 A0          0760*                  AND	B
0048F9 FC C8 4E    0761*                  CALL	M,ADD1		;NEGATIVE NON-INTEGER
0048FC 78          0762*                  LD	A,B
0048FD B7          0763*                  OR	A
0048FE FC 06 4E    0764*                  CALL	M,NEGATE
004901 AF          0765*                  XOR	A
004902 4F          0766*                  LD	C,A
004903 C9          0767*                  RET
004904             0768*  ;
004904             0769*  ;SQR - square root
004904             0770*  ;Result is floating-point numeric.
004904             0771*  ;
004904 CD B2 4E    0772*  SQR:            CALL	SFLOAT
004907 CB 7C       0773*  SQR0:           BIT	7,H
004909 3E 15       0774*                  LD	A,NGROOT
00490B C2 26 45    0775*                  JP	NZ,ERROR_mat	;"-ve root"
00490E 0D          0776*                  DEC	C
00490F 0C          0777*                  INC	C
004910 C8          0778*                  RET	Z		;ZERO
004911 CB FC       0779*                  SET	7,H		;IMPLIED 1
004913 CB 41       0780*                  BIT	0,C
004915 CC E4 4E    0781*                  CALL	Z,DIV2		;MAKE EXPONENT ODD
004918 79          0782*                  LD	A,C
004919 D6 80       0783*                  SUB	80H
00491B CB 2F       0784*                  SRA	A		;HALVE EXPONENT
00491D C6 80       0785*                  ADD	A,80H
00491F 4F          0786*                  LD	C,A
004920 C5          0787*                  PUSH	BC		;SAVE EXPONENT
004921 EB          0788*                  EX	DE,HL
004922 21 00 00    0789*                  LD	HL,0
004925 44          0790*                  LD	B,H
004926 4D          0791*                  LD	C,L
004927 D9          0792*                  EXX
004928 EB          0793*                  EX	DE,HL
004929 21 00 00    0794*                  LD	HL,0
00492C 44          0795*                  LD	B,H
00492D 4D          0796*                  LD	C,L
00492E 3E E1       0797*                  LD	A,-31
004930 CD 92 50    0798*                  CALL	SQRA		;ROOT
004933 D9          0799*                  EXX
004934 CB 78       0800*                  BIT	7,B
004936 D9          0801*                  EXX
004937 CC 92 50    0802*                  CALL	Z,SQRA		;NORMALISE & INC A
00493A CD B1 50    0803*                  CALL	SQRB
00493D B7          0804*                  OR	A		;CLEAR CARRY
00493E CD 4C 50    0805*                  CALL	DIVB
004941 CB 1B       0806*                  RR	E		;LSB TO CARRY
004943 60          0807*                  LD	H,B
004944 69          0808*                  LD	L,C
004945 D9          0809*                  EXX
004946 60          0810*                  LD	H,B
004947 69          0811*                  LD	L,C
004948 DC C8 4E    0812*                  CALL	C,ADD1		;ROUND UP
00494B C1          0813*                  POP	BC		;RESTORE EXPONENT
00494C DC F0 4E    0814*                  CALL	C,INCC
00494F 1F          0815*                  RRA
004950 9F          0816*                  SBC	A,A
004951 81          0817*                  ADD	A,C
004952 4F          0818*                  LD	C,A
004953 CB BC       0819*                  RES	7,H		;POSITIVE
004955 AF          0820*                  XOR	A
004956 C9          0821*                  RET
004957             0822*  ;
004957             0823*  ;TAN - Tangent function
004957             0824*  ;Result is floating-point numeric.
004957             0825*  ;
004957 CD B2 4E    0826*  TAN:            CALL	SFLOAT
00495A CD 9B 4F    0827*                  CALL	PUSH5
00495D CD 77 49    0828*                  CALL	COS0
004960 CD A4 4F    0829*                  CALL	POP5
004963 CD 9B 4F    0830*                  CALL	PUSH5
004966 CD DC 4E    0831*                  CALL	SWAP
004969 CD 82 49    0832*                  CALL	SIN0
00496C CD A4 4F    0833*                  CALL	POP5
00496F CD 9D 46    0834*                  CALL	FDIV
004972 AF          0835*                  XOR	A		;NUMERIC MARKER
004973 C9          0836*                  RET
004974             0837*  ;
004974             0838*  ;COS - Cosine function
004974             0839*  ;Result is floating-point numeric.
004974             0840*  ;
004974 CD B2 4E    0841*  COS:            CALL	SFLOAT
004977 CD 27 4E    0842*  COS0:           CALL	SCALE
00497A 1C          0843*                  INC	E
00497B 1C          0844*                  INC	E
00497C 7B          0845*                  LD	A,E
00497D 18 0E       0846*                  JR	SIN1
00497F             0847*  ;
00497F             0848*  ;SIN - Sine function
00497F             0849*  ;Result is floating-point numeric.
00497F             0850*  ;
00497F CD B2 4E    0851*  SIN:            CALL	SFLOAT
004982 E5          0852*  SIN0:           PUSH	HL		;H7=SIGN
004983 CD 27 4E    0853*                  CALL	SCALE
004986 F1          0854*                  POP	AF
004987 07          0855*                  RLCA
004988 07          0856*                  RLCA
004989 07          0857*                  RLCA
00498A E6 04       0858*                  AND	4
00498C AB          0859*                  XOR	E
00498D F5          0860*  SIN1:           PUSH	AF		;OCTANT
00498E CB BC       0861*                  RES	7,H
004990 1F          0862*                  RRA
004991 CD 0E 4A    0863*                  CALL	PIBY4
004994 DC 35 46    0864*                  CALL	C,RSUB		;X=(PI/4)-X
004997 F1          0865*                  POP	AF
004998 F5          0866*                  PUSH	AF
004999 E6 03       0867*                  AND	3
00499B E2 CC 49    0868*                  JP	PO,SIN2		;USE COSINE APPROX.
00499E CD 9B 4F    0869*                  CALL	PUSH5		;SAVE X
0049A1 CD 95 4F    0870*                  CALL	SQUARE		;PUSH X*X
0049A4 CD CE 4F    0871*                  CALL	POLY
0049A7 B7 A8       0872*                  DW	0A8B7H		;a(8)
0049A9 11 36       0873*                  DW	3611H
0049AB 6D          0874*                  DB	6DH
0049AC 26 DE       0875*                  DW	0DE26H		;a(6)
0049AE 05 D0       0876*                  DW	0D005H
0049B0 73          0877*                  DB	73H
0049B1 C0 80       0878*                  DW	80C0H		;a(4)
0049B3 88 08       0879*                  DW	888H
0049B5 79          0880*                  DB	79H
0049B6 9D AA       0881*                  DW	0AA9DH		;a(2)
0049B8 AA AA       0882*                  DW	0AAAAH
0049BA 7D          0883*                  DB	7DH
0049BB 00 00       0884*                  DW	0		;a(0)
0049BD 00 00       0885*                  DW	0
0049BF 80          0886*                  DB	80H
0049C0 CD A4 4F    0887*                  CALL	POP5
0049C3 CD A4 4F    0888*                  CALL	POP5
0049C6 CD 0D 47    0889*                  CALL	FMUL
0049C9 C3 EE 49    0890*                  JP	SIN3
0049CC             0891*  ;
0049CC CD 95 4F    0892*  SIN2:           CALL	SQUARE		;PUSH X*X
0049CF CD CE 4F    0893*                  CALL	POLY
0049D2 71 D5       0894*                  DW	0D571H		;b(8)
0049D4 78 4C       0895*                  DW	4C78H
0049D6 70          0896*                  DB	70H
0049D7 AF 94       0897*                  DW	94AFH		;b(6)
0049D9 03 B6       0898*                  DW	0B603H
0049DB 76          0899*                  DB	76H
0049DC C8 9C       0900*                  DW	9CC8H		;b(4)
0049DE AA 2A       0901*                  DW	2AAAH
0049E0 7B          0902*                  DB	7BH
0049E1 DD FF       0903*                  DW	0FFDDH		;b(2)
0049E3 FF FF       0904*                  DW	0FFFFH
0049E5 7E          0905*                  DB	7EH
0049E6 00 00       0906*                  DW	0		;b(0)
0049E8 00 00       0907*                  DW	0
0049EA 80          0908*                  DB	80H
0049EB CD A4 4F    0909*                  CALL	POP5
0049EE F1          0910*  SIN3:           POP	AF
0049EF E6 04       0911*                  AND	4
0049F1 C8          0912*                  RET	Z
0049F2 0D          0913*                  DEC	C
0049F3 0C          0914*                  INC	C
0049F4 C8          0915*                  RET	Z		;ZERO
0049F5 CB FC       0916*                  SET	7,H		;MAKE NEGATIVE
0049F7 C9          0917*                  RET
0049F8             0918*  ;
0049F8             0919*  ;Floating-point one:
0049F8             0920*  ;
0049F8 21 00 00    0921*  FONE:           LD	HL,0
0049FB D9          0922*                  EXX
0049FC 21 00 00    0923*                  LD	HL,0
0049FF D9          0924*                  EXX
004A00 0E 80       0925*                  LD	C,80H
004A02 C9          0926*                  RET
004A03             0927*  ;
004A03 11 00 00    0928*  DONE:           LD	DE,0
004A06 D9          0929*                  EXX
004A07 11 00 00    0930*                  LD	DE,0
004A0A D9          0931*                  EXX
004A0B 06 80       0932*                  LD	B,80H
004A0D C9          0933*                  RET
004A0E             0934*  ;
004A0E 11 0F 49    0935*  PIBY4:          LD	DE,490FH
004A11 D9          0936*                  EXX
004A12 11 A2 DA    0937*                  LD	DE,0DAA2H
004A15 D9          0938*                  EXX
004A16 06 7F       0939*                  LD	B,7FH
004A18 C9          0940*                  RET
004A19             0941*  ;
004A19             0942*  ;EXP - Exponential function
004A19             0943*  ;Result is floating-point numeric.
004A19             0944*  ;
004A19 CD B2 4E    0945*  EXP:            CALL	SFLOAT
004A1C CD 99 4A    0946*  EXP0:           CALL	LN2		;LN(2)
004A1F D9          0947*                  EXX
004A20 1D          0948*                  DEC	E
004A21 01 CF D1    0949*                  LD	BC,0D1CFH	;0.6931471805599453
004A24 D9          0950*                  EXX
004A25 E5          0951*                  PUSH	HL		;H7=SIGN
004A26 CD 37 4E    0952*                  CALL	MOD48		;"MODULUS"
004A29 F1          0953*                  POP	AF
004A2A CB 7B       0954*                  BIT	7,E
004A2C 28 09       0955*                  JR	Z,EXP1
004A2E 17          0956*                  RLA
004A2F DA 21 4F    0957*                  JP	C,ZEROmat
004A32 3E 18       0958*                  LD	A,EXPRNG
004A34 C3 26 45    0959*                  JP	ERROR_mat		;"Exp range"
004A37             0960*  ;
004A37 E6 80       0961*  EXP1:           AND	80H
004A39 B3          0962*                  OR	E
004A3A F5          0963*                  PUSH	AF		;INTEGER PART
004A3B CB BC       0964*                  RES	7,H
004A3D CD 9B 4F    0965*                  CALL	PUSH5		;PUSH X*LN(2)
004A40 CD CE 4F    0966*                  CALL	POLY
004A43 72 40       0967*                  DW	4072H		;a(7)
004A45 2E 94       0968*                  DW	942EH
004A47 73          0969*                  DB	73H
004A48 65 6F       0970*                  DW	6F65H		;a(6)
004A4A 4F 2E       0971*                  DW	2E4FH
004A4C 76          0972*                  DB	76H
004A4D 37 6D       0973*                  DW	6D37H		;a(5)
004A4F 02 88       0974*                  DW	8802H
004A51 79          0975*                  DB	79H
004A52 12 E5       0976*                  DW	0E512H		;a(4)
004A54 A0 2A       0977*                  DW	2AA0H
004A56 7B          0978*                  DB	7BH
004A57 14 4F       0979*                  DW	4F14H		;a(3)
004A59 AA AA       0980*                  DW	0AAAAH
004A5B 7D          0981*                  DB	7DH
004A5C 56 FD       0982*                  DW	0FD56H		;a(2)
004A5E FF 7F       0983*                  DW	7FFFH
004A60 7E          0984*                  DB	7EH
004A61 FE FF       0985*                  DW	0FFFEH		;a(1)
004A63 FF FF       0986*                  DW	0FFFFH
004A65 7F          0987*                  DB	7FH
004A66 00 00       0988*                  DW	0		;a(0)
004A68 00 00       0989*                  DW	0
004A6A 80          0990*                  DB	80H
004A6B CD A4 4F    0991*                  CALL	POP5
004A6E F1          0992*                  POP	AF
004A6F F5          0993*                  PUSH	AF
004A70 F4 90 4A    0994*                  CALL	P,RECIP		;X=1/X
004A73 F1          0995*                  POP	AF
004A74 F2 7B 4A    0996*                  JP	P,EXP4
004A77 E6 7F       0997*                  AND	7FH
004A79 ED 44       0998*                  NEG
004A7B C6 80       0999*  EXP4:           ADD	A,80H
004A7D 81          1000*                  ADD	A,C
004A7E 38 05       1001*                  JR	C,EXP2
004A80 F2 21 4F    1002*                  JP	P,ZEROmat		;UNDERFLOW
004A83 18 03       1003*                  JR	EXP3
004A85 FA F2 4E    1004*  EXP2:           JP	M,OFLOW		;OVERFLOW
004A88 C6 80       1005*  EXP3:           ADD	A,80H
004A8A CA 21 4F    1006*                  JP	Z,ZEROmat
004A8D 4F          1007*                  LD	C,A
004A8E AF          1008*                  XOR	A		;NUMERIC MARKER
004A8F C9          1009*                  RET
004A90             1010*  ;
004A90 CD 03 4A    1011*  RECIP:          CALL	DONE
004A93 CD DC 4E    1012*  RDIV:           CALL	SWAP
004A96 C3 9D 46    1013*                  JP	FDIV		;RECIPROCAL
004A99             1014*  ;
004A99 11 72 31    1015*  LN2:            LD	DE,3172H	;LN(2)
004A9C D9          1016*                  EXX
004A9D 11 F8 17    1017*                  LD	DE,17F8H
004AA0 D9          1018*                  EXX
004AA1 06 7F       1019*                  LD	B,7FH
004AA3 C9          1020*                  RET
004AA4             1021*  ;
004AA4             1022*  ;LN - Natural log.
004AA4             1023*  ;Result is floating-point numeric.
004AA4             1024*  ;
004AA4 CD B2 4E    1025*  LN:             CALL	SFLOAT
004AA7 3E 16       1026*  LN0:            LD	A,LOGRNG
004AA9 CB 7C       1027*                  BIT	7,H
004AAB C2 26 45    1028*                  JP	NZ,ERROR_mat	;"Log range"
004AAE 0C          1029*                  INC	C
004AAF 0D          1030*                  DEC	C
004AB0 CA 26 45    1031*                  JP	Z,ERROR_mat
004AB3 11 04 35    1032*                  LD	DE,3504H	;SQR(2)
004AB6 D9          1033*                  EXX
004AB7 11 33 F3    1034*                  LD	DE,0F333H	;1.41421356237
004ABA D9          1035*                  EXX
004ABB CD 33 4F    1036*                  CALL	ICP0		;MANTISSA>SQR(2)?
004ABE 79          1037*                  LD	A,C		;EXPONENT
004ABF 0E 80       1038*                  LD	C,80H		;1 <= X < 2
004AC1 38 02       1039*                  JR	C,LN4
004AC3 0D          1040*                  DEC	C
004AC4 3C          1041*                  INC	A
004AC5 F5          1042*  LN4:            PUSH	AF		;SAVE EXPONENT
004AC6 CD B0 4F    1043*                  CALL	RATIO		;X=(X-1)/(X+1)
004AC9 CD 9B 4F    1044*                  CALL	PUSH5
004ACC CD 95 4F    1045*                  CALL	SQUARE		;PUSH X*X
004ACF CD CE 4F    1046*                  CALL	POLY
004AD2 48 CC       1047*                  DW	0CC48H		;a(9)
004AD4 FB 74       1048*                  DW	74FBH
004AD6 7D          1049*                  DB	7DH
004AD7 AF AE       1050*                  DW	0AEAFH		;a(7)
004AD9 FF 11       1051*                  DW	11FFH
004ADB 7E          1052*                  DB	7EH
004ADC 8C D9       1053*                  DW	0D98CH		;a(5)
004ADE CD 4C       1054*                  DW	4CCDH
004AE0 7E          1055*                  DB	7EH
004AE1 E3 A9       1056*                  DW	0A9E3H		;a(3)
004AE3 AA 2A       1057*                  DW	2AAAH
004AE5 7F          1058*                  DB	7FH
004AE6 00 00       1059*                  DW	0		;a(1)
004AE8 00 00       1060*                  DW	0
004AEA 81          1061*                  DB	81H
004AEB CD A4 4F    1062*                  CALL	POP5
004AEE CD A4 4F    1063*                  CALL	POP5
004AF1 CD 0D 47    1064*                  CALL	FMUL
004AF4 F1          1065*                  POP	AF		;EXPONENT
004AF5 CD 9B 4F    1066*                  CALL	PUSH5
004AF8 08          1067*                  EX	AF,AF'
004AF9 CD 21 4F    1068*                  CALL	ZEROmat
004AFC 08          1069*                  EX	AF,AF'
004AFD D6 80       1070*                  SUB	80H
004AFF 28 1B       1071*                  JR	Z,LN3
004B01 30 02       1072*                  JR	NC,LN1
004B03 2F          1073*                  CPL
004B04 3C          1074*                  INC	A
004B05 67          1075*  LN1:            LD	H,A
004B06 0E 87       1076*                  LD	C,87H
004B08 F5          1077*                  PUSH	AF
004B09 CD 98 4E    1078*                  CALL	FLOAT
004B0C CB BC       1079*                  RES	7,H
004B0E CD 99 4A    1080*                  CALL	LN2
004B11 CD 0D 47    1081*                  CALL	FMUL
004B14 F1          1082*                  POP	AF
004B15 30 05       1083*                  JR	NC,LN3
004B17 FA 1C 4B    1084*                  JP	M,LN3
004B1A CB FC       1085*                  SET	7,H
004B1C CD A4 4F    1086*  LN3:            CALL	POP5
004B1F CD 45 46    1087*                  CALL	FADD
004B22 AF          1088*                  XOR	A
004B23 C9          1089*                  RET
004B24             1090*  ;
004B24             1091*  ;LOG - base-10 logarithm.
004B24             1092*  ;Result is floating-point numeric.
004B24             1093*  ;
004B24 CD A4 4A    1094*  LOG:            CALL	LN
004B27 11 5B 5E    1095*                  LD	DE,5E5BH	;LOG(e)
004B2A D9          1096*                  EXX
004B2B 11 A9 D8    1097*                  LD	DE,0D8A9H
004B2E D9          1098*                  EXX
004B2F 06 7E       1099*                  LD	B,7EH
004B31 CD 0D 47    1100*                  CALL	FMUL
004B34 AF          1101*                  XOR	A
004B35 C9          1102*                  RET
004B36             1103*  ;
004B36             1104*  ;ASN - Arc-sine
004B36             1105*  ;Result is floating-point numeric.
004B36             1106*  ;
004B36 CD B2 4E    1107*  ASN:            CALL	SFLOAT
004B39 CD 9B 4F    1108*                  CALL	PUSH5
004B3C CD 8D 4F    1109*                  CALL	COPY
004B3F CD 0D 47    1110*                  CALL	FMUL
004B42 CD 03 4A    1111*                  CALL	DONE
004B45 CD 35 46    1112*                  CALL	RSUB
004B48 CD 07 49    1113*                  CALL	SQR0
004B4B CD A4 4F    1114*                  CALL	POP5
004B4E 0C          1115*                  INC	C
004B4F 0D          1116*                  DEC	C
004B50 3E 02       1117*                  LD	A,2
004B52 D5          1118*                  PUSH	DE
004B53 28 70       1119*                  JR	Z,ACS1
004B55 D1          1120*                  POP	DE
004B56 CD 93 4A    1121*                  CALL	RDIV
004B59 18 03       1122*                  JR	ATN0
004B5B             1123*  ;
004B5B             1124*  ;ATN - arc-tangent
004B5B             1125*  ;Result is floating-point numeric.
004B5B             1126*  ;
004B5B CD B2 4E    1127*  ATN:            CALL	SFLOAT
004B5E E5          1128*  ATN0:           PUSH	HL		;SAVE SIGN
004B5F CB BC       1129*                  RES	7,H
004B61 11 13 54    1130*                  LD	DE,5413H	;TAN(PI/8)=SQR(2)-1
004B64 D9          1131*                  EXX
004B65 11 D0 CC    1132*                  LD	DE,0CCD0H
004B68 D9          1133*                  EXX
004B69 06 7E       1134*                  LD	B,7EH
004B6B CD 30 4F    1135*                  CALL	FCP0		;COMPARE
004B6E 06 00       1136*                  LD	B,0
004B70 38 1C       1137*                  JR	C,ATN2
004B72 11 82 1A    1138*                  LD	DE,1A82H	;TAN(3*PI/8)=SQR(2)+1
004B75 D9          1139*                  EXX
004B76 11 9A 79    1140*                  LD	DE,799AH
004B79 D9          1141*                  EXX
004B7A 06 81       1142*                  LD	B,81H
004B7C CD 30 4F    1143*                  CALL	FCP0		;COMPARE
004B7F 38 08       1144*                  JR	C,ATN1
004B81 CD 90 4A    1145*                  CALL	RECIP		;X=1/X
004B84 06 02       1146*                  LD	B,2
004B86 C3 8E 4B    1147*                  JP	ATN2
004B89 CD B0 4F    1148*  ATN1:           CALL	RATIO		;X=(X-1)/(X+1)
004B8C 06 01       1149*                  LD	B,1
004B8E C5          1150*  ATN2:           PUSH	BC		;SAVE FLAG
004B8F CD 9B 4F    1151*                  CALL	PUSH5
004B92 CD 95 4F    1152*                  CALL	SQUARE		;PUSH X*X
004B95 CD CE 4F    1153*                  CALL	POLY
004B98 35 F3       1154*                  DW	0F335H		;a(13)
004B9A D8 37       1155*                  DW	37D8H
004B9C 7B          1156*                  DB	7BH
004B9D 91 6B       1157*                  DW	6B91H		;a(11)
004B9F B9 AA       1158*                  DW	0AAB9H
004BA1 7C          1159*                  DB	7CH
004BA2 DE 41       1160*                  DW	41DEH		;a(9)
004BA4 97 61       1161*                  DW	6197H
004BA6 7C          1162*                  DB	7CH
004BA7 7B 9D       1163*                  DW	9D7BH		;a(7)
004BA9 37 92       1164*                  DW	9237H
004BAB 7D          1165*                  DB	7DH
004BAC 5A 2A       1166*                  DW	2A5AH		;a(5)
004BAE CC 4C       1167*                  DW	4CCCH
004BB0 7D          1168*                  DB	7DH
004BB1 5C A9       1169*                  DW	0A95CH		;a(3)
004BB3 AA AA       1170*                  DW	0AAAAH
004BB5 7E          1171*                  DB	7EH
004BB6 00 00       1172*                  DW	0		;a(1)
004BB8 00 00       1173*                  DW	0
004BBA 80          1174*                  DB	80H
004BBB CD A4 4F    1175*                  CALL	POP5
004BBE CD A4 4F    1176*                  CALL	POP5
004BC1 CD 0D 47    1177*                  CALL	FMUL
004BC4 F1          1178*                  POP	AF
004BC5 CD 0E 4A    1179*  ACS1:           CALL	PIBY4		;PI/4
004BC8 1F          1180*                  RRA
004BC9 F5          1181*                  PUSH	AF
004BCA DC 45 46    1182*                  CALL	C,FADD
004BCD F1          1183*                  POP	AF
004BCE 04          1184*                  INC	B
004BCF 1F          1185*                  RRA
004BD0 DC 35 46    1186*                  CALL	C,RSUB
004BD3 F1          1187*                  POP	AF
004BD4 B7          1188*                  OR	A
004BD5 F0          1189*                  RET	P
004BD6 CB FC       1190*                  SET	7,H		;MAKE NEGATIVE
004BD8 AF          1191*                  XOR	A
004BD9 C9          1192*                  RET
004BDA             1193*  ;
004BDA             1194*  ;ACS - Arc cosine=PI/2-ASN.
004BDA             1195*  ;Result is floating point numeric.
004BDA             1196*  ;
004BDA CD 36 4B    1197*  ACS:            CALL	ASN
004BDD 3E 02       1198*                  LD	A,2
004BDF F5          1199*                  PUSH	AF
004BE0 18 E3       1200*                  JR	ACS1
004BE2             1201*  ;
004BE2             1202*  ;Function STR - convert numeric value to ASCII string.
004BE2             1203*  ;   Inputs: HLH'L'C = integer or floating-point number
004BE2             1204*  ;           DE = address at which to store string
004BE2             1205*  ;           IX = address of @% format control
004BE2             1206*  ;  Outputs: String stored, with NUL terminator
004BE2             1207*  ;
004BE2             1208*  ;First normalise for decimal output:
004BE2             1209*  ;
004BE2 CD B2 4E    1210*  STRmat:            CALL	SFLOAT
004BE5 06 00       1211*                  LD	B,0		;DEFAULT PT. POSITION
004BE7 CB 7C       1212*                  BIT	7,H		;NEGATIVE?
004BE9 28 06       1213*                  JR	Z,STR10
004BEB CB BC       1214*                  RES	7,H
004BED 3E 2D       1215*                  LD	A,'-'
004BEF 12          1216*                  LD	(DE),A		;STORE SIGN
004BF0 13          1217*                  INC	DE
004BF1 AF          1218*  STR10:          XOR	A		;CLEAR A
004BF2 B9          1219*                  CP	C
004BF3 28 47       1220*                  JR	Z,STR2mat		;ZERO
004BF5 D5          1221*                  PUSH	DE		;SAVE TEXT POINTER
004BF6 78          1222*                  LD	A,B
004BF7 F5          1223*  STR11:          PUSH	AF		;SAVE DECIMAL COUNTER
004BF8 79          1224*                  LD	A,C		;BINARY EXPONENT
004BF9 FE A1       1225*                  CP	161
004BFB 30 1A       1226*                  JR	NC,STR14
004BFD FE 9B       1227*                  CP	155
004BFF 30 25       1228*                  JR	NC,STR15
004C01 2F          1229*                  CPL
004C02 FE E1       1230*                  CP	225
004C04 38 02       1231*                  JR	C,STR13
004C06 3E F8       1232*                  LD	A,-8
004C08 C6 1C       1233*  STR13:          ADD	A,28
004C0A CD F5 4F    1234*                  CALL	POWR10
004C0D F5          1235*                  PUSH	AF
004C0E CD 0D 47    1236*                  CALL	FMUL
004C11 F1          1237*                  POP	AF
004C12 47          1238*                  LD	B,A
004C13 F1          1239*                  POP	AF
004C14 90          1240*                  SUB	B
004C15 18 E0       1241*                  JR	STR11
004C17 D6 20       1242*  STR14:          SUB	32
004C19 CD F5 4F    1243*                  CALL	POWR10
004C1C F5          1244*                  PUSH	AF
004C1D CD 9D 46    1245*                  CALL	FDIV
004C20 F1          1246*                  POP	AF
004C21 47          1247*                  LD	B,A
004C22 F1          1248*                  POP	AF
004C23 80          1249*                  ADD	A,B
004C24 18 D1       1250*                  JR	STR11
004C26 3E 09       1251*  STR15:          LD	A,9
004C28 CD F5 4F    1252*                  CALL	POWR10		;10^9
004C2B CD 30 4F    1253*                  CALL	FCP0
004C2E 79          1254*                  LD	A,C
004C2F C1          1255*                  POP	BC
004C30 4F          1256*                  LD	C,A
004C31 CB FC       1257*                  SET	7,H		;IMPLIED 1
004C33 DC 52 4F    1258*                  CALL	C,X10B		;X10, DEC B
004C36 D1          1259*                  POP	DE		;RESTORE TEXT POINTER
004C37 CB B9       1260*                  RES	7,C
004C39 3E 00       1261*                  LD	A,0
004C3B 17          1262*                  RLA			;PUT CARRY IN LSB
004C3C             1263*  ;
004C3C             1264*  ;At this point decimal normalisation has been done,
004C3C             1265*  ;now convert to decimal digits:
004C3C             1266*  ;      AHLH'L' = number in normalised integer form
004C3C             1267*  ;            B = decimal place adjustment
004C3C             1268*  ;            C = binary place adjustment (29-33)
004C3C             1269*  ;
004C3C 0C          1270*  STR2mat:           INC	C
004C3D 08          1271*                  EX	AF,AF'		;SAVE A
004C3E 78          1272*                  LD	A,B
004C3F DD CB 02 4E 1273*                  BIT	1,(IX+2)
004C43 20 08       1274*                  JR	NZ,STR20
004C45 AF          1275*                  XOR	A
004C46 DD BE 01    1276*                  CP	(IX+1)
004C49 28 0A       1277*                  JR	Z,STR21
004C4B 3E F6       1278*                  LD	A,-10
004C4D DD 86 01    1279*  STR20:          ADD	A,(IX+1)	;SIG. FIG. COUNT
004C50 B7          1280*                  OR	A		;CLEAR CARRY
004C51 FA 55 4C    1281*                  JP	M,STR21
004C54 AF          1282*                  XOR	A
004C55 F5          1283*  STR21:          PUSH	AF
004C56 08          1284*                  EX	AF,AF'		;RESTORE A
004C57 CD 7B 4F    1285*  STR22:          CALL	X2		;RL AHLH'L'
004C5A 8F          1286*                  ADC	A,A
004C5B FE 0A       1287*                  CP	10
004C5D 38 05       1288*                  JR	C,STR23
004C5F D6 0A       1289*                  SUB	10
004C61 D9          1290*                  EXX
004C62 2C          1291*                  INC	L		;SET RESULT BIT
004C63 D9          1292*                  EXX
004C64 0D          1293*  STR23:          DEC	C
004C65 20 F0       1294*                  JR	NZ,STR22	;32 TIMES
004C67 4F          1295*                  LD	C,A		;REMAINDER
004C68 7C          1296*                  LD	A,H
004C69 E6 3F       1297*                  AND	3FH		;CLEAR OUT JUNK
004C6B 67          1298*                  LD	H,A
004C6C F1          1299*                  POP	AF
004C6D F2 7A 4C    1300*                  JP	P,STR24
004C70 3C          1301*                  INC	A
004C71 20 1C       1302*                  JR	NZ,STR26
004C73 3E 04       1303*                  LD	A,4
004C75 B9          1304*                  CP	C		;ROUND UP?
004C76 3E 00       1305*                  LD	A,0
004C78 18 15       1306*                  JR	STR26
004C7A F5          1307*  STR24:          PUSH	AF
004C7B 79          1308*                  LD	A,C
004C7C CE 30       1309*                  ADC	A,'0'		;ADD CARRY
004C7E FE 30       1310*                  CP	'0'
004C80 28 05       1311*                  JR	Z,STR25		;SUPPRESS ZERO
004C82 FE 3A       1312*                  CP	'9'+1
004C84 3F          1313*                  CCF
004C85 30 08       1314*                  JR	NC,STR26
004C87 E3          1315*  STR25:          EX	(SP),HL
004C88 CB 75       1316*                  BIT	6,L		;ZERO FLAG
004C8A E3          1317*                  EX	(SP),HL
004C8B 20 05       1318*                  JR	NZ,STR27
004C8D 3E 30       1319*                  LD	A,'0'
004C8F 3C          1320*  STR26:          INC	A		;SET +VE
004C90 3D          1321*                  DEC	A
004C91 F5          1322*                  PUSH	AF		;PUT ON STACK + CARRY
004C92 04          1323*  STR27:          INC	B
004C93 CD 01 4F    1324*                  CALL	TESTmat		;IS HLH'L' ZERO?
004C96 0E 20       1325*                  LD	C,32
004C98 3E 00       1326*                  LD	A,0
004C9A 20 BB       1327*                  JR	NZ,STR22
004C9C F1          1328*                  POP	AF
004C9D F5          1329*                  PUSH	AF
004C9E 3E 00       1330*                  LD	A,0
004CA0 38 B5       1331*                  JR	C,STR22
004CA2             1332*  ;
004CA2             1333*  ;At this point, the decimal character string is stored
004CA2             1334*  ; on the stack. Trailing zeroes are suppressed and may
004CA2             1335*  ; need to be replaced.
004CA2             1336*  ;B register holds decimal point position.
004CA2             1337*  ;Now format number and store as ASCII string:
004CA2             1338*  ;
004CA2 EB          1339*  STR3:           EX	DE,HL		;STRING POINTER
004CA3 0E FF       1340*                  LD	C,-1		;FLAG "E"
004CA5 16 01       1341*                  LD	D,1
004CA7 DD 5E 01    1342*                  LD	E,(IX+1)	;f2
004CAA DD CB 02 46 1343*                  BIT	0,(IX+2)
004CAE 20 32       1344*                  JR	NZ,STR34	;E MODE
004CB0 DD CB 02 4E 1345*                  BIT	1,(IX+2)
004CB4 28 11       1346*                  JR	Z,STR31
004CB6 78          1347*                  LD	A,B		;F MODE
004CB7 B7          1348*                  OR	A
004CB8 28 04       1349*                  JR	Z,STR30
004CBA FA BE 4C    1350*                  JP	M,STR30
004CBD 50          1351*                  LD	D,B
004CBE 7A          1352*  STR30:          LD	A,D
004CBF DD 86 01    1353*                  ADD	A,(IX+1)
004CC2 5F          1354*                  LD	E,A
004CC3 FE 0B       1355*                  CP	11
004CC5 38 17       1356*                  JR	C,STR32
004CC7 78          1357*  STR31:          LD	A,B		;G MODE
004CC8 11 01 01    1358*                  LD	DE,101H
004CCB B7          1359*                  OR	A
004CCC FA E2 4C    1360*                  JP	M,STR34
004CCF 28 0D       1361*                  JR	Z,STR32
004CD1 DD 7E 01    1362*                  LD	A,(IX+1)
004CD4 B7          1363*                  OR	A
004CD5 20 02       1364*                  JR	NZ,STR3A
004CD7 3E 0A       1365*                  LD	A,10
004CD9 B8          1366*  STR3A:          CP	B
004CDA 38 06       1367*                  JR	C,STR34
004CDC 50          1368*                  LD	D,B
004CDD 58          1369*                  LD	E,B
004CDE 78          1370*  STR32:          LD	A,B
004CDF C6 81       1371*                  ADD	A,129
004CE1 4F          1372*                  LD	C,A
004CE2 CB FA       1373*  STR34:          SET	7,D
004CE4 1D          1374*                  DEC	E
004CE5 7A          1375*  STR35:          LD	A,D
004CE6 B9          1376*                  CP	C
004CE7 30 0C       1377*                  JR	NC,STR33
004CE9 F1          1378*  STR36:          POP	AF
004CEA 28 03       1379*                  JR	Z,STR37
004CEC F2 F7 4C    1380*                  JP	P,STR38
004CEF F5          1381*  STR37:          PUSH	AF
004CF0 1C          1382*                  INC	E
004CF1 1D          1383*                  DEC	E
004CF2 FA 06 4D    1384*                  JP	M,STR4
004CF5 3E 30       1385*  STR33:          LD	A,'0'
004CF7 15          1386*  STR38:          DEC	D
004CF8 E2 FE 4C    1387*                  JP	PO,STR39
004CFB 36 2E       1388*                  LD	(HL),'.'
004CFD 23          1389*                  INC	HL
004CFE 77          1390*  STR39:          LD	(HL),A
004CFF 23          1391*                  INC	HL
004D00 1D          1392*                  DEC	E
004D01 F2 E5 4C    1393*                  JP	P,STR35
004D04 18 E3       1394*                  JR	STR36
004D06             1395*  ;
004D06 F1          1396*  STR4:           POP	AF
004D07 0C          1397*  STR40:          INC	C
004D08 4D          1398*                  LD	C,L
004D09 20 27       1399*                  JR	NZ,STR44
004D0B 36 45       1400*                  LD	(HL),'E'	;EXPONENT
004D0D 23          1401*                  INC	HL
004D0E 78          1402*                  LD	A,B
004D0F 3D          1403*                  DEC	A
004D10 F2 18 4D    1404*                  JP	P,STR41
004D13 36 2D       1405*                  LD	(HL),'-'
004D15 23          1406*                  INC	HL
004D16 ED 44       1407*                  NEG
004D18 36 30       1408*  STR41:          LD	(HL),'0'
004D1A 28 15       1409*                  JR	Z,STR47
004D1C FE 0A       1410*                  CP	10
004D1E 47          1411*                  LD	B,A
004D1F 3E 3A       1412*                  LD	A,':'
004D21 38 03       1413*                  JR	C,STR42
004D23 23          1414*                  INC	HL
004D24 36 30       1415*                  LD	(HL),'0'
004D26 34          1416*  STR42:          INC	(HL)
004D27 BE          1417*                  CP	(HL)
004D28 20 05       1418*                  JR	NZ,STR43
004D2A 36 30       1419*                  LD	(HL),'0'
004D2C 2B          1420*                  DEC	HL
004D2D 34          1421*                  INC	(HL)
004D2E 23          1422*                  INC	HL
004D2F 10 F5       1423*  STR43:          DJNZ	STR42
004D31 23          1424*  STR47:          INC	HL
004D32 EB          1425*  STR44:          EX	DE,HL
004D33 C9          1426*                  RET
004D34             1427*  ;
004D34             1428*  ;Support subroutines:
004D34             1429*  ;
004D34             1430*  ;CON - Get unsigned numeric constant from ASCII string.
004D34             1431*  ;   Inputs: ASCII string at (IX).
004D34             1432*  ;  Outputs: Variable-type result in HLH'L'C
004D34             1433*  ;           IX updated (points to delimiter)
004D34             1434*  ;           A7 = 0 (numeric marker)
004D34             1435*  ;
004D34 CD 21 4F    1436*  CON:            CALL	ZEROmat		;INITIALISE TO ZERO
004D37 0E 00       1437*                  LD	C,0		;TRUNCATION COUNTER
004D39 CD B9 4D    1438*                  CALL	NUMBERmat		;GET INTEGER PART
004D3C FE 2E       1439*                  CP	'.'
004D3E 06 00       1440*                  LD	B,0		;DECL. PLACE COUNTER
004D40 CC B7 4D    1441*                  CALL	Z,NUMBIX	;GET FRACTION PART
004D43 FE 45       1442*                  CP	'E'
004D45 3E 00       1443*                  LD	A,0		;INITIALISE EXPONENT
004D47 CC 88 4D    1444*                  CALL	Z,GETEXP	;GET EXPONENT
004D4A CB 7C       1445*                  BIT	7,H
004D4C 20 08       1446*                  JR	NZ,CON0		;INTEGER OVERFLOW
004D4E B7          1447*                  OR	A
004D4F 20 05       1448*                  JR	NZ,CON0		;EXPONENT NON-ZERO
004D51 B8          1449*                  CP	B
004D52 20 02       1450*                  JR	NZ,CON0		;DECIMAL POINT
004D54 B9          1451*                  CP	C
004D55 C8          1452*                  RET	Z		;INTEGER
004D56 90          1453*  CON0:           SUB	B
004D57 81          1454*                  ADD	A,C
004D58 0E 9F       1455*                  LD	C,159
004D5A CD 98 4E    1456*                  CALL	FLOAT
004D5D CB BC       1457*                  RES	7,H		;DITCH IMPLIED 1
004D5F B7          1458*                  OR	A
004D60 C8          1459*                  RET	Z		;DONE
004D61 FA 6C 4D    1460*                  JP	M,CON2		;NEGATIVE EXPONENT
004D64 CD F5 4F    1461*                  CALL	POWR10
004D67 CD 0D 47    1462*                  CALL	FMUL		;SCALE
004D6A AF          1463*                  XOR	A
004D6B C9          1464*                  RET
004D6C FE DA       1465*  CON2:           CP	-38
004D6E 38 0A       1466*                  JR	C,CON3		;CAN'T SCALE IN ONE GO
004D70 ED 44       1467*                  NEG
004D72 CD F5 4F    1468*                  CALL	POWR10
004D75 CD 9D 46    1469*                  CALL	FDIV		;SCALE
004D78 AF          1470*                  XOR	A
004D79 C9          1471*                  RET
004D7A F5          1472*  CON3:           PUSH	AF
004D7B 3E 26       1473*                  LD	A,38
004D7D CD F5 4F    1474*                  CALL	POWR10
004D80 CD 9D 46    1475*                  CALL	FDIV
004D83 F1          1476*                  POP	AF
004D84 C6 26       1477*                  ADD	A,38
004D86 18 E4       1478*                  JR	CON2
004D88             1479*  ;
004D88             1480*  ;GETEXP - Get decimal exponent from string
004D88             1481*  ;     Inputs: ASCII string at (IX)
004D88             1482*  ;             (IX points at 'E')
004D88             1483*  ;             A = initial value
004D88             1484*  ;    Outputs: A = new exponent
004D88             1485*  ;             IX updated.
004D88             1486*  ;   Destroys: A,A',IX,F,F'
004D88             1487*  ;
004D88 C5          1488*  GETEXP:         PUSH	BC		;SAVE REGISTERS
004D89 47          1489*                  LD	B,A		;INITIAL VALUE
004D8A 0E 02       1490*                  LD	C,2		;2 DIGITS MAX
004D8C DD 23       1491*                  INC	IX		;BUMP PAST 'E'
004D8E CD E3 50    1492*                  CALL	SIGNQ
004D91 08          1493*                  EX	AF,AF'		;SAVE EXPONENT SIGN
004D92 CD D9 50    1494*  GETEX1:         CALL	DIGITQ
004D95 38 17       1495*                  JR	C,GETEX2
004D97 78          1496*                  LD	A,B		;B=B*10
004D98 87          1497*                  ADD	A,A
004D99 87          1498*                  ADD	A,A
004D9A 80          1499*                  ADD	A,B
004D9B 87          1500*                  ADD	A,A
004D9C 47          1501*                  LD	B,A
004D9D DD 7E 00    1502*                  LD	A,(IX)		;GET BACK DIGIT
004DA0 DD 23       1503*                  INC	IX
004DA2 E6 0F       1504*                  AND	0FH		;MASK UNWANTED BITS
004DA4 80          1505*                  ADD	A,B		;ADD IN DIGIT
004DA5 47          1506*                  LD	B,A
004DA6 0D          1507*                  DEC	C
004DA7 F2 92 4D    1508*                  JP	P,GETEX1
004DAA 06 64       1509*                  LD	B,100		;FORCE OVERFLOW
004DAC 18 E4       1510*                  JR	GETEX1
004DAE 08          1511*  GETEX2:         EX	AF,AF'		;RESTORE SIGN
004DAF FE 2D       1512*                  CP	'-'
004DB1 78          1513*                  LD	A,B
004DB2 C1          1514*                  POP	BC		;RESTORE
004DB3 C0          1515*                  RET	NZ
004DB4 ED 44       1516*                  NEG			;NEGATE EXPONENT
004DB6 C9          1517*                  RET
004DB7             1518*  ;
004DB7             1519*  ;NUMBER: Get unsigned integer from string.
004DB7             1520*  ;    Inputs: string at (IX)
004DB7             1521*  ;            C = truncated digit count
004DB7             1522*  ;                (initially zero)
004DB7             1523*  ;            B = total digit count
004DB7             1524*  ;            HLH'L' = initial value
004DB7             1525*  ;   Outputs: HLH'L' = number (binary integer)
004DB7             1526*  ;            A = delimiter.
004DB7             1527*  ;            B, C & IX updated
004DB7             1528*  ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004DB7             1529*  ;
004DB7 DD 23       1530*  NUMBIX:         INC	IX
004DB9 CD D9 50    1531*  NUMBERmat:         CALL	DIGITQ
004DBC D8          1532*                  RET	C
004DBD 04          1533*                  INC	B		;INCREMENT DIGIT COUNT
004DBE DD 23       1534*                  INC	IX
004DC0 CD 6C 4F    1535*                  CALL	X10		;*10 & COPY OLD VALUE
004DC3 38 13       1536*                  JR	C,NUMB1		;OVERFLOW
004DC5 0D          1537*                  DEC	C		;SEE IF TRUNCATED
004DC6 0C          1538*                  INC	C
004DC7 20 0F       1539*                  JR	NZ,NUMB1	;IMPORTANT!
004DC9 E6 0F       1540*                  AND	0FH
004DCB D9          1541*                  EXX
004DCC 06 00       1542*                  LD	B,0
004DCE 4F          1543*                  LD	C,A
004DCF 09          1544*                  ADD	HL,BC		;ADD IN DIGIT
004DD0 D9          1545*                  EXX
004DD1 30 E6       1546*                  JR	NC,NUMBERmat
004DD3 23          1547*                  INC	HL		;CARRY
004DD4 7C          1548*                  LD	A,H
004DD5 B5          1549*                  OR	L
004DD6 20 E1       1550*                  JR	NZ,NUMBERmat
004DD8 0C          1551*  NUMB1:          INC	C		;TRUNCATION COUNTER
004DD9 CD DF 4E    1552*                  CALL	SWAP1		;RESTORE PREVIOUS VALUE
004DDC 18 DB       1553*                  JR	NUMBERmat
004DDE             1554*  ;
004DDE             1555*  ;FIX - Fix number to specified exponent value.
004DDE             1556*  ;    Inputs: HLH'L'C = +ve non-zero number (floated)
004DDE             1557*  ;            A = desired exponent (A>C)
004DDE             1558*  ;   Outputs: HLH'L'C = fixed number (unsigned)
004DDE             1559*  ;            fraction shifted into B'C'
004DDE             1560*  ;            A'F' positive if integer input
004DDE             1561*  ;  Destroys: C,H,L,A',B',C',H',L',F,F'
004DDE             1562*  ;
004DDE 08          1563*  FIX:            EX	AF,AF'
004DDF AF          1564*                  XOR	A
004DE0 08          1565*                  EX	AF,AF'
004DE1 CB FC       1566*                  SET	7,H		;IMPLIED 1
004DE3 CD E4 4E    1567*  FIX1:           CALL	DIV2
004DE6 B9          1568*                  CP	C
004DE7 C8          1569*                  RET	Z
004DE8 D2 E3 4D    1570*                  JP	NC,FIX1
004DEB C3 F2 4E    1571*                  JP	OFLOW
004DEE             1572*  ;
004DEE             1573*  ;SFIXmat - Convert to integer if necessary.
004DEE             1574*  ;    Input: Variable-type number in HLH'L'C
004DEE             1575*  ;   Output: Integer in HLH'L', C=0
004DEE             1576*  ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
004DEE             1577*  ;
004DEE             1578*  ;NEGATE - Negate HLH'L'
004DEE             1579*  ;    Destroys: H,L,H',L',F
004DEE             1580*  ;
004DEE CD DC 4E    1581*  FIX2:           CALL	SWAP
004DF1 CD F7 4D    1582*                  CALL	SFIXmat
004DF4 CD DC 4E    1583*                  CALL	SWAP
004DF7 0D          1584*  SFIXmat:           DEC	C
004DF8 0C          1585*                  INC	C
004DF9 C8          1586*                  RET	Z		;INTEGER/ZERO
004DFA CB 7C       1587*                  BIT	7,H		;SIGN
004DFC F5          1588*                  PUSH	AF
004DFD 3E 9F       1589*                  LD	A,159
004DFF CD DE 4D    1590*                  CALL	FIX
004E02 F1          1591*                  POP	AF
004E03 0E 00       1592*                  LD	C,0
004E05 C8          1593*                  RET	Z
004E06 B7          1594*  NEGATE:         OR	A		;CLEAR CARRY
004E07 D9          1595*                  EXX
004E08 D5          1596*  NEG0:           PUSH	DE
004E09 EB          1597*                  EX	DE,HL
004E0A 21 00 00    1598*                  LD	HL,0
004E0D ED 52       1599*                  SBC	HL,DE
004E0F D1          1600*                  POP	DE
004E10 D9          1601*                  EXX
004E11 D5          1602*                  PUSH	DE
004E12 EB          1603*                  EX	DE,HL
004E13 21 00 00    1604*                  LD	HL,0
004E16 ED 52       1605*                  SBC	HL,DE
004E18 D1          1606*                  POP	DE
004E19 C9          1607*                  RET
004E1A             1608*  ;
004E1A             1609*  ;NEG - Negate HLH'L'B'C'
004E1A             1610*  ;    Also complements A (used in FADD)
004E1A             1611*  ;    Destroys: A,H,L,B',C',H',L',F
004E1A             1612*  ;
004E1A D9          1613*  NEG:            EXX
004E1B 2F          1614*                  CPL
004E1C E5          1615*                  PUSH	HL
004E1D B7          1616*                  OR	A		;CLEAR CARRY
004E1E ED 62       1617*                  SBC	HL,HL
004E20 ED 42       1618*                  SBC	HL,BC
004E22 44          1619*                  LD	B,H
004E23 4D          1620*                  LD	C,L
004E24 E1          1621*                  POP	HL
004E25 18 E1       1622*                  JR	NEG0
004E27             1623*  ;
004E27             1624*  ;SCALE - Trig scaling.
004E27             1625*  ;MOD48 - 48-bit floating-point "modulus" (remainder).
004E27             1626*  ;   Inputs: HLH'L'C unsigned floating-point dividend
004E27             1627*  ;           DED'E'B'C'B unsigned 48-bit FP divisor
004E27             1628*  ;  Outputs: HLH'L'C floating point remainder (H7=1)
004E27             1629*  ;           E = quotient (bit 7 is sticky)
004E27             1630*  ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004E27             1631*  ;FLO48 - Float unsigned number (48 bits)
004E27             1632*  ;    Input/output in HLH'L'B'C'C
004E27             1633*  ;   Destroys: C,H,L,B',C',H',L',F
004E27             1634*  ;
004E27 3E 96       1635*  SCALE:          LD	A,150
004E29 B9          1636*                  CP	C
004E2A 3E 17       1637*                  LD	A,ACLOST
004E2C DA 26 45    1638*                  JP	C,ERROR_mat		;"Accuracy lost"
004E2F CD 0E 4A    1639*                  CALL	PIBY4
004E32 D9          1640*                  EXX
004E33 01 69 21    1641*                  LD	BC,2169H	;3.141592653589793238
004E36 D9          1642*                  EXX
004E37 CB FA       1643*  MOD48:          SET	7,D		;IMPLIED 1
004E39 CB FC       1644*                  SET	7,H
004E3B 79          1645*                  LD	A,C
004E3C 0E 00       1646*                  LD	C,0		;INIT QUOTIENT
004E3E DD 21 00 00 1647*                  LD	IX,0
004E42 DD E5       1648*                  PUSH	IX		;PUT ZERO ON STACK
004E44 B8          1649*                  CP	B
004E45 38 3A       1650*                  JR	C,MOD485	;DIVIDEND<DIVISOR
004E47 D9          1651*  MOD481:         EXX			;CARRY=0 HERE
004E48 E3          1652*                  EX	(SP),HL
004E49 ED 42       1653*                  SBC	HL,BC
004E4B E3          1654*                  EX	(SP),HL
004E4C ED 52       1655*                  SBC	HL,DE
004E4E D9          1656*                  EXX
004E4F ED 52       1657*                  SBC	HL,DE
004E51 30 09       1658*                  JR	NC,MOD482	;DIVIDEND>=DIVISOR
004E53 D9          1659*                  EXX
004E54 E3          1660*                  EX	(SP),HL
004E55 09          1661*                  ADD	HL,BC
004E56 E3          1662*                  EX	(SP),HL
004E57 ED 5A       1663*                  ADC	HL,DE
004E59 D9          1664*                  EXX
004E5A ED 5A       1665*                  ADC	HL,DE
004E5C 3F          1666*  MOD482:         CCF
004E5D CB 11       1667*                  RL	C		;QUOTIENT
004E5F 30 02       1668*                  JR	NC,MOD483
004E61 CB F9       1669*                  SET	7,C		;STICKY BIT
004E63 3D          1670*  MOD483:         DEC	A
004E64 B8          1671*                  CP	B
004E65 38 19       1672*                  JR	C,MOD484	;DIVIDEND<DIVISOR
004E67 E3          1673*                  EX	(SP),HL
004E68 29          1674*                  ADD	HL,HL		;DIVIDEND * 2
004E69 E3          1675*                  EX	(SP),HL
004E6A D9          1676*                  EXX
004E6B ED 6A       1677*                  ADC	HL,HL
004E6D D9          1678*                  EXX
004E6E ED 6A       1679*                  ADC	HL,HL
004E70 30 D5       1680*                  JR	NC,MOD481	;AGAIN
004E72 B7          1681*                  OR	A
004E73 D9          1682*                  EXX
004E74 E3          1683*                  EX	(SP),HL
004E75 ED 42       1684*                  SBC	HL,BC		;OVERFLOW, SO SUBTRACT
004E77 E3          1685*                  EX	(SP),HL
004E78 ED 52       1686*                  SBC	HL,DE
004E7A D9          1687*                  EXX
004E7B ED 52       1688*                  SBC	HL,DE
004E7D B7          1689*                  OR	A
004E7E 18 DC       1690*                  JR	MOD482
004E80             1691*  ;
004E80 3C          1692*  MOD484:         INC	A
004E81 59          1693*  MOD485:         LD	E,C		;QUOTIENT
004E82 4F          1694*                  LD	C,A		;REMAINDER EXPONENT
004E83 D9          1695*                  EXX
004E84 C1          1696*                  POP	BC
004E85 D9          1697*                  EXX
004E86 CB 7C       1698*  FLO48:          BIT	7,H
004E88 C0          1699*                  RET	NZ
004E89 D9          1700*                  EXX
004E8A CB 21       1701*                  SLA	C
004E8C CB 10       1702*                  RL	B
004E8E ED 6A       1703*                  ADC	HL,HL
004E90 D9          1704*                  EXX
004E91 ED 6A       1705*                  ADC	HL,HL
004E93 0D          1706*                  DEC	C
004E94 C2 86 4E    1707*                  JP	NZ,FLO48
004E97 C9          1708*                  RET
004E98             1709*  ;
004E98             1710*  ;Float unsigned number
004E98             1711*  ;    Input/output in HLH'L'C
004E98             1712*  ;   Destroys: C,H,L,H',L',F
004E98             1713*  ;
004E98 CB 7C       1714*  FLOAT:          BIT	7,H
004E9A C0          1715*                  RET	NZ
004E9B D9          1716*                  EXX			;SAME AS "X2"
004E9C 29          1717*                  ADD	HL,HL		;TIME-CRITICAL
004E9D D9          1718*                  EXX			;REGION
004E9E ED 6A       1719*                  ADC	HL,HL		;(BENCHMARKS)
004EA0 0D          1720*                  DEC	C
004EA1 C2 98 4E    1721*                  JP	NZ,FLOAT
004EA4 C9          1722*                  RET
004EA5             1723*  ;
004EA5             1724*  ;SFLOAT - Convert to floating-point if necessary.
004EA5             1725*  ;    Input: Variable-type number in HLH'L'C
004EA5             1726*  ;    Output: Floating-point in HLH'L'C
004EA5             1727*  ;    Destroys: A,C,H,L,H',L',F
004EA5             1728*  ;
004EA5 08          1729*  FLOATA:         EX	AF,AF'
004EA6             1730*                  ; ADD	A,(RTABLE-DTABLE)/2
004EA6 C6 2E       1731*                  ADD	A,RTABLE-DTABLE/2
004EA8 08          1732*                  EX	AF,AF'
004EA9 CD DC 4E    1733*  FLOAT2:         CALL	SWAP
004EAC CD B2 4E    1734*                  CALL	SFLOAT
004EAF CD DC 4E    1735*                  CALL	SWAP
004EB2 0D          1736*  SFLOAT:         DEC	C
004EB3 0C          1737*                  INC	C
004EB4 C0          1738*                  RET	NZ		;ALREADY FLOATING-POINT
004EB5 CD 01 4F    1739*                  CALL	TESTmat
004EB8 C8          1740*                  RET	Z		;ZERO
004EB9 7C          1741*                  LD	A,H
004EBA B7          1742*                  OR	A
004EBB FC 06 4E    1743*                  CALL	M,NEGATE
004EBE 0E 9F       1744*                  LD	C,159
004EC0 CD 98 4E    1745*                  CALL	FLOAT
004EC3 B7          1746*                  OR	A
004EC4 F8          1747*                  RET	M		;NEGATIVE
004EC5 CB BC       1748*                  RES	7,H
004EC7 C9          1749*                  RET
004EC8             1750*  ;
004EC8             1751*  ;ROUND UP
004EC8             1752*  ;Return with carry set if 32-bit overflow
004EC8             1753*  ;   Destroys: H,L,B',C',H',L',F
004EC8             1754*  ;
004EC8 D9          1755*  ADD1:           EXX
004EC9 01 01 00    1756*                  LD	BC,1
004ECC 09          1757*                  ADD	HL,BC
004ECD D9          1758*                  EXX
004ECE D0          1759*                  RET	NC
004ECF C5          1760*                  PUSH	BC
004ED0 01 01 00    1761*                  LD	BC,1
004ED3 09          1762*                  ADD	HL,BC
004ED4 C1          1763*                  POP	BC
004ED5 C9          1764*                  RET
004ED6             1765*  ;
004ED6             1766*  ;ODD - Add one if even, leave alone if odd.
004ED6             1767*  ; (Used to perform unbiassed rounding, i.e.
004ED6             1768*  ;  number is rounded up half the time)
004ED6             1769*  ;    Destroys: L',F (carry cleared)
004ED6             1770*  ;
004ED6 B7          1771*  ODD:            OR	A		;CLEAR CARRY
004ED7 D9          1772*                  EXX
004ED8 CB C5       1773*                  SET	0,L		;MAKE ODD
004EDA D9          1774*                  EXX
004EDB C9          1775*                  RET
004EDC             1776*  ;
004EDC             1777*  ;SWAP - Swap arguments.
004EDC             1778*  ;    Exchanges DE,HL D'E',H'L' and B,C
004EDC             1779*  ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
004EDC             1780*  ;SWAP1 - Swap DEHL with D'E'H'L'
004EDC             1781*  ;    Destroys: D,E,H,L,D',E',H',L'
004EDC             1782*  ;
004EDC 79          1783*  SWAP:           LD	A,C
004EDD 48          1784*                  LD	C,B
004EDE 47          1785*                  LD	B,A
004EDF EB          1786*  SWAP1:          EX	DE,HL
004EE0 D9          1787*                  EXX
004EE1 EB          1788*                  EX	DE,HL
004EE2 D9          1789*                  EXX
004EE3 C9          1790*                  RET
004EE4             1791*  ;
004EE4             1792*  ;DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
004EE4             1793*  ;INCC - destroys C,F
004EE4             1794*  ;OFLOW
004EE4             1795*  ;
004EE4 CD 82 4F    1796*  DIV2:           CALL	D2
004EE7 D9          1797*                  EXX
004EE8 CB 18       1798*                  RR	B
004EEA CB 19       1799*                  RR	C
004EEC 08          1800*                  EX	AF,AF'
004EED B0          1801*                  OR	B
004EEE 08          1802*                  EX	AF,AF'
004EEF D9          1803*                  EXX
004EF0 0C          1804*  INCC:           INC	C
004EF1 C0          1805*                  RET	NZ
004EF2 3E 14       1806*  OFLOW:          LD	A,TOOBIG
004EF4 C3 26 45    1807*                  JP	ERROR_mat		;"Too big"
004EF7             1808*  ;
004EF7             1809*  ;FTEST - Test for zero & sign
004EF7             1810*  ;    Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
004EF7             1811*  ;
004EF7 CD 01 4F    1812*  FTEST:          CALL	TESTmat
004EFA C8          1813*                  RET	Z
004EFB 7C          1814*                  LD	A,H
004EFC E6 80       1815*                  AND	10000000B
004EFE F6 40       1816*                  OR	01000000B
004F00 C9          1817*                  RET
004F01             1818*  ;
004F01             1819*  ;TEST - Test HLH'L' for zero.
004F01             1820*  ;    Output: Z-flag set & A=0 if HLH'L'=0
004F01             1821*  ;    Destroys: A,F
004F01             1822*  ;
004F01 7C          1823*  TESTmat:           LD	A,H
004F02 B5          1824*                  OR	L
004F03 D9          1825*                  EXX
004F04 B4          1826*                  OR	H
004F05 B5          1827*                  OR	L
004F06 D9          1828*                  EXX
004F07 C9          1829*                  RET
004F08             1830*  ;
004F08             1831*  ;FCOMP - Compare two numbers
004F08             1832*  ;    Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
004F08             1833*  ;
004F08 78          1834*  FCOMP:          LD	A,B
004F09 B1          1835*                  OR	C		;Both integer?
004F0A 20 0A       1836*                  JR	NZ,FCOMP1
004F0C CD 1E 4F    1837*                  CALL	ICP
004F0F 3E 00       1838*  FCOMP0:         LD	A,0
004F11 C8          1839*                  RET	Z		;Equal
004F12 3E 80       1840*                  LD	A,80H
004F14 1F          1841*                  RRA
004F15 C9          1842*                  RET
004F16             1843*  ;
004F16 CD A9 4E    1844*  FCOMP1:         CALL	FLOAT2		;Float both
004F19 CD 2B 4F    1845*                  CALL	FCP
004F1C 18 F1       1846*                  JR	FCOMP0
004F1E             1847*  ;
004F1E             1848*  ;Integer and floating point compare.
004F1E             1849*  ;Sets carry & zero flags according to HLH'L'C-DED'E'B
004F1E             1850*  ;Result pre-set to FALSE
004F1E             1851*  ;ICP1, FCP1 destroy A,F
004F1E             1852*  ;
004F1E             1853*  ;ZERO - Return zero.
004F1E             1854*  ; Destroys: A,C,H,L,H',L'
004F1E             1855*  ;
004F1E CD 4A 4F    1856*  ICP:            CALL	ICP1
004F21 3E 00       1857*  ZEROmat:           LD	A,0
004F23 D9          1858*                  EXX
004F24 67          1859*                  LD	H,A
004F25 6F          1860*                  LD	L,A
004F26 D9          1861*                  EXX
004F27 67          1862*                  LD	H,A
004F28 6F          1863*                  LD	L,A
004F29 4F          1864*                  LD	C,A
004F2A C9          1865*                  RET
004F2B             1866*  ;
004F2B CD 3D 4F    1867*  FCP:            CALL	FCP1
004F2E 18 F1       1868*                  JR	ZEROmat		;PRESET FALSE
004F30             1869*  ;
004F30 79          1870*  FCP0:           LD	A,C
004F31 B8          1871*                  CP	B		;COMPARE EXPONENTS
004F32 C0          1872*                  RET	NZ
004F33 ED 52       1873*  ICP0:           SBC	HL,DE		;COMP MANTISSA MSB
004F35 19          1874*                  ADD	HL,DE
004F36 C0          1875*                  RET	NZ
004F37 D9          1876*                  EXX
004F38 ED 52       1877*                  SBC	HL,DE		;COMP MANTISSA LSB
004F3A 19          1878*                  ADD	HL,DE
004F3B D9          1879*                  EXX
004F3C C9          1880*                  RET
004F3D             1881*  ;
004F3D 7C          1882*  FCP1:           LD	A,H
004F3E AA          1883*                  XOR	D
004F3F 7C          1884*                  LD	A,H
004F40 17          1885*                  RLA
004F41 F8          1886*                  RET	M
004F42 30 EC       1887*                  JR	NC,FCP0
004F44 CD 30 4F    1888*                  CALL	FCP0
004F47 C8          1889*                  RET	Z		;** V0.1 BUG FIX
004F48 3F          1890*                  CCF
004F49 C9          1891*                  RET
004F4A             1892*  ;
004F4A 7C          1893*  ICP1:           LD	A,H
004F4B AA          1894*                  XOR	D
004F4C F2 33 4F    1895*                  JP	P,ICP0
004F4F 7C          1896*                  LD	A,H
004F50 17          1897*                  RLA
004F51 C9          1898*                  RET
004F52             1899*  ;
004F52             1900*  ;ADD - Integer add.
004F52             1901*  ;Carry, sign & zero flags valid on exit
004F52             1902*  ;    Destroys: H,L,H',L',F
004F52             1903*  ;
004F52 05          1904*  X10B:           DEC	B
004F53 0C          1905*                  INC	C
004F54 CD 8E 4F    1906*  X5:             CALL	COPY0
004F57 CD 81 4F    1907*                  CALL	D2C
004F5A CD 81 4F    1908*                  CALL	D2C
004F5D 08          1909*                  EX	AF,AF'		;SAVE CARRY
004F5E D9          1910*  ADD:            EXX
004F5F 19          1911*                  ADD	HL,DE
004F60 D9          1912*                  EXX
004F61 ED 5A       1913*                  ADC	HL,DE
004F63 C9          1914*                  RET
004F64             1915*  ;
004F64             1916*  ;SUB - Integer subtract.
004F64             1917*  ;Carry, sign & zero flags valid on exit
004F64             1918*  ;    Destroys: H,L,H',L',F
004F64             1919*  ;
004F64 D9          1920*  SUB:            EXX
004F65 B7          1921*                  OR	A
004F66 ED 52       1922*                  SBC	HL,DE
004F68 D9          1923*                  EXX
004F69 ED 52       1924*                  SBC	HL,DE
004F6B C9          1925*                  RET
004F6C             1926*  ;
004F6C             1927*  ;X10 - unsigned integer * 10
004F6C             1928*  ;   Inputs: HLH'L' initial value
004F6C             1929*  ;  Outputs: DED'E' = initial HLH'L'
004F6C             1930*  ;           Carry bit set if overflow
004F6C             1931*  ;           If carry not set HLH'L'=result
004F6C             1932*  ; Destroys: D,E,H,L,D',E',H',L',F
004F6C             1933*  ;X2 - Multiply HLH'L' by 2 as 32-bit integer.
004F6C             1934*  ;    Carry set if MSB=1 before shift.
004F6C             1935*  ;    Sign set if MSB=1 after shift.
004F6C             1936*  ;    Destroys: H,L,H',L',F
004F6C             1937*  ;
004F6C CD 8E 4F    1938*  X10:            CALL	COPY0		;DED'E'=HLH'L'
004F6F CD 7B 4F    1939*                  CALL	X2
004F72 D8          1940*                  RET	C		;TOO BIG
004F73 CD 7B 4F    1941*                  CALL	X2
004F76 D8          1942*                  RET	C
004F77 CD 5E 4F    1943*                  CALL	ADD
004F7A D8          1944*                  RET	C
004F7B D9          1945*  X2:             EXX
004F7C 29          1946*                  ADD	HL,HL
004F7D D9          1947*                  EXX
004F7E ED 6A       1948*                  ADC	HL,HL
004F80 C9          1949*                  RET
004F81             1950*  ;
004F81             1951*  ;D2 - Divide HLH'L' by 2 as 32-bit integer.
004F81             1952*  ;    Carry set if LSB=1 before shift.
004F81             1953*  ;    Destroys: H,L,H',L',F
004F81             1954*  ;
004F81 0C          1955*  D2C:            INC	C
004F82 CB 3C       1956*  D2:             SRL	H
004F84 CB 1D       1957*                  RR	L
004F86 D9          1958*                  EXX
004F87 CB 1C       1959*                  RR	H
004F89 CB 1D       1960*                  RR	L
004F8B D9          1961*                  EXX
004F8C C9          1962*                  RET
004F8D             1963*  ;
004F8D             1964*  ;COPY - COPY HLH'L'C INTO DED'E'B
004F8D             1965*  ;  Destroys: B,C,D,E,H,L,D',E',H',L'
004F8D             1966*  ;
004F8D 41          1967*  COPY:           LD	B,C
004F8E 54          1968*  COPY0:          LD	D,H
004F8F 5D          1969*                  LD	E,L
004F90 D9          1970*                  EXX
004F91 54          1971*                  LD	D,H
004F92 5D          1972*                  LD	E,L
004F93 D9          1973*                  EXX
004F94 C9          1974*                  RET
004F95             1975*  ;
004F95             1976*  ;SQUARE - PUSH X*X
004F95             1977*  ;PUSH5 - PUSH HLH'L'C ONTO STACK.
004F95             1978*  ;  Destroys: SP,IX
004F95             1979*  ;
004F95 CD 8D 4F    1980*  SQUARE:         CALL	COPY
004F98 CD 0D 47    1981*                  CALL	FMUL
004F9B DD E1       1982*  PUSH5:          POP	IX		;RETURN ADDRESS
004F9D C5          1983*                  PUSH	BC
004F9E E5          1984*                  PUSH	HL
004F9F D9          1985*                  EXX
004FA0 E5          1986*                  PUSH	HL
004FA1 D9          1987*                  EXX
004FA2 DD E9       1988*                  JP	(IX)		;"RETURN"
004FA4             1989*  ;
004FA4             1990*  ;POP5 - POP DED'E'B OFF STACK.
004FA4             1991*  ;  Destroys: A,B,D,E,D',E',SP,IX
004FA4             1992*  ;
004FA4 DD E1       1993*  POP5:           POP	IX		;RETURN ADDRESS
004FA6 D9          1994*                  EXX
004FA7 D1          1995*                  POP	DE
004FA8 D9          1996*                  EXX
004FA9 D1          1997*                  POP	DE
004FAA 79          1998*                  LD	A,C
004FAB C1          1999*                  POP	BC
004FAC 41          2000*                  LD	B,C
004FAD 4F          2001*                  LD	C,A
004FAE DD E9       2002*                  JP	(IX)		;"RETURN"
004FB0             2003*  ;
004FB0             2004*  ;RATIO - Calculate (X-1)/(X+1)
004FB0             2005*  ;    Inputs: X in HLH'L'C
004FB0             2006*  ;   Outputs: (X-1)/(X+1) in HLH'L'C
004FB0             2007*  ;  Destroys: Everything except IY,SP,I
004FB0             2008*  ;
004FB0 CD 9B 4F    2009*  RATIO:          CALL	PUSH5		;SAVE X
004FB3 CD 03 4A    2010*                  CALL	DONE
004FB6 CD 45 46    2011*                  CALL	FADD
004FB9 CD A4 4F    2012*                  CALL	POP5		;RESTORE X
004FBC CD 9B 4F    2013*                  CALL	PUSH5		;SAVE X+1
004FBF CD DC 4E    2014*                  CALL	SWAP
004FC2 CD 03 4A    2015*                  CALL	DONE
004FC5 CD 2F 46    2016*                  CALL	FSUB
004FC8 CD A4 4F    2017*                  CALL	POP5		;RESTORE X+1
004FCB C3 9D 46    2018*                  JP	FDIV
004FCE             2019*  ;
004FCE             2020*  ;POLY - Evaluate a polynomial.
004FCE             2021*  ;    Inputs: X in HLH'L'C and also stored at (SP+2)
004FCE             2022*  ;            Polynomial coefficients follow call.
004FCE             2023*  ;   Outputs: Result in HLH'L'C
004FCE             2024*  ;  Destroys: Everything except IY,SP,I
004FCE             2025*  ;Routine terminates on finding a coefficient >=1.
004FCE             2026*  ;Note: The last coefficient is EXECUTED on return
004FCE             2027*  ;      so must contain only innocuous bytes!
004FCE             2028*  ;
004FCE DD 21 02 00 2029*  POLY:           LD	IX,2
004FD2 DD 39       2030*                  ADD	IX,SP
004FD4 DD E3       2031*                  EX	(SP),IX
004FD6 CD F1 19    2032*                  CALL	DLOAD5		;FIRST COEFFICIENT
004FD9 CD 0D 47    2033*  POLY1:          CALL	FMUL
004FDC 11 05 00    2034*                  LD	DE,5
004FDF DD 19       2035*                  ADD	IX,DE
004FE1 CD F1 19    2036*                  CALL	DLOAD5		;NEXT COEFFICIENT
004FE4 DD E3       2037*                  EX	(SP),IX
004FE6 04          2038*                  INC	B
004FE7 05          2039*                  DEC	B		;TEST
004FE8 FA 45 46    2040*                  JP	M,FADD
004FEB CD 45 46    2041*                  CALL	FADD
004FEE CD F1 19    2042*                  CALL	DLOAD5		;X
004FF1 DD E3       2043*                  EX	(SP),IX
004FF3 18 E4       2044*                  JR	POLY1
004FF5             2045*  ;
004FF5             2046*  ;POWR10 - Calculate power of ten.
004FF5             2047*  ;    Inputs: A=power of 10 required (A<128)
004FF5             2048*  ;            A=binary exponent to be exceeded (A>=128)
004FF5             2049*  ;   Outputs: DED'E'B = result
004FF5             2050*  ;            A = actual power of ten returned
004FF5             2051*  ;  Destroys: A,B,D,E,A',D',E',F,F'
004FF5             2052*  ;
004FF5 3C          2053*  POWR10:         INC	A
004FF6 08          2054*                  EX	AF,AF'
004FF7 E5          2055*                  PUSH	HL
004FF8 D9          2056*                  EXX
004FF9 E5          2057*                  PUSH	HL
004FFA D9          2058*                  EXX
004FFB CD 03 4A    2059*                  CALL	DONE
004FFE CD DC 4E    2060*                  CALL	SWAP
005001 AF          2061*                  XOR	A
005002 08          2062*  POWR11:         EX	AF,AF'
005003 3D          2063*                  DEC	A
005004 28 20       2064*                  JR	Z,POWR14	;EXITmat TYPE 1
005006 F2 0D 50    2065*                  JP	P,POWR13
005009 B9          2066*                  CP	C
00500A 38 1A       2067*                  JR	C,POWR14	;EXITmat TYPE 2
00500C 3C          2068*                  INC	A
00500D 08          2069*  POWR13:         EX	AF,AF'
00500E 3C          2070*                  INC	A
00500F CB FC       2071*                  SET	7,H
005011 CD 54 4F    2072*                  CALL	X5
005014 30 05       2073*                  JR	NC,POWR12
005016 08          2074*                  EX	AF,AF'
005017 CD 81 4F    2075*                  CALL	D2C
00501A 08          2076*                  EX	AF,AF'
00501B 08          2077*  POWR12:         EX	AF,AF'
00501C DC C8 4E    2078*                  CALL	C,ADD1		;ROUND UP
00501F 0C          2079*                  INC	C
005020 FA 02 50    2080*                  JP	M,POWR11
005023 C3 F2 4E    2081*                  JP	OFLOW
005026 CD DC 4E    2082*  POWR14:         CALL	SWAP
005029 CB BA       2083*                  RES	7,D
00502B D9          2084*                  EXX
00502C E1          2085*                  POP	HL
00502D D9          2086*                  EXX
00502E E1          2087*                  POP	HL
00502F 08          2088*                  EX	AF,AF'
005030 C9          2089*                  RET
005031             2090*  ;
005031             2091*  ;DIVA, DIVB - DIVISION PRIMITIVE.
005031             2092*  ;    Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
005031             2093*  ;              Remainder in H'L'HL
005031             2094*  ;    Inputs: A = loop counter (normally -32)
005031             2095*  ;    Destroys: A,D,E,H,L,D',E',H',L',F
005031             2096*  ;
005031 B7          2097*  DIVA:           OR	A		;CLEAR CARRY
005032 ED 42       2098*  DIV0:           SBC	HL,BC		;DIVIDEND-DIVISOR
005034 D9          2099*                  EXX
005035 ED 42       2100*                  SBC	HL,BC
005037 D9          2101*                  EXX
005038 30 05       2102*                  JR	NC,DIV1
00503A 09          2103*                  ADD	HL,BC		;DIVIDEND+DIVISOR
00503B D9          2104*                  EXX
00503C ED 4A       2105*                  ADC	HL,BC
00503E D9          2106*                  EXX
00503F 3F          2107*  DIV1:           CCF
005040 CB 13       2108*  DIVC:           RL	E		;SHIFT RESULT INTO DE
005042 CB 12       2109*                  RL	D
005044 D9          2110*                  EXX
005045 CB 13       2111*                  RL	E
005047 CB 12       2112*                  RL	D
005049 D9          2113*                  EXX
00504A 3C          2114*                  INC	A
00504B F0          2115*                  RET	P
00504C ED 6A       2116*  DIVB:           ADC	HL,HL		;DIVIDEND*2
00504E D9          2117*                  EXX
00504F ED 6A       2118*                  ADC	HL,HL
005051 D9          2119*                  EXX
005052 30 DE       2120*                  JR	NC,DIV0
005054 B7          2121*                  OR	A
005055 ED 42       2122*                  SBC	HL,BC		;DIVIDEND-DIVISOR
005057 D9          2123*                  EXX
005058 ED 42       2124*                  SBC	HL,BC
00505A D9          2125*                  EXX
00505B 37          2126*                  SCF
00505C C3 40 50    2127*                  JP	DIVC
00505F             2128*  ;
00505F             2129*  ;MULA, MULB - MULTIPLICATION PRIMITIVE.
00505F             2130*  ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
00505F             2131*  ;    Inputs: A = loop counter (usually -32)
00505F             2132*  ;            H'L'HL = 0
00505F             2133*  ;    Destroys: D,E,H,L,D',E',H',L',A,F
00505F             2134*  ;
00505F B7          2135*  MULA:           OR	A		;CLEAR CARRY
005060 D9          2136*  MUL0:           EXX
005061 CB 1A       2137*                  RR	D		;MULTIPLIER/2
005063 CB 1B       2138*                  RR	E
005065 D9          2139*                  EXX
005066 CB 1A       2140*                  RR	D
005068 CB 1B       2141*                  RR	E
00506A 30 05       2142*                  JR	NC,MUL1
00506C 09          2143*                  ADD	HL,BC		;ADD IN MULTIPLICAND
00506D D9          2144*                  EXX
00506E ED 4A       2145*                  ADC	HL,BC
005070 D9          2146*                  EXX
005071 3C          2147*  MUL1:           INC	A
005072 F0          2148*                  RET	P
005073 D9          2149*  MULB:           EXX
005074 CB 1C       2150*                  RR	H		;PRODUCT/2
005076 CB 1D       2151*                  RR	L
005078 D9          2152*                  EXX
005079 CB 1C       2153*                  RR	H
00507B CB 1D       2154*                  RR	L
00507D C3 60 50    2155*                  JP	MUL0
005080             2156*  ;
005080             2157*  ;SQRA, SQRB - SQUARE ROOT PRIMITIVES
005080             2158*  ;    Function: B'C'BC = SQR (D'E'DE)
005080             2159*  ;    Inputs: A = loop counter (normally -31)
005080             2160*  ;            B'C'BCH'L'HL initialised to 0
005080             2161*  ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
005080             2162*  ;
005080 ED 42       2163*  SQR1:           SBC	HL,BC
005082 D9          2164*                  EXX
005083 ED 42       2165*                  SBC	HL,BC
005085 D9          2166*                  EXX
005086 0C          2167*                  INC	C
005087 30 07       2168*                  JR	NC,SQR2
005089 0D          2169*                  DEC	C
00508A 09          2170*                  ADD	HL,BC
00508B D9          2171*                  EXX
00508C ED 4A       2172*                  ADC	HL,BC
00508E D9          2173*                  EXX
00508F 0D          2174*                  DEC	C
005090 3C          2175*  SQR2:           INC	A
005091 F0          2176*                  RET	P
005092 CB 21       2177*  SQRA:           SLA	C
005094 CB 10       2178*                  RL	B
005096 0C          2179*                  INC	C
005097 D9          2180*                  EXX
005098 CB 11       2181*                  RL	C
00509A CB 10       2182*                  RL	B
00509C CD C8 50    2183*                  CALL	SLA8
00509F CD C8 50    2184*                  CALL	SLA8
0050A2 D9          2185*                  EXX
0050A3 D2 80 50    2186*                  JP	NC,SQR1
0050A6 B7          2187*  SQR3:           OR	A
0050A7 ED 42       2188*                  SBC	HL,BC
0050A9 D9          2189*                  EXX
0050AA ED 42       2190*                  SBC	HL,BC
0050AC D9          2191*                  EXX
0050AD 0C          2192*                  INC	C
0050AE C3 90 50    2193*                  JP	SQR2
0050B1             2194*  ;
0050B1 29          2195*  SQRB:           ADD	HL,HL
0050B2 D9          2196*                  EXX
0050B3 ED 6A       2197*                  ADC	HL,HL
0050B5 D9          2198*                  EXX
0050B6 38 EE       2199*                  JR	C,SQR3
0050B8 3C          2200*                  INC	A
0050B9 0C          2201*                  INC	C
0050BA ED 42       2202*                  SBC	HL,BC
0050BC D9          2203*                  EXX
0050BD ED 42       2204*                  SBC	HL,BC
0050BF D9          2205*                  EXX
0050C0 D0          2206*                  RET	NC
0050C1 09          2207*                  ADD	HL,BC
0050C2 D9          2208*                  EXX
0050C3 ED 4A       2209*                  ADC	HL,BC
0050C5 D9          2210*                  EXX
0050C6 0D          2211*                  DEC	C
0050C7 C9          2212*                  RET
0050C8             2213*  ;
0050C8 D9          2214*  SLA8:           EXX
0050C9 CB 23       2215*                  SLA	E
0050CB CB 12       2216*                  RL	D
0050CD D9          2217*                  EXX
0050CE CB 13       2218*                  RL	E
0050D0 CB 12       2219*                  RL	D
0050D2 D9          2220*                  EXX
0050D3 ED 6A       2221*                  ADC	HL,HL
0050D5 D9          2222*                  EXX
0050D6 ED 6A       2223*                  ADC	HL,HL
0050D8 C9          2224*                  RET
0050D9             2225*  ;
0050D9 DD 7E 00    2226*  DIGITQ:         LD	A,(IX)
0050DC FE 3A       2227*                  CP	'9'+1
0050DE 3F          2228*                  CCF
0050DF D8          2229*                  RET	C
0050E0 FE 30       2230*                  CP	'0'
0050E2 C9          2231*                  RET
0050E3             2232*  ;
0050E3 DD 7E 00    2233*  SIGNQ:          LD	A,(IX)
0050E6 DD 23       2234*                  INC	IX
0050E8 FE 20       2235*                  CP	' '
0050EA 28 F7       2236*                  JR	Z,SIGNQ
0050EC FE 2B       2237*                  CP	'+'
0050EE C8          2238*                  RET	Z
0050EF FE 2D       2239*                  CP	'-'
0050F1 C8          2240*                  RET	Z
0050F2 DD 2B       2241*                  DEC	IX
0050F4 C9          2242*                  RET
0050F5             2243*  ;
0050F5 08          2244*  ABS2:           EX	AF,AF'
0050F6 CB 7C       2245*                  BIT	7,H
0050F8 C4 06 4E    2246*                  CALL	NZ,NEGATE	;MAKE ARGUMENTS +VE
0050FB CD DC 4E    2247*                  CALL	SWAP
0050FE CB 7C       2248*                  BIT	7,H
005100 C4 06 4E    2249*                  CALL	NZ,NEGATE
005103 44          2250*                  LD	B,H
005104 4D          2251*                  LD	C,L
005105 21 00 00    2252*                  LD	HL,0
005108 D9          2253*                  EXX
005109 44          2254*                  LD	B,H
00510A 4D          2255*                  LD	C,L
00510B 21 00 00    2256*                  LD	HL,0
00510E C9          2257*                  RET
00510F             2258*  ;
00510F             2259*  ;                END
00510F             2260*  ;    include "math.inc"
00510F             0020       include "data.asm"
00510F             0001*  ;
00510F             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
00510F             0003*  ;
00510F             0004*                  .ASSUME ADL = 0
00510F             0005*  ;	.ORG 0x0000
00510F             0006*  ;                DEFINE LORAM, SPACE = ROM
00510F             0007*  ;                SEGMENT LORAM
00510F             0008*  ;
00510F             0009*  ;                XDEF	FLAGS
00510F             0010*  ;                XDEF	OSWRCHPT
00510F             0011*  ;                XDEF	OSWRCHCH
00510F             0012*  ;                XDEF	OSWRCHFH
00510F             0013*  ;                XDEF	KEYDOWN
00510F             0014*  ;                XDEF	KEYASCII
00510F             0015*  ;                XDEF	KEYCOUNT
00510F             0016*  ;                XDEF	SCRAP
00510F             0017*  ;                XDEF	BUFFER
00510F             0018*  ;                XDEF	LISTON
00510F             0019*  ;                XDEF	PAGE_
00510F             0020*  ;
00510F             0021*  FLAGS:          DS	1
005110             0022*  OSWRCHPT:       DS	2
005112             0023*  OSWRCHCH:       DS	1
005113             0024*  OSWRCHFH:       DS	1
005114             0025*  KEYDOWN:        DS	1
005115             0026*  KEYASCII:       DS	1
005116             0027*  KEYCOUNT:       DS	1
005117             0028*  SCRAP:          DS	31
005136             0029*  ;
005136 FF FF FF FF 0030*                  ALIGN 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
005200             0031*  ;
005200             0032*  ;RAM MODULE FOR BBC BASIC INTERPRETER
005200             0033*  ;FOR USE WITH VERSION 5.0 OF BBC BASIC
005200             0034*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
005200             0035*  ;
005200             0036*  ;                XDEF	ACCS
005200             0037*  ;                XDEF	BUFFER
005200             0038*  ;                XDEF	ONERSP
005200             0039*  ;                XDEF	LIBASE
005200             0040*  ;                XDEF	PAGE_
005200             0041*  ;                XDEF	LOMEM
005200             0042*  ;                XDEF	FREE
005200             0043*  ;                XDEF	HIMEM
005200             0044*  ;                XDEF	RANDOM
005200             0045*  ;                XDEF	COUNT
005200             0046*  ;                XDEF	WIDTH
005200             0047*  ;                XDEF	ERL
005200             0048*  ;                XDEF	ERR
005200             0049*  ;                XDEF	ERRTRP
005200             0050*  ;                XDEF	ERRTXT
005200             0051*  ;                XDEF	TRACEN
005200             0052*  ;                XDEF	AUTONO
005200             0053*  ;                XDEF	INCREM
005200             0054*  ;                XDEF	LISTON
005200             0055*  ;                XDEF	DATPTR
005200             0056*  ;                XDEF	FNPTR
005200             0057*  ;                XDEF	PROPTR
005200             0058*  ;                XDEF	STAVAR
005200             0059*  ;                XDEF	OC
005200             0060*  ;                XDEF	PC
005200             0061*  ;                XDEF	DYNVAR
005200             0062*  ;                XDEF	CURLIN
005200             0063*  ;                XDEF	USER
005200             0064*  ;
005200             0065*  ;n.b. ACCS, BUFFER & STAVAR must be on page boundaries.
005200             0066*  ;
005200             0067*  ACCS:           DS	256		;STRING ACCUMULATOR
005300             0068*  BUFFER:         DS	256		;STRING INPUT BUFFER
005400             0069*  STAVAR:         DS	27*4		;STATIC VARIABLES
00546C             0070*  ; OC:             EQU	STAVAR+15*4	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             0071*  ; PC:             EQU	STAVAR+16*4	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             0072*  OC:             EQU	15*4+STAVAR	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             0073*  PC:             EQU	16*4+STAVAR	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             0074*  DYNVAR:         DS	54*2		;DYN. VARIABLE POINTERS
0054D8             0075*  FNPTR:          DS	2		;DYN. FUNCTION POINTER
0054DA             0076*  PROPTR:         DS	2		;DYN. PROCEDURE POINTER
0054DC             0077*  ;
0054DC             0078*  PAGE_:          DS	2		;START OF USER PROGRAM
0054DE             0079*  LOMEM:          DS	2		;START OF DYN. STORAGE
0054E0             0080*  FREE:           DS	2		;FIRST FREE-SPACE BYTE
0054E2             0081*  HIMEM:          DS	2		;FIRST BYTE ABOVE STACK
0054E4             0082*  LIBASE:         DS	2		;START OF FIRST LIBRARY
0054E6             0083*  ;
0054E6             0084*  TRACEN:         DS	2		;TRACE FLAG & NUMBER
0054E8             0085*  AUTONO:         DS	2		;AUTO FLAG & NUMBER
0054EA             0086*  ERRTRP:         DS	2		;ON ERROR STMT POINTER \
0054EC             0087*  ONERSP:         DS	2		;ON ERROR LOCAL STKPTR /
0054EE             0088*  ERRTXT:         DS	2		;ERROR MESSAGE POINTER
0054F0             0089*  DATPTR:         DS	2		;DATA POINTER
0054F2             0090*  ERL:            DS	2		;LINE NO OF LAST ERROR
0054F4             0091*  CURLIN:         DS	2		;POINTER TO CURRENT LINE
0054F6             0092*  RANDOM:         DS	5		;RANDOM NUMBER
0054FB             0093*  COUNT:          DS	1		;PRINT POSITION
0054FC             0094*  WIDTH:          DS	1		;PRINT WIDTH
0054FD             0095*  ERR:            DS	1		;ERROR NUMBER
0054FE             0096*  LISTON:         DS	1		;LISTO & OPT FLAG
0054FF             0097*  INCREM:         DS	1		;AUTO INCREMENT
005500             0098*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; originally in equs.inc
005500             0099*  ;
005500             0100*  USER:           ; END
005500             0101*  ;    include "data.inc"
