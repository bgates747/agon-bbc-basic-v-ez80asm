PC     Output      Line
040000             0001       .ASSUME ADL = 0
040000             0002   	.ORG 0x0000
000000             0003   
000000             0004       include "mos_api.inc"
000000             0001*  ;
000000             0002*  ; Title:	AGON MOS - API for user projects
000000             0003*  ; Author:	Dean Belfield
000000             0004*  ; Created:	03/08/2022
000000             0005*  ; Last Updated:	11/11/2023
000000             0006*  ;
000000             0007*  ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
000000             0008*  ;
000000             0009*  ; Modinfo:
000000             0010*  ; 05/08/2022:	Added mos_feof
000000             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
000000             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
000000             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
000000             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
000000             0015*  ; 13/10/2022:	Added mos_oscli
000000             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
000000             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
000000             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
000000             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
000000             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
000000             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
000000             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
000000             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
000000             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
000000             0025*  ; 19/05/2023:	Added sysvar_scrMode
000000             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
000000             0027*  ; 03/08/2023:	Added mos_setkbvector
000000             0028*  ; 10/08/2023:	Added mos_getkbmap
000000             0029*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
000000             0030*  ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
000000             0031*  ;
000000             0032*  ; VDP control (VDU 23, 0, n)
000000             0033*  ;
000000             0034*  vdp_gp:			EQU 	80h
000000             0035*  vdp_keycode:		EQU 	81h
000000             0036*  vdp_cursor:		EQU	82h
000000             0037*  vdp_scrchar:		EQU	83h
000000             0038*  vdp_scrpixel:		EQU	84h
000000             0039*  vdp_audio:		EQU	85h
000000             0040*  vdp_mode:		EQU	86h
000000             0041*  vdp_rtc:		EQU	87h
000000             0042*  vdp_keystate:		EQU	88h
000000             0043*  vdp_logicalcoords:	EQU	C0h
000000             0044*  vdp_terminalmode:	EQU	FFh
000000             0045*  
000000             0046*  ; MOS high level functions
000000             0047*  ;
000000             0048*  mos_getkey:		EQU	00h
000000             0049*  mos_load:		EQU	01h
000000             0050*  mos_save:		EQU	02h
000000             0051*  mos_cd:			EQU	03h
000000             0052*  mos_dir:		EQU	04h
000000             0053*  mos_del:		EQU	05h
000000             0054*  mos_ren:		EQU	06h
000000             0055*  mos_mkdir:		EQU	07h
000000             0056*  mos_sysvars:		EQU	08h
000000             0057*  mos_editline:		EQU	09h
000000             0058*  mos_fopen:		EQU	0Ah
000000             0059*  mos_fclose:		EQU	0Bh
000000             0060*  mos_fgetc:		EQU	0Ch
000000             0061*  mos_fputc:		EQU	0Dh
000000             0062*  mos_feof:		EQU	0Eh
000000             0063*  mos_getError:		EQU	0Fh
000000             0064*  mos_oscli:		EQU	10h
000000             0065*  mos_copy:		EQU	11h
000000             0066*  mos_getrtc:		EQU	12h
000000             0067*  mos_setrtc:		EQU	13h
000000             0068*  mos_setintvector:	EQU	14h
000000             0069*  mos_uopen:		EQU	15h
000000             0070*  mos_uclose:		EQU	16h
000000             0071*  mos_ugetc:		EQU	17h
000000             0072*  mos_uputc:		EQU 	18h
000000             0073*  mos_getfil:		EQU	19h
000000             0074*  mos_fread:		EQU	1Ah
000000             0075*  mos_fwrite:		EQU	1Bh
000000             0076*  mos_flseek:		EQU	1Ch
000000             0077*  mos_setkbvector:	EQU	1Dh
000000             0078*  mos_getkbmap:		EQU	1Eh
000000             0079*  mos_i2c_open:		EQU	1Fh
000000             0080*  mos_i2c_close:		EQU	20h
000000             0081*  mos_i2c_write:		EQU	21h
000000             0082*  mos_i2c_read:		EQU	22h
000000             0083*  
000000             0084*  
000000             0085*  ; FatFS file access functions
000000             0086*  ;
000000             0087*  ffs_fopen:		EQU	80h
000000             0088*  ffs_fclose:		EQU	81h
000000             0089*  ffs_fread:		EQU	82h
000000             0090*  ffs_fwrite:		EQU	83h
000000             0091*  ffs_flseek:		EQU	84h
000000             0092*  ffs_ftruncate:		EQU	85h
000000             0093*  ffs_fsync:		EQU	86h
000000             0094*  ffs_fforward:		EQU	87h
000000             0095*  ffs_fexpand:		EQU	88h
000000             0096*  ffs_fgets:		EQU	89h
000000             0097*  ffs_fputc:		EQU	8Ah
000000             0098*  ffs_fputs:		EQU	8Bh
000000             0099*  ffs_fprintf:		EQU	8Ch
000000             0100*  ffs_ftell:		EQU	8Dh
000000             0101*  ffs_feof:		EQU	8Eh
000000             0102*  ffs_fsize:		EQU	8Fh
000000             0103*  ffs_ferror:		EQU	90h
000000             0104*  
000000             0105*  ; FatFS directory access functions
000000             0106*  ;
000000             0107*  ffs_dopen:		EQU	91h
000000             0108*  ffs_dclose:		EQU	92h
000000             0109*  ffs_dread:		EQU	93h
000000             0110*  ffs_dfindfirst:		EQU	94h
000000             0111*  ffs_dfindnext:		EQU	95h
000000             0112*  
000000             0113*  ; FatFS file and directory management functions
000000             0114*  ;
000000             0115*  ffs_stat:		EQU	96h
000000             0116*  ffs_unlink:		EQU	97h
000000             0117*  ffs_rename:		EQU	98h
000000             0118*  ffs_chmod:		EQU	99h
000000             0119*  ffs_utime:		EQU	9Ah
000000             0120*  ffs_mkdir:		EQU	9Bh
000000             0121*  ffs_chdir:		EQU	9Ch
000000             0122*  ffs_chdrive:		EQU	9Dh
000000             0123*  ffs_getcwd:		EQU	9Eh
000000             0124*  
000000             0125*  ; FatFS volume management and system configuration functions
000000             0126*  ;
000000             0127*  ffs_mount:		EQU	9Fh
000000             0128*  ffs_mkfs:		EQU	A0h
000000             0129*  ffs_fdisk:		EQU	A1h
000000             0130*  ffs_getfree:		EQU	A2h
000000             0131*  ffs_getlabel:		EQU	A3h
000000             0132*  ffs_setlabel:		EQU	A4h
000000             0133*  ffs_setcp:		EQU	A5h
000000             0134*  
000000             0135*  ; File access modes
000000             0136*  ;
000000             0137*  fa_read:		EQU	01h
000000             0138*  fa_write:		EQU	02h
000000             0139*  fa_open_existing:	EQU	00h
000000             0140*  fa_create_new:		EQU	04h
000000             0141*  fa_create_always:	EQU	08h
000000             0142*  fa_open_always:		EQU	10h
000000             0143*  fa_open_append:		EQU	30h
000000             0144*  
000000             0145*  ; System variable indexes for api_sysvars
000000             0146*  ; Index into _sysvars in globals.asm
000000             0147*  ;
000000             0148*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
000000             0149*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
000000             0150*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
000000             0151*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
000000             0152*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
000000             0153*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
000000             0154*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
000000             0155*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
000000             0156*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
000000             0157*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
000000             0158*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
000000             0159*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
000000             0160*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
000000             0161*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
000000             0162*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
000000             0163*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
000000             0164*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
000000             0165*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
000000             0166*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
000000             0167*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
000000             0168*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
000000             0169*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
000000             0170*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
000000             0171*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
000000             0172*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
000000             0173*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
000000             0174*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
000000             0175*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
000000             0176*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
000000             0177*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
000000             0178*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
000000             0179*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
000000             0180*  ;
000000             0181*  ; Flags for the VPD protocol
000000             0182*  ;
000000             0183*  vdp_pflag_cursor:	EQU	00000001b
000000             0184*  vdp_pflag_scrchar:	EQU	00000010b
000000             0185*  vdp_pflag_point:	EQU	00000100b
000000             0186*  vdp_pflag_audio:	EQU	00001000b
000000             0187*  vdp_pflag_mode:		EQU	00010000b
000000             0188*  vdp_pflag_rtc:		EQU	00100000b
000000             0189*  vdp_pflag_mouse:	EQU	01000000b
000000             0190*  ; vdp_pflag_buffered:	EQU	10000000b
000000             0191*  
000000             0192*  
000000             0193*  ; FatFS structures
000000             0194*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
000000             0195*  ;
000000             0196*  ; Object ID and allocation information (FFOBJID)
000000             0197*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
000000             0198*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
000000             0199*  FFOBJID.attr:     EQU 5    ; Object attribute
000000             0200*  FFOBJID.stat:     EQU 6    ; Object chain status
000000             0201*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
000000             0202*  FFOBJID.objsize:  EQU 11   ; Object size
000000             0203*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
000000             0204*  ;
000000             0205*  ; File object structure (FIL)
000000             0206*  ;
000000             0207*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
000000             0208*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
000000             0209*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
000000             0210*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
000000             0211*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
000000             0212*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
000000             0213*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
000000             0214*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
000000             0215*  FIL.obj.objsize:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
000000             0216*  ;
000000             0217*  ; Directory object structure (DIR)
000000             0218*  ;
000000             0219*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
000000             0220*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
000000             0221*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
000000             0222*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
000000             0223*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
000000             0224*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
000000             0225*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
000000             0226*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
000000             0227*  ;
000000             0228*  ; File information structure (FILINFO)
000000             0229*  ;
000000             0230*  FILINFO.fsize:    EQU 0    ; File size
000000             0231*  FILINFO.fdate:    EQU 4    ; Modified date
000000             0232*  FILINFO.ftime:    EQU 6    ; Modified time
000000             0233*  FILINFO.fattrib:  EQU 8    ; File attribute
000000             0234*  FILINFO.altname:  EQU 9    ; Alternative file name
000000             0235*  FILINFO.fname:    EQU 22   ; Primary file name
000000             0236*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
000000             0237*  ;
000000             0238*  ; Macro for calling the API
000000             0239*  ; Parameters:
000000             0240*  ; - function: One of the function numbers listed above
000000             0241*  ;
000000             0242*  			MACRO MOSCALL	function
000000             0243*  			LD	A, function
000000             0244*  			RST.LIS	08h
000000             0245*  			ENDMACRO
000000             0005       include "equs.inc"
000000             0001*  ; ; TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
000000             0002*  ; STAVAR: EQU 0
000000             0003*  ; ACCS: EQU 0
000000             0004*  ; ; END TEMPORARY LABELS FOR PIECEMEAL ASSEMBLY
000000             0005*  
000000             0006*  ;
000000             0007*  ; Title:	BBC Basic for AGON - Equs
000000             0008*  ; Author:	Dean Belfield
000000             0009*  ; Created:	04/12/2024
000000             0010*  ; Last Updated:	05/12/2024
000000             0011*  ;
000000             0012*  ; Modinfo:
000000             0013*  ; 05/12/2024:	Removed Stack_Top
000000             0014*  
000000             0015*  ;			XREF		STAVAR
000000             0016*  ;			XREF		ACCS
000000             0017*  
000000             0018*  RAM_Top:		EQU		0FF00h
000000             0019*  
000000             0020*  ; For GPIO
000000             0021*  ; PA not available on eZ80L92
000000             0022*  ;
000000             0023*  PA_DR:			EQU		96h
000000             0024*  PA_DDR:			EQU		97h
000000             0025*  PA_ALT1:		EQU		98h
000000             0026*  PA_ALT2:		EQU		99h
000000             0027*  PB_DR:          	EQU		9Ah
000000             0028*  PB_DDR:        	 	EQU		9Bh
000000             0029*  PB_ALT1:        	EQU		9Ch
000000             0030*  PB_ALT2:        	EQU		9Dh
000000             0031*  PC_DR:          	EQU		9Eh
000000             0032*  PC_DDR:         	EQU		9Fh
000000             0033*  PC_ALT1:        	EQU		A0h
000000             0034*  PC_ALT2:        	EQU		A1h
000000             0035*  PD_DR:          	EQU		A2h
000000             0036*  PD_DDR:			EQU		A3h
000000             0037*  PD_ALT1:		EQU		A4h
000000             0038*  PD_ALT2:		EQU		A5h
000000             0039*  
000000             0040*  GPIOMODE_OUT:		EQU		0	; Output
000000             0041*  GPIOMODE_IN:		EQU		1	; Input
000000             0042*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
000000             0043*  GPIOMODE_SIO:		EQU		3	; Open Source IO
000000             0044*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
000000             0045*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
000000             0046*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
000000             0047*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
000000             0048*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
000000             0049*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
000000             0050*  
000000             0051*  ; Originally in ram.asm
000000             0052*  ;
000000             0053*  ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%) ; back to data.asm
000000             0054*  ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%) ; back to data.asm
000000             0055*  ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; moved to data.asm
000000             0056*  
000000             0057*  ; Originally in main.asm
000000             0058*  ;
000000             0059*  CR:			EQU     0DH
000000             0060*  LF:			EQU     0AH
000000             0061*  ESC:			EQU     1BH
000000             0006       include "macros.inc"
000000             0001*  ;
000000             0002*  ; Title:	BBC Basic Interpreter - Z80 version
000000             0003*  ;		Useful macros
000000             0004*  ; Author:	Dean Belfield
000000             0005*  ; Created:	04/12/2024
000000             0006*  ; Last Updated:	04/12/2024
000000             0007*  ;
000000             0008*  ; Modinfo:
000000             0009*  
000000             0010*          MACRO EXREG rp1, rp2
000000             0011*          PUSH    rp1
000000             0012*          POP     rp2
000000             0013*          ENDMACRO
000000             0014*  
000000             0015*          MACRO ADD8U_DE ; reg
000000             0016*          ADD     A, E
000000             0017*          LD      E, A
000000             0018*          ADC     A, D
000000             0019*          SUB     E
000000             0020*          LD      D, A
000000             0021*          ENDMACRO
000000             0022*  
000000             0023*          MACRO ADD8U_HL ; reg
000000             0024*          ADD     A, L
000000             0025*          LD      L, A
000000             0026*          ADC     A, H
000000             0027*          SUB     L
000000             0028*          LD      H, A
000000             0029*          ENDMACRO
000000             0030*  
000000             0031*          MACRO VDU VAL
000000             0032*          LD      A, VAL
000000             0033*          CALL    OSWRCH
000000             0034*          ENDMACRO
000000             0035*  
000000             0036*          MACRO SET_GPIO REG, VAL
000000             0037*          IN0     A, (REG)
000000             0038*          OR      VAL
000000             0039*          OUT0    (REG), A
000000             0040*          ENDMACRO
000000             0041*  
000000             0042*          MACRO RES_GPIO REG, VAL
000000             0043*          PUSH    BC
000000             0044*          LD      A, VAL
000000             0045*          CPL
000000             0046*          LD      C, A
000000             0047*          IN0     A, (REG)
000000             0048*          AND     C
000000             0049*          OUT0    (REG), A
000000             0050*          POP     BC
000000             0051*          ENDMACRO
000000             0007       include "acorn.asm"
000000             0001*  ;
000000             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
000000             0003*  ;
000000             0004*                  .ASSUME ADL = 0
000000             0005*  ;	.ORG 0x0000
000000             0006*  ;                SEGMENT CODE
000000             0007*  ;
000000             0008*  ;PATCH FOR BBC BASIC TO CP/M 2.2 & 3.0
000000             0009*  ;* ACORN COMPUTERS Z80 TUBE VERSION  *
000000             0010*  ;(C) COPYRIGHT R.T.RUSSELL, 02-01-1984
000000             0011*  ;VERSION 5.0, 12-07-2024
000000             0012*  ;
000000             0013*  ;                XREF	OSWRCH
000000             0014*  ;                XREF	OSWORD
000000             0015*  ;                XREF	OSBYTE
000000             0016*  ;
000000             0017*  ; ESC            EQU	1BH
000000             0018*  TBY:            EQU	0FH
000000             0019*  ; TTO:            EQU	0B8H in main.asm
000000             0020*  TFILL:          EQU	03H
000000             0021*  ;
000000             0022*  ;                XREF	ITEMI
000000             0023*  ;                XREF	EXPRI
000000             0024*  ;                XREF	COMMA
000000             0025*  ;                XREF	TERMQ
000000             0026*  ;                XREF	BRAKET
000000             0027*  ;                XREF	EXTERR
000000             0028*  ;                XREF	STOREN
000000             0029*  ;                XREF	TRAP
000000             0030*  ;                XREF	VAR_
000000             0031*  ;                XREF	NXT
000000             0032*  ;                XREF	XEQ
000000             0033*  ;
000000             0034*  ;                XREF	ACCS
000000             0035*  ;                XREF	COUNT
000000             0036*  ;                XREF	WIDTH
000000             0037*  ;                XREF	SCRAP
000000             0038*  ;
000000             0039*  ;                XDEF	OSCALL
000000             0040*  ;                XDEF	CLRSCN
000000             0041*  ;                XDEF	PUTCSR
000000             0042*  ;                XDEF	GETCSR
000000             0043*  ;                XDEF	PUTIME
000000             0044*  ;                XDEF	GETIME
000000             0045*  ;                XDEF	OSKEY
000000             0046*  ;
000000             0047*  ;                XDEF	CLG
000000             0048*  ;                XDEF	MOVE
000000             0049*  ;                XDEF	DRAW
000000             0050*  ;                XDEF	PLOT
000000             0051*  ;                XDEF	MODE
000000             0052*  ;                XDEF	COLOUR
000000             0053*  ;                XDEF	GCOL
000000             0054*  ;                XDEF	ADVAL
000000             0055*  ;                XDEF	SOUND
000000             0056*  ;                XDEF	ENVEL
000000             0057*  ;                XDEF	POINT
000000             0058*  ;
000000             0059*  ;                XDEF	CIRCLE
000000             0060*  ;                XDEF	ELLIPS
000000             0061*  ;                XDEF	FILL
000000             0062*  ;                XDEF	MOUSE
000000             0063*  ;                XDEF	ORIGIN
000000             0064*  ;                XDEF	RECTAN
000000             0065*  ;                XDEF	LINE
000000             0066*  ;                XDEF	TINT
000000             0067*  ;                XDEF	WAIT
000000             0068*  ;                XDEF	SYS
000000             0069*  ;                XDEF	CSRON
000000             0070*  ;                XDEF	CSROFF
000000             0071*  ;
000000             0072*  ;                XDEF	PUTIMS
000000             0073*  ;                XDEF	GETIMS
000000             0074*  ;                XDEF	TINTFN
000000             0075*  ;                XDEF	MODEFN
000000             0076*  ;                XDEF	WIDFN
000000             0077*  ;
000000             0078*  ;GETIME	- Read elapsed-time clock.
000000             0079*  ;  	  Outputs:  DEHL = elapsed time (centiseconds)
000000             0080*  ; 	  Destroys: A,D,E,H,L,F
000000             0081*  ;
000000 3E 01       0082*  GETIME:         LD	A,1
000002 21 50 51    0083*                  LD	HL,SCRAP
000005 CD 88 14    0084*                  CALL	OSWORD
000008 21 50 51    0085*                  LD	HL,SCRAP
00000B 5E          0086*                  LD	E,(HL)
00000C 23          0087*                  INC	HL
00000D 56          0088*                  LD	D,(HL)
00000E 23          0089*                  INC	HL
00000F 7E          0090*                  LD	A,(HL)
000010 23          0091*                  INC	HL
000011 66          0092*                  LD	H,(HL)
000012 6F          0093*                  LD	L,A
000013 EB          0094*                  EX	DE,HL
000014 C9          0095*                  RET
000015             0096*  ;
000015             0097*  ;GETIMS	- Read real-time clock as string.
000015             0098*  ;  	  Outputs:  TIME$ in string accumulator
000015             0099*  ;                   E = string length (25)
000015             0100*  ; 	  Destroys: A,B,C,D,E,H,L,F
000015             0101*  ;
000015 3E 0E       0102*  GETIMS:         LD	A,14
000017 21 50 51    0103*                  LD	HL,SCRAP
00001A 36 00       0104*                  LD	(HL),0
00001C CD 88 14    0105*                  CALL	OSWORD
00001F 21 50 51    0106*                  LD	HL,SCRAP
000022 11 00 52    0107*                  LD	DE,ACCS
000025 7E          0108*                  LD	A,(HL)
000026 BB          0109*                  CP	E
000027 C8          0110*                  RET	Z
000028 01 19 00    0111*                  LD	BC,25
00002B ED B0       0112*                  LDIR
00002D C9          0113*                  RET
00002E             0114*  ;
00002E             0115*  ;
00002E             0116*  ;PUTIME	- Load elapsed-time clock.
00002E             0117*  ;   	  Inputs:   DEHL = time to load (centiseconds)
00002E             0118*  ; 	  Destroys: A,D,E,H,L,F
00002E             0119*  ;
00002E DD E5       0120*  PUTIME:         PUSH	IX
000030 DD 21 50 51 0121*                  LD	IX,SCRAP
000034 DD 75 00    0122*                  LD	(IX+0),L
000037 DD 74 01    0123*                  LD	(IX+1),H
00003A DD 73 02    0124*                  LD	(IX+2),E
00003D DD 72 03    0125*                  LD	(IX+3),D
000040 3E 02       0126*                  LD	A,2
000042 21 50 51    0127*                  LD	HL,SCRAP
000045 CD 88 14    0128*                  CALL	OSWORD
000048 DD E1       0129*                  POP	IX
00004A C9          0130*                  RET
00004B             0131*  ;
00004B             0132*  ;PUTIMS	- Wtite real-time clock as string.
00004B             0133*  ;  	  Inputs:   string in string accumulator
00004B             0134*  ;                   E = string length
00004B             0135*  ; 	  Destroys: A,B,C,D,E,H,L,F
00004B             0136*  ;
00004B 7B          0137*  PUTIMS:         LD	A,E		;Length
00004C FE 1A       0138*                  CP	26
00004E D0          0139*                  RET	NC
00004F 06 00       0140*                  LD	B,0
000051 4F          0141*                  LD	C,A
000052 11 51 51    0142*                  LD	DE,SCRAP+1
000055 21 00 52    0143*                  LD	HL,ACCS
000058 ED B0       0144*                  LDIR
00005A 21 50 51    0145*                  LD	HL,SCRAP
00005D 77          0146*                  LD	(HL),A
00005E 3E 0F       0147*                  LD	A,15
000060 C3 88 14    0148*                  JP	OSWORD
000063             0149*  ;
000063             0150*  ;
000063             0151*  ;CLRSCN	- Clear screen.
000063             0152*  ; 	  Destroys: A,D,E,H,L,F
000063             0153*  ;
000063 3E 0C       0154*  CLRSCN:         LD	A,0CH
000065 C3 CE 11    0155*                  JP	OSWRCH
000068             0156*  ;
000068             0157*  ;
000068             0158*  ;OSKEY	- Sample keyboard with specified wait.
000068             0159*  ;   	  Inputs:   HL = Time to wait (centiseconds)
000068             0160*  ;  	  Outputs:  Carry reset indicates time-out.
000068             0161*  ;                   If carry set, A = character typed.
000068             0162*  ; 	  Destroys: A,D,E,H,L,F
000068             0163*  ;
000068 3E 81       0164*  OSKEY:          LD	A,129
00006A CD A6 14    0165*                  CALL	OSBYTE
00006D 7C          0166*                  LD	A,H
00006E B7          0167*                  OR	A
00006F C0          0168*                  RET	NZ		;TIME-OUT, CARRY RESET
000070 7D          0169*                  LD	A,L
000071 37          0170*                  SCF
000072 C9          0171*                  RET			;NORMAL, CARRY SET
000073             0172*  ;
000073             0173*  ;PUTCSR	- Move cursor to specified position.
000073             0174*  ;   	  Inputs:   DE = horizontal position (LHS=0)
000073             0175*  ;                   HL = vertical position (TOP=0)
000073             0176*  ; 	  Destroys: A,D,E,H,L,F
000073             0177*  ;
000073 3E 1F       0178*  PUTCSR:         LD	A,1FH
000075 CD CE 11    0179*                  CALL	OSWRCH
000078 7B          0180*                  LD	A,E
000079 CD CE 11    0181*                  CALL	OSWRCH
00007C 7D          0182*                  LD	A,L
00007D C3 CE 11    0183*                  JP	OSWRCH
000080             0184*  ;
000080             0185*  ;GETCSR	- Return cursor coordinates.
000080             0186*  ;   	  Outputs:  DE = X coordinate (POS)
000080             0187*  ;                   HL = Y coordinate (VPOS)
000080             0188*  ;  	  Destroys: A,D,E,H,L,F
000080             0189*  ;
000080 3E 86       0190*  GETCSR:         LD	A,134
000082 CD A6 14    0191*                  CALL	OSBYTE
000085 5D          0192*                  LD	E,L
000086 6C          0193*                  LD	L,H
000087 16 00       0194*                  LD	D,0
000089 62          0195*                  LD	H,D
00008A C9          0196*                  RET
00008B             0197*  ;
00008B             0198*  ;POINT - var=POINT(x,y)
00008B             0199*  ;
00008B CD 6C 18    0200*  POINT:          CALL	EXPRI
00008E D9          0201*                  EXX
00008F E5          0202*                  PUSH	HL
000090 CD C8 03    0203*                  CALL	CEXPRI
000093 D9          0204*                  EXX
000094 D1          0205*                  POP	DE
000095 CD E7 20    0206*                  CALL	BRAKET
000098 DD 21 50 51 0207*                  LD	IX,SCRAP
00009C DD 73 00    0208*                  LD	(IX+0),E
00009F DD 72 01    0209*                  LD	(IX+1),D
0000A2 DD 75 02    0210*                  LD	(IX+2),L
0000A5 DD 74 03    0211*                  LD	(IX+3),H
0000A8 21 50 51    0212*                  LD	HL,SCRAP
0000AB 3E 09       0213*                  LD	A,9
0000AD CD 88 14    0214*                  CALL	OSWORD
0000B0 DD 7E 04    0215*                  LD	A,(IX+4)
0000B3 6F          0216*                  LD	L,A
0000B4 C6 01       0217*                  ADD	A,1
0000B6 9F          0218*                  SBC	A,A
0000B7 67          0219*                  LD	H,A
0000B8 D9          0220*  RETEXX:         EXX
0000B9 67          0221*                  LD	H,A
0000BA 6F          0222*                  LD	L,A
0000BB AF          0223*                  XOR	A
0000BC 4F          0224*                  LD	C,A
0000BD C9          0225*                  RET
0000BE             0226*  ;
0000BE             0227*  ;ADVAL - var=ADVAL(n)
0000BE             0228*  ;
0000BE CD 99 18    0229*  ADVAL:          CALL	ITEMI
0000C1 D9          0230*                  EXX
0000C2 3E 80       0231*                  LD	A,128
0000C4 CD A6 14    0232*                  CALL	OSBYTE
0000C7 AF          0233*                  XOR	A
0000C8 18 EE       0234*                  JR	RETEXX
0000CA             0235*  ;
0000CA             0236*  ;MODEFN - var=MODE
0000CA             0237*  ;
0000CA 3E 87       0238*  MODEFN:         LD	A,135
0000CC CD A6 14    0239*                  CALL	OSBYTE
0000CF 6C          0240*                  LD	L,H
0000D0 AF          0241*  RETU8:          XOR	A
0000D1 67          0242*                  LD	H,A
0000D2 18 E4       0243*                  JR	RETEXX
0000D4             0244*  ;
0000D4             0245*  ;WIDFN - var=WIDTH
0000D4             0246*  ;
0000D4 3A FC 54    0247*  WIDFN:          LD	A,(WIDTH)
0000D7 6F          0248*                  LD	L,A
0000D8 18 F6       0249*                  JR	RETU8
0000DA             0250*  ;
0000DA             0251*  ;ENVEL - ENVELOPE var,var,var,var,var,var,var,
0000DA             0252*  ;                 var,var,var,var,var,var,var
0000DA             0253*  ;
0000DA 06 00       0254*  ENVEL:          LD	B,0
0000DC DD 21 50 51 0255*                  LD	IX,SCRAP
0000E0 C5          0256*                  PUSH	BC
0000E1 DD E5       0257*                  PUSH	IX
0000E3 CD 6C 18    0258*  ENVEL1:         CALL	EXPRI
0000E6 D9          0259*                  EXX
0000E7 DD E1       0260*                  POP	IX
0000E9 C1          0261*                  POP	BC
0000EA DD 75 00    0262*                  LD	(IX),L
0000ED 78          0263*                  LD	A,B
0000EE FE 0D       0264*                  CP	13
0000F0 28 0B       0265*                  JR	Z,ENVEL2
0000F2 04          0266*                  INC	B
0000F3 DD 23       0267*                  INC	IX
0000F5 C5          0268*                  PUSH	BC
0000F6 DD E5       0269*                  PUSH	IX
0000F8 CD DB 20    0270*                  CALL	COMMA
0000FB 18 E6       0271*                  JR	ENVEL1
0000FD 21 50 51    0272*  ENVEL2:         LD	HL,SCRAP
000100 3E 08       0273*                  LD	A,8
000102 CD 88 14    0274*                  CALL	OSWORD
000105 C3 D2 24    0275*                  JP	XEQ
000108             0276*  ;
000108             0277*  ;SOUND - SOUND var,var,var,var
000108             0278*  ;
000108 06 00       0279*  SOUND:          LD	B,0
00010A DD 21 50 51 0280*                  LD	IX,SCRAP
00010E C5          0281*                  PUSH	BC
00010F DD E5       0282*                  PUSH	IX
000111 CD 6C 18    0283*  SOUND1:         CALL	EXPRI
000114 D9          0284*                  EXX
000115 DD E1       0285*                  POP	IX
000117 C1          0286*                  POP	BC
000118 DD 75 00    0287*                  LD	(IX+0),L
00011B DD 74 01    0288*                  LD	(IX+1),H
00011E DD 23       0289*                  INC	IX
000120 DD 23       0290*                  INC	IX
000122 04          0291*                  INC	B
000123 04          0292*                  INC	B
000124 78          0293*                  LD	A,B
000125 FE 08       0294*                  CP	8
000127 28 08       0295*                  JR	Z,SOUND2
000129 C5          0296*                  PUSH	BC
00012A DD E5       0297*                  PUSH	IX
00012C CD DB 20    0298*                  CALL	COMMA
00012F 18 E0       0299*                  JR	SOUND1
000131 21 50 51    0300*  SOUND2:         LD	HL,SCRAP
000134 3E 07       0301*                  LD	A,7
000136 CD 88 14    0302*                  CALL	OSWORD
000139 C3 D2 24    0303*                  JP	XEQ
00013C             0304*  ;
00013C             0305*  ;MODE - MODE n
00013C             0306*  ;
00013C CD 6C 18    0307*  MODE:           CALL	EXPRI
00013F AF          0308*                  XOR	A
000140 32 FB 54    0309*                  LD	(COUNT),A
000143 D9          0310*                  EXX
000144 65          0311*                  LD	H,L
000145 2E 16       0312*                  LD	L,22
000147 CD AF 03    0313*                  CALL	WRCH2
00014A 18 72       0314*                  JR	XEQGO1
00014C             0315*  ;
00014C             0316*  ;CLG
00014C             0317*  ;
00014C 3E 10       0318*  CLG:            LD	A,16
00014E CD CE 11    0319*                  CALL	OSWRCH
000151 18 6B       0320*                  JR	XEQGO1
000153             0321*  ;
000153             0322*  ;ORIGIN x,y
000153             0323*  ;
000153 CD 6C 18    0324*  ORIGIN:         CALL    EXPRI
000156 D9          0325*                  EXX
000157 E5          0326*                  PUSH	HL
000158 CD C8 03    0327*                  CALL    CEXPRI
00015B D9          0328*                  EXX
00015C D1          0329*                  POP	DE
00015D 0E 1D       0330*                  LD	C,29
00015F CD A3 03    0331*                  CALL	WRCH5
000162 18 5A       0332*                  JR	XEQGO1
000164             0333*  ;
000164             0334*  ;COLOUR n
000164             0335*  ;COLOUR n,p
000164             0336*  ;COLOUR n,r,g,b
000164             0337*  ;
000164 CD 6C 18    0338*  COLOUR:         CALL	EXPRI		;n
000167 D9          0339*                  EXX
000168 FD 7E 00    0340*                  LD	A,(IY)
00016B FE 2C       0341*                  CP	','
00016D 28 08       0342*                  JR      Z,PALCOL
00016F 65          0343*                  LD	H,L
000170 2E 11       0344*                  LD	L,17
000172 CD AF 03    0345*                  CALL	WRCH2
000175 18 47       0346*                  JR	XEQGO1
000177             0347*  ;
000177 E5          0348*  PALCOL:         PUSH	HL
000178 CD C8 03    0349*                  CALL	CEXPRI		;p or r
00017B D9          0350*                  EXX
00017C EB          0351*                  EX	DE,HL
00017D 21 00 00    0352*                  LD	HL,0
000180 FD 7E 00    0353*                  LD	A,(IY)
000183 FE 2C       0354*                  CP	','
000185 20 15       0355*                  JR	NZ,PALET1
000187 D5          0356*                  PUSH	DE
000188 CD C8 03    0357*                  CALL	CEXPRI		;g
00018B D9          0358*                  EXX
00018C E5          0359*                  PUSH	HL
00018D CD C8 03    0360*                  CALL	CEXPRI		;b
000190 D9          0361*                  EXX
000191 D1          0362*                  POP	DE
000192 C1          0363*                  POP	BC
000193 7D          0364*                  LD	A,L
000194 E1          0365*                  POP	HL
000195 51          0366*                  LD	D,C		;r
000196 4D          0367*                  LD	C,L		;n
000197 6B          0368*                  LD	L,E		;g
000198 67          0369*                  LD	H,A		;b
000199 1E 10       0370*                  LD	E,16
00019B C5          0371*                  PUSH	BC
00019C C1          0372*  PALET1:         POP	BC
00019D 06 13       0373*                  LD	B,19
00019F CD 9F 03    0374*                  CALL	WRCH6
0001A2 18 1A       0375*                  JR	XEQGO1
0001A4             0376*  ;
0001A4             0377*  ;GCOL [a,]b
0001A4             0378*  ;
0001A4 CD 6C 18    0379*  GCOL:           CALL	EXPRI
0001A7 D9          0380*                  EXX
0001A8 1E 00       0381*                  LD	E,0
0001AA FD 7E 00    0382*                  LD	A,(IY)
0001AD FE 2C       0383*                  CP	','
0001AF 20 06       0384*                  JR	NZ,GCOL0
0001B1 E5          0385*                  PUSH	HL
0001B2 CD C8 03    0386*                  CALL	CEXPRI
0001B5 D9          0387*                  EXX
0001B6 D1          0388*                  POP	DE
0001B7 65          0389*  GCOL0:          LD	H,L
0001B8 6B          0390*                  LD	L,E
0001B9 16 12       0391*                  LD	D,18
0001BB CD AB 03    0392*                  CALL	WRCH3		;DLH
0001BE C3 D2 24    0393*  XEQGO1:         JP	XEQ
0001C1             0394*  ;
0001C1             0395*  ;CSRON  - Turn caret on
0001C1             0396*  ;CSROFF - Turn caret off
0001C1             0397*  ;
0001C1 0E 01       0398*  CSRON:          LD	C,1
0001C3 18 02       0399*                  JR	CSRGO
0001C5             0400*  ;
0001C5 0E 00       0401*  CSROFF:         LD	C,0
0001C7 3E 17       0402*  CSRGO:          LD	A,23
0001C9 CD CE 11    0403*                  CALL	OSWRCH
0001CC 3E 01       0404*                  LD	A,1
0001CE CD CE 11    0405*                  CALL	OSWRCH
0001D1 79          0406*                  LD	A,C
0001D2 06 08       0407*                  LD	B,8
0001D4 CD CE 11    0408*  CSRGO1:         CALL	OSWRCH
0001D7 AF          0409*                  XOR	A
0001D8 10 FA       0410*                  DJNZ	CSRGO1
0001DA 18 E2       0411*                  JR	XEQGO1
0001DC             0412*  ;
0001DC             0413*  ;LINE x1,y1,x2,y2
0001DC             0414*  ;
0001DC CD 6C 18    0415*  LINE:           CALL	EXPRI
0001DF D9          0416*                  EXX
0001E0 E5          0417*                  PUSH	HL
0001E1 CD B7 03    0418*                  CALL	EXPR3
0001E4 E3          0419*                  EX	(SP),HL		;HL <- x1, (SP) <- y2
0001E5 C5          0420*                  PUSH	BC
0001E6 EB          0421*                  EX	DE,HL
0001E7 0E 04       0422*                  LD	C,4
0001E9 CD 9D 03    0423*                  CALL	VDU25
0001EC D1          0424*                  POP	DE
0001ED E1          0425*                  POP	HL
0001EE 0E 05       0426*                  LD	C,5
0001F0 18 2A       0427*                  JR	PLOT4A
0001F2             0428*  ;
0001F2             0429*  ;CIRCLE [FILL] x,y,r
0001F2             0430*  ;
0001F2 FE 03       0431*  CIRCLE:         CP	TFILL
0001F4 F5          0432*                  PUSH	AF
0001F5 20 02       0433*                  JR	NZ,CIRCL0
0001F7 FD 23       0434*                  INC	IY
0001F9 CD 6C 18    0435*  CIRCL0:         CALL	EXPRI
0001FC D9          0436*                  EXX
0001FD E5          0437*                  PUSH	HL
0001FE CD C8 03    0438*                  CALL	CEXPRI
000201 D9          0439*                  EXX
000202 E5          0440*                  PUSH	HL
000203 CD C8 03    0441*                  CALL	CEXPRI
000206 D9          0442*                  EXX
000207 C1          0443*                  POP	BC		;y
000208 D1          0444*                  POP	DE		;x
000209 E5          0445*                  PUSH	HL
00020A 69          0446*                  LD	L,C
00020B 60          0447*                  LD	H,B
00020C 0E 04       0448*                  LD	C,4		; PLOT 4 = MOVE
00020E CD 9D 03    0449*                  CALL	VDU25
000211 D1          0450*                  POP	DE		;r
000212 21 00 00    0451*                  LD	HL,0
000215 F1          0452*                  POP	AF
000216 0E 91       0453*                  LD	C,145		; PLOT 145 = outline circle
000218 20 02       0454*                  JR	NZ,PLOT4A
00021A 0E 99       0455*                  LD	C,153		; PLOT 153 = filled circle
00021C 18 6C       0456*  PLOT4A:         JR	PLOT4
00021E             0457*  ;
00021E             0458*  ;ELLIPSE [FILL] x,y,a,b
00021E             0459*  ;
00021E FE 03       0460*  ELLIPS:         CP	TFILL
000220 F5          0461*                  PUSH	AF
000221 20 02       0462*                  JR	NZ,ELLIP0
000223 FD 23       0463*                  INC	IY
000225 CD 6C 18    0464*  ELLIP0:         CALL	EXPRI
000228 D9          0465*                  EXX
000229 E5          0466*                  PUSH	HL
00022A CD B7 03    0467*                  CALL	EXPR3
00022D E3          0468*                  EX	(SP),HL		;HL <- x, (SP) <- b
00022E C5          0469*                  PUSH	BC
00022F EB          0470*                  EX	DE,HL
000230 0E 04       0471*                  LD	C,4		; PLOT 4 = Move absolute
000232 CD 9D 03    0472*                  CALL	VDU25
000235 D1          0473*                  POP	DE		;a
000236 D5          0474*                  PUSH	DE
000237 21 00 00    0475*                  LD	HL,0
00023A 4D          0476*                  LD	C,L		; PLOT 0 - Move relative
00023B CD 9D 03    0477*                  CALL	VDU25
00023E D1          0478*                  POP	DE		;a
00023F AF          0479*                  XOR	A
000240 6F          0480*                  LD	L,A
000241 67          0481*                  LD	H,A
000242 ED 52       0482*                  SBC	HL,DE
000244 EB          0483*                  EX	DE,HL
000245 E1          0484*                  POP	HL		;b
000246 F1          0485*                  POP	AF
000247 0E C1       0486*                  LD	C,193		; PLOT 193 = outline ellipse
000249 20 3F       0487*                  JR	NZ,PLOT4
00024B 0E C9       0488*                  LD	C,201		; PLOT 201 = filled ellipse
00024D 18 3B       0489*                  JR	PLOT4
00024F             0490*  ;
00024F             0491*  ;MOVE [BY} x,y
00024F             0492*  ;DRAW [BY] x,y
00024F             0493*  ;PLOT [BY] [n,]x,y
00024F             0494*  ;FILL [BY] x,y
00024F             0495*  ;
00024F 0E 04       0496*  MOVE:           LD	C,4
000251 18 23       0497*                  JR	PLOT1
000253             0498*  ;
000253 0E 05       0499*  DRAW:           LD	C,5
000255 18 1F       0500*                  JR	PLOT1
000257             0501*  ;
000257 0E 85       0502*  FILL:           LD	C,133
000259 18 1B       0503*                  JR	PLOT1
00025B             0504*  ;
00025B 0E 45       0505*  PLOT:           LD	C,69
00025D FE 0F       0506*                  CP	TBY
00025F 28 15       0507*                  JR	Z,PLOT1
000261 CD 6C 18    0508*                  CALL	EXPRI
000264 D9          0509*                  EXX
000265 E5          0510*                  PUSH	HL
000266 CD C8 03    0511*                  CALL	CEXPRI
000269 D9          0512*                  EXX
00026A FD 7E 00    0513*                  LD	A,(IY)
00026D FE 2C       0514*                  CP	','
00026F 28 12       0515*                  JR	Z,PLOT3
000271 D1          0516*                  POP	DE
000272 0E 45       0517*                  LD	C,69
000274 18 14       0518*                  JR	PLOT4
000276             0519*  ;
000276 FE 0F       0520*  PLOT1:          CP	TBY
000278 20 04       0521*                  JR	NZ,PLOT2
00027A FD 23       0522*                  INC	IY
00027C CB 91       0523*                  RES	2,C		;Change absolute to relative
00027E C5          0524*  PLOT2:          PUSH	BC
00027F CD 6C 18    0525*                  CALL	EXPRI
000282 D9          0526*                  EXX
000283 E5          0527*  PLOT3:          PUSH	HL
000284 CD C8 03    0528*                  CALL	CEXPRI
000287 D9          0529*                  EXX
000288 D1          0530*                  POP	DE
000289 C1          0531*                  POP	BC
00028A CD 9D 03    0532*  PLOT4:          CALL	VDU25
00028D C3 D2 24    0533*                  JP	XEQ
000290             0534*  ;
000290             0535*  ;RECTANGLE [FILL] x,y,w[,h] [TO xnew,ynew]
000290             0536*  ;
000290 FE 03       0537*  RECTAN:         CP	TFILL
000292 F5          0538*                  PUSH	AF
000293 20 02       0539*                  JR	NZ,RECT0
000295 FD 23       0540*                  INC	IY
000297 CD 6C 18    0541*  RECT0:          CALL	EXPRI
00029A D9          0542*                  EXX
00029B E5          0543*                  PUSH	HL
00029C CD C8 03    0544*                  CALL	CEXPRI
00029F D9          0545*                  EXX
0002A0 E5          0546*                  PUSH	HL
0002A1 CD C8 03    0547*                  CALL	CEXPRI
0002A4 D9          0548*                  EXX
0002A5 E5          0549*                  PUSH	HL
0002A6 FD 7E 00    0550*                  LD	A,(IY)
0002A9 FE 2C       0551*                  CP	','
0002AB 20 04       0552*                  JR	NZ,RECT1
0002AD CD C8 03    0553*                  CALL	CEXPRI
0002B0 D9          0554*                  EXX
0002B1 C1          0555*  RECT1:          POP	BC		;w
0002B2 D1          0556*                  POP	DE		;y
0002B3 E3          0557*                  EX	(SP),HL		;HL <- x, (SP) <- h
0002B4 C5          0558*                  PUSH	BC
0002B5 EB          0559*                  EX	DE,HL
0002B6 0E 04       0560*                  LD	C,4
0002B8 CD 9D 03    0561*                  CALL	VDU25
0002BB FD 7E 00    0562*                  LD	A,(IY)
0002BE FE B8       0563*                  CP	TTO
0002C0 28 09       0564*                  JR	Z,RECTTO
0002C2 D1          0565*                  POP	DE		;w
0002C3 E1          0566*                  POP	HL		;h
0002C4 F1          0567*                  POP	AF
0002C5 20 22       0568*                  JR	NZ,OUTLIN
0002C7 0E 61       0569*                  LD	C,97
0002C9 18 BF       0570*                  JR	PLOT4
0002CB             0571*  ;
0002CB             0572*  ;Block copy / move:
0002CB             0573*  ;
0002CB FD 23       0574*  RECTTO:         INC	IY		; Bump over TO
0002CD CD 6C 18    0575*                  CALL	EXPRI
0002D0 D9          0576*                  EXX
0002D1 E5          0577*                  PUSH	HL
0002D2 CD C8 03    0578*                  CALL	CEXPRI
0002D5 D9          0579*                  EXX
0002D6 C1          0580*                  POP	BC		;newx
0002D7 D1          0581*                  POP	DE		;w
0002D8 E3          0582*                  EX	(SP),HL		;HL <- h, (SP) <- newy
0002D9 C5          0583*                  PUSH	BC
0002DA 0E 00       0584*                  LD	C,0
0002DC CD 9D 03    0585*                  CALL	VDU25
0002DF D1          0586*                  POP	DE		;newx
0002E0 E1          0587*                  POP	HL		;newy
0002E1 F1          0588*                  POP	AF
0002E2 0E BE       0589*                  LD	C,190		; PLOT 190 - Block copy
0002E4 20 01       0590*                  JR	NZ,PLOT4B
0002E6 0D          0591*                  DEC	C		; PLOT 189 - Block move
0002E7 18 A1       0592*  PLOT4B:         JR	PLOT4
0002E9             0593*  ;
0002E9             0594*  ;Outline rectangle:
0002E9             0595*  ;
0002E9 0E 09       0596*  OUTLIN:         LD	C,9		; PLOT 9 - draw relative
0002EB E5          0597*                  PUSH	HL
0002EC 21 00 00    0598*                  LD	HL,0
0002EF CD 9D 03    0599*                  CALL	VDU25		; side 1
0002F2 E1          0600*                  POP	HL
0002F3 D5          0601*                  PUSH	DE
0002F4 11 00 00    0602*                  LD	DE,0
0002F7 CD 9D 03    0603*                  CALL	VDU25		; side 2
0002FA D1          0604*                  POP	DE
0002FB E5          0605*                  PUSH	HL
0002FC AF          0606*                  XOR	A
0002FD 6F          0607*                  LD	L,A
0002FE 67          0608*                  LD	H,A
0002FF ED 52       0609*                  SBC	HL,DE
000301 EB          0610*                  EX	DE,HL
000302 6F          0611*                  LD	L,A
000303 67          0612*                  LD	H,A
000304 CD 9D 03    0613*                  CALL 	VDU25		; side 3
000307 D1          0614*                  POP	DE
000308 AF          0615*                  XOR	A
000309 6F          0616*                  LD	L,A
00030A 67          0617*                  LD	H,A
00030B ED 52       0618*                  SBC	HL,DE
00030D 5F          0619*                  LD	E,A
00030E 57          0620*                  LD	D,A
00030F 18 D6       0621*                  JR	PLOT4B
000311             0622*  ;
000311             0623*  ;MOUSE x, y, b
000311             0624*  ;
000311 3E 80       0625*  MOUSE:          LD	A,128
000313 21 09 00    0626*                  LD	HL,9
000316 CD A6 14    0627*                  CALL	OSBYTE
000319 E5          0628*                  PUSH	HL
00031A 3E 80       0629*                  LD	A,128
00031C 21 08 00    0630*                  LD	HL,8
00031F CD A6 14    0631*                  CALL	OSBYTE
000322 E5          0632*                  PUSH	HL
000323 3E 80       0633*                  LD	A,128
000325 21 07 00    0634*                  LD	HL,7
000328 CD A6 14    0635*                  CALL	OSBYTE
00032B E5          0636*                  PUSH	HL
00032C CD 0F 26    0637*                  CALL	VAR_
00032F E1          0638*                  POP	HL
000330 CD CE 03    0639*                  CALL	STOREI
000333 CD DB 20    0640*                  CALL	COMMA
000336 CD 44 45    0641*                  CALL	NXT
000339 CD 0F 26    0642*                  CALL	VAR_
00033C E1          0643*                  POP	HL
00033D CD CE 03    0644*                  CALL	STOREI
000340 CD DB 20    0645*                  CALL	COMMA
000343 CD 44 45    0646*                  CALL	NXT
000346 CD 0F 26    0647*                  CALL	VAR_
000349 E1          0648*                  POP	HL
00034A CD CE 03    0649*                  CALL	STOREI
00034D C3 D2 24    0650*  XEQGO2:         JP	XEQ
000350             0651*  ;
000350             0652*  ;WAIT [n]
000350             0653*  ;
000350 CD 6F 35    0654*  WAIT:           CALL	TERMQ
000353 28 F8       0655*                  JR	Z,XEQGO2
000355 CD 6C 18    0656*                  CALL	EXPRI
000358 D9          0657*                  EXX
000359 44          0658*                  LD	B,H
00035A 4D          0659*                  LD	C,L
00035B CD 00 00    0660*                  CALL	GETIME
00035E 09          0661*                  ADD	HL,BC
00035F 01 00 00    0662*                  LD	BC,0
000362 EB          0663*                  EX	DE,HL
000363 ED 4A       0664*                  ADC	HL,BC
000365 EB          0665*                  EX	DE,HL
000366 CD 50 12    0666*  WAIT1:          CALL	TRAP
000369 D5          0667*                  PUSH	DE
00036A E5          0668*                  PUSH	HL
00036B CD 00 00    0669*                  CALL	GETIME
00036E C1          0670*                  POP	BC
00036F B7          0671*                  OR	A
000370 ED 42       0672*                  SBC	HL,BC
000372 60          0673*                  LD	H,B
000373 69          0674*                  LD	L,C
000374 EB          0675*                  EX	DE,HL
000375 C1          0676*                  POP	BC
000376 ED 42       0677*                  SBC	HL,BC
000378 30 D3       0678*                  JR	NC,XEQGO2
00037A EB          0679*                  EX	DE,HL
00037B 50          0680*                  LD	D,B
00037C 59          0681*                  LD	E,C
00037D 18 E7       0682*                  JR	WAIT1
00037F             0683*  ;
00037F             0684*  ;OSCALL - Trap call to FFxx
00037F             0685*  ;
00037F E1          0686*  OSCALL:         POP	HL		;DITCH RETURN ADDRESS
000380 21 92 03    0687*                  LD	HL,OSRET
000383 E5          0688*                  PUSH	HL		;NEW RETURN ADDRESS
000384 DD 7E 04    0689*                  LD	A,(IX+4)	;A%
000387 DD 5E 14    0690*                  LD	E,(IX+20)	;E%
00038A DD 66 64    0691*                  LD	H,(IX+100)	;Y%
00038D DD 6E 60    0692*                  LD	L,(IX+96)	;X%
000390 FD E9       0693*                  JP	(IY)
000392 F5          0694*  OSRET:          PUSH	AF
000393 7D          0695*                  LD	A,L		;F  H  L  A
000394 6C          0696*                  LD	L,H		;|  |  |  |
000395 D9          0697*                  EXX			;|  |  |  |
000396 C1          0698*                  POP	BC		;|  |  |  |
000397 67          0699*                  LD	H,A		;|  |  |  |
000398 68          0700*                  LD	L,B		;H  L  H' L'
000399 79          0701*                  LD	A,C
00039A D9          0702*                  EXX
00039B 67          0703*                  LD	H,A
00039C C9          0704*                  RET
00039D             0705*  ;
00039D 06 19       0706*  VDU25:          LD	B,25
00039F 78          0707*  WRCH6:          LD	A,B
0003A0 CD CE 11    0708*                  CALL	OSWRCH
0003A3 79          0709*  WRCH5:          LD	A,C
0003A4 CD CE 11    0710*                  CALL	OSWRCH
0003A7 7B          0711*  WRCH4:          LD	A,E
0003A8 CD CE 11    0712*                  CALL	OSWRCH
0003AB 7A          0713*  WRCH3:          LD	A,D
0003AC CD CE 11    0714*                  CALL	OSWRCH
0003AF 7D          0715*  WRCH2:          LD	A,L
0003B0 CD CE 11    0716*                  CALL	OSWRCH
0003B3 7C          0717*                  LD	A,H
0003B4 C3 CE 11    0718*                  JP	OSWRCH
0003B7             0719*  ;
0003B7 CD C8 03    0720*  EXPR3:          CALL	CEXPRI
0003BA D9          0721*                  EXX
0003BB E5          0722*                  PUSH	HL
0003BC CD C8 03    0723*                  CALL	CEXPRI
0003BF D9          0724*                  EXX
0003C0 E5          0725*                  PUSH	HL
0003C1 CD C8 03    0726*                  CALL	CEXPRI
0003C4 D9          0727*                  EXX
0003C5 C1          0728*                  POP	BC		;x2
0003C6 D1          0729*                  POP	DE		;y1
0003C7 C9          0730*                  RET
0003C8             0731*  ;
0003C8 CD DB 20    0732*  CEXPRI:         CALL	COMMA
0003CB C3 6C 18    0733*                  JP	EXPRI
0003CE             0734*  ;
0003CE CB 7F       0735*  STOREI:         BIT	7,A
0003D0 20 0C       0736*                  JR	NZ,EEK
0003D2 CB 77       0737*                  BIT	6,A
0003D4 20 08       0738*                  JR	NZ,EEK
0003D6 D9          0739*                  EXX
0003D7 21 00 00    0740*                  LD	HL,0
0003DA 4D          0741*                  LD	C,L
0003DB C3 29 32    0742*                  JP	STOREN
0003DE             0743*  ;
0003DE 3E 32       0744*  EEK:            LD	A,50
0003E0 CD 8E 3F    0745*                  CALL	EXTERR
0003E3 13          0746*                  DB	13H		;'Bad '
0003E4 04          0747*                  DB	04H		;'MOUSE'
0003E5 20          0748*                  DB	20H
0003E6 15          0749*                  DB	15H		;'variable'
0003E7 00          0750*                  DB	0
0003E8             0751*  ;
0003E8             0752*  TINT:
0003E8             0753*  TINTFN:
0003E8             0754*  SYS:
0003E8 AF          0755*                  XOR	A
0003E9 CD 8E 3F    0756*                  CALL	EXTERR
0003EC 53 6F 72 72 0757*                  DB	"Sorry"
       79          
0003F1 00          0758*                  DB	0
0003F2             0759*  ;
0003F2             0760*  ;                END
0003F2             0761*  ;    include "acorn.inc"
0003F2             0008       include "asmb.asm"
0003F2             0001*  ;
0003F2             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
0003F2             0003*  ;
0003F2             0004*                  .ASSUME ADL = 0
0003F2             0005*  ;	.ORG 0x0000
0003F2             0006*  ;                SEGMENT CODE
0003F2             0007*  ;
0003F2             0008*  ;BBC BASIC INTERPRETER - Z80 VERSION
0003F2             0009*  ;Z80 CPU ASSEMBLER MODULE - "ASMB"
0003F2             0010*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0003F2             0011*  ;
0003F2             0012*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0003F2             0013*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0003F2             0014*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0003F2             0015*  ;
0003F2             0016*  ;VERSION 5.0, 14-05-2024
0003F2             0017*  ;
0003F2             0018*  ;                XDEF	ASSEM
0003F2             0019*  ;
0003F2             0020*  ;                XREF	TABIT
0003F2             0021*  ;                XREF	CRLF
0003F2             0022*  ;                XREF	OUT
0003F2             0023*  ;                XREF	VAR_
0003F2             0024*  ;                XREF	ZERO
0003F2             0025*  ;                XREF	STOREN
0003F2             0026*  ;                XREF	ERROR_
0003F2             0027*  ;                XREF	EXPRI
0003F2             0028*  ;                XREF	EXPRS
0003F2             0029*  ;
0003F2             0030*  ;                XREF	LISTON
0003F2             0031*  ;                XREF	COUNT
0003F2             0032*  ;                XREF	ACCS
0003F2             0033*  ;                XREF	OC
0003F2             0034*  ;                XREF	PC
0003F2             0035*  ;
0003F2             0036*  ; CR             EQU	0DH	; in equs.inc
0003F2             0037*  TAND:           EQU	80H
0003F2             0038*  TOR:            EQU	84H
0003F2             0039*  ; TERROR:         EQU	85H	; in exec.asm
0003F2             0040*  TCALL:          EQU	0D6H
0003F2             0041*  TDEF:           EQU	0DDH
0003F2             0042*  ;
0003F2             0043*  ;ASSEMBLER:
0003F2             0044*  ;LANGUAGE-INDEPENDENT CONTROL SECTION:
0003F2             0045*  ; Outputs: A=delimiter, carry set if syntax error.
0003F2             0046*  ;
0003F2 CD 7A 07    0047*  ASSEM:          CALL	SKIP
0003F5 FD 23       0048*                  INC	IY
0003F7 FE 3A       0049*                  CP	':'
0003F9 28 F7       0050*                  JR	Z,ASSEM
0003FB FE 5D       0051*                  CP	']'
0003FD C8          0052*                  RET	Z
0003FE FE 0D       0053*                  CP	CR
000400 C8          0054*                  RET	Z
000401 FD 2B       0055*                  DEC	IY
000403 DD 2A 40 54 0056*                  LD	IX,(PC)		;PROGRAM COUNTER
000407 21 FE 54    0057*                  LD	HL,LISTON
00040A CB 76       0058*                  BIT	6,(HL)
00040C 28 04       0059*                  JR	Z,ASSEM0
00040E DD 2A 3C 54 0060*                  LD	IX,(OC)		;ORIGIN of CODE
000412 DD E5       0061*  ASSEM0:         PUSH	IX
000414 FD E5       0062*                  PUSH	IY
000416 CD A6 04    0063*                  CALL	ASMB
000419 C1          0064*                  POP	BC
00041A D1          0065*                  POP	DE
00041B D8          0066*                  RET	C
00041C CD 7A 07    0067*                  CALL	SKIP
00041F 37          0068*                  SCF
000420 C0          0069*                  RET	NZ
000421 FD 2B       0070*                  DEC	IY
000423 FD 23       0071*  ASSEM3:         INC	IY
000425 FD 7E 00    0072*                  LD	A,(IY)
000428 CD 9E 07    0073*                  CALL	TERM0
00042B 20 F6       0074*                  JR	NZ,ASSEM3
00042D 3A FE 54    0075*                  LD	A,(LISTON)
000430 DD E5       0076*                  PUSH	IX
000432 E1          0077*                  POP	HL
000433 B7          0078*                  OR	A
000434 ED 52       0079*                  SBC	HL,DE
000436 EB          0080*                  EX	DE,HL		;DE= NO. OF BYTES
000437 E5          0081*                  PUSH	HL
000438 2A 40 54    0082*                  LD	HL,(PC)
00043B E5          0083*                  PUSH	HL
00043C 19          0084*                  ADD	HL,DE
00043D 22 40 54    0085*                  LD	(PC),HL		;UPDATE PC
000440 CB 77       0086*                  BIT	6,A
000442 28 07       0087*                  JR	Z,ASSEM5
000444 2A 3C 54    0088*                  LD	HL,(OC)
000447 19          0089*                  ADD	HL,DE
000448 22 3C 54    0090*                  LD	(OC),HL		;UPDATE OC
00044B E1          0091*  ASSEM5:         POP	HL		;OLD PC
00044C DD E1       0092*                  POP	IX		;CODE HERE
00044E CB 67       0093*                  BIT	4,A
000450 28 A0       0094*                  JR	Z,ASSEM
000452 7C          0095*                  LD	A,H
000453 CD 92 04    0096*                  CALL	HEX
000456 7D          0097*                  LD	A,L
000457 CD 8B 04    0098*                  CALL	HEXSP
00045A AF          0099*                  XOR	A
00045B BB          0100*                  CP	E
00045C 28 15       0101*                  JR	Z,ASSEM2
00045E 3A FB 54    0102*  ASSEM1:         LD	A,(COUNT)
000461 FE 11       0103*                  CP	17
000463 3E 05       0104*                  LD	A,5
000465 D4 B6 35    0105*                  CALL	NC,TABIT	;NEXT LINE
000468 DD 7E 00    0106*                  LD	A,(IX)
00046B CD 8B 04    0107*                  CALL	HEXSP
00046E DD 23       0108*                  INC	IX
000470 1D          0109*                  DEC	E
000471 20 EB       0110*                  JR	NZ,ASSEM1
000473 3E 12       0111*  ASSEM2:         LD	A,18
000475 CD B6 35    0112*                  CALL	TABIT
000478 FD E5       0113*                  PUSH	IY
00047A E1          0114*                  POP	HL
00047B ED 42       0115*                  SBC	HL,BC
00047D 0A          0116*  ASSEM4:         LD	A,(BC)
00047E CD 54 41    0117*                  CALL	OUT
000481 03          0118*                  INC	BC
000482 2D          0119*                  DEC	L
000483 20 F8       0120*                  JR	NZ,ASSEM4
000485 CD 34 41    0121*                  CALL	CRLF
000488 C3 F2 03    0122*                  JP	ASSEM
00048B             0123*  ;
00048B CD 92 04    0124*  HEXSP:          CALL	HEX
00048E 3E 20       0125*                  LD	A,' '
000490 18 11       0126*                  JR	OUTCH1
000492 F5          0127*  HEX:            PUSH	AF
000493 0F          0128*                  RRCA
000494 0F          0129*                  RRCA
000495 0F          0130*                  RRCA
000496 0F          0131*                  RRCA
000497 CD 9B 04    0132*                  CALL	HEXOUT
00049A F1          0133*                  POP	AF
00049B E6 0F       0134*  HEXOUT:         AND	0FH
00049D C6 90       0135*                  ADD	A,90H
00049F 27          0136*                  DAA
0004A0 CE 40       0137*                  ADC	A,40H
0004A2 27          0138*                  DAA
0004A3 C3 54 41    0139*  OUTCH1:         JP	OUT
0004A6             0140*  ;
0004A6             0141*  ;PROCESSOR-SPECIFIC TRANSLATION SECTION:
0004A6             0142*  ;
0004A6             0143*  ;REGISTER USAGE: B - TYPE OF MOST RECENT OPERAND
0004A6             0144*  ;                C - OPCODE BEING BUILT
0004A6             0145*  ;                D - (IX) OR (IY) FLAG
0004A6             0146*  ;                E - OFFSET FROM IX OR IY
0004A6             0147*  ;               HL - NUMERIC OPERAND VALUE
0004A6             0148*  ;               IX - CODE DESTINATION
0004A6             0149*  ;               IY - SOURCE TEXT POINTER
0004A6             0150*  ;   Inputs: A = initial character
0004A6             0151*  ;  Outputs: Carry set if syntax error.
0004A6             0152*  ;
0004A6 FE 2E       0153*  ASMB:           CP	'.'
0004A8 20 28       0154*                  JR	NZ,ASMB1
0004AA FD 23       0155*                  INC	IY
0004AC DD E5       0156*                  PUSH	IX
0004AE CD 0F 26    0157*                  CALL	VAR_
0004B1 F5          0158*                  PUSH	AF
0004B2 CD 31 20    0159*                  CALL	ZERO
0004B5 D9          0160*                  EXX
0004B6 2A 40 54    0161*                  LD	HL,(PC)
0004B9 D9          0162*                  EXX
0004BA 3A FE 54    0163*                  LD	A,(LISTON)
0004BD E6 20       0164*                  AND	20H
0004BF 20 0B       0165*                  JR	NZ,ASMB0
0004C1 DD 7E 00    0166*                  LD	A,(IX)
0004C4 DD B6 01    0167*                  OR	(IX+1)
0004C7 3E 03       0168*                  LD	A,3
0004C9 C2 7D 3F    0169*                  JP	NZ,ERROR_	;Multiple label
0004CC F1          0170*  ASMB0:          POP	AF
0004CD CD 29 32    0171*                  CALL	STOREN
0004D0 DD E1       0172*                  POP	IX
0004D2 CD 7A 07    0173*  ASMB1:          CALL	SKIP
0004D5 C8          0174*                  RET	Z
0004D6 FE D6       0175*                  CP	TCALL
0004D8 0E C4       0176*                  LD	C,0C4H
0004DA FD 23       0177*                  INC	IY
0004DC CA C9 05    0178*                  JP	Z,GRPC
0004DF FD 2B       0179*                  DEC	IY
0004E1 21 A4 07    0180*                  LD	HL,OPCODS
0004E4 CD 31 07    0181*                  CALL	FIND
0004E7 D8          0182*                  RET	C
0004E8 48          0183*                  LD	C,B	;ROOT OPCODE
0004E9 16 00       0184*                  LD	D,0	;CLEAR IX/IY FLAG
0004EB             0185*  ;
0004EB             0186*  ;GROUP 0 - TRIVIAL CASES REQUIRING NO COMPUTATION
0004EB             0187*  ;GROUP 1 - AS GROUP 0 BUT WITH "ED" PREFIX
0004EB             0188*  ;
0004EB D6 27       0189*                  SUB	39
0004ED 30 07       0190*                  JR	NC,GROUP2
0004EF FE E8       0191*                  CP	15-39
0004F1 D4 97 06    0192*                  CALL	NC,ED
0004F4 18 68       0193*                  JR	BYTE0
0004F6             0194*  ;
0004F6             0195*  ;GROUP 2 - BIT, RES, SET
0004F6             0196*  ;GROUP 3 - RLC, RRC, RL, RR, SLA, SRA, SRL
0004F6             0197*  ;
0004F6 D6 0A       0198*  GROUP2:         SUB	10
0004F8 30 0F       0199*                  JR	NC,GROUP4
0004FA FE F9       0200*                  CP	3-10
0004FC DC 21 07    0201*                  CALL	C,BIT
0004FF D8          0202*                  RET	C
000500 CD F6 06    0203*                  CALL	REGLO
000503 D8          0204*                  RET	C
000504 CD 9B 06    0205*                  CALL	CB
000507 18 55       0206*                  JR	BYTE0
000509             0207*  ;
000509             0208*  ;GROUP 4 - PUSH, POP, EX (SP)
000509             0209*  ;
000509 D6 03       0210*  GROUP4:         SUB	3
00050B 30 06       0211*                  JR	NC,GROUP5
00050D CD 15 07    0212*  G4:             CALL	PAIRasm
000510 D8          0213*                  RET	C
000511 18 4B       0214*                  JR	BYTE0
000513             0215*  ;
000513             0216*  ;GROUP 5 - SUB, AND, XOR, OR, CP
000513             0217*  ;GROUP 6 - ADD, ADC, SBC
000513             0218*  ;
000513 D6 0A       0219*  GROUP5:         SUB	8+2
000515 30 32       0220*                  JR	NC,GROUP7
000517 FE FD       0221*                  CP	5-8
000519 06 07       0222*                  LD	B,7
00051B D4 A9 06    0223*                  CALL	NC,OPND
00051E 78          0224*                  LD	A,B
00051F FE 07       0225*                  CP	7
000521 20 10       0226*                  JR	NZ,G6HL
000523 CD F6 06    0227*  G6:             CALL	REGLO
000526 79          0228*                  LD	A,C
000527 30 28       0229*                  JR	NC,BIND1
000529 EE 46       0230*                  XOR	46H
00052B CD 9D 06    0231*                  CALL	BIND
00052E CD D9 06    0232*  DB:             CALL	NUMBER
000531 18 78       0233*                  JR	VAL8
000533             0234*  ;
000533 E6 3F       0235*  G6HL:           AND	3FH
000535 FE 0C       0236*                  CP	12
000537 37          0237*                  SCF
000538 C0          0238*                  RET	NZ
000539 79          0239*                  LD	A,C
00053A FE 80       0240*                  CP	80H
00053C 0E 09       0241*                  LD	C,9
00053E 28 CD       0242*                  JR	Z,G4
000540 EE 1C       0243*                  XOR	1CH
000542 0F          0244*                  RRCA
000543 4F          0245*                  LD	C,A
000544 CD 97 06    0246*                  CALL	ED
000547 18 C4       0247*                  JR	G4
000549             0248*  ;
000549             0249*  ;GROUP 7 - INC, DEC
000549             0250*  ;
000549 D6 02       0251*  GROUP7:         SUB	2
00054B 30 14       0252*                  JR	NC,GROUP8
00054D CD FC 06    0253*                  CALL	REGHI
000550 79          0254*                  LD	A,C
000551 D2 9D 06    0255*  BIND1:          JP	NC,BIND
000554 EE 64       0256*                  XOR	64H
000556 07          0257*                  RLCA
000557 07          0258*                  RLCA
000558 07          0259*                  RLCA
000559 4F          0260*                  LD	C,A
00055A CD 19 07    0261*                  CALL	PAIR1asm
00055D D8          0262*                  RET	C
00055E 79          0263*  BYTE0:          LD	A,C
00055F 18 7F       0264*                  JR	BYTE2
000561             0265*  ;
000561             0266*  ;GROUP 8 - IN
000561             0267*  ;GROUP 9 - OUT
000561             0268*  ;
000561 D6 02       0269*  GROUP8:         SUB	2
000563 30 21       0270*                  JR	NC,GROUPA
000565 FE FF       0271*                  CP	1-2
000567 CC 8C 06    0272*                  CALL	Z,CORN
00056A 08          0273*                  EX	AF,AF'
00056B CD FC 06    0274*                  CALL	REGHI
00056E D8          0275*                  RET	C
00056F 08          0276*                  EX	AF,AF'
000570 DC 8C 06    0277*                  CALL	C,CORN
000573 24          0278*                  INC	H
000574 28 E8       0279*                  JR	Z,BYTE0
000576 78          0280*                  LD	A,B
000577 FE 07       0281*                  CP	7
000579 37          0282*                  SCF
00057A C0          0283*                  RET	NZ
00057B 79          0284*                  LD	A,C
00057C EE 03       0285*                  XOR	3
00057E 07          0286*                  RLCA
00057F 07          0287*                  RLCA
000580 07          0288*                  RLCA
000581 CD C9 06    0289*                  CALL	BYTE
000584 18 25       0290*                  JR	VAL8
000586             0291*  ;
000586             0292*  ;GROUP 10 - JR, DJNZ
000586             0293*  ;
000586 D6 02       0294*  GROUPA:         SUB	2
000588 30 24       0295*                  JR	NC,GROUPB
00058A FE FF       0296*                  CP	1-2
00058C C4 02 07    0297*                  CALL	NZ,COND_
00058F 79          0298*                  LD	A,C
000590 30 02       0299*                  JR	NC,GRPA
000592 3E 18       0300*                  LD	A,18H
000594 CD C9 06    0301*  GRPA:           CALL	BYTE
000597 CD D9 06    0302*                  CALL	NUMBER
00059A ED 5B 40 54 0303*                  LD	DE,(PC)
00059E 13          0304*                  INC	DE
00059F 37          0305*                  SCF
0005A0 ED 52       0306*                  SBC	HL,DE
0005A2 7D          0307*                  LD	A,L
0005A3 17          0308*                  RLA
0005A4 9F          0309*                  SBC	A,A
0005A5 BC          0310*                  CP	H
0005A6 3E 01       0311*  TOOFAR:         LD	A,1
0005A8 C2 7D 3F    0312*                  JP	NZ,ERROR_	;"Out of range"
0005AB 7D          0313*  VAL8:           LD	A,L
0005AC 18 32       0314*                  JR	BYTE2
0005AE             0315*  ;
0005AE             0316*  ;GROUP 11 - JP
0005AE             0317*  ;
0005AE 47          0318*  GROUPB:         LD	B,A
0005AF 20 16       0319*                  JR	NZ,GROUPC
0005B1 CD 02 07    0320*                  CALL	COND_
0005B4 79          0321*                  LD	A,C
0005B5 30 0B       0322*                  JR	NC,GRPB
0005B7 78          0323*                  LD	A,B
0005B8 E6 3F       0324*                  AND	3FH
0005BA FE 06       0325*                  CP	6
0005BC 3E E9       0326*                  LD	A,0E9H
0005BE 28 20       0327*                  JR	Z,BYTE2
0005C0 3E C3       0328*                  LD	A,0C3H
0005C2 CD C9 06    0329*  GRPB:           CALL	BYTE
0005C5 18 05       0330*                  JR	ADDR_
0005C7             0331*  ;
0005C7             0332*  ;GROUP 12 - CALL
0005C7             0333*  ;
0005C7 10 0C       0334*  GROUPC:         DJNZ	GROUPD
0005C9 CD E4 05    0335*  GRPC:           CALL	GRPE
0005CC CD D9 06    0336*  ADDR_:          CALL	NUMBER
0005CF CD AB 05    0337*  VAL16:          CALL	VAL8
0005D2 7C          0338*                  LD	A,H
0005D3 18 0B       0339*                  JR	BYTE2
0005D5             0340*  ;
0005D5             0341*  ;GROUP 13 - RST
0005D5             0342*  ;
0005D5 10 0B       0343*  GROUPD:         DJNZ	GROUPE
0005D7 CD D9 06    0344*                  CALL	NUMBER
0005DA A1          0345*                  AND	C
0005DB B4          0346*                  OR	H
0005DC 20 C8       0347*                  JR	NZ,TOOFAR
0005DE 7D          0348*                  LD	A,L
0005DF B1          0349*                  OR	C
0005E0 18 78       0350*  BYTE2:          JR	BYTE1
0005E2             0351*  ;
0005E2             0352*  ;GROUP 14 - RET
0005E2             0353*  ;
0005E2 10 0A       0354*  GROUPE:         DJNZ	GROUPF
0005E4 CD 02 07    0355*  GRPE:           CALL	COND_
0005E7 79          0356*                  LD	A,C
0005E8 30 70       0357*                  JR	NC,BYTE1
0005EA F6 09       0358*                  OR	9
0005EC 18 6C       0359*                  JR	BYTE1
0005EE             0360*  ;
0005EE             0361*  ;GROUP 15 - LD
0005EE             0362*  ;
0005EE 10 6C       0363*  GROUPF:         DJNZ	MISC
0005F0 CD 2E 07    0364*                  CALL	LDOP
0005F3 30 5F       0365*                  JR	NC,LDA
0005F5 CD FC 06    0366*                  CALL	REGHI
0005F8 08          0367*                  EX	AF,AF'
0005F9 CD 7A 07    0368*                  CALL	SKIP
0005FC FE 28       0369*                  CP	'('
0005FE 28 1D       0370*                  JR	Z,LDIN
000600 08          0371*                  EX	AF,AF'
000601 D2 23 05    0372*                  JP	NC,G6
000604 0E 01       0373*                  LD	C,1
000606 CD 19 07    0374*                  CALL	PAIR1asm
000609 D8          0375*                  RET	C
00060A 3E 0E       0376*                  LD	A,14
00060C B8          0377*                  CP	B
00060D 47          0378*                  LD	B,A
00060E CC 15 07    0379*                  CALL	Z,PAIRasm
000611 78          0380*                  LD	A,B
000612 E6 3F       0381*                  AND	3FH
000614 FE 0C       0382*                  CP	12
000616 79          0383*                  LD	A,C
000617 20 A9       0384*                  JR	NZ,GRPB
000619 3E F9       0385*                  LD	A,0F9H
00061B 18 3D       0386*                  JR	BYTE1
00061D             0387*  ;
00061D 08          0388*  LDIN:           EX	AF,AF'
00061E C5          0389*                  PUSH	BC
00061F D4 F6 06    0390*                  CALL	NC,REGLO
000622 79          0391*                  LD	A,C
000623 C1          0392*                  POP	BC
000624 30 77       0393*                  JR	NC,BIND
000626 0E 0A       0394*                  LD	C,0AH
000628 CD 19 07    0395*                  CALL	PAIR1asm
00062B CD 73 06    0396*                  CALL	LD16
00062E 30 92       0397*                  JR	NC,GRPB
000630 CD D9 06    0398*                  CALL	NUMBER
000633 0E 02       0399*                  LD	C,2
000635 CD 15 07    0400*                  CALL	PAIRasm
000638 CD 73 06    0401*                  CALL	LD16
00063B D8          0402*                  RET	C
00063C CD C9 06    0403*                  CALL	BYTE
00063F 18 8E       0404*                  JR	VAL16
000641             0405*  ;
000641             0406*  ;OPT - SET OPTION
000641             0407*  ;
000641 05          0408*  OPT:            DEC	B
000642 CA 2E 05    0409*                  JP	Z,DB
000645 10 85       0410*                  DJNZ	ADDR_
000647 CD D9 06    0411*                  CALL	NUMBER
00064A 21 FE 54    0412*                  LD	HL,LISTON
00064D 4F          0413*                  LD	C,A
00064E ED 6F       0414*                  RLD
000650 79          0415*                  LD	A,C
000651 ED 67       0416*                  RRD
000653 C9          0417*                  RET
000654             0418*  ;
000654 FE 04       0419*  LDA:            CP	4
000656 DC 97 06    0420*                  CALL	C,ED
000659 78          0421*                  LD	A,B
00065A 18 6D       0422*  BYTE1:          JR	BYTE
00065C             0423*  ;
00065C             0424*  ;MISC - DEFB, DEFW, DEFM
00065C             0425*  ;
00065C 10 E3       0426*  MISC:           DJNZ	OPT
00065E DD E5       0427*                  PUSH	IX
000660 CD 75 18    0428*                  CALL	EXPRS
000663 DD E1       0429*                  POP	IX
000665 21 00 52    0430*                  LD	HL,ACCS
000668 AF          0431*  DEFM1:          XOR	A
000669 BB          0432*                  CP	E
00066A C8          0433*                  RET	Z
00066B 7E          0434*                  LD	A,(HL)
00066C 23          0435*                  INC	HL
00066D CD C9 06    0436*                  CALL	BYTE
000670 1D          0437*                  DEC	E
000671 18 F5       0438*                  JR	DEFM1
000673             0439*  ;
000673             0440*  ;SUBROUTINES:
000673             0441*  ;
000673 78          0442*  LD16:           LD	A,B
000674 38 0E       0443*                  JR	C,LD8
000676 78          0444*                  LD	A,B
000677 E6 3F       0445*                  AND	3FH
000679 FE 0C       0446*                  CP	12
00067B 79          0447*                  LD	A,C
00067C C8          0448*                  RET	Z
00067D CD 97 06    0449*                  CALL	ED
000680 79          0450*                  LD	A,C
000681 F6 43       0451*                  OR	43H
000683 C9          0452*                  RET
000684             0453*  ;
000684 FE 07       0454*  LD8:            CP	7
000686 37          0455*                  SCF
000687 C0          0456*                  RET	NZ
000688 79          0457*                  LD	A,C
000689 F6 30       0458*                  OR	30H
00068B C9          0459*                  RET
00068C             0460*  ;
00068C C5          0461*  CORN:           PUSH	BC
00068D CD A9 06    0462*                  CALL	OPND
000690 CB 68       0463*                  BIT	5,B
000692 C1          0464*                  POP	BC
000693 28 44       0465*                  JR	Z,NUMBER
000695 26 FF       0466*                  LD	H,-1
000697 3E ED       0467*  ED:             LD	A,0EDH
000699 18 2E       0468*                  JR	BYTE
00069B             0469*  ;
00069B 3E CB       0470*  CB:             LD	A,0CBH
00069D FE 76       0471*  BIND:           CP	76H
00069F 37          0472*                  SCF
0006A0 C8          0473*                  RET	Z		;REJECT LD (HL),(HL)
0006A1 CD C9 06    0474*                  CALL	BYTE
0006A4 14          0475*                  INC	D
0006A5 F0          0476*                  RET	P
0006A6 7B          0477*                  LD	A,E
0006A7 18 20       0478*                  JR	BYTE
0006A9             0479*  ;
0006A9 E5          0480*  OPND:           PUSH	HL
0006AA 21 EB 08    0481*                  LD	HL,OPRNDS
0006AD CD 31 07    0482*                  CALL	FIND
0006B0 E1          0483*                  POP	HL
0006B1 D8          0484*                  RET	C
0006B2 CB 78       0485*                  BIT	7,B
0006B4 C8          0486*                  RET	Z
0006B5 CB 58       0487*                  BIT	3,B
0006B7 E5          0488*                  PUSH	HL
0006B8 CC D0 06    0489*                  CALL	Z,OFFSETasm
0006BB 5D          0490*                  LD	E,L
0006BC E1          0491*                  POP	HL
0006BD 3E DD       0492*                  LD	A,0DDH
0006BF CB 70       0493*                  BIT	6,B
0006C1 28 02       0494*                  JR	Z,OP1
0006C3 3E FD       0495*                  LD	A,0FDH
0006C5 B7          0496*  OP1:            OR	A
0006C6 14          0497*                  INC	D
0006C7 57          0498*                  LD	D,A
0006C8 F8          0499*                  RET	M
0006C9 DD 77 00    0500*  BYTE:           LD	(IX),A
0006CC DD 23       0501*                  INC	IX
0006CE B7          0502*                  OR	A
0006CF C9          0503*                  RET
0006D0             0504*  ;
0006D0 FD 7E 00    0505*  OFFSETasm:         LD	A,(IY)
0006D3 FE 29       0506*                  CP	')'
0006D5 21 00 00    0507*                  LD	HL,0
0006D8 C8          0508*                  RET	Z
0006D9 CD 7A 07    0509*  NUMBER:         CALL	SKIP
0006DC C5          0510*                  PUSH	BC
0006DD D5          0511*                  PUSH	DE
0006DE DD E5       0512*                  PUSH	IX
0006E0 CD 6C 18    0513*                  CALL	EXPRI
0006E3 DD E1       0514*                  POP	IX
0006E5 D9          0515*                  EXX
0006E6 D1          0516*                  POP	DE
0006E7 C1          0517*                  POP	BC
0006E8 7D          0518*                  LD	A,L
0006E9 B7          0519*                  OR	A
0006EA C9          0520*                  RET
0006EB             0521*  ;
0006EB CD A9 06    0522*  REG:            CALL	OPND
0006EE D8          0523*                  RET	C
0006EF 78          0524*                  LD	A,B
0006F0 E6 3F       0525*                  AND	3FH
0006F2 FE 08       0526*                  CP	8
0006F4 3F          0527*                  CCF
0006F5 C9          0528*                  RET
0006F6             0529*  ;
0006F6 CD EB 06    0530*  REGLO:          CALL	REG
0006F9 D8          0531*                  RET	C
0006FA 18 2F       0532*                  JR	ORC
0006FC             0533*  ;
0006FC CD EB 06    0534*  REGHI:          CALL	REG
0006FF D8          0535*                  RET	C
000700 18 26       0536*                  JR	SHL3
000702             0537*  ;
000702 CD A9 06    0538*  COND_:          CALL	OPND
000705 D8          0539*                  RET	C
000706 78          0540*                  LD	A,B
000707 E6 1F       0541*                  AND	1FH
000709 D6 10       0542*                  SUB	16
00070B 30 1B       0543*                  JR	NC,SHL3
00070D FE F1       0544*                  CP	-15
00070F 37          0545*                  SCF
000710 C0          0546*                  RET	NZ
000711 3E 03       0547*                  LD	A,3
000713 18 13       0548*                  JR	SHL3
000715             0549*  ;
000715 CD A9 06    0550*  PAIRasm:           CALL	OPND
000718 D8          0551*                  RET	C
000719 78          0552*  PAIR1asm:          LD	A,B
00071A E6 0F       0553*                  AND	0FH
00071C D6 08       0554*                  SUB	8
00071E D8          0555*                  RET	C
00071F 18 07       0556*                  JR	SHL3
000721             0557*  ;
000721 CD D9 06    0558*  BIT:            CALL	NUMBER
000724 FE 08       0559*                  CP	8
000726 3F          0560*                  CCF
000727 D8          0561*                  RET	C
000728 07          0562*  SHL3:           RLCA
000729 07          0563*                  RLCA
00072A 07          0564*                  RLCA
00072B B1          0565*  ORC:            OR	C
00072C 4F          0566*                  LD	C,A
00072D C9          0567*                  RET
00072E             0568*  ;
00072E 21 30 09    0569*  LDOP:           LD	HL,LDOPS
000731 CD 7A 07    0570*  FIND:           CALL	SKIP
000734 06 00       0571*  EXIT:           LD	B,0
000736 37          0572*                  SCF
000737 C8          0573*                  RET	Z
000738 FE DD       0574*                  CP	TDEF
00073A 28 04       0575*                  JR	Z,FIND0
00073C FE 85       0576*                  CP	TOR+1
00073E 3F          0577*                  CCF
00073F D8          0578*                  RET	C
000740 7E          0579*  FIND0:          LD	A,(HL)
000741 B7          0580*                  OR	A
000742 28 F0       0581*                  JR	Z,EXIT
000744 FD AE 00    0582*                  XOR	(IY)
000747 E6 5F       0583*                  AND	01011111B
000749 28 09       0584*                  JR	Z,FIND2
00074B CB 7E       0585*  FIND1:          BIT	7,(HL)
00074D 23          0586*                  INC	HL
00074E 28 FB       0587*                  JR	Z,FIND1
000750 23          0588*                  INC	HL
000751 04          0589*                  INC	B
000752 18 EC       0590*                  JR	FIND0
000754             0591*  ;
000754 FD E5       0592*  FIND2:          PUSH	IY
000756 CB 7E       0593*  FIND3:          BIT	7,(HL)
000758 FD 23       0594*                  INC	IY
00075A 23          0595*                  INC	HL
00075B 20 10       0596*                  JR	NZ,FIND5
00075D BE          0597*                  CP	(HL)
00075E CC 79 07    0598*                  CALL	Z,SKIP0
000761 7E          0599*                  LD	A,(HL)
000762 FD AE 00    0600*                  XOR	(IY)
000765 E6 5F       0601*                  AND	01011111B
000767 28 ED       0602*                  JR	Z,FIND3
000769 FD E1       0603*  FIND4:          POP	IY
00076B 18 DE       0604*                  JR	FIND1
00076D             0605*  ;
00076D CD 8C 07    0606*  FIND5:          CALL	DELIM
000770 C4 86 07    0607*                  CALL	NZ,SIGN
000773 20 F4       0608*                  JR	NZ,FIND4
000775 78          0609*  FIND6:          LD	A,B
000776 46          0610*                  LD	B,(HL)
000777 E1          0611*                  POP	HL
000778 C9          0612*                  RET
000779             0613*  ;
000779 23          0614*  SKIP0:          INC	HL
00077A CD 8C 07    0615*  SKIP:           CALL	DELIM
00077D C0          0616*                  RET	NZ
00077E CD 98 07    0617*                  CALL	TERM
000781 C8          0618*                  RET	Z
000782 FD 23       0619*                  INC	IY
000784 18 F4       0620*                  JR	SKIP
000786             0621*  ;
000786 FE 2B       0622*  SIGN:           CP	'+'
000788 C8          0623*                  RET	Z
000789 FE 2D       0624*                  CP	'-'
00078B C9          0625*                  RET
00078C             0626*  ;
00078C FD 7E 00    0627*  DELIM:          LD	A,(IY)		;ASSEMBLER DELIMITER
00078F FE 20       0628*                  CP	' '
000791 C8          0629*                  RET	Z
000792 FE 2C       0630*                  CP	','
000794 C8          0631*                  RET	Z
000795 FE 29       0632*                  CP	')'
000797 C8          0633*                  RET	Z
000798 FE 3B       0634*  TERM:           CP	';'		;ASSEMBLER TERMINATOR
00079A C8          0635*                  RET	Z
00079B FE 5C       0636*                  CP	'\'
00079D C8          0637*                  RET	Z
00079E FE 3A       0638*  TERM0:          CP	':'		;ASSEMBLER SEPARATOR
0007A0 D0          0639*                  RET	NC
0007A1 FE 0D       0640*                  CP	CR
0007A3 C9          0641*                  RET
0007A4             0642*  ;
0007A4 4E 4F       0643*  OPCODS:         DB	"NO"
0007A6 D0          0644*                  DB	'P'+80H
0007A7 00          0645*                  DB	0
0007A8 52 4C 43    0646*                  DB	"RLC"
0007AB C1          0647*                  DB	'A'+80H
0007AC 07          0648*                  DB	7
0007AD 45 58       0649*                  DB	"EX"
0007AF 00          0650*                  DB	0
0007B0 41 46       0651*                  DB	"AF"
0007B2 00          0652*                  DB	0
0007B3 41 46       0653*                  DB	"AF"
0007B5 27          0654*                  DB	"'"+80H
0007B6 08          0655*                  DB	8
0007B7 52 52 43    0656*                  DB	"RRC"
0007BA C1          0657*                  DB	'A'+80H
0007BB 0F          0658*                  DB	0FH
0007BC 52 4C       0659*                  DB	"RL"
0007BE C1          0660*                  DB	'A'+80H
0007BF 17          0661*                  DB	17H
0007C0 52 52       0662*                  DB	"RR"
0007C2 C1          0663*                  DB	'A'+80H
0007C3 1F          0664*                  DB	1FH
0007C4 44 41       0665*                  DB	"DA"
0007C6 C1          0666*                  DB	'A'+80H
0007C7 27          0667*                  DB	27H
0007C8 43 50       0668*                  DB	"CP"
0007CA CC          0669*                  DB	'L'+80H
0007CB 2F          0670*                  DB	2FH
0007CC 53 43       0671*                  DB	"SC"
0007CE C6          0672*                  DB	'F'+80H
0007CF 37          0673*                  DB	37H
0007D0 43 43       0674*                  DB	"CC"
0007D2 C6          0675*                  DB	'F'+80H
0007D3 3F          0676*                  DB	3FH
0007D4 48 41 4C    0677*                  DB	"HAL"
0007D7 D4          0678*                  DB	'T'+80H
0007D8 76          0679*                  DB	76H
0007D9 45 58       0680*                  DB	"EX"
0007DB D8          0681*                  DB	'X'+80H
0007DC D9          0682*                  DB	0D9H
0007DD 45 58       0683*                  DB	"EX"
0007DF 00          0684*                  DB	0
0007E0 44 45       0685*                  DB	"DE"
0007E2 00          0686*                  DB	0
0007E3 48          0687*                  DB	'H'
0007E4 CC          0688*                  DB	'L'+80H
0007E5 EB          0689*                  DB	0EBH
0007E6 44          0690*                  DB	'D'
0007E7 C9          0691*                  DB	'I'+80H
0007E8 F3          0692*                  DB	0F3H
0007E9 45          0693*                  DB	'E'
0007EA C9          0694*                  DB	'I'+80H
0007EB FB          0695*                  DB	0FBH
0007EC             0696*  ;
0007EC 4E 45       0697*                  DB	"NE"
0007EE C7          0698*                  DB	'G'+80H
0007EF 44          0699*                  DB	44H
0007F0 49 4D       0700*                  DB	"IM"
0007F2 00          0701*                  DB	0
0007F3 B0          0702*                  DB	'0'+80H
0007F4 46          0703*                  DB	46H
0007F5 52 45 54    0704*                  DB	"RET"
0007F8 CE          0705*                  DB	'N'+80H
0007F9 45          0706*                  DB	45H
0007FA 52 45 54    0707*                  DB	"RET"
0007FD C9          0708*                  DB	'I'+80H
0007FE 4D          0709*                  DB	4DH
0007FF 49 4D       0710*                  DB	"IM"
000801 00          0711*                  DB	0
000802 B1          0712*                  DB	'1'+80H
000803 56          0713*                  DB	56H
000804 49 4D       0714*                  DB	"IM"
000806 00          0715*                  DB	0
000807 B2          0716*                  DB	'2'+80H
000808 5E          0717*                  DB	5EH
000809 52 52       0718*                  DB	"RR"
00080B C4          0719*                  DB	'D'+80H
00080C 67          0720*                  DB	67H
00080D 52 4C       0721*                  DB	"RL"
00080F C4          0722*                  DB	'D'+80H
000810 6F          0723*                  DB	6FH
000811 4C 44       0724*                  DB	"LD"
000813 C9          0725*                  DB	'I'+80H
000814 A0          0726*                  DB	0A0H
000815 43 50       0727*                  DB	"CP"
000817 C9          0728*                  DB	'I'+80H
000818 A1          0729*                  DB	0A1H
000819 49 4E       0730*                  DB	"IN"
00081B C9          0731*                  DB	'I'+80H
00081C A2          0732*                  DB	0A2H
00081D 4F 55 54    0733*                  DB	"OUT"
000820 C9          0734*                  DB	'I'+80H
000821 A3          0735*                  DB	0A3H
000822 4C 44       0736*                  DB	"LD"
000824 C4          0737*                  DB	'D'+80H
000825 A8          0738*                  DB	0A8H
000826 43 50       0739*                  DB	"CP"
000828 C4          0740*                  DB	'D'+80H
000829 A9          0741*                  DB	0A9H
00082A 49 4E       0742*                  DB	"IN"
00082C C4          0743*                  DB	'D'+80H
00082D AA          0744*                  DB	0AAH
00082E 4F 55 54    0745*                  DB	"OUT"
000831 C4          0746*                  DB	'D'+80H
000832 AB          0747*                  DB	0ABH
000833 4C 44 49    0748*                  DB	"LDI"
000836 D2          0749*                  DB	'R'+80H
000837 B0          0750*                  DB	0B0H
000838 43 50 49    0751*                  DB	"CPI"
00083B D2          0752*                  DB	'R'+80H
00083C B1          0753*                  DB	0B1H
00083D 49 4E 49    0754*                  DB	"INI"
000840 D2          0755*                  DB	'R'+80H
000841 B2          0756*                  DB	0B2H
000842 4F 54 49    0757*                  DB	"OTI"
000845 D2          0758*                  DB	'R'+80H
000846 B3          0759*                  DB	0B3H
000847 4C 44 44    0760*                  DB	"LDD"
00084A D2          0761*                  DB	'R'+80H
00084B B8          0762*                  DB	0B8H
00084C 43 50 44    0763*                  DB	"CPD"
00084F D2          0764*                  DB	'R'+80H
000850 B9          0765*                  DB	0B9H
000851 49 4E 44    0766*                  DB	"IND"
000854 D2          0767*                  DB	'R'+80H
000855 BA          0768*                  DB	0BAH
000856 4F 54 44    0769*                  DB	"OTD"
000859 D2          0770*                  DB	'R'+80H
00085A BB          0771*                  DB	0BBH
00085B             0772*  ;
00085B 42 49       0773*                  DB	"BI"
00085D D4          0774*                  DB	'T'+80H
00085E 40          0775*                  DB	40H
00085F 52 45       0776*                  DB	"RE"
000861 D3          0777*                  DB	'S'+80H
000862 80          0778*                  DB	80H
000863 53 45       0779*                  DB	"SE"
000865 D4          0780*                  DB	'T'+80H
000866 C0          0781*                  DB	0C0H
000867             0782*  ;
000867 52 4C       0783*                  DB	"RL"
000869 C3          0784*                  DB	'C'+80H
00086A 00          0785*                  DB	0
00086B 52 52       0786*                  DB	"RR"
00086D C3          0787*                  DB	'C'+80H
00086E 08          0788*                  DB	8
00086F 52          0789*                  DB	'R'
000870 CC          0790*                  DB	'L'+80H
000871 10          0791*                  DB	10H
000872 52          0792*                  DB	'R'
000873 D2          0793*                  DB	'R'+80H
000874 18          0794*                  DB	18H
000875 53 4C       0795*                  DB	"SL"
000877 C1          0796*                  DB	'A'+80H
000878 20          0797*                  DB	20H
000879 53 52       0798*                  DB	"SR"
00087B C1          0799*                  DB	'A'+80H
00087C 28          0800*                  DB	28H
00087D 53 52       0801*                  DB	"SR"
00087F CC          0802*                  DB	'L'+80H
000880 38          0803*                  DB	38H
000881             0804*  ;
000881 50 4F       0805*                  DB	"PO"
000883 D0          0806*                  DB	'P'+80H
000884 C1          0807*                  DB	0C1H
000885 50 55 53    0808*                  DB	"PUS"
000888 C8          0809*                  DB	'H'+80H
000889 C5          0810*                  DB	0C5H
00088A 45 58       0811*                  DB	"EX"
00088C 00          0812*                  DB	0
00088D 28 53       0813*                  DB	"(S"
00088F D0          0814*                  DB	'P'+80H
000890 E3          0815*                  DB	0E3H
000891             0816*  ;
000891 53 55       0817*                  DB	"SU"
000893 C2          0818*                  DB	'B'+80H
000894 90          0819*                  DB	90H
000895 41 4E       0820*                  DB	"AN"
000897 C4          0821*                  DB	'D'+80H
000898 A0          0822*                  DB	0A0H
000899 58 4F       0823*                  DB	"XO"
00089B D2          0824*                  DB	'R'+80H
00089C A8          0825*                  DB	0A8H
00089D 4F          0826*                  DB	'O'
00089E D2          0827*                  DB	'R'+80H
00089F B0          0828*                  DB	0B0H
0008A0 43          0829*                  DB	'C'
0008A1 D0          0830*                  DB	'P'+80H
0008A2 B8          0831*                  DB	0B8H
0008A3 80          0832*                  DB	TAND
0008A4 A0          0833*                  DB	0A0H
0008A5 84          0834*                  DB	TOR
0008A6 B0          0835*                  DB	0B0H
0008A7             0836*  ;
0008A7 41 44       0837*                  DB	"AD"
0008A9 C4          0838*                  DB	'D'+80H
0008AA 80          0839*                  DB	80H
0008AB 41 44       0840*                  DB	"AD"
0008AD C3          0841*                  DB	'C'+80H
0008AE 88          0842*                  DB	88H
0008AF 53 42       0843*                  DB	"SB"
0008B1 C3          0844*                  DB	'C'+80H
0008B2 98          0845*                  DB	98H
0008B3             0846*  ;
0008B3 49 4E       0847*                  DB	"IN"
0008B5 C3          0848*                  DB	'C'+80H
0008B6 04          0849*                  DB	4
0008B7 44 45       0850*                  DB	"DE"
0008B9 C3          0851*                  DB	'C'+80H
0008BA 05          0852*                  DB	5
0008BB             0853*  ;
0008BB 49          0854*                  DB	'I'
0008BC CE          0855*                  DB	'N'+80H
0008BD 40          0856*                  DB	40H
0008BE 4F 55       0857*                  DB	"OU"
0008C0 D4          0858*                  DB	'T'+80H
0008C1 41          0859*                  DB	41H
0008C2             0860*  ;
0008C2 4A          0861*                  DB	'J'
0008C3 D2          0862*                  DB	'R'+80H
0008C4 20          0863*                  DB	20H
0008C5 44 4A 4E    0864*                  DB	"DJN"
0008C8 DA          0865*                  DB	'Z'+80H
0008C9 10          0866*                  DB	10H
0008CA             0867*  ;
0008CA 4A          0868*                  DB	'J'
0008CB D0          0869*                  DB	'P'+80H
0008CC C2          0870*                  DB	0C2H
0008CD             0871*  ;
0008CD 43 41 4C    0872*                  DB	"CAL"
0008D0 CC          0873*                  DB	'L'+80H
0008D1 C4          0874*                  DB	0C4H
0008D2             0875*  ;
0008D2 52 53       0876*                  DB	"RS"
0008D4 D4          0877*                  DB	'T'+80H
0008D5 C7          0878*                  DB	0C7H
0008D6             0879*  ;
0008D6 52 45       0880*                  DB	"RE"
0008D8 D4          0881*                  DB	'T'+80H
0008D9 C0          0882*                  DB	0C0H
0008DA             0883*  ;
0008DA 4C          0884*                  DB	'L'
0008DB C4          0885*                  DB	'D'+80H
0008DC 40          0886*                  DB	40H
0008DD             0887*  ;
0008DD 5D          0888*                  DB	TDEF & 7FH
0008DE CD          0889*                  DB	'M'+80H
0008DF 00          0890*                  DB	0
0008E0             0891*  ;
0008E0 5D          0892*                  DB	TDEF & 7FH
0008E1 C2          0893*                  DB	'B'+80H
0008E2 00          0894*                  DB	0
0008E3             0895*  ;
0008E3 4F 50       0896*                  DB	"OP"
0008E5 D4          0897*                  DB	'T'+80H
0008E6 00          0898*                  DB	0
0008E7             0899*  ;
0008E7 5D          0900*                  DB	TDEF & 7FH
0008E8 D7          0901*                  DB	'W'+80H
0008E9 00          0902*                  DB	0
0008EA             0903*  ;
0008EA 00          0904*                  DB	0
0008EB             0905*  ;
0008EB C2          0906*  OPRNDS:         DB	'B'+80H
0008EC 00          0907*                  DB	0
0008ED C3          0908*                  DB	'C'+80H
0008EE 01          0909*                  DB	1
0008EF C4          0910*                  DB	'D'+80H
0008F0 02          0911*                  DB	2
0008F1 C5          0912*                  DB	'E'+80H
0008F2 03          0913*                  DB	3
0008F3 C8          0914*                  DB	'H'+80H
0008F4 04          0915*                  DB	4
0008F5 CC          0916*                  DB	'L'+80H
0008F6 05          0917*                  DB	5
0008F7 28 48       0918*                  DB	"(H"
0008F9 CC          0919*                  DB	'L'+80H
0008FA 06          0920*                  DB	6
0008FB C1          0921*                  DB	'A'+80H
0008FC 07          0922*                  DB	7
0008FD 28 49       0923*                  DB	"(I"
0008FF D8          0924*                  DB	'X'+80H
000900 86          0925*                  DB	86H
000901 28 49       0926*                  DB	"(I"
000903 D9          0927*                  DB	'Y'+80H
000904 C6          0928*                  DB	0C6H
000905             0929*  ;
000905 42          0930*                  DB	'B'
000906 C3          0931*                  DB	'C'+80H
000907 08          0932*                  DB	8
000908 44          0933*                  DB	'D'
000909 C5          0934*                  DB	'E'+80H
00090A 0A          0935*                  DB	10
00090B 48          0936*                  DB	'H'
00090C CC          0937*                  DB	'L'+80H
00090D 0C          0938*                  DB	12
00090E 49          0939*                  DB	'I'
00090F D8          0940*                  DB	'X'+80H
000910 8C          0941*                  DB	8CH
000911 49          0942*                  DB	'I'
000912 D9          0943*                  DB	'Y'+80H
000913 CC          0944*                  DB	0CCH
000914 41          0945*                  DB	'A'
000915 C6          0946*                  DB	'F'+80H
000916 0E          0947*                  DB	14
000917 53          0948*                  DB	'S'
000918 D0          0949*                  DB	'P'+80H
000919 0E          0950*                  DB	14
00091A             0951*  ;
00091A 4E          0952*                  DB	'N'
00091B DA          0953*                  DB	'Z'+80H
00091C 10          0954*                  DB	16
00091D DA          0955*                  DB	'Z'+80H
00091E 11          0956*                  DB	17
00091F 4E          0957*                  DB	'N'
000920 C3          0958*                  DB	'C'+80H
000921 12          0959*                  DB	18
000922 50          0960*                  DB	'P'
000923 CF          0961*                  DB	'O'+80H
000924 14          0962*                  DB	20
000925 50          0963*                  DB	'P'
000926 C5          0964*                  DB	'E'+80H
000927 15          0965*                  DB	21
000928 D0          0966*                  DB	'P'+80H
000929 16          0967*                  DB	22
00092A CD          0968*                  DB	'M'+80H
00092B 17          0969*                  DB	23
00092C             0970*  ;
00092C 28          0971*                  DB	'('
00092D C3          0972*                  DB	'C'+80H
00092E 20          0973*                  DB	20H
00092F             0974*  ;
00092F 00          0975*                  DB	0
000930             0976*  ;
000930 49          0977*  LDOPS:          DB	'I'
000931 00          0978*                  DB	0
000932 C1          0979*                  DB	'A'+80H
000933 47          0980*                  DB	47H
000934 52          0981*                  DB	'R'
000935 00          0982*                  DB	0
000936 C1          0983*                  DB	'A'+80H
000937 4F          0984*                  DB	4FH
000938 41          0985*                  DB	'A'
000939 00          0986*                  DB	0
00093A C9          0987*                  DB	'I'+80H
00093B 57          0988*                  DB	57H
00093C 41          0989*                  DB	'A'
00093D 00          0990*                  DB	0
00093E D2          0991*                  DB	'R'+80H
00093F 5F          0992*                  DB	5FH
000940 28 42 43    0993*                  DB	"(BC"
000943 00          0994*                  DB	0
000944 C1          0995*                  DB	'A'+80H
000945 02          0996*                  DB	2
000946 28 44 45    0997*                  DB	"(DE"
000949 00          0998*                  DB	0
00094A C1          0999*                  DB	'A'+80H
00094B 12          1000*                  DB	12H
00094C 41          1001*                  DB	'A'
00094D 00          1002*                  DB	0
00094E 28 42       1003*                  DB	"(B"
000950 C3          1004*                  DB	'C'+80H
000951 0A          1005*                  DB	0AH
000952 41          1006*                  DB	'A'
000953 00          1007*                  DB	0
000954 28 44       1008*                  DB	"(D"
000956 C5          1009*                  DB	'E'+80H
000957 1A          1010*                  DB	1AH
000958             1011*  ;
000958 00          1012*                  DB	0
000959             1013*  ;
000959             1014*  FIN:            ; END
000959             1015*  ;    include "asmb.inc"
000959             0009       include "agon_gpio.asm"
000959             0001*  ;
000959             0002*  ; Title:	BBC Basic for AGON - GPIO functions
000959             0003*  ; Author:	Dean Belfield
000959             0004*  ; Created:	04/12/2024
000959             0005*  ; Last Updated:	04/12/2024
000959             0006*  ;
000959             0007*  ; Modinfo:
000959             0008*  
000959             0009*  			; INCLUDE	"macros.inc"
000959             0010*  			; INCLUDE	"equs.inc"
000959             0011*  
000959             0012*  			.ASSUME	ADL = 0
000959             0013*  ;	.ORG 0x0000
000959             0014*  
000959             0015*  ;			SEGMENT CODE
000959             0016*  
000959             0017*  ;			XDEF	GPIOB_SETMODE
000959             0018*  
000959             0019*  ;			XREF	SWITCH_A
000959             0020*  
000959             0021*  ;  A: Mode
000959             0022*  ;  B: Pins
000959             0023*  ;
000959 CD C8 0E    0024*  GPIOB_SETMODE:		CALL	SWITCH_A
00095C 70 09       0025*  			DW	GPIOB_M0	; Output
00095E 95 09       0026*  			DW	GPIOB_M1	; Input
000960 B5 09       0027*  			DW	GPIOB_M2	; Open Drain IO
000962 D5 09       0028*  			DW	GPIOB_M3	; Open Source IO
000964 F0 09       0029*  			DW	GPIOB_M4	; Interrupt, Dual Edge
000966 1C 0A       0030*  			DW	GPIOB_M5	; Alt Function
000968 37 0A       0031*  			DW	GPIOB_M6	; Interrupt, Active Low
00096A 5E 0A       0032*  			DW	GPIOB_M7	; Interrupt, Active High
00096C 80 0A       0033*  			DW	GPIOB_M8	; Interrupt, Falling Edge
00096E A2 0A       0034*  			DW	GPIOB_M9	; Interrupt, Rising Edge
000970             0035*  
000970             0036*  ; Output
000970             0037*  ;
000970             0038*  GPIOB_M0:		RES_GPIO PB_DDR,  B
000970 C5          0001*M         PUSH    BC
000971 78          0002*M         LD      A, VAL
000972 2F          0003*M         CPL
000973 4F          0004*M         LD      C, A
000974 ED 38 9B    0005*M         IN0     A, (REG)
000977 A1          0006*M         AND     C
000978 ED 39 9B    0007*M         OUT0    (REG), A
00097B C1          0008*M         POP     BC
00097C             0039*  			RES_GPIO PB_ALT1, B
00097C C5          0001*M         PUSH    BC
00097D 78          0002*M         LD      A, VAL
00097E 2F          0003*M         CPL
00097F 4F          0004*M         LD      C, A
000980 ED 38 9C    0005*M         IN0     A, (REG)
000983 A1          0006*M         AND     C
000984 ED 39 9C    0007*M         OUT0    (REG), A
000987 C1          0008*M         POP     BC
000988             0040*  			RES_GPIO PB_ALT2, B
000988 C5          0001*M         PUSH    BC
000989 78          0002*M         LD      A, VAL
00098A 2F          0003*M         CPL
00098B 4F          0004*M         LD      C, A
00098C ED 38 9D    0005*M         IN0     A, (REG)
00098F A1          0006*M         AND     C
000990 ED 39 9D    0007*M         OUT0    (REG), A
000993 C1          0008*M         POP     BC
000994 C9          0041*  			RET
000995             0042*  
000995             0043*  ; Input
000995             0044*  ;
000995             0045*  GPIOB_M1:		SET_GPIO PB_DDR,  B
000995 ED 38 9B    0001*M         IN0     A, (REG)
000998 B0          0002*M         OR      VAL
000999 ED 39 9B    0003*M         OUT0    (REG), A
00099C             0046*  			RES_GPIO PB_ALT1, B
00099C C5          0001*M         PUSH    BC
00099D 78          0002*M         LD      A, VAL
00099E 2F          0003*M         CPL
00099F 4F          0004*M         LD      C, A
0009A0 ED 38 9C    0005*M         IN0     A, (REG)
0009A3 A1          0006*M         AND     C
0009A4 ED 39 9C    0007*M         OUT0    (REG), A
0009A7 C1          0008*M         POP     BC
0009A8             0047*  			RES_GPIO PB_ALT2, B
0009A8 C5          0001*M         PUSH    BC
0009A9 78          0002*M         LD      A, VAL
0009AA 2F          0003*M         CPL
0009AB 4F          0004*M         LD      C, A
0009AC ED 38 9D    0005*M         IN0     A, (REG)
0009AF A1          0006*M         AND     C
0009B0 ED 39 9D    0007*M         OUT0    (REG), A
0009B3 C1          0008*M         POP     BC
0009B4 C9          0048*  			RET
0009B5             0049*  
0009B5             0050*  ; Open Drain IO
0009B5             0051*  ;
0009B5             0052*  GPIOB_M2:		RES_GPIO PB_DDR,  B
0009B5 C5          0001*M         PUSH    BC
0009B6 78          0002*M         LD      A, VAL
0009B7 2F          0003*M         CPL
0009B8 4F          0004*M         LD      C, A
0009B9 ED 38 9B    0005*M         IN0     A, (REG)
0009BC A1          0006*M         AND     C
0009BD ED 39 9B    0007*M         OUT0    (REG), A
0009C0 C1          0008*M         POP     BC
0009C1             0053*  			SET_GPIO PB_ALT1, B
0009C1 ED 38 9C    0001*M         IN0     A, (REG)
0009C4 B0          0002*M         OR      VAL
0009C5 ED 39 9C    0003*M         OUT0    (REG), A
0009C8             0054*  			RES_GPIO PB_ALT2, B
0009C8 C5          0001*M         PUSH    BC
0009C9 78          0002*M         LD      A, VAL
0009CA 2F          0003*M         CPL
0009CB 4F          0004*M         LD      C, A
0009CC ED 38 9D    0005*M         IN0     A, (REG)
0009CF A1          0006*M         AND     C
0009D0 ED 39 9D    0007*M         OUT0    (REG), A
0009D3 C1          0008*M         POP     BC
0009D4 C9          0055*  			RET
0009D5             0056*  
0009D5             0057*  ; Open Source IO
0009D5             0058*  ;
0009D5             0059*  GPIOB_M3:		SET_GPIO PB_DDR,  B
0009D5 ED 38 9B    0001*M         IN0     A, (REG)
0009D8 B0          0002*M         OR      VAL
0009D9 ED 39 9B    0003*M         OUT0    (REG), A
0009DC             0060*  			SET_GPIO PB_ALT1, B
0009DC ED 38 9C    0001*M         IN0     A, (REG)
0009DF B0          0002*M         OR      VAL
0009E0 ED 39 9C    0003*M         OUT0    (REG), A
0009E3             0061*  			RES_GPIO PB_ALT2, B
0009E3 C5          0001*M         PUSH    BC
0009E4 78          0002*M         LD      A, VAL
0009E5 2F          0003*M         CPL
0009E6 4F          0004*M         LD      C, A
0009E7 ED 38 9D    0005*M         IN0     A, (REG)
0009EA A1          0006*M         AND     C
0009EB ED 39 9D    0007*M         OUT0    (REG), A
0009EE C1          0008*M         POP     BC
0009EF C9          0062*  			RET
0009F0             0063*  
0009F0             0064*  ; Interrupt, Dual Edge
0009F0             0065*  ;
0009F0             0066*  GPIOB_M4:		SET_GPIO PB_DR,   B
0009F0 ED 38 9A    0001*M         IN0     A, (REG)
0009F3 B0          0002*M         OR      VAL
0009F4 ED 39 9A    0003*M         OUT0    (REG), A
0009F7             0067*  			RES_GPIO PB_DDR,  B
0009F7 C5          0001*M         PUSH    BC
0009F8 78          0002*M         LD      A, VAL
0009F9 2F          0003*M         CPL
0009FA 4F          0004*M         LD      C, A
0009FB ED 38 9B    0005*M         IN0     A, (REG)
0009FE A1          0006*M         AND     C
0009FF ED 39 9B    0007*M         OUT0    (REG), A
000A02 C1          0008*M         POP     BC
000A03             0068*  			RES_GPIO PB_ALT1, B
000A03 C5          0001*M         PUSH    BC
000A04 78          0002*M         LD      A, VAL
000A05 2F          0003*M         CPL
000A06 4F          0004*M         LD      C, A
000A07 ED 38 9C    0005*M         IN0     A, (REG)
000A0A A1          0006*M         AND     C
000A0B ED 39 9C    0007*M         OUT0    (REG), A
000A0E C1          0008*M         POP     BC
000A0F             0069*  			RES_GPIO PB_ALT2, B
000A0F C5          0001*M         PUSH    BC
000A10 78          0002*M         LD      A, VAL
000A11 2F          0003*M         CPL
000A12 4F          0004*M         LD      C, A
000A13 ED 38 9D    0005*M         IN0     A, (REG)
000A16 A1          0006*M         AND     C
000A17 ED 39 9D    0007*M         OUT0    (REG), A
000A1A C1          0008*M         POP     BC
000A1B C9          0070*  			RET
000A1C             0071*  
000A1C             0072*  ; Alt Function
000A1C             0073*  ;
000A1C             0074*  GPIOB_M5:		SET_GPIO PB_DDR,  B
000A1C ED 38 9B    0001*M         IN0     A, (REG)
000A1F B0          0002*M         OR      VAL
000A20 ED 39 9B    0003*M         OUT0    (REG), A
000A23             0075*  			RES_GPIO PB_ALT1, B
000A23 C5          0001*M         PUSH    BC
000A24 78          0002*M         LD      A, VAL
000A25 2F          0003*M         CPL
000A26 4F          0004*M         LD      C, A
000A27 ED 38 9C    0005*M         IN0     A, (REG)
000A2A A1          0006*M         AND     C
000A2B ED 39 9C    0007*M         OUT0    (REG), A
000A2E C1          0008*M         POP     BC
000A2F             0076*  			SET_GPIO PB_ALT2, B
000A2F ED 38 9D    0001*M         IN0     A, (REG)
000A32 B0          0002*M         OR      VAL
000A33 ED 39 9D    0003*M         OUT0    (REG), A
000A36 C9          0077*  			RET
000A37             0078*  
000A37             0079*  ; Interrupt, Active Low
000A37             0080*  ;
000A37             0081*  GPIOB_M6:		RES_GPIO PB_DR,   B
000A37 C5          0001*M         PUSH    BC
000A38 78          0002*M         LD      A, VAL
000A39 2F          0003*M         CPL
000A3A 4F          0004*M         LD      C, A
000A3B ED 38 9A    0005*M         IN0     A, (REG)
000A3E A1          0006*M         AND     C
000A3F ED 39 9A    0007*M         OUT0    (REG), A
000A42 C1          0008*M         POP     BC
000A43             0082*  			RES_GPIO PB_DDR,  B
000A43 C5          0001*M         PUSH    BC
000A44 78          0002*M         LD      A, VAL
000A45 2F          0003*M         CPL
000A46 4F          0004*M         LD      C, A
000A47 ED 38 9B    0005*M         IN0     A, (REG)
000A4A A1          0006*M         AND     C
000A4B ED 39 9B    0007*M         OUT0    (REG), A
000A4E C1          0008*M         POP     BC
000A4F             0083*  			SET_GPIO PB_ALT1, B
000A4F ED 38 9C    0001*M         IN0     A, (REG)
000A52 B0          0002*M         OR      VAL
000A53 ED 39 9C    0003*M         OUT0    (REG), A
000A56             0084*  			SET_GPIO PB_ALT2, B
000A56 ED 38 9D    0001*M         IN0     A, (REG)
000A59 B0          0002*M         OR      VAL
000A5A ED 39 9D    0003*M         OUT0    (REG), A
000A5D C9          0085*  			RET
000A5E             0086*  
000A5E             0087*  
000A5E             0088*  ; Interrupt, Active High
000A5E             0089*  ;
000A5E             0090*  GPIOB_M7:		SET_GPIO PB_DR,   B
000A5E ED 38 9A    0001*M         IN0     A, (REG)
000A61 B0          0002*M         OR      VAL
000A62 ED 39 9A    0003*M         OUT0    (REG), A
000A65             0091*  			RES_GPIO PB_DDR,  B
000A65 C5          0001*M         PUSH    BC
000A66 78          0002*M         LD      A, VAL
000A67 2F          0003*M         CPL
000A68 4F          0004*M         LD      C, A
000A69 ED 38 9B    0005*M         IN0     A, (REG)
000A6C A1          0006*M         AND     C
000A6D ED 39 9B    0007*M         OUT0    (REG), A
000A70 C1          0008*M         POP     BC
000A71             0092*  			SET_GPIO PB_ALT1, B
000A71 ED 38 9C    0001*M         IN0     A, (REG)
000A74 B0          0002*M         OR      VAL
000A75 ED 39 9C    0003*M         OUT0    (REG), A
000A78             0093*  			SET_GPIO PB_ALT2, B
000A78 ED 38 9D    0001*M         IN0     A, (REG)
000A7B B0          0002*M         OR      VAL
000A7C ED 39 9D    0003*M         OUT0    (REG), A
000A7F C9          0094*  			RET
000A80             0095*  
000A80             0096*  
000A80             0097*  ; Interrupt, Falling Edge
000A80             0098*  ;
000A80             0099*  GPIOB_M8:		RES_GPIO PB_DR,   B
000A80 C5          0001*M         PUSH    BC
000A81 78          0002*M         LD      A, VAL
000A82 2F          0003*M         CPL
000A83 4F          0004*M         LD      C, A
000A84 ED 38 9A    0005*M         IN0     A, (REG)
000A87 A1          0006*M         AND     C
000A88 ED 39 9A    0007*M         OUT0    (REG), A
000A8B C1          0008*M         POP     BC
000A8C             0100*  			SET_GPIO PB_DDR,  B
000A8C ED 38 9B    0001*M         IN0     A, (REG)
000A8F B0          0002*M         OR      VAL
000A90 ED 39 9B    0003*M         OUT0    (REG), A
000A93             0101*  			SET_GPIO PB_ALT1, B
000A93 ED 38 9C    0001*M         IN0     A, (REG)
000A96 B0          0002*M         OR      VAL
000A97 ED 39 9C    0003*M         OUT0    (REG), A
000A9A             0102*  			SET_GPIO PB_ALT2, B
000A9A ED 38 9D    0001*M         IN0     A, (REG)
000A9D B0          0002*M         OR      VAL
000A9E ED 39 9D    0003*M         OUT0    (REG), A
000AA1 C9          0103*  			RET
000AA2             0104*  
000AA2             0105*  ; Interrupt, Rising Edge
000AA2             0106*  ;
000AA2             0107*  GPIOB_M9:		SET_GPIO PB_DR,   B
000AA2 ED 38 9A    0001*M         IN0     A, (REG)
000AA5 B0          0002*M         OR      VAL
000AA6 ED 39 9A    0003*M         OUT0    (REG), A
000AA9             0108*  			SET_GPIO PB_DDR,  B
000AA9 ED 38 9B    0001*M         IN0     A, (REG)
000AAC B0          0002*M         OR      VAL
000AAD ED 39 9B    0003*M         OUT0    (REG), A
000AB0             0109*  			SET_GPIO PB_ALT1, B
000AB0 ED 38 9C    0001*M         IN0     A, (REG)
000AB3 B0          0002*M         OR      VAL
000AB4 ED 39 9C    0003*M         OUT0    (REG), A
000AB7             0110*  			SET_GPIO PB_ALT2, B
000AB7 ED 38 9D    0001*M         IN0     A, (REG)
000ABA B0          0002*M         OR      VAL
000ABB ED 39 9D    0003*M         OUT0    (REG), A
000ABE C9          0111*  			RET
000ABF             0112*  
000ABF             0113*  ;			include "agon_gpio.inc"
000ABF             0010       include "agon_graphics.asm"
000ABF             0001*  ;
000ABF             0002*  ; Title:	BBC Basic for AGON - Graphics stuff
000ABF             0003*  ; Author:	Dean Belfield
000ABF             0004*  ; Created:	04/12/2024
000ABF             0005*  ; Last Updated:	11/12/2024
000ABF             0006*  ;
000ABF             0007*  ; Modinfo:
000ABF             0008*  ; 11/12/2024:	Modified POINT_ to work with OSWORD
000ABF             0009*  
000ABF             0010*  			.ASSUME	ADL = 0
000ABF             0011*  ;	.ORG 0x0000
000ABF             0012*  
000ABF             0013*  			; INCLUDE	"equs.inc"
000ABF             0014*  			; INCLUDE "macros.inc"
000ABF             0015*  			; INCLUDE "mos_api.inc"	; In MOS/src
000ABF             0016*  
000ABF             0017*  ;			SEGMENT CODE
000ABF             0018*  
000ABF             0019*  ;			XDEF	MODE_
000ABF             0020*  ;			XDEF	COLOUR_
000ABF             0021*  ;			XDEF	POINT_
000ABF             0022*  ;			XDEF	GETSCHR
000ABF             0023*  ;			XDEF	GETSCHR_1
000ABF             0024*  
000ABF             0025*  ;			XREF	ACCS
000ABF             0026*  ;			XREF	OSWRCH
000ABF             0027*  ;			XREF	ASC_TO_NUMBER
000ABF             0028*  ;			XREF	EXTERR
000ABF             0029*  ;			XREF	EXPRI
000ABF             0030*  ;			XREF	COMMA
000ABF             0031*  ;			XREF	XEQ
000ABF             0032*  ;			XREF	NXT
000ABF             0033*  ;			XREF	BRAKET
000ABF             0034*  ;			XREF	CRTONULL
000ABF             0035*  ;			XREF	NULLTOCR
000ABF             0036*  ;			XREF	CRLF
000ABF             0037*  ;			XREF	EXPR_W2
000ABF             0038*  ;			XREF	INKEY1
000ABF             0039*  
000ABF             0040*  ; MODE n: Set video mode
000ABF             0041*  ;
000ABF DD E5       0042*  MODE_:			PUSH	IX			; Get the system vars in IX
000AC1             0043*  			MOSCALL	mos_sysvars		; Reset the semaphore
000AC1 3E 08       0001*M 			LD	A, function
000AC3 49 CF       0002*M 			RST.LIS	08h
000AC5 5B DD CB 04 0044*  			RES.LIL	4, (IX+sysvar_vpd_pflags)
       A6          
000ACA CD 6C 18    0045*  			CALL    EXPRI
000ACD D9          0046*  			EXX
000ACE             0047*  			VDU	16H			; Mode change
000ACE 3E 16       0001*M         LD      A, VAL
000AD0 CD CE 11    0002*M         CALL    OSWRCH
000AD3             0048*  			VDU	L
000AD3 7D          0001*M         LD      A, VAL
000AD4 CD CE 11    0002*M         CALL    OSWRCH
000AD7             0049*  			MOSCALL	mos_sysvars
000AD7 3E 08       0001*M 			LD	A, function
000AD9 49 CF       0002*M 			RST.LIS	08h
000ADB 5B DD CB 04 0050*  @@:			BIT.LIL	4, (IX+sysvar_vpd_pflags)
       66          
000AE0 28 F9       0051*  			JR	Z, @B			; Wait for the result
000AE2 DD E1       0052*  			POP	IX
000AE4 C3 D2 24    0053*  			JP	XEQ
000AE7             0054*  
000AE7             0055*  ; GET(x,y): Get the ASCII code of a character on screen
000AE7             0056*  ;
000AE7 FD 23       0057*  GETSCHR:		INC	IY
000AE9 CD 6C 18    0058*  			CALL    EXPRI      		; Get X coordinate
000AEC D9          0059*  			EXX
000AED E5          0060*  			PUSH	HL			; Stack X
000AEE CD DB 20    0061*  			CALL	COMMA
000AF1 CD 6C 18    0062*  			CALL	EXPRI			; Get Y coordinate
000AF4 D9          0063*  			EXX
000AF5 CD E7 20    0064*  			CALL	BRAKET			; Closing bracket
000AF8 D1          0065*  			POP	DE			; Pop X back into DE
000AF9 CD 05 0B    0066*  			CALL	GETSCHR_1
000AFC             0067*  ;			JP	INKEY1
000AFC 11 00 52    0068*  	        	LD	DE,ACCS
000AFF 12          0069*  	                LD	(DE),A
000B00 3E 80       0070*  	                LD	A,80H
000B02 D0          0071*          	        RET	NC
000B03 1C          0072*  	                INC	E
000B04 C9          0073*                  	RET
000B05             0074*  ;
000B05             0075*  ; Fetch a character from the screen
000B05             0076*  ; - DE: X coordinate
000B05             0077*  ; - HL: Y coordinate
000B05             0078*  ; Returns
000B05             0079*  ; - A: The character or FFh if no match
000B05             0080*  ; - F: C if match, otherwise NC
000B05             0081*  ;
000B05 DD E5       0082*  GETSCHR_1:		PUSH	IX			; Get the system vars in IX
000B07             0083*  			MOSCALL	mos_sysvars		; Reset the semaphore
000B07 3E 08       0001*M 			LD	A, function
000B09 49 CF       0002*M 			RST.LIS	08h
000B0B 5B DD CB 04 0084*  			RES.LIL	1, (IX+sysvar_vpd_pflags)
       8E          
000B10             0085*  			VDU	23
000B10 3E 17       0001*M         LD      A, VAL
000B12 CD CE 11    0002*M         CALL    OSWRCH
000B15             0086*  			VDU	0
000B15 3E 00       0001*M         LD      A, VAL
000B17 CD CE 11    0002*M         CALL    OSWRCH
000B1A             0087*  			VDU	vdp_scrchar
000B1A 3E 83       0001*M         LD      A, VAL
000B1C CD CE 11    0002*M         CALL    OSWRCH
000B1F             0088*  			VDU	E
000B1F 7B          0001*M         LD      A, VAL
000B20 CD CE 11    0002*M         CALL    OSWRCH
000B23             0089*  			VDU	D
000B23 7A          0001*M         LD      A, VAL
000B24 CD CE 11    0002*M         CALL    OSWRCH
000B27             0090*  			VDU	L
000B27 7D          0001*M         LD      A, VAL
000B28 CD CE 11    0002*M         CALL    OSWRCH
000B2B             0091*  			VDU	H
000B2B 7C          0001*M         LD      A, VAL
000B2C CD CE 11    0002*M         CALL    OSWRCH
000B2F 5B DD CB 04 0092*  @@:			BIT.LIL	1, (IX+sysvar_vpd_pflags)
       4E          
000B34 28 F9       0093*  			JR	Z, @B			; Wait for the result
000B36 5B DD 7E 09 0094*  			LD.LIL	A, (IX+sysvar_scrchar)	; Fetch the result in A
000B3A B7          0095*  			OR	A			; Check for 00h
000B3B 37          0096*  			SCF				; C = character map
000B3C 20 01       0097*  			JR	NZ, @F			; We have a character, so skip next bit
000B3E AF          0098*  			XOR	A			; Clear carry
000B3F DD E1       0099*  @@:			POP	IX
000B41 C9          0100*  			RET
000B42             0101*  
000B42             0102*  ; POINT(x,y): Get the pixel colour of a point on screen
000B42             0103*  ; Parameters:
000B42             0104*  ; - DE: X-coordinate
000B42             0105*  ; - HL: Y-coordinate
000B42             0106*  ; Returns:
000B42             0107*  ; -  A: Pixel colour
000B42             0108*  ;
000B42 DD E5       0109*  POINT_:			PUSH	IX			; Get the system vars in IX
000B44             0110*  			MOSCALL	mos_sysvars		; Reset the semaphore
000B44 3E 08       0001*M 			LD	A, function
000B46 49 CF       0002*M 			RST.LIS	08h
000B48 5B DD CB 04 0111*  			RES.LIL	2, (IX+sysvar_vpd_pflags)
       96          
000B4D             0112*  			VDU	23
000B4D 3E 17       0001*M         LD      A, VAL
000B4F CD CE 11    0002*M         CALL    OSWRCH
000B52             0113*  			VDU	0
000B52 3E 00       0001*M         LD      A, VAL
000B54 CD CE 11    0002*M         CALL    OSWRCH
000B57             0114*  			VDU	vdp_scrpixel
000B57 3E 84       0001*M         LD      A, VAL
000B59 CD CE 11    0002*M         CALL    OSWRCH
000B5C             0115*  			VDU	E
000B5C 7B          0001*M         LD      A, VAL
000B5D CD CE 11    0002*M         CALL    OSWRCH
000B60             0116*  			VDU	D
000B60 7A          0001*M         LD      A, VAL
000B61 CD CE 11    0002*M         CALL    OSWRCH
000B64             0117*  			VDU	L
000B64 7D          0001*M         LD      A, VAL
000B65 CD CE 11    0002*M         CALL    OSWRCH
000B68             0118*  			VDU	H
000B68 7C          0001*M         LD      A, VAL
000B69 CD CE 11    0002*M         CALL    OSWRCH
000B6C 5B DD CB 04 0119*  @@:			BIT.LIL	2, (IX+sysvar_vpd_pflags)
       56          
000B71 28 F9       0120*  			JR	Z, @B			; Wait for the result
000B73             0121*  ;
000B73             0122*  ; Return the data as a 1 byte index
000B73             0123*  ;
000B73 5B DD 7E 16 0124*  			LD.LIL	A, (IX+sysvar_scrpixelIndex)
000B77 DD E1       0125*  			POP	IX
000B79 C9          0126*  			RET
000B7A             0127*  
000B7A             0128*  ; COLOUR colour
000B7A             0129*  ; COLOUR L,P
000B7A             0130*  ; COLOUR L,R,G,B
000B7A             0131*  ;
000B7A CD 6C 18    0132*  COLOUR_:		CALL	EXPRI			; The colour / mode
000B7D D9          0133*  			EXX
000B7E 7D          0134*  			LD	A, L
000B7F 32 00 52    0135*  			LD	(VDU_BUFFER+0), A	; Store first parameter
000B82 CD 44 45    0136*  			CALL	NXT			; Are there any more parameters?
000B85 FE 2C       0137*  			CP	','
000B87 28 0E       0138*  			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
000B89             0139*  ;
000B89             0140*  			VDU	11h			; Just set the colour
000B89 3E 11       0001*M         LD      A, VAL
000B8B CD CE 11    0002*M         CALL    OSWRCH
000B8E             0141*  			VDU	(VDU_BUFFER+0)
000B8E 3A 00 52    0001*M         LD      A, VAL
000B91 CD CE 11    0002*M         CALL    OSWRCH
000B94 C3 D2 24    0142*  			JP	XEQ
000B97             0143*  ;
000B97 CD DB 20    0144*  COLOUR_1:		CALL	COMMA
000B9A CD 6C 18    0145*  			CALL	EXPRI			; Parse R (OR P)
000B9D D9          0146*  			EXX
000B9E 7D          0147*  			LD	A, L
000B9F 32 01 52    0148*  			LD	(VDU_BUFFER+1), A
000BA2 CD 44 45    0149*  			CALL	NXT			; Are there any more parameters?
000BA5 FE 2C       0150*  			CP	','
000BA7 28 23       0151*  			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
000BA9             0152*  ;
000BA9             0153*  			VDU	13h			; VDU:COLOUR
000BA9 3E 13       0001*M         LD      A, VAL
000BAB CD CE 11    0002*M         CALL    OSWRCH
000BAE             0154*  			VDU	(VDU_BUFFER+0)		; Logical Colour
000BAE 3A 00 52    0001*M         LD      A, VAL
000BB1 CD CE 11    0002*M         CALL    OSWRCH
000BB4             0155*  			VDU	(VDU_BUFFER+1)		; Palette Colour
000BB4 3A 01 52    0001*M         LD      A, VAL
000BB7 CD CE 11    0002*M         CALL    OSWRCH
000BBA             0156*  			VDU	0			; RGB set to 0
000BBA 3E 00       0001*M         LD      A, VAL
000BBC CD CE 11    0002*M         CALL    OSWRCH
000BBF             0157*  			VDU	0
000BBF 3E 00       0001*M         LD      A, VAL
000BC1 CD CE 11    0002*M         CALL    OSWRCH
000BC4             0158*  			VDU	0
000BC4 3E 00       0001*M         LD      A, VAL
000BC6 CD CE 11    0002*M         CALL    OSWRCH
000BC9 C3 D2 24    0159*  			JP	XEQ
000BCC             0160*  ;
000BCC CD DB 20    0161*  COLOUR_2:		CALL	COMMA
000BCF CD 6C 18    0162*  			CALL	EXPRI			; Parse G
000BD2 D9          0163*  			EXX
000BD3 7D          0164*  			LD	A, L
000BD4 32 02 52    0165*  			LD	(VDU_BUFFER+2), A
000BD7 CD DB 20    0166*  			CALL	COMMA
000BDA CD 6C 18    0167*  			CALL	EXPRI			; Parse B
000BDD D9          0168*  			EXX
000BDE 7D          0169*  			LD	A, L
000BDF 32 03 52    0170*  			LD	(VDU_BUFFER+3), A
000BE2             0171*  			VDU	13h			; VDU:COLOUR
000BE2 3E 13       0001*M         LD      A, VAL
000BE4 CD CE 11    0002*M         CALL    OSWRCH
000BE7             0172*  			VDU	(VDU_BUFFER+0)		; Logical Colour
000BE7 3A 00 52    0001*M         LD      A, VAL
000BEA CD CE 11    0002*M         CALL    OSWRCH
000BED             0173*  			VDU	FFh			; Physical Colour (-1 for RGB mode)
000BED 3E FF       0001*M         LD      A, VAL
000BEF CD CE 11    0002*M         CALL    OSWRCH
000BF2             0174*  			VDU	(VDU_BUFFER+1)		; R
000BF2 3A 01 52    0001*M         LD      A, VAL
000BF5 CD CE 11    0002*M         CALL    OSWRCH
000BF8             0175*  			VDU	(VDU_BUFFER+2)		; G
000BF8 3A 02 52    0001*M         LD      A, VAL
000BFB CD CE 11    0002*M         CALL    OSWRCH
000BFE             0176*  			VDU	(VDU_BUFFER+3)		; B
000BFE 3A 03 52    0001*M         LD      A, VAL
000C01 CD CE 11    0002*M         CALL    OSWRCH
000C04 C3 D2 24    0177*  			JP	XEQ
000C07             0178*  
000C07             0179*  ;			include "agon_graphics.inc"
000C07             0011       include "agon_init.asm"
000C07             0001*  ;
000C07             0002*  ; Title:	BBC Basic for AGON - Initialisation Code
000C07             0003*  ;		Initialisation Code
000C07             0004*  ; Author:	Dean Belfield
000C07             0005*  ; Created:	04/12/2024
000C07             0006*  ; Last Updated:	14/12/2024
000C07             0007*  ;
000C07             0008*  ; Modinfo:
000C07             0009*  ; 14/12/2024:	Fix for *BYE command
000C07             0010*  
000C07             0011*  ;			SEGMENT __VECTORS
000C07             0012*  
000C07             0013*  ;			XREF	START
000C07             0014*  ;			XREF	ACCS
000C07             0015*  ;			XREF	TELL
000C07             0016*  
000C07             0017*  			.ASSUME	ADL = 0
000C07             0018*  ;	.ORG 0x0000
000C07             0019*  
000C07             0020*  			; INCLUDE	"equs.inc"
000C07             0021*  
000C07             0022*  argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
000C07             0023*  
000C07             0024*  ;
000C07             0025*  ; Start in mixed mode. Assumes MBASE is set to correct segment
000C07             0026*  ;
000C07 C3 92 0C    0027*  			JP	_start				; Jump to start
000C0A             0028*  			DS	5
000C0F             0029*  
000C0F 49 CF       0030*  RST_08:			RST.LIS	08h				; API call
000C11 C9          0031*  			RET
000C12             0032*  			DS 	5
000C17             0033*  
000C17 49 D7       0034*  RST_10:			RST.LIS 10h				; Output
000C19 C9          0035*  			RET
000C1A             0036*  			DS	5
000C1F             0037*  
000C1F 49 DF       0038*  RST_18:			RST.LIS	18h				; Block Output
000C21 C9          0039*  			RET
000C22             0040*  			DS	5
000C27             0041*  
000C27             0042*  RST_20:			DS	8
000C2F             0043*  RST_28:			DS	8
000C37             0044*  RST_30:			DS	8
000C3F             0045*  
000C3F             0046*  ;
000C3F             0047*  ; The NMI interrupt vector (not currently used by AGON)
000C3F             0048*  ;
000C3F FB          0049*  RST_38:			EI
000C40 ED 4D       0050*  			RETI
000C42             0051*  ;
000C42             0052*  ; The header stuff is from byte 64 onwards
000C42             0053*  ;
000C42 FF FF FF FF 0054*  			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
000C80             0055*  
000C80 4D 4F 53    0056*  			DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
000C83 00          0057*  			DB	00h				; MOS header version 0
000C84 00          0058*  			DB	00h				; Flag for run mode (0: Z80, 1: ADL)
000C85             0059*  
000C85 42 42 43 42 0060*  _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
       41 53 49 43 
       2E 42 49 4E 
       00          
000C92             0061*  
000C92             0062*  ;
000C92             0063*  ; And the code follows on immediately after the header
000C92             0064*  ;
000C92 5B FD E5    0065*  _start:			PUSH.LIL	IY			; Preserve IY
000C95             0066*  
000C95 FD 21 00 00 0067*  			LD		IY, 0			; Preserve SPS
000C99 FD 39       0068*  			ADD		IY, SP
000C9B 5B FD E5    0069*  			PUSH.LIL	IY
000C9E             0070*  
000C9E E3          0071*  			EX		(SP), HL		; Get the SPS part of the return address
000C9F 5B E5       0072*  			PUSH.LIL	HL
000CA1 E3          0073*  			EX		(SP), HL		; And restore it for BASIC
000CA2             0074*  
000CA2 5B F5       0075*  			PUSH.LIL	AF			; Preserve the rest of the registers
000CA4 5B C5       0076*  			PUSH.LIL	BC
000CA6 5B D5       0077*  			PUSH.LIL	DE
000CA8 5B DD E5    0078*  			PUSH.LIL	IX
000CAB             0079*  
000CAB ED 6E       0080*  			LD		A, MB			; Segment base
000CAD DD 21 A5 0D 0081*  			LD		IX, argv_ptrs		; The argv array pointer address
000CB1 CD 91 0D    0082*  			CALL		_set_aix24		; Convert to a 24-bit address
000CB4 5B DD E5    0083*  			PUSH.LIL	IX
000CB7 CD 21 0D    0084*  			CALL		_parse_params		; Parse the parameters
000CBA 5B DD E1    0085*  			POP.LIL		IX			; IX: argv
000CBD 06 00       0086*  			LD		B, 0			;  C: argc
000CBF CD DA 0C    0087*  			CALL		_main			; Start user code
000CC2             0088*  
000CC2 5B DD E1    0089*  			POP.LIL		IX			; Restore the registers
000CC5 5B D1       0090*  			POP.LIL		DE
000CC7 5B C1       0091*  			POP.LIL		BC
000CC9 5B F1       0092*  			POP.LIL		AF
000CCB             0093*  
000CCB EB          0094*  			EX		DE, HL 			; DE: Return code from BASIC
000CCC 5B E1       0095*  			POP.LIL		HL 			; The SPS part of the return address
000CCE 5B FD E1    0096*  			POP.LIL		IY			; Get the preserved SPS
000CD1 FD F9       0097*  			LD		SP, IY			; Restore SPS
000CD3 E3          0098*  			EX		(SP), HL		; Store the SPS part of the return address on the stack
000CD4 EB          0099*  			EX		DE, HL 			; HL: Return code from BASIC
000CD5             0100*  
000CD5 5B FD E1    0101*  			POP.LIL		IY			; Restore IY
000CD8 49 C9       0102*  			RET.L					; Return to MOS
000CDA             0103*  
000CDA             0104*  ; The main routine
000CDA             0105*  ; IXU: argv - pointer to array of parameters
000CDA             0106*  ;   C: argc - number of parameters
000CDA             0107*  ; Returns:
000CDA             0108*  ;  HL: Error code, or 0 if OK
000CDA             0109*  ;
000CDA 21 00 52    0110*  _main:			LD	HL, ACCS		; Clear the ACCS
000CDD 36 00       0111*  			LD	(HL), 0
000CDF 79          0112*  			LD	A, C
000CE0 FE 02       0113*  			CP	2
000CE2 28 24       0114*  			JR	Z, _autoload		; 2 parameters = autoload
000CE4 38 35       0115*  			JR	C, _startbasic		; 1 parameter = normal start
000CE6             0116*  ;			CALL	STAR_VERSION		; Output the AGON version
000CE6 CD 33 45    0117*  			CALL	TELL
000CE9 55 73 61 67 0118*  			DB	"Usage:\n\r"
       65 3A 0A 0D 
000CF1 52 55 4E 20 0119*  			DB	"RUN . <filename>\n\r", 0
       2E 20 3C 66 
       69 6C 65 6E 
       61 6D 65 3E 
       0A 0D 00    
000D04 21 00 00    0120*  			LD	HL, 0			; The error code
000D07 C9          0121*  			RET
000D08             0122*  ;
000D08 5B DD 27 03 0123*  _autoload:		LD.LIL	HL, (IX+3)		; HLU: Address of filename
000D0C 11 00 52    0124*  			LD	DE, ACCS		;  DE: Destination address
000D0F 5B 7E       0125*  @@:			LD.LIL	A, (HL)			; Fetch the filename byte
000D11 12          0126*  			LD	(DE), A			;
000D12 5B 23       0127*  			INC.LIL	HL			; Increase the source pointer
000D14 1C          0128*  			INC	E			; We only need to increase E as ACCS is on a page boundary
000D15 20 F8       0129*  			JR	NZ, @B			; Loop until we hit a 0 byte
000D17 1D          0130*  			DEC	E
000D18 3E 0D       0131*  			LD	A, CR
000D1A 12          0132*  			LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
000D1B             0133*  ;
000D1B E1          0134*  _startbasic:		POP	 HL			; Pop the return address to init off SPS
000D1C 5B E5       0135*  			PUSH.LIL HL 			; Stack it on SPL (*BYE will use this as the return address)
000D1E C3 50 37    0136*  			JP	 START			; And start BASIC
000D21             0137*  
000D21             0138*  ; Parse the parameter string into a C array
000D21             0139*  ; Parameters
000D21             0140*  ; -   A: Segment base
000D21             0141*  ; - HLU: Address of parameter string
000D21             0142*  ; - IXU: Address for array pointer storage
000D21             0143*  ; Returns:
000D21             0144*  ; -   C: Number of parameters parsed
000D21             0145*  ;
000D21 01 85 0C    0146*  _parse_params:		LD		BC, _exec_name		; Get the address of the app name in this segment
000D24 CD 7F 0D    0147*  			CALL		_set_abc24		; Convert it to a 24-bit address based upon segment base
000D27 5B DD 0F 00 0148*  			LD.LIL		(IX+0), BC		; ARGV[0] = the executable name
000D2B 5B DD 23    0149*  			INC.LIL		IX
000D2E 5B DD 23    0150*  			INC.LIL		IX
000D31 5B DD 23    0151*  			INC.LIL		IX
000D34 CD 76 0D    0152*  			CALL		_skip_spaces		; Skip HL past any leading spaces
000D37             0153*  ;
000D37 01 01 00    0154*  			LD		BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
000D3A 06 0F       0155*  			LD		B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
000D3C             0156*  ;
000D3C C5          0157*  _parse_params_1:	PUSH		BC			; Stack ARGC
000D3D 5B E5       0158*  			PUSH.LIL	HL			; Stack start address of token
000D3F CD 65 0D    0159*  			CALL		_get_token		; Get the next token
000D42 79          0160*  			LD		A, C			; A: Length of the token in characters
000D43 5B D1       0161*  			POP.LIL		DE			; Start address of token (was in HL)
000D45 C1          0162*  			POP		BC			; ARGC
000D46 B7          0163*  			OR		A			; Check for A=0 (no token found) OR at end of string
000D47 C8          0164*  			RET		Z
000D48             0165*  ;
000D48 5B DD 1F 00 0166*  			LD.LIL		(IX+0), DE		; Store the pointer to the token
000D4C 5B E5       0167*  			PUSH.LIL	HL			; DE=HL
000D4E 5B D1       0168*  			POP.LIL		DE
000D50 CD 76 0D    0169*  			CALL		_skip_spaces		; And skip HL past any spaces onto the next character
000D53 AF          0170*  			XOR		A
000D54 5B 12       0171*  			LD.LIL		(DE), A			; Zero-terminate the token
000D56 5B DD 23    0172*  			INC.LIL		IX
000D59 5B DD 23    0173*  			INC.LIL		IX
000D5C 5B DD 23    0174*  			INC.LIL		IX			; Advance to next pointer position
000D5F 0C          0175*  			INC		C			; Increment ARGC
000D60 79          0176*  			LD		A, C			; Check for C >= A
000D61 B8          0177*  			CP		B
000D62 38 D8       0178*  			JR		C, _parse_params_1	; And loop
000D64 C9          0179*  			RET
000D65             0180*  
000D65             0181*  ; Get the next token
000D65             0182*  ; Parameters:
000D65             0183*  ; - HL: Address of parameter string
000D65             0184*  ; Returns:
000D65             0185*  ; - HL: Address of first character after token
000D65             0186*  ; -  C: Length of token (in characters)
000D65             0187*  ;
000D65 0E 00       0188*  _get_token:		LD		C, 0			; Initialise length
000D67 5B 7E       0189*  @@:			LD.LIL		A, (HL)			; Get the character from the parameter string
000D69 B7          0190*  			OR		A			; Exit if 0 (end of parameter string in MOS)
000D6A C8          0191*  			RET 		Z
000D6B FE 0D       0192*  			CP		13			; Exit if CR (end of parameter string in BBC BASIC)
000D6D C8          0193*  			RET		Z
000D6E FE 20       0194*  			CP		' '			; Exit if space (end of token)
000D70 C8          0195*  			RET		Z
000D71 5B 23       0196*  			INC.LIL		HL			; Advance to next character
000D73 0C          0197*  			INC 		C			; Increment length
000D74 18 F1       0198*  			JR		@B
000D76             0199*  
000D76             0200*  ; Skip spaces in the parameter string
000D76             0201*  ; Parameters:
000D76             0202*  ; - HL: Address of parameter string
000D76             0203*  ; Returns:
000D76             0204*  ; - HL: Address of next none-space character
000D76             0205*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
000D76             0206*  ;
000D76 5B 7E       0207*  _skip_spaces:		LD.LIL		A, (HL)			; Get the character from the parameter string
000D78 FE 20       0208*  			CP		' '			; Exit if not space
000D7A C0          0209*  			RET		NZ
000D7B 5B 23       0210*  			INC.LIL		HL			; Advance to next character
000D7D 18 F7       0211*  			JR		_skip_spaces		; Increment length
000D7F             0212*  
000D7F             0213*  ; Set the MSB of BC (U) to A
000D7F             0214*  ; Parameters:
000D7F             0215*  ; - BC: 16-bit address
000D7F             0216*  ; -  A: Value to stick in U of BC
000D7F             0217*  ; Returns:
000D7F             0218*  ; - BCU
000D7F             0219*  ;
000D7F 5B E5       0220*  _set_abc24:		PUSH.LIL	HL			; Preserve HL
000D81 5B C5       0221*  			PUSH.LIL	BC			; Stick BC onto SPL
000D83 5B 21 02 00 0222*  			LD.LIL		HL, 2			; HL: SP+2
       00          
000D88 5B 39       0223*  			ADD.LIL		HL, SP
000D8A 5B 77       0224*  			LD.LIL		(HL), A			; Store A in it
000D8C 5B C1       0225*  			POP.LIL		BC			; Fetch ammended BC
000D8E 5B E1       0226*  			POP.LIL		HL			; Restore HL
000D90 C9          0227*  			RET
000D91             0228*  
000D91             0229*  ; Set the MSB of BC (U) to A
000D91             0230*  ; Parameters:
000D91             0231*  ; - IX: 16-bit address
000D91             0232*  ; -  A: Value to stick in U of BC
000D91             0233*  ; Returns:
000D91             0234*  ; - IXU
000D91             0235*  ;
000D91 5B DD E5    0236*  _set_aix24:		PUSH.LIL	IX			; Stick IX onto SPL
000D94 5B DD 21 02 0237*  			LD.LIL		IX, 2			; IX: SP+2
       00 00       
000D9A 5B DD 39    0238*  			ADD.LIL		IX, SP
000D9D 5B DD 77 00 0239*  			LD.LIL		(IX), A			; Store A in it
000DA1 5B DD E1    0240*  			POP.LIL		IX			; Fetch ammended IX
000DA4 C9          0241*  			RET
000DA5             0242*  
000DA5             0243*  ; Storage for the argv array pointers
000DA5             0244*  ;
000DA5 00 00 00 00 0245*  argv_ptrs:		BLKP	argv_ptrs_max, 0		; Storage for the argv array pointers
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
000DD5             0246*  ;    include "agon_init.inc"
000DD5             0012       include "agon_interrupt.asm"
000DD5             0001*  ;
000DD5             0002*  ; Title:	BBC Basic for AGON - Interrupts
000DD5             0003*  ; Author:	Dean Belfield
000DD5             0004*  ; Created:	04/12/2024
000DD5             0005*  ; Last Updated:	04/12/2024
000DD5             0006*  ;
000DD5             0007*  ; Modinfo:
000DD5             0008*  
000DD5             0009*  			.ASSUME	ADL = 0
000DD5             0010*  ;	.ORG 0x0000
000DD5             0011*  
000DD5             0012*  			; INCLUDE	"macros.inc"
000DD5             0013*  			; INCLUDE	"equs.inc"
000DD5             0014*  			; INCLUDE "mos_api.inc"	; In MOS/src
000DD5             0015*  
000DD5             0016*  ;			SEGMENT CODE
000DD5             0017*  
000DD5             0018*  ;			XDEF	VBLANK_INIT
000DD5             0019*  ;			XDEF	VBLANK_STOP
000DD5             0020*  ;			XDEF	VBLANK_HANDLER
000DD5             0021*  
000DD5             0022*  ;			XREF	ESCSET
000DD5             0023*  ;			XREF	KEYDOWN		; In ram.asm
000DD5             0024*  ;			XREF	KEYASCII 	; In ram.asm
000DD5             0025*  ;			XREF	KEYCOUNT	; In ram.asm
000DD5             0026*  
000DD5             0027*  ; Hook into the MOS VBLANK interrupt
000DD5             0028*  ;
000DD5 F3          0029*  VBLANK_INIT:		DI
000DD6             0030*  
000DD6 ED 6E       0031*  			LD		A, MB 				; Get a 24-bit pointer to
000DD8 21 53 0E    0032*  			LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
000DDB CD 15 0E    0033*  			CALL		SET_AHL16 			; address is a 16-bit pointer in BBC BASIC's segment
000DDE             0034*  
000DDE 1E 32       0035*  			LD		E, 32h				; Set up the VBlank Interrupt Vector
000DE0             0036*  			MOSCALL		mos_setintvector
000DE0 3E 14       0001*M 			LD	A, function
000DE2 49 CF       0002*M 			RST.LIS	08h
000DE4             0037*  
000DE4 5B E5       0038*  			PUSH.LIL	HL				; HLU: Pointer to the MOS interrupt vector
000DE6 5B D1       0039*  			POP.LIL		DE 				; DEU: Pointer to the MOS interrupt vector
000DE8             0040*  
000DE8 21 6B 0E    0041*  			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DEB ED 6E       0042*  			LD		A, MB	 			; Get the segment BBC BASIC is running in
000DED 32 5C 0E    0043*  			LD		(VBLANK_HANDLER_MB + 1), A 	; Store in the interrupt handler
000DF0 CD 15 0E    0044*  			CALL		SET_AHL16 			; Convert pointer to an absolute 24-bit address
000DF3 5B ED 1F    0045*  			LD.LIL		(HL), DE			; Self-modify the code
000DF6 FB          0046*  			EI
000DF7 C9          0047*  			RET
000DF8             0048*  
000DF8             0049*  ; Unhook the custom VBLANK interrupt
000DF8             0050*  ;
000DF8 F3          0051*  VBLANK_STOP:		DI
000DF9 21 6B 0E    0052*  			LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
000DFC 3A 5C 0E    0053*  			LD		A, (VBLANK_HANDLER_MB + 1)	; The stored MB of the segment BBC BASIC is running in
000DFF F5          0054*  			PUSH		AF 				; Stack the MB for later
000E00 CD 15 0E    0055*  			CALL		SET_AHL16			; Convert pointer to an absolute 24-bit address
000E03 5B ED 17    0056*  			LD.LIL		DE, (HL)			; DEU: Address of MOS interrupt vector
000E06 5B D5       0057*  			PUSH.LIL	DE				; Transfer to HL
000E08 5B E1       0058*  			POP.LIL		HL
000E0A 1E 32       0059*  			LD		E, 32h
000E0C             0060*  			MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
000E0C 3E 14       0001*M 			LD	A, function
000E0E 49 CF       0002*M 			RST.LIS	08h
000E10 F1          0061*  			POP		AF 				; Restore MB to this segment
000E11 ED 6D       0062*  			LD		MB, A
000E13 FB          0063*  			EI
000E14 C9          0064*  			RET
000E15             0065*  
000E15             0066*  ; Set the MSB of HL (U) to A
000E15             0067*  ;
000E15 5B E5       0068*  SET_AHL16:		PUSH.LIL	HL
000E17 5B 21 02 00 0069*  			LD.LIL		HL, 2
       00          
000E1C 5B 39       0070*  			ADD.LIL		HL, SP
000E1E 5B 77       0071*  			LD.LIL		(HL), A
000E20 5B E1       0072*  			POP.LIL		HL
000E22 C9          0073*  			RET
000E23             0074*  
000E23             0075*  ; A safe LIS call to ESCSET
000E23             0076*  ;
000E23             0077*  DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
000E23 3E 08       0001*M 			LD	A, function
000E25 49 CF       0002*M 			RST.LIS	08h
000E27 21 4F 51    0078*  			LD		HL, KEYCOUNT 			; Check whether the keycount has changed
000E2A 5B DD 7E 19 0079*  			LD.LIL		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
000E2E BE          0080*  			CP 		(HL)				; with our local copy
000E2F 20 09       0081*  			JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
000E31             0082*  ;
000E31 AF          0083*  DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
000E32 32 4E 51    0084*  			LD		(KEYASCII), A
000E35 32 4D 51    0085*  			LD		(KEYDOWN), A
000E38 5B C9       0086*  			RET.LIL 					; And return
000E3A             0087*  ;
000E3A 77          0088*  DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
000E3B 5B DD 7E 18 0089*  			LD.LIL		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
000E3F B7          0090*  			OR		A
000E40 28 EF       0091*  			JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
000E42             0092*  ;
000E42 32 4D 51    0093*  			LD		(KEYDOWN), A 			; Store the keydown value
000E45 5B DD 7E 05 0094*  			LD.LIL		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
000E49 32 4E 51    0095*  			LD		(KEYASCII), A 			; Store locally
000E4C FE 1B       0096*  			CP		1Bh				; Is it escape?
000E4E CC 33 12    0097*  			CALL		Z, ESCSET			; Yes, so set the escape flags
000E51 49 C9       0098*  			RET.LIS						; Return to the interrupt handler
000E53             0099*  
000E53             0100*  ;
000E53             0101*  ; Interrupts in mixed mode always run in ADL mode
000E53             0102*  ;
000E53             0103*  			.ASSUME	ADL = 1
000E53             0104*  
000E53 F3          0105*  VBLANK_HANDLER:		DI
000E54 F5          0106*  			PUSH		AF
000E55 E5          0107*  			PUSH		HL
000E56 DD E5       0108*  			PUSH		IX
000E58 ED 6E       0109*  			LD		A, MB
000E5A F5          0110*  			PUSH		AF
000E5B 3E 00       0111*  VBLANK_HANDLER_MB:	LD		A, 0				; This is self-modified by VBLANK_INIT
000E5D ED 6D       0112*  			LD		MB, A
000E5F 49 CD 23 0E 0113*  			CALL.LIS	DO_KEYBOARD
000E63 F1          0114*  			POP		AF
000E64 ED 6D       0115*  			LD		MB, A
000E66 DD E1       0116*  			POP		IX
000E68 E1          0117*  			POP		HL
000E69 F1          0118*  			POP		AF
000E6A             0119*  ;
000E6A             0120*  ; Finally jump to the MOS interrupt
000E6A             0121*  ;
000E6A C3 00 00 00 0122*  VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
000E6E             0123*  
000E6E             0124*  ;				    include "agon_interrupt.inc"
000E6E             0013       include "agon_misc.asm"
000E6E             0001*  ;
000E6E             0002*  ; Title:	BBC Basic for AGON - Miscellaneous helper functions
000E6E             0003*  ; Author:	Dean Belfield
000E6E             0004*  ; Created:	04/12/2024
000E6E             0005*  ; Last Updated:	04/12/2024
000E6E             0006*  ;
000E6E             0007*  ; Modinfo:
000E6E             0008*  
000E6E             0009*  			; INCLUDE	"equs.inc"
000E6E             0010*  			; INCLUDE	"macros.inc"
000E6E             0011*  
000E6E             0012*  			.ASSUME	ADL = 0
000E6E             0013*  ;	.ORG 0x0000
000E6E             0014*  
000E6E             0015*  ;			SEGMENT CODE
000E6E             0016*  
000E6E             0017*  ;			XDEF	ASC_TO_NUMBER
000E6E             0018*  ;			XDEF	SWITCH_A
000E6E             0019*  ;			XDEF	NULLTOCR
000E6E             0020*  ;			XDEF	CRTONULL
000E6E             0021*  ;			XDEF	CSTR_FNAME
000E6E             0022*  ;			XDEF	CSTR_LINE
000E6E             0023*  ;			XDEF	CSTR_FINDCH
000E6E             0024*  ;			XDEF	CSTR_ENDSWITH
000E6E             0025*  ;			XDEF	CSTR_CAT
000E6E             0026*  
000E6E             0027*  ;			XREF	OSWRCH
000E6E             0028*  ;			XREF	KEYWDS
000E6E             0029*  ;			XREF	KEYWDL
000E6E             0030*  
000E6E             0031*  ; Read a number and convert to binary
000E6E             0032*  ; If prefixed with &, will read as hex, otherwise decimal
000E6E             0033*  ;   Inputs: HL: Pointer in string buffer
000E6E             0034*  ;  Outputs: HL: Updated text pointer
000E6E             0035*  ;           DE: Value
000E6E             0036*  ;            A: Terminator (spaces skipped)
000E6E             0037*  ; Destroys: A,D,E,H,L,F
000E6E             0038*  ;
000E6E C5          0039*  ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
000E6F 11 00 00    0040*  			LD	DE, 0			; Initialise DE
000E72 CD B2 0E    0041*  			CALL	SKIPSPmisc			; Skip whitespace
000E75 7E          0042*  			LD	A, (HL)			; Read first character
000E76 FE 26       0043*  			CP	'&'			; Is it prefixed with '&' (HEX number)?
000E78 20 1E       0044*  			JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
000E7A 23          0045*  			INC	HL			; Otherwise fall through to ASC_TO_HEX
000E7B             0046*  ;
000E7B 7E          0047*  ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
000E7C CD C0 0E    0048*  			CALL    UPPRCmisc			; Convert to uppercase
000E7F D6 30       0049*  			SUB	'0'			; Normalise to 0
000E81 38 2E       0050*  			JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E83 FE 0A       0051*  			CP 	10			; Check if >= 10
000E85 38 06       0052*  			JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
000E87 D6 07       0053*  			SUB 	7			; Adjust ASCII A-F to nibble
000E89 FE 10       0054*  			CP 	16			; Check for > F
000E8B 30 24       0055*  			JR 	NC, ASC_TO_NUMBER4	; Return if out of range
000E8D EB          0056*  ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
000E8E 29          0057*  			ADD	HL, HL
000E8F 29          0058*  			ADD	HL, HL
000E90 29          0059*  			ADD	HL, HL
000E91 29          0060*  			ADD	HL, HL
000E92 EB          0061*  			EX	DE, HL
000E93 B3          0062*  			OR      E			; OR the new digit in to the least significant nibble
000E94 5F          0063*  			LD      E, A
000E95 23          0064*  			INC     HL			; Onto the next character
000E96 18 E3       0065*  			JR      ASC_TO_NUMBER1		; And loop
000E98             0066*  ;
000E98 7E          0067*  ASC_TO_NUMBER3:		LD	A, (HL)
000E99 D6 30       0068*  			SUB	'0'			; Normalise to 0
000E9B 38 14       0069*  			JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
000E9D FE 0A       0070*  			CP	10			; Check if >= 10
000E9F 30 10       0071*  			JR	NC, ASC_TO_NUMBER4	; Return if >= 10
000EA1 EB          0072*  			EX 	DE, HL 			; Stick DE in HL
000EA2 44          0073*  			LD	B, H 			; And copy HL into BC
000EA3 4D          0074*  			LD	C, L
000EA4 29          0075*  			ADD	HL, HL 			; x 2
000EA5 29          0076*  			ADD	HL, HL 			; x 4
000EA6 09          0077*  			ADD	HL, BC 			; x 5
000EA7 29          0078*  			ADD	HL, HL 			; x 10
000EA8 EB          0079*  			EX	DE, HL
000EA9             0080*  			ADD8U_DE 			; Add A to DE (macro)
000EA9 83          0001*M         ADD     A, E
000EAA 5F          0002*M         LD      E, A
000EAB 8A          0003*M         ADC     A, D
000EAC 93          0004*M         SUB     E
000EAD 57          0005*M         LD      D, A
000EAE 23          0081*  			INC	HL
000EAF 18 E7       0082*  			JR	ASC_TO_NUMBER3
000EB1 C1          0083*  ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSP here
000EB2             0084*  
000EB2             0085*  ; Skip a space
000EB2             0086*  ; HL: Pointer in string buffer
000EB2             0087*  ;
000EB2 7E          0088*  SKIPSPmisc:			LD      A, (HL)
000EB3 FE 20       0089*  			CP      ' '
000EB5 C0          0090*  			RET     NZ
000EB6 23          0091*  			INC     HL
000EB7 18 F9       0092*  			JR      SKIPSPmisc
000EB9             0093*  
000EB9             0094*  ; Skip a string
000EB9             0095*  ; HL: Pointer in string buffer
000EB9             0096*  ;
000EB9 7E          0097*  SKIPNOTSP:		LD	A, (HL)
000EBA FE 20       0098*  			CP	' '
000EBC C8          0099*  			RET	Z
000EBD 23          0100*  			INC	HL
000EBE 18 F9       0101*  			JR	SKIPNOTSP
000EC0             0102*  
000EC0             0103*  ; Convert a character to upper case
000EC0             0104*  ;  A: Character to convert
000EC0             0105*  ;
000EC0 E6 7F       0106*  UPPRCmisc:  		AND     7FH
000EC2 FE 60       0107*  			CP      '`'
000EC4 D8          0108*  			RET     C
000EC5 E6 5F       0109*  			AND     5FH			; Convert to upper case
000EC7 C9          0110*  			RET
000EC8             0111*  
000EC8             0112*  ; Switch on A - lookup table immediately after call
000EC8             0113*  ;  A: Index into lookup table
000EC8             0114*  ;
000EC8 E3          0115*  SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
000EC9 87          0116*  			ADD	A, A			; Multiply A by two
000ECA             0117*  			ADD8U_HL 			; Add to HL (macro)
000ECA 85          0001*M         ADD     A, L
000ECB 6F          0002*M         LD      L, A
000ECC 8C          0003*M         ADC     A, H
000ECD 95          0004*M         SUB     L
000ECE 67          0005*M         LD      H, A
000ECF 7E          0118*  			LD	A, (HL)			; follow the call. Fetch an address from the
000ED0 23          0119*  			INC	HL 			; table.
000ED1 66          0120*  			LD	H, (HL)
000ED2 6F          0121*  			LD	L, A
000ED3 E3          0122*  			EX	(SP), HL		; Swap this new address back, restores HL
000ED4 C9          0123*  			RET				; Return program control to this new address
000ED5             0124*  
000ED5             0125*  ; Convert the buffer to a null terminated string and back
000ED5             0126*  ; HL: Buffer address
000ED5             0127*  ;
000ED5 C5          0128*  NULLTOCR:		PUSH 	BC
000ED6 06 00       0129*  			LD	B, 0
000ED8 0E 0D       0130*  			LD	C, CR
000EDA 18 05       0131*  			JR	CRTONULL0
000EDC             0132*  ;
000EDC C5          0133*  CRTONULL:		PUSH	BC
000EDD 06 0D       0134*  			LD	B, CR
000EDF 0E 00       0135*  			LD	C, 0
000EE1             0136*  ;
000EE1 E5          0137*  CRTONULL0:		PUSH	HL
000EE2 7E          0138*  CRTONULL1:		LD	A, (HL)
000EE3 B8          0139*  			CP 	B
000EE4 28 03       0140*  			JR	Z, CRTONULL2
000EE6 23          0141*  			INC	HL
000EE7 18 F9       0142*  			JR	CRTONULL1
000EE9 71          0143*  CRTONULL2:		LD	(HL), C
000EEA E1          0144*  			POP 	HL
000EEB C1          0145*  			POP	BC
000EEC C9          0146*  			RET
000EED             0147*  
000EED             0148*  ; Copy a filename to DE and zero terminate it
000EED             0149*  ; HL: Source
000EED             0150*  ; DE: Destination (ACCS)
000EED             0151*  ;
000EED 7E          0152*  CSTR_FNAME:		LD	A, (HL)			; Get source
000EEE FE 20       0153*  			CP	32			; Is it space
000EF0 28 09       0154*  			JR	Z, @F
000EF2 FE 0D       0155*  			CP	CR			; Or is it CR
000EF4 28 05       0156*  			JR	Z, @F
000EF6 12          0157*  			LD	(DE), A			; No, so store
000EF7 23          0158*  			INC	HL			; Increment
000EF8 13          0159*  			INC	DE
000EF9 18 F2       0160*  			JR	CSTR_FNAME		; And loop
000EFB AF          0161*  @@:			XOR	A			; Zero terminate the target string
000EFC 12          0162*  			LD	(DE), A
000EFD 13          0163*  			INC	DE			; And point to next free address
000EFE C9          0164*  			RET
000EFF             0165*  
000EFF             0166*  ; Copy a CR terminated line to DE and zero terminate it
000EFF             0167*  ; HL: Source
000EFF             0168*  ; DE: Destination (ACCS)
000EFF             0169*  ;
000EFF 7E          0170*  CSTR_LINE:		LD	A, (HL)			; Get source
000F00 FE 0D       0171*  			CP	CR			; Is it CR
000F02 28 05       0172*  			JR	Z, @F
000F04 12          0173*  			LD	(DE), A			; No, so store
000F05 23          0174*  			INC	HL			; Increment
000F06 13          0175*  			INC	DE
000F07 18 F6       0176*  			JR	CSTR_LINE		; And loop
000F09 AF          0177*  @@:			XOR	A			; Zero terminate the target string
000F0A 12          0178*  			LD	(DE), A
000F0B 13          0179*  			INC	DE			; And point to next free address
000F0C C9          0180*  			RET
000F0D             0181*  
000F0D             0182*  ; Find the first occurrence of a character (case sensitive)
000F0D             0183*  ; HL: Source
000F0D             0184*  ;  C: Character to find
000F0D             0185*  ; Returns:
000F0D             0186*  ; HL: Pointer to character, or end of string marker
000F0D             0187*  ;
000F0D 7E          0188*  CSTR_FINDCH:		LD	A, (HL)			; Get source
000F0E B9          0189*  			CP	C			; Is it our character?
000F0F C8          0190*  			RET	Z			; Yes, so exit
000F10 B7          0191*  			OR	A			; Is it the end of string?
000F11 C8          0192*  			RET	Z			; Yes, so exit
000F12 23          0193*  			INC	HL
000F13 18 F8       0194*  			JR	CSTR_FINDCH
000F15             0195*  
000F15             0196*  ; Check whether a string ends with another string (case insensitive)
000F15             0197*  ; HL: Source
000F15             0198*  ; DE: The substring we want to test with
000F15             0199*  ; Returns:
000F15             0200*  ;  F: Z if HL ends with DE, otherwise NZ
000F15             0201*  ;
000F15 7E          0202*  CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
000F16 CD C0 0E    0203*  			CALL	UPPRCmisc			; Convert to upper case
000F19 4F          0204*  			LD	C, A
000F1A 1A          0205*  			LD	A, (DE)			; Get the substring byte
000F1B B9          0206*  			CP	C
000F1C C0          0207*  			RET	NZ			; Return NZ if at any point the strings don't match
000F1D B1          0208*  			OR	C			; Check whether both bytes are zero
000F1E C8          0209*  			RET	Z			; If so, return, as we have reached the end of both strings
000F1F 23          0210*  			INC	HL
000F20 13          0211*  			INC	DE
000F21 18 F2       0212*  			JR	CSTR_ENDSWITH		; And loop
000F23             0213*  
000F23             0214*  ; Concatenate a string onto the end of another string
000F23             0215*  ; HL: Source
000F23             0216*  ; DE: Second string
000F23             0217*  ;
000F23 7E          0218*  CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
000F24 B7          0219*  			OR	A
000F25 28 03       0220*  			JR	Z, CSTR_CAT_1
000F27 23          0221*  			INC	HL
000F28 18 F9       0222*  			JR	CSTR_CAT
000F2A             0223*  ;
000F2A 1A          0224*  CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
000F2B 77          0225*  			LD	(HL), A
000F2C B7          0226*  			OR	A			; Check for end of string
000F2D C8          0227*  			RET	Z			; And return
000F2E 23          0228*  			INC	HL
000F2F 13          0229*  			INC	DE
000F30 18 F8       0230*  			JR	CSTR_CAT_1		; Loop until finished
000F32             0231*  
000F32             0232*  ;			include "agon_misc.inc"
000F32             0014       include "agon_sound.asm"
000F32             0001*  ;
000F32             0002*  ; Title:	BBC Basic for AGON - Audio stuff
000F32             0003*  ; Author:	Dean Belfield
000F32             0004*  ; Created:	04/12/2024
000F32             0005*  ; Last Updated:	11/12/2024
000F32             0006*  ;
000F32             0007*  ; Modinfo:
000F32             0008*  ; 11/12/2024:	Modified SOUND_ to work with OSWORD
000F32             0009*  
000F32             0010*  			.ASSUME	ADL = 0
000F32             0011*  ;	.ORG 0x0000
000F32             0012*  
000F32             0013*  			; INCLUDE	"equs.inc"
000F32             0014*  			; INCLUDE "macros.inc"
000F32             0015*  			; INCLUDE "mos_api.inc"	; In MOS/src
000F32             0016*  
000F32             0017*  ;			SEGMENT CODE
000F32             0018*  
000F32             0019*  ;			XDEF	SOUND_
000F32             0020*  
000F32             0021*  ;			XREF	OSWRCH
000F32             0022*  ;			XREF	VDU_BUFFER
000F32             0023*  ;			XREF	LTRAP
000F32             0024*  
000F32             0025*  ; SOUND channel,volume,pitch,duration
000F32             0026*  ; Parameters:
000F32             0027*  ; - HL: Pointer to data
000F32             0028*  ;   - 0,1: Channel
000F32             0029*  ;   - 2,3: Volume 0 (off) to 15 (full volume)
000F32             0030*  ;   - 4,5: Pitch 0 - 255
000F32             0031*  ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
000F32             0032*  ;
000F32 7E          0033*  SOUND_:			LD	A, (HL)			; Channel
000F33 32 00 52    0034*  			LD	(VDU_BUFFER+0), A
000F36 AF          0035*  			XOR	A			; Waveform
000F37 32 01 52    0036*  			LD	(VDU_BUFFER+1), A
000F3A 23          0037*  			INC	HL
000F3B 23          0038*  			INC	HL
000F3C             0039*  ;
000F3C             0040*  ; Calculate the volume
000F3C             0041*  ;
000F3C 4E          0042*  			LD	C, (HL)			; Volume
000F3D 06 06       0043*  			LD	B, 6			; C already contains the volume
000F3F ED 4C       0044*  			MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
000F41 79          0045*  			LD	A, C
000F42 32 02 52    0046*  			LD	(VDU_BUFFER+2), A
000F45 23          0047*  			INC	HL
000F46 23          0048*  			INC	HL
000F47             0049*  ;
000F47             0050*  ; And the frequency
000F47             0051*  ;
000F47 E5          0052*  			PUSH	HL
000F48 6E          0053*  			LD	L, (HL)
000F49 26 00       0054*  			LD	H, 0
000F4B 11 BD 0F    0055*  			LD	DE, SOUND_FREQ_LOOKUP
000F4E 29          0056*  			ADD	HL, HL
000F4F 19          0057*  			ADD	HL, DE
000F50 7E          0058*  			LD	A, (HL)
000F51 32 03 52    0059*  			LD	(VDU_BUFFER+3), A
000F54 23          0060*  			INC	HL
000F55 7E          0061*  			LD	A, (HL)
000F56 32 04 52    0062*  			LD	(VDU_BUFFER+4), A
000F59 E1          0063*  			POP	HL
000F5A 23          0064*  			INC	HL
000F5B 23          0065*  			INC	HL
000F5C             0066*  ;
000F5C             0067*  ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
000F5C             0068*  ;
000F5C 4E          0069*  			LD	C, (HL)
000F5D 06 32       0070*  			LD	B, 50			; C contains the duration, so MLT by 50
000F5F ED 4C       0071*  			MLT	BC
000F61 ED 43 05 52 0072*  			LD	(VDU_BUFFER+5), BC
000F65             0073*  ;
000F65 DD E5       0074*  			PUSH	IX			; Get the system vars in IX
000F67             0075*  			MOSCALL	mos_sysvars		; Reset the semaphore
000F67 3E 08       0001*M 			LD	A, function
000F69 49 CF       0002*M 			RST.LIS	08h
000F6B 5B DD CB 04 0076*  SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
       9E          
000F70             0077*  ;
000F70             0078*  			VDU	23			; Send the sound command
000F70 3E 17       0001*M         LD      A, VAL
000F72 CD CE 11    0002*M         CALL    OSWRCH
000F75             0079*  			VDU	0
000F75 3E 00       0001*M         LD      A, VAL
000F77 CD CE 11    0002*M         CALL    OSWRCH
000F7A             0080*  			VDU	vdp_audio
000F7A 3E 85       0001*M         LD      A, VAL
000F7C CD CE 11    0002*M         CALL    OSWRCH
000F7F             0081*  			VDU	(VDU_BUFFER+0)		; 0: Channel
000F7F 3A 00 52    0001*M         LD      A, VAL
000F82 CD CE 11    0002*M         CALL    OSWRCH
000F85             0082*  			VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
000F85 3A 01 52    0001*M         LD      A, VAL
000F88 CD CE 11    0002*M         CALL    OSWRCH
000F8B             0083*  			VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
000F8B 3A 02 52    0001*M         LD      A, VAL
000F8E CD CE 11    0002*M         CALL    OSWRCH
000F91             0084*  			VDU	(VDU_BUFFER+3)		; 3: Frequency L
000F91 3A 03 52    0001*M         LD      A, VAL
000F94 CD CE 11    0002*M         CALL    OSWRCH
000F97             0085*  			VDU	(VDU_BUFFER+4)		; 4: Frequency H
000F97 3A 04 52    0001*M         LD      A, VAL
000F9A CD CE 11    0002*M         CALL    OSWRCH
000F9D             0086*  			VDU	(VDU_BUFFER+5)		; 5: Duration L
000F9D 3A 05 52    0001*M         LD      A, VAL
000FA0 CD CE 11    0002*M         CALL    OSWRCH
000FA3             0087*  			VDU	(VDU_BUFFER+6)		; 6: Duration H
000FA3 3A 06 52    0001*M         LD      A, VAL
000FA6 CD CE 11    0002*M         CALL    OSWRCH
000FA9             0088*  ;
000FA9             0089*  ; Wait for acknowledgement
000FA9             0090*  ;
000FA9 5B DD CB 04 0091*  @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
       5E          
000FAE 28 F9       0092*  			JR	Z, @B			; Wait for the result
000FB0 CD 53 12    0093*  			CALL	LTRAP			; Check for ESC
000FB3 5B DD 7E 0E 0094*  			LD.LIL	A, (IX+sysvar_audioSuccess)
000FB7 A7          0095*  			AND	A			; Check if VDP has queued the note
000FB8 28 B1       0096*  			JR	Z, SOUND0		; No, so loop back and send again
000FBA             0097*  ;
000FBA DD E1       0098*  			POP	IX
000FBC C9          0099*  			RET
000FBD             0100*  
000FBD             0101*  ; Frequency Lookup Table
000FBD             0102*  ; Set up to replicate the BBC Micro audio frequencies
000FBD             0103*  ;
000FBD             0104*  ; Split over 5 complete octaves, with 53 being middle C
000FBD             0105*  ; * C4: 262hz
000FBD             0106*  ; + A4: 440hz
000FBD             0107*  ;
000FBD             0108*  ;	2	3	4	5	6	7	8
000FBD             0109*  ;
000FBD             0110*  ; B	1	49	97	145	193	241
000FBD             0111*  ; A#	0	45	93	141	189	237
000FBD             0112*  ; A		41	89+	137	185	233
000FBD             0113*  ; G#		37	85	133	181	229
000FBD             0114*  ; G		33	81	129	177	225
000FBD             0115*  ; F#		29	77	125	173	221
000FBD             0116*  ; F		25	73	121	169	217
000FBD             0117*  ; E		21	69	117	165	213
000FBD             0118*  ; D#		17	65	113	161	209
000FBD             0119*  ; D		13	61	109	157	205	253
000FBD             0120*  ; C#		9	57	105	153	201	249
000FBD             0121*  ; C		5	53*	101	149	197	245
000FBD             0122*  ;
000FBD 75 00 76 00 0123*  SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
       78 00 7A 00 
       7B 00 83 00 
       85 00 87 00 
000FCD 89 00 8B 00 0124*  			DW	 137,  139,  141,  143,  145,  147,  149,  151
       8D 00 8F 00 
       91 00 93 00 
       95 00 97 00 
000FDD 99 00 9C 00 0125*  			DW	 153,  156,  158,  160,  162,  165,  167,  170
       9E 00 A0 00 
       A2 00 A5 00 
       A7 00 AA 00 
000FED AC 00 AF 00 0126*  			DW	 172,  175,  177,  180,  182,  185,  188,  190
       B1 00 B4 00 
       B6 00 B9 00 
       BC 00 BE 00 
000FFD C1 00 C4 00 0127*  			DW	 193,  196,  199,  202,  205,  208,  211,  214
       C7 00 CA 00 
       CD 00 D0 00 
       D3 00 D6 00 
00100D D9 00 DC 00 0128*  			DW	 217,  220,  223,  226,  230,  233,  236,  240
       DF 00 E2 00 
       E6 00 E9 00 
       EC 00 F0 00 
00101D F3 00 F7 00 0129*  			DW	 243,  247,  251,  254,  258,  262,  265,  269
       FB 00 FE 00 
       02 01 06 01 
       09 01 0D 01 
00102D 11 01 15 01 0130*  			DW	 273,  277,  281,  285,  289,  294,  298,  302
       19 01 1D 01 
       21 01 26 01 
       2A 01 2E 01 
00103D 33 01 37 01 0131*  			DW	 307,  311,  316,  320,  325,  330,  334,  339
       3C 01 40 01 
       45 01 4A 01 
       4E 01 53 01 
00104D 58 01 5D 01 0132*  			DW	 344,  349,  354,  359,  365,  370,  375,  381
       62 01 67 01 
       6D 01 72 01 
       77 01 7D 01 
00105D 82 01 88 01 0133*  			DW	 386,  392,  398,  403,  409,  415,  421,  427
       8E 01 93 01 
       99 01 9F 01 
       A5 01 AB 01 
00106D B2 01 B8 01 0134*  			DW	 434,  440,  446,  453,  459,  466,  473,  480
       BE 01 C5 01 
       CB 01 D2 01 
       D9 01 E0 01 
00107D E7 01 EE 01 0135*  			DW	 487,  494,  501,  508,  516,  523,  531,  539
       F5 01 FC 01 
       04 02 0B 02 
       13 02 1B 02 
00108D 22 02 2A 02 0136*  			DW	 546,  554,  562,  571,  579,  587,  596,  605
       32 02 3B 02 
       43 02 4B 02 
       54 02 5D 02 
00109D 65 02 6E 02 0137*  			DW	 613,  622,  631,  641,  650,  659,  669,  679
       77 02 81 02 
       8A 02 93 02 
       9D 02 A7 02 
0010AD B1 02 BB 02 0138*  			DW	 689,  699,  709,  719,  729,  740,  751,  762
       C5 02 CF 02 
       D9 02 E4 02 
       EF 02 FA 02 
0010BD 05 03 10 03 0139*  			DW	 773,  784,  795,  807,  819,  831,  843,  855
       1B 03 27 03 
       33 03 3F 03 
       4B 03 57 03 
0010CD 63 03 70 03 0140*  			DW	 867,  880,  893,  906,  919,  932,  946,  960
       7D 03 8A 03 
       97 03 A4 03 
       B2 03 C0 03 
0010DD CE 03 DC 03 0141*  			DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
       EA 03 F9 03 
       08 04 17 04 
       26 04 36 04 
0010ED 45 04 55 04 0142*  			DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
       65 04 76 04 
       86 04 97 04 
       A8 04 BA 04 
0010FD CB 04 DD 04 0143*  			DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
       EF 04 02 05 
       14 05 27 05 
       3A 05 4E 05 
00110D 62 05 76 05 0144*  			DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
       8A 05 9F 05 
       B3 05 C9 05 
       DE 05 F4 05 
00111D 0A 06 21 06 0145*  			DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
       38 06 4F 06 
       66 06 7E 06 
       96 06 AF 06 
00112D C8 06 E1 06 0146*  			DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
       FA 06 14 07 
       2F 07 4A 07 
       65 07 80 07 
00113D 9C 07 B8 07 0147*  			DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
       D5 07 F2 07 
       10 08 2D 08 
       4B 08 6A 08 
00114D 8A 08 A9 08 0148*  			DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
       CA 08 EA 08 
       0C 09 2D 09 
       4F 09 72 09 
00115D 95 09 B9 09 0149*  			DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
       DD 09 02 0A 
       27 0A 4D 0A 
       73 0A 9A 0A 
00116D C2 0A EA 0A 0150*  			DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
       12 0B 3C 0B 
       66 0B 90 0B 
       BB 0B E7 0B 
00117D 13 0C 40 0C 0151*  			DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
       6E 0C 9C 0C 
       CB 0C FA 0C 
       2B 0D 5C 0D 
00118D 8E 0D C0 0D 0152*  			DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
       F3 0D 27 0E 
       5C 0E 91 0E 
       C8 0E FF 0E 
00119D 36 0F 6F 0F 0153*  			DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
       A9 0F E3 0F 
       1E 10 5A 10 
       97 10 D5 10 
0011AD 13 11 53 11 0154*  			DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
       93 11 D5 11 
       17 12 5B 12 
       9F 12 E4 12 
0011BD             0155*  
0011BD             0156*  
0011BD             0157*  ;    include "agon_sound.inc"
0011BD             0015       include "agon_os.asm"
0011BD             0001*  ;
0011BD             0002*  ; Title:	BBC Basic for AGON - MOS stuff
0011BD             0003*  ; Author:	Dean Belfield
0011BD             0004*  ; Created:	04/12/2024
0011BD             0005*  ; Last Updated:	12/12/2024
0011BD             0006*  ;
0011BD             0007*  ; Modinfo:
0011BD             0008*  ; 08/12/2024:	Added OSCLI and file I/O
0011BD             0009*  ; 11/12/2024:	Added ESC key handling
0011BD             0010*  ; 		Added OSWORD
0011BD             0011*  ; 12/12/2024:	Added OSRDCH, OSBYTE_81 and fixed *EDIT
0011BD             0012*  
0011BD             0013*  			.ASSUME	ADL = 0
0011BD             0014*  ;			.ORG 0x0000
0011BD             0015*  
0011BD             0016*  			; INCLUDE	"equs.inc"
0011BD             0017*  			; INCLUDE "macros.inc"
0011BD             0018*  			; INCLUDE "mos_api.inc"	; In MOS/src
0011BD             0019*  
0011BD             0020*  ;			include "agon_os.inc"
0011BD             0021*  
0011BD             0022*  ;			SEGMENT CODE
0011BD             0023*  
0011BD             0024*  ;			XDEF	OSWORD
0011BD             0025*  ;			XDEF	OSBYTE
0011BD             0026*  ;			XDEF	OSINIT
0011BD             0027*  ;			XDEF	OSOPEN
0011BD             0028*  ;			XDEF	OSSHUT
0011BD             0029*  ;			XDEF	OSLOAD
0011BD             0030*  ;			XDEF	OSSAVE
0011BD             0031*  ;			XDEF	OSLINE
0011BD             0032*  ;			XDEF	OSSTAT
0011BD             0033*  ;			XDEF	OSWRCH
0011BD             0034*  ;			XDEF	OSRDCH
0011BD             0035*  ;			XDEF	OSBGET
0011BD             0036*  ;			XDEF	OSBPUT
0011BD             0037*  ;			XDEF	OSCLI
0011BD             0038*  ;			XDEF	PROMPT
0011BD             0039*  ;			XDEF	GETPTR
0011BD             0040*  ;			XDEF	PUTPTR
0011BD             0041*  ;			XDEF	GETEXT
0011BD             0042*  ;			XDEF	TRAP
0011BD             0043*  ;			XDEF	LTRAP
0011BD             0044*  ;			XDEF	BYE
0011BD             0045*  ;			XDEF	RESET
0011BD             0046*  ;			XDEF	ESCSET
0011BD             0047*  
0011BD             0048*  ;			XREF	EXTERR
0011BD             0049*  ;			XREF	VBLANK_INIT
0011BD             0050*  ;			XREF	VBLANK_STOP
0011BD             0051*  ;			XREF	USER
0011BD             0052*  ;			XREF	COUNT
0011BD             0053*  ;			XREF	COUNT0
0011BD             0054*  ;			XREF	COUNT1
0011BD             0055*  ;			XREF	GETCSR
0011BD             0056*  ;			XREF	GETSCHR_1
0011BD             0057*  ;			XREF	NULLTOCR
0011BD             0058*  ;			XREF	CRLF
0011BD             0059*  ;			XREF	FLAGS
0011BD             0060*  ;			XREF	OSWRCHPT
0011BD             0061*  ;			XREF	OSWRCHCH
0011BD             0062*  ;			XREF	OSWRCHFH
0011BD             0063*  ;			XREF	KEYASCII
0011BD             0064*  ;			XREF	KEYDOWN
0011BD             0065*  ;			XREF	LISTON
0011BD             0066*  ;			XREF	PAGE_
0011BD             0067*  ;			XREF	CSTR_FNAME
0011BD             0068*  ;			XREF	CSTR_FINDCH
0011BD             0069*  ;			XREF	CSTR_CAT
0011BD             0070*  ;			XREF	CSTR_ENDSWITH
0011BD             0071*  ;			XREF	CSTR_LINE
0011BD             0072*  ;			XREF	NEWIT
0011BD             0073*  ;			XREF	BAD
0011BD             0074*  ;			XREF	CLEAN
0011BD             0075*  ;			XREF	LINNUM
0011BD             0076*  ;			XREF	BUFFER
0011BD             0077*  ;			XREF	NXT
0011BD             0078*  ;			XREF	ERROR_
0011BD             0079*  ;			XREF	XEQ
0011BD             0080*  ;			XREF	LEXAN2
0011BD             0081*  ;			XREF	GETTOP
0011BD             0082*  ;			XREF	FINDL
0011BD             0083*  ;			XREF	DEL
0011BD             0084*  ;			XREF	LISTIT
0011BD             0085*  ;			XREF	ESCAPE
0011BD             0086*  ;			XREF	ASC_TO_NUMBER
0011BD             0087*  ;			XREF	CLOOP
0011BD             0088*  ;			XREF	SCRAP
0011BD             0089*  ;			XREF	POINT_
0011BD             0090*  ;			XREF	SOUND_
0011BD             0091*  
0011BD             0092*  ;OSINIT - Initialise RAM mapping etc.
0011BD             0093*  ;If BASIC is entered by BBCBASIC FILENAME then file
0011BD             0094*  ;FILENAME.BBC is automatically CHAINed.
0011BD             0095*  ;   Outputs: DE = initial value of HIMEM (top of RAM)
0011BD             0096*  ;            HL = initial value of PAGE (user program)
0011BD             0097*  ;            Z-flag reset indicates AUTO-RUN.
0011BD             0098*  ;  Destroys: A,D,E,H,L,F
0011BD             0099*  ;
0011BD CD D5 0D    0100*  OSINIT:			CALL	VBLANK_INIT
0011C0 AF          0101*  			XOR	A
0011C1 32 48 51    0102*  			LD	(FLAGS), A		; Clear flags and set F = Z
0011C4 21 00 55    0103*  			LD 	HL, USER
0011C7 11 00 FF    0104*  			LD	DE, RAM_Top
0011CA 5F          0105*  			LD	E, A			; Page boundary
0011CB C9          0106*  			RET
0011CC             0107*  
0011CC             0108*  ; PROMPT: output the input prompt
0011CC             0109*  ;
0011CC 3E 3E       0110*  PROMPT: 		LD	A,'>'			; Falls through to OSWRCH
0011CE             0111*  
0011CE             0112*  ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
0011CE             0113*  ; Parameters:
0011CE             0114*  ; - A: Character to write
0011CE             0115*  ;
0011CE E5          0116*  OSWRCH:			PUSH	HL
0011CF 21 FE 54    0117*  			LD	HL, LISTON		; Fetch the LISTON variable
0011D2 CB 5E       0118*  			BIT	3, (HL)			; Check whether we are in *EDIT mode
0011D4 20 0A       0119*  			JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
0011D6             0120*  ;
0011D6 2A 4B 51    0121*  			LD	HL, (OSWRCHCH)		; L: Channel #
0011D9 2D          0122*  			DEC	L			; If it is 1
0011DA 28 17       0123*  			JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0011DC             0124*  ;
0011DC E1          0125*  			POP	HL			; Otherwise
0011DD 49 D7       0126*  			RST.LIS	10h			; Output the character to MOS
0011DF C9          0127*  			RET
0011E0             0128*  ;
0011E0 2A 49 51    0129*  OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0011E3 FE 0A       0130*  			CP	0AH			; Just ignore this
0011E5 28 0A       0131*  			JR	Z, OSWRCH_BUFFER2
0011E7 FE 0D       0132*  			CP	0DH			; Is it the end of line?
0011E9 20 01       0133*  			JR	NZ, OSWRCH_BUFFER1	; No, so carry on
0011EB AF          0134*  			XOR	A			; Turn it into a NUL character
0011EC 77          0135*  OSWRCH_BUFFER1:		LD	(HL), A			; Echo the character into the buffer
0011ED 23          0136*  			INC	HL			; Increment pointer
0011EE 22 49 51    0137*  			LD	(OSWRCHPT), HL		; Write pointer back
0011F1 E1          0138*  OSWRCH_BUFFER2:		POP	HL
0011F2 C9          0139*  			RET
0011F3             0140*  ;
0011F3 D5          0141*  OSWRCH_FILE:		PUSH	DE
0011F4 5C          0142*  			LD	E, H			; Filehandle to E
0011F5 CD 80 12    0143*  			CALL	OSBPUT			; Write the byte out
0011F8 D1          0144*  			POP	DE
0011F9 E1          0145*  			POP	HL
0011FA C9          0146*  			RET
0011FB             0147*  
0011FB             0148*  ; OSRDCH
0011FB             0149*  ;
0011FB             0150*  OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0011FB 3E 00       0001*M 			LD	A, function
0011FD 49 CF       0002*M 			RST.LIS	08h
0011FF FE 1B       0151*  			CP	1Bh
001201 28 55       0152*  			JR	Z, LTRAP1
001203 C9          0153*  			RET
001204             0154*  
001204             0155*  ; OSLINE: Invoke the line editor
001204             0156*  ;
001204 1E 01       0157*  OSLINE:			LD 	E, 1			; Default is to clear the buffer
001206             0158*  
001206             0159*  ; Entry point to line editor that does not clear the buffer
001206             0160*  ; Parameters:
001206             0161*  ; - HL: addresses destination buffer (on page boundary)
001206             0162*  ; Returns:
001206             0163*  ; -  A: 0
001206             0164*  ; NB: Buffer filled, terminated by CR
001206             0165*  ;
001206 FD E5       0166*  OSLINE1:		PUSH	IY
001208 E5          0167*  			PUSH	HL			; Buffer address
001209 01 00 01    0168*  			LD	BC, 256			; Buffer length
00120C             0169*  			MOSCALL	mos_editline		; Call the MOS line editor
00120C 3E 09       0001*M 			LD	A, function
00120E 49 CF       0002*M 			RST.LIS	08h
001210 E1          0170*  			POP	HL			; Pop the address
001211 FD E1       0171*  			POP	IY
001213 F5          0172*  			PUSH	AF			; Stack the return value (key pressed)
001214 CD D5 0E    0173*  			CALL	NULLTOCR		; Turn the 0 character to a CR
001217 CD 34 41    0174*  			CALL	CRLF			; Display CRLF
00121A F1          0175*  			POP	AF
00121B FE 1B       0176*  			CP	1Bh 			; Check if ESC terminated the input
00121D CA 58 12    0177*  			JP	Z, LTRAP1 		; Yes, so do the ESC thing
001220 3A 48 51    0178*  			LD	A, (FLAGS)		; Otherwise
001223 CB BF       0179*  			RES	7, A 			; Clear the escape flag
001225 32 48 51    0180*  			LD	(FLAGS), A
001228 CD A8 16    0181*  			CALL	WAIT_VBLANK 		; Wait a frame
00122B AF          0182*   			XOR	A			; Return A = 0
00122C 32 4D 51    0183*  			LD	(KEYDOWN), A
00122F 32 4E 51    0184*  			LD	(KEYASCII), A
001232 C9          0185*  			RET
001233             0186*  
001233             0187*  ;
001233             0188*  ; ESCSET
001233             0189*  ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
001233             0190*  ;
001233 E5          0191*  ESCSET: 		PUSH    HL
001234 21 48 51    0192*          		LD      HL,FLAGS		; Pointer to FLAGS
001237 CB 76       0193*          		BIT     6,(HL)			; If bit 6 is set, then
001239 20 02       0194*          		JR      NZ,ESCDIS		; escape is disabled, so skip
00123B CB FE       0195*          		SET     7,(HL)			; Set bit 7, the escape flag
00123D E1          0196*  ESCDIS: 		POP     HL
00123E C9          0197*          		RET
00123F             0198*  
00123F             0199*  ;
00123F             0200*  ; ESCTEST
00123F             0201*  ; Test for ESC key
00123F             0202*  ;
00123F CD 48 12    0203*  ESCTEST:		CALL	READKEY			; Read the keyboard
001242 C0          0204*  			RET	NZ			; Skip if no key is pressed
001243 FE 1B       0205*  			CP	1BH			; If ESC pressed then
001245 28 EC       0206*  			JR	Z,ESCSET		; jump to the escape set routine
001247 C9          0207*  			RET
001248             0208*  
001248             0209*  ; Read the keyboard
001248             0210*  ; Returns:
001248             0211*  ; - A: ASCII of the pressed key
001248             0212*  ; - F: Z if the key is pressed, otherwise NZ
001248             0213*  ;
001248 3A 4D 51    0214*  READKEY:		LD	A, (KEYDOWN)		; Get key down
00124B 3D          0215*  			DEC	A 			; Set Z flag if keydown is 1
00124C 3A 4E 51    0216*  			LD	A, (KEYASCII)		; Get key ASCII value
00124F C9          0217*  			RET
001250             0218*  ;
001250             0219*  ; TRAP
001250             0220*  ; This is called whenever BASIC needs to check for ESC
001250             0221*  ;
001250 CD 3F 12    0222*  TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
001253             0223*  ;
001253 3A 48 51    0224*  LTRAP:			LD	A,(FLAGS)		; Get FLAGS
001256 B7          0225*  			OR	A			; This checks for bit 7; if it is not set then the result will
001257 F0          0226*  			RET	P			; be positive (bit 7 is the sign bit in Z80), so return
001258 21 48 51    0227*  LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
00125B CB BE       0228*  			RES	7,(HL)			; Clear the escape pressed flag and
00125D C3 1C 26    0229*  			JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
001260             0230*  
001260             0231*  ; RESET
001260             0232*  ;
001260 C9          0233*  RESET:			RET				; Yes this is fine
001261             0234*  
001261             0235*  ; OSOPEN
001261             0236*  ; HL: Pointer to path
001261             0237*  ;  F: C Z
001261             0238*  ;     x x OPENIN
001261             0239*  ; 	  OPENOUT
001261             0240*  ;     x	  OPENUP
001261             0241*  ; Returns:
001261             0242*  ;  A: Filehandle, 0 if cannot open
001261             0243*  ;
001261 0E 01       0244*  OSOPEN:			LD	C, fa_read
001263 28 06       0245*  			JR	Z, @F
001265 0E 32       0246*  			LD	C, fa_write | fa_open_append
001267 38 02       0247*  			JR	C, @F
001269 0E 0A       0248*  			LD	C, fa_write | fa_create_always
00126B             0249*  @@:			MOSCALL	mos_fopen
00126B 3E 0A       0001*M 			LD	A, function
00126D 49 CF       0002*M 			RST.LIS	08h
00126F C9          0250*  			RET
001270             0251*  
001270             0252*  ;OSSHUT - Close disk file(s).
001270             0253*  ; E = file channel
001270             0254*  ;  If E=0 all files are closed (except SPOOL)
001270             0255*  ; Destroys: A,B,C,D,E,H,L,F
001270             0256*  ;
001270 C5          0257*  OSSHUT:			PUSH	BC
001271 4B          0258*  			LD	C, E
001272             0259*  			MOSCALL	mos_fclose
001272 3E 0B       0001*M 			LD	A, function
001274 49 CF       0002*M 			RST.LIS	08h
001276 C1          0260*  			POP	BC
001277 C9          0261*  			RET
001278             0262*  
001278             0263*  ; OSBGET - Read a byte from a random disk file.
001278             0264*  ;  E = file channel
001278             0265*  ; Returns
001278             0266*  ;  A = byte read
001278             0267*  ;  Carry set if LAST BYTE of file
001278             0268*  ; Destroys: A,B,C,F
001278             0269*  ;
001278 C5          0270*  OSBGET:			PUSH	BC
001279 4B          0271*  			LD	C, E
00127A             0272*  			MOSCALL	mos_fgetc
00127A 3E 0C       0001*M 			LD	A, function
00127C 49 CF       0002*M 			RST.LIS	08h
00127E C1          0273*  			POP	BC
00127F C9          0274*  			RET
001280             0275*  
001280             0276*  ; OSBPUT - Write a byte to a random disk file.
001280             0277*  ;  E = file channel
001280             0278*  ;  A = byte to write
001280             0279*  ; Destroys: A,B,C,F
001280             0280*  ;
001280 C5          0281*  OSBPUT:			PUSH	BC
001281 4B          0282*  			LD	C, E
001282 47          0283*  			LD	B, A
001283             0284*  			MOSCALL	mos_fputc
001283 3E 0D       0001*M 			LD	A, function
001285 49 CF       0002*M 			RST.LIS	08h
001287 C1          0285*  			POP	BC
001288 C9          0286*  			RET
001289             0287*  
001289             0288*  ; OSSTAT - Read file status
001289             0289*  ;  E = file channel
001289             0290*  ; Returns
001289             0291*  ;  F: Z flag set - EOF
001289             0292*  ;  A: If Z then A = 0
001289             0293*  ; Destroys: A,D,E,H,L,F
001289             0294*  ;
001289 C5          0295*  OSSTAT:			PUSH	BC
00128A 4B          0296*  			LD	C, E
00128B             0297*  			MOSCALL	mos_feof
00128B 3E 0E       0001*M 			LD	A, function
00128D 49 CF       0002*M 			RST.LIS	08h
00128F C1          0298*  			POP	BC
001290 FE 01       0299*  			CP	1
001292 C9          0300*  			RET
001293             0301*  
001293             0302*  ; GETPTR - Return file pointer.
001293             0303*  ;    E = file channel
001293             0304*  ; Returns:
001293             0305*  ; DEHL = pointer (0-&7FFFFF)
001293             0306*  ; Destroys: A,B,C,D,E,H,L,F
001293             0307*  ;
001293 FD E5       0308*  GETPTR:			PUSH		IY
001295 4B          0309*  			LD		C, E
001296             0310*  			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
001296 3E 19       0001*M 			LD	A, function
001298 49 CF       0002*M 			RST.LIS	08h
00129A 5B E5       0311*  			PUSH.LIL	HL
00129C 5B FD E1    0312*  			POP.LIL		IY		; IYU: Pointer to FIL structure
00129F 5B FD 6E 11 0313*  			LD.LIL		L, (IY + FIL.fptr + 0)
0012A3 5B FD 66 12 0314*  			LD.LIL		H, (IY + FIL.fptr + 1)
0012A7 5B FD 5E 13 0315*  			LD.LIL		E, (IY + FIL.fptr + 2)
0012AB 5B FD 56 14 0316*  			LD.LIL		D, (IY + FIL.fptr + 3)
0012AF FD E1       0317*  			POP		IY
0012B1 C9          0318*  			RET
0012B2             0319*  
0012B2             0320*  ; PUTPTR - Update file pointer.
0012B2             0321*  ;    A = file channel
0012B2             0322*  ; DEHL = new pointer (0-&7FFFFF)
0012B2             0323*  ; Destroys: A,B,C,D,E,H,L,F
0012B2             0324*  ;
0012B2 FD E5       0325*  PUTPTR:			PUSH		IY
0012B4 4F          0326*  			LD		C, A  		; C: Filehandle
0012B5 5B E5       0327*  			PUSH.LIL	HL
0012B7 5B 21 02 00 0328*  			LD.LIL		HL, 2
       00          
0012BC 5B 39       0329*  			ADD.LIL		HL, SP
0012BE 5B 73       0330*  			LD.LIL		(HL), E 	; 3rd byte of DWORD set to E
0012C0 5B E1       0331*  			POP.LIL		HL
0012C2 5A          0332*  			LD		E, D  		; 4th byte passed as E
0012C3             0333*  			MOSCALL		mos_flseek
0012C3 3E 1C       0001*M 			LD	A, function
0012C5 49 CF       0002*M 			RST.LIS	08h
0012C7 FD E1       0334*  			POP		IY
0012C9 C9          0335*  			RET
0012CA             0336*  
0012CA             0337*  ; GETEXT - Find file size.
0012CA             0338*  ;    E = file channel
0012CA             0339*  ; Returns:
0012CA             0340*  ; DEHL = file size (0-&800000)
0012CA             0341*  ; Destroys: A,B,C,D,E,H,L,F
0012CA             0342*  ;
0012CA FD E5       0343*  GETEXT:			PUSH		IY
0012CC 4B          0344*  			LD		C, E
0012CD             0345*  			MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
0012CD 3E 19       0001*M 			LD	A, function
0012CF 49 CF       0002*M 			RST.LIS	08h
0012D1 5B E5       0346*  			PUSH.LIL	HL
0012D3 5B FD E1    0347*  			POP.LIL		IY		; IYU: Pointer to FIL structure
0012D6 5B FD 6E 24 0348*  			LD.LIL		L, (IY + FIL.obj.objsize + 0)
0012DA 5B FD 66 25 0349*  			LD.LIL		H, (IY + FIL.obj.objsize + 1)
0012DE 5B FD 5E 26 0350*  			LD.LIL		E, (IY + FIL.obj.objsize + 2)
0012E2 5B FD 56 27 0351*  			LD.LIL		D, (IY + FIL.obj.objsize + 3)
0012E6 FD E1       0352*  			POP		IY
0012E8 C9          0353*  			RET
0012E9             0354*  
0012E9             0355*  ;OSLOAD - Load an area of memory from a file.
0012E9             0356*  ;   Inputs: HL addresses filename (CR terminated)
0012E9             0357*  ;           DE = address at which to load
0012E9             0358*  ;           BC = maximum allowed size (bytes)
0012E9             0359*  ;  Outputs: Carry reset indicates no room for file.
0012E9             0360*  ; Destroys: A,B,C,D,E,H,L,F
0012E9             0361*  ;
0012E9 C5          0362*  OSLOAD:			PUSH	BC			; Stack the size
0012EA D5          0363*  			PUSH	DE			; Stack the load address
0012EB 11 00 52    0364*  			LD	DE, ACCS		; Buffer address for filename
0012EE CD ED 0E    0365*  			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0012F1 21 00 52    0366*  			LD	HL, ACCS		; HL: Filename
0012F4 CD 32 14    0367*  			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0012F7 CD 43 14    0368*  			CALL	EXT_HANDLER		; Get the default handler
0012FA D1          0369*  			POP	DE			; Restore the load address
0012FB C1          0370*  			POP	BC			; Restore the size
0012FC B7          0371*  			OR	A
0012FD CA C4 13    0372*  			JP 	Z, OSLOAD_BBC
001300             0373*  ;
001300             0374*  ; Load the file in as a text file
001300             0375*  ;
001300 AF          0376*  OSLOAD_TXT:		XOR	A			; Set file attributes to read
001301 CD 61 12    0377*  			CALL	OSOPEN			; Open the file
001304 5F          0378*  			LD 	E, A 			; The filehandle
001305 B7          0379*  			OR	A
001306 3E 04       0380*  			LD	A, 4			; File not found error
001308 CA CC 13    0381*  			JP	Z, OSERROR		; Jump to error handler
00130B CD 77 40    0382*  			CALL	NEWIT			; Call NEW to clear the program space
00130E             0383*  ;
00130E 21 00 52    0384*  OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
001311             0385*  ;
001311             0386*  ; First skip any whitespace (indents) at the beginning of the input
001311             0387*  ;
001311 CD 78 12    0388*  @@:			CALL	OSBGET			; Read the byte into A
001314 38 1C       0389*  			JR	C, OSLOAD_TXT3		; Is it EOF?
001316 FE 0A       0390*  			CP	LF 			; Is it LF?
001318 28 18       0391*  			JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
00131A FE 21       0392*  			CP	21h			; Is it less than or equal to ASCII space?
00131C 38 F3       0393*  			JR	C, @B 			; Yes, so keep looping
00131E 77          0394*  			LD	(HL), A 		; Store the first character
00131F 2C          0395*  			INC	L
001320             0396*  ;
001320             0397*  ; Now read the rest of the line in
001320             0398*  ;
001320 CD 78 12    0399*  OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
001323 38 26       0400*  			JR	C, OSLOAD_TXT4		; Is it EOF?
001325 FE 20       0401*  			CP	20h			; Skip if not an ASCII character
001327 38 05       0402*  			JR	C, @F
001329 77          0403*  			LD	(HL), A 		; Store in the input buffer
00132A 2C          0404*  			INC	L			; Increment the buffer pointer
00132B CA 28 3F    0405*  			JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
00132E FE 0A       0406*  @@:			CP	LF			; Check for LF
001330 20 EE       0407*  			JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
001332             0408*  ;
001332             0409*  ; Finally, handle EOL/EOF
001332             0410*  ;
001332 36 0D       0411*  OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
001334 7D          0412*  			LD	A, L			; Check for minimum line length
001335 FE 02       0413*  			CP	2			; If it is 2 characters or less (including CR)
001337 38 08       0414*  			JR	C, @F			; Then don't bother entering it
001339 D5          0415*  			PUSH	DE			; Preserve the filehandle
00133A CD 56 13    0416*  			CALL	OSEDIT			; Enter the line in memory
00133D DC 53 40    0417*  			CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
001340 D1          0418*  			POP	DE
001341 CD 89 12    0419*  @@:			CALL	OSSTAT			; End of file?
001344 20 C8       0420*  			JR	NZ, OSLOAD_TXT1		; No, so loop
001346 CD 70 12    0421*  			CALL	OSSHUT			; Close the file
001349 37          0422*  			SCF				; Flag to BASIC that we're good
00134A C9          0423*  			RET
00134B             0424*  ;
00134B             0425*  ; Special case for BASIC programs with no blank line at the end
00134B             0426*  ;
00134B FE 20       0427*  OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
00134D 38 05       0428*  			JR	C, @F
00134F 77          0429*  			LD	(HL), A			; Store the character
001350 2C          0430*  			INC	L
001351 CA 28 3F    0431*  			JP	Z, BAD
001354 18 DC       0432*  @@:			JR	OSLOAD_TXT3
001356             0433*  ;
001356             0434*  ; This bit enters the line into memory
001356             0435*  ; Also called from OSLOAD_TXT
001356             0436*  ; Returns:
001356             0437*  ; F: C if a new line has been entered (CLEAN will need to be called)
001356             0438*  ;
001356 AF          0439*  OSEDIT:			XOR	A			; Entry point after *EDIT
001357 32 FB 54    0440*  			LD      (COUNT),A
00135A FD 21 00 52 0441*  			LD      IY,ACCS
00135E CD C3 43    0442*  			CALL    LINNUM			; HL: The line number from the input buffer
001361 CD 44 45    0443*  			CALL    NXT			; Skip spaces
001364 7C          0444*  			LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
001365 B5          0445*  			OR      L
001366 28 00       0446*  			JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
001368             0447*  ;
001368             0448*  ; This bit does the lexical analysis and tokenisation
001368             0449*  ;
001368 11 00 53    0450*  LNZERO:			LD	DE,BUFFER
00136B 0E 01       0451*                  	LD	C,1			; LEFT MODE
00136D E5          0452*                  	PUSH	HL
00136E CD 51 44    0453*                  	CALL	LEXAN2			; LEXICAL ANALYSIS
001371 E1          0454*                  	POP	HL
001372 12          0455*                  	LD	(DE),A			; TERMINATOR
001373 AF          0456*                  	XOR	A
001374 47          0457*                  	LD	B,A
001375 4B          0458*                  	LD	C,E			; BC=LINE LENGTH
001376 13          0459*                  	INC	DE
001377 12          0460*                  	LD	(DE),A			; ZERO NEXT
001378 7C          0461*                  	LD	A,H
001379 B5          0462*                  	OR	L
00137A FD 21 00 53 0463*                  	LD	IY,BUFFER		; FOR XEQ
00137E CA D2 24    0464*                  	JP	Z,XEQ			; DIRECT MODE
001381 C5          0465*                  	PUSH	BC
001382 CD 7C 41    0466*                  	CALL	FINDL
001385 CC 22 40    0467*                  	CALL	Z,DEL
001388 C1          0468*                  	POP	BC
001389 79          0469*                  	LD	A,C
00138A B7          0470*                  	OR	A
00138B C8          0471*                  	RET	Z
00138C C6 04       0472*                  	ADD	A,4
00138E 4F          0473*                  	LD	C,A			; LENGTH INCLUSIVE
00138F D5          0474*                  	PUSH	DE			; LINE NUMBER
001390 C5          0475*                  	PUSH	BC			; SAVE LINE LENGTH
001391 EB          0476*                  	EX	DE,HL
001392 C5          0477*                  	PUSH	BC
001393 CD 5E 40    0478*                  	CALL	GETTOP
001396 C1          0479*                  	POP	BC
001397 E5          0480*                  	PUSH	HL
001398 09          0481*                  	ADD	HL,BC
001399 E5          0482*                  	PUSH	HL
00139A 24          0483*                  	INC	H
00139B AF          0484*                  	XOR	A
00139C ED 72       0485*                  	SBC	HL,SP
00139E E1          0486*                  	POP	HL
00139F D2 7D 3F    0487*                  	JP	NC,ERROR_		; "No room"
0013A2 E3          0488*                  	EX	(SP),HL
0013A3 E5          0489*                  	PUSH	HL
0013A4 23          0490*                  	INC	HL
0013A5 B7          0491*                  	OR	A
0013A6 ED 52       0492*                  	SBC	HL,DE
0013A8 44          0493*                  	LD	B,H			; BC=AMOUNT TO MOVE
0013A9 4D          0494*                  	LD	C,L
0013AA E1          0495*                  	POP	HL
0013AB D1          0496*                  	POP	DE
0013AC 28 02       0497*                  	JR	Z,ATENDos
0013AE ED B8       0498*                  	LDDR				; MAKE SPACE
0013B0 C1          0499*  ATENDos:          	POP	BC			; LINE LENGTH
0013B1 D1          0500*                  	POP	DE			; LINE NUMBER
0013B2 23          0501*                  	INC	HL
0013B3 71          0502*                  	LD	(HL),C			; STORE LENGTH
0013B4 23          0503*                  	INC	HL
0013B5 73          0504*                  	LD	(HL),E			; STORE LINE NUMBER
0013B6 23          0505*                  	INC	HL
0013B7 72          0506*                  	LD	(HL),D
0013B8 23          0507*                  	INC	HL
0013B9 11 00 53    0508*                  	LD	DE,BUFFER
0013BC EB          0509*                  	EX	DE,HL
0013BD 0D          0510*                  	DEC	C
0013BE 0D          0511*                  	DEC	C
0013BF 0D          0512*                  	DEC	C
0013C0 ED B0       0513*                  	LDIR				; ADD LINE
0013C2 37          0514*  			SCF
0013C3 C9          0515*  			RET
0013C4             0516*  ;
0013C4             0517*  ; Load the file in as a tokenised binary blob
0013C4             0518*  ;
0013C4             0519*  OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
0013C4 3E 01       0001*M 			LD	A, function
0013C6 49 CF       0002*M 			RST.LIS	08h
0013C8 D0          0520*  			RET	NC			; If load returns with carry reset - NO ROOM
0013C9 B7          0521*  			OR	A			; If there is no error (A=0)
0013CA 37          0522*  			SCF				; Need to set carry indicating there was room
0013CB C8          0523*  			RET	Z			; Return
0013CC             0524*  ;
0013CC F5          0525*  OSERROR:		PUSH	AF			; Handle the MOS error
0013CD 21 00 52    0526*  			LD	HL, ACCS		; Address of the buffer
0013D0 01 00 01    0527*  			LD	BC, 256			; Length of the buffer
0013D3 5F          0528*  			LD	E, A			; The error code
0013D4             0529*  			MOSCALL	mos_getError		; Copy the error message into the buffer
0013D4 3E 0F       0001*M 			LD	A, function
0013D6 49 CF       0002*M 			RST.LIS	08h
0013D8 F1          0530*  			POP	AF
0013D9 E5          0531*  			PUSH	HL			; Stack the address of the error (now in ACCS)
0013DA C6 7F       0532*  			ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0013DC C3 8E 3F    0533*  			JP	EXTERR			; Trigger an external error
0013DF             0534*  
0013DF             0535*  ;OSSAVE - Save an area of memory to a file.
0013DF             0536*  ;   Inputs: HL addresses filename (term CR)
0013DF             0537*  ;           DE = start address of data to save
0013DF             0538*  ;           BC = length of data to save (bytes)
0013DF             0539*  ; Destroys: A,B,C,D,E,H,L,F
0013DF             0540*  ;
0013DF C5          0541*  OSSAVE:			PUSH	BC			; Stack the size
0013E0 D5          0542*  			PUSH	DE			; Stack the save address
0013E1 11 00 52    0543*  			LD	DE, ACCS		; Buffer address for filename
0013E4 CD ED 0E    0544*  			CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0013E7 21 00 52    0545*  			LD	HL, ACCS		; HL: Filename
0013EA CD 32 14    0546*  			CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0013ED CD 43 14    0547*  			CALL	EXT_HANDLER		; Get the default handler
0013F0 D1          0548*  			POP	DE			; Restore the save address
0013F1 C1          0549*  			POP	BC			; Restore the size
0013F2 B7          0550*  			OR	A			; Is the extension .BBC
0013F3 28 35       0551*  			JR	Z, OSSAVE_BBC		; Yes, so use that
0013F5             0552*  ;
0013F5             0553*  ; Save the file out as a text file
0013F5             0554*  ;
0013F5 3A 4B 51    0555*  OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0013F8 F5          0556*  			PUSH	AF
0013F9 AF          0557*  			XOR	A
0013FA 3C          0558*  			INC	A			; Make sure C is clear, A is 1, for OPENOUT
0013FB 32 4B 51    0559*  			LD	(OSWRCHCH), A
0013FE CD 61 12    0560*  			CALL	OSOPEN			; Open the file
001401 32 4C 51    0561*  			LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
001404 DD 21 FE 54 0562*  			LD	IX, LISTON		; Required for LISTIT
001408 2A DC 54    0563*  			LD	HL, (PAGE_)		; Get start of program area
00140B D9          0564*  			EXX
00140C 01 00 00    0565*  			LD	BC, 0			; Set the initial indent counters
00140F D9          0566*  			EXX
001410 7E          0567*  OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
001411 B7          0568*  			OR	A
001412 28 0A       0569*  			JR	Z, OSSAVE_TXT2
001414 23          0570*  			INC	HL			; Skip the length byte
001415 5E          0571*  			LD	E, (HL)			; Get the line number
001416 23          0572*  			INC	HL
001417 56          0573*  			LD	D, (HL)
001418 23          0574*  			INC	HL
001419 CD 96 40    0575*  			CALL	LISTIT			; List the line
00141C 18 F2       0576*  			JR	OSSAVE_TXT1
00141E 3A 4C 51    0577*  OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
001421 5F          0578*  			LD	E, A
001422 CD 70 12    0579*  			CALL	OSSHUT			; Close it
001425 F1          0580*  			POP	AF			; Restore the channel
001426 32 4B 51    0581*  			LD	(OSWRCHCH), A
001429 C9          0582*  			RET
00142A             0583*  ;
00142A             0584*  ; Save the file out as a tokenised binary blob
00142A             0585*  ;
00142A             0586*  OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
00142A 3E 02       0001*M 			LD	A, function
00142C 49 CF       0002*M 			RST.LIS	08h
00142E B7          0587*  			OR	A			; If there is no error (A=0)
00142F C8          0588*  			RET	Z			; Just return
001430 18 9A       0589*  			JR	OSERROR			; Trip an error
001432             0590*  
001432             0591*  ; Check if an extension is specified in the filename
001432             0592*  ; Add a default if not specified
001432             0593*  ; HL: Filename (CSTR format)
001432             0594*  ;
001432 E5          0595*  EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
001433 0E 2E       0596*  			LD	C, '.'			; Search for dot (marks start of extension)
001435 CD 0D 0F    0597*  			CALL	CSTR_FINDCH
001438 B7          0598*  			OR	A			; Check for end of string marker
001439 20 06       0599*  			JR	NZ, @F			; No, so skip as we have an extension at this point
00143B 11 6F 14    0600*  			LD	DE, EXT_LOOKUP		; Get the first (default extension)
00143E CD 23 0F    0601*  			CALL	CSTR_CAT		; Concat it to string pointed to by HL
001441 E1          0602*  @@:			POP	HL			; Restore the filename pointer
001442 C9          0603*  			RET
001443             0604*  
001443             0605*  ; Check if an extension is valid and, if so, provide a pointer to a handler
001443             0606*  ; HL: Filename (CSTR format)
001443             0607*  ; Returns:
001443             0608*  ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
001443             0609*  ;
001443 E5          0610*  EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
001444 0E 2E       0611*  			LD	C, '.'			; Find the '.'
001446 CD 0D 0F    0612*  			CALL	CSTR_FINDCH
001449 11 6F 14    0613*  			LD	DE, EXT_LOOKUP		; The lookup table
00144C             0614*  ;
00144C E5          0615*  EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
00144D CD 15 0F    0616*  			CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
001450 E1          0617*  			POP	HL			; Restore the pointer to the extension
001451 28 18       0618*  			JR	Z, EXT_HANDLER_2	; We have a match!
001453             0619*  ;
001453 1A          0620*  @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
001454 13          0621*  			INC	DE
001455 B7          0622*  			OR	A
001456 20 FB       0623*  			JR	NZ, @B
001458 13          0624*  			INC	DE			; Skip the file extension # byte
001459             0625*  ;
001459 1A          0626*  			LD	A, (DE)			; Are we at the end of the table?
00145A B7          0627*  			OR	A
00145B 20 EF       0628*  			JR	NZ, EXT_HANDLER_1	; No, so loop
00145D             0629*  ;
00145D 3E CC       0630*  			LD      A,204			; Throw a "Bad name" error
00145F CD 8E 3F    0631*          		CALL    EXTERR
001462 42 61 64 20 0632*          		DB    	"Bad name", 0
       6E 61 6D 65 
       00          
00146B             0633*  ;
00146B 13          0634*  EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
00146C 1A          0635*  			LD	A, (DE)
00146D E1          0636*  			POP	HL			; Restore the filename pointer
00146E C9          0637*  			RET
00146F             0638*  
00146F             0639*  ; Extension lookup table
00146F             0640*  ; CSTR, TYPE
00146F             0641*  ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
00146F             0642*  ; 	- 1: Human readable plain text
00146F             0643*  ;
00146F 2E 42 42 43 0644*  EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
       00 00       
001475 2E 54 58 54 0645*  			DB	".TXT", 0, 1
       00 01       
00147B 2E 41 53 43 0646*  			DB	".ASC", 0, 1
       00 01       
001481 2E 42 41 53 0647*  			DB	".BAS", 0, 1
       00 01       
001487 00          0648*  			DB	0			; End of table
001488             0649*  
001488             0650*  ; OSWORD
001488             0651*  ;
001488 FE 07       0652*  OSWORD:			CP	07H			; SOUND
00148A             0653*  			; JR	Z, OSWORD_07
00148A CA 32 0F    0654*  			JP	Z, OSWORD_07 ; JR WAS TOO LARGE
00148D FE 08       0655*  			CP	08H			; ENVELOPE
00148F 28 14       0656*  			JR	Z, OSWORD_08
001491 FE 09       0657*  			CP	09H			; POINT
001493 28 03       0658*  			JR	Z, OSWORD_09
001495 C3 CA 14    0659*  			JP	HUH			; Anything else trips an error
001498             0660*  
001498             0661*  ; SOUND channel,volume,pitch,duration
001498             0662*  ; Parameters:
001498             0663*  ; - HL: Pointer to data
001498             0664*  ;   - 0,1: Channel
001498             0665*  ;   - 2,3: Volume 0 (off) to 15 (full volume)
001498             0666*  ;   - 4,5: Pitch 0 - 255
001498             0667*  ;   - 6,7: Duration -1 to 254 (duration in 20ths of a second, -1 = play forever)
001498             0668*  ;
001498             0669*  OSWORD_07:		EQU	SOUND_
001498             0670*  
001498             0671*  ; OSWORD 0x09: POINT
001498             0672*  ; Parameters:
001498             0673*  ; - HL: Address of data
001498             0674*  ;   - 0,1: X coordinate
001498             0675*  ;   - 2,3: Y coordinate
001498             0676*  ;
001498 ED 5B 50 51 0677*  OSWORD_09:		LD	DE,(SCRAP+0)
00149C 2A 52 51    0678*  			LD	HL,(SCRAP+2)
00149F CD 42 0B    0679*  			CALL	POINT_
0014A2 32 54 51    0680*  			LD	(SCRAP+4),A
0014A5 C9          0681*  OSWORD_08:		RET				; Envelope not currently implemented
0014A6             0682*  
0014A6             0683*  ;
0014A6             0684*  ; OSBYTE
0014A6             0685*  ; Parameters:
0014A6             0686*  ; - A: FX #
0014A6             0687*  ; - L: First parameter
0014A6             0688*  ; - H: Second parameter
0014A6             0689*  ;
0014A6 FE 0B       0690*  OSBYTE:			CP	0BH			; Keyboard auto-repeat delay
0014A8 28 31       0691*  			JR	Z, OSBYTE_0B
0014AA FE 0C       0692*  			CP	0CH			; Keyboard auto-repeat rate
0014AC 28 54       0693*  			JR	Z, OSBYTE_0C
0014AE FE 13       0694*  			CP	13H			; Wait for vblank
0014B0 28 77       0695*  			JR	Z, OSBYTE_13
0014B2 FE 76       0696*  			CP	76H			; Set keyboard LED
0014B4 28 7B       0697*  			JR	Z, OSBYTE_76
0014B6 FE 81       0698*  			CP	81H			; Read the keyboard
0014B8 CA 59 15    0699*  			JP	Z, OSBYTE_81
0014BB FE 86       0700*  			CP	86H			; Get cursor coordinates
0014BD CA 73 15    0701*  			JP	Z, OSBYTE_86
0014C0 FE 87       0702*  			CP	87H			; Fetch current mode and character under cursor
0014C2 CA A2 15    0703*  			JP	Z, OSBYTE_87
0014C5 FE A0       0704*  			CP	A0H			; Fetch system variable
0014C7 CA B8 15    0705*  			JP	Z, OSBYTE_A0
0014CA             0706*  ;
0014CA             0707*  ; Anything else trips an error
0014CA             0708*  ;
0014CA 3E FE       0709*  HUH:    		LD      A,254			; Bad command error
0014CC CD 8E 3F    0710*          		CALL    EXTERR
0014CF 42 61 64 20 0711*          		DB    	"Bad command"
       63 6F 6D 6D 
       61 6E 64    
0014DA 00          0712*          		DEFB    0
0014DB             0713*  
0014DB             0714*  ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
0014DB             0715*  ; Parameters:
0014DB             0716*  ; - HL: Repeat delay
0014DB             0717*  ;
0014DB             0718*  OSBYTE_0B:		VDU	23
0014DB 3E 17       0001*M         LD      A, VAL
0014DD CD CE 11    0002*M         CALL    OSWRCH
0014E0             0719*  			VDU	0
0014E0 3E 00       0001*M         LD      A, VAL
0014E2 CD CE 11    0002*M         CALL    OSWRCH
0014E5             0720*  			VDU	vdp_keystate
0014E5 3E 88       0001*M         LD      A, VAL
0014E7 CD CE 11    0002*M         CALL    OSWRCH
0014EA             0721*  			VDU	L
0014EA 7D          0001*M         LD      A, VAL
0014EB CD CE 11    0002*M         CALL    OSWRCH
0014EE             0722*  			VDU	H
0014EE 7C          0001*M         LD      A, VAL
0014EF CD CE 11    0002*M         CALL    OSWRCH
0014F2             0723*  			VDU	0
0014F2 3E 00       0001*M         LD      A, VAL
0014F4 CD CE 11    0002*M         CALL    OSWRCH
0014F7             0724*  			VDU 	0
0014F7 3E 00       0001*M         LD      A, VAL
0014F9 CD CE 11    0002*M         CALL    OSWRCH
0014FC             0725*  			VDU	255
0014FC 3E FF       0001*M         LD      A, VAL
0014FE CD CE 11    0002*M         CALL    OSWRCH
001501 C9          0726*  			RET
001502             0727*  
001502             0728*  ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
001502             0729*  ; Parameters:
001502             0730*  ; - HL: Repeat rate
001502             0731*  ;
001502             0732*  OSBYTE_0C:		VDU	23
001502 3E 17       0001*M         LD      A, VAL
001504 CD CE 11    0002*M         CALL    OSWRCH
001507             0733*  			VDU	0
001507 3E 00       0001*M         LD      A, VAL
001509 CD CE 11    0002*M         CALL    OSWRCH
00150C             0734*  			VDU	vdp_keystate
00150C 3E 88       0001*M         LD      A, VAL
00150E CD CE 11    0002*M         CALL    OSWRCH
001511             0735*  			VDU	0
001511 3E 00       0001*M         LD      A, VAL
001513 CD CE 11    0002*M         CALL    OSWRCH
001516             0736*  			VDU 	0
001516 3E 00       0001*M         LD      A, VAL
001518 CD CE 11    0002*M         CALL    OSWRCH
00151B             0737*  			VDU	L
00151B 7D          0001*M         LD      A, VAL
00151C CD CE 11    0002*M         CALL    OSWRCH
00151F             0738*  			VDU	H
00151F 7C          0001*M         LD      A, VAL
001520 CD CE 11    0002*M         CALL    OSWRCH
001523             0739*  			VDU	255
001523 3E FF       0001*M         LD      A, VAL
001525 CD CE 11    0002*M         CALL    OSWRCH
001528 C9          0740*  			RET
001529             0741*  
001529             0742*  ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
001529             0743*  ;
001529 CD A8 16    0744*  OSBYTE_13:		CALL	WAIT_VBLANK
00152C 2E 00       0745*  			LD	L, 0			; Returns 0
00152E C3 87 1B    0746*  			JP	COUNT0
001531             0747*  ;
001531             0748*  ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
001531             0749*  ; Parameters:
001531             0750*  ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
001531             0751*  ;
001531             0752*  OSBYTE_76:		VDU	23
001531 3E 17       0001*M         LD      A, VAL
001533 CD CE 11    0002*M         CALL    OSWRCH
001536             0753*  			VDU	0
001536 3E 00       0001*M         LD      A, VAL
001538 CD CE 11    0002*M         CALL    OSWRCH
00153B             0754*  			VDU	vdp_keystate
00153B 3E 88       0001*M         LD      A, VAL
00153D CD CE 11    0002*M         CALL    OSWRCH
001540             0755*  			VDU	0
001540 3E 00       0001*M         LD      A, VAL
001542 CD CE 11    0002*M         CALL    OSWRCH
001545             0756*  			VDU 	0
001545 3E 00       0001*M         LD      A, VAL
001547 CD CE 11    0002*M         CALL    OSWRCH
00154A             0757*  			VDU	0
00154A 3E 00       0001*M         LD      A, VAL
00154C CD CE 11    0002*M         CALL    OSWRCH
00154F             0758*  			VDU	0
00154F 3E 00       0001*M         LD      A, VAL
001551 CD CE 11    0002*M         CALL    OSWRCH
001554             0759*  			VDU	L
001554 7D          0001*M         LD      A, VAL
001555 CD CE 11    0002*M         CALL    OSWRCH
001558 C9          0760*  			RET
001559             0761*  
001559             0762*  ; OSBYTE 0x81: Read the keyboard
001559             0763*  ; Parameters:
001559             0764*  ; - HL = Time to wait (centiseconds)
001559             0765*  ; Returns:
001559             0766*  ; - F: Carry reset indicates time-out
001559             0767*  ; - A: If carry set, A = character typed
001559             0768*  ; Destroys: A,D,E,H,L,F
001559             0769*  ;
001559 CD 48 12    0770*  OSBYTE_81:		CALL	READKEY			; Read the keyboard
00155C 28 09       0771*  			JR	Z, @F 			; Skip if we have a key
00155E 7C          0772*  			LD	A, H 			; Check loop counter
00155F B5          0773*  			OR 	L
001560 C8          0774*  			RET 	Z 			; Return, we've not got a key at this point
001561 CD A8 16    0775*  			CALL	WAIT_VBLANK 		; Wait a frame
001564 2B          0776*  			DEC 	HL			; Decrement
001565 18 F2       0777*  			JR	OSBYTE_81		; And loop
001567             0778*  ;
001567 21 4D 51    0779*  @@:			LD	HL, KEYDOWN		; We have a key, so
00156A 36 00       0780*  			LD	(HL), 0			; clear the keydown flag
00156C FE 1B       0781*  			CP	1BH			; If we are not pressing ESC,
00156E 37          0782*  			SCF 				; then flag we've got a character
00156F C0          0783*  			RET	NZ
001570 C3 33 12    0784*  			JP	ESCSET			; Handle ESC
001573             0785*  
001573             0786*  ; OSBYTE 0x86: Fetch cursor coordinates
001573             0787*  ; Returns:
001573             0788*  ; - DE: X Coordinate (POS)
001573             0789*  ; - HL: Y Coordinate (VPOS)
001573             0790*  ;
001573 DD E5       0791*  OSBYTE_86:		PUSH	IX			; Get the system vars in IX
001575             0792*  			MOSCALL	mos_sysvars		; Reset the semaphore
001575 3E 08       0001*M 			LD	A, function
001577 49 CF       0002*M 			RST.LIS	08h
001579 5B DD CB 04 0793*  			RES.LIL	0, (IX+sysvar_vpd_pflags)
       86          
00157E             0794*  			VDU	23
00157E 3E 17       0001*M         LD      A, VAL
001580 CD CE 11    0002*M         CALL    OSWRCH
001583             0795*  			VDU	0
001583 3E 00       0001*M         LD      A, VAL
001585 CD CE 11    0002*M         CALL    OSWRCH
001588             0796*  			VDU	vdp_cursor
001588 3E 82       0001*M         LD      A, VAL
00158A CD CE 11    0002*M         CALL    OSWRCH
00158D 5B DD CB 04 0797*  @@:			BIT.LIL	0, (IX+sysvar_vpd_pflags)
       46          
001592 28 F9       0798*  			JR	Z, @B			; Wait for the result
001594 16 00       0799*  			LD 	D, 0
001596 62          0800*  			LD	H, D
001597 5B DD 5E 07 0801*  			LD.LIL	E, (IX + sysvar_cursorX)
00159B 5B DD 6E 08 0802*  			LD.LIL	L, (IX + sysvar_cursorY)
00159F DD E1       0803*  			POP	IX
0015A1 C9          0804*  			RET
0015A2             0805*  
0015A2             0806*  ; OSBYTE 0x87: Fetch current mode and character under cursor
0015A2             0807*  ;
0015A2 DD E5       0808*  OSBYTE_87:		PUSH	IX
0015A4 CD 80 00    0809*  			CALL	GETCSR			; Get the current screen position
0015A7 CD 05 0B    0810*  			CALL	GETSCHR_1		; Read character from screen
0015AA 6F          0811*  			LD	L, A
0015AB             0812*  			MOSCALL	mos_sysvars
0015AB 3E 08       0001*M 			LD	A, function
0015AD 49 CF       0002*M 			RST.LIS	08h
0015AF 5B DD 66 27 0813*  			LD.LIL	H, (IX+sysvar_scrMode)	; H: Screen mode
0015B3 DD E1       0814*  			POP	IX
0015B5 C3 89 1B    0815*  			JP	COUNT1
0015B8             0816*  
0015B8             0817*  ; OSBYTE 0xA0: Fetch system variable
0015B8             0818*  ; Parameters:
0015B8             0819*  ; - L: The system variable to fetch
0015B8             0820*  ;
0015B8 DD E5       0821*  OSBYTE_A0:		PUSH	IX
0015BA             0822*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
0015BA 3E 08       0001*M 			LD	A, function
0015BC 49 CF       0002*M 			RST.LIS	08h
0015BE 5B 01 00 00 0823*  			LD.LIL	BC, 0
       00          
0015C3 4D          0824*  			LD	C, L			; BCU = L
0015C4 5B DD 09    0825*  			ADD.LIL	IX, BC			; Add to IX
0015C7 5B DD 6E 00 0826*  			LD.LIL	L, (IX + 0)		; Fetch the return value
0015CB DD E1       0827*  			POP	IX
0015CD C3 87 1B    0828*  			JP 	COUNT0
0015D0             0829*  
0015D0             0830*  ; OSCLI
0015D0             0831*  ;
0015D0             0832*  ;
0015D0             0833*  ;OSCLI - Process a MOS command
0015D0             0834*  ;
0015D0 CD 2A 16    0835*  OSCLI: 			CALL    SKIPSP
0015D3 FE 0D       0836*  			CP      CR
0015D5 C8          0837*  			RET     Z
0015D6 FE 7C       0838*  			CP      '|'
0015D8 C8          0839*  			RET     Z
0015D9 EB          0840*  			EX      DE,HL
0015DA 21 39 16    0841*  			LD      HL,COMDS
0015DD 1A          0842*  OSCLI0:			LD      A,(DE)
0015DE CD 31 16    0843*  			CALL    UPPRC
0015E1 BE          0844*  			CP      (HL)
0015E2 28 0B       0845*  			JR      Z,OSCLI2
0015E4 38 2E       0846*  			JR      C,OSCLI6
0015E6 CB 7E       0847*  OSCLI1:			BIT     7,(HL)
0015E8 23          0848*  			INC     HL
0015E9 28 FB       0849*  			JR      Z,OSCLI1
0015EB 23          0850*  			INC     HL
0015EC 23          0851*  			INC     HL
0015ED 18 EE       0852*  			JR      OSCLI0
0015EF             0853*  ;
0015EF D5          0854*  OSCLI2:			PUSH    DE
0015F0 13          0855*  OSCLI3:			INC     DE
0015F1 23          0856*  			INC     HL
0015F2 1A          0857*  			LD      A,(DE)
0015F3 CD 31 16    0858*  			CALL    UPPRC
0015F6 FE 2E       0859*  			CP      '.'			; ABBREVIATED?
0015F8 28 0A       0860*  			JR      Z,OSCLI4
0015FA AE          0861*  			XOR     (HL)
0015FB 28 F3       0862*  			JR      Z,OSCLI3
0015FD FE 80       0863*  			CP      80H
0015FF 28 03       0864*  			JR      Z,OSCLI4
001601 D1          0865*  			POP     DE
001602 18 E2       0866*  			JR      OSCLI1
001604             0867*  ;
001604 F1          0868*  OSCLI4:			POP     AF
001605 13          0869*  		        INC     DE
001606 CB 7E       0870*  OSCLI5:			BIT     7,(HL)
001608 23          0871*  			INC     HL
001609 28 FB       0872*  			JR      Z,OSCLI5
00160B 7E          0873*  			LD      A,(HL)
00160C 23          0874*  			INC     HL
00160D 66          0875*  			LD      H,(HL)
00160E 6F          0876*  			LD      L,A
00160F E5          0877*  			PUSH    HL
001610 EB          0878*  			EX      DE,HL
001611 C3 2A 16    0879*  			JP      SKIPSP
001614             0880*  ;
001614 EB          0881*  OSCLI6:			EX	DE, HL			; HL: Buffer for command
001615 11 00 52    0882*  			LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
001618 D5          0883*  			PUSH	DE			; Store buffer address
001619 CD FF 0E    0884*  			CALL	CSTR_LINE		; Fetch the line
00161C E1          0885*  			POP	HL			; HL: Pointer to command string in ACCS
00161D FD E5       0886*  			PUSH	IY
00161F             0887*  			MOSCALL	mos_oscli		; Returns OSCLI error in A
00161F 3E 10       0001*M 			LD	A, function
001621 49 CF       0002*M 			RST.LIS	08h
001623 FD E1       0888*  			POP	IY
001625 B7          0889*  			OR	A			; 0 means MOS returned OK
001626 C8          0890*  			RET	Z			; So don't do anything
001627 C3 CC 13    0891*  			JP 	OSERROR			; Otherwise it's a MOS error
00162A             0892*  
00162A 7E          0893*  SKIPSP:			LD      A,(HL)
00162B FE 20       0894*          		CP      ' '
00162D C0          0895*          		RET     NZ
00162E 23          0896*          		INC     HL
00162F 18 F9       0897*          		JR      SKIPSP
001631             0898*  
001631 E6 7F       0899*  UPPRC:  		AND     7FH
001633 FE 60       0900*  			CP      '`'
001635 D8          0901*  			RET     C
001636 E6 5F       0902*  			AND     5FH			; CONVERT TO UPPER CASE
001638 C9          0903*  			RET
001639             0904*  
001639             0905*  ; Each command has bit 7 of the last character set, and is followed by the address of the handler
001639             0906*  ; These must be in alphabetical order
001639             0907*  ;
001639 42 59 45    0908*  COMDS:  		DB	"BY","E"+80h		; BYE
00163C 49 16       0909*  			DW	BYE
00163E 45 44 49 54 0910*  			DB	"EDI","T"+80h		; EDIT
001642 54 16       0911*  			DW	STAR_EDIT
001644 46 58       0912*  			DB	"F","X"+80h		; FX
001646 90 16       0913*  			DW	STAR_FX
001648             0914*  ;			DB	'VERSIO','N'+80h	; VERSION
001648             0915*  ;			DW	STAR_VERSION
001648 FF          0916*  			DB	FFh
001649             0917*  
001649             0918*  ; *BYE
001649             0919*  ;
001649 CD F8 0D    0920*  BYE:			CALL	VBLANK_STOP		; Restore MOS interrupts
00164C 5B DD E1    0921*  			POP.LIL	IX 			; The return address to init
00164F 21 00 00    0922*  			LD	HL, 0			; The return code
001652 DD E9       0923*  			JP	(IX)
001654             0924*  
001654             0925*  ; *EDIT linenum
001654             0926*  ;
001654 CD 6E 0E    0927*  STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
001657 EB          0928*  			EX	DE, HL			; HL: Line number
001658 CD 7C 41    0929*  			CALL	FINDL			; HL: Address in RAM of tokenised line
00165B 3E 29       0930*  			LD	A, 41			; F:NZ If the line is not found
00165D C2 7D 3F    0931*  			JP	NZ, ERROR_		; Do error 41: No such line in that case
001660             0932*  ;
001660             0933*  ; Use LISTIT to output the line to the ACCS buffer
001660             0934*  ;
001660 23          0935*  			INC	HL			; Skip the length byte
001661 5E          0936*  			LD	E, (HL)			; Fetch the line number
001662 23          0937*  			INC	HL
001663 56          0938*  			LD	D, (HL)
001664 23          0939*  			INC	HL
001665 DD 21 00 52 0940*  			LD	IX, ACCS		; Pointer to where the copy is to be stored
001669 DD 22 49 51 0941*  			LD	(OSWRCHPT), IX
00166D DD 21 FE 54 0942*  			LD	IX, LISTON		; Pointer to LISTON variable in RAM
001671 DD 7E 00    0943*  			LD	A, (IX)			; Store that variable
001674 F5          0944*  			PUSH	AF
001675 DD 36 00 09 0945*  			LD	(IX), 09h		; Set to echo to buffer
001679 CD 96 40    0946*  			CALL	LISTIT
00167C F1          0947*  			POP	AF
00167D DD 77 00    0948*  			LD	(IX), A			; Restore the original LISTON variable
001680 21 00 52    0949*  			LD	HL, ACCS		; HL: ACCS
001683 5D          0950*  			LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
001684 CD 06 12    0951*  			CALL	OSLINE1			; Invoke the editor
001687 CD 56 13    0952*  			CALL	OSEDIT
00168A DC 53 40    0953*  			CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
00168D C3 E9 37    0954*  			JP      CLOOP			; Jump back to immediate mode
001690             0955*  
001690             0956*  ; OSCLI FX n
001690             0957*  ;
001690 CD 6E 0E    0958*  STAR_FX:		CALL	ASC_TO_NUMBER
001693 4B          0959*  			LD	C, E			; C: Save FX #
001694 CD 6E 0E    0960*  			CALL	ASC_TO_NUMBER
001697 7A          0961*  			LD	A, D  			; Is first parameter > 255?
001698 B7          0962*  			OR 	A
001699 28 03       0963*  			JR	Z, STAR_FX1		; Yes, so skip next bit
00169B EB          0964*  			EX	DE, HL 			; Parameter is 16-bit
00169C 18 06       0965*  			JR	STAR_FX2
00169E             0966*  ;
00169E 43          0967*  STAR_FX1:		LD	B, E 			; B: Save First parameter
00169F CD 6E 0E    0968*  			CALL	ASC_TO_NUMBER		; Fetch second parameter
0016A2 68          0969*  			LD	L, B 			; L: First parameter
0016A3 63          0970*  			LD	H, E 			; H: Second parameter
0016A4             0971*  ;
0016A4 79          0972*  STAR_FX2:		LD	A, C 			; A: FX #
0016A5 C3 A6 14    0973*  			JP	OSBYTE
0016A8             0974*  
0016A8             0975*  ; Helper Functions
0016A8             0976*  ;
0016A8 DD E5       0977*  WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
0016AA             0978*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
0016AA 3E 08       0001*M 			LD	A, function
0016AC 49 CF       0002*M 			RST.LIS	08h
0016AE 5B DD 7E 00 0979*  			LD.LIL	A, (IX + sysvar_time + 0)
0016B2 5B DD BE 00 0980*  @@:			CP.LIL 	A, (IX + sysvar_time + 0)
0016B6 28 FA       0981*  			JR	Z, @B
0016B8 DD E1       0982*  			POP	IX
0016BA C9          0983*  			RET
0016BB             0984*  
0016BB             0016       include "eval.asm"
0016BB             0001*  ;
0016BB             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
0016BB             0003*  ;
0016BB             0004*                  .ASSUME ADL = 0
0016BB             0005*  ;	.ORG 0x0000
0016BB             0006*  ;                SEGMENT CODE
0016BB             0007*  ;
0016BB             0008*  ;                XDEF	COUNT0
0016BB             0009*  ;                XDEF	COUNT1
0016BB             0010*  ;
0016BB             0011*  ;BBC BASIC INTERPRETER - Z80 VERSION
0016BB             0012*  ;EVALUATE EXPRESSION MODULE - "EVAL"
0016BB             0013*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0016BB             0014*  ;
0016BB             0015*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0016BB             0016*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0016BB             0017*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0016BB             0018*  ;
0016BB             0019*  ;VERSION 2.3, 07-05-1984
0016BB             0020*  ;VERSION 3.0, 08-03-1987
0016BB             0021*  ;VERSION 5.0, 31-05-2024
0016BB             0022*  ;
0016BB             0023*  ;BINARY FLOATING POINT REPRESENTATION:
0016BB             0024*  ; 32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
0016BB             0025*  ; 8 BIT EXCESS-128 SIGNED EXPONENT
0016BB             0026*  ; SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
0016BB             0027*  ; MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
0016BB             0028*  ;
0016BB             0029*  ;BINARY INTEGER REPRESENTATION:
0016BB             0030*  ; 32 BIT 2'S-COMPLEMENT SIGNED INTEGER
0016BB             0031*  ; "EXPONENT" BYTE = 0 (WHEN PRESENT)
0016BB             0032*  ;
0016BB             0033*  ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
0016BB             0034*  ;                            EXPONENT - C
0016BB             0035*  ;
0016BB             0036*  ;                XDEF	EXPR
0016BB             0037*  ;                XDEF	EXPRN
0016BB             0038*  ;                XDEF	EXPRI
0016BB             0039*  ;                XDEF	EXPRS
0016BB             0040*  ;                XDEF	ITEMI
0016BB             0041*  ;                XDEF	CONS
0016BB             0042*  ;                XDEF	LOADS
0016BB             0043*  ;                XDEF	VAL0
0016BB             0044*  ;                XDEF	SFIX
0016BB             0045*  ;                XDEF	STR
0016BB             0046*  ;                XDEF	HEXSTR
0016BB             0047*  ;                XDEF	LOAD4
0016BB             0048*  ;                XDEF	LOADN
0016BB             0049*  ;                XDEF	DLOAD5
0016BB             0050*  ;                XDEF	TEST
0016BB             0051*  ;                XDEF	ZERO
0016BB             0052*  ;                XDEF	COMMA
0016BB             0053*  ;                XDEF	BRAKET
0016BB             0054*  ;                XDEF	DECODE
0016BB             0055*  ;                XDEF	PUSHS
0016BB             0056*  ;                XDEF	POPS
0016BB             0057*  ;                XDEF	SEARCH
0016BB             0058*  ;                XDEF	SCP
0016BB             0059*  ;                XDEF	LETARR
0016BB             0060*  ;
0016BB             0061*  ;                XREF	MUL16
0016BB             0062*  ;                XREF	ERROR_
0016BB             0063*  ;                XREF	SYNTAX
0016BB             0064*  ;                XREF	CHANEL
0016BB             0065*  ;                XREF	CHNL
0016BB             0066*  ;                XREF	STOREN
0016BB             0067*  ;                XREF	STORE4
0016BB             0068*  ;                XREF	STORE5
0016BB             0069*  ;                XREF	STACCS
0016BB             0070*  ;                XREF	CHECK
0016BB             0071*  ;                XREF	USR
0016BB             0072*  ;                XREF	VAR_
0016BB             0073*  ;                XREF	FN
0016BB             0074*  ;                XREF	XEQ
0016BB             0075*  ;                XREF	NXT
0016BB             0076*  ;                XREF	X14OR5
0016BB             0077*  ;                XREF	MODIFY
0016BB             0078*  ;                XREF	MODIFS
0016BB             0079*  ;                XREF	TERMQ
0016BB             0080*  ;
0016BB             0081*  ;                XREF	GETVAR
0016BB             0082*  ;                XREF	LEXAN2
0016BB             0083*  ;                XREF	RANGE
0016BB             0084*  ;                XREF	GETTOP
0016BB             0085*  ;
0016BB             0086*  ;                XREF	STAVAR
0016BB             0087*  ;                XREF	PAGE_
0016BB             0088*  ;                XREF	LOMEM
0016BB             0089*  ;                XREF	HIMEM
0016BB             0090*  ;                XREF	RANDOM
0016BB             0091*  ;                XREF	COUNT
0016BB             0092*  ;                XREF	LISTON
0016BB             0093*  ;                XREF	PC
0016BB             0094*  ;                XREF	ERL
0016BB             0095*  ;                XREF	ERR
0016BB             0096*  ;                XREF	ACCS
0016BB             0097*  ;                XREF	ERRTXT
0016BB             0098*  ;                XREF	KEYWDS
0016BB             0099*  ;                XREF	KEYWDL
0016BB             0100*  ;                XREF	FREE
0016BB             0101*  ;                XREF	BUFFER
0016BB             0102*  ;
0016BB             0103*  ;                XREF	OSRDCH
0016BB             0104*  ;                XREF	OSOPEN
0016BB             0105*  ;                XREF	OSBGET
0016BB             0106*  ;                XREF	OSSTAT
0016BB             0107*  ;                XREF	GETCSR
0016BB             0108*  ;                XREF	GETIME
0016BB             0109*  ;                XREF	GETIMS
0016BB             0110*  ;                XREF	GETEXT
0016BB             0111*  ;                XREF	GETPTR
0016BB             0112*  ;                XREF	OSKEY
0016BB             0113*  ;
0016BB             0114*  ;                XREF	POINT
0016BB             0115*  ;                XREF	ADVAL
0016BB             0116*  ;                XREF	TINTFN
0016BB             0117*  ;                XREF	MODEFN
0016BB             0118*  ;                XREF	WIDFN
0016BB             0119*  ;
0016BB             0120*  ;                XREF	FPP
0016BB             0121*  ;
0016BB             0122*  FUNTOK:         EQU	8DH		;1st FUNCTION TOKEN
0016BB             0123*  TMOD:           EQU	83H
0016BB             0124*  TLEN:           EQU	0A9H
0016BB             0125*  ; TTO:            EQU	0B8H	; IN main.asm
0016BB             0126*  ; TDIM:           EQU	0DEH	; IN main.asm
0016BB             0127*  TEND:           EQU	0E0H
0016BB             0128*  TMODE:          EQU	0EBH
0016BB             0129*  TREPORT:        EQU	0F6H
0016BB             0130*  TWIDTH:         EQU	0FEH
0016BB             0131*  TTINT:          EQU	0AH
0016BB             0132*  ; TBY:            EQU	0FH	; IN main.asm
0016BB             0133*  ;
0016BB             0134*  ;TABLE OF ADDRESSES FOR FUNCTIONS:
0016BB             0135*  ;
0016BB 99 1F       0136*  FUNTBL:         DW	DECODE		;Line number
0016BD 94 1B       0137*                  DW	OPENIN		;OPENIN
0016BF B1 1B       0138*                  DW	PTRev		;PTR
0016C1 66 1B       0139*                  DW	PAGEVev		;PAGE
0016C3 B9 1B       0140*                  DW	TIMEVev		;TIME
0016C5 5C 1B       0141*                  DW	LOMEMVev		;LOMEM
0016C7 61 1B       0142*                  DW	HIMEMVev		;HIMEM
0016C9 05 1C       0143*                  DW	ABSev		;ABS
0016CB 41 1C       0144*                  DW	ACSev		;ACS
0016CD BE 00       0145*                  DW	ADVAL		;ADVAL
0016CF 49 1B       0146*                  DW	ASC		;ASC
0016D1 39 1C       0147*                  DW	ASNev		;ASN
0016D3 3D 1C       0148*                  DW	ATNev		;ATN
0016D5 25 1B       0149*                  DW	BGET		;BGET
0016D7 25 1C       0150*                  DW	COSev		;COS
0016D9 84 1B       0151*                  DW	COUNTV		;COUNT
0016DB 0D 1C       0152*                  DW	DEGev		;DEG
0016DD 7A 1B       0153*                  DW	ERLV		;ERL
0016DF 7F 1B       0154*                  DW	ERRV		;ERR
0016E1 65 1C       0155*                  DW	EVAL_		;EVAL_
0016E3 2D 1C       0156*                  DW	EXPev		;EXP
0016E5 A9 1B       0157*                  DW	EXTev		;EXT
0016E7 31 20       0158*                  DW	ZERO		;FALSE
0016E9 1C 2A       0159*                  DW	FN		;FN
0016EB 33 1B       0160*                  DW	GET		;GET
0016ED 2E 1B       0161*                  DW	INKEY		;INKEY
0016EF DE 1D       0162*                  DW	INSTR		;INSTR(
0016F1 19 1C       0163*                  DW	INT_ev		;INT_
0016F3 56 1B       0164*                  DW	LEN		;LEN
0016F5 31 1C       0165*                  DW	LNev		;LN
0016F7 35 1C       0166*                  DW	LOGev		;LOG
0016F9 09 1C       0167*                  DW	CPL_ev		;NOT
0016FB 91 1B       0168*                  DW	OPENUP		;OPENUP
0016FD 8F 1B       0169*                  DW	OPENOT		;OPENOUT
0016FF 01 1C       0170*                  DW	PIev		;PI
001701 8B 00       0171*                  DW	POINT		;POINT(
001703 0E 1B       0172*                  DW	POS		;POS
001705 11 1C       0173*                  DW	RADev		;RAD
001707 92 1C       0174*                  DW	RND		;RND
001709 15 1C       0175*                  DW	SGNev		;SGN
00170B 29 1C       0176*                  DW	SINev		;SIN
00170D 1D 1C       0177*                  DW	SQRev		;SQR
00170F 21 1C       0178*                  DW	TANev		;TAN
001711 6B 1B       0179*                  DW	TOPV		;TO(P)
001713 F6 1B       0180*                  DW	TRUEev		;TRUE
001715 78 30       0181*                  DW	USR		;USR
001717 58 1C       0182*                  DW	VALev		;VAL
001719 14 1B       0183*                  DW	VPOS		;VPOS
00171B 5F 1E       0184*                  DW	CHRS		;CHR$
00171D 66 1E       0185*                  DW	GETS		;GET$
00171F C7 1E       0186*                  DW	INKEYS		;INKEY$
001721 07 1F       0187*                  DW	LEFTS		;LEFT$(
001723 D7 1E       0188*                  DW	MIDS		;MID$(
001725 35 1F       0189*                  DW	RIGHTS		;RIGHT$(
001727 F1 1F       0190*                  DW	STRS		;STR$
001729 5F 1F       0191*                  DW	STRING_		;STRING_$(
00172B 19 1B       0192*                  DW	EOF		;EOF
00172D 22 1D       0193*                  DW	SUM		;SUM
00172F             0194*  ;
00172F             0195*  FUNTBL_END:     EQU	$
00172F             0196*  ; TCMD:           EQU	FUNTOK+(FUNTBL_END-FUNTBL)/2
00172F             0197*  TCMD:           EQU	FUNTBL_END-FUNTBL/2+FUNTOK
00172F             0198*  ;
00172F             0199*  ; CR             EQU	0DH
00172F             0200*  ; LF             EQU	0AH
00172F             0201*  AND_:           EQU	80H
00172F             0202*  DIV_:           EQU	81H
00172F             0203*  EOR:            EQU	82H
00172F             0204*  MOD_:           EQU	83H
00172F             0205*  OR_:            EQU	84H
00172F             0206*  ;
00172F E4 1B       0207*  SOPTBL:         DW	SLE		;<= (STRING)
001731 EC 1B       0208*                  DW	SNE		;<>
001733 DE 1B       0209*                  DW	SGE		;>=
001735 D1 1B       0210*                  DW	SLT		;<
001737 F2 1B       0211*                  DW	SEQ		;=
001739 D7 1B       0212*                  DW	SGT		;>
00173B             0213*  ;
00173B             0214*  ;EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
00173B             0215*  ; Expression type is returned in A'F':
00173B             0216*  ; Numeric - A' bit 7=0, F' sign bit cleared.
00173B             0217*  ; String - A' bit 7=1, F' sign bit set.
00173B             0218*  ;Floating-point or integer result returned in HLH'L'C
00173B             0219*  ; Integer result denoted by C=0 and HLH'L' non-zero.
00173B             0220*  ;String result returned in string accumulator, DE set.
00173B             0221*  ;
00173B             0222*  ;Hierarchy is: (1) Variables, functions,
00173B             0223*  ; constants, bracketed expressions.
00173B             0224*  ; (2) ^
00173B             0225*  ; (3) * / MOD DIV
00173B             0226*  ; (4) + -
00173B             0227*  ; (5) = <> <= >= > <
00173B             0228*  ; (6) AND
00173B             0229*  ; (7) EOR OR
00173B             0230*  ;
00173B CD 50 17    0231*  EXPR:           CALL	EXPR1		;GET FIRST OPERAND
00173E FE 82       0232*  EXPR0A:         CP	EOR		;CHECK OPERATOR
001740 28 03       0233*                  JR	Z,EXPR0B
001742 FE 84       0234*                  CP	OR_
001744 C0          0235*                  RET	NZ
001745 CD AC 20    0236*  EXPR0B:         CALL	SAVEev		;SAVE FIRST OPERAND
001748 CD 50 17    0237*                  CALL	EXPR1		;GET SECOND OPERAND
00174B CD BC 20    0238*                  CALL	DOIT		;DO OPERATION
00174E 18 EE       0239*                  JR	EXPR0A		;CONTINUE
001750             0240*  ;
001750 CD 61 17    0241*  EXPR1:          CALL	EXPR2
001753 FE 80       0242*  EXPR1A:         CP	AND_
001755 C0          0243*                  RET	NZ
001756 CD AC 20    0244*                  CALL	SAVEev
001759 CD 61 17    0245*                  CALL	EXPR2
00175C CD BC 20    0246*                  CALL	DOIT
00175F 18 F2       0247*                  JR	EXPR1A
001761             0248*  ;
001761 CD D9 17    0249*  EXPR2:          CALL	EXPR3ev
001764 CD A3 20    0250*                  CALL	RELOPQ
001767 C0          0251*                  RET	NZ
001768 47          0252*                  LD	B,A
001769 FD 23       0253*                  INC	IY		;BUMP OVER OPERATOR
00176B CD 44 45    0254*                  CALL	NXT
00176E CD A3 20    0255*                  CALL	RELOPQ		;COMPOUND OPERATOR?
001771 20 07       0256*                  JR	NZ,EXPR2B
001773 FD 23       0257*                  INC	IY
001775 B8          0258*                  CP	B
001776 28 1C       0259*                  JR	Z,SHIFT		;SHIFT | ==
001778 80          0260*                  ADD	A,B
001779 47          0261*                  LD	B,A
00177A 78          0262*  EXPR2B:         LD	A,B
00177B 08          0263*                  EX	AF,AF'
00177C FA AC 17    0264*                  JP	M,EXPR2S
00177F 08          0265*                  EX	AF,AF'
001780 D6 04       0266*                  SUB	4
001782 FE 3A       0267*                  CP	'>'-4
001784 20 02       0268*                  JR	NZ,EXPR2C
001786 C6 02       0269*                  ADD	A,2
001788 E6 0F       0270*  EXPR2C:         AND	0FH
00178A CD B0 20    0271*  EXPR2D:         CALL	SAVE1
00178D CD D9 17    0272*                  CALL	EXPR3ev
001790 CD BC 20    0273*                  CALL	DOIT		;Must NOT be "JP DOIT"
001793 C9          0274*                  RET
001794             0275*  ;
001794 FE 3D       0276*  SHIFT:          CP	'='
001796 28 E2       0277*                  JR	Z,EXPR2B	;==
001798 CD 44 45    0278*                  CALL	NXT
00179B CD A3 20    0279*                  CALL	RELOPQ
00179E 20 07       0280*                  JR	NZ,SHIFT1
0017A0 B8          0281*                  CP	B
0017A1 C2 19 26    0282*                  JP	NZ,SYNTAX
0017A4 FD 23       0283*                  INC	IY
0017A6 04          0284*                  INC	B
0017A7 78          0285*  SHIFT1:         LD	A,B
0017A8 D6 12       0286*                  SUB	18
0017AA 18 DE       0287*                  JR	EXPR2D
0017AC             0288*  ;
0017AC 08          0289*  EXPR2S:         EX	AF,AF'
0017AD 3D          0290*                  DEC	A
0017AE E6 07       0291*                  AND	7
0017B0 CD 52 20    0292*                  CALL	PUSHS		;SAVE STRING ON STACK
0017B3 F5          0293*                  PUSH	AF		;SAVE OPERATOR
0017B4 CD D9 17    0294*                  CALL	EXPR3ev		;SECOND STRING
0017B7 08          0295*                  EX	AF,AF'
0017B8 F2 A7 18    0296*                  JP	P,MISMATev
0017BB F1          0297*                  POP	AF
0017BC 4B          0298*                  LD	C,E		;LENGTH OF STRING #2
0017BD D1          0299*                  POP	DE
0017BE 21 00 00    0300*                  LD	HL,0
0017C1 39          0301*                  ADD	HL,SP
0017C2 43          0302*                  LD	B,E		;LENGTH OF STRING #1
0017C3 D5          0303*                  PUSH	DE
0017C4 11 00 52    0304*                  LD	DE,ACCS
0017C7 EB          0305*                  EX	DE,HL
0017C8 CD F4 20    0306*                  CALL	DISPT2
0017CB D1          0307*                  POP	DE
0017CC EB          0308*                  EX	DE,HL
0017CD 26 00       0309*                  LD	H,0
0017CF 39          0310*                  ADD	HL,SP
0017D0 F9          0311*                  LD	SP,HL
0017D1 EB          0312*                  EX	DE,HL
0017D2 AF          0313*                  XOR	A		;NUMERIC MARKER
0017D3 4F          0314*                  LD	C,A		;INTEGER MARKER
0017D4 08          0315*                  EX	AF,AF'
0017D5 FD 7E 00    0316*                  LD	A,(IY)
0017D8 C9          0317*                  RET
0017D9             0318*  ;
0017D9 CD 27 18    0319*  EXPR3ev:          CALL	EXPR4
0017DC FE 2D       0320*  EXPR3A:         CP	'-'
0017DE 28 08       0321*                  JR	Z,EXPR3B
0017E0 FE 2B       0322*                  CP	'+'
0017E2 C0          0323*                  RET	NZ
0017E3 08          0324*                  EX	AF,AF'
0017E4 FA F3 17    0325*                  JP	M,EXPR3S
0017E7 08          0326*                  EX	AF,AF'
0017E8 CD AC 20    0327*  EXPR3B:         CALL	SAVEev
0017EB CD 27 18    0328*                  CALL	EXPR4
0017EE CD BC 20    0329*                  CALL	DOIT
0017F1 18 E9       0330*                  JR	EXPR3A
0017F3             0331*  ;
0017F3 08          0332*  EXPR3S:         EX	AF,AF'
0017F4 FD 23       0333*                  INC	IY		;BUMP PAST '+'
0017F6 CD 52 20    0334*                  CALL	PUSHS		;SAVE STRING ON STACK
0017F9 CD 27 18    0335*                  CALL	EXPR4		;SECOND STRING
0017FC 08          0336*                  EX	AF,AF'
0017FD F2 A7 18    0337*                  JP	P,MISMATev
001800 4B          0338*                  LD	C,E		;C=LENGTH
001801 D1          0339*                  POP	DE
001802 D5          0340*                  PUSH	DE
001803 21 00 52    0341*                  LD	HL,ACCS
001806 54          0342*                  LD	D,H
001807 79          0343*                  LD	A,C
001808 B7          0344*                  OR	A
001809 28 0E       0345*                  JR	Z,EXP3S3
00180B 45          0346*                  LD	B,L
00180C 6F          0347*                  LD	L,A		;SOURCE
00180D 83          0348*                  ADD	A,E
00180E 5F          0349*                  LD	E,A		;DESTINATION
00180F 3E 13       0350*                  LD	A,19
001811 38 6B       0351*                  JR	C,ERROR2ev	;"String too long"
001813 D5          0352*                  PUSH	DE
001814 1D          0353*                  DEC	E
001815 2D          0354*                  DEC	L
001816 ED B8       0355*                  LDDR			;COPY
001818 D1          0356*                  POP	DE
001819 D9          0357*  EXP3S3:         EXX
00181A C1          0358*                  POP	BC
00181B CD 70 20    0359*                  CALL	POPS		;RESTORE FROM STACK
00181E D9          0360*                  EXX
00181F F6 80       0361*                  OR	80H		;FLAG STRING
001821 08          0362*                  EX	AF,AF'
001822 FD 7E 00    0363*                  LD	A,(IY)
001825 18 B5       0364*                  JR	EXPR3A
001827             0365*  ;
001827 CD 4D 18    0366*  EXPR4:          CALL	EXPR5
00182A FE 2A       0367*  EXPR4A:         CP	'*'
00182C 28 0B       0368*                  JR	Z,EXPR4B
00182E FE 2F       0369*                  CP	'/'
001830 28 07       0370*                  JR	Z,EXPR4B
001832 FE 83       0371*                  CP	MOD_
001834 28 03       0372*                  JR	Z,EXPR4B
001836 FE 81       0373*                  CP	DIV_
001838 C0          0374*                  RET	NZ
001839 CD AC 20    0375*  EXPR4B:         CALL	SAVEev
00183C CD 4D 18    0376*                  CALL	EXPR5
00183F CD BC 20    0377*                  CALL	DOIT
001842 18 E6       0378*                  JR	EXPR4A
001844             0379*  ;
001844 7B          0380*  EXPR45:         LD	A,E
001845 FE 2B       0381*                  CP	'+'
001847 28 DE       0382*                  JR	Z,EXPR4
001849 FE 2D       0383*                  CP	'-'
00184B 28 DA       0384*                  JR	Z,EXPR4
00184D CD 09 19    0385*  EXPR5:          CALL	ITEM
001850 B7          0386*                  OR	A		;TEST TYPE
001851 08          0387*                  EX	AF,AF'		;SAVE TYPE
001852 CD 44 45    0388*  EXPR5A:         CALL	NXT
001855 FE 5E       0389*                  CP	'^'
001857 C0          0390*                  RET	NZ
001858 CD AC 20    0391*                  CALL	SAVEev
00185B CD 09 19    0392*                  CALL	ITEM
00185E B7          0393*                  OR	A
00185F 08          0394*                  EX	AF,AF'
001860 CD BC 20    0395*                  CALL	DOIT
001863 18 ED       0396*                  JR	EXPR5A
001865             0397*  ;
001865 CD 3B 17    0398*  EXPRN:          CALL	EXPR
001868 08          0399*                  EX	AF,AF'
001869 F0          0400*                  RET	P
00186A 18 3B       0401*                  JR	MISMATev
00186C             0402*  ;
00186C CD 3B 17    0403*  EXPRI:          CALL	EXPR
00186F 08          0404*                  EX	AF,AF'
001870 F2 50 1C    0405*                  JP	P,SFIX
001873 18 32       0406*                  JR	MISMATev
001875             0407*  ;
001875 CD 3B 17    0408*  EXPRS:          CALL	EXPR
001878 08          0409*                  EX	AF,AF'
001879 F8          0410*                  RET	M
00187A 18 2B       0411*                  JR	MISMATev
00187C             0412*  ;
00187C 3E 1C       0413*  BADHEX:         LD	A,28
00187E C3 7D 3F    0414*  ERROR2ev:         JP	ERROR_		;"Bad HEX or binary"
001881             0415*  ;
001881 D9          0416*  NEGATEev:         EXX
001882 7C          0417*                  LD	A,H
001883 2F          0418*                  CPL
001884 67          0419*                  LD	H,A
001885 7D          0420*                  LD	A,L
001886 2F          0421*                  CPL
001887 6F          0422*                  LD	L,A
001888 D9          0423*                  EXX
001889 7C          0424*                  LD	A,H
00188A 2F          0425*                  CPL
00188B 67          0426*                  LD	H,A
00188C 7D          0427*                  LD	A,L
00188D 2F          0428*                  CPL
00188E 6F          0429*                  LD	L,A
00188F D9          0430*  ADD1ev:           EXX
001890 23          0431*                  INC	HL
001891 7C          0432*                  LD	A,H
001892 B5          0433*                  OR	L
001893 D9          0434*                  EXX
001894 3E 00       0435*                  LD	A,0		;NUMERIC MARKER
001896 C0          0436*                  RET	NZ
001897 23          0437*                  INC	HL
001898 C9          0438*                  RET
001899             0439*  ;
001899 CD 09 19    0440*  ITEMI:          CALL	ITEM
00189C B7          0441*                  OR	A
00189D F2 50 1C    0442*                  JP	P,SFIX
0018A0 18 05       0443*                  JR	MISMATev
0018A2             0444*  ;
0018A2 CD 09 19    0445*  ITEMS:          CALL	ITEM
0018A5 B7          0446*                  OR	A
0018A6 F8          0447*                  RET	M
0018A7 3E 06       0448*  MISMATev:         LD	A,6
0018A9 18 D3       0449*                  JR	ERROR2ev		;"Type mismatch"
0018AB             0450*  ;
0018AB CD 3B 17    0451*  ITEM1:          CALL	EXPR		;BRACKETED EXPR
0018AE CD E7 20    0452*                  CALL	BRAKET
0018B1 08          0453*                  EX	AF,AF'
0018B2 C9          0454*                  RET
0018B3             0455*  ;
0018B3 CD 09 19    0456*  ITEMN:          CALL	ITEM
0018B6 B7          0457*                  OR	A
0018B7 F0          0458*                  RET	P
0018B8 18 ED       0459*                  JR	MISMATev
0018BA             0460*  ;
0018BA             0461*  ;HEX - Get hexadecimal constant.
0018BA             0462*  ;   Inputs: ASCII string at (IY)
0018BA             0463*  ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
0018BA             0464*  ;           IY updated (points to delimiter)
0018BA             0465*  ;
0018BA CD 31 20    0466*  HEXev:            CALL	ZERO
0018BD CD 90 20    0467*                  CALL	HEXDIG
0018C0 38 BA       0468*                  JR	C,BADHEX
0018C2 FD 23       0469*  HEX1:           INC	IY
0018C4 E6 0F       0470*                  AND	0FH
0018C6 06 04       0471*                  LD	B,4
0018C8 D9          0472*  HEX2:           EXX
0018C9 29          0473*                  ADD	HL,HL
0018CA D9          0474*                  EXX
0018CB ED 6A       0475*                  ADC	HL,HL
0018CD 10 F9       0476*                  DJNZ	HEX2
0018CF D9          0477*                  EXX
0018D0 B5          0478*                  OR	L
0018D1 6F          0479*                  LD	L,A
0018D2 D9          0480*                  EXX
0018D3 CD 90 20    0481*                  CALL	HEXDIG
0018D6 30 EA       0482*                  JR	NC,HEX1
0018D8 AF          0483*                  XOR	A
0018D9 C9          0484*                  RET
0018DA             0485*  ;
0018DA             0486*  ;BIN - Get binary constant.
0018DA             0487*  ;   Inputs: ASCII string at (IY)
0018DA             0488*  ;  Outputs: Integer result in H'L'HL, C=0, A=0.
0018DA             0489*  ;           IY updated (points to delimiter)
0018DA             0490*  ;
0018DA CD 31 20    0491*  BIN:            CALL	ZERO
0018DD CD 83 20    0492*                  CALL	BINDIG
0018E0 38 9A       0493*                  JR	C,BADHEX
0018E2 FD 23       0494*  BIN1:           INC	IY
0018E4 CB 1F       0495*                  RR	A
0018E6 D9          0496*                  EXX
0018E7 ED 6A       0497*                  ADC	HL,HL
0018E9 D9          0498*                  EXX
0018EA ED 6A       0499*                  ADC	HL,HL
0018EC CD 83 20    0500*                  CALL	BINDIG
0018EF 30 F1       0501*                  JR	NC,BIN1
0018F1 AF          0502*                  XOR	A
0018F2 C9          0503*                  RET
0018F3             0504*  ;
0018F3             0505*  ;MINUS - Unary minus.
0018F3             0506*  ;   Inputs: IY = text pointer
0018F3             0507*  ;  Outputs: Numeric result, same type as argument.
0018F3             0508*  ;           Result in H'L'HLC
0018F3             0509*  ;
0018F3 CD B3 18    0510*  MINUS:          CALL	ITEMN
0018F6 0D          0511*  MINUS0:         DEC	C
0018F7 0C          0512*                  INC	C
0018F8 28 87       0513*                  JR	Z,NEGATEev	;ZERO/INTEGER
0018FA 7C          0514*                  LD	A,H
0018FB EE 80       0515*                  XOR	80H		;CHANGE SIGN (FP)
0018FD 67          0516*                  LD	H,A
0018FE AF          0517*                  XOR	A		;NUMERIC MARKER
0018FF C9          0518*                  RET
001900             0519*  ;
001900 CD 0F 26    0520*  ADDROF:         CALL	VAR_
001903 E5          0521*                  PUSH	HL
001904 D9          0522*                  EXX
001905 E1          0523*                  POP	HL
001906 C3 89 1B    0524*                  JP	COUNT1
001909             0525*  ;
001909             0526*  ;ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
001909             0527*  ;Item type is returned in A: Bit 7=0 numeric.
001909             0528*  ; Bit 7=1 string.
001909             0529*  ;Numeric item returned in HLH'L'C.
001909             0530*  ;String item returned in string accumulator,
001909             0531*  ; DE addresses byte after last (E=length).
001909             0532*  ;
001909 CD BF 32    0533*  ITEM:           CALL	CHECK
00190C CD 44 45    0534*                  CALL	NXT
00190F FD 23       0535*                  INC	IY
001911 FE 8D       0536*                  CP	FUNTOK
001913 38 08       0537*                  JR	C,ITEM0
001915 FE C7       0538*                  CP	TCMD
001917 DA FA 20    0539*                  JP	C,DISPATev	;FUNCTIONS
00191A C3 69 1A    0540*                  JP	EXTRASev		;DIM, END, MODE, REPORT$, WIDTH
00191D             0541*  ;
00191D FE 3A       0542*  ITEM0:          CP	':'
00191F 30 25       0543*                  JR	NC,ITEM2	;VARIABLES
001921 FE 30       0544*                  CP	'0'
001923 30 7B       0545*                  JR	NC,CONev		;NUMERIC CONSTANT
001925 FE 28       0546*                  CP	'('
001927 28 82       0547*                  JR	Z,ITEM1		;EXPRESSION
001929 FE 2D       0548*                  CP	'-'
00192B 28 C6       0549*                  JR	Z,MINUS		;UNARY MINUS
00192D FE 2B       0550*                  CP	'+'
00192F 28 82       0551*                  JR	Z,ITEMN		;UNARY PLUS
001931 FE 2E       0552*                  CP	'.'
001933 28 6B       0553*                  JR	Z,CONev		;NUMERIC CONSTANT
001935 FE 26       0554*                  CP	'&'
001937 28 81       0555*                  JR	Z,HEXev		;HEX CONSTANT
001939 FE 25       0556*                  CP	'%'
00193B 28 9D       0557*                  JR	Z,BIN		;BINARY CONSTANT
00193D FE 22       0558*                  CP	'"'
00193F 28 72       0559*                  JR	Z,CONS		;STRING CONSTANT
001941 FE 0A       0560*                  CP	TTINT
001943 CA 09 1B    0561*                  JP	Z,TINTev		;TINT FUNCTION
001946 FE 83       0562*  ITEM2:          CP	TMOD
001948 CA 86 1D    0563*                  JP	Z,MODFUN	;MOD
00194B FE 5E       0564*                  CP	'^'
00194D 28 B1       0565*                  JR	Z,ADDROF	;^ OPERATOR
00194F FD 2B       0566*                  DEC	IY
001951 CD 1C 42    0567*                  CALL	GETVAR		;VARIABLE
001954 20 2F       0568*                  JR	NZ,NOSUCHev
001956 CB 77       0569*                  BIT	6,A
001958 20 7E       0570*                  JR	NZ,ARRAYev
00195A B7          0571*                  OR	A
00195B FA 47 1A    0572*                  JP	M,LOADS		;STRING VARIABLE
00195E CB 57       0573*  LOADN:          BIT	2,A
001960 0E 00       0574*                  LD	C,0
001962 28 16       0575*                  JR	Z,LOAD1		;BYTE VARIABLE
001964 CB 47       0576*                  BIT	0,A
001966 28 03       0577*                  JR	Z,LOAD4		;INTEGER VARIABLE
001968 DD 4E 04    0578*  LOAD5:          LD	C,(IX+4)
00196B D9          0579*  LOAD4:          EXX
00196C DD 6E 00    0580*                  LD	L,(IX+0)
00196F DD 66 01    0581*                  LD	H,(IX+1)
001972 D9          0582*                  EXX
001973 DD 6E 02    0583*                  LD	L,(IX+2)
001976 DD 66 03    0584*                  LD	H,(IX+3)
001979 C9          0585*                  RET
00197A             0586*  ;
00197A 21 00 00    0587*  LOAD1:          LD	HL,0
00197D D9          0588*                  EXX
00197E 26 00       0589*                  LD	H,0
001980 DD 6E 00    0590*                  LD	L,(IX+0)
001983 D9          0591*                  EXX
001984 C9          0592*                  RET
001985             0593*  ;
001985 DA 19 26    0594*  NOSUCHev:         JP	C,SYNTAX
001988 3A FE 54    0595*                  LD	A,(LISTON)
00198B CB 6F       0596*                  BIT	5,A
00198D 3E 1A       0597*                  LD	A,26
00198F 20 36       0598*                  JR	NZ,ERROR0ev	;"No such variable"
001991 FD 23       0599*  NOS1:           INC	IY
001993 CD 28 44    0600*                  CALL	RANGE
001996 30 F9       0601*                  JR	NC,NOS1
001998 DD 21 40 54 0602*                  LD	IX,PC
00199C AF          0603*                  XOR	A
00199D 4F          0604*                  LD	C,A
00199E 18 CB       0605*                  JR	LOAD4
0019A0             0606*  ;
0019A0             0607*  ;CON - Get unsigned numeric constant from ASCII string.
0019A0             0608*  ;   Inputs: ASCII string at (IY-1)
0019A0             0609*  ;  Outputs: Variable-type result in HLH'L'C
0019A0             0610*  ;           IY updated (points to delimiter)
0019A0             0611*  ;           A7 = 0 (numeric marker)
0019A0             0612*  ;
0019A0 FD 2B       0613*  CONev:            DEC	IY
0019A2 FD E5       0614*                  PUSH	IY
0019A4 DD E1       0615*                  POP	IX
0019A6 3E 24       0616*                  LD	A,36
0019A8 CD 4E 45    0617*                  CALL	FPP
0019AB 38 1A       0618*                  JR	C,ERROR0ev
0019AD DD E5       0619*                  PUSH	IX
0019AF FD E1       0620*                  POP	IY
0019B1 AF          0621*                  XOR	A
0019B2 C9          0622*                  RET
0019B3             0623*  ;
0019B3             0624*  ;CONS - Get string constant from ASCII string.
0019B3             0625*  ;   Inputs: ASCII string at (IY)
0019B3             0626*  ;  Outputs: Result in string accumulator.
0019B3             0627*  ;           D = MS byte of ACCS, E = string length
0019B3             0628*  ;           A7 = 1 (string marker)
0019B3             0629*  ;           IY updated
0019B3             0630*  ;
0019B3 11 00 52    0631*  CONS:           LD	DE,ACCS
0019B6 FD 7E 00    0632*  CONS3:          LD	A,(IY)
0019B9 FD 23       0633*                  INC	IY
0019BB FE 22       0634*                  CP	'"'
0019BD 28 0B       0635*                  JR	Z,CONS2
0019BF 12          0636*  CONS1:          LD	(DE),A
0019C0 1C          0637*                  INC	E
0019C1 FE 0D       0638*                  CP	CR
0019C3 20 F1       0639*                  JR	NZ,CONS3
0019C5 3E 09       0640*                  LD	A,9
0019C7 C3 7D 3F    0641*  ERROR0ev:         JP	ERROR_		;"Missing """
0019CA             0642*  ;
0019CA FD 7E 00    0643*  CONS2:          LD	A,(IY)
0019CD FE 22       0644*                  CP	'"'
0019CF FD 23       0645*                  INC	IY
0019D1 28 EC       0646*                  JR	Z,CONS1
0019D3 FD 2B       0647*                  DEC	IY
0019D5 3E 80       0648*                  LD	A,80H		;STRING MARKER
0019D7 C9          0649*                  RET
0019D8             0650*  ;
0019D8 3E 0E       0651*  ARRAYev:          LD	A,14		;'Bad use of array'
0019DA C3 7D 3F    0652*                  JP	ERROR_
0019DD             0653*  ;
0019DD             0654*  ; ARRLEN - Get start address and number of elements of an array
0019DD             0655*  ;   Inputs: HL addresses array descriptor
0019DD             0656*  ;  Outputs: HL = address of first element
0019DD             0657*  ;           DE = total number of elements
0019DD             0658*  ;           A = 0
0019DD             0659*  ; Destroys: A,B,C,D,E,H,L,flags
0019DD             0660*  ;
0019DD 7E          0661*  ARRLEN:         LD	A,(HL)		;Number of dimensions
0019DE 23          0662*                  INC	HL
0019DF B7          0663*                  OR	A
0019E0 28 F6       0664*                  JR	Z,ARRAYev
0019E2 11 01 00    0665*                  LD	DE,1
0019E5 4E          0666*  ARLOOP:         LD	C,(HL)
0019E6 23          0667*                  INC	HL
0019E7 46          0668*                  LD	B,(HL)		;BC = size of this dimension
0019E8 23          0669*                  INC	HL
0019E9 EB          0670*                  EX	DE,HL
0019EA F5          0671*                  PUSH	AF
0019EB D5          0672*                  PUSH	DE
0019EC CD F6 36    0673*                  CALL	MUL16		;HL=HL*BC
0019EF D1          0674*                  POP	DE
0019F0 F1          0675*                  POP	AF
0019F1 EB          0676*                  EX	DE,HL
0019F2 3D          0677*                  DEC	A
0019F3 20 F0       0678*                  JR	NZ,ARLOOP
0019F5 C9          0679*                  RET
0019F6             0680*  ;
0019F6 CD 44 45    0681*  GETARR:         CALL	NXT
0019F9 CD 1C 42    0682*                  CALL	GETVAR
0019FC 20 87       0683*                  JR	NZ,NOSUCHev
0019FE CB 77       0684*                  BIT	6,A
001A00 37          0685*                  SCF
001A01 28 82       0686*                  JR	Z,NOSUCHev
001A03 E6 8F       0687*                  AND	8FH
001A05 47          0688*                  LD	B,A		;Type + size
001A06 7E          0689*  GETAR1:         LD	A,(HL)
001A07 23          0690*                  INC	HL
001A08 66          0691*                  LD	H,(HL)
001A09 6F          0692*                  LD	L,A
001A0A E6 FE       0693*                  AND	0FEH
001A0C B4          0694*                  OR	H
001A0D 28 C9       0695*                  JR	Z,ARRAYev		;Bad use of array
001A0F C9          0696*                  RET
001A10             0697*  ;
001A10 CD 44 45    0698*  GETARB:         CALL	NXT
001A13 FE 28       0699*                  CP	'('
001A15 20 DF       0700*                  JR	NZ,GETARR
001A17 FD 23       0701*                  INC	IY
001A19 CD F6 19    0702*                  CALL	GETARR
001A1C CD E7 20    0703*                  CALL	BRAKET
001A1F C9          0704*                  RET
001A20             0705*  ;
001A20 CB 57       0706*  DLOADN:         BIT	2,A
001A22 06 00       0707*                  LD	B,0
001A24 28 16       0708*                  JR	Z,DLOAD1	;BYTE VARIABLE
001A26 CB 47       0709*                  BIT	0,A
001A28 28 03       0710*                  JR	Z,DLOAD4	;INTEGER VARIABLE
001A2A DD 46 04    0711*  DLOAD5:         LD	B,(IX+4)
001A2D D9          0712*  DLOAD4:         EXX
001A2E DD 5E 00    0713*                  LD	E,(IX+0)
001A31 DD 56 01    0714*                  LD	D,(IX+1)
001A34 D9          0715*                  EXX
001A35 DD 5E 02    0716*                  LD	E,(IX+2)
001A38 DD 56 03    0717*                  LD	D,(IX+3)
001A3B C9          0718*                  RET
001A3C             0719*  ;
001A3C 11 00 00    0720*  DLOAD1:         LD	DE,0
001A3F D9          0721*                  EXX
001A40 16 00       0722*                  LD	D,0
001A42 DD 5E 00    0723*                  LD	E,(IX+0)
001A45 D9          0724*                  EXX
001A46 C9          0725*                  RET
001A47             0726*  ;
001A47 11 00 52    0727*  LOADS:          LD	DE,ACCS
001A4A 1F          0728*                  RRA
001A4B 30 10       0729*                  JR	NC,LOADS2	;FIXED STRING
001A4D CD 6B 19    0730*                  CALL	LOAD4
001A50 D9          0731*                  EXX
001A51 7D          0732*                  LD	A,L
001A52 D9          0733*                  EXX
001A53 B7          0734*                  OR	A
001A54 4F          0735*                  LD	C,A
001A55 3E 80       0736*                  LD	A,80H		;STRING MARKER
001A57 C8          0737*                  RET	Z
001A58 06 00       0738*                  LD	B,0
001A5A ED B0       0739*                  LDIR
001A5C C9          0740*                  RET
001A5D             0741*  ;
001A5D 7E          0742*  LOADS2:         LD	A,(HL)
001A5E 12          0743*                  LD	(DE),A
001A5F 23          0744*                  INC	HL
001A60 FE 0D       0745*                  CP	CR
001A62 3E 80       0746*  REPDUN:         LD	A,80H		;STRING MARKER
001A64 C8          0747*                  RET	Z
001A65 1C          0748*                  INC	E
001A66 20 F5       0749*                  JR	NZ,LOADS2
001A68 C9          0750*                  RET			;RETURN NULL STRING
001A69             0751*  ;
001A69             0752*  ; Version 5 extensions:
001A69             0753*  ;
001A69 FE EB       0754*  EXTRASev:         CP	TMODE
001A6B CA CA 00    0755*                  JP	Z,MODEFN	;MODE
001A6E FE FE       0756*                  CP	TWIDTH
001A70 CA D4 00    0757*                  JP	Z,WIDFN		;WIDTH
001A73 FE F6       0758*                  CP	TREPORT
001A75 28 11       0759*                  JR	Z,REPORS	;REPORT$
001A77 FE E0       0760*                  CP	TEND
001A79 28 07       0761*                  JR	Z,ENDFUN	;END
001A7B FE DE       0762*                  CP	TDIM
001A7D 28 44       0763*                  JR	Z,DIMFUN	;DIM
001A7F C3 19 26    0764*  SYNERR:         JP	SYNTAX		; 'Syntax error'
001A82             0765*  ;
001A82             0766*  ; END (function)
001A82             0767*  ;
001A82 2A E0 54    0768*  ENDFUN:         LD	HL,(FREE)
001A85 C3 89 1B    0769*                  JP	COUNT1
001A88             0770*  ;
001A88             0771*  ; REPORT$
001A88             0772*  ;
001A88 FD 7E 00    0773*  REPORS:         LD	A,(IY)
001A8B FE 24       0774*                  CP	'$'
001A8D 20 F0       0775*                  JR	NZ,SYNERR
001A8F FD 23       0776*                  INC	IY
001A91 2A EE 54    0777*                  LD	HL,(ERRTXT)
001A94 11 00 52    0778*                  LD	DE,ACCS
001A97 7E          0779*  REPCPY:         LD	A,(HL)
001A98 B7          0780*                  OR	A
001A99 28 C7       0781*                  JR	Z,REPDUN
001A9B ED A0       0782*                  LDI
001A9D FE A0       0783*                  CP	160
001A9F EA 97 1A    0784*                  JP	PE,REPCPY
001AA2 FE 0A       0785*                  CP	LF
001AA4 28 F1       0786*                  JR	Z,REPCPY
001AA6 1D          0787*                  DEC	E
001AA7 E5          0788*                  PUSH	HL
001AA8 21 BD 38    0789*                  LD	HL,KEYWDS
001AAB 01 5B 03    0790*                  LD	BC,KEYWDL
001AAE ED B1       0791*                  CPIR
001AB0 06 A0       0792*                  LD	B,160
001AB2 FE 91       0793*                  CP	145
001AB4 EA B8 1A    0794*                  JP	PE,REPTOK
001AB7 04          0795*                  INC	B
001AB8 7E          0796*  REPTOK:         LD	A,(HL)
001AB9 ED A0       0797*                  LDI
001ABB B8          0798*                  CP	B
001ABC EA B8 1A    0799*                  JP	PE,REPTOK
001ABF E1          0800*                  POP	HL
001AC0 1D          0801*                  DEC	E
001AC1 18 D4       0802*                  JR	REPCPY
001AC3             0803*  ;
001AC3             0804*  ; DIM(array()[,sub])
001AC3             0805*  ;
001AC3 CD 44 45    0806*  DIMFUN:         CALL	NXT
001AC6 FE 28       0807*                  CP	'('
001AC8 20 09       0808*                  JR	NZ,DIMF0
001ACA FD 23       0809*                  INC	IY
001ACC CD D3 1A    0810*                  CALL	DIMF0
001ACF CD E7 20    0811*                  CALL	BRAKET
001AD2 C9          0812*                  RET
001AD3             0813*  ;
001AD3 CD F6 19    0814*  DIMF0:          CALL	GETARR
001AD6 E5          0815*                  PUSH	HL
001AD7 CD 44 45    0816*                  CALL	NXT
001ADA 1E 00       0817*                  LD	E,0
001ADC FE 2C       0818*                  CP	','
001ADE 20 0B       0819*                  JR	NZ,DIMF1
001AE0 FD 23       0820*                  INC	IY
001AE2 CD 6C 18    0821*                  CALL	EXPRI
001AE5 D9          0822*                  EXX
001AE6 EB          0823*                  EX	DE,HL
001AE7 1C          0824*                  INC	E
001AE8 1D          0825*                  DEC	E
001AE9 28 19       0826*                  JR	Z,BADSUB
001AEB E1          0827*  DIMF1:          POP	HL
001AEC 7E          0828*                  LD	A,(HL)
001AED 23          0829*                  INC	HL
001AEE BB          0830*                  CP	E
001AEF 38 13       0831*                  JR	C,BADSUB
001AF1 1D          0832*                  DEC	E
001AF2 FA FF 1A    0833*                  JP	M,DIMF3
001AF5 19          0834*                  ADD	HL,DE
001AF6 19          0835*                  ADD	HL,DE
001AF7 7E          0836*                  LD	A,(HL)
001AF8 23          0837*                  INC	HL
001AF9 66          0838*                  LD	H,(HL)
001AFA 6F          0839*                  LD	L,A
001AFB 2B          0840*                  DEC	HL
001AFC C3 89 1B    0841*  DIMF2:          JP	COUNT1
001AFF 6F          0842*  DIMF3:          LD	L,A
001B00 26 00       0843*                  LD	H,0
001B02 18 F8       0844*                  JR	DIMF2
001B04             0845*  ;
001B04 3E 0F       0846*  BADSUB:         LD	A,15
001B06 C3 7D 3F    0847*                  JP	ERROR_			;"Bad subscript"
001B09             0848*  ;
001B09             0849*  ;VARIABLE-TYPE FUNCTIONS:
001B09             0850*  ;
001B09             0851*  ;Result returned in HLH'L'C (floating point)
001B09             0852*  ;Result returned in HLH'L' (C=0) (integer)
001B09             0853*  ;Result returned in string accumulator & DE (string)
001B09             0854*  ;All registers destroyed.
001B09             0855*  ;IY (text pointer) updated.
001B09             0856*  ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
001B09             0857*  ;
001B09             0858*  ;
001B09             0859*  ;POS - horizontal cursor position.
001B09             0860*  ;VPOS - vertical cursor position.
001B09             0861*  ;EOF - return status of file.
001B09             0862*  ;BGET - read byte from file.
001B09             0863*  ;INKEY - as GET but wait only n centiseconds.
001B09             0864*  ;GET - wait for keypress and return ASCII value.
001B09             0865*  ;GET(n) - input from Z80 port n.
001B09             0866*  ;ASC - ASCII value of string.
001B09             0867*  ;LEN - length of string.
001B09             0868*  ;LOMEM - location of dynamic variables.
001B09             0869*  ;HIMEM - top of available RAM.
001B09             0870*  ;PAGE - start of current text page.
001B09             0871*  ;TOP - address of first free byte after program.
001B09             0872*  ;ERL - line number where last error occurred.
001B09             0873*  ;ERR - number of last error.
001B09             0874*  ;COUNT - number of printing characters since CR.
001B09             0875*  ;Results are integer numeric.
001B09             0876*  ;
001B09 CD E8 03    0877*  TINTev:           CALL	TINTFN
001B0C 18 7B       0878*                  JR	COUNT1
001B0E CD 80 00    0879*  POS:            CALL	GETCSR
001B11 EB          0880*                  EX	DE,HL
001B12 18 75       0881*                  JR	COUNT1
001B14 CD 80 00    0882*  VPOS:           CALL	GETCSR
001B17 18 70       0883*                  JR	COUNT1
001B19 CD 0A 37    0884*  EOF:            CALL	CHANEL
001B1C CD 89 12    0885*                  CALL	OSSTAT
001B1F CA F6 1B    0886*                  JP	Z,TRUEev
001B22 C3 31 20    0887*                  JP	ZERO
001B25 CD 0A 37    0888*  BGET:           CALL	CHANEL		;CHANNEL NUMBER
001B28 CD 78 12    0889*                  CALL	OSBGET
001B2B 6F          0890*                  LD	L,A
001B2C 18 59       0891*                  JR	COUNT0
001B2E CD C7 1E    0892*  INKEY:          CALL	INKEYS
001B31 18 19       0893*                  JR	ASC0
001B33 CD 44 45    0894*  GET:            CALL	NXT
001B36 FE 28       0895*                  CP	'('
001B38 20 0A       0896*                  JR	NZ,GET0
001B3A CD 99 18    0897*                  CALL	ITEMI		;PORT ADDRESS
001B3D D9          0898*                  EXX
001B3E 44          0899*                  LD	B,H
001B3F 4D          0900*                  LD	C,L
001B40 ED 68       0901*                  IN	L,(C)		;INPUT FROM PORT BC
001B42 18 43       0902*                  JR	COUNT0
001B44 CD 66 1E    0903*  GET0:           CALL	GETS
001B47 18 08       0904*                  JR	ASC1
001B49 CD A2 18    0905*  ASC:            CALL	ITEMS
001B4C AF          0906*  ASC0:           XOR	A
001B4D BB          0907*                  CP	E
001B4E CA F6 1B    0908*                  JP	Z,TRUEev		;NULL STRING
001B51 2A 00 52    0909*  ASC1:           LD	HL,(ACCS)
001B54 18 31       0910*                  JR	COUNT0
001B56 CD A2 18    0911*  LEN:            CALL	ITEMS
001B59 EB          0912*                  EX	DE,HL
001B5A 18 2B       0913*                  JR	COUNT0
001B5C 2A DE 54    0914*  LOMEMVev:         LD	HL,(LOMEM)
001B5F 18 28       0915*                  JR	COUNT1
001B61 2A E2 54    0916*  HIMEMVev:         LD	HL,(HIMEM)
001B64 18 23       0917*                  JR	COUNT1
001B66 2A DC 54    0918*  PAGEVev:          LD	HL,(PAGE_)
001B69 18 1E       0919*                  JR	COUNT1
001B6B FD 7E 00    0920*  TOPV:           LD	A,(IY)
001B6E FD 23       0921*                  INC	IY		;SKIP "P"
001B70 FE 50       0922*                  CP	'P'
001B72 C2 19 26    0923*                  JP	NZ,SYNTAX	;"Syntax Error"
001B75 CD 5E 40    0924*                  CALL	GETTOP
001B78 18 0F       0925*                  JR	COUNT1
001B7A 2A F2 54    0926*  ERLV:           LD	HL,(ERL)
001B7D 18 0A       0927*                  JR	COUNT1
001B7F 2A FD 54    0928*  ERRV:           LD	HL,(ERR)
001B82 18 03       0929*                  JR	COUNT0
001B84 2A FB 54    0930*  COUNTV:         LD	HL,(COUNT)
001B87 26 00       0931*  COUNT0:         LD	H,0
001B89 D9          0932*  COUNT1:         EXX
001B8A AF          0933*                  XOR	A
001B8B 4F          0934*                  LD	C,A		;INTEGER MARKER
001B8C 67          0935*                  LD	H,A
001B8D 6F          0936*                  LD	L,A
001B8E C9          0937*                  RET
001B8F             0938*  ;
001B8F             0939*  ;OPENIN - Open a file for reading.
001B8F             0940*  ;OPENOUT - Open a file for writing.
001B8F             0941*  ;OPENUP - Open a file for reading or writing.
001B8F             0942*  ;Result is integer channel number (0 if error)
001B8F             0943*  ;
001B8F AF          0944*  OPENOT:         XOR	A
001B90 21          0945*                  DB	21H		;SKIP NEXT 2 BYTES
001B91 3E 02       0946*  OPENUP:         LD	A,2
001B93 21          0947*                  DB	21H		;SKIP NEXT 2 BYTES
001B94 3E 01       0948*  OPENIN:         LD	A,1
001B96 F5          0949*                  PUSH	AF		;SAVE OPEN TYPE
001B97 CD A2 18    0950*                  CALL	ITEMS		;FILENAME
001B9A 3E 0D       0951*                  LD	A,CR
001B9C 12          0952*                  LD	(DE),A
001B9D F1          0953*                  POP	AF		;RESTORE OPEN TYPE
001B9E C6 FF       0954*                  ADD	A,-1		;AFFECT FLAGS
001BA0 21 00 52    0955*                  LD	HL,ACCS
001BA3 CD 61 12    0956*                  CALL	OSOPEN
001BA6 6F          0957*                  LD	L,A
001BA7 18 DE       0958*                  JR	COUNT0
001BA9             0959*  ;
001BA9             0960*  ;EXT - Return length of file.
001BA9             0961*  ;PTR - Return current file pointer.
001BA9             0962*  ;Results are integer numeric.
001BA9             0963*  ;
001BA9 CD 0A 37    0964*  EXTev:            CALL	CHANEL
001BAC CD CA 12    0965*                  CALL	GETEXT
001BAF 18 12       0966*                  JR	TIME0
001BB1             0967*  ;
001BB1 CD 0A 37    0968*  PTRev:            CALL	CHANEL
001BB4 CD 93 12    0969*                  CALL	GETPTR
001BB7 18 0A       0970*                  JR	TIME0
001BB9             0971*  ;
001BB9             0972*  ;TIME - Return current value of elapsed time.
001BB9             0973*  ;Result is integer numeric.
001BB9             0974*  ;
001BB9 FD 7E 00    0975*  TIMEVev:          LD	A,(IY)
001BBC FE 24       0976*                  CP	'$'
001BBE 28 09       0977*                  JR	Z,TIMEVSev
001BC0 CD 00 00    0978*                  CALL	GETIME
001BC3 D5          0979*  TIME0:          PUSH	DE
001BC4 D9          0980*                  EXX
001BC5 E1          0981*                  POP	HL
001BC6 AF          0982*                  XOR	A
001BC7 4F          0983*                  LD	C,A
001BC8 C9          0984*                  RET
001BC9             0985*  ;
001BC9             0986*  ;TIME$ - Return date/time string.
001BC9             0987*  ;Result is string
001BC9             0988*  ;
001BC9 FD 23       0989*  TIMEVSev:         INC	IY		;SKIP $
001BCB CD 15 00    0990*                  CALL	GETIMS
001BCE 3E 80       0991*                  LD	A,80H		;MARK STRING
001BD0 C9          0992*                  RET
001BD1             0993*  ;
001BD1             0994*  ;String comparison:
001BD1             0995*  ;
001BD1 CD 2E 20    0996*  SLT:            CALL	SCP
001BD4 D0          0997*                  RET	NC
001BD5 18 1F       0998*                  JR	TRUEev
001BD7             0999*  ;
001BD7 CD 2E 20    1000*  SGT:            CALL	SCP
001BDA C8          1001*                  RET	Z
001BDB D8          1002*                  RET	C
001BDC 18 18       1003*                  JR	TRUEev
001BDE             1004*  ;
001BDE CD 2E 20    1005*  SGE:            CALL	SCP
001BE1 D8          1006*                  RET	C
001BE2 18 12       1007*                  JR	TRUEev
001BE4             1008*  ;
001BE4 CD 2E 20    1009*  SLE:            CALL	SCP
001BE7 28 0D       1010*                  JR	Z,TRUEev
001BE9 D0          1011*                  RET	NC
001BEA 18 0A       1012*                  JR	TRUEev
001BEC             1013*  ;
001BEC CD 2E 20    1014*  SNE:            CALL	SCP
001BEF C8          1015*                  RET	Z
001BF0 18 04       1016*                  JR	TRUEev
001BF2             1017*  ;
001BF2 CD 2E 20    1018*  SEQ:            CALL	SCP
001BF5 C0          1019*                  RET	NZ
001BF6 3E FF       1020*  TRUEev:           LD	A,-1
001BF8 D9          1021*                  EXX
001BF9 67          1022*                  LD	H,A
001BFA 6F          1023*                  LD	L,A
001BFB D9          1024*                  EXX
001BFC 67          1025*                  LD	H,A
001BFD 6F          1026*                  LD	L,A
001BFE 3C          1027*                  INC	A
001BFF 4F          1028*                  LD	C,A
001C00 C9          1029*                  RET
001C01             1030*  ;
001C01             1031*  ;PI - Return PI (3.141592654)
001C01             1032*  ;Result is floating-point numeric.
001C01             1033*  ;
001C01 3E 23       1034*  PIev:             LD	A,35
001C03 18 43       1035*                  JR	FPP1
001C05             1036*  ;
001C05             1037*  ;ABS - Absolute value
001C05             1038*  ;Result is numeric, variable type.
001C05             1039*  ;
001C05 3E 10       1040*  ABSev:            LD	A,16
001C07 18 3A       1041*                  JR	FPPN
001C09             1042*  ;
001C09             1043*  ;NOT - Complement integer.
001C09             1044*  ;Result is integer numeric.
001C09             1045*  ;
001C09 3E 1A       1046*  CPL_ev:           LD	A,26
001C0B 18 36       1047*                  JR	FPPN
001C0D             1048*  ;
001C0D             1049*  ;DEG - Convert radians to degrees
001C0D             1050*  ;Result is floating-point numeric.
001C0D             1051*  ;
001C0D 3E 15       1052*  DEGev:            LD	A,21
001C0F 18 32       1053*                  JR	FPPN
001C11             1054*  ;
001C11             1055*  ;RAD - Convert degrees to radians
001C11             1056*  ;Result is floating-point numeric.
001C11             1057*  ;
001C11 3E 1B       1058*  RADev:            LD	A,27
001C13 18 2E       1059*                  JR	FPPN
001C15             1060*  ;
001C15             1061*  ;SGN - Return -1, 0 or +1
001C15             1062*  ;Result is integer numeric.
001C15             1063*  ;
001C15 3E 1C       1064*  SGNev:            LD	A,28
001C17 18 2A       1065*                  JR	FPPN
001C19             1066*  ;
001C19             1067*  ;INT - Floor function
001C19             1068*  ;Result is integer numeric.
001C19             1069*  ;
001C19 3E 17       1070*  INT_ev:           LD	A,23
001C1B 18 26       1071*                  JR	FPPN
001C1D             1072*  ;
001C1D             1073*  ;SQR - square root
001C1D             1074*  ;Result is floating-point numeric.
001C1D             1075*  ;
001C1D 3E 1E       1076*  SQRev:            LD	A,30
001C1F 18 22       1077*                  JR	FPPN
001C21             1078*  ;
001C21             1079*  ;TAN - Tangent function
001C21             1080*  ;Result is floating-point numeric.
001C21             1081*  ;
001C21 3E 1F       1082*  TANev:            LD	A,31
001C23 18 1E       1083*                  JR	FPPN
001C25             1084*  ;
001C25             1085*  ;COS - Cosine function
001C25             1086*  ;Result is floating-point numeric.
001C25             1087*  ;
001C25 3E 14       1088*  COSev:            LD	A,20
001C27 18 1A       1089*                  JR	FPPN
001C29             1090*  ;
001C29             1091*  ;SIN - Sine function
001C29             1092*  ;Result is floating-point numeric.
001C29             1093*  ;
001C29 3E 1D       1094*  SINev:            LD	A,29
001C2B 18 16       1095*                  JR	FPPN
001C2D             1096*  ;
001C2D             1097*  ;EXP - Exponential function
001C2D             1098*  ;Result is floating-point numeric.
001C2D             1099*  ;
001C2D 3E 16       1100*  EXPev:            LD	A,22
001C2F 18 12       1101*                  JR	FPPN
001C31             1102*  ;
001C31             1103*  ;LN - Natural log.
001C31             1104*  ;Result is floating-point numeric.
001C31             1105*  ;
001C31 3E 18       1106*  LNev:             LD	A,24
001C33 18 0E       1107*                  JR	FPPN
001C35             1108*  ;
001C35             1109*  ;LOG - base-10 logarithm.
001C35             1110*  ;Result is floating-point numeric.
001C35             1111*  ;
001C35 3E 19       1112*  LOGev:            LD	A,25
001C37 18 0A       1113*                  JR	FPPN
001C39             1114*  ;
001C39             1115*  ;ASN - Arc-sine
001C39             1116*  ;Result is floating-point numeric.
001C39             1117*  ;
001C39 3E 12       1118*  ASNev:            LD	A,18
001C3B 18 06       1119*                  JR	FPPN
001C3D             1120*  ;
001C3D             1121*  ;ATN - arc-tangent
001C3D             1122*  ;Result is floating-point numeric.
001C3D             1123*  ;
001C3D 3E 13       1124*  ATNev:            LD	A,19
001C3F 18 02       1125*                  JR	FPPN
001C41             1126*  ;
001C41             1127*  ;ACS - arc-cosine
001C41             1128*  ;Result is floating point numeric.
001C41             1129*  ;
001C41 3E 11       1130*  ACSev:            LD	A,17
001C43 F5          1131*  FPPN:           PUSH	AF
001C44 CD B3 18    1132*                  CALL	ITEMN
001C47 F1          1133*                  POP	AF
001C48 CD 4E 45    1134*  FPP1:           CALL	FPP
001C4B DA 7D 3F    1135*                  JP	C,ERROR_
001C4E AF          1136*                  XOR	A
001C4F C9          1137*                  RET
001C50             1138*  ;
001C50             1139*  ;SFIX - Convert to fixed-point notation
001C50             1140*  ;
001C50 3E 26       1141*  SFIX:           LD	A,38
001C52 18 F4       1142*                  JR	FPP1
001C54             1143*  ;
001C54             1144*  ;SFLOAT - Convert to floating-point notation
001C54             1145*  ;
001C54 3E 27       1146*  SFLOATev:         LD	A,39
001C56 18 F0       1147*                  JR	FPP1
001C58             1148*  ;
001C58             1149*  ;VAL - Return numeric value of string.
001C58             1150*  ;Result is variable type numeric.
001C58             1151*  ;
001C58 CD A2 18    1152*  VALev:            CALL	ITEMS
001C5B AF          1153*  VAL0:           XOR	A
001C5C 12          1154*                  LD	(DE),A
001C5D DD 21 00 52 1155*                  LD	IX,ACCS
001C61 3E 24       1156*                  LD	A,36
001C63 18 E3       1157*                  JR	FPP1
001C65             1158*  ;
001C65             1159*  ;EVAL - Pass string to expression evaluator.
001C65             1160*  ;Result is variable type (numeric or string).
001C65             1161*  ;
001C65 CD A2 18    1162*  EVAL_:          CALL	ITEMS
001C68 3E 0D       1163*                  LD	A,CR
001C6A 12          1164*                  LD	(DE),A
001C6B FD E5       1165*                  PUSH	IY
001C6D 11 00 52    1166*                  LD	DE,ACCS
001C70 FD 21 00 52 1167*                  LD	IY,ACCS
001C74 0E 00       1168*                  LD	C,0
001C76 CD 51 44    1169*                  CALL	LEXAN2		;TOKENISE
001C79 12          1170*                  LD	(DE),A
001C7A 13          1171*                  INC	DE
001C7B AF          1172*                  XOR	A
001C7C CD 52 20    1173*                  CALL	PUSHS		;PUT ON STACK
001C7F FD 21 02 00 1174*                  LD	IY,2
001C83 FD 39       1175*                  ADD	IY,SP
001C85 CD 3B 17    1176*                  CALL	EXPR
001C88 FD E1       1177*                  POP	IY
001C8A FD 39       1178*                  ADD	IY,SP
001C8C FD F9       1179*                  LD	SP,IY		;ADJUST STACK POINTER
001C8E FD E1       1180*                  POP	IY
001C90 08          1181*                  EX	AF,AF'
001C91 C9          1182*                  RET
001C92             1183*  ;
001C92             1184*  ;RND - Random number function.
001C92             1185*  ; RND gives random integer 0-&FFFFFFFF
001C92             1186*  ; RND(-n) seeds random number & returns -n.
001C92             1187*  ; RND(0) returns last value in RND(1) form.
001C92             1188*  ; RND(1) returns floating-point 0-0.99999999.
001C92             1189*  ; RND(n) returns random integer 1-n.
001C92             1190*  ;
001C92 DD 21 F6 54 1191*  RND:            LD	IX,RANDOM
001C96 CD 44 45    1192*                  CALL	NXT
001C99 FE 28       1193*                  CP	'('
001C9B 28 1C       1194*                  JR	Z,RND5		;ARGUMENT FOLLOWS
001C9D CD 68 19    1195*                  CALL	LOAD5
001CA0 CB 19       1196*  RND1:           RR	C
001CA2 06 20       1197*                  LD	B,32
001CA4 D9          1198*  RND2:           EXX			;CALCULATE NEXT
001CA5 ED 6A       1199*                  ADC	HL,HL
001CA7 D9          1200*                  EXX
001CA8 ED 6A       1201*                  ADC	HL,HL
001CAA CB 5D       1202*                  BIT	3,L
001CAC 28 01       1203*                  JR	Z,RND3
001CAE 3F          1204*                  CCF
001CAF 10 F3       1205*  RND3:           DJNZ	RND2
001CB1 CB 11       1206*  RND4:           RL	C		;SAVE CARRY
001CB3 CD 3F 32    1207*                  CALL	STORE5		;STORE NEW NUMBER
001CB6 AF          1208*                  XOR	A
001CB7 4F          1209*                  LD	C,A
001CB8 C9          1210*                  RET
001CB9 CD 99 18    1211*  RND5:           CALL	ITEMI
001CBC DD 21 F6 54 1212*                  LD	IX,RANDOM
001CC0 CB 7C       1213*                  BIT	7,H		;NEGATIVE?
001CC2 37          1214*                  SCF
001CC3 20 EC       1215*                  JR	NZ,RND4		;SEED
001CC5 CD 92 1F    1216*                  CALL	TEST
001CC8 F5          1217*                  PUSH	AF
001CC9 41          1218*                  LD	B,C
001CCA EB          1219*                  EX	DE,HL
001CCB D9          1220*                  EXX
001CCC EB          1221*                  EX	DE,HL
001CCD CD 68 19    1222*                  CALL	LOAD5
001CD0 C4 A0 1C    1223*                  CALL	NZ,RND1		;NEXT IF NON-ZERO
001CD3 D9          1224*                  EXX			;SCRAMBLE (CARE!)
001CD4 0E 7F       1225*                  LD	C,7FH
001CD6 CB 7C       1226*  RND6:           BIT	7,H		;FLOAT
001CD8 20 08       1227*                  JR	NZ,RND7
001CDA D9          1228*                  EXX
001CDB 29          1229*                  ADD	HL,HL
001CDC D9          1230*                  EXX
001CDD ED 6A       1231*                  ADC	HL,HL
001CDF 0D          1232*                  DEC	C
001CE0 20 F4       1233*                  JR	NZ,RND6
001CE2 CB BC       1234*  RND7:           RES	7,H		;POSITIVE 0-0.999999
001CE4 F1          1235*                  POP	AF
001CE5 C8          1236*                  RET	Z		;ZERO ARGUMENT
001CE6 D9          1237*                  EXX
001CE7 7B          1238*                  LD	A,E
001CE8 3D          1239*                  DEC	A
001CE9 B2          1240*                  OR	D
001CEA D9          1241*                  EXX
001CEB B3          1242*                  OR	E
001CEC B2          1243*                  OR	D
001CED C8          1244*                  RET	Z		;ARGUMENT=1
001CEE 06 00       1245*                  LD	B,0		;INTEGER MARKER
001CF0 3E 0A       1246*                  LD	A,10
001CF2 CD 4E 45    1247*                  CALL	FPP		;MULTIPLY
001CF5 DA 7D 3F    1248*                  JP	C,ERROR_
001CF8 CD 50 1C    1249*                  CALL	SFIX
001CFB C3 8F 18    1250*                  JP	ADD1ev
001CFE             1251*  ;
001CFE             1252*  ;SUMLEN(array())
001CFE             1253*  ;
001CFE FD 23       1254*  SUMLEN:         INC	IY		;Skip LEN
001D00 CD 10 1A    1255*                  CALL	GETARB
001D03 CB 78       1256*                  BIT	7,B
001D05 CA A7 18    1257*                  JP	Z,MISMATev	;Type mismatch
001D08 CD DD 19    1258*                  CALL	ARRLEN
001D0B E5          1259*                  PUSH	HL
001D0C DD E1       1260*                  POP	IX		;IX addresses array
001D0E AF          1261*                  XOR	A
001D0F 67          1262*                  LD	H,A
001D10 6F          1263*                  LD	L,A
001D11 47          1264*                  LD	B,A
001D12 DD 4E 00    1265*  SUMLN1:         LD	C,(IX)
001D15 09          1266*                  ADD	HL,BC
001D16 0E 04       1267*                  LD	C,4
001D18 DD 09       1268*                  ADD	IX,BC
001D1A 1B          1269*                  DEC	DE		;Count elements
001D1B 7A          1270*                  LD	A,D
001D1C B3          1271*                  OR	E
001D1D 20 F3       1272*                  JR	NZ,SUMLN1
001D1F C3 89 1B    1273*                  JP	COUNT1
001D22             1274*  ;
001D22             1275*  ;SUM(array())
001D22             1276*  ;
001D22 CD 44 45    1277*  SUM:            CALL	NXT
001D25 FE A9       1278*                  CP	TLEN
001D27 28 D5       1279*                  JR	Z,SUMLEN
001D29 CD 10 1A    1280*                  CALL	GETARB
001D2C CB 78       1281*                  BIT	7,B
001D2E 20 27       1282*                  JR	NZ,SUMSTR
001D30 C5          1283*                  PUSH	BC
001D31 CD DD 19    1284*                  CALL	ARRLEN
001D34 E5          1285*                  PUSH	HL
001D35 DD E1       1286*                  POP	IX		;IX addresses array
001D37 CD 31 20    1287*                  CALL	ZERO
001D3A F1          1288*                  POP	AF		;A = element size
001D3B D5          1289*  SUMUP:          PUSH	DE
001D3C F5          1290*                  PUSH	AF
001D3D CD 20 1A    1291*                  CALL	DLOADN
001D40 3E 0B       1292*                  LD	A,11
001D42 CD 4E 45    1293*                  CALL	FPP
001D45 DA 7D 3F    1294*                  JP	C,ERROR_
001D48 F1          1295*                  POP	AF
001D49 16 00       1296*                  LD	D,0
001D4B 5F          1297*                  LD	E,A
001D4C DD 19       1298*                  ADD	IX,DE		;Bump to next element
001D4E D1          1299*                  POP	DE
001D4F 1B          1300*                  DEC	DE		;Count elements
001D50 47          1301*                  LD	B,A
001D51 7A          1302*                  LD	A,D
001D52 B3          1303*                  OR	E
001D53 78          1304*                  LD	A,B
001D54 20 E5       1305*                  JR	NZ,SUMUP
001D56 C9          1306*                  RET
001D57             1307*  ;
001D57             1308*  ;SUM(string array)
001D57             1309*  ;
001D57 CD DD 19    1310*  SUMSTR:         CALL	ARRLEN
001D5A E5          1311*                  PUSH	HL
001D5B DD E1       1312*                  POP	IX		;IX addresses array
001D5D EB          1313*                  EX	DE,HL
001D5E 11 00 52    1314*                  LD	DE,ACCS
001D61 06 00       1315*                  LD	B,0
001D63 E5          1316*  SUMST1:         PUSH	HL
001D64 DD 4E 00    1317*                  LD	C,(IX)
001D67 79          1318*                  LD	A,C
001D68 B7          1319*                  OR	A
001D69 28 0E       1320*                  JR	Z,SUMST2
001D6B 83          1321*                  ADD	A,E
001D6C 3E 13       1322*                  LD	A,19
001D6E DA 7D 3F    1323*                  JP	C,ERROR_		;"String too long"
001D71 DD 6E 02    1324*                  LD	L,(IX+2)
001D74 DD 66 03    1325*                  LD	H,(IX+3)
001D77 ED B0       1326*                  LDIR
001D79 E1          1327*  SUMST2:         POP	HL
001D7A 0E 04       1328*                  LD	C,4
001D7C DD 09       1329*                  ADD	IX,BC
001D7E 2B          1330*                  DEC	HL		;Count elements
001D7F 7C          1331*                  LD	A,H
001D80 B5          1332*                  OR	L
001D81 20 E0       1333*                  JR	NZ,SUMST1
001D83 F6 80       1334*                  OR	80H
001D85 C9          1335*                  RET
001D86             1336*  ;
001D86             1337*  ;MOD(array())
001D86             1338*  ;
001D86 CD 10 1A    1339*  MODFUN:         CALL	GETARB
001D89 CB 78       1340*                  BIT	7,B
001D8B C2 A7 18    1341*                  JP	NZ,MISMATev
001D8E C5          1342*                  PUSH	BC
001D8F CD DD 19    1343*                  CALL	ARRLEN
001D92 E5          1344*                  PUSH	HL
001D93 DD E1       1345*                  POP	IX		;IX addresses array
001D95 CD 31 20    1346*                  CALL	ZERO
001D98 F1          1347*                  POP	AF		;A = element size
001D99 D5          1348*  MODUP:          PUSH	DE
001D9A F5          1349*                  PUSH	AF
001D9B C5          1350*                  PUSH	BC
001D9C E5          1351*                  PUSH	HL
001D9D D9          1352*                  EXX
001D9E E5          1353*                  PUSH	HL
001D9F D9          1354*                  EXX
001DA0 CD 5E 19    1355*                  CALL	LOADN
001DA3 AF          1356*                  XOR	A
001DA4 47          1357*                  LD	B,A
001DA5 57          1358*                  LD	D,A
001DA6 5F          1359*                  LD	E,A
001DA7 D9          1360*                  EXX
001DA8 57          1361*                  LD	D,A
001DA9 1E 02       1362*                  LD	E,2
001DAB D9          1363*                  EXX
001DAC 3E 0E       1364*                  LD	A,14
001DAE DD E5       1365*                  PUSH	IX
001DB0 CD 4E 45    1366*                  CALL	FPP		;Square
001DB3 DD E1       1367*                  POP	IX
001DB5 DA 7D 3F    1368*                  JP	C,ERROR_
001DB8 D9          1369*                  EXX
001DB9 EB          1370*                  EX	DE,HL
001DBA E1          1371*                  POP	HL
001DBB D9          1372*                  EXX
001DBC EB          1373*                  EX	DE,HL
001DBD E1          1374*                  POP	HL
001DBE 79          1375*                  LD	A,C
001DBF C1          1376*                  POP	BC
001DC0 47          1377*                  LD	B,A
001DC1 3E 0B       1378*                  LD	A,11
001DC3 CD 4E 45    1379*                  CALL	FPP		;Accumulate
001DC6 DA 7D 3F    1380*                  JP	C,ERROR_
001DC9 F1          1381*                  POP	AF
001DCA 16 00       1382*                  LD	D,0
001DCC 5F          1383*                  LD	E,A
001DCD DD 19       1384*                  ADD	IX,DE		;Bump to next element
001DCF D1          1385*                  POP	DE
001DD0 1B          1386*                  DEC	DE		;Count elements
001DD1 47          1387*                  LD	B,A
001DD2 7A          1388*                  LD	A,D
001DD3 B3          1389*                  OR	E
001DD4 78          1390*                  LD	A,B
001DD5 20 C2       1391*                  JR	NZ,MODUP
001DD7 3E 1E       1392*                  LD	A,30
001DD9 CD 4E 45    1393*                  CALL	FPP		;Square root
001DDC AF          1394*                  XOR	A
001DDD C9          1395*                  RET
001DDE             1396*  ;
001DDE             1397*  ;INSTR - String search.
001DDE             1398*  ;Result is integer numeric.
001DDE             1399*  ;
001DDE CD 75 18    1400*  INSTR:          CALL	EXPRS		;STRING TO SEARCH
001DE1 CD DB 20    1401*                  CALL	COMMA
001DE4 CD 52 20    1402*                  CALL	PUSHS		;SAVE STRING ON STACK
001DE7 CD 75 18    1403*                  CALL	EXPRS		;SUB-STRING
001DEA C1          1404*                  POP	BC
001DEB 21 00 00    1405*                  LD	HL,0
001DEE 39          1406*                  ADD	HL,SP		;HL ADDRESSES MAIN
001DEF C5          1407*                  PUSH	BC		;C = MAIN STRING LENGTH
001DF0 43          1408*                  LD	B,E		;B = SUB-STRING LENGTH
001DF1 CD 44 45    1409*                  CALL	NXT
001DF4 FE 2C       1410*                  CP	','
001DF6 3E 00       1411*                  LD	A,0
001DF8 20 17       1412*                  JR	NZ,INSTR1
001DFA FD 23       1413*                  INC	IY		;SKIP COMMA
001DFC C5          1414*                  PUSH	BC		;SAVE LENGTHS
001DFD E5          1415*                  PUSH	HL		;SAVE MAIN ADDRESS
001DFE CD 52 20    1416*                  CALL	PUSHS
001E01 CD 6C 18    1417*                  CALL	EXPRI
001E04 C1          1418*                  POP	BC
001E05 CD 70 20    1419*                  CALL	POPS
001E08 E1          1420*                  POP	HL		;RESTORE MAIN ADDRESS
001E09 C1          1421*                  POP	BC		;RESTORE LENGTHS
001E0A D9          1422*                  EXX
001E0B 7D          1423*                  LD	A,L
001E0C D9          1424*                  EXX
001E0D B7          1425*                  OR	A
001E0E 28 01       1426*                  JR	Z,INSTR1
001E10 3D          1427*                  DEC	A
001E11 11 00 52    1428*  INSTR1:         LD	DE,ACCS		;DE ADDRESSES SUB
001E14 CD 2B 1E    1429*                  CALL	SEARCH
001E17 D1          1430*                  POP	DE
001E18 28 03       1431*                  JR	Z,INSTR2	;N.B. CARRY CLEARED
001E1A ED 62       1432*                  SBC	HL,HL
001E1C 39          1433*                  ADD	HL,SP
001E1D ED 72       1434*  INSTR2:         SBC	HL,SP
001E1F EB          1435*                  EX	DE,HL
001E20 26 00       1436*                  LD	H,0
001E22 39          1437*                  ADD	HL,SP
001E23 F9          1438*                  LD	SP,HL
001E24 EB          1439*                  EX	DE,HL
001E25 CD E7 20    1440*                  CALL	BRAKET
001E28 C3 89 1B    1441*                  JP	COUNT1
001E2B             1442*  ;
001E2B             1443*  ;SEARCH - Search string for sub-string
001E2B             1444*  ;   Inputs: Main string at HL length C
001E2B             1445*  ;           Sub-string at DE length B
001E2B             1446*  ;           Starting offset A
001E2B             1447*  ;  Outputs: NZ - not found
001E2B             1448*  ;           Z - found at location HL-1
001E2B             1449*  ;           Carry always cleared
001E2B             1450*  ;
001E2B C5          1451*  SEARCH:         PUSH	BC
001E2C 06 00       1452*                  LD	B,0
001E2E 4F          1453*                  LD	C,A
001E2F 09          1454*                  ADD	HL,BC		;NEW START ADDRESS
001E30 C1          1455*                  POP	BC
001E31 91          1456*                  SUB	C
001E32 30 28       1457*                  JR	NC,SRCH4
001E34 ED 44       1458*                  NEG
001E36 4F          1459*                  LD	C,A		;REMAINING LENGTH
001E37 1A          1460*  SRCH1ev:          LD	A,(DE)
001E38 C5          1461*                  PUSH	BC
001E39 06 00       1462*                  LD	B,0
001E3B ED B1       1463*                  CPIR			;FIND FIRST CHARACTER
001E3D 79          1464*                  LD	A,C
001E3E C1          1465*                  POP	BC
001E3F 20 1B       1466*                  JR	NZ,SRCH4
001E41 4F          1467*                  LD	C,A
001E42 05          1468*                  DEC	B		;Bug fix
001E43 B8          1469*                  CP	B		;Bug fix
001E44 04          1470*                  INC	B		;Bug fix
001E45 38 15       1471*                  JR	C,SRCH4		;Bug fix
001E47 C5          1472*                  PUSH	BC
001E48 D5          1473*                  PUSH	DE
001E49 E5          1474*                  PUSH	HL
001E4A 05          1475*                  DEC	B
001E4B 28 08       1476*                  JR	Z,SRCH3		;FOUND !
001E4D 13          1477*  SRCH2ev:          INC	DE
001E4E 1A          1478*                  LD	A,(DE)
001E4F BE          1479*                  CP	(HL)
001E50 20 03       1480*                  JR	NZ,SRCH3
001E52 23          1481*                  INC	HL
001E53 10 F8       1482*                  DJNZ	SRCH2ev
001E55 E1          1483*  SRCH3:          POP	HL
001E56 D1          1484*                  POP	DE
001E57 C1          1485*                  POP	BC
001E58 20 DD       1486*                  JR	NZ,SRCH1ev
001E5A AF          1487*                  XOR	A		;Z, NC
001E5B C9          1488*                  RET			;FOUND
001E5C             1489*  ;
001E5C F6 FF       1490*  SRCH4:          OR	0FFH		;NZ, NC
001E5E C9          1491*                  RET			;NOT FOUND
001E5F             1492*  ;
001E5F             1493*  ;CHR$ - Return character with given ASCII value.
001E5F             1494*  ;Result is string.
001E5F             1495*  ;
001E5F CD 99 18    1496*  CHRS:           CALL	ITEMI
001E62 D9          1497*                  EXX
001E63 7D          1498*                  LD	A,L
001E64 18 0A       1499*                  JR	GET1
001E66             1500*  ;
001E66             1501*  ;GET$ - Return key pressed as string, or read from file
001E66             1502*  ;Result is string.
001E66             1503*  ;
001E66 CD 44 45    1504*  GETS:           CALL	NXT
001E69 FE 23       1505*                  CP	'#'
001E6B 28 06       1506*                  JR	Z,GET2
001E6D CD FB 11    1507*                  CALL	OSRDCH
001E70 37          1508*  GET1:           SCF
001E71 18 5B       1509*                  JR	INKEY1
001E73             1510*  ;
001E73 CD 14 37    1511*  GET2:           CALL	CHNL		;File channel
001E76 CD 44 45    1512*                  CALL	NXT
001E79 FE 0F       1513*                  CP	TBY
001E7B 28 04       1514*                  JR	Z,GET3
001E7D FE B8       1515*                  CP	TTO
001E7F 20 0C       1516*                  JR	NZ,GET4
001E81 FD 23       1517*  GET3:           INC	IY
001E83 F5          1518*                  PUSH	AF
001E84 D5          1519*                  PUSH	DE
001E85 CD 99 18    1520*                  CALL	ITEMI		;Get BY or TO qualifier
001E88 D9          1521*                  EXX
001E89 44          1522*                  LD	B,H
001E8A 4D          1523*                  LD	C,L
001E8B D1          1524*                  POP	DE
001E8C F1          1525*                  POP	AF
001E8D 21 00 52    1526*  GET4:           LD	HL,ACCS
001E90 FE B8       1527*                  CP	TTO
001E92 28 08       1528*                  JR	Z,GET5
001E94 51          1529*                  LD	D,C		;Maximum count
001E95 01 00 01    1530*                  LD	BC,100H		;Default
001E98 FE 0F       1531*                  CP	TBY
001E9A 28 04       1532*                  JR	Z,GET6
001E9C 16 00       1533*  GET5:           LD	D,0
001E9E CB C8       1534*                  SET	1,B		;Flag no count
001EA0 C5          1535*  GET6:           PUSH	BC
001EA1 CD 78 12    1536*                  CALL	OSBGET
001EA4 C1          1537*                  POP	BC
001EA5 38 1C       1538*                  JR	C,GET9		;EOF
001EA7 CB 48       1539*                  BIT	1,B
001EA9 28 13       1540*                  JR	Z,GET8
001EAB B9          1541*                  CP	C
001EAC 28 15       1542*                  JR	Z,GET9		;NUL (or supplied term)
001EAE CB 78       1543*                  BIT	7,B
001EB0 20 08       1544*                  JR	NZ,GET7
001EB2 CB 40       1545*                  BIT	0,B
001EB4 28 08       1546*                  JR	Z,GET8
001EB6 FE 0A       1547*                  CP	LF
001EB8 28 09       1548*                  JR	Z,GET9		;LF
001EBA FE 0D       1549*  GET7:           CP	CR
001EBC 28 05       1550*                  JR	Z,GET9		;CR
001EBE 77          1551*  GET8:           LD	(HL),A
001EBF 2C          1552*                  INC	L
001EC0 15          1553*                  DEC	D
001EC1 20 DD       1554*                  JR	NZ,GET6
001EC3 EB          1555*  GET9:           EX	DE,HL
001EC4 3E 80       1556*                  LD	A,80H
001EC6 C9          1557*                  RET
001EC7             1558*  ;
001EC7             1559*  ;INKEY$ - Wait up to n centiseconds for keypress.
001EC7             1560*  ; Return key pressed as string or null
001EC7             1561*  ; string if time elapsed.
001EC7             1562*  ;Result is string.
001EC7             1563*  ;
001EC7 CD 99 18    1564*  INKEYS:         CALL	ITEMI
001ECA D9          1565*                  EXX
001ECB CD 68 00    1566*                  CALL	OSKEY
001ECE 11 00 52    1567*  INKEY1:         LD	DE,ACCS
001ED1 12          1568*                  LD	(DE),A
001ED2 3E 80       1569*                  LD	A,80H
001ED4 D0          1570*                  RET	NC
001ED5 1C          1571*                  INC	E
001ED6 C9          1572*                  RET
001ED7             1573*  ;
001ED7             1574*  ;MID$ - Return sub-string.
001ED7             1575*  ;Result is string.
001ED7             1576*  ;
001ED7 CD 75 18    1577*  MIDS:           CALL	EXPRS
001EDA CD DB 20    1578*                  CALL	COMMA
001EDD CD 52 20    1579*                  CALL	PUSHS		;SAVE STRING ON STACK
001EE0 CD 6C 18    1580*                  CALL	EXPRI
001EE3 C1          1581*                  POP	BC
001EE4 CD 70 20    1582*                  CALL	POPS
001EE7 D9          1583*                  EXX
001EE8 7D          1584*                  LD	A,L
001EE9 D9          1585*                  EXX
001EEA B7          1586*                  OR	A
001EEB 28 0D       1587*                  JR	Z,MIDS1
001EED 3D          1588*                  DEC	A
001EEE 6F          1589*                  LD	L,A
001EEF 93          1590*                  SUB	E
001EF0 1E 00       1591*                  LD	E,0
001EF2 30 06       1592*                  JR	NC,MIDS1
001EF4 ED 44       1593*                  NEG
001EF6 4F          1594*                  LD	C,A
001EF7 CD 56 1F    1595*                  CALL	RIGHT1
001EFA CD 44 45    1596*  MIDS1:          CALL	NXT
001EFD FE 2C       1597*                  CP	','
001EFF 28 1A       1598*                  JR	Z,LEFT1
001F01 CD E7 20    1599*                  CALL	BRAKET
001F04 3E 80       1600*                  LD	A,80H
001F06 C9          1601*                  RET
001F07             1602*  ;
001F07             1603*  ;LEFT$ - Return left part of string.
001F07             1604*  ;Carry cleared if entire string returned.
001F07             1605*  ;Result is string.
001F07             1606*  ;
001F07 CD 75 18    1607*  LEFTS:          CALL	EXPRS
001F0A CD 44 45    1608*                  CALL	NXT
001F0D FE 2C       1609*                  CP	','
001F0F 28 0A       1610*                  JR	Z,LEFT1
001F11 CD E7 20    1611*                  CALL	BRAKET
001F14 7B          1612*                  LD	A,E
001F15 B7          1613*                  OR	A
001F16 28 1A       1614*                  JR	Z,LEFT3
001F18 1D          1615*                  DEC	E
001F19 18 17       1616*                  JR	LEFT3
001F1B             1617*  ;
001F1B FD 23       1618*  LEFT1:          INC	IY
001F1D CD 52 20    1619*                  CALL	PUSHS		;SAVE STRING ON STACK
001F20 CD 6C 18    1620*                  CALL	EXPRI
001F23 C1          1621*                  POP	BC
001F24 CD 70 20    1622*                  CALL	POPS
001F27 CD E7 20    1623*                  CALL	BRAKET
001F2A D9          1624*                  EXX
001F2B 7D          1625*                  LD	A,L
001F2C D9          1626*                  EXX
001F2D BB          1627*                  CP	E
001F2E 30 02       1628*                  JR	NC,LEFT3
001F30 6B          1629*                  LD	L,E		;FOR RIGHT$
001F31 5F          1630*  LEFT2:          LD	E,A
001F32 3E 80       1631*  LEFT3:          LD	A,80H		;STRING MARKER
001F34 C9          1632*                  RET
001F35             1633*  ;
001F35             1634*  ;RIGHT$ - Return right part of string.
001F35             1635*  ;Result is string.
001F35             1636*  ;
001F35 CD 75 18    1637*  RIGHTS:         CALL	EXPRS
001F38 CD 44 45    1638*                  CALL	NXT
001F3B FE 2C       1639*                  CP	','
001F3D 28 0C       1640*                  JR	Z,RIGHT0
001F3F CD E7 20    1641*                  CALL	BRAKET
001F42 7B          1642*                  LD	A,E
001F43 B7          1643*                  OR	A
001F44 28 EC       1644*                  JR	Z,LEFT3
001F46 3D          1645*                  DEC	A
001F47 0E 01       1646*                  LD	C,1
001F49 18 0A       1647*                  JR	RIGHT2
001F4B             1648*  ;
001F4B CD 1B 1F    1649*  RIGHT0:         CALL	LEFT1
001F4E D0          1650*                  RET	NC
001F4F 1C          1651*                  INC	E
001F50 1D          1652*                  DEC	E
001F51 C8          1653*                  RET	Z
001F52 4B          1654*                  LD	C,E
001F53 7D          1655*                  LD	A,L
001F54 93          1656*                  SUB	E
001F55 6F          1657*  RIGHT2:         LD	L,A
001F56 06 00       1658*  RIGHT1:         LD	B,0
001F58 62          1659*                  LD	H,D
001F59 58          1660*                  LD	E,B
001F5A ED B0       1661*                  LDIR			;MOVE
001F5C 3E 80       1662*                  LD	A,80H
001F5E C9          1663*                  RET
001F5F             1664*  ;
001F5F             1665*  ;STRING$ - Return n concatenations of a string.
001F5F             1666*  ;Result is string.
001F5F             1667*  ;
001F5F CD 6C 18    1668*  STRING_:        CALL	EXPRI
001F62 CD DB 20    1669*                  CALL	COMMA
001F65 D9          1670*                  EXX
001F66 7D          1671*                  LD	A,L
001F67 D9          1672*                  EXX
001F68 F5          1673*                  PUSH	AF
001F69 CD 75 18    1674*                  CALL	EXPRS
001F6C CD E7 20    1675*                  CALL	BRAKET
001F6F F1          1676*                  POP	AF
001F70 B7          1677*                  OR	A
001F71 28 BE       1678*                  JR	Z,LEFT2		;N=0
001F73 3D          1679*                  DEC	A
001F74 4F          1680*                  LD	C,A
001F75 3E 80       1681*                  LD	A,80H		;STRING MARKER
001F77 C8          1682*                  RET	Z
001F78 1C          1683*                  INC	E
001F79 1D          1684*                  DEC	E
001F7A C8          1685*                  RET	Z		;NULL STRING
001F7B 43          1686*                  LD	B,E
001F7C 62          1687*                  LD	H,D
001F7D 2E 00       1688*                  LD	L,0
001F7F C5          1689*  STRIN1:         PUSH	BC
001F80 7E          1690*  STRIN2:         LD	A,(HL)
001F81 23          1691*                  INC	HL
001F82 12          1692*                  LD	(DE),A
001F83 1C          1693*                  INC	E
001F84 3E 13       1694*                  LD	A,19
001F86 CA 7D 3F    1695*                  JP	Z,ERROR_		;"String too long"
001F89 10 F5       1696*                  DJNZ	STRIN2
001F8B C1          1697*                  POP	BC
001F8C 0D          1698*                  DEC	C
001F8D 20 F0       1699*                  JR	NZ,STRIN1
001F8F 3E 80       1700*                  LD	A,80H
001F91 C9          1701*                  RET
001F92             1702*  ;
001F92             1703*  ;SUBROUTINES
001F92             1704*  ;
001F92             1705*  ;TEST - Test HLH'L' for zero
001F92             1706*  ;  Outputs: Z-flag set & A=0 if zero
001F92             1707*  ; Destroys: A,F
001F92             1708*  ;
001F92 7C          1709*  TEST:           LD	A,H
001F93 B5          1710*                  OR	L
001F94 D9          1711*                  EXX
001F95 B4          1712*                  OR	H
001F96 B5          1713*                  OR	L
001F97 D9          1714*                  EXX
001F98 C9          1715*                  RET
001F99             1716*  ;
001F99             1717*  ;DECODE - Decode line number in pseudo-binary.
001F99             1718*  ;   Inputs: IY = Text pointer.
001F99             1719*  ;  Outputs: HL=0, H'L'=line number, C=0.
001F99             1720*  ; Destroys: A,C,H,L,H',L',IY,F
001F99             1721*  ;
001F99 D9          1722*  DECODE:         EXX
001F9A FD 7E 00    1723*                  LD	A,(IY)
001F9D FD 23       1724*                  INC	IY
001F9F 17          1725*                  RLA
001FA0 17          1726*                  RLA
001FA1 67          1727*                  LD	H,A
001FA2 E6 C0       1728*                  AND	0C0H
001FA4 FD AE 00    1729*                  XOR	(IY)
001FA7 FD 23       1730*                  INC	IY
001FA9 6F          1731*                  LD	L,A
001FAA 7C          1732*                  LD	A,H
001FAB 17          1733*                  RLA
001FAC 17          1734*                  RLA
001FAD E6 C0       1735*                  AND	0C0H
001FAF FD AE 00    1736*                  XOR	(IY)
001FB2 FD 23       1737*                  INC	IY
001FB4 67          1738*                  LD	H,A
001FB5 D9          1739*                  EXX
001FB6 AF          1740*                  XOR	A
001FB7 4F          1741*                  LD	C,A
001FB8 67          1742*                  LD	H,A
001FB9 6F          1743*                  LD	L,A
001FBA C9          1744*                  RET
001FBB             1745*  ;
001FBB             1746*  ;HEXSTR - convert numeric value to HEX string.
001FBB             1747*  ;   Inputs: HLH'L'C = integer or floating-point number
001FBB             1748*  ;  Outputs: String in string accumulator.
001FBB             1749*  ;           E = string length. D = ACCS/256
001FBB             1750*  ;
001FBB FD 23       1751*  HEXSTS:         INC	IY		;SKIP TILDE
001FBD CD B3 18    1752*                  CALL	ITEMN
001FC0 CD C6 1F    1753*                  CALL	HEXSTR
001FC3 3E 80       1754*                  LD	A,80H
001FC5 C9          1755*                  RET
001FC6             1756*  ;
001FC6 CD 50 1C    1757*  HEXSTR:         CALL	SFIX
001FC9 01 08 00    1758*                  LD	BC,8
001FCC 11 00 52    1759*                  LD	DE,ACCS
001FCF C5          1760*  HEXST1:         PUSH	BC
001FD0 06 04       1761*                  LD	B,4
001FD2 AF          1762*                  XOR	A
001FD3 D9          1763*  HEXST2:         EXX
001FD4 29          1764*                  ADD	HL,HL
001FD5 D9          1765*                  EXX
001FD6 ED 6A       1766*                  ADC	HL,HL
001FD8 17          1767*                  RLA
001FD9 10 F8       1768*                  DJNZ	HEXST2
001FDB C1          1769*                  POP	BC
001FDC 0D          1770*                  DEC	C
001FDD F8          1771*                  RET	M
001FDE 28 06       1772*                  JR	Z,HEXST3
001FE0 B7          1773*                  OR	A
001FE1 20 03       1774*                  JR	NZ,HEXST3
001FE3 B8          1775*                  CP	B
001FE4 28 E9       1776*                  JR	Z,HEXST1
001FE6 C6 90       1777*  HEXST3:         ADD	A,90H
001FE8 27          1778*                  DAA
001FE9 CE 40       1779*                  ADC	A,40H
001FEB 27          1780*                  DAA
001FEC 12          1781*                  LD	(DE),A
001FED 13          1782*                  INC	DE
001FEE 47          1783*                  LD	B,A
001FEF 18 DE       1784*                  JR	HEXST1
001FF1             1785*  ;
001FF1             1786*  ;Function STR - convert numeric value to ASCII string.
001FF1             1787*  ;   Inputs: HLH'L'C = integer or floating-point number.
001FF1             1788*  ;  Outputs: String in string accumulator.
001FF1             1789*  ;           E = length, D = ACCS/256
001FF1             1790*  ;           A = 80H (type=string)
001FF1             1791*  ;
001FF1             1792*  ;First normalise for decimal output:
001FF1             1793*  ;
001FF1 CD 44 45    1794*  STRS:           CALL	NXT
001FF4 FE 7E       1795*                  CP	'~'
001FF6 28 C3       1796*                  JR	Z,HEXSTS
001FF8 CD B3 18    1797*                  CALL	ITEMN
001FFB DD 21 00 54 1798*                  LD	IX,STAVAR
001FFF DD 7E 03    1799*                  LD	A,(IX+3)
002002 B7          1800*                  OR	A
002003 DD 21 2B 20 1801*                  LD	IX,G9-1		;G9 FORMAT
002007 28 04       1802*                  JR	Z,STR0
002009 DD 21 00 54 1803*  STR:            LD	IX,STAVAR
00200D 11 00 52    1804*  STR0:           LD	DE,ACCS
002010 3E 25       1805*                  LD	A,37
002012 CD 4E 45    1806*                  CALL	FPP
002015 DA 7D 3F    1807*                  JP	C,ERROR_
002018 DD CB 02 46 1808*                  BIT	0,(IX+2)
00201C 3E 80       1809*  STR1:           LD	A,80H		;STRING MARKER
00201E C8          1810*                  RET	Z
00201F 79          1811*                  LD	A,C
002020 C6 04       1812*                  ADD	A,4
002022 BB          1813*  STR2:           CP	E
002023 28 F7       1814*                  JR	Z,STR1
002025 EB          1815*                  EX	DE,HL
002026 36 20       1816*                  LD	(HL),' '	;TRAILING SPACE
002028 23          1817*                  INC	HL
002029 EB          1818*                  EX	DE,HL
00202A 18 F6       1819*                  JR	STR2
00202C             1820*  ;
00202C 09 00       1821*  G9:             DW	9
00202E             1822*  ;
00202E             1823*  ;STRING COMPARE
00202E             1824*  ;Compare string (DE) length B with string (HL) length C.
00202E             1825*  ;Result preset to false.
00202E             1826*  ;
00202E CD 3B 20    1827*  SCP:            CALL	SCP0
002031 3E 00       1828*  ZERO:           LD	A,0
002033 D9          1829*                  EXX
002034 67          1830*                  LD	H,A
002035 6F          1831*                  LD	L,A
002036 D9          1832*                  EXX
002037 67          1833*                  LD	H,A
002038 6F          1834*                  LD	L,A
002039 4F          1835*                  LD	C,A
00203A C9          1836*                  RET
00203B             1837*  ;
00203B 04          1838*  SCP0:           INC	B
00203C 0C          1839*                  INC	C
00203D 05          1840*  SCP1:           DEC	B
00203E 28 0A       1841*                  JR	Z,SCP2
002040 0D          1842*                  DEC	C
002041 28 0C       1843*                  JR	Z,SCP3
002043 1A          1844*                  LD	A,(DE)
002044 BE          1845*                  CP	(HL)
002045 C0          1846*                  RET	NZ
002046 13          1847*                  INC	DE
002047 23          1848*                  INC	HL
002048 18 F3       1849*                  JR	SCP1
00204A B7          1850*  SCP2:           OR	A
00204B 0D          1851*                  DEC	C
00204C C8          1852*                  RET	Z
00204D 37          1853*                  SCF
00204E C9          1854*                  RET
00204F B7          1855*  SCP3:           OR	A
002050 0C          1856*                  INC	C
002051 C9          1857*                  RET
002052             1858*  ;
002052             1859*  ;PUSH$ - SAVE STRING ON STACK.
002052             1860*  ;   Inputs: String in string accumulator.
002052             1861*  ;           E = string length.
002052             1862*  ;           A - saved on stack.
002052             1863*  ; Destroys: B,C,D,E,H,L,IX,SP,F
002052             1864*  ;
002052 21 00 52    1865*  PUSHS:          LD	HL,ACCS
002055 CD BF 32    1866*                  CALL	CHECK
002058 DD E1       1867*                  POP	IX		;RETURN ADDRESS
00205A B7          1868*                  OR	A		;CLEAR CARRY
00205B 54          1869*                  LD	D,H
00205C 4B          1870*                  LD	C,E
00205D ED 52       1871*                  SBC	HL,DE
00205F 39          1872*                  ADD	HL,SP
002060 F9          1873*                  LD	SP,HL
002061 47          1874*                  LD	B,A
002062 C5          1875*                  PUSH	BC
002063 28 09       1876*                  JR	Z,PUSHS1	;ZERO LENGTH
002065 EB          1877*                  EX	DE,HL
002066 06 00       1878*                  LD	B,0
002068 68          1879*                  LD	L,B		;L=0
002069 ED B0       1880*                  LDIR			;COPY TO STACK
00206B CD BF 32    1881*                  CALL	CHECK
00206E DD E9       1882*  PUSHS1:         JP	(IX)		;"RETURN"
002070             1883*  ;
002070             1884*  ;POP$ - RESTORE STRING FROM STACK.
002070             1885*  ;   Inputs: C = string length.
002070             1886*  ;  Outputs: String in string accumulator.
002070             1887*  ;           E = string length.
002070             1888*  ; Destroys: B,C,D,E,H,L,IX,SP,F
002070             1889*  ;
002070 DD E1       1890*  POPS:           POP	IX		;RETURN ADDRESS
002072 21 00 00    1891*                  LD	HL,0
002075 44          1892*                  LD	B,H		;B=0
002076 39          1893*                  ADD	HL,SP
002077 11 00 52    1894*                  LD	DE,ACCS
00207A 0C          1895*                  INC	C
00207B 0D          1896*                  DEC	C
00207C 28 02       1897*                  JR	Z,POPS1		;ZERO LENGTH
00207E ED B0       1898*                  LDIR			;COPY FROM STACK
002080 F9          1899*  POPS1:          LD	SP,HL
002081 DD E9       1900*                  JP	(IX)		;"RETURN"
002083             1901*  ;
002083 FD 7E 00    1902*  BINDIG:         LD	A,(IY)
002086 FE 30       1903*                  CP	'0'
002088 D8          1904*                  RET	C
002089 FE 32       1905*                  CP	'1'+1
00208B 3F          1906*                  CCF
00208C D8          1907*                  RET	C
00208D D6 30       1908*                  SUB	'0'
00208F C9          1909*                  RET
002090             1910*  ;
002090 FD 7E 00    1911*  HEXDIG:         LD	A,(IY)
002093 FE 30       1912*                  CP	'0'
002095 D8          1913*                  RET	C
002096 FE 3A       1914*                  CP	'9'+1
002098 3F          1915*                  CCF
002099 D0          1916*                  RET	NC
00209A FE 41       1917*                  CP	'A'
00209C D8          1918*                  RET	C
00209D D6 37       1919*                  SUB	'A'-10
00209F FE 10       1920*                  CP	16
0020A1 3F          1921*                  CCF
0020A2 C9          1922*                  RET
0020A3             1923*  ;
0020A3 FE 3E       1924*  RELOPQ:         CP	'>'
0020A5 D0          1925*                  RET	NC
0020A6 FE 3D       1926*                  CP	'='
0020A8 D0          1927*                  RET	NC
0020A9 FE 3C       1928*                  CP	'<'
0020AB C9          1929*                  RET
0020AC             1930*  ;
0020AC FD 23       1931*  SAVEev:           INC	IY
0020AE E6 0F       1932*                  AND	0FH
0020B0 08          1933*  SAVE1:          EX	AF,AF'
0020B1 FA A7 18    1934*                  JP	M,MISMATev
0020B4 08          1935*                  EX	AF,AF'
0020B5 E3          1936*                  EX	(SP),HL
0020B6 D9          1937*                  EXX
0020B7 E5          1938*                  PUSH	HL
0020B8 D9          1939*                  EXX
0020B9 F5          1940*                  PUSH	AF
0020BA C5          1941*                  PUSH	BC
0020BB E9          1942*                  JP	(HL)
0020BC             1943*  ;
0020BC 08          1944*  DOIT:           EX	AF,AF'
0020BD FA A7 18    1945*                  JP	M,MISMATev
0020C0 D9          1946*                  EXX
0020C1 C1          1947*                  POP	BC		;RETURN ADDRESS
0020C2 D9          1948*                  EXX
0020C3 79          1949*                  LD	A,C
0020C4 C1          1950*                  POP	BC
0020C5 47          1951*                  LD	B,A
0020C6 F1          1952*                  POP	AF		;OPERATOR
0020C7 D9          1953*                  EXX
0020C8 EB          1954*                  EX	DE,HL
0020C9 E1          1955*                  POP	HL
0020CA D9          1956*                  EXX
0020CB EB          1957*                  EX	DE,HL
0020CC E1          1958*                  POP	HL
0020CD D9          1959*                  EXX
0020CE C5          1960*                  PUSH	BC
0020CF D9          1961*                  EXX
0020D0 CD 4E 45    1962*                  CALL	FPP
0020D3 38 1C       1963*                  JR	C,ERROR1ev
0020D5 AF          1964*                  XOR	A
0020D6 08          1965*                  EX	AF,AF'		;TYPE
0020D7 FD 7E 00    1966*                  LD	A,(IY)
0020DA C9          1967*                  RET
0020DB             1968*  ;
0020DB CD 44 45    1969*  COMMA:          CALL	NXT
0020DE FD 23       1970*                  INC	IY
0020E0 FE 2C       1971*                  CP	','
0020E2 C8          1972*                  RET	Z
0020E3 3E 05       1973*                  LD	A,5
0020E5 18 0A       1974*                  JR	ERROR1ev		;"Missing ,"
0020E7             1975*  ;
0020E7 CD 44 45    1976*  BRAKET:         CALL	NXT
0020EA FD 23       1977*                  INC	IY
0020EC FE 29       1978*                  CP	')'
0020EE C8          1979*                  RET	Z
0020EF 3E 1B       1980*                  LD	A,27
0020F1 C3 7D 3F    1981*  ERROR1ev:         JP	ERROR_		;"Missing )"
0020F4             1982*  ;
0020F4 E5          1983*  DISPT2:         PUSH	HL
0020F5 21 2F 17    1984*                  LD	HL,SOPTBL
0020F8 18 06       1985*                  JR	DISPT0
0020FA             1986*  ;
0020FA E5          1987*  DISPATev:         PUSH	HL
0020FB D6 8D       1988*                  SUB	FUNTOK
0020FD 21 BB 16    1989*                  LD	HL,FUNTBL
002100 C5          1990*  DISPT0:         PUSH	BC
002101 87          1991*                  ADD	A,A
002102 4F          1992*                  LD	C,A
002103 06 00       1993*                  LD	B,0
002105 09          1994*                  ADD	HL,BC
002106 7E          1995*                  LD	A,(HL)
002107 23          1996*                  INC	HL
002108 66          1997*                  LD	H,(HL)
002109 6F          1998*                  LD	L,A
00210A C1          1999*                  POP	BC
00210B E3          2000*                  EX	(SP),HL
00210C C9          2001*                  RET			;OFF TO ROUTINE
00210D             2002*  ;
00210D 7A          2003*  STOREA:         LD	A,D
00210E D5          2004*                  PUSH	DE
00210F E5          2005*                  PUSH	HL
002110 DD E3       2006*                  EX	(SP),IX
002112 B7          2007*                  OR	A
002113 FA 24 21    2008*                  JP	M,STORA1
002116 CD 5E 19    2009*                  CALL	LOADN
002119 DD E3       2010*                  EX	(SP),IX
00211B CD 07 32    2011*                  CALL	MODIFY
00211E E1          2012*                  POP	HL
00211F D1          2013*                  POP	DE
002120 4A          2014*                  LD	C,D
002121 06 00       2015*                  LD	B,0
002123 C9          2016*                  RET
002124             2017*  ;
002124 D5          2018*  STORA1:         PUSH	DE
002125 CD 47 1A    2019*                  CALL	LOADS
002128 E1          2020*                  POP	HL
002129 DD E3       2021*                  EX	(SP),IX
00212B CD 51 32    2022*                  CALL	MODIFS
00212E E1          2023*                  POP	HL
00212F D1          2024*                  POP	DE
002130 01 04 00    2025*                  LD	BC,4
002133 C9          2026*                  RET
002134             2027*  ;
002134             2028*  ; Assign to whole array:
002134             2029*  ; array1() = array expression
002134             2030*  ; array1() = n1,n2,n3,n4...
002134             2031*  ; array1() = n (n copied into all elements)
002134             2032*  ;
002134             2033*  ; Inputs: D = type (65, 68, 69, 193)
002134             2034*  ;         E = opcode ('=' for store, '+','-' etc. for modify)
002134             2035*  ;         HL = IX = VARPTR
002134             2036*  ;         IY = text pointer
002134             2037*  ;
002134 CB B2       2038*  LETARR:         RES	6,D		;Lose array marker
002136 D5          2039*                  PUSH	DE		;Save type & opcode
002137 CD 06 1A    2040*                  CALL	GETAR1		;Get and check indirect link
00213A CD DD 19    2041*                  CALL	ARRLEN		;DE = elements, HL addresses first
00213D C1          2042*                  POP	BC
00213E 78          2043*                  LD	A,B		;A = type
00213F D5          2044*                  PUSH	DE
002140 C5          2045*                  PUSH	BC
002141 E5          2046*                  PUSH	HL
002142 CD E6 36    2047*                  CALL	X14OR5		;DE = size in bytes
002145 42          2048*                  LD	B,D
002146 4B          2049*                  LD	C,E
002147 DD E1       2050*                  POP	IX
002149 D1          2051*                  POP	DE
00214A             2052*  ;
00214A             2053*  ; (SP) = number of elements
00214A             2054*  ; BC = size in bytes
00214A             2055*  ; DE = type & opcode
00214A             2056*  ; IX = address of first element
00214A             2057*  ;
00214A             2058*  ; allocate space on stack and zero it:
00214A             2059*  ;
00214A AF          2060*                  XOR	A		;Clear carry and zero error code
00214B ED 62       2061*                  SBC	HL,HL
00214D 39          2062*                  ADD	HL,SP		;HL = SP
00214E ED 42       2063*                  SBC	HL,BC
002150 38 9F       2064*                  JR	C,ERROR1ev	;'No room'
002152 C5          2065*                  PUSH	BC
002153 ED 4B E0 54 2066*                  LD	BC,(FREE)
002157 04          2067*                  INC	B		;Safety margin
002158 ED 42       2068*                  SBC	HL,BC
00215A 09          2069*                  ADD	HL,BC
00215B C1          2070*                  POP	BC
00215C 38 93       2071*                  JR	C,ERROR1ev	;'No room'
00215E F9          2072*                  LD	SP,HL
00215F 36 00       2073*  LETA0:          LD	(HL),0
002161 23          2074*                  INC	HL
002162 0B          2075*                  DEC	BC
002163 78          2076*                  LD	A,B
002164 B1          2077*                  OR	C
002165 20 F8       2078*                  JR	NZ,LETA0	;Clear allocated stack
002167 4E          2079*                  LD	C,(HL)
002168 23          2080*                  INC	HL
002169 46          2081*                  LD	B,(HL)
00216A 67          2082*                  LD	H,A
00216B 6F          2083*                  LD	L,A
00216C 39          2084*                  ADD	HL,SP
00216D             2085*  ;
00216D             2086*  ;	CALL	NXT
00216D             2087*  ;	CP	TEVAL		;;EVAL not currently supported
00216D             2088*  ;
00216D CD 75 21    2089*                  CALL	EXPRA
002170 F9          2090*                  LD	SP,HL		;Update stack pointer
002171 C1          2091*                  POP	BC		;Level stack
002172 C3 D2 24    2092*                  JP	XEQ
002175             2093*  ;
002175             2094*  ; EXPRA - Evaluate array expression, strictly left-to-right;
002175             2095*  ; Note: String array arithmetic (concatenation) is not supported
002175             2096*  ; because it would require a way of recovering freed string space.
002175             2097*  ;
002175             2098*  ;   Inputs: BC = number of elements
002175             2099*  ;           DE = type & opcode
002175             2100*  ;           HL = address of temporary stack space
002175             2101*  ;           IX = address of first element of array
002175             2102*  ;  Outputs: HL = value to set stack pointer to
002175             2103*  ;
002175 3E 3D       2104*  EXPRA:          LD	A,'='
002177 FD 2B       2105*                  DEC	IY
002179 FD 23       2106*  EXPRA1:         INC	IY
00217B D5          2107*                  PUSH	DE
00217C C5          2108*                  PUSH	BC
00217D E5          2109*                  PUSH	HL
00217E DD E5       2110*                  PUSH	IX
002180 5F          2111*                  LD	E,A		;Operator
002181 CD EF 21    2112*                  CALL	ITEMA
002184 DD E1       2113*                  POP	IX
002186 E1          2114*                  POP	HL
002187 C1          2115*                  POP	BC
002188 D1          2116*                  POP	DE
002189 CD 44 45    2117*                  CALL	NXT
00218C FE 2C       2118*                  CP	','		;List?
00218E 28 13       2119*                  JR	Z,EXPRA3
002190 CD 6F 35    2120*                  CALL	TERMQ
002193 20 E4       2121*                  JR	NZ,EXPRA1
002195             2122*  ;
002195             2123*  ; Update destination array from stack:
002195             2124*  ;
002195 C5          2125*  EXPRA2:         PUSH	BC
002196 CD 0D 21    2126*                  CALL	STOREA		;(IX) <- (HL)
002199 09          2127*                  ADD	HL,BC
00219A DD 09       2128*                  ADD	IX,BC
00219C C1          2129*                  POP	BC
00219D 0B          2130*                  DEC	BC
00219E 78          2131*                  LD	A,B
00219F B1          2132*                  OR	C
0021A0 20 F3       2133*                  JR	NZ,EXPRA2
0021A2 C9          2134*                  RET
0021A3             2135*  ;
0021A3             2136*  ; Update destination array from list (n.b. not transferred via stack):
0021A3             2137*  ;
0021A3 C5          2138*  EXPRA3:         PUSH	BC
0021A4 CD 0D 21    2139*                  CALL	STOREA		;(IX) <- (HL)
0021A7 FD 23       2140*  EXPRA4:         INC	IY		;Bump past comma
0021A9 09          2141*                  ADD	HL,BC
0021AA DD 09       2142*                  ADD	IX,BC
0021AC C1          2143*                  POP	BC
0021AD 0B          2144*                  DEC	BC
0021AE 78          2145*                  LD	A,B
0021AF B1          2146*                  OR	C
0021B0 C8          2147*                  RET	Z
0021B1 C5          2148*                  PUSH	BC
0021B2 D5          2149*                  PUSH	DE
0021B3 E5          2150*                  PUSH	HL
0021B4 DD E5       2151*                  PUSH	IX
0021B6 CB 7A       2152*                  BIT	7,D
0021B8 20 0E       2153*                  JR	NZ,EXPRA5
0021BA D5          2154*                  PUSH	DE
0021BB CD 65 18    2155*                  CALL	EXPRN
0021BE D1          2156*                  POP	DE
0021BF DD E1       2157*                  POP	IX
0021C1 DD E5       2158*                  PUSH	IX
0021C3 CD 07 32    2159*                  CALL	MODIFY
0021C6 18 0C       2160*                  JR	EXPRA6
0021C8             2161*  ;
0021C8 D5          2162*  EXPRA5:         PUSH	DE
0021C9 CD 75 18    2163*                  CALL	EXPRS
0021CC E1          2164*                  POP	HL
0021CD DD E1       2165*                  POP	IX
0021CF DD E5       2166*                  PUSH	IX
0021D1 CD 51 32    2167*                  CALL	MODIFS
0021D4 DD E1       2168*  EXPRA6:         POP	IX
0021D6 E1          2169*                  POP	HL
0021D7 D1          2170*                  POP	DE
0021D8 01 04 00    2171*                  LD	BC,4
0021DB CB 7A       2172*                  BIT	7,D
0021DD 20 01       2173*                  JR	NZ,EXPRA7
0021DF 4A          2174*                  LD	C,D
0021E0 CD 44 45    2175*  EXPRA7:         CALL	NXT
0021E3 FE 2C       2176*                  CP	','
0021E5 28 C0       2177*                  JR	Z,EXPRA4
0021E7 D1          2178*                  POP	DE
0021E8 09          2179*  EXPRA8:         ADD	HL,BC		;Skip remaining elements
0021E9 1B          2180*                  DEC	DE
0021EA 7A          2181*                  LD	A,D
0021EB B3          2182*                  OR	E
0021EC 20 FA       2183*                  JR	NZ,EXPRA8
0021EE C9          2184*                  RET
0021EF             2185*  ;
0021EF             2186*  ; ITEMA: evaluate and operate on array item
0021EF             2187*  ;   Inputs: D = type
0021EF             2188*  ;           E = operator ('=' for first item)
0021EF             2189*  ;           BC = number of elements
0021EF             2190*  ;           HL = pointer to destination on stack
0021EF             2191*  ;           IY = text pointer
0021EF             2192*  ;  Outputs: IY updated
0021EF             2193*  ; Destroys: Everything except SP
0021EF             2194*  ;
0021EF CD 44 45    2195*  ITEMA:          CALL	NXT
0021F2 E5          2196*                  PUSH	HL		;Pointer to destination
0021F3 C5          2197*                  PUSH	BC		;Number of elements
0021F4 FD E5       2198*                  PUSH	IY		;In case normal expression
0021F6 D5          2199*                  PUSH	DE		;Ditto
0021F7 FE 2D       2200*                  CP	'-'
0021F9 20 0C       2201*                  JR	NZ,ITEMA1	;Not unary minus
0021FB 7B          2202*                  LD	A,E
0021FC FE 3D       2203*                  CP	'='
0021FE 20 07       2204*                  JR	NZ,ITEMA1	;Not unary minus
002200 FD 23       2205*                  INC	IY		;Bump past '-'
002202 CD 44 45    2206*                  CALL	NXT
002205 1E 2D       2207*                  LD	E,'-'		;Unary minus
002207 D5          2208*  ITEMA1:         PUSH	DE		;Type and operator
002208 CD 1C 42    2209*                  CALL	GETVAR
00220B D1          2210*                  POP	DE		;Type & operator
00220C 20 56       2211*                  JR	NZ,ITEMA4	;Non-array expression
00220E CB 77       2212*                  BIT	6,A
002210 28 52       2213*                  JR	Z,ITEMA4	;Not a whole array
002212 C1          2214*                  POP	BC		;Junk saved original op
002213 C1          2215*                  POP	BC		;Junk saved text pointer
002214 CB B7       2216*                  RES	6,A
002216 BA          2217*                  CP	D
002217 C2 A7 18    2218*                  JP	NZ,MISMATev	;'Type mismatch'
00221A D5          2219*                  PUSH	DE		;Save type & operator again
00221B CD 06 1A    2220*                  CALL	GETAR1
00221E CD DD 19    2221*                  CALL	ARRLEN
002221 42          2222*                  LD	B,D		;BC = number of elements
002222 4B          2223*                  LD	C,E
002223 D1          2224*                  POP	DE		;Restore type & operator
002224 E3          2225*                  EX	(SP),HL
002225 CD 44 45    2226*                  CALL	NXT
002228 DD E1       2227*                  POP	IX		;Pointer to source
00222A FE 2E       2228*                  CP	'.'
00222C CA BC 22    2229*                  JP	Z,ARRDOT	;Dot product
00222F B7          2230*                  OR	A
002230 ED 42       2231*                  SBC	HL,BC		;Same number of elements?
002232 C2 A7 18    2232*                  JP	NZ,MISMATev	;'Type mismatch'
002235 E1          2233*                  POP	HL		;Pointer to destination
002236 CB 7A       2234*                  BIT	7,D
002238 20 1D       2235*                  JR	NZ,ITEMA3
00223A             2236*  ;
00223A             2237*  ; Process numeric array item:
00223A             2238*  ;
00223A C5          2239*  ITEMA2:         PUSH	BC
00223B E5          2240*                  PUSH	HL
00223C 7A          2241*                  LD	A,D
00223D CD 5E 19    2242*                  CALL	LOADN
002240 DD E3       2243*                  EX	(SP),IX
002242 D5          2244*                  PUSH	DE
002243 CD 07 32    2245*                  CALL	MODIFY
002246 D1          2246*                  POP	DE
002247 DD E3       2247*                  EX	(SP),IX
002249 E1          2248*                  POP	HL
00224A 4A          2249*                  LD	C,D
00224B 06 00       2250*                  LD	B,0
00224D DD 09       2251*                  ADD	IX,BC
00224F 09          2252*                  ADD	HL,BC
002250 C1          2253*                  POP	BC
002251 0B          2254*                  DEC	BC
002252 78          2255*                  LD	A,B
002253 B1          2256*                  OR	C
002254 20 E4       2257*                  JR	NZ,ITEMA2
002256 C9          2258*                  RET
002257             2259*  ;
002257             2260*  ; Process string array item (just copy descriptors):
002257             2261*  ;
002257 EB          2262*  ITEMA3:         EX	DE,HL		;DE = destination
002258 60          2263*                  LD	H,B
002259 69          2264*                  LD	L,C
00225A 29          2265*                  ADD	HL,HL
00225B 29          2266*                  ADD	HL,HL
00225C 44          2267*                  LD	B,H
00225D 4D          2268*                  LD	C,L
00225E DD E5       2269*                  PUSH	IX
002260 E1          2270*                  POP	HL		;HL = source
002261 ED B0       2271*                  LDIR
002263 C9          2272*                  RET
002264             2273*  ;
002264             2274*  ; Process numeric non-array item:
002264             2275*  ;
002264 D1          2276*  ITEMA4:         POP	DE		;Restore original operator
002265 FD E1       2277*                  POP	IY		;Restore original text pointer
002267 CB 7A       2278*                  BIT	7,D
002269 20 28       2279*                  JR	NZ,ITEMA5
00226B D5          2280*                  PUSH	DE
00226C CD 44 18    2281*                  CALL	EXPR45		;; should be EXP345
00226F 79          2282*                  LD	A,C		;Exponent
002270 D1          2283*                  POP	DE		;Type / operator
002271 C1          2284*                  POP	BC		;Count
002272 DD E1       2285*                  POP	IX
002274 E5          2286*  ITEMA7:         PUSH	HL
002275 C5          2287*                  PUSH	BC
002276 D5          2288*                  PUSH	DE
002277 D9          2289*                  EXX
002278 E5          2290*                  PUSH	HL
002279 D9          2291*                  EXX
00227A F5          2292*                  PUSH	AF
00227B 4F          2293*                  LD	C,A
00227C CD 07 32    2294*                  CALL	MODIFY
00227F F1          2295*                  POP	AF
002280 D9          2296*                  EXX
002281 E1          2297*                  POP	HL
002282 D9          2298*                  EXX
002283 D1          2299*                  POP	DE
002284 4A          2300*                  LD	C,D
002285 06 00       2301*                  LD	B,0
002287 DD 09       2302*                  ADD	IX,BC
002289 C1          2303*                  POP	BC
00228A 0B          2304*                  DEC	BC
00228B ED 62       2305*                  SBC	HL,HL
00228D ED 42       2306*                  SBC	HL,BC
00228F E1          2307*                  POP	HL
002290 20 E2       2308*                  JR	NZ,ITEMA7	;Copy into every element!
002292 C9          2309*                  RET
002293             2310*  ;
002293             2311*  ; Process string non-array item:
002293             2312*  ;
002293 CD 75 18    2313*  ITEMA5:         CALL	EXPRS
002296 7B          2314*                  LD	A,E
002297 B7          2315*                  OR	A
002298 28 0B       2316*                  JR	Z,ITEMA0
00229A 21 00 52    2317*                  LD	HL,ACCS
00229D 11 00 53    2318*                  LD	DE,BUFFER
0022A0 4F          2319*                  LD	C,A
0022A1 06 00       2320*                  LD	B,0
0022A3 ED B0       2321*                  LDIR
0022A5 C1          2322*  ITEMA0:         POP	BC
0022A6 DD E1       2323*                  POP	IX
0022A8 D9          2324*                  EXX
0022A9 6F          2325*                  LD	L,A
0022AA D9          2326*                  EXX
0022AB 11 04 00    2327*                  LD	DE,4
0022AE 21 00 53    2328*                  LD	HL,BUFFER
0022B1 CD 42 32    2329*  ITEMA6:         CALL	STORE4
0022B4 DD 19       2330*                  ADD	IX,DE
0022B6 0B          2331*                  DEC	BC
0022B7 78          2332*                  LD	A,B
0022B8 B1          2333*                  OR	C
0022B9 20 F6       2334*                  JR	NZ,ITEMA6	;Copy into every element!
0022BB C9          2335*                  RET
0022BC             2336*  ;
0022BC             2337*  ; Array dot-product:
0022BC             2338*  ;
0022BC FD 23       2339*  ARRDOT:         INC	IY		;Bump past dot
0022BE 7A          2340*                  LD	A,D		;Type
0022BF B7          2341*                  OR	A
0022C0 FA A7 18    2342*                  JP	M,MISMATev	;'Type mismatch'
0022C3 EB          2343*                  EX	DE,HL
0022C4 E1          2344*                  POP	HL
0022C5             2345*  ;
0022C5             2346*  ; A = type
0022C5             2347*  ; DE = no. of elements in destination array (outer loop counter)
0022C5             2348*  ; IX = pointer to first source array data
0022C5             2349*  ; HL = pointer to destination data
0022C5             2350*  ; IY = text pointer
0022C5             2351*  ;
0022C5 D5          2352*                  PUSH	DE
0022C6 E5          2353*                  PUSH	HL
0022C7 DD E5       2354*                  PUSH	IX
0022C9 F5          2355*                  PUSH	AF
0022CA CD F6 19    2356*                  CALL	GETARR
0022CD CD DD 19    2357*                  CALL	ARRLEN
0022D0 F1          2358*                  POP	AF
0022D1 EB          2359*                  EX	DE,HL
0022D2 DD 6E 00    2360*                  LD	L,(IX)
0022D5 DD 66 01    2361*                  LD	H,(IX+1)	;Indirect pointer
0022D8 6E          2362*                  LD	L,(HL)		;No. of dimensions
0022D9 2D          2363*                  DEC	L
0022DA EB          2364*                  EX	DE,HL
0022DB DD E1       2365*                  POP	IX
0022DD C1          2366*                  POP	BC
0022DE D1          2367*                  POP	DE
0022DF             2368*  ;
0022DF FD E5       2369*                  PUSH	IY		;Save text pointer
0022E1 C5          2370*                  PUSH	BC		;Save destination pointer
0022E2 E5          2371*                  PUSH	HL
0022E3 FD E1       2372*                  POP	IY
0022E5             2373*  ;
0022E5             2374*  ; Get row counts:
0022E5             2375*  ;
0022E5 21 01 00    2376*                  LD	HL,1
0022E8 28 06       2377*                  JR	Z,ARR1D
0022EA FD 66 FF    2378*                  LD	H,(IY-1)
0022ED FD 6E FE    2379*                  LD	L,(IY-2)
0022F0 D5          2380*  ARR1D:          PUSH	DE
0022F1 EB          2381*                  EX	DE,HL
0022F2 CD E6 36    2382*                  CALL	X14OR5
0022F5 EB          2383*                  EX	DE,HL
0022F6 D1          2384*                  POP	DE
0022F7 DD 46 FF    2385*                  LD	B,(IX-1)
0022FA DD 4E FE    2386*                  LD	C,(IX-2)
0022FD             2387*  ;
0022FD             2388*  ; A = type, Z-flag set if first array is one-dimensional
0022FD             2389*  ; BC = no. of rows of first source array (inner loop counter)
0022FD             2390*  ; DE = no. of elements in destination array (outer loop counter)
0022FD             2391*  ; HL = no. of rows of second source array * size of each element
0022FD             2392*  ; IX = pointer to first source array
0022FD             2393*  ; IY = pointer to second source array
0022FD             2394*  ; (SP) = pointer to destination data
0022FD             2395*  ;
0022FD             2396*  ; Dot-product outer loop:
0022FD             2397*  ;
0022FD C5          2398*  OUTER:          PUSH	BC		;1
0022FE D5          2399*                  PUSH	DE		;2
0022FF E5          2400*                  PUSH	HL		;3
002300 DD E5       2401*                  PUSH	IX		;4
002302 FD E5       2402*                  PUSH	IY		;5
002304 50          2403*                  LD	D,B
002305 59          2404*                  LD	E,C
002306 F5          2405*                  PUSH	AF
002307 CD 31 20    2406*                  CALL	ZERO		;Zero accumulator
00230A F1          2407*                  POP	AF
00230B D5          2408*  INNER:          PUSH	DE		;6
00230C C5          2409*                  PUSH	BC		;Save accumulator
00230D E5          2410*                  PUSH	HL
00230E D9          2411*                  EXX
00230F E5          2412*                  PUSH	HL
002310 D9          2413*                  EXX
002311             2414*  ;
002311 CD 5E 19    2415*                  CALL	LOADN		;Load from (IX)
002314 DD E5       2416*                  PUSH	IX
002316 FD E3       2417*                  EX	(SP),IY
002318 DD E1       2418*                  POP	IX
00231A             2419*  ;
00231A CD 20 1A    2420*                  CALL	DLOADN		;Load from (IY)
00231D DD E5       2421*                  PUSH	IX
00231F FD E3       2422*                  EX	(SP),IY
002321 DD E1       2423*                  POP	IX
002323             2424*  ;
002323 F5          2425*                  PUSH	AF
002324 3E 0A       2426*                  LD	A,10
002326 CD 4E 45    2427*                  CALL	FPP		;Multiply
002329 DA 7D 3F    2428*                  JP	C,ERROR_
00232C F1          2429*                  POP	AF
00232D             2430*  ;
00232D D9          2431*                  EXX			;Restore accumulator
00232E EB          2432*                  EX	DE,HL
00232F E1          2433*                  POP	HL
002330 D9          2434*                  EXX
002331 EB          2435*                  EX	DE,HL
002332 E1          2436*                  POP	HL
002333 08          2437*                  EX	AF,AF'
002334 79          2438*                  LD	A,C
002335 C1          2439*                  POP	BC
002336 47          2440*                  LD	B,A
002337 08          2441*                  EX	AF,AF'
002338             2442*  ;
002338 F5          2443*                  PUSH	AF
002339 3E 0B       2444*                  LD	A,11
00233B CD 4E 45    2445*                  CALL	FPP		;Accumulate
00233E DA 7D 3F    2446*                  JP	C,ERROR_
002341 F1          2447*                  POP	AF
002342             2448*  ;
002342             2449*  ; Bump pointers:
002342             2450*  ;
002342 D1          2451*                  POP	DE		;5
002343             2452*  ;
002343 D9          2453*                  EXX
002344 4F          2454*                  LD	C,A
002345 06 00       2455*                  LD	B,0
002347 DD 09       2456*                  ADD	IX,BC
002349 D1          2457*                  POP	DE
00234A C1          2458*                  POP	BC
00234B E3          2459*                  EX	(SP),HL
00234C EB          2460*                  EX	DE,HL
00234D FD 19       2461*                  ADD	IY,DE
00234F EB          2462*                  EX	DE,HL
002350 E3          2463*                  EX	(SP),HL
002351 C5          2464*                  PUSH	BC
002352 D5          2465*                  PUSH	DE
002353 D9          2466*                  EXX
002354             2467*  ;
002354             2468*  ; Count inner loops:
002354             2469*  ;
002354 1B          2470*                  DEC	DE		;Inner loop counter
002355 1C          2471*                  INC	E
002356 1D          2472*                  DEC	E
002357 20 B2       2473*                  JR	NZ,INNER
002359 14          2474*                  INC	D
00235A 15          2475*                  DEC	D
00235B 20 AE       2476*                  JR	NZ,INNER
00235D             2477*  ;
00235D FD E1       2478*                  POP	IY		;4
00235F DD E1       2479*                  POP	IX		;3
002361             2480*  ;
002361             2481*  ; Swap pointers:
002361             2482*  ;
002361 D9          2483*                  EXX
002362 08          2484*                  EX	AF,AF'
002363 F1          2485*                  POP	AF
002364 C1          2486*                  POP	BC
002365 D1          2487*                  POP	DE
002366 DD E3       2488*                  EX	(SP),IX
002368 D5          2489*                  PUSH	DE
002369 C5          2490*                  PUSH	BC
00236A F5          2491*                  PUSH	AF
00236B 08          2492*                  EX	AF,AF'
00236C D9          2493*                  EXX
00236D             2494*  ;
00236D             2495*  ; Save to destination array and bump pointer:
00236D             2496*  ;
00236D F5          2497*                  PUSH	AF
00236E D5          2498*                  PUSH	DE
00236F CD 29 32    2499*                  CALL	STOREN
002372 D1          2500*                  POP	DE
002373 F1          2501*                  POP	AF
002374 4F          2502*                  LD	C,A
002375 06 00       2503*                  LD	B,0
002377 DD 09       2504*                  ADD	IX,BC
002379             2505*  ;
002379             2506*  ; Swap pointers:
002379             2507*  ;
002379 D9          2508*                  EXX
00237A 08          2509*                  EX	AF,AF'
00237B F1          2510*                  POP	AF
00237C C1          2511*                  POP	BC
00237D D1          2512*                  POP	DE
00237E DD E3       2513*                  EX	(SP),IX
002380 D5          2514*                  PUSH	DE
002381 C5          2515*                  PUSH	BC
002382 F5          2516*                  PUSH	AF
002383 08          2517*                  EX	AF,AF'
002384 D9          2518*                  EXX
002385             2519*  ;
002385 E1          2520*                  POP	HL		;2
002386 D1          2521*                  POP	DE		;1 Outer loop counter
002387 C1          2522*                  POP	BC		;0
002388 1B          2523*                  DEC	DE		;Count outer loops
002389             2524*  ;
002389             2525*  ; Adjust IX & IY
002389             2526*  ;
002389 C5          2527*                  PUSH	BC
00238A D5          2528*                  PUSH	DE
00238B E5          2529*                  PUSH	HL
00238C 4F          2530*                  LD	C,A
00238D 06 00       2531*                  LD	B,0
00238F FD 09       2532*                  ADD	IY,BC
002391 F5          2533*                  PUSH	AF
002392 E5          2534*                  PUSH	HL
002393 CD E6 36    2535*                  CALL	X14OR5
002396 C1          2536*                  POP	BC
002397 CD C9 23    2537*                  CALL	MOD16
00239A F1          2538*                  POP	AF
00239B B7          2539*                  OR	A
00239C 01 00 00    2540*                  LD	BC,0
00239F ED 42       2541*                  SBC	HL,BC
0023A1 E1          2542*                  POP	HL
0023A2 D1          2543*                  POP	DE
0023A3 C1          2544*                  POP	BC
0023A4 20 15       2545*                  JR	NZ,MODNZ
0023A6 D5          2546*                  PUSH	DE
0023A7 E5          2547*                  PUSH	HL
0023A8 EB          2548*                  EX	DE,HL
0023A9 FD E5       2549*                  PUSH	IY
0023AB E1          2550*                  POP	HL
0023AC B7          2551*                  OR	A
0023AD ED 52       2552*                  SBC	HL,DE
0023AF E5          2553*                  PUSH	HL
0023B0 FD E1       2554*                  POP	IY
0023B2 50          2555*                  LD	D,B
0023B3 59          2556*                  LD	E,C
0023B4 CD E6 36    2557*                  CALL	X14OR5
0023B7 DD 19       2558*                  ADD	IX,DE
0023B9 E1          2559*                  POP	HL
0023BA D1          2560*                  POP	DE
0023BB             2561*  MODNZ:
0023BB             2562*  ;
0023BB             2563*  ; Count outer loops:
0023BB             2564*  ;
0023BB 1C          2565*                  INC	E
0023BC 1D          2566*                  DEC	E
0023BD C2 FD 22    2567*                  JP	NZ,OUTER
0023C0 14          2568*                  INC	D
0023C1 15          2569*                  DEC	D
0023C2 C2 FD 22    2570*                  JP	NZ,OUTER
0023C5             2571*  ;
0023C5             2572*  ; Exit:
0023C5             2573*  ;
0023C5 E1          2574*                  POP	HL
0023C6 FD E1       2575*                  POP	IY
0023C8 C9          2576*                  RET
0023C9             2577*  ;
0023C9             2578*  ; HL = DE MOD BC
0023C9             2579*  ;
0023C9 AF          2580*  MOD16:          XOR	A
0023CA 67          2581*                  LD	H,A
0023CB 6F          2582*                  LD	L,A
0023CC 3E 11       2583*                  LD	A,17
0023CE ED 42       2584*  MOD160:         SBC	HL,BC
0023D0 30 01       2585*                  JR	NC,MOD161
0023D2 09          2586*                  ADD	HL,BC
0023D3 3F          2587*  MOD161:         CCF
0023D4 CB 13       2588*                  RL	E
0023D6 CB 12       2589*                  RL	D
0023D8 3D          2590*                  DEC	A
0023D9 C8          2591*                  RET	Z
0023DA ED 6A       2592*                  ADC	HL,HL
0023DC 18 F0       2593*                  JR	MOD160
0023DE             2594*  ;
0023DE             2595*  ;                END
0023DE             2596*  ;    include "eval.inc"
0023DE             0017       include "exec.asm"
0023DE             0001*  ;
0023DE             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
0023DE             0003*  ;
0023DE             0004*                  .ASSUME ADL = 0
0023DE             0005*  ;	.ORG 0x0000
0023DE             0006*  ;                SEGMENT CODE
0023DE             0007*  ;
0023DE             0008*  ;BBC BASIC INTERPRETER - Z80 VERSION
0023DE             0009*  ;STATEMENT EXECUTION MODULE - "EXEC"
0023DE             0010*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
0023DE             0011*  ;
0023DE             0012*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
0023DE             0013*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
0023DE             0014*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
0023DE             0015*  ;
0023DE             0016*  ;VERSION 2.1, 22-01-1984
0023DE             0017*  ;VERSION 3.1, 11-06-1987
0023DE             0018*  ;VERSION 5.0, 12-07-2024
0023DE             0019*  ;
0023DE             0020*  ;                XDEF	XEQ
0023DE             0021*  ;                XDEF	RUN0
0023DE             0022*  ;                XDEF	CHAIN0
0023DE             0023*  ;                XDEF	CHECK
0023DE             0024*  ;                XDEF	MUL16
0023DE             0025*  ;                XDEF	X14OR5
0023DE             0026*  ;                XDEF	TERMQ
0023DE             0027*  ;                XDEF	STOREN
0023DE             0028*  ;                XDEF	STORE4
0023DE             0029*  ;                XDEF	STORE5
0023DE             0030*  ;                XDEF	STACCS
0023DE             0031*  ;                XDEF	SPACES
0023DE             0032*  ;                XDEF	FN
0023DE             0033*  ;                XDEF	USR
0023DE             0034*  ;                XDEF	ESCAPE
0023DE             0035*  ;                XDEF	SYNTAX
0023DE             0036*  ;                XDEF	CHANEL
0023DE             0037*  ;                XDEF	CHNL
0023DE             0038*  ;                XDEF	VAR_
0023DE             0039*  ;                XDEF	TABIT
0023DE             0040*  ;                XDEF	MODIFY
0023DE             0041*  ;                XDEF	MODIFS
0023DE             0042*  ;
0023DE             0043*  ;                XREF	ASSEM
0023DE             0044*  ;                XREF	ERROR_
0023DE             0045*  ;                XREF	REPORT
0023DE             0046*  ;                XREF	WARM
0023DE             0047*  ;                XREF	CLOOP
0023DE             0048*  ;                XREF	SAYLN
0023DE             0049*  ;                XREF	LOAD0
0023DE             0050*  ;                XREF	CRLF
0023DE             0051*  ;                XREF	PBCDL
0023DE             0052*  ;                XREF	TELL
0023DE             0053*  ;                XREF	FINDL
0023DE             0054*  ;                XREF	SETLIN
0023DE             0055*  ;                XREF	CLEAR
0023DE             0056*  ;                XREF	GETVAR
0023DE             0057*  ;                XREF	PUTVAR
0023DE             0058*  ;                XREF	GETDEF
0023DE             0059*  ;                XREF	LOCATE
0023DE             0060*  ;                XREF	CREATE
0023DE             0061*  ;                XREF	OUTCHR
0023DE             0062*  ;                XREF	EXTERR
0023DE             0063*  ;                XREF	BYE
0023DE             0064*  ;                XREF	NXT
0023DE             0065*  ;                XREF	NLIST
0023DE             0066*  ;                XREF	CSRON
0023DE             0067*  ;                XREF	CSROFF
0023DE             0068*  ;
0023DE             0069*  ;                XREF	OSWRCH
0023DE             0070*  ;                XREF	OSLINE
0023DE             0071*  ;                XREF	OSSHUT
0023DE             0072*  ;                XREF	OSBPUT
0023DE             0073*  ;                XREF	OSBGET
0023DE             0074*  ;                XREF	CLRSCN
0023DE             0075*  ;                XREF	PUTCSR
0023DE             0076*  ;                XREF	PUTIME
0023DE             0077*  ;                XREF	PUTIMS
0023DE             0078*  ;                XREF	PUTPTR
0023DE             0079*  ;                XREF	OSCALL
0023DE             0080*  ;                XREF	OSCLI
0023DE             0081*  ;                XREF	TRAP
0023DE             0082*  ;
0023DE             0083*  ;                XREF	SOUND
0023DE             0084*  ;                XREF	CLG
0023DE             0085*  ;                XREF	DRAW
0023DE             0086*  ;                XREF	ENVEL
0023DE             0087*  ;                XREF	GCOL
0023DE             0088*  ;                XREF	MODE
0023DE             0089*  ;                XREF	MOVE
0023DE             0090*  ;                XREF	PLOT
0023DE             0091*  ;                XREF	COLOUR
0023DE             0092*  ;                XREF	CIRCLE
0023DE             0093*  ;                XREF	ELLIPS
0023DE             0094*  ;                XREF	FILL
0023DE             0095*  ;                XREF	MOUSE
0023DE             0096*  ;                XREF	ORIGIN
0023DE             0097*  ;                XREF	RECTAN
0023DE             0098*  ;                XREF	LINE
0023DE             0099*  ;                XREF	WAIT
0023DE             0100*  ;                XREF	TINT
0023DE             0101*  ;                XREF	SYS
0023DE             0102*  ;
0023DE             0103*  ;                XREF	STR
0023DE             0104*  ;                XREF	HEXSTR
0023DE             0105*  ;                XREF	EXPR
0023DE             0106*  ;                XREF	EXPRN
0023DE             0107*  ;                XREF	EXPRI
0023DE             0108*  ;                XREF	EXPRS
0023DE             0109*  ;                XREF	ITEMI
0023DE             0110*  ;                XREF	CONS
0023DE             0111*  ;                XREF	LOADS
0023DE             0112*  ;                XREF	VAL0
0023DE             0113*  ;                XREF	SFIX
0023DE             0114*  ;                XREF	TEST
0023DE             0115*  ;                XREF	LOAD4
0023DE             0116*  ;                XREF	LOADN
0023DE             0117*  ;                XREF	DLOAD5
0023DE             0118*  ;                XREF	FPP
0023DE             0119*  ;                XREF	COMMA
0023DE             0120*  ;                XREF	BRAKET
0023DE             0121*  ;                XREF	PUSHS
0023DE             0122*  ;                XREF	POPS
0023DE             0123*  ;                XREF	ZERO
0023DE             0124*  ;                XREF	SCP
0023DE             0125*  ;                XREF	LETARR
0023DE             0126*  ;
0023DE             0127*  ;                XREF	ACCS
0023DE             0128*  ;                XREF	PAGE_
0023DE             0129*  ;                XREF	LOMEM
0023DE             0130*  ;                XREF	HIMEM
0023DE             0131*  ;                XREF	FREE
0023DE             0132*  ;                XREF	BUFFER
0023DE             0133*  ;                XREF	ERRTRP
0023DE             0134*  ;                XREF	ONERSP
0023DE             0135*  ;                XREF	CURLIN
0023DE             0136*  ;                XREF	COUNT
0023DE             0137*  ;                XREF	WIDTH
0023DE             0138*  ;                XREF	STAVAR
0023DE             0139*  ;                XREF	DATPTR
0023DE             0140*  ;                XREF	RANDOM
0023DE             0141*  ;                XREF	TRACEN
0023DE             0142*  ;                XREF	LISTON
0023DE             0143*  ;                XREF	PC
0023DE             0144*  ;                XREF	OC
0023DE             0145*  ;
0023DE             0146*  ; LF             EQU	0AH	; in equs.inc
0023DE             0147*  ; CR             EQU	0DH	; in equs.inc
0023DE             0148*  ; IN main.asm
0023DE             0149*  ; TAND:           EQU	80H
0023DE             0150*  ; TOR:            EQU	84H
0023DE             0151*  ; TERROR:         EQU	85H
0023DE             0152*  ; TLINE:          EQU	86H
0023DE             0153*  TOFF:           EQU	87H
0023DE             0154*  TSTEP:          EQU	88H
0023DE             0155*  TSPC:           EQU	89H
0023DE             0156*  TTAB:           EQU	8AH
0023DE             0157*  ; TELSE:          EQU	8BH
0023DE             0158*  ; TTHEN:          EQU	8CH
0023DE             0159*  ; TLINO:          EQU	8DH
0023DE             0160*  ; TTO:            EQU	0B8H
0023DE             0161*  ; TBY:           EQU	0C0H
0023DE             0162*  ; TWHILE:         EQU	0C7H
0023DE             0163*  ; TWHEN:          EQU	0C9H
0023DE             0164*  ; TOF:            EQU	0CAH
0023DE             0165*  ; TENDCASE:       EQU	0CBH
0023DE             0166*  ; TOTHERWISE:     EQU	0CCH
0023DE             0167*  ; TENDIF:         EQU	0CDH
0023DE             0168*  ; TENDWHILE:      EQU	0CEH
0023DE             0169*  ; TCALL:          EQU	0D6H
0023DE             0170*  ; TDATA:          EQU	0DCH
0023DE             0171*  ; TDEF:           EQU	0DDH
0023DE             0172*  ; TFOR:           EQU	0E3H
0023DE             0173*  ; TGOSUB:         EQU	0E4H
0023DE             0174*  ; TGOTO:          EQU	0E5H
0023DE             0175*  ; TLOCAL:         EQU	0EAH
0023DE             0176*  ; TNEXT:          EQU	0EDH
0023DE             0177*  ; TON:            EQU	0EEH
0023DE             0178*  ; TPROC:          EQU	0F2H
0023DE             0179*  ; TREM:           EQU	0F4H
0023DE             0180*  ; TREPEAT:        EQU	0F5H
0023DE             0181*  TRETURN:        EQU	0F8H
0023DE             0182*  TSTOP:          EQU	0FAH
0023DE             0183*  ; TUNTIL:         EQU	0FDH
0023DE             0184*  ; TEXIT:          EQU	10H
0023DE             0185*  ; END in main.asm
0023DE             0186*  ;
0023DE B0 30       0187*  CMDTAB:         DW	LEFTSL
0023E0 C4 30       0188*                  DW	MIDSL
0023E2 BA 30       0189*                  DW	RITESL
0023E4 19 26       0190*                  DW	SYNTAX	;STR$
0023E6 19 26       0191*                  DW	SYNTAX	;STRING$
0023E8 19 26       0192*                  DW	SYNTAX	;EOF
0023EA 19 26       0193*                  DW	SYNTAX	;SUM
0023EC 5F 2E       0194*                  DW	WHILE
0023EE 90 2D       0195*                  DW	CASE
0023F0 19 26       0196*                  DW	SYNTAX	;WHEN
0023F2 19 26       0197*                  DW	SYNTAX	;OF
0023F4 D2 24       0198*                  DW	XEQ	;ENDCASE
0023F6 19 26       0199*                  DW	SYNTAX	;OTHERWISE
0023F8 D2 24       0200*                  DW	XEQ	;ENDIF
0023FA 7C 2E       0201*                  DW	ENDWHI	;ENDWHILE
0023FC 3A 2F       0202*                  DW	PTR
0023FE 4E 2F       0203*                  DW	PAGEV
002400 5C 2F       0204*                  DW	TIMEV
002402 7B 2F       0205*                  DW	LOMEMV
002404 8D 2F       0206*                  DW	HIMEMV
002406 08 01       0207*                  DW	SOUND
002408 0C 30       0208*                  DW	BPUT
00240A 45 30       0209*                  DW	CALL
00240C 85 24       0210*                  DW	CHAIN
00240E CF 2E       0211*                  DW	CLR
002410 04 30       0212*                  DW	CLOSE
002412 4C 01       0213*                  DW	CLG
002414 AE 2E       0214*                  DW	CLS
002416 6A 25       0215*                  DW	REM		;DATA
002418 6A 25       0216*                  DW	REM		;DEF
00241A 77 26       0217*                  DW	DIM
00241C 53 02       0218*                  DW	DRAW
00241E 0C 25       0219*                  DW	END
002420 B6 2B       0220*                  DW	ENDPRO
002422 DA 00       0221*                  DW	ENVEL
002424 4D 29       0222*                  DW	FORex
002426 04 29       0223*                  DW	GOSUB
002428 ED 28       0224*                  DW	GOTO
00242A A4 01       0225*                  DW	GCOL
00242C 02 2D       0226*                  DW	IF_
00242E 1B 2C       0227*                  DW	INPUT
002430 DA 25       0228*                  DW	LET
002432 4C 2B       0229*                  DW	LOCAL
002434 3C 01       0230*                  DW	MODE
002436 4F 02       0231*                  DW	MOVE
002438 9A 29       0232*                  DW	NEXT
00243A 73 28       0233*                  DW	ON
00243C D5 2F       0234*                  DW	VDU
00243E 5B 02       0235*                  DW	PLOT
002440 7F 27       0236*                  DW	PRINT
002442 20 2A       0237*                  DW	PROC
002444 B9 2C       0238*                  DW	READ
002446 6A 25       0239*                  DW	REM
002448 1E 29       0240*                  DW	REPEAT
00244A CA 2E       0241*                  DW	REPOR
00244C F5 2E       0242*                  DW	RESTOR
00244E 0F 29       0243*                  DW	RETURN
002450 80 24       0244*                  DW	RUN
002452 B7 2E       0245*                  DW	STOP
002454 64 01       0246*                  DW	COLOUR
002456 BC 2F       0247*                  DW	TRACE
002458 26 29       0248*                  DW	UNTIL
00245A B2 2F       0249*                  DW	WIDTHV
00245C 41 25       0250*                  DW	CLI		;OSCLI
00245E 6A 25       0251*                  DW	REM		;NUL
002460 F2 01       0252*                  DW	CIRCLE
002462 1E 02       0253*                  DW	ELLIPS
002464 57 02       0254*                  DW	FILL
002466 11 03       0255*                  DW	MOUSE
002468 53 01       0256*                  DW	ORIGIN
00246A 49 16       0257*                  DW	BYE		;QUIT
00246C 90 02       0258*                  DW	RECTAN
00246E 97 25       0259*                  DW	SWAPex
002470 E8 03       0260*                  DW	SYS
002472 E8 03       0261*                  DW	TINT
002474 50 03       0262*                  DW	WAIT
002476 19 26       0263*                  DW	SYNTAX		;INSTALL
002478 6A 25       0264*                  DW	REM		;CR
00247A D6 31       0265*                  DW	PUT		;Token changed
00247C 19 26       0266*                  DW	SYNTAX		;BY
00247E 5C 31       0267*                  DW	EXITex
002480             0268*  ;
002480             0269*  CMDTAB_END:     EQU	$
002480             0270*  ; TLAST:          EQU	TCMD-128+(CMDTAB_END-CMDTAB)/2
002480             0271*  TLAST:          EQU	CMDTAB_END-CMDTAB/2+TCMD-128
002480             0272*  ;
002480 CD 6F 35    0273*  RUN:            CALL	TERMQ
002483 28 0D       0274*                  JR	Z,RUN0
002485 CD 75 18    0275*  CHAIN:          CALL	EXPRS
002488 3E 0D       0276*                  LD	A,CR
00248A 12          0277*                  LD	(DE),A
00248B ED 7B E2 54 0278*  CHAIN0:         LD	SP,(HIMEM)
00248F CD 39 40    0279*                  CALL	LOAD0
002492 ED 7B E2 54 0280*  RUN0:           LD	SP,(HIMEM)	;PREPARE FOR RUN
002496 DD 21 F6 54 0281*                  LD	IX,RANDOM
00249A ED 5F       0282*  RAND:           LD	A,R		;RANDOMISE (CARE!)
00249C 28 FC       0283*                  JR	Z,RAND
00249E 07          0284*                  RLCA
00249F 07          0285*                  RLCA
0024A0 DD 77 03    0286*                  LD	(IX+3),A
0024A3 9F          0287*                  SBC	A,A
0024A4 DD 77 04    0288*                  LD	(IX+4),A
0024A7 CD 7C 40    0289*                  CALL	CLEAR
0024AA 21 00 00    0290*                  LD	HL,0
0024AD 22 EA 54    0291*                  LD	(ERRTRP),HL
0024B0 2A DC 54    0292*                  LD	HL,(PAGE_)
0024B3 CD 32 36    0293*                  CALL	DSRCH		;LOOK FOR "DATA"
0024B6 22 F0 54    0294*                  LD	(DATPTR),HL	;SET DATA POINTER
0024B9 FD 2A DC 54 0295*                  LD	IY,(PAGE_)
0024BD CD 14 25    0296*  XEQ0:           CALL	NEWLIN
0024C0 FD 7E 00    0297*                  LD	A,(IY)
0024C3 FE 8B       0298*                  CP	TELSE
0024C5 CA 69 2D    0299*                  JP	Z,MELSE		;ELSE
0024C8 FE C9       0300*                  CP	TWHEN
0024CA CA 7C 2D    0301*                  JP	Z,WHEN		;WHEN
0024CD FE CC       0302*                  CP	TOTHERWISE
0024CF CA 7C 2D    0303*                  JP	Z,WHEN
0024D2 FD 22 F4 54 0304*  XEQ:            LD	(CURLIN),IY	;ERROR POINTER
0024D6 CD 50 12    0305*                  CALL	TRAP		;CHECK KEYBOARD
0024D9 CD 44 45    0306*  XEQ1:           CALL	NXT
0024DC FD 23       0307*                  INC	IY
0024DE FE 3A       0308*                  CP	':'		;SEPARATOR
0024E0 28 F7       0309*                  JR	Z,XEQ1
0024E2 FE 0D       0310*                  CP	CR
0024E4 28 D7       0311*                  JR	Z,XEQ0		;NEW PROGRAM LINE
0024E6 FE 98       0312*                  CP	TLAST
0024E8 EA CC 25    0313*                  JP	PE,LET0		;IMPLIED LET
0024EB D6 C7       0314*                  SUB	TCMD
0024ED FA 4F 25    0315*                  JP	M,EXTRAS
0024F0 87          0316*                  ADD	A,A
0024F1 4F          0317*                  LD	C,A
0024F2 06 00       0318*                  LD	B,0
0024F4 21 DE 23    0319*                  LD	HL,CMDTAB
0024F7 09          0320*                  ADD	HL,BC
0024F8 7E          0321*                  LD	A,(HL)		;TABLE ENTRY
0024F9 23          0322*                  INC	HL
0024FA 66          0323*                  LD	H,(HL)
0024FB 6F          0324*                  LD	L,A
0024FC CD 44 45    0325*                  CALL	NXT
0024FF E9          0326*                  JP	(HL)		;EXECUTE STATEMENT
002500             0327*  ;
002500             0328*  ;END
002500             0329*  ;
002500 FD E5       0330*  ENDIM:          PUSH	IY
002502 E1          0331*                  POP	HL
002503 ED 4B DC 54 0332*                  LD	BC,(PAGE_)
002507 ED 42       0333*                  SBC	HL,BC		;IMMEDIATE MODE ?
002509 DA E9 37    0334*                  JP	C,CLOOP
00250C 1E 00       0335*  END:            LD	E,0
00250E CD 70 12    0336*                  CALL	OSSHUT		;CLOSE ALL FILES
002511 C3 E8 37    0337*                  JP	WARM		;"Ready"
002514             0338*  ;
002514 FD 7E 00    0339*  NEWLIN:         LD	A,(IY+0)	;A=LINE LENGTH
002517 01 03 00    0340*                  LD	BC,3
00251A FD 09       0341*                  ADD	IY,BC
00251C B7          0342*                  OR	A
00251D 28 E1       0343*                  JR	Z,ENDIM		;LENGTH=0, EXITex
00251F 2A E6 54    0344*                  LD	HL,(TRACEN)
002522 7C          0345*                  LD	A,H
002523 B5          0346*                  OR	L
002524 C8          0347*                  RET	Z
002525 FD 56 FF    0348*                  LD	D,(IY-1)	;DE = LINE NUMBER
002528 FD 5E FE    0349*                  LD	E,(IY-2)
00252B ED 52       0350*                  SBC	HL,DE
00252D D8          0351*                  RET	C
00252E EB          0352*                  EX	DE,HL
00252F 3E 5B       0353*                  LD	A,'['		;TRACE
002531 CD 3B 41    0354*                  CALL	OUTCHR
002534 CD CB 41    0355*                  CALL	PBCDL
002537 3E 5D       0356*                  LD	A,']'
002539 CD 3B 41    0357*                  CALL	OUTCHR
00253C 3E 20       0358*                  LD	A,' '
00253E C3 3B 41    0359*                  JP	OUTCHR
002541             0360*  ;
002541             0361*  ;ROUTINES FOR EACH STATEMENT:
002541             0362*  ;
002541             0363*  ;OSCLI
002541             0364*  ;
002541 CD 75 18    0365*  CLI:            CALL	EXPRS
002544 3E 0D       0366*                  LD	A,CR
002546 12          0367*                  LD	(DE),A
002547 21 00 52    0368*                  LD	HL,ACCS
00254A CD D0 15    0369*                  CALL	OSCLI
00254D 18 83       0370*                  JR	XEQ
00254F             0371*  ;
00254F FE C4       0372*  EXTRAS:         CP	TELSE-TCMD
002551 28 17       0373*                  JR	Z,REM		;ELSE
002553 FE BE       0374*                  CP	TERROR-TCMD
002555 28 21       0375*                  JR	Z,THROW		;ERROR
002557 FE BF       0376*                  CP	TLINE-TCMD
002559 CA DC 01    0377*                  JP	Z,LINE		;LINE
00255C FE C0       0378*                  CP	TOFF-TCMD
00255E CA C5 01    0379*                  JP	Z,CSROFF	;OFF
002561 C3 19 26    0380*                  JP	SYNTAX
002564             0381*  ;
002564             0382*  ;REM, *
002564             0383*  ;
002564 FD E5       0384*  EXT:            PUSH	IY
002566 E1          0385*                  POP	HL
002567 CD D0 15    0386*                  CALL	OSCLI
00256A FD E5       0387*  REM:            PUSH	IY
00256C E1          0388*                  POP	HL
00256D 3E 0D       0389*                  LD	A,CR
00256F 47          0390*                  LD	B,A
002570 ED B1       0391*                  CPIR			;FIND LINE END
002572 E5          0392*                  PUSH	HL
002573 FD E1       0393*                  POP	IY
002575 C3 BD 24    0394*                  JP	XEQ0
002578             0395*  ;
002578             0396*  ;ERROR num,string$
002578             0397*  ;
002578 CD 6C 18    0398*  THROW:          CALL	EXPRI
00257B D9          0399*                  EXX
00257C E5          0400*                  PUSH	HL
00257D D9          0401*                  EXX
00257E CD DB 20    0402*                  CALL	COMMA
002581 CD 75 18    0403*                  CALL	EXPRS
002584 E1          0404*                  POP	HL
002585 AF          0405*                  XOR	A
002586 12          0406*                  LD	(DE),A
002587 7D          0407*                  LD	A,L
002588 21 00 52    0408*                  LD	HL,ACCS
00258B 11 00 53    0409*                  LD	DE,BUFFER
00258E D5          0410*                  PUSH	DE
00258F 01 00 01    0411*                  LD	BC,256
002592 ED B0       0412*                  LDIR
002594 C3 8E 3F    0413*                  JP	EXTERR
002597             0414*  ;
002597             0415*  ; SWAP
002597             0416*  ;
002597 CD 1C 42    0417*  SWAPex:           CALL	GETVAR
00259A 20 0B       0418*                  JR	NZ,SWAPNZ
00259C F5          0419*                  PUSH	AF
00259D E5          0420*                  PUSH	HL
00259E CD DB 20    0421*                  CALL	COMMA
0025A1 CD 44 45    0422*                  CALL	NXT
0025A4 CD 1C 42    0423*                  CALL	GETVAR
0025A7 20 6D       0424*  SWAPNZ:         JR	NZ,NOSUCH
0025A9 D1          0425*                  POP	DE
0025AA C1          0426*                  POP	BC
0025AB B8          0427*                  CP	B
0025AC 20 74       0428*                  JR	NZ,MISMAT
0025AE E6 0F       0429*                  AND	00001111B
0025B0 28 70       0430*                  JR	Z,MISMAT
0025B2 78          0431*                  LD	A,B
0025B3 E6 C0       0432*                  AND	11000000B
0025B5 28 0A       0433*                  JR	Z,SWAP1ex
0025B7 06 02       0434*                  LD	B,2
0025B9 F2 C1 25    0435*                  JP	P,SWAP1ex
0025BC EA C1 25    0436*                  JP	PE,SWAP1ex
0025BF 06 04       0437*                  LD	B,4
0025C1 4E          0438*  SWAP1ex:          LD	C,(HL)
0025C2 1A          0439*                  LD	A,(DE)
0025C3 77          0440*                  LD	(HL),A
0025C4 79          0441*                  LD	A,C
0025C5 12          0442*                  LD	(DE),A
0025C6 13          0443*                  INC	DE
0025C7 23          0444*                  INC	HL
0025C8 10 F7       0445*                  DJNZ	SWAP1ex
0025CA 18 28       0446*                  JR	XEQGO4
0025CC             0447*  ;
0025CC             0448*  ;[LET] var = expr
0025CC             0449*  ;
0025CC FE 2A       0450*  LET0:           CP	'*'
0025CE 28 94       0451*                  JR	Z,EXT
0025D0 FE 3D       0452*                  CP	'='
0025D2 28 71       0453*                  JR	Z,FNEND
0025D4 FE 5B       0454*                  CP	'['
0025D6 28 52       0455*                  JR	Z,ASM
0025D8 FD 2B       0456*                  DEC	IY
0025DA CD E8 31    0457*  LET:            CALL	ASSIGN
0025DD CA D2 24    0458*                  JP	Z,XEQ
0025E0 38 37       0459*                  JR	C,SYNTAX	;"Syntax error"
0025E2 F2 34 21    0460*                  JP	P,LETARR	;Numeric array
0025E5 EA 34 21    0461*                  JP	PE,LETARR	;String array
0025E8 7A          0462*                  LD	A,D		;Type
0025E9 D5          0463*                  PUSH	DE
0025EA E5          0464*                  PUSH	HL
0025EB CD 75 18    0465*                  CALL	EXPRS
0025EE DD E1       0466*                  POP	IX
0025F0 E1          0467*                  POP	HL
0025F1 CD 51 32    0468*                  CALL	MODIFS
0025F4 C3 D2 24    0469*  XEQGO4:         JP	XEQ
0025F7             0470*  ;
0025F7             0471*  ; GETSTR - Get string variable
0025F7             0472*  ;   Inputs: IY = text pointer
0025F7             0473*  ;  Outputs: B = type
0025F7             0474*  ;           Z-flag set if comma
0025F7             0475*  ;
0025F7 CD 1C 42    0476*  GETSTR:         CALL	GETVAR
0025FA 20 1A       0477*                  JR	NZ,NOSUCH
0025FC 47          0478*                  LD	B,A
0025FD E6 C0       0479*                  AND	11000000B
0025FF F2 22 26    0480*                  JP	P,MISMAT
002602 EA 1F 26    0481*                  JP	PE,BADUSE
002605 CB 40       0482*                  BIT	0,B
002607 28 19       0483*                  JR	Z,MISMAT
002609 CD 44 45    0484*                  CALL	NXT
00260C FE 2C       0485*                  CP	','
00260E C9          0486*                  RET
00260F             0487*  ;
00260F CD 1C 42    0488*  VAR_:           CALL	GETVAR
002612 C8          0489*                  RET	Z
002613 D2 06 42    0490*                  JP	NC,PUTVAR
002616 3E 1A       0491*  NOSUCH:         LD	A,26		;'No such variable'
002618 21          0492*                  DB	21H
002619 3E 10       0493*  SYNTAX:         LD	A,16		;"Syntax error"
00261B 21          0494*                  DB	21H
00261C 3E 11       0495*  ESCAPE:         LD	A,17		;"Escape"
00261E 21          0496*                  DB	21H
00261F 3E 0E       0497*  BADUSE:         LD	A,14		;'Bad use of array'
002621 21          0498*                  DB	21H
002622 3E 06       0499*  MISMAT:         LD	A,6		;'Type mismatch'
002624 C3 7D 3F    0500*  ERROR0ex:         JP	ERROR_
002627             0501*  ;
002627 CD 14 25    0502*  ASM0:           CALL	NEWLIN
00262A FD 22 F4 54 0503*  ASM:            LD	(CURLIN),IY
00262E CD 50 12    0504*                  CALL	TRAP
002631 CD F2 03    0505*                  CALL	ASSEM
002634 38 E3       0506*                  JR	C,SYNTAX
002636 FE 0D       0507*                  CP	CR
002638 28 ED       0508*                  JR	Z,ASM0
00263A 21 FE 54    0509*                  LD	HL,LISTON
00263D 7E          0510*                  LD	A,(HL)
00263E E6 0F       0511*                  AND	0FH
002640 F6 30       0512*                  OR	30H
002642 77          0513*                  LD	(HL),A
002643 18 AF       0514*                  JR	XEQGO4
002645             0515*  ;
002645             0516*  ;=
002645             0517*  ;
002645 CD 3B 17    0518*  FNEND:          CALL	EXPR		;FUNCTION RESULT
002648 08          0519*                  EX	AF,AF'
002649 87          0520*                  ADD	A,A
00264A 7B          0521*                  LD	A,E
00264B 38 01       0522*                  JR	C,FNEND1
00264D 79          0523*                  LD	A,C
00264E 08          0524*  FNEND1:         EX	AF,AF'
00264F E5          0525*                  PUSH	HL
002650 D9          0526*                  EXX
002651 C1          0527*                  POP	BC
002652 EB          0528*                  EX	DE,HL		;SAVE RESULT IN A'B'C'D'E'
002653 D9          0529*                  EXX
002654 C1          0530*  FNEND2:         POP	BC
002655 21 20 2A    0531*                  LD	HL,FNCHK
002658 AF          0532*                  XOR	A
002659 ED 42       0533*                  SBC	HL,BC
00265B 28 0A       0534*                  JR	Z,FNEND3
00265D C5          0535*                  PUSH	BC
00265E CD 6A 34    0536*                  CALL	RESLOC
002661 20 F1       0537*                  JR	NZ,FNEND2
002663 3E 07       0538*                  LD	A,7
002665 18 BD       0539*                  JR	ERROR0ex		;"No FN"
002667             0540*  ;
002667 FD E1       0541*  FNEND3:         POP	IY
002669 FD 22 F4 54 0542*                  LD	(CURLIN),IY	;IN CASE OF ERROR
00266D D9          0543*                  EXX
00266E EB          0544*                  EX	DE,HL
00266F C5          0545*                  PUSH	BC
002670 D9          0546*                  EXX
002671 E1          0547*                  POP	HL
002672 08          0548*                  EX	AF,AF'
002673 5F          0549*                  LD	E,A
002674 4F          0550*                  LD	C,A
002675 1F          0551*                  RRA
002676 C9          0552*                  RET
002677             0553*  ;
002677             0554*  ;DIM var(dim1[,dim2[,...]])[,var(...]
002677             0555*  ;DIM var expr[,var expr...]
002677             0556*  ;
002677 FD E5       0557*  DIM:            PUSH	IY
002679 FE 21       0558*                  CP	'!'
00267B CA 48 27    0559*                  JP	Z,DIM4
00267E CD E9 42    0560*                  CALL	LOCATE		;VARIABLE
002681 DA 32 27    0561*                  JP	C,BADDIM
002684 C4 75 43    0562*                  CALL	NZ,CREATE
002687 FD 7E 00    0563*                  LD	A,(IY)
00268A FE 28       0564*                  CP	'('
00268C C2 48 27    0565*                  JP	NZ,DIM4
00268F E5          0566*                  PUSH	HL
002690 DD E1       0567*                  POP	IX
002692 7E          0568*                  LD	A,(HL)
002693 E6 FE       0569*                  AND	0FEH
002695 23          0570*                  INC	HL
002696 B6          0571*                  OR	(HL)
002697 C2 48 27    0572*                  JP	NZ,DIM4
00269A C1          0573*                  POP	BC		;LEVEL STACK
00269B 7A          0574*                  LD	A,D
00269C 2A E0 54    0575*                  LD	HL,(FREE)
00269F E5          0576*                  PUSH	HL
0026A0 DD E3       0577*                  EX	(SP),IX
0026A2 E5          0578*                  PUSH	HL
0026A3 F5          0579*                  PUSH	AF		;SAVE TYPE
0026A4 11 01 00    0580*                  LD	DE,1
0026A7 42          0581*                  LD	B,D		;DIMENSION COUNTER
0026A8 FD 23       0582*  DIM1:           INC	IY
0026AA C5          0583*                  PUSH	BC
0026AB D5          0584*                  PUSH	DE
0026AC DD E5       0585*                  PUSH	IX
0026AE CD 6C 18    0586*                  CALL	EXPRI		;DIMENSION SIZE
0026B1 CB 7C       0587*                  BIT	7,H
0026B3 20 7D       0588*                  JR	NZ,BADDIM
0026B5 D9          0589*                  EXX
0026B6 23          0590*                  INC	HL
0026B7 DD E1       0591*                  POP	IX
0026B9 DD 23       0592*                  INC	IX
0026BB DD 75 00    0593*                  LD	(IX),L		;SAVE SIZE
0026BE DD 23       0594*                  INC	IX
0026C0 DD 74 00    0595*                  LD	(IX),H
0026C3 C1          0596*                  POP	BC
0026C4 CD F6 36    0597*                  CALL	MUL16		;HL=HL*BC
0026C7 38 6C       0598*                  JR	C,NOROOM	;TOO LARGE
0026C9 EB          0599*                  EX	DE,HL		;DE=PRODUCT
0026CA C1          0600*                  POP	BC
0026CB 04          0601*                  INC	B		;DIMENSION COUNTER
0026CC FD 7E 00    0602*                  LD	A,(IY)
0026CF FE 2C       0603*                  CP	','		;ANOTHER
0026D1 28 D5       0604*                  JR	Z,DIM1
0026D3 DD 23       0605*                  INC	IX
0026D5 CD E7 20    0606*                  CALL	BRAKET		;CLOSING BRACKET
0026D8 F1          0607*                  POP	AF		;RESTORE TYPE
0026D9 CD E6 36    0608*                  CALL	X14OR5		;DE=DE*n
0026DC 38 57       0609*                  JR	C,NOROOM
0026DE E1          0610*                  POP	HL
0026DF 70          0611*                  LD	(HL),B		;NO. OF DIMENSIONS
0026E0 DD E3       0612*                  EX	(SP),IX
0026E2 E1          0613*                  POP	HL
0026E3 E6 80       0614*                  AND	80H
0026E5 DD B6 00    0615*                  OR	(IX)		;FLAGS
0026E8             0616*  ;
0026E8             0617*  ;  A = flags: bit 7 = string, bit 0 = LOCAL
0026E8             0618*  ; DE = amount to allocate
0026E8             0619*  ; HL = where to allocate (if not LOCAL)
0026E8             0620*  ; (HL - FREE is size of 'descriptor')
0026E8             0621*  ; IX = where to store pointer
0026E8             0622*  ;
0026E8 E5          0623*  DIM3:           PUSH	HL
0026E9 24          0624*                  INC	H		;Safety margin
0026EA 19          0625*                  ADD	HL,DE
0026EB 38 48       0626*                  JR	C,NOROOM
0026ED ED 72       0627*                  SBC	HL,SP
0026EF 30 44       0628*                  JR	NC,NOROOM
0026F1 E1          0629*                  POP	HL
0026F2 E5          0630*                  PUSH	HL
0026F3 ED 4B E0 54 0631*                  LD	BC,(FREE)
0026F7 B7          0632*                  OR	A
0026F8 ED 42       0633*                  SBC	HL,BC
0026FA 44          0634*                  LD	B,H
0026FB 4D          0635*                  LD	C,L
0026FC E1          0636*                  POP	HL
0026FD ED 42       0637*                  SBC	HL,BC
0026FF CB 47       0638*                  BIT	0,A
002701 28 12       0639*                  JR	Z,ARRCHK	;NOT LOCAL
002703 21 00 00    0640*                  LD	HL,0
002706 ED 52       0641*                  SBC	HL,DE
002708 B7          0642*                  OR	A
002709 ED 42       0643*                  SBC	HL,BC
00270B 39          0644*                  ADD	HL,SP
00270C 28 07       0645*                  JR	Z,ARRCHK	;RESERVE NOTHING
00270E F9          0646*                  LD	SP,HL
00270F D5          0647*                  PUSH	DE
002710 C5          0648*                  PUSH	BC
002711 F5          0649*                  PUSH	AF
002712 CD 15 27    0650*                  CALL	ARRCHK
002715 DD 75 00    0651*  ARRCHK:         LD	(IX+0),L	;SAVE POINTER
002718 DD 74 01    0652*                  LD	(IX+1),H
00271B 78          0653*                  LD	A,B
00271C B1          0654*                  OR	C
00271D 28 09       0655*                  JR	Z,DIM2
00271F D5          0656*                  PUSH	DE
002720 EB          0657*                  EX	DE,HL
002721 2A E0 54    0658*                  LD	HL,(FREE)
002724 ED B0       0659*                  LDIR			;COPY DESCRIPTOR
002726 EB          0660*                  EX	DE,HL
002727 D1          0661*                  POP	DE
002728 7A          0662*  DIM2:           LD	A,D
002729 B3          0663*                  OR	E
00272A 28 0E       0664*                  JR	Z,DIM5
00272C 36 00       0665*                  LD	(HL),0		;INITIALISE ARRAY
00272E 23          0666*                  INC	HL
00272F 1B          0667*                  DEC	DE
002730 18 F6       0668*                  JR	DIM2
002732             0669*  ;
002732 3E 0A       0670*  BADDIM:         LD	A,10		;"Bad DIM"
002734 21          0671*                  DB	21H
002735 3E 0B       0672*  NOROOM:         LD	A,11		;"DIM space"
002737 C3 7D 3F    0673*  ERROR1ex:         JP	ERROR_
00273A             0674*  ;
00273A ED 72       0675*  DIM5:           SBC	HL,SP
00273C 30 04       0676*                  JR	NC,DIM7		;LOCAL
00273E 39          0677*                  ADD	HL,SP
00273F 22 E0 54    0678*                  LD	(FREE),HL
002742 CD 39 45    0679*  DIM7:           CALL	NLIST		;ANOTHER VARIABLE?
002745 C3 77 26    0680*                  JP	DIM
002748             0681*  ;
002748 FD E1       0682*  DIM4:           POP	IY
00274A CD 0F 26    0683*                  CALL	VAR_
00274D B7          0684*                  OR	A
00274E 28 E2       0685*                  JR	Z,BADDIM
002750 FA 32 27    0686*                  JP	M,BADDIM
002753 CB 77       0687*                  BIT	6,A
002755 20 DB       0688*                  JR	NZ,BADDIM
002757 47          0689*                  LD	B,A		;TYPE
002758 CD 44 45    0690*                  CALL	NXT
00275B FE EA       0691*                  CP	TLOCAL
00275D 3E 00       0692*                  LD	A,0		;PRESET TO NOT LOCAL
00275F 20 03       0693*                  JR	NZ,DIM8
002761 FD 23       0694*                  INC	IY
002763 3C          0695*                  INC	A		;FLAG LOCAL
002764 F5          0696*  DIM8:           PUSH	AF
002765 78          0697*                  LD	A,B		;TYPE
002766 D9          0698*                  EXX
002767 21 00 00    0699*                  LD	HL,0
00276A 4C          0700*                  LD	C,H
00276B CD 29 32    0701*                  CALL	STOREN		;RESERVED AREA
00276E DD E5       0702*                  PUSH	IX
002770 CD 6C 18    0703*                  CALL	EXPRI
002773 DD E1       0704*                  POP	IX
002775 D9          0705*                  EXX
002776 23          0706*                  INC	HL
002777 EB          0707*                  EX	DE,HL
002778 2A E0 54    0708*                  LD	HL,(FREE)
00277B F1          0709*                  POP	AF		;LOCAL FLAG
00277C C3 E8 26    0710*                  JP	DIM3
00277F             0711*  ;
00277F             0712*  ;PRINT list...
00277F             0713*  ;PRINT #channel,list...
00277F             0714*  ;
00277F FE 23       0715*  PRINT:          CP	'#'
002781 20 64       0716*                  JR	NZ,PRINT0
002783 CD 14 37    0717*                  CALL	CHNL		;CHANNEL NO. = E
002786 CD 39 45    0718*  PRNTN1:         CALL	NLIST
002789 D5          0719*                  PUSH	DE
00278A CD 3B 17    0720*                  CALL	EXPR		;ITEM TO PRINT
00278D 08          0721*                  EX	AF,AF'
00278E FA AE 27    0722*                  JP	M,PRNTN2	;STRING
002791 D1          0723*                  POP	DE
002792 C5          0724*                  PUSH	BC
002793 D9          0725*                  EXX
002794 7D          0726*                  LD	A,L
002795 D9          0727*                  EXX
002796 CD 80 12    0728*                  CALL	OSBPUT
002799 D9          0729*                  EXX
00279A 7C          0730*                  LD	A,H
00279B D9          0731*                  EXX
00279C CD 80 12    0732*                  CALL	OSBPUT
00279F 7D          0733*                  LD	A,L
0027A0 CD 80 12    0734*                  CALL	OSBPUT
0027A3 7C          0735*                  LD	A,H
0027A4 CD 80 12    0736*                  CALL	OSBPUT
0027A7 C1          0737*                  POP	BC
0027A8 79          0738*                  LD	A,C
0027A9 CD 80 12    0739*                  CALL	OSBPUT
0027AC 18 D8       0740*                  JR	PRNTN1
0027AE 4B          0741*  PRNTN2:         LD	C,E
0027AF D1          0742*                  POP	DE
0027B0 21 00 52    0743*                  LD	HL,ACCS
0027B3 0C          0744*                  INC	C
0027B4 0D          0745*  PRNTN3:         DEC	C
0027B5 28 09       0746*                  JR	Z,PRNTN4
0027B7 7E          0747*                  LD	A,(HL)
0027B8 23          0748*                  INC	HL
0027B9 C5          0749*                  PUSH	BC
0027BA CD 80 12    0750*                  CALL	OSBPUT
0027BD C1          0751*                  POP	BC
0027BE 18 F4       0752*                  JR	PRNTN3
0027C0 3E 0D       0753*  PRNTN4:         LD	A,CR
0027C2 CD 80 12    0754*                  CALL	OSBPUT
0027C5 18 BF       0755*                  JR	PRNTN1
0027C7             0756*  ;
0027C7 06 02       0757*  PRINT6:         LD	B,2
0027C9 18 22       0758*                  JR	PRINTC
0027CB 01 00 01    0759*  PRINT8:         LD	BC,100H
0027CE 18 1D       0760*                  JR	PRINTC
0027D0 21 00 54    0761*  PRINT9:         LD	HL,STAVAR
0027D3 AF          0762*                  XOR	A
0027D4 BE          0763*                  CP	(HL)
0027D5 28 10       0764*                  JR	Z,PRINT0
0027D7 3A FB 54    0765*                  LD	A,(COUNT)
0027DA B7          0766*                  OR	A
0027DB 28 0A       0767*                  JR	Z,PRINT0
0027DD 96          0768*  PRINTA:         SUB	(HL)
0027DE 28 07       0769*                  JR	Z,PRINT0
0027E0 30 FB       0770*                  JR	NC,PRINTA
0027E2 ED 44       0771*                  NEG
0027E4 CD DC 35    0772*                  CALL	SPACES
0027E7 3A 00 54    0773*  PRINT0:         LD	A,(STAVAR)
0027EA 4F          0774*                  LD	C,A		;PRINTS
0027EB 06 00       0775*                  LD	B,0		;PRINTF
0027ED CD 6F 35    0776*  PRINTC:         CALL	TERMQ
0027F0 28 38       0777*                  JR	Z,PRINT4
0027F2 CB 80       0778*                  RES	0,B
0027F4 FD 23       0779*                  INC	IY
0027F6 FE 7E       0780*                  CP	'~'
0027F8 28 CD       0781*                  JR	Z,PRINT6
0027FA FE 3B       0782*                  CP	';'
0027FC 28 CD       0783*                  JR	Z,PRINT8
0027FE FE 2C       0784*                  CP	','
002800 28 CE       0785*                  JR	Z,PRINT9
002802 CD 95 35    0786*                  CALL	FORMAT		;SPC, TAB, '
002805 28 E6       0787*                  JR	Z,PRINTC
002807 FD 2B       0788*                  DEC	IY
002809 C5          0789*                  PUSH	BC
00280A CD 3B 17    0790*                  CALL	EXPR		;VARIABLE TYPE
00280D 08          0791*                  EX	AF,AF'
00280E FA 24 28    0792*                  JP	M,PRINT3	;STRING
002811 D1          0793*                  POP	DE
002812 D5          0794*                  PUSH	DE
002813 CB 4A       0795*                  BIT	1,D
002815 F5          0796*                  PUSH	AF
002816 CC 09 20    0797*                  CALL	Z,STR		;DECIMAL
002819 F1          0798*                  POP	AF
00281A C4 C6 1F    0799*                  CALL	NZ,HEXSTR	;HEX
00281D C1          0800*                  POP	BC
00281E C5          0801*                  PUSH	BC
00281F 79          0802*                  LD	A,C
002820 93          0803*                  SUB	E
002821 D4 DC 35    0804*                  CALL	NC,SPACES		;RIGHT JUSTIFY
002824 C1          0805*  PRINT3:         POP	BC
002825 CD EA 35    0806*                  CALL	PTEXT		;PRINT
002828 18 C3       0807*                  JR	PRINTC
00282A CB 40       0808*  PRINT4:         BIT	0,B
00282C CC 34 41    0809*                  CALL	Z,CRLF
00282F 18 3F       0810*                  JR	XEQGO3
002831             0811*  ;
002831 FD 23       0812*  ONERR:          INC	IY		;SKIP "ERROR"
002833 CD 44 45    0813*                  CALL	NXT
002836 21 00 00    0814*                  LD	HL,0		;FLAG NOT LOCAL
002839 FE EA       0815*                  CP	TLOCAL
00283B 20 1D       0816*                  JR	NZ,ONERR1
00283D FD 23       0817*                  INC	IY		;SKIP "LOCAL"
00283F 2A EA 54    0818*                  LD	HL,(ERRTRP)
002842 E5          0819*                  PUSH	HL
002843 2A EC 54    0820*                  LD	HL,(ONERSP)
002846 E5          0821*                  PUSH	HL
002847 21 00 04    0822*                  LD	HL,400H		;TYPE = 4, 'EXPONENT' = 0
00284A E5          0823*                  PUSH	HL
00284B 21 EA 54    0824*                  LD	HL,ERRTRP
00284E E5          0825*                  PUSH	HL
00284F 21 63 35    0826*                  LD	HL,LOCCHK
002852 E5          0827*                  PUSH	HL
002853 21 00 00    0828*                  LD	HL,0
002856 39          0829*                  ADD	HL,SP
002857 CD 44 45    0830*                  CALL	NXT
00285A 22 EC 54    0831*  ONERR1:         LD	(ONERSP),HL
00285D FD 22 EA 54 0832*                  LD	(ERRTRP),IY
002861 FE 87       0833*                  CP	TOFF
002863 C2 6A 25    0834*                  JP	NZ,REM
002866 FD 23       0835*                  INC	IY		;SKIP "OFF"
002868 ED 62       0836*                  SBC	HL,HL
00286A 22 EC 54    0837*                  LD	(ONERSP),HL
00286D 22 EA 54    0838*                  LD	(ERRTRP),HL
002870 C3 D2 24    0839*  XEQGO3:         JP	XEQ
002873             0840*  ;
002873             0841*  ;ON expr GOTO line[,line...] [ELSE statement]
002873             0842*  ;ON expr GOTO line[,line...] [ELSE line]
002873             0843*  ;ON expr GOSUB line[,line...] [ELSE statement]
002873             0844*  ;ON expr GOSUB line[,line...] [ELSE line]
002873             0845*  ;ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
002873             0846*  ;ON ERROR [LOCAL] statement [:statement...]
002873             0847*  ;ON ERROR [LOCAL] OFF
002873             0848*  ;
002873 CD 6F 35    0849*  ON:             CALL	TERMQ
002876 CA C1 01    0850*                  JP	Z,CSRON
002879 FE 85       0851*                  CP	TERROR
00287B 28 B4       0852*                  JR	Z,ONERR		;"ON ERROR"
00287D CD 6C 18    0853*                  CALL	EXPRI
002880 FD 7E 00    0854*                  LD	A,(IY)
002883 FD 23       0855*                  INC	IY
002885 1E 2C       0856*                  LD	E,','		;SEPARATOR
002887 FE E5       0857*                  CP	TGOTO
002889 28 0B       0858*                  JR	Z,ON1
00288B FE E4       0859*                  CP	TGOSUB
00288D 28 07       0860*                  JR	Z,ON1
00288F 1E F2       0861*                  LD	E,TPROC
002891 BB          0862*                  CP	E
002892 3E 27       0863*                  LD	A,39
002894 20 4F       0864*                  JR	NZ,ERROR2ex	;"ON syntax"
002896 57          0865*  ON1:            LD	D,A
002897 D9          0866*                  EXX
002898 E5          0867*                  PUSH	HL
002899 D9          0868*                  EXX
00289A C1          0869*                  POP	BC		;ON INDEX
00289B 78          0870*                  LD	A,B
00289C B4          0871*                  OR	H
00289D B5          0872*                  OR	L
00289E 20 32       0873*                  JR	NZ,ON4		;OUT OF RANGE
0028A0 B1          0874*                  OR	C
0028A1 28 2F       0875*                  JR	Z,ON4
0028A3 0D          0876*                  DEC	C
0028A4 28 11       0877*                  JR	Z,ON3		;INDEX=1
0028A6 CD 6F 35    0878*  ON2:            CALL	TERMQ
0028A9 28 27       0879*                  JR	Z,ON4		;OUT OF RANGE
0028AB FD 23       0880*                  INC	IY		;SKIP DELIMITER
0028AD FE 22       0881*                  CP	'"'
0028AF 28 1A       0882*                  JR	Z,ON5
0028B1 BB          0883*                  CP	E
0028B2 20 F2       0884*                  JR	NZ,ON2
0028B4 0D          0885*                  DEC	C
0028B5 20 EF       0886*                  JR	NZ,ON2
0028B7 7B          0887*  ON3:            LD	A,E
0028B8 FE F2       0888*                  CP	TPROC
0028BA 28 2C       0889*                  JR	Z,ONPROC
0028BC D5          0890*                  PUSH	DE
0028BD CD 99 18    0891*                  CALL	ITEMI		;LINE NUMBER
0028C0 D1          0892*                  POP	DE
0028C1 7A          0893*                  LD	A,D
0028C2 FE E5       0894*                  CP	TGOTO
0028C4 28 30       0895*                  JR	Z,GOTO2
0028C6 CD 7B 35    0896*                  CALL	SPAN		;SKIP REST OF LIST
0028C9 18 3C       0897*                  JR	GOSUB1
0028CB             0898*  ;
0028CB CD D2 36    0899*  ON5:            CALL	QUOTE
0028CE FD 23       0900*                  INC	IY
0028D0 18 D4       0901*                  JR	ON2
0028D2             0902*  ;
0028D2 FD 7E 00    0903*  ON4:            LD	A,(IY)
0028D5 FD 23       0904*                  INC	IY
0028D7 FE 8B       0905*                  CP	TELSE
0028D9 CA 1B 2D    0906*                  JP	Z,IF1		;ELSE CLAUSE
0028DC FE 0D       0907*                  CP	CR
0028DE 20 F2       0908*                  JR	NZ,ON4
0028E0 3E 28       0909*                  LD	A,40		;'ON range'
0028E2 21          0910*                  DB	21H
0028E3 3E 22       0911*  FORVAR:         LD	A,34		;'FOR variable'
0028E5 C3 7D 3F    0912*  ERROR2ex:         JP	ERROR_
0028E8             0913*  ;
0028E8 3E EE       0914*  ONPROC:         LD	A,TON
0028EA C3 20 2A    0915*                  JP	PROC
0028ED             0916*  ;
0028ED             0917*  ;GOTO line
0028ED             0918*  ;
0028ED CD 99 18    0919*  GOTO:           CALL	ITEMI		;LINE NUMBER
0028F0 CD 6F 35    0920*  GOTO1:          CALL	TERMQ
0028F3 C2 19 26    0921*                  JP	NZ,SYNTAX
0028F6 D9          0922*  GOTO2:          EXX
0028F7 CD 7C 41    0923*                  CALL	FINDL
0028FA E5          0924*                  PUSH	HL
0028FB FD E1       0925*                  POP	IY
0028FD CA BD 24    0926*                  JP	Z,XEQ0
002900 3E 29       0927*                  LD	A,41
002902 18 E1       0928*                  JR	ERROR2ex		;"No such line"
002904             0929*  ;
002904             0930*  ;GOSUB line
002904             0931*  ;
002904 CD 99 18    0932*  GOSUB:          CALL	ITEMI		;LINE NUMBER
002907 FD E5       0933*  GOSUB1:         PUSH	IY		;TEXT POINTER
002909 CD BF 32    0934*                  CALL	CHECK		;CHECK ROOM
00290C CD F0 28    0935*                  CALL	GOTO1		;SAVE MARKER
00290F             0936*  GOSCHK:         EQU	$
00290F             0937*  ;
00290F             0938*  ;RETURN
00290F             0939*  ;
00290F D1          0940*  RETURN:         POP	DE		;MARKER
002910 21 0F 29    0941*                  LD	HL,GOSCHK
002913 B7          0942*                  OR	A
002914 ED 52       0943*                  SBC	HL,DE
002916 FD E1       0944*                  POP	IY
002918 28 30       0945*                  JR	Z,XEQGO2ex
00291A 3E 26       0946*                  LD	A,38
00291C 18 C7       0947*                  JR	ERROR2ex		;"No GOSUB"
00291E             0948*  ;
00291E             0949*  ;REPEAT
00291E             0950*  ;
00291E FD E5       0951*  REPEAT:         PUSH	IY
002920 CD BF 32    0952*                  CALL	CHECK
002923 CD D2 24    0953*                  CALL	XEQ
002926             0954*  REPCHK:         EQU	$
002926             0955*  ;
002926             0956*  ;UNTIL expr
002926             0957*  ;
002926 C1          0958*  UNTIL:          POP	BC
002927 C5          0959*                  PUSH	BC
002928 21 26 29    0960*                  LD	HL,REPCHK
00292B B7          0961*                  OR	A
00292C ED 42       0962*                  SBC	HL,BC
00292E 28 0B       0963*                  JR	Z,UNTIL1
002930 3E 03       0964*                  LD	A,3
002932 CD 6A 34    0965*                  CALL	RESLOC
002935 20 EF       0966*                  JR	NZ,UNTIL
002937 3E 2B       0967*                  LD	A,43
002939 18 AA       0968*                  JR	ERROR2ex		;"Not in a REPEAT loop"
00293B             0969*  ;
00293B CD 6C 18    0970*  UNTIL1:         CALL	EXPRI
00293E CD 92 1F    0971*                  CALL	TEST
002941 C1          0972*                  POP	BC
002942 D1          0973*                  POP	DE
002943 20 05       0974*                  JR	NZ,XEQGO2ex		;TRUE
002945 D5          0975*                  PUSH	DE
002946 C5          0976*                  PUSH	BC
002947 D5          0977*                  PUSH	DE
002948 FD E1       0978*                  POP	IY
00294A C3 D2 24    0979*  XEQGO2ex:         JP	XEQ
00294D             0980*  ;
00294D             0981*  ;FOR var = expr TO expr [STEP expr]
00294D             0982*  ;
00294D CD E8 31    0983*  FORex:            CALL	ASSIGN
002950 20 91       0984*                  JR	NZ,FORVAR	;"FOR variable"
002952 F5          0985*                  PUSH	AF		;SAVE TYPE
002953 FD 7E 00    0986*                  LD	A,(IY)
002956 FE B8       0987*                  CP	TTO
002958 3E 24       0988*                  LD	A,36
00295A 20 89       0989*                  JR	NZ,ERROR2ex	;"No TO"
00295C FD 23       0990*                  INC	IY
00295E DD E5       0991*                  PUSH	IX
002960 CD 65 18    0992*                  CALL	EXPRN		;LIMIT
002963 DD E1       0993*                  POP	IX
002965 F1          0994*                  POP	AF
002966 47          0995*                  LD	B,A		;TYPE
002967 C5          0996*                  PUSH	BC		;SAVE ON STACK
002968 E5          0997*                  PUSH	HL
002969 21 00 00    0998*                  LD	HL,0
00296C 4C          0999*                  LD	C,H
00296D D9          1000*                  EXX
00296E E5          1001*                  PUSH	HL
00296F 21 01 00    1002*                  LD	HL,1		;PRESET STEP
002972 D9          1003*                  EXX
002973 FD 7E 00    1004*                  LD	A,(IY)
002976 FE 88       1005*                  CP	TSTEP
002978 20 09       1006*                  JR	NZ,FOR1
00297A FD 23       1007*                  INC	IY
00297C DD E5       1008*                  PUSH	IX
00297E CD 65 18    1009*                  CALL	EXPRN		;STEP
002981 DD E1       1010*                  POP	IX
002983 06 08       1011*  FOR1:           LD	B,8		;FPP '>'
002985 CB 7C       1012*                  BIT	7,H
002987 20 02       1013*                  JR	NZ,FOR2		;STEP SIGN
002989 06 0C       1014*                  LD	B,12		;FPP '<'
00298B C5          1015*  FOR2:           PUSH	BC
00298C E5          1016*                  PUSH	HL
00298D D9          1017*                  EXX
00298E E5          1018*                  PUSH	HL
00298F D9          1019*                  EXX
002990 FD E5       1020*                  PUSH	IY		;SAVE TEXT POINTER
002992 DD E5       1021*                  PUSH	IX		;LOOP VARIABLE
002994 CD BF 32    1022*                  CALL	CHECK
002997 CD D2 24    1023*                  CALL	XEQ
00299A             1024*  FORCHK:         EQU	$
00299A             1025*  ;
00299A             1026*  ;NEXT [var[,var...]]
00299A             1027*  ;
00299A C1          1028*  NEXT:           POP	BC		;MARKER
00299B 21 9A 29    1029*                  LD	HL,FORCHK
00299E B7          1030*                  OR	A
00299F ED 42       1031*                  SBC	HL,BC
0029A1 28 0C       1032*                  JR	Z,NEXT2
0029A3 C5          1033*                  PUSH	BC
0029A4 3E 03       1034*                  LD	A,3
0029A6 CD 6A 34    1035*                  CALL	RESLOC
0029A9 20 EF       1036*                  JR	NZ,NEXT
0029AB 3E 20       1037*                  LD	A,32
0029AD 18 6A       1038*                  JR	ERROR3ex		;"Not in a FOR loop"
0029AF             1039*  ;
0029AF CD 6F 35    1040*  NEXT2:          CALL	TERMQ
0029B2 E1          1041*                  POP	HL
0029B3 E5          1042*                  PUSH	HL
0029B4 C5          1043*                  PUSH	BC
0029B5 E5          1044*                  PUSH	HL
0029B6 C4 1C 42    1045*                  CALL	NZ,GETVAR	;VARIABLE
0029B9 D1          1046*                  POP	DE
0029BA EB          1047*                  EX	DE,HL
0029BB B7          1048*                  OR	A
0029BC ED 52       1049*  NEXT0:          SBC	HL,DE
0029BE 20 47       1050*                  JR	NZ,NEXT1
0029C0 D5          1051*                  PUSH	DE
0029C1 DD 21 08 00 1052*                  LD	IX,6+2
0029C5 DD 39       1053*                  ADD	IX,SP
0029C7 CD 2A 1A    1054*                  CALL	DLOAD5		;STEP
0029CA DD 7E 0B    1055*                  LD	A,(IX+11)	;TYPE
0029CD DD E1       1056*                  POP	IX
0029CF CD 5E 19    1057*                  CALL	LOADN		;LOOP VARIABLE
0029D2 F5          1058*                  PUSH	AF
0029D3 3E 0B       1059*                  LD	A,'+' & 0FH
0029D5 CD 4E 45    1060*                  CALL	FPP		;ADD STEP
0029D8 38 3F       1061*                  JR	C,ERROR3ex
0029DA F1          1062*                  POP	AF		;RESTORE TYPE
0029DB CD 29 32    1063*                  CALL	STOREN		;UPDATE VARIABLE
0029DE DD 21 0C 00 1064*                  LD	IX,12
0029E2 DD 39       1065*                  ADD	IX,SP
0029E4 CD 2A 1A    1066*                  CALL	DLOAD5		;LIMIT
0029E7 DD 7E FF    1067*                  LD	A,(IX-1)
0029EA CD 4E 45    1068*                  CALL	FPP		;TEST AGAINST LIMIT
0029ED 38 2A       1069*                  JR	C,ERROR3ex
0029EF 24          1070*                  INC	H
0029F0 20 0A       1071*                  JR	NZ,LOOP		;KEEP LOOPING
0029F2 21 12 00    1072*                  LD	HL,18
0029F5 39          1073*                  ADD	HL,SP
0029F6 F9          1074*                  LD	SP,HL
0029F7 CD 39 45    1075*                  CALL	NLIST
0029FA 18 9E       1076*                  JR	NEXT
0029FC             1077*  ;
0029FC C1          1078*  LOOP:           POP	BC
0029FD D1          1079*                  POP	DE
0029FE FD E1       1080*                  POP	IY
002A00 FD E5       1081*                  PUSH	IY
002A02 D5          1082*                  PUSH	DE
002A03 C5          1083*                  PUSH	BC
002A04 C3 D2 24    1084*                  JP	XEQ
002A07             1085*  ;
002A07 21 12 00    1086*  NEXT1:          LD	HL,18
002A0A 39          1087*                  ADD	HL,SP
002A0B F9          1088*                  LD	SP,HL		;"POP" THE STACK
002A0C C1          1089*                  POP	BC
002A0D 21 9A 29    1090*                  LD	HL,FORCHK
002A10 ED 42       1091*                  SBC	HL,BC
002A12 E1          1092*                  POP	HL		;VARIABLE POINTER
002A13 E5          1093*                  PUSH	HL
002A14 C5          1094*                  PUSH	BC
002A15 28 A5       1095*                  JR	Z,NEXT0
002A17 3E 21       1096*                  LD	A,33
002A19 C3 7D 3F    1097*  ERROR3ex:         JP	ERROR_		;"Can't match FOR"
002A1C             1098*  ;
002A1C             1099*  ;FNname
002A1C             1100*  ;N.B. ENTERED WITH A <> TON
002A1C             1101*  ;
002A1C F5          1102*  FN:             PUSH	AF		;MAKE SPACE ON STACK
002A1D CD 24 2A    1103*                  CALL	PROC1
002A20             1104*  FNCHK:          EQU	$
002A20             1105*  ;
002A20             1106*  ;PROCname
002A20             1107*  ;N.B. ENTERED WITH A = ON PROC FLAG
002A20             1108*  ;
002A20 F5          1109*  PROC:           PUSH	AF		;MAKE SPACE ON STACK
002A21 CD 24 2A    1110*                  CALL	PROC1
002A24             1111*  PROCHK:         EQU	$
002A24 CD BF 32    1112*  PROC1:          CALL	CHECK
002A27 FD 2B       1113*                  DEC	IY
002A29 FD E5       1114*                  PUSH	IY
002A2B CD CF 42    1115*                  CALL	GETDEF
002A2E C1          1116*                  POP	BC
002A2F 28 39       1117*                  JR	Z,PROC4
002A31 3E 1E       1118*                  LD	A,30
002A33 38 E4       1119*                  JR	C,ERROR3ex	;"Bad call"
002A35 C5          1120*                  PUSH	BC
002A36 2A DC 54    1121*                  LD	HL,(PAGE_)
002A39 3E DD       1122*  PROC2:          LD	A,TDEF
002A3B CD 34 36    1123*                  CALL	SEARCHex		;LOOK FOR "DEF"
002A3E 38 21       1124*                  JR	C,PROC3
002A40 E5          1125*                  PUSH	HL
002A41 FD E1       1126*                  POP	IY
002A43 FD 23       1127*                  INC	IY		;SKIP DEF
002A45 CD 44 45    1128*                  CALL	NXT
002A48 CD CF 42    1129*                  CALL	GETDEF
002A4B FD E5       1130*                  PUSH	IY
002A4D D1          1131*                  POP	DE
002A4E 38 09       1132*                  JR	C,PROC6
002A50 C4 75 43    1133*                  CALL	NZ,CREATE
002A53 FD E5       1134*                  PUSH	IY
002A55 D1          1135*                  POP	DE
002A56 73          1136*                  LD	(HL),E
002A57 23          1137*                  INC	HL
002A58 72          1138*                  LD	(HL),D		;SAVE ADDRESS
002A59 EB          1139*  PROC6:          EX	DE,HL
002A5A 3E 0D       1140*                  LD	A,CR
002A5C 47          1141*                  LD	B,A
002A5D ED B1       1142*                  CPIR			;SKIP TO END OF LINE
002A5F 18 D8       1143*                  JR	PROC2
002A61 FD E1       1144*  PROC3:          POP	IY		;RESTORE TEXT POINTER
002A63 CD CF 42    1145*                  CALL	GETDEF
002A66 3E 1D       1146*                  LD	A,29
002A68 20 AF       1147*                  JR	NZ,ERROR3ex	;"No such FN/PROC"
002A6A 5E          1148*  PROC4:          LD	E,(HL)
002A6B 23          1149*                  INC	HL
002A6C 56          1150*                  LD	D,(HL)		;GET ADDRESS
002A6D 21 02 00    1151*                  LD	HL,2
002A70 39          1152*                  ADD	HL,SP
002A71 CD 44 45    1153*                  CALL	NXT		;ALLOW SPACE BEFORE (
002A74 D5          1154*                  PUSH	DE		;EXCHANGE DE,IY
002A75 FD E3       1155*                  EX	(SP),IY
002A77 D1          1156*                  POP	DE
002A78 FE 28       1157*                  CP	'('		;ARGUMENTS?
002A7A C2 1E 2B    1158*                  JP	NZ,PROC5
002A7D CD 44 45    1159*                  CALL	NXT		;ALLOW SPACE BEFORE (
002A80 FE 28       1160*                  CP	'('
002A82 C2 19 26    1161*                  JP	NZ,SYNTAX	;"Syntax error"
002A85 FD E5       1162*                  PUSH	IY
002A87 C1          1163*                  POP	BC		;SAVE IY IN BC
002A88 D9          1164*                  EXX
002A89 08          1165*                  EX	AF,AF'
002A8A AF          1166*                  XOR	A		;INITIALISE RETURN COUNT
002A8B 08          1167*                  EX	AF,AF'
002A8C CD F7 34    1168*                  CALL	SAVLOC		;SAVE DUMMY VARIABLES
002A8F 08          1169*                  EX	AF,AF'
002A90 B7          1170*                  OR	A
002A91 28 16       1171*                  JR	Z,RETCHK	;NO RETURNS
002A93 E5          1172*                  PUSH	HL
002A94 ED 44       1173*                  NEG
002A96 6F          1174*                  LD	L,A
002A97 ED 44       1175*                  NEG
002A99 26 FF       1176*                  LD	H,-1		;HL = -RETURNS
002A9B 29          1177*                  ADD	HL,HL
002A9C 29          1178*                  ADD	HL,HL
002A9D 29          1179*                  ADD	HL,HL		;-RETURNS * 8
002A9E E3          1180*                  EX	(SP),HL
002A9F DD E1       1181*                  POP	IX
002AA1 DD 39       1182*                  ADD	IX,SP
002AA3 DD F9       1183*                  LD	SP,IX
002AA5 F5          1184*                  PUSH	AF		;PUSH RETURN COUNT
002AA6 CD A9 2A    1185*                  CALL	RETCHK		;PUSH MARKER
002AA9 08          1186*  RETCHK:         EX	AF,AF'
002AAA CD E7 20    1187*                  CALL	BRAKET		;CLOSING BRACKET
002AAD D9          1188*                  EXX
002AAE C5          1189*                  PUSH	BC
002AAF FD E1       1190*                  POP	IY		;RESTORE IY
002AB1 E5          1191*                  PUSH	HL
002AB2 CD 06 33    1192*                  CALL	ARGUE		;TRANSFER ARGUMENTS
002AB5 E1          1193*                  POP	HL
002AB6             1194*  ;
002AB6             1195*  ; If any of the dummy arguments is the same as a passed-by-reference
002AB6             1196*  ; variable, then it must not be restored on exit (it would overwrite
002AB6             1197*  ; the wanted returned values), therefore search the saved values on
002AB6             1198*  ; the stack and if a match is found set bit 4 of the type.  On exit
002AB6             1199*  ; from the FN/PROC this will prevent the dummies from being restored.
002AB6             1200*  ;
002AB6 E3          1201*                  EX	(SP),HL
002AB7 B7          1202*                  OR	A
002AB8 01 A9 2A    1203*                  LD	BC,RETCHK
002ABB ED 42       1204*                  SBC	HL,BC
002ABD 09          1205*                  ADD	HL,BC
002ABE E3          1206*                  EX	(SP),HL
002ABF 20 5D       1207*                  JR	NZ,PROC5	;No RETURNs
002AC1             1208*  ;
002AC1 D5          1209*                  PUSH	DE
002AC2 E5          1210*                  PUSH	HL
002AC3 21 07 00    1211*                  LD	HL,7		;Skip two PUSHes and RETCHK
002AC6 39          1212*                  ADD	HL,SP
002AC7 7E          1213*                  LD	A,(HL)		;RETURN count
002AC8 23          1214*                  INC	HL
002AC9 E5          1215*                  PUSH	HL
002ACA DD E1       1216*                  POP	IX		;Address RETURNs table
002ACC 5F          1217*  PROC0:          LD	E,A
002ACD 16 00       1218*                  LD	D,0
002ACF EB          1219*                  EX	DE,HL
002AD0 29          1220*                  ADD	HL,HL
002AD1 29          1221*                  ADD	HL,HL
002AD2 29          1222*                  ADD	HL,HL
002AD3 19          1223*                  ADD	HL,DE		;HL addresses SAVLOC stack
002AD4 23          1224*                  INC	HL
002AD5 23          1225*                  INC	HL		;Bump past LOCCHK
002AD6 5E          1226*  PROC7:          LD	E,(HL)
002AD7 23          1227*                  INC	HL
002AD8 56          1228*                  LD	D,(HL)		;DE = SAVLOC VARPTR
002AD9 23          1229*                  INC	HL
002ADA 4E          1230*                  LD	C,(HL)		;Length (if string)
002ADB 23          1231*                  INC	HL
002ADC 46          1232*                  LD	B,(HL)		;Variable type
002ADD             1233*  ;
002ADD             1234*  ; Scan RETURNs table for VARPTR match
002ADD             1235*  ;
002ADD C5          1236*                  PUSH	BC		;Save type
002ADE E5          1237*                  PUSH	HL
002ADF DD E5       1238*                  PUSH	IX
002AE1 47          1239*                  LD	B,A		;B = RETURN count
002AE2 DD 6E 04    1240*  PROC8:          LD	L,(IX+4)
002AE5 DD 66 05    1241*                  LD	H,(IX+5)	;HL = RETURNed VARPTR
002AE8 B7          1242*                  OR	A
002AE9 ED 52       1243*                  SBC	HL,DE
002AEB 28 09       1244*                  JR	Z,PROC9
002AED EB          1245*                  EX	DE,HL
002AEE 11 08 00    1246*                  LD	DE,8
002AF1 DD 19       1247*                  ADD	IX,DE
002AF3 EB          1248*                  EX	DE,HL
002AF4 10 EC       1249*                  DJNZ	PROC8
002AF6 DD E1       1250*  PROC9:          POP	IX
002AF8 E1          1251*                  POP	HL
002AF9 C1          1252*                  POP	BC		;Restore type
002AFA             1253*  ;
002AFA             1254*  ; If match, set bit 4 of type:
002AFA             1255*  ;
002AFA 20 02       1256*                  JR	NZ,PROCA
002AFC CB E6       1257*                  SET	4,(HL)		;Flag don't restore
002AFE             1258*  ;
002AFE             1259*  ; Increment past stacked data:
002AFE             1260*  ;
002AFE 11 03 00    1261*  PROCA:          LD	DE,3
002B01 CB 70       1262*                  BIT	6,B
002B03 20 08       1263*                  JR	NZ,PROCB	;Whole array
002B05 1E 05       1264*                  LD	E,5
002B07 CB 78       1265*                  BIT	7,B
002B09 28 02       1266*                  JR	Z,PROCB		;Numeric
002B0B 59          1267*                  LD	E,C
002B0C 13          1268*                  INC	DE
002B0D 19          1269*  PROCB:          ADD	HL,DE
002B0E 4E          1270*                  LD	C,(HL)
002B0F 23          1271*                  INC	HL
002B10 46          1272*                  LD	B,(HL)
002B11 23          1273*                  INC	HL		; BC = marker ?
002B12 EB          1274*                  EX	DE,HL
002B13 21 63 35    1275*                  LD	HL,LOCCHK
002B16 B7          1276*                  OR	A
002B17 ED 42       1277*                  SBC	HL,BC
002B19 EB          1278*                  EX	DE,HL
002B1A 28 BA       1279*                  JR	Z,PROC7		;Another
002B1C E1          1280*                  POP	HL
002B1D D1          1281*                  POP	DE
002B1E             1282*  ;
002B1E 73          1283*  PROC5:          LD	(HL),E		;SAVE "RETURN ADDRESS"
002B1F 23          1284*                  INC	HL
002B20 7E          1285*                  LD	A,(HL)
002B21 72          1286*                  LD	(HL),D
002B22 FE EE       1287*                  CP	TON		;WAS IT "ON PROC" ?
002B24 20 0C       1288*                  JR	NZ,XEQGO
002B26 D5          1289*                  PUSH	DE
002B27 FD E3       1290*                  EX	(SP),IY
002B29 CD 7B 35    1291*                  CALL	SPAN		;SKIP REST OF ON LIST
002B2C FD E3       1292*                  EX	(SP),IY
002B2E D1          1293*                  POP	DE
002B2F 72          1294*                  LD	(HL),D
002B30 2B          1295*                  DEC	HL
002B31 73          1296*                  LD	(HL),E
002B32 C3 D2 24    1297*  XEQGO:          JP	XEQ
002B35             1298*  ;
002B35 FD 23       1299*  LOCERR:         INC	IY
002B37 18 F9       1300*                  JR	XEQGO
002B39             1301*  ;
002B39             1302*  ;LOCAL DATA
002B39             1303*  ;
002B39 FD 23       1304*  LOCDAT:         INC	IY
002B3B 2A F0 54    1305*                  LD	HL,(DATPTR)
002B3E E5          1306*                  PUSH	HL
002B3F 3E 40       1307*                  LD	A,40H
002B41 F5          1308*                  PUSH	AF
002B42 21 F0 54    1309*                  LD	HL,DATPTR
002B45 E5          1310*                  PUSH	HL
002B46 21 63 35    1311*                  LD	HL,LOCCHK
002B49 E5          1312*                  PUSH	HL
002B4A 18 E6       1313*                  JR	XEQGO
002B4C             1314*  ;
002B4C             1315*  ;LOCAL var[,var...]
002B4C             1316*  ;
002B4C FE 85       1317*  LOCAL:          CP	TERROR
002B4E 28 E5       1318*                  JR	Z,LOCERR
002B50 FE DC       1319*                  CP	TDATA
002B52 28 E5       1320*                  JR	Z,LOCDAT
002B54 C1          1321*                  POP	BC
002B55 C5          1322*                  PUSH	BC
002B56 21 20 2A    1323*                  LD	HL,FNCHK
002B59 B7          1324*                  OR	A
002B5A ED 42       1325*                  SBC	HL,BC
002B5C 28 23       1326*                  JR	Z,LOCAL1
002B5E 21 24 2A    1327*                  LD	HL,PROCHK
002B61 B7          1328*                  OR	A
002B62 ED 42       1329*                  SBC	HL,BC
002B64 28 1B       1330*                  JR	Z,LOCAL1
002B66 21 63 35    1331*                  LD	HL,LOCCHK
002B69 B7          1332*                  OR	A
002B6A ED 42       1333*                  SBC	HL,BC
002B6C 28 13       1334*                  JR	Z,LOCAL1
002B6E 21 15 27    1335*                  LD	HL,ARRCHK
002B71 B7          1336*                  OR	A
002B72 ED 42       1337*                  SBC	HL,BC
002B74 28 0B       1338*                  JR	Z,LOCAL1
002B76 21 A9 2A    1339*                  LD	HL,RETCHK
002B79 B7          1340*                  OR	A
002B7A ED 42       1341*                  SBC	HL,BC
002B7C 3E 0C       1342*                  LD	A,12
002B7E C2 7D 3F    1343*                  JP	NZ,ERROR_	;"Not LOCAL"
002B81 FD E5       1344*  LOCAL1:         PUSH	IY
002B83 C1          1345*                  POP	BC
002B84 D9          1346*                  EXX
002B85 FD 2B       1347*                  DEC	IY
002B87 CD F7 34    1348*                  CALL	SAVLOC
002B8A D9          1349*                  EXX
002B8B C5          1350*                  PUSH	BC
002B8C FD E1       1351*                  POP	IY
002B8E CD 1C 42    1352*  LOCAL2:         CALL	GETVAR
002B91 C2 19 26    1353*                  JP	NZ,SYNTAX
002B94 CB 77       1354*                  BIT	6,A		;ARRAY?
002B96 20 14       1355*                  JR	NZ,LOCAL4
002B98 B7          1356*                  OR	A		;TYPE
002B99 08          1357*                  EX	AF,AF'
002B9A CD 31 20    1358*                  CALL	ZERO
002B9D 08          1359*                  EX	AF,AF'
002B9E F5          1360*                  PUSH	AF
002B9F F4 29 32    1361*                  CALL	P,STOREN	;ZERO
002BA2 F1          1362*                  POP	AF
002BA3 59          1363*                  LD	E,C
002BA4 FC 7A 32    1364*                  CALL	M,STORES
002BA7 CD 39 45    1365*  LOCAL3:         CALL	NLIST
002BAA 18 E2       1366*                  JR	LOCAL2
002BAC             1367*  ;
002BAC DD 36 00 01 1368*  LOCAL4:         LD	(IX+0),1	;FLAG LOCAL ARRAY
002BB0 DD 36 01 00 1369*                  LD	(IX+1),0
002BB4 18 F1       1370*                  JR	LOCAL3
002BB6             1371*  ;
002BB6             1372*  ;ENDPROC
002BB6             1373*  ;
002BB6 C1          1374*  ENDPRO:         POP	BC
002BB7 21 24 2A    1375*                  LD	HL,PROCHK	;PROC MARKER
002BBA AF          1376*                  XOR	A
002BBB ED 42       1377*                  SBC	HL,BC
002BBD 28 0B       1378*                  JR	Z,ENDPR1
002BBF C5          1379*                  PUSH	BC		;PUT BACK
002BC0 CD 6A 34    1380*                  CALL	RESLOC
002BC3 20 F1       1381*                  JR	NZ,ENDPRO
002BC5 3E 0D       1382*                  LD	A,13
002BC7 C3 7D 3F    1383*                  JP	ERROR_		;"No PROC"
002BCA             1384*  ;
002BCA FD E1       1385*  ENDPR1:         POP	IY
002BCC C3 D2 24    1386*  XEQGO6:         JP	XEQ
002BCF             1387*  ;
002BCF             1388*  ;INPUT #channel,var,var...
002BCF             1389*  ;
002BCF CD 14 37    1390*  INPUTN:         CALL	CHNL		;E = CHANNEL NUMBER
002BD2 CD 39 45    1391*  INPN1:          CALL	NLIST
002BD5 D5          1392*                  PUSH	DE
002BD6 CD 0F 26    1393*                  CALL	VAR_
002BD9 D1          1394*                  POP	DE
002BDA F5          1395*                  PUSH	AF		;SAVE TYPE
002BDB E5          1396*                  PUSH	HL		;VARPTR
002BDC B7          1397*                  OR	A
002BDD FA 02 2C    1398*                  JP	M,INPN2		;STRING
002BE0 CD 78 12    1399*                  CALL	OSBGET
002BE3 D9          1400*                  EXX
002BE4 6F          1401*                  LD	L,A
002BE5 D9          1402*                  EXX
002BE6 CD 78 12    1403*                  CALL	OSBGET
002BE9 D9          1404*                  EXX
002BEA 67          1405*                  LD	H,A
002BEB D9          1406*                  EXX
002BEC CD 78 12    1407*                  CALL	OSBGET
002BEF 6F          1408*                  LD	L,A
002BF0 CD 78 12    1409*                  CALL	OSBGET
002BF3 67          1410*                  LD	H,A
002BF4 CD 78 12    1411*                  CALL	OSBGET
002BF7 4F          1412*                  LD	C,A
002BF8 DD E1       1413*                  POP	IX
002BFA F1          1414*                  POP	AF		;RESTORE TYPE
002BFB D5          1415*                  PUSH	DE		;SAVE CHANNEL
002BFC CD 29 32    1416*                  CALL	STOREN
002BFF D1          1417*                  POP	DE
002C00 18 D0       1418*                  JR	INPN1
002C02 21 00 52    1419*  INPN2:          LD	HL,ACCS
002C05 CD 78 12    1420*  INPN3:          CALL	OSBGET
002C08 FE 0D       1421*                  CP	CR
002C0A 28 04       1422*                  JR	Z,INPN4
002C0C 77          1423*                  LD	(HL),A
002C0D 2C          1424*                  INC	L
002C0E 20 F5       1425*                  JR	NZ,INPN3
002C10 DD E1       1426*  INPN4:          POP	IX
002C12 F1          1427*                  POP	AF
002C13 D5          1428*                  PUSH	DE
002C14 EB          1429*                  EX	DE,HL
002C15 CD 77 32    1430*                  CALL	STACCS
002C18 D1          1431*                  POP	DE
002C19 18 B7       1432*                  JR	INPN1
002C1B             1433*  ;
002C1B             1434*  ;INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002C1B             1435*  ;INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
002C1B             1436*  ;
002C1B FE 23       1437*  INPUT:          CP	'#'
002C1D 28 B0       1438*                  JR	Z,INPUTN
002C1F 0E 00       1439*                  LD	C,0		;FLAG PROMPT
002C21 FE 86       1440*                  CP	TLINE
002C23 20 04       1441*                  JR	NZ,INPUT0
002C25 FD 23       1442*                  INC	IY		;SKIP "LINE"
002C27 0E 80       1443*                  LD	C,80H
002C29 21 00 53    1444*  INPUT0:         LD	HL,BUFFER
002C2C 36 0D       1445*                  LD	(HL),CR		;INITIALISE EMPTY
002C2E CD 6F 35    1446*  INPUT1:         CALL	TERMQ
002C31 28 99       1447*                  JR	Z,XEQGO6	;DONE
002C33 FD 23       1448*                  INC	IY
002C35 FE 2C       1449*                  CP	','
002C37 28 51       1450*                  JR	Z,INPUT3	;SKIP COMMA
002C39 FE 3B       1451*                  CP	';'
002C3B 28 4D       1452*                  JR	Z,INPUT3
002C3D E5          1453*                  PUSH	HL		;SAVE BUFFER POINTER
002C3E FE 22       1454*                  CP	'"'
002C40 20 0A       1455*                  JR	NZ,INPUT6
002C42 C5          1456*                  PUSH	BC
002C43 CD B3 19    1457*                  CALL	CONS
002C46 C1          1458*                  POP	BC
002C47 CD EA 35    1459*                  CALL	PTEXT		;PRINT PROMPT
002C4A 18 05       1460*                  JR	INPUT9
002C4C CD 95 35    1461*  INPUT6:         CALL	FORMAT		;SPC, TAB, '
002C4F 20 05       1462*                  JR	NZ,INPUT2
002C51 E1          1463*  INPUT9:         POP	HL
002C52 CB C1       1464*                  SET	0,C		;FLAG NO PROMPT
002C54 18 D3       1465*                  JR	INPUT0
002C56 FD 2B       1466*  INPUT2:         DEC	IY
002C58 C5          1467*                  PUSH	BC
002C59 CD 0F 26    1468*                  CALL	VAR_
002C5C C1          1469*                  POP	BC
002C5D E1          1470*                  POP	HL
002C5E F5          1471*                  PUSH	AF		;SAVE TYPE
002C5F 7E          1472*                  LD	A,(HL)
002C60 23          1473*                  INC	HL
002C61 FE 0D       1474*                  CP	CR		;BUFFER EMPTY?
002C63 CC 8E 2C    1475*                  CALL	Z,REFILL
002C66 CB 79       1476*                  BIT	7,C
002C68 F5          1477*                  PUSH	AF
002C69 C4 08 36    1478*                  CALL	NZ,LINES
002C6C F1          1479*                  POP	AF
002C6D CC F7 35    1480*                  CALL	Z,FETCHS
002C70 F1          1481*                  POP	AF		;RESTORE TYPE
002C71 C5          1482*                  PUSH	BC
002C72 E5          1483*                  PUSH	HL
002C73 B7          1484*                  OR	A
002C74 FA 85 2C    1485*                  JP	M,INPUT4	;STRING
002C77 F5          1486*                  PUSH	AF
002C78 DD E5       1487*                  PUSH	IX
002C7A CD 5B 1C    1488*                  CALL	VAL0
002C7D DD E1       1489*                  POP	IX
002C7F F1          1490*                  POP	AF
002C80 CD 29 32    1491*                  CALL	STOREN
002C83 18 03       1492*                  JR	INPUT5
002C85 CD 77 32    1493*  INPUT4:         CALL	STACCS
002C88 E1          1494*  INPUT5:         POP	HL
002C89 C1          1495*                  POP	BC
002C8A CB 81       1496*  INPUT3:         RES	0,C
002C8C 18 A0       1497*                  JR	INPUT1
002C8E             1498*  ;
002C8E CB 41       1499*  REFILL:         BIT	0,C
002C90 20 0A       1500*                  JR	NZ,REFIL0	;NO PROMPT
002C92 3E 3F       1501*                  LD	A,'?'
002C94 CD 3B 41    1502*                  CALL	OUTCHR		;PROMPT
002C97 3E 20       1503*                  LD	A,' '
002C99 CD 3B 41    1504*                  CALL	OUTCHR
002C9C 21 00 53    1505*  REFIL0:         LD	HL,BUFFER
002C9F C5          1506*                  PUSH	BC
002CA0 E5          1507*                  PUSH	HL
002CA1 DD E5       1508*                  PUSH	IX
002CA3 CD 04 12    1509*                  CALL	OSLINE
002CA6 DD E1       1510*                  POP	IX
002CA8 E1          1511*                  POP	HL
002CA9 C1          1512*                  POP	BC
002CAA 47          1513*                  LD	B,A		;POS AT ENTRY
002CAB AF          1514*                  XOR	A
002CAC 32 FB 54    1515*                  LD	(COUNT),A
002CAF B8          1516*                  CP	B
002CB0 C8          1517*                  RET	Z
002CB1 7E          1518*  REFIL1:         LD	A,(HL)
002CB2 FE 0D       1519*                  CP	CR
002CB4 C8          1520*                  RET	Z
002CB5 23          1521*                  INC	HL
002CB6 10 F9       1522*                  DJNZ	REFIL1
002CB8 C9          1523*                  RET
002CB9             1524*  ;
002CB9             1525*  ;READ var[,var...]
002CB9             1526*  ;
002CB9 FE 23       1527*  READ:           CP	'#'
002CBB CA CF 2B    1528*                  JP	Z,INPUTN
002CBE 2A F0 54    1529*                  LD	HL,(DATPTR)
002CC1 7E          1530*  READ0:          LD	A,(HL)
002CC2 FE 3A       1531*                  CP	':'
002CC4 CC B1 2C    1532*                  CALL	Z,REFIL1
002CC7 23          1533*                  INC	HL		;SKIP COMMA | "DATA"
002CC8 FE 0D       1534*                  CP	CR		;END OF DATA STMT?
002CCA CC F9 2C    1535*                  CALL	Z,GETDAT
002CCD E5          1536*                  PUSH	HL
002CCE CD 0F 26    1537*                  CALL	VAR_
002CD1 E1          1538*                  POP	HL
002CD2 B7          1539*                  OR	A
002CD3 FA E9 2C    1540*                  JP	M,READ1		;STRING
002CD6 E5          1541*                  PUSH	HL
002CD7 FD E3       1542*                  EX	(SP),IY
002CD9 F5          1543*                  PUSH	AF		;SAVE TYPE
002CDA DD E5       1544*                  PUSH	IX
002CDC CD 65 18    1545*                  CALL	EXPRN
002CDF DD E1       1546*                  POP	IX
002CE1 F1          1547*                  POP	AF
002CE2 CD 29 32    1548*                  CALL	STOREN
002CE5 FD E3       1549*                  EX	(SP),IY
002CE7 18 07       1550*                  JR	READ2
002CE9 CD F7 35    1551*  READ1:          CALL	FETCHS
002CEC E5          1552*                  PUSH	HL
002CED CD 77 32    1553*                  CALL	STACCS
002CF0 E1          1554*  READ2:          POP	HL
002CF1 22 F0 54    1555*                  LD	(DATPTR),HL
002CF4 CD 39 45    1556*                  CALL	NLIST
002CF7 18 C8       1557*                  JR	READ0
002CF9             1558*  ;
002CF9 CD 32 36    1559*  GETDAT:         CALL	DSRCH
002CFC 23          1560*                  INC	HL
002CFD D0          1561*                  RET	NC
002CFE 3E 2A       1562*                  LD	A,42
002D00 18 64       1563*                  JR	ERROR4ex		;"Out of DATA"
002D02             1564*  ;
002D02             1565*  ;IF expr statement
002D02             1566*  ;IF expr THEN statement [ELSE statement]
002D02             1567*  ;IF expr THEN line [ELSE line]
002D02             1568*  ;IF expr THEN
002D02             1569*  ;
002D02 CD 6C 18    1570*  IF_:            CALL	EXPRI
002D05 CD 92 1F    1571*                  CALL	TEST
002D08 28 2A       1572*                  JR	Z,IFNOT		;FALSE
002D0A FD 7E 00    1573*                  LD	A,(IY)
002D0D FE 8C       1574*                  CP	TTHEN
002D0F C2 D2 24    1575*                  JP	NZ,XEQ
002D12 FD 23       1576*  IF0:            INC	IY		;SKIP "THEN"
002D14 FD 7E 00    1577*                  LD	A,(IY)
002D17 FE 3B       1578*                  CP	';'
002D19 28 F7       1579*                  JR	Z,IF0
002D1B CD 44 45    1580*  IF1:            CALL	NXT
002D1E FE 8D       1581*                  CP	TLINO
002D20 C2 D2 24    1582*                  JP	NZ,XEQ		;STATEMENT FOLLOWS
002D23 C3 ED 28    1583*                  JP	GOTO		;LINE NO. FOLLOWS
002D26             1584*  ;
002D26 FD 7E 00    1585*  IFELSE:         LD	A,(IY)
002D29 FD 23       1586*                  INC	IY
002D2B FE 3B       1587*                  CP	';'
002D2D 20 0A       1588*                  JR	NZ,IFNEXT
002D2F 18 1E       1589*                  JR	IFTHEN
002D31             1590*  ;
002D31 CD D2 36    1591*  IF2:            CALL	QUOTE		;SKIP STRING
002D34 FD 7E 00    1592*  IFNOT:          LD	A,(IY)
002D37 FD 23       1593*                  INC	IY
002D39 FE 22       1594*  IFNEXT:         CP	'"'
002D3B 28 F4       1595*                  JR	Z,IF2		;QUOTED STRING
002D3D FE F4       1596*                  CP	TREM
002D3F CA 6A 25    1597*                  JP	Z,REM		;REM
002D42 FE 0D       1598*                  CP	CR
002D44 CA BD 24    1599*                  JP	Z,XEQ0		;END OF LINE
002D47 FE 8B       1600*                  CP	TELSE
002D49 28 D0       1601*                  JR	Z,IF1		;ELSE CLAUSE
002D4B FE 8C       1602*                  CP	TTHEN
002D4D 20 E5       1603*                  JR	NZ,IFNOT	;TRY FOR END AGAIN
002D4F FD 7E 00    1604*  IFTHEN:         LD	A,(IY)
002D52 FE 0D       1605*                  CP	CR
002D54 20 D0       1606*                  JR	NZ,IFELSE
002D56 01 8B 00    1607*                  LD	BC,TELSE
002D59 11 8C CD    1608*                  LD	DE,TENDIF*256+TTHEN
002D5C FD 23       1609*                  INC	IY
002D5E CD 4A 36    1610*                  CALL	NSCAN
002D61 CA D9 24    1611*                  JP	Z,XEQ1
002D64 3E 31       1612*  NENDIF:         LD	A,49
002D66 C3 7D 3F    1613*  ERROR4ex:         JP	ERROR_		;"Missing ENDIF"
002D69             1614*  ;
002D69             1615*  ; ELSE (multi-line)
002D69             1616*  ;
002D69 01 FD FF    1617*  MELSE:          LD	BC,-3
002D6C FD 09       1618*                  ADD	IY,BC
002D6E 01 CD 00    1619*                  LD	BC,TENDIF
002D71 11 8C CD    1620*                  LD	DE,TENDIF*256+TTHEN
002D74 CD 4A 36    1621*                  CALL	NSCAN
002D77 20 EB       1622*                  JR	NZ,NENDIF
002D79 C3 D2 24    1623*  XEQGO7:         JP	XEQ
002D7C             1624*  ;
002D7C             1625*  ; WHEN and OTHERWISE:
002D7C             1626*  ;
002D7C 01 FD FF    1627*  WHEN:           LD	BC,-3
002D7F FD 09       1628*                  ADD	IY,BC
002D81 01 CB 00    1629*                  LD	BC,TENDCASE
002D84 11 CA CB    1630*                  LD	DE,TENDCASE*256+TOF
002D87 CD 4A 36    1631*                  CALL	NSCAN
002D8A 28 ED       1632*                  JR	Z,XEQGO7
002D8C 3E 2F       1633*                  LD	A,47
002D8E 18 D6       1634*                  JR	ERROR4ex		;"Missing ENDCASE"
002D90             1635*  ;
002D90             1636*  ; CASE
002D90             1637*  ;
002D90 CD 3B 17    1638*  CASE:           CALL	EXPR		;String or numeric
002D93 08          1639*                  EX	AF,AF'
002D94 06 00       1640*                  LD	B,0		;Flag numeric
002D96 F2 9F 2D    1641*                  JP	P,CASE6		;numeric
002D99 CD 52 20    1642*                  CALL	PUSHS		;put string on stack
002D9C C1          1643*                  POP	BC		;C = length
002D9D 06 01       1644*                  LD	B,1		;Flag string
002D9F FD 7E 00    1645*  CASE6:          LD	A,(IY)
002DA2 FD 23       1646*                  INC	IY
002DA4 FE CA       1647*                  CP	TOF
002DA6 3E 25       1648*                  LD	A,37
002DA8 20 BC       1649*                  JR	NZ,ERROR4ex	;"Missing OF"
002DAA FD 7E 00    1650*                  LD	A,(IY)
002DAD FD 23       1651*                  INC	IY		;Address line-length byte
002DAF FE 0D       1652*                  CP	CR
002DB1 3E 30       1653*                  LD	A,48
002DB3 20 B1       1654*                  JR	NZ,ERROR4ex	;"OF not last"
002DB5 AF          1655*  CASE1:          XOR	A		;Level
002DB6 D9          1656*  CASE0:          EXX
002DB7 E5          1657*                  PUSH	HL		;Push to stack
002DB8 D9          1658*                  EXX
002DB9 E5          1659*                  PUSH	HL
002DBA C5          1660*                  PUSH	BC
002DBB 6F          1661*                  LD	L,A		;Level
002DBC 01 C9 CC    1662*                  LD	BC,TOTHERWISE*256+TWHEN
002DBF 11 CA CB    1663*                  LD	DE,TENDCASE*256+TOF
002DC2 CD 4C 36    1664*                  CALL	NSCAN1
002DC5 C1          1665*                  POP	BC		;Restore from stack
002DC6 E1          1666*                  POP	HL
002DC7 D9          1667*                  EXX
002DC8 E1          1668*                  POP	HL
002DC9 D9          1669*                  EXX
002DCA 3E 2F       1670*                  LD	A,47
002DCC C2 7D 3F    1671*                  JP	NZ,ERROR_	;Missing ENDCASE
002DCF FD 7E FF    1672*                  LD	A,(IY-1)
002DD2 FE CB       1673*                  CP	TENDCASE
002DD4 28 56       1674*                  JR	Z,CASE9
002DD6 FE CC       1675*                  CP	TOTHERWISE
002DD8 28 52       1676*                  JR	Z,CASE9
002DDA CB 40       1677*  CASE4:          BIT	0,B		;Numeric or string?
002DDC 20 69       1678*                  JR	NZ,CASE3
002DDE C5          1679*                  PUSH	BC		;Type/exponent/length
002DDF E5          1680*                  PUSH	HL		;MS 32 bits
002DE0 D9          1681*                  EXX
002DE1 E5          1682*                  PUSH	HL		;LS 32 bits
002DE2 D9          1683*                  EXX
002DE3 CD 65 18    1684*                  CALL	EXPRN
002DE6 DD 21 00 00 1685*                  LD	IX,0
002DEA DD 39       1686*                  ADD	IX,SP		;Address stack
002DEC D9          1687*                  EXX
002DED DD 5E 00    1688*                  LD	E,(IX+0)	;Get LS 32-bits
002DF0 DD 56 01    1689*                  LD	D,(IX+1)
002DF3 D9          1690*                  EXX
002DF4 DD 5E 02    1691*                  LD	E,(IX+2)
002DF7 DD 56 03    1692*                  LD	D,(IX+3)	;Get MS 32-bits
002DFA DD 46 04    1693*                  LD	B,(IX+4)	;Get exponent
002DFD 3E 09       1694*                  LD	A,9
002DFF CD 4E 45    1695*                  CALL	FPP		;In case integer vs float
002E02 7D          1696*                  LD	A,L
002E03 B7          1697*                  OR	A		;NZ if equal
002E04 D9          1698*                  EXX
002E05 E1          1699*                  POP	HL
002E06 D9          1700*                  EXX
002E07 E1          1701*                  POP	HL
002E08 C1          1702*                  POP	BC
002E09 20 2C       1703*                  JR	NZ,CASE5	;Match found
002E0B FD 7E 00    1704*  CASE2:          LD	A,(IY)
002E0E FD 23       1705*                  INC	IY
002E10 FE 2C       1706*                  CP	','
002E12 28 C6       1707*                  JR	Z,CASE4		;Not found, try another
002E14 D9          1708*                  EXX
002E15 FD E5       1709*                  PUSH	IY
002E17 E3          1710*                  EX	(SP),HL
002E18 3E 0D       1711*                  LD	A,CR
002E1A 47          1712*                  LD	B,A
002E1B ED B1       1713*                  CPIR			;Find CR
002E1D E3          1714*                  EX	(SP),HL
002E1E FD E1       1715*                  POP	IY
002E20 D9          1716*                  EXX
002E21 FD 7E FE    1717*                  LD	A,(IY-2)	;Last token in previous line
002E24 FE CA       1718*                  CP	TOF		;CASE statement in WHEN line
002E26 20 8D       1719*                  JR	NZ,CASE1
002E28 3E 01       1720*                  LD	A,1
002E2A 18 8A       1721*                  JR	CASE0
002E2C             1722*  ;
002E2C             1723*  ;Finished, level stack if string:
002E2C             1724*  ;
002E2C CB 40       1725*  CASE9:          BIT	0,B
002E2E 28 49       1726*                  JR	Z,XEQGO5
002E30 26 00       1727*                  LD	H,0
002E32 69          1728*                  LD	L,C
002E33 39          1729*                  ADD	HL,SP
002E34 F9          1730*                  LD	SP,HL
002E35 18 42       1731*                  JR	XEQGO5
002E37             1732*  ;
002E37             1733*  ;Matched, so skip any more expressions:
002E37             1734*  ;
002E37 CD 44 45    1735*  CASE5:          CALL	NXT
002E3A FE 2C       1736*                  CP	','
002E3C 20 EE       1737*                  JR	NZ,CASE9	;End of list
002E3E FD 23       1738*                  INC	IY
002E40 C5          1739*                  PUSH	BC		;Save type and string length
002E41 CD 3B 17    1740*                  CALL	EXPR		;Evaluate but discard
002E44 C1          1741*                  POP	BC
002E45 18 F0       1742*                  JR	CASE5
002E47             1743*  ;
002E47             1744*  ;String compare:
002E47             1745*  ;
002E47 C5          1746*  CASE3:          PUSH	BC
002E48 CD 75 18    1747*                  CALL	EXPRS
002E4B C1          1748*                  POP	BC
002E4C 21 00 00    1749*                  LD	HL,0
002E4F 39          1750*                  ADD	HL,SP
002E50 43          1751*                  LD	B,E
002E51 11 00 52    1752*                  LD	DE,ACCS
002E54 C5          1753*                  PUSH	BC
002E55 CD 2E 20    1754*                  CALL	SCP		;String compare
002E58 C1          1755*                  POP	BC
002E59 06 01       1756*                  LD	B,1
002E5B 20 AE       1757*                  JR	NZ,CASE2
002E5D 18 D8       1758*                  JR	CASE5
002E5F             1759*  ;
002E5F             1760*  ; WHILE
002E5F             1761*  ;
002E5F FD E5       1762*  WHILE:          PUSH	IY		;Save current position
002E61 CD BF 32    1763*                  CALL	CHECK
002E64 CD 67 2E    1764*                  CALL	WHICHK		;Push marker
002E67 CD 6C 18    1765*  WHICHK:         CALL	EXPRI
002E6A CD 92 1F    1766*                  CALL	TEST
002E6D 20 0A       1767*                  JR	NZ,XEQGO5
002E6F C1          1768*                  POP	BC		;Pop marker
002E70 C1          1769*                  POP	BC		;Level stack
002E71 01 00 95    1770*                  LD	BC,TWHILE+TENDWHILE*256
002E74 16 01       1771*                  LD	D,1
002E76 CD 89 36    1772*                  CALL	WSRCH
002E79 C3 D2 24    1773*  XEQGO5:         JP	XEQ
002E7C             1774*  ;
002E7C             1775*  ; ENDWHILE
002E7C             1776*  ;
002E7C C1          1777*  ENDWHI:         POP	BC		;Marker
002E7D D1          1778*                  POP	DE		;Saved text pointer
002E7E D5          1779*                  PUSH	DE
002E7F C5          1780*                  PUSH	BC
002E80 B7          1781*                  OR	A
002E81 21 67 2E    1782*                  LD	HL,WHICHK
002E84 ED 42       1783*                  SBC	HL,BC
002E86 28 0B       1784*                  JR	Z,ENDWH1
002E88 3E 03       1785*                  LD	A,3
002E8A CD 6A 34    1786*                  CALL	RESLOC
002E8D 20 ED       1787*                  JR	NZ,ENDWHI
002E8F 3E 2E       1788*                  LD	A,46
002E91 18 4F       1789*                  JR	ERROR5		;"Not in a WHILE loop"
002E93             1790*  ;
002E93 FD E5       1791*  ENDWH1:         PUSH	IY
002E95 FD 21 00 00 1792*                  LD	IY,0
002E99 FD 19       1793*                  ADD	IY,DE
002E9B CD 6C 18    1794*                  CALL	EXPRI
002E9E CD 92 1F    1795*                  CALL	TEST
002EA1 D1          1796*                  POP	DE		;Text pointer
002EA2 20 D5       1797*                  JR	NZ,XEQGO5
002EA4 C1          1798*                  POP	BC		;Junk marker
002EA5 C1          1799*                  POP	BC		;Junk pointer
002EA6 FD 21 00 00 1800*                  LD	IY,0
002EAA FD 19       1801*                  ADD	IY,DE
002EAC 18 CB       1802*                  JR	XEQGO5
002EAE             1803*  ;
002EAE             1804*  ;CLS
002EAE             1805*  ;
002EAE CD 63 00    1806*  CLS:            CALL	CLRSCN
002EB1 AF          1807*                  XOR	A
002EB2 32 FB 54    1808*                  LD	(COUNT),A
002EB5 18 C2       1809*                  JR	XEQGO5
002EB7             1810*  ;
002EB7             1811*  ;STOP
002EB7             1812*  ;
002EB7 CD 33 45    1813*  STOP:           CALL	TELL
002EBA 0D          1814*                  DB	CR
002EBB 0A          1815*                  DB	LF
002EBC FA          1816*                  DB	TSTOP
002EBD 00          1817*                  DB	0
002EBE CD 94 41    1818*                  CALL	SETLIN		;FIND CURRENT LINE
002EC1 CD BB 41    1819*                  CALL	SAYLN
002EC4 CD 34 41    1820*                  CALL	CRLF
002EC7 C3 E9 37    1821*                  JP	CLOOP
002ECA             1822*  ;
002ECA             1823*  ;REPORT
002ECA             1824*  ;
002ECA CD 1E 45    1825*  REPOR:          CALL	REPORT
002ECD 18 AA       1826*                  JR	XEQGO5
002ECF             1827*  ;
002ECF             1828*  ;CLEAR
002ECF             1829*  ;
002ECF CD 7C 40    1830*  CLR:            CALL	CLEAR
002ED2 2A DC 54    1831*                  LD	HL,(PAGE_)
002ED5 18 3B       1832*                  JR	RESTR1
002ED7             1833*  ;
002ED7             1834*  ;RESTORE ERROR
002ED7             1835*  ;
002ED7 FD 23       1836*  RESERR:         INC	IY
002ED9 3E 02       1837*                  LD	A,2
002EDB CD 6A 34    1838*                  CALL	RESLOC
002EDE 20 99       1839*                  JR	NZ,XEQGO5
002EE0 3E 35       1840*                  LD	A,53		;ON ERROR not LOCAL
002EE2 C3 7D 3F    1841*  ERROR5:         JP	ERROR_
002EE5             1842*  ;
002EE5             1843*  ;RESTORE DATA
002EE5             1844*  ;
002EE5 FD 23       1845*  RESDAT:         INC	IY
002EE7 3E 01       1846*                  LD	A,1
002EE9 CD 6A 34    1847*                  CALL	RESLOC
002EEC 20 8B       1848*                  JR	NZ,XEQGO5
002EEE 3E 36       1849*                  LD	A,54		;'DATA not LOCAL'
002EF0 21          1850*                  DB	21H
002EF1 3E 29       1851*  NOLINE:         LD	A,41		;'No such line'
002EF3 18 ED       1852*                  JR	ERROR5
002EF5             1853*  ;
002EF5             1854*  ;RESTORE [line]
002EF5             1855*  ;
002EF5 FE 85       1856*  RESTOR:         CP	TERROR
002EF7 28 DE       1857*                  JR	Z,RESERR
002EF9 FE DC       1858*                  CP	TDATA
002EFB 28 E8       1859*                  JR	Z,RESDAT
002EFD FE 2B       1860*                  CP	'+'
002EFF 28 1A       1861*                  JR	Z,RESREL
002F01 2A DC 54    1862*                  LD	HL,(PAGE_)
002F04 CD 6F 35    1863*                  CALL	TERMQ
002F07 28 09       1864*                  JR	Z,RESTR1
002F09 CD 99 18    1865*                  CALL	ITEMI
002F0C D9          1866*                  EXX
002F0D CD 7C 41    1867*                  CALL	FINDL		;SEARCH FOR LINE
002F10 20 DF       1868*                  JR	NZ,NOLINE
002F12 CD 32 36    1869*  RESTR1:         CALL	DSRCH
002F15 22 F0 54    1870*                  LD	(DATPTR),HL
002F18 C3 D2 24    1871*                  JP	XEQ
002F1B             1872*  ;
002F1B CD 6C 18    1873*  RESREL:         CALL	EXPRI
002F1E D9          1874*                  EXX
002F1F EB          1875*                  EX	DE,HL
002F20 FD E5       1876*                  PUSH	IY
002F22 E1          1877*                  POP	HL
002F23 3E 0D       1878*                  LD	A,CR
002F25 47          1879*                  LD	B,A
002F26 ED B1       1880*                  CPIR			;FIND LINE END
002F28 1D          1881*                  DEC	E
002F29 28 E7       1882*                  JR	Z,RESTR1
002F2B FA 12 2F    1883*                  JP	M,RESTR1
002F2E AF          1884*                  XOR	A
002F2F 47          1885*                  LD	B,A
002F30 4E          1886*  RESTR2:         LD	C,(HL)
002F31 B9          1887*                  CP	C
002F32 28 BD       1888*                  JR	Z,NOLINE
002F34 09          1889*                  ADD	HL,BC
002F35 1D          1890*                  DEC	E
002F36 20 F8       1891*                  JR	NZ,RESTR2
002F38 18 D8       1892*                  JR	RESTR1
002F3A             1893*  ;
002F3A             1894*  ;PTR#channel=expr
002F3A             1895*  ;PAGE=expr
002F3A             1896*  ;TIME=expr
002F3A             1897*  ;LOMEM=expr
002F3A             1898*  ;HIMEM=expr
002F3A             1899*  ;
002F3A CD 0A 37    1900*  PTR:            CALL	CHANEL
002F3D CD 88 35    1901*                  CALL	EQUALS
002F40 7B          1902*                  LD	A,E
002F41 F5          1903*                  PUSH	AF
002F42 CD 6C 18    1904*                  CALL	EXPRI
002F45 E5          1905*                  PUSH	HL
002F46 D9          1906*                  EXX
002F47 D1          1907*                  POP	DE
002F48 F1          1908*                  POP	AF
002F49 CD B2 12    1909*                  CALL	PUTPTR
002F4C 18 61       1910*                  JR	XEQGO1ex
002F4E             1911*  ;
002F4E CD 88 35    1912*  PAGEV:          CALL	EQUALS
002F51 CD 6C 18    1913*                  CALL	EXPRI
002F54 D9          1914*                  EXX
002F55 2E 00       1915*                  LD	L,0
002F57 22 DC 54    1916*                  LD	(PAGE_),HL
002F5A 18 53       1917*                  JR	XEQGO1ex
002F5C             1918*  ;
002F5C FE 24       1919*  TIMEV:          CP	'$'
002F5E 28 0E       1920*                  JR	Z,TIMEVS
002F60 CD 88 35    1921*                  CALL	EQUALS
002F63 CD 6C 18    1922*                  CALL	EXPRI
002F66 E5          1923*                  PUSH	HL
002F67 D9          1924*                  EXX
002F68 D1          1925*                  POP	DE
002F69 CD 2E 00    1926*                  CALL	PUTIME
002F6C 18 41       1927*                  JR	XEQGO1ex
002F6E             1928*  ;
002F6E FD 23       1929*  TIMEVS:         INC	IY		;SKIP '$'
002F70 CD 88 35    1930*                  CALL	EQUALS
002F73 CD 75 18    1931*                  CALL	EXPRS
002F76 CD 4B 00    1932*                  CALL	PUTIMS
002F79 18 34       1933*                  JR	XEQGO1ex
002F7B             1934*  ;
002F7B CD 88 35    1935*  LOMEMV:         CALL	EQUALS
002F7E CD 6C 18    1936*                  CALL	EXPRI
002F81 CD 7C 40    1937*                  CALL	CLEAR
002F84 D9          1938*                  EXX
002F85 22 DE 54    1939*                  LD	(LOMEM),HL
002F88 22 E0 54    1940*                  LD	(FREE),HL
002F8B 18 22       1941*                  JR	XEQGO1ex
002F8D             1942*  ;
002F8D CD 88 35    1943*  HIMEMV:         CALL	EQUALS
002F90 CD 6C 18    1944*                  CALL	EXPRI
002F93 D9          1945*                  EXX
002F94 ED 5B E0 54 1946*                  LD	DE,(FREE)
002F98 14          1947*                  INC	D
002F99 AF          1948*                  XOR	A
002F9A ED 52       1949*                  SBC	HL,DE
002F9C 19          1950*                  ADD	HL,DE
002F9D DA 7D 3F    1951*                  JP	C,ERROR_		;"No room"
002FA0 ED 5B E2 54 1952*                  LD	DE,(HIMEM)
002FA4 22 E2 54    1953*                  LD	(HIMEM),HL
002FA7 EB          1954*                  EX	DE,HL
002FA8 ED 72       1955*                  SBC	HL,SP
002FAA C2 D2 24    1956*                  JP	NZ,XEQ
002FAD EB          1957*                  EX	DE,HL
002FAE F9          1958*                  LD	SP,HL		;LOAD STACK POINTER
002FAF C3 D2 24    1959*  XEQGO1ex:         JP	XEQ
002FB2             1960*  ;
002FB2             1961*  ;WIDTH expr
002FB2             1962*  ;
002FB2 CD 6C 18    1963*  WIDTHV:         CALL	EXPRI
002FB5 D9          1964*                  EXX
002FB6 7D          1965*                  LD	A,L
002FB7 32 FC 54    1966*                  LD	(WIDTH),A
002FBA 18 F3       1967*                  JR	XEQGO1ex
002FBC             1968*  ;
002FBC             1969*  ;TRACE ON
002FBC             1970*  ;TRACE OFF
002FBC             1971*  ;TRACE line
002FBC             1972*  ;
002FBC FD 23       1973*  TRACE:          INC	IY
002FBE 21 00 00    1974*                  LD	HL,0
002FC1 FE EE       1975*                  CP	TON
002FC3 28 0A       1976*                  JR	Z,TRACE0
002FC5 FE 87       1977*                  CP	TOFF
002FC7 28 07       1978*                  JR	Z,TRACE1
002FC9 FD 2B       1979*                  DEC	IY
002FCB CD 6C 18    1980*                  CALL	EXPRI
002FCE D9          1981*                  EXX
002FCF 2B          1982*  TRACE0:         DEC	HL
002FD0 22 E6 54    1983*  TRACE1:         LD	(TRACEN),HL
002FD3 18 DA       1984*                  JR	XEQGO1ex
002FD5             1985*  ;
002FD5             1986*  ;VDU expr,expr;....[|]
002FD5             1987*  ;
002FD5 CD 6C 18    1988*  VDU:            CALL	EXPRI
002FD8 D9          1989*                  EXX
002FD9 7D          1990*                  LD	A,L
002FDA 06 01       1991*                  LD	B,1
002FDC CD CE 11    1992*  VDU1:           CALL	OSWRCH
002FDF 10 FB       1993*                  DJNZ	VDU1
002FE1 FD 7E 00    1994*                  LD	A,(IY)
002FE4 FE 7C       1995*                  CP	'|'
002FE6 28 15       1996*                  JR	Z,VDU4
002FE8 FE 2C       1997*                  CP	','
002FEA 28 08       1998*                  JR	Z,VDU2
002FEC FE 3B       1999*                  CP	';'
002FEE 20 06       2000*                  JR	NZ,VDU3
002FF0 7C          2001*                  LD	A,H
002FF1 CD CE 11    2002*                  CALL	OSWRCH
002FF4 FD 23       2003*  VDU2:           INC	IY
002FF6 CD 6F 35    2004*  VDU3:           CALL	TERMQ
002FF9 20 DA       2005*                  JR	NZ,VDU
002FFB 18 B2       2006*                  JR	XEQGO1ex
002FFD             2007*  ;
002FFD FD 23       2008*  VDU4:           INC	IY
002FFF AF          2009*                  XOR	A
003000 06 09       2010*                  LD	B,9
003002 18 D8       2011*                  JR	VDU1
003004             2012*  ;
003004             2013*  ;CLOSE channel number
003004             2014*  ;
003004 CD 0A 37    2015*  CLOSE:          CALL	CHANEL
003007 CD 70 12    2016*                  CALL	OSSHUT
00300A 18 A3       2017*                  JR	XEQGO1ex
00300C             2018*  ;
00300C             2019*  ;BPUT #channel,byte
00300C             2020*  ;BPUT #channel,string[;]
00300C             2021*  ;
00300C CD 0A 37    2022*  BPUT:           CALL	CHANEL		;CHANNEL NUMBER
00300F D5          2023*                  PUSH	DE
003010 CD DB 20    2024*                  CALL	COMMA
003013 CD 3B 17    2025*                  CALL	EXPR
003016 08          2026*                  EX	AF,AF'
003017 FA 25 30    2027*                  JP	M,BPUTS
00301A CD 50 1C    2028*                  CALL	SFIX
00301D D9          2029*                  EXX
00301E 7D          2030*                  LD	A,L
00301F D1          2031*                  POP	DE
003020 CD 80 12    2032*                  CALL	OSBPUT
003023 18 8A       2033*  BPUTX:          JR	XEQGO1ex
003025             2034*  ;
003025 7B          2035*  BPUTS:          LD	A,E
003026 D1          2036*                  POP	DE
003027 57          2037*                  LD	D,A
003028 21 00 52    2038*                  LD	HL,ACCS
00302B 7E          2039*  BPUTS1:         LD	A,(HL)
00302C 23          2040*                  INC	HL
00302D CD 80 12    2041*                  CALL	OSBPUT
003030 15          2042*                  DEC	D
003031 20 F8       2043*                  JR	NZ,BPUTS1
003033 CD 44 45    2044*                  CALL	NXT
003036 FE 3B       2045*                  CP	';'
003038 FD 23       2046*                  INC	IY
00303A 28 E7       2047*                  JR	Z,BPUTX
00303C 3E 0A       2048*                  LD	A,LF
00303E CD 80 12    2049*                  CALL	OSBPUT
003041 FD 2B       2050*                  DEC	IY
003043 18 DE       2051*                  JR	BPUTX
003045             2052*  ;
003045             2053*  ;CALL address[,var[,var...]]
003045             2054*  ;
003045 CD 6C 18    2055*  CALL:           CALL	EXPRI		;ADDRESS
003048 D9          2056*                  EXX
003049 E5          2057*                  PUSH	HL		;SAVE IT
00304A 06 00       2058*                  LD	B,0		;PARAMETER COUNTER
00304C 11 00 53    2059*                  LD	DE,BUFFER	;VECTOR
00304F CD 44 45    2060*  CALL1:          CALL	NXT
003052 FE 2C       2061*                  CP	','
003054 20 17       2062*                  JR	NZ,CALL2
003056 FD 23       2063*                  INC	IY
003058 04          2064*                  INC	B
003059 CD 44 45    2065*                  CALL	NXT
00305C C5          2066*                  PUSH	BC
00305D D5          2067*                  PUSH	DE
00305E CD 0F 26    2068*                  CALL	VAR_
003061 D1          2069*                  POP	DE
003062 C1          2070*                  POP	BC
003063 13          2071*                  INC	DE
003064 12          2072*                  LD	(DE),A		;PARAMETER TYPE
003065 13          2073*                  INC	DE
003066 EB          2074*                  EX	DE,HL
003067 73          2075*                  LD	(HL),E		;PARAMETER ADDRESS
003068 23          2076*                  INC	HL
003069 72          2077*                  LD	(HL),D
00306A EB          2078*                  EX	DE,HL
00306B 18 E2       2079*                  JR	CALL1
00306D 78          2080*  CALL2:          LD	A,B
00306E 32 00 53    2081*                  LD	(BUFFER),A	;PARAMETER COUNT
003071 E1          2082*                  POP	HL		;RESTORE ADDRESS
003072 CD 7C 30    2083*                  CALL	USR1
003075 C3 D2 24    2084*                  JP	XEQ
003078             2085*  ;
003078             2086*  ;USR(address)
003078             2087*  ;
003078 CD 99 18    2088*  USR:            CALL	ITEMI
00307B D9          2089*                  EXX
00307C E5          2090*  USR1:           PUSH	HL		;ADDRESS ON STACK
00307D FD E3       2091*                  EX	(SP),IY
00307F 24          2092*                  INC	H		;PAGE &FF?
003080 21 AB 30    2093*                  LD	HL,USR2		;RETURN ADDRESS
003083 E5          2094*                  PUSH	HL
003084 DD 21 00 54 2095*                  LD	IX,STAVAR
003088 CC 7F 03    2096*                  CALL	Z,OSCALL	;INTERCEPT PAGE &FF
00308B DD 4E 18    2097*                  LD	C,(IX+24)
00308E C5          2098*                  PUSH	BC
00308F F1          2099*                  POP	AF		;LOAD FLAGS
003090 DD 7E 04    2100*                  LD	A,(IX+4)	;LOAD Z80 REGISTERS
003093 DD 46 08    2101*                  LD	B,(IX+8)
003096 DD 4E 0C    2102*                  LD	C,(IX+12)
003099 DD 56 10    2103*                  LD	D,(IX+16)
00309C DD 5E 14    2104*                  LD	E,(IX+20)
00309F DD 66 20    2105*                  LD	H,(IX+32)
0030A2 DD 6E 30    2106*                  LD	L,(IX+48)
0030A5 DD 21 00 53 2107*                  LD	IX,BUFFER
0030A9 FD E9       2108*                  JP	(IY)		;OFF TO USER ROUTINE
0030AB FD E1       2109*  USR2:           POP	IY
0030AD AF          2110*                  XOR	A
0030AE 4F          2111*                  LD	C,A
0030AF C9          2112*                  RET
0030B0             2113*  ;
0030B0             2114*  ; LEFT$(A$[,N]) = string
0030B0             2115*  ; MID$(A$,N[,M]) = string
0030B0             2116*  ; RIGHT$(A$[,N]) = string
0030B0             2117*  ;
0030B0 CD F7 25    2118*  LEFTSL:         CALL    GETSTR
0030B3 21 00 FF    2119*                  LD	HL,0FF00H	;Default all but last
0030B6 20 48       2120*                  JR	NZ,MIDSL1
0030B8 18 26       2121*                  JR	MIDSL0
0030BA             2122*  ;
0030BA CD F7 25    2123*  RITESL:         CALL	GETSTR
0030BD 21 FF FF    2124*                  LD	HL,0FFFFH	;Default last char only
0030C0 20 3E       2125*                  JR	NZ,MIDSL1
0030C2 18 1C       2126*                  JR	MIDSL0
0030C4             2127*  ;
0030C4 CD F7 25    2128*  MIDSL:          CALL	GETSTR
0030C7 3E 05       2129*                  LD	A,5
0030C9 C2 7D 3F    2130*                  JP	NZ,ERROR_	;'Missing comma'
0030CC FD 23       2131*                  INC	IY
0030CE DD E5       2132*                  PUSH	IX
0030D0 CD 6C 18    2133*                  CALL	EXPRI
0030D3 DD E1       2134*                  POP	IX
0030D5 D9          2135*                  EXX
0030D6 CD 44 45    2136*                  CALL	NXT
0030D9 2D          2137*                  DEC	L
0030DA 26 FE       2138*                  LD	H,254		;Default rest of string
0030DC FE 2C       2139*                  CP	','
0030DE 20 20       2140*                  JR	NZ,MIDSL1
0030E0 FD 23       2141*  MIDSL0:         INC	IY
0030E2 E5          2142*                  PUSH	HL
0030E3 DD E5       2143*                  PUSH	IX
0030E5 CD 6C 18    2144*                  CALL	EXPRI
0030E8 DD E1       2145*                  POP	IX
0030EA D9          2146*                  EXX
0030EB 7D          2147*                  LD	A,L
0030EC E1          2148*                  POP	HL
0030ED B7          2149*                  OR	A
0030EE 28 0D       2150*                  JR	Z,MIDSL2	;Zero length
0030F0 3D          2151*                  DEC	A
0030F1 85          2152*                  ADD	A,L
0030F2 67          2153*                  LD	H,A
0030F3 30 0B       2154*                  JR	NC,MIDSL1
0030F5 7D          2155*                  LD	A,L
0030F6 3C          2156*                  INC	A
0030F7 28 07       2157*                  JR	Z,MIDSL1
0030F9 26 FE       2158*                  LD	H,254
0030FB 18 03       2159*                  JR	MIDSL1
0030FD             2160*  ;
0030FD 21 01 00    2161*  MIDSL2:         LD	HL,1
003100 CD E7 20    2162*  MIDSL1:         CALL	BRAKET
003103 CD 88 35    2163*                  CALL	EQUALS
003106 E5          2164*                  PUSH	HL
003107 DD E5       2165*                  PUSH	IX
003109 CD 75 18    2166*                  CALL	EXPRS
00310C DD E1       2167*                  POP	IX
00310E E1          2168*                  POP	HL
00310F 4B          2169*                  LD	C,E
003110 DD 46 00    2170*                  LD	B,(IX+0)
003113 DD 5E 02    2171*                  LD	E,(IX+2)
003116 DD 56 03    2172*                  LD	D,(IX+3)
003119             2173*  ;
003119             2174*  ; Source string at ACCS, length C
003119             2175*  ; Destination string at DE, length B
003119             2176*  ; L = first character to modify 0-254
003119             2177*  ; H =  last character to modify 0-254
003119             2178*  ; IF L=255 THEN modify rightmost H + 2 chars
003119             2179*  ; ELSE IF H=255 modify all but last character
003119             2180*  ; ELSE IF L > H do nothing
003119             2181*  ; IX = destination VARPTR
003119             2182*  ;
003119 7D          2183*                  LD	A,L
00311A 3C          2184*                  INC	A
00311B 20 0F       2185*                  JR	NZ,SUBSL1
00311D 24          2186*                  INC	H
00311E 24          2187*                  INC	H
00311F 79          2188*                  LD	A,C
003120 BC          2189*                  CP	H
003121 30 01       2190*                  JR	NC,SUBSL0
003123 67          2191*                  LD	H,A
003124 78          2192*  SUBSL0:         LD	A,B
003125 94          2193*                  SUB	H
003126 30 01       2194*                  JR	NC,SUBSL6
003128 AF          2195*                  XOR	A
003129 6F          2196*  SUBSL6:         LD	L,A
00312A 18 12       2197*                  JR	SUBSL5
00312C             2198*  ;
00312C 7C          2199*  SUBSL1:         LD	A,H
00312D 3C          2200*                  INC	A
00312E 20 06       2201*                  JR	NZ,SUBSL2
003130 78          2202*                  LD	A,B
003131 D6 02       2203*                  SUB	2
003133 38 24       2204*                  JR	C,SUBSL9
003135 67          2205*                  LD	H,A
003136 7D          2206*  SUBSL2:         LD	A,L
003137 B8          2207*                  CP	B
003138 30 1F       2208*                  JR	NC,SUBSL9
00313A 7C          2209*                  LD	A,H
00313B B8          2210*                  CP	B
00313C 38 03       2211*                  JR	C,SUBSL3
00313E 78          2212*  SUBSL5:         LD	A,B
00313F 3D          2213*                  DEC	A
003140 67          2214*                  LD	H,A
003141 7C          2215*  SUBSL3:         LD	A,H
003142 95          2216*                  SUB	L
003143 38 14       2217*                  JR	C,SUBSL9
003145 3C          2218*                  INC	A
003146 B9          2219*                  CP	C
003147 38 01       2220*                  JR	C,SUBSL4
003149 79          2221*                  LD	A,C
00314A 06 00       2222*  SUBSL4:         LD	B,0
00314C 60          2223*                  LD	H,B
00314D 4F          2224*                  LD	C,A
00314E B7          2225*                  OR	A
00314F 28 08       2226*                  JR	Z,SUBSL9
003151 EB          2227*                  EX	DE,HL
003152 19          2228*                  ADD	HL,DE
003153 EB          2229*                  EX	DE,HL
003154 21 00 52    2230*                  LD	HL,ACCS
003157 ED B0       2231*                  LDIR
003159 C3 D2 24    2232*  SUBSL9:         JP	XEQ
00315C             2233*  ;
00315C             2234*  ; EXITex FOR [var]
00315C             2235*  ; EXITex REPEAT
00315C             2236*  ; EXITex WHILE
00315C             2237*  ;
00315C FD 23       2238*  EXITex:           INC	IY		;Skip FOR/REPEAT/WHILE
00315E FE E3       2239*                  CP	TFOR
003160 20 0C       2240*                  JR	NZ,EXIT0
003162 DD 21 00 00 2241*                  LD	IX,0		;For EXITex FOR <var>
003166 CD 6F 35    2242*                  CALL	TERMQ
003169 C4 1C 42    2243*                  CALL	NZ,GETVAR
00316C 3E E3       2244*                  LD	A,TFOR
00316E 16 01       2245*  EXIT0:          LD	D,1		;Level for WSRCH
003170 5F          2246*                  LD	E,A
003171 7B          2247*  EXIT1:          LD	A,E
003172 C1          2248*                  POP	BC		;Marker
003173 21 9A 29    2249*                  LD	HL,FORCHK
003176 B7          2250*                  OR	A
003177 ED 42       2251*                  SBC	HL,BC
003179 28 25       2252*                  JR	Z,EXIT4
00317B 21 26 29    2253*                  LD	HL,REPCHK
00317E B7          2254*                  OR	A
00317F ED 42       2255*                  SBC	HL,BC
003181 28 38       2256*                  JR	Z,EXIT6
003183 21 67 2E    2257*                  LD	HL,WHICHK
003186 B7          2258*                  OR	A
003187 ED 42       2259*                  SBC	HL,BC
003189 28 3A       2260*                  JR	Z,EXIT7
00318B C5          2261*                  PUSH	BC		;Put back marker
00318C DD E5       2262*                  PUSH	IX
00318E C1          2263*                  POP	BC
00318F D9          2264*                  EXX
003190 3E 03       2265*                  LD	A,3
003192 CD 6A 34    2266*                  CALL	RESLOC
003195 D9          2267*                  EXX
003196 C5          2268*                  PUSH	BC
003197 DD E1       2269*                  POP	IX
003199 20 D6       2270*                  JR	NZ,EXIT1
00319B 3E 2C       2271*                  LD	A,44
00319D C3 7D 3F    2272*                  JP	ERROR_		;'Bad EXITex'
0031A0             2273*  ;
0031A0 C1          2274*  EXIT4:          POP	BC		;VARPTR
0031A1 21 0E 00    2275*                  LD	HL,14		;Skip text pointer, limit & step
0031A4 39          2276*                  ADD	HL,SP
0031A5 F9          2277*                  LD	SP,HL		;Pop FOR record
0031A6 FE E3       2278*                  CP	TFOR
0031A8 20 C7       2279*                  JR	NZ,EXIT1
0031AA DD E5       2280*                  PUSH	IX
0031AC E1          2281*                  POP	HL
0031AD 7C          2282*                  LD	A,H
0031AE B5          2283*                  OR	L
0031AF 28 02       2284*                  JR	Z,EXIT5
0031B1 ED 42       2285*                  SBC	HL,BC
0031B3 01 00 D0    2286*  EXIT5:          LD	BC,TFOR+TNEXT*256
0031B6 28 15       2287*                  JR	Z,EXIT8
0031B8 14          2288*                  INC	D		;Count nested FOR loops
0031B9 18 B6       2289*                  JR	EXIT1
0031BB             2290*  ;
0031BB C1          2291*  EXIT6:          POP	BC		;Text pointer
0031BC FE F5       2292*                  CP	TREPEAT
0031BE 20 B1       2293*                  JR	NZ,EXIT1
0031C0 01 00 F2    2294*                  LD	BC,TREPEAT+TUNTIL*256
0031C3 18 08       2295*                  JR	EXIT8
0031C5             2296*  ;
0031C5 C1          2297*  EXIT7:          POP	BC		;Text pointer
0031C6 FE C7       2298*                  CP	TWHILE
0031C8 20 A7       2299*                  JR	NZ,EXIT1
0031CA 01 00 95    2300*                  LD	BC,TWHILE+TENDWHILE*256
0031CD CD 89 36    2301*  EXIT8:          CALL	WSRCH
0031D0 CD 7B 35    2302*                  CALL	SPAN		;Skip UNTIL expression
0031D3 C3 D2 24    2303*                  JP	XEQ
0031D6             2304*  ;
0031D6             2305*  ;PUT port,data
0031D6             2306*  ;
0031D6 CD 6C 18    2307*  PUT:            CALL	EXPRI		;PORT ADDRESS
0031D9 D9          2308*                  EXX
0031DA E5          2309*                  PUSH	HL
0031DB CD DB 20    2310*                  CALL	COMMA
0031DE CD 6C 18    2311*                  CALL	EXPRI		;DATA
0031E1 D9          2312*                  EXX
0031E2 C1          2313*                  POP	BC
0031E3 ED 69       2314*                  OUT	(C),L		;OUTPUT TO PORT BC
0031E5 C3 D2 24    2315*                  JP	XEQ
0031E8             2316*  ;
0031E8             2317*  ;SUBROUTINES:
0031E8             2318*  ;
0031E8             2319*  ;ASSIGN - Assign a numeric value to a variable.
0031E8             2320*  ;Outputs: NC,  Z     - OK, numeric scalar
0031E8             2321*  ;         NC, NZ, PE - OK, string array  (D = type, E = operator)
0031E8             2322*  ; else if NC, NZ, P  - OK, numeric array (D = type, E = operator)
0031E8             2323*  ; else if NC, NZ     - OK, string scalar
0031E8             2324*  ;          C, NZ     - illegal / invalid
0031E8             2325*  ;
0031E8 CD 1C 42    2326*  ASSIGN:         CALL	GETVAR		;VARIABLE
0031EB D8          2327*                  RET	C		;ILLEGAL VARIABLE
0031EC C4 06 42    2328*                  CALL	NZ,PUTVAR
0031EF 57          2329*                  LD	D,A		;Type
0031F0 CD 44 45    2330*                  CALL	NXT
0031F3 FD 23       2331*                  INC	IY
0031F5 5F          2332*                  LD	E,A		;Operator (or =)
0031F6 FE 3D       2333*                  CP	'='
0031F8 C4 88 35    2334*                  CALL	NZ,EQUALS
0031FB 7A          2335*                  LD	A,D
0031FC E6 C0       2336*                  AND	11000000B
0031FE C0          2337*                  RET	NZ		;String or array
0031FF D5          2338*                  PUSH	DE
003200 E5          2339*                  PUSH	HL
003201 CD 65 18    2340*                  CALL	EXPRN
003204 DD E1       2341*                  POP	IX
003206 D1          2342*                  POP	DE
003207             2343*  ;
003207             2344*  ; Falls through to...
003207             2345*  ;
003207             2346*  ; MODIFY - Update numeric variable according to operator:
003207             2347*  ;   Inputs: D = type
003207             2348*  ;           E = operator
003207             2349*  ;           HLH'L'C = value
003207             2350*  ;           IX = destination VARPTR
003207             2351*  ; Destroys: Everything except IX,IY,SP
003207             2352*  ;
003207 7B          2353*  MODIFY:         LD	A,E
003208 FE 3D       2354*                  CP	'='
00320A 28 1C       2355*                  JR	Z,STORE0	;Simple assignment
00320C D5          2356*                  PUSH	DE
00320D D9          2357*                  EXX
00320E EB          2358*                  EX	DE,HL
00320F D9          2359*                  EXX
003210 EB          2360*                  EX	DE,HL
003211 41          2361*                  LD	B,C
003212 E3          2362*                  EX	(SP),HL
003213 7C          2363*                  LD	A,H
003214 E3          2364*                  EX	(SP),HL
003215 CD 5E 19    2365*                  CALL	LOADN
003218 E3          2366*                  EX	(SP),HL
003219 7D          2367*                  LD	A,L
00321A E3          2368*                  EX	(SP),HL
00321B E6 0F       2369*                  AND	15
00321D DD E5       2370*                  PUSH	IX
00321F CD 4E 45    2371*                  CALL	FPP
003222 DD E1       2372*                  POP	IX
003224 D1          2373*                  POP	DE
003225 DA 7D 3F    2374*                  JP	C,ERROR_
003228 7A          2375*  STORE0:         LD	A,D		;Type
003229 FE 05       2376*  STOREN:         CP	5
00322B 28 12       2377*                  JR	Z,STORE5
00322D F5          2378*                  PUSH	AF
00322E 0C          2379*                  INC	C		;SPEED - & PRESERVE F'
00322F 0D          2380*                  DEC	C		; WHEN CALLED BY FNEND0
003230 C4 50 1C    2381*                  CALL	NZ,SFIX		;CONVERT TO INTEGER
003233 F1          2382*                  POP	AF
003234 FE 04       2383*                  CP	4
003236 28 0A       2384*                  JR	Z,STORE4
003238 BF          2385*                  CP	A		;SET ZERO
003239 D9          2386*  STORE1:         EXX
00323A DD 75 00    2387*                  LD	(IX+0),L
00323D D9          2388*                  EXX
00323E C9          2389*                  RET
00323F             2390*  ;
00323F DD 71 04    2391*  STORE5:         LD	(IX+4),C
003242 D9          2392*  STORE4:         EXX
003243 DD 75 00    2393*                  LD	(IX+0),L
003246 DD 74 01    2394*                  LD	(IX+1),H
003249 D9          2395*                  EXX
00324A DD 75 02    2396*                  LD	(IX+2),L
00324D DD 74 03    2397*                  LD	(IX+3),H
003250 C9          2398*                  RET
003251             2399*  ;
003251             2400*  ; MODIFS - Update string variable according to operator:
003251             2401*  ;   Inputs: H = type
003251             2402*  ;           L = operator (= or +)
003251             2403*  ;           E = string length (string in accumulator)
003251             2404*  ;           IX = destination VARPTR
003251             2405*  ; Destroys: Everything except SP, IY
003251             2406*  ;
003251 7D          2407*  MODIFS:         LD	A,L		;Operator
003252 FE 2B       2408*                  CP	'+'
003254 7C          2409*                  LD	A,H		;Type
003255 20 20       2410*                  JR	NZ,STACCS
003257 FD E5       2411*                  PUSH	IY
003259 DD E5       2412*                  PUSH	IX
00325B FD E1       2413*                  POP	IY
00325D CD 52 20    2414*                  CALL	PUSHS
003260 FD E5       2415*                  PUSH	IY
003262 DD E1       2416*                  POP	IX
003264 CD 47 1A    2417*                  CALL	LOADS
003267 C1          2418*                  POP	BC
003268 78          2419*                  LD	A,B		;Type
003269 0C          2420*                  INC	C
00326A 0D          2421*                  DEC	C
00326B 28 08       2422*                  JR	Z,MODFS1	;Zero length
00326D 21 00 00    2423*                  LD	HL,0
003270 44          2424*                  LD	B,H
003271 39          2425*                  ADD	HL,SP
003272 ED B0       2426*                  LDIR
003274 F9          2427*                  LD	SP,HL
003275 FD E1       2428*  MODFS1:         POP	IY
003277             2429*  ;
003277             2430*  ; Falls through to:
003277             2431*  ;
003277 21 00 52    2432*  STACCS:         LD	HL,ACCS
00327A 1F          2433*  STORES:         RRA
00327B 30 4F       2434*                  JR	NC,STORS3	;FIXED STRING
00327D E5          2435*                  PUSH	HL
00327E CD 6B 19    2436*                  CALL	LOAD4
003281 7B          2437*                  LD	A,E		;LENGTH OF STRING
003282 D9          2438*                  EXX
003283 6F          2439*                  LD	L,A
003284 7C          2440*                  LD	A,H		;LENGTH ALLOCATED
003285 D9          2441*                  EXX
003286 BB          2442*                  CP	E
003287 30 24       2443*                  JR	NC,STORS1	;ENOUGH ROOM
003289 D9          2444*                  EXX
00328A 65          2445*                  LD	H,L
00328B D9          2446*                  EXX
00328C E5          2447*                  PUSH	HL
00328D 06 00       2448*                  LD	B,0
00328F 4F          2449*                  LD	C,A
003290 09          2450*                  ADD	HL,BC
003291 ED 4B E0 54 2451*                  LD	BC,(FREE)
003295 ED 42       2452*                  SBC	HL,BC		;IS STRING LAST?
003297 E1          2453*                  POP	HL
003298 28 12       2454*                  JR	Z,STORS0
00329A 60          2455*                  LD	H,B
00329B 69          2456*                  LD	L,C		;DESTINATION
00329C             2457*  ;
00329C B7          2458*                  OR	A		;V5 optimisation
00329D 28 0D       2459*                  JR	Z,STORS0
00329F 7B          2460*                  LD	A,E
0032A0 5F          2461*  STORS2:         LD	E,A
0032A1 1D          2462*                  DEC	E
0032A2 A3          2463*                  AND	E
0032A3 20 FB       2464*                  JR	NZ,STORS2
0032A5 37          2465*                  SCF
0032A6 CB 13       2466*                  RL	E
0032A8 7B          2467*                  LD	A,E
0032A9 D9          2468*                  EXX
0032AA 67          2469*                  LD	H,A
0032AB D9          2470*                  EXX
0032AC             2471*  ;
0032AC 37          2472*  STORS0:         SCF
0032AD CD 42 32    2473*  STORS1:         CALL	STORE4		;PRESERVES CARRY!
0032B0 06 00       2474*                  LD	B,0
0032B2 4B          2475*                  LD	C,E
0032B3 EB          2476*                  EX	DE,HL
0032B4 E1          2477*                  POP	HL
0032B5 0D          2478*                  DEC	C
0032B6 0C          2479*                  INC	C
0032B7 C8          2480*                  RET	Z		;NULL STRING
0032B8 ED B0       2481*                  LDIR
0032BA D0          2482*                  RET	NC		;STRING REPLACED
0032BB ED 53 E0 54 2483*                  LD	(FREE),DE
0032BF E5          2484*  CHECK:          PUSH	HL
0032C0 2A E0 54    2485*                  LD	HL,(FREE)
0032C3 24          2486*                  INC	H
0032C4 ED 72       2487*                  SBC	HL,SP
0032C6 E1          2488*                  POP	HL
0032C7 D8          2489*                  RET	C
0032C8 AF          2490*                  XOR	A
0032C9 C3 7D 3F    2491*                  JP	ERROR_		;"No room"
0032CC             2492*  ;
0032CC 4B          2493*  STORS3:         LD	C,E
0032CD DD E5       2494*                  PUSH	IX
0032CF D1          2495*                  POP	DE
0032D0 AF          2496*                  XOR	A
0032D1 47          2497*                  LD	B,A
0032D2 B9          2498*                  CP	C
0032D3 28 02       2499*                  JR	Z,STORS5
0032D5 ED B0       2500*                  LDIR
0032D7 3E 0D       2501*  STORS5:         LD	A,CR
0032D9 12          2502*                  LD	(DE),A
0032DA C9          2503*                  RET
0032DB             2504*  ;
0032DB             2505*  ; SAVRET - SAVE 'RETURNed' PARAMETER INFO
0032DB             2506*  ;
0032DB DD 75 00    2507*  SAVRET:         LD	(IX+0),L		;Formal VARPTR
0032DE DD 74 01    2508*                  LD	(IX+1),H
0032E1 DD 77 02    2509*                  LD	(IX+2),A
0032E4 FD E3       2510*                  EX	(SP),IY
0032E6 F5          2511*                  PUSH	AF
0032E7 FD E5       2512*                  PUSH	IY
0032E9 DD E5       2513*                  PUSH	IX
0032EB CD 44 45    2514*                  CALL	NXT
0032EE CD 0F 26    2515*                  CALL	VAR_
0032F1 DD E1       2516*                  POP	IX
0032F3 DD 75 04    2517*                  LD	(IX+4),L		;Actual VARPTR
0032F6 DD 74 05    2518*                  LD	(IX+5),H
0032F9 DD 77 06    2519*                  LD	(IX+6),A
0032FC FD E1       2520*                  POP	IY
0032FE F1          2521*                  POP	AF
0032FF 01 08 00    2522*                  LD	BC,8
003302 DD 09       2523*                  ADD	IX,BC
003304 18 2D       2524*                  JR	ARGUE0
003306             2525*  ;
003306             2526*  ;ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
003306             2527*  ; CALLING STATEMENT TO THE DUMMY VARIABLES VIA
003306             2528*  ; THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
003306             2529*  ; PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
003306             2530*  ;   Inputs: DE addresses parameter list
003306             2531*  ;           IY addresses dummy variable list
003306             2532*  ;           IX addresses RETURNed parameter data block
003306             2533*  ;  Outputs: DE,IY updated
003306             2534*  ; Destroys: Everything
003306             2535*  ;
003306 3E FF       2536*  ARGUE:          LD	A,-1
003308 F5          2537*                  PUSH	AF		;PUT MARKER ON STACK
003309 FD 23       2538*  ARGUE1:         INC	IY		;BUMP PAST ( | ,
00330B 13          2539*                  INC	DE
00330C D5          2540*                  PUSH	DE
00330D 06 00       2541*                  LD	B,0
00330F CD 44 45    2542*                  CALL	NXT
003312 FE F8       2543*                  CP	TRETURN
003314 20 06       2544*                  JR	NZ,ARGUE9
003316 FD 23       2545*                  INC	IY		;SKIP 'RETURN'
003318 CD 44 45    2546*                  CALL	NXT
00331B 04          2547*                  INC	B		;FLAG 'RETURN'
00331C C5          2548*  ARGUE9:         PUSH	BC
00331D DD E5       2549*                  PUSH	IX
00331F CD 1C 42    2550*                  CALL	GETVAR		;FORMAL PARAMETER
003322 38 49       2551*                  JR	C,ARGERR
003324 C4 06 42    2552*                  CALL	NZ,PUTVAR
003327 DD E1       2553*                  POP	IX
003329 C1          2554*                  POP	BC
00332A D1          2555*                  POP	DE
00332B E5          2556*                  PUSH	HL		;VARPTR
00332C F5          2557*                  PUSH	AF
00332D D5          2558*                  PUSH	DE
00332E 05          2559*                  DEC	B
00332F 28 AA       2560*                  JR	Z,SAVRET
003331 FD E3       2561*                  EX	(SP),IY
003333 CB 77       2562*  ARGUE0:         BIT	6,A		;ARRAY?
003335 20 3B       2563*                  JR	NZ,ARGUE3
003337 B7          2564*                  OR	A		;TYPE
003338 FA 4E 33    2565*                  JP	M,ARGUE2	;STRING
00333B DD E5       2566*                  PUSH	IX
00333D CD 65 18    2567*                  CALL	EXPRN		;ACTUAL PARAMETER
003340 DD E1       2568*                  POP	IX
003342 FD E3       2569*                  EX	(SP),IY
003344 D1          2570*                  POP	DE
003345 F1          2571*                  POP	AF
003346 D9          2572*                  EXX
003347 E5          2573*                  PUSH	HL
003348 D9          2574*                  EXX
003349 E5          2575*                  PUSH	HL
00334A 47          2576*                  LD	B,A
00334B C5          2577*                  PUSH	BC
00334C 18 13       2578*                  JR	ARGUE4
00334E             2579*  ;
00334E DD E5       2580*  ARGUE2:         PUSH	IX
003350 CD 75 18    2581*                  CALL	EXPRS
003353 D9          2582*                  EXX
003354 C1          2583*                  POP	BC
003355 FD E3       2584*                  EX	(SP),IY
003357 D1          2585*                  POP	DE
003358 D9          2586*                  EXX
003359 F1          2587*                  POP	AF
00335A CD 52 20    2588*                  CALL	PUSHS
00335D D9          2589*                  EXX
00335E C5          2590*                  PUSH	BC
00335F DD E1       2591*                  POP	IX
003361 CD 44 45    2592*  ARGUE4:         CALL	NXT
003364 FE 2C       2593*                  CP	','
003366 20 27       2594*                  JR	NZ,ARGUE5
003368 1A          2595*                  LD	A,(DE)
003369 FE 2C       2596*                  CP	','
00336B 28 9C       2597*                  JR	Z,ARGUE1	;ANOTHER
00336D 3E 1F       2598*  ARGERR:         LD	A,31
00336F C3 7D 3F    2599*                  JP	ERROR_		;"Bad arguments"
003372             2600*  ;
003372 DD E5       2601*  ARGUE3:         PUSH	IX
003374 CD 44 45    2602*                  CALL	NXT
003377 CD 1C 42    2603*                  CALL	GETVAR
00337A 38 F1       2604*                  JR	C,ARGERR
00337C DD 4E 00    2605*                  LD	C,(IX+0)
00337F DD 46 01    2606*                  LD	B,(IX+1)
003382 DD E1       2607*                  POP	IX
003384 CD 44 45    2608*                  CALL	NXT
003387 FD E3       2609*                  EX	(SP),IY
003389 D1          2610*                  POP	DE
00338A F1          2611*                  POP	AF
00338B C5          2612*                  PUSH	BC		;STACK ARRAY POINTER
00338C F5          2613*                  PUSH	AF		;STACK TYPE
00338D 18 D2       2614*                  JR	ARGUE4
00338F             2615*  ;
00338F CD E7 20    2616*  ARGUE5:         CALL	BRAKET
003392 1A          2617*                  LD	A,(DE)
003393 FE 29       2618*                  CP	')'
003395 20 D6       2619*                  JR	NZ,ARGERR
003397 13          2620*                  INC	DE
003398 D9          2621*  UNSTAK:         EXX
003399 C1          2622*  ARGUE6:         POP	BC
00339A 78          2623*                  LD	A,B
00339B 3C          2624*                  INC	A
00339C D9          2625*                  EXX
00339D C8          2626*                  RET	Z		;MARKER POPPED
00339E D9          2627*                  EXX
00339F 3D          2628*                  DEC	A
0033A0 CB 77       2629*                  BIT	6,A		;ARRAY
0033A2 20 19       2630*                  JR	NZ,ARGUE8
0033A4 B7          2631*                  OR	A
0033A5 FA B3 33    2632*                  JP	M,ARGUE7	;STRING
0033A8 E1          2633*                  POP	HL
0033A9 D9          2634*                  EXX
0033AA E1          2635*                  POP	HL
0033AB D9          2636*                  EXX
0033AC DD E1       2637*                  POP	IX
0033AE CD 29 32    2638*                  CALL	STOREN		;WRITE TO DUMMY
0033B1 18 E6       2639*                  JR	ARGUE6
0033B3             2640*  ;
0033B3 CD 70 20    2641*  ARGUE7:         CALL	POPS
0033B6 DD E1       2642*                  POP	IX
0033B8 CD 77 32    2643*                  CALL	STACCS
0033BB 18 DC       2644*                  JR	ARGUE6
0033BD             2645*  ;
0033BD C1          2646*  ARGUE8:         POP	BC		;ARRAY POINTER
0033BE DD E1       2647*                  POP	IX
0033C0 DD 71 00    2648*                  LD	(IX+0),C
0033C3 DD 70 01    2649*                  LD	(IX+1),B
0033C6 18 D1       2650*                  JR	ARGUE6
0033C8             2651*  ;
0033C8             2652*  ;Restore RETURNed parameters, via the stack to ensure that
0033C8             2653*  ; PROCFRED(A,B)    DEF PROCFRED(RETURN B,RETURN A)  works.
0033C8             2654*  ;
0033C8 3E FF       2655*  RETXFR:         LD	A,-1
0033CA F5          2656*                  PUSH	AF		;PUT MARKER ON STACK
0033CB D9          2657*  RETXF1:         EXX
0033CC DD 6E 04    2658*                  LD	L,(IX+4)	;Actual parameter (destination)
0033CF DD 66 05    2659*                  LD	H,(IX+5)
0033D2 E5          2660*                  PUSH	HL		;STACK VARPTR
0033D3 DD 6E 00    2661*                  LD	L,(IX+0)	;Formal parameter (source)
0033D6 DD 66 01    2662*                  LD	H,(IX+1)
0033D9 DD 7E 02    2663*                  LD	A,(IX+2)
0033DC CB 77       2664*                  BIT	6,A		;ARRAY?
0033DE 20 19       2665*                  JR	NZ,RETXF3
0033E0 B7          2666*                  OR	A		;TYPE
0033E1 FA FF 33    2667*                  JP	M,RETXF2	;STRING
0033E4 E5          2668*                  PUSH	HL
0033E5 DD E3       2669*                  EX	(SP),IX
0033E7 CD 5E 19    2670*                  CALL	LOADN
0033EA DD E1       2671*                  POP	IX
0033EC D9          2672*                  EXX			;STACK VALUE
0033ED E5          2673*                  PUSH	HL
0033EE D9          2674*                  EXX
0033EF E5          2675*                  PUSH	HL
0033F0 DD 46 06    2676*  RETXF6:         LD	B,(IX+6)
0033F3 C5          2677*                  PUSH	BC		;TYPE & EXPONENT
0033F4 CD BF 32    2678*  RETXF5:         CALL	CHECK		;CHECK ROOM
0033F7 18 1E       2679*                  JR	RETXF4
0033F9             2680*  ;
0033F9 5E          2681*  RETXF3:         LD	E,(HL)
0033FA 23          2682*                  INC	HL
0033FB 56          2683*                  LD	D,(HL)
0033FC D5          2684*                  PUSH	DE		;STACK ARRAY POINTER
0033FD 18 F1       2685*                  JR	RETXF6
0033FF             2686*  ;
0033FF E5          2687*  RETXF2:         PUSH	HL
003400 DD E3       2688*                  EX	(SP),IX
003402 CD 47 1A    2689*                  CALL	LOADS
003405 DD E1       2690*                  POP	IX
003407 DD 7E 06    2691*                  LD	A,(IX+6)
00340A D9          2692*                  EXX
00340B DD E5       2693*                  PUSH	IX
00340D E1          2694*                  POP	HL
00340E D9          2695*                  EXX
00340F CD 52 20    2696*                  CALL	PUSHS
003412 D9          2697*                  EXX
003413 E5          2698*                  PUSH	HL
003414 DD E1       2699*                  POP	IX
003416 D9          2700*                  EXX
003417 11 08 00    2701*  RETXF4:         LD	DE,8
00341A DD 19       2702*                  ADD	IX,DE
00341C D9          2703*                  EXX
00341D 10 AC       2704*                  DJNZ	RETXF1
00341F C3 98 33    2705*                  JP	UNSTAK
003422             2706*  ;
003422             2707*  ;Restore 'RETURNed' parameters,
003422             2708*  ;
003422 C1          2709*  RESRET:         POP	BC		;B = 'RETURN' COUNT
003423 26 00       2710*                  LD	H,0
003425 68          2711*                  LD	L,B
003426 29          2712*                  ADD	HL,HL
003427 29          2713*                  ADD	HL,HL
003428 29          2714*                  ADD	HL,HL		;RETURN COUNT * 8
003429 39          2715*                  ADD	HL,SP
00342A DD 21 00 00 2716*                  LD	IX,0
00342E DD 39       2717*                  ADD	IX,SP		;ADDRESS PARAMETER LIST
003430 F5          2718*                  PUSH	AF
003431 D5          2719*                  PUSH	DE
003432 E5          2720*                  PUSH	HL
003433 D9          2721*                  EXX
003434 C5          2722*                  PUSH	BC
003435 D5          2723*                  PUSH	DE
003436 D9          2724*                  EXX
003437 78          2725*                  LD	A,B
003438 21 00 52    2726*                  LD	HL,ACCS
00343B 11 00 53    2727*                  LD	DE,BUFFER
00343E 01 FF 00    2728*                  LD	BC,255
003441 ED B0       2729*                  LDIR
003443 47          2730*                  LD	B,A
003444 CD C8 33    2731*                  CALL	RETXFR		;TRANSFER VIA STACK
003447 21 00 53    2732*                  LD	HL,BUFFER
00344A 11 00 52    2733*                  LD	DE,ACCS
00344D 01 FF 00    2734*                  LD	BC,255
003450 ED B0       2735*                  LDIR
003452 D9          2736*                  EXX
003453 D1          2737*                  POP	DE
003454 C1          2738*                  POP	BC
003455 D9          2739*                  EXX
003456 E1          2740*                  POP	HL
003457 D1          2741*                  POP	DE
003458 F1          2742*                  POP	AF
003459 18 0A       2743*                  JR	RESAR1
00345B             2744*  ;
00345B             2745*  ; Restore LOCAL array or memory block:
00345B             2746*  ;
00345B C1          2747*  RESARR:         POP	BC
00345C CB 78       2748*                  BIT	7,B		;String array?
00345E E1          2749*                  POP	HL
00345F C1          2750*                  POP	BC
003460 09          2751*                  ADD	HL,BC
003461 39          2752*                  ADD	HL,SP
003462 C4 1C 37    2753*                  CALL	NZ,FREESA	;Free string array
003465 F9          2754*  RESAR1:         LD	SP,HL
003466 DD 23       2755*                  INC	IX		;Flag something restored
003468 18 05       2756*                  JR	RESLO1
00346A             2757*  ;
00346A             2758*  ; RESLOC - Restore local variables/arrays or DATA/ERROR status from stack
00346A             2759*  ;   Inputs: A = 0 if everything OK, bit0 set if DATPTR, bit1 set if ERRTRP
00346A             2760*  ;  Outputs: Z if nothing was restored, NZ if something was restored
00346A             2761*  ; Destroys: A,B,C,D,E,H,L,H',L',IX,SP,flags
00346A             2762*  ;
00346A D1          2763*  RESLOC:         POP	DE		;Return address
00346B DD 21 00 00 2764*                  LD	IX,0		;To flag nothing was restored
00346F C1          2765*  RESLO1:         POP	BC		;Marker ?
003470 21 63 35    2766*                  LD	HL,LOCCHK
003473 B7          2767*                  OR	A
003474 ED 42       2768*                  SBC	HL,BC
003476 28 1A       2769*                  JR	Z,RESLO2	;Something to restore
003478 B7          2770*                  OR	A
003479 20 0F       2771*                  JR	NZ,RESLO8
00347B 21 A9 2A    2772*                  LD	HL,RETCHK
00347E ED 42       2773*                  SBC	HL,BC
003480 28 A0       2774*                  JR	Z,RESRET
003482 21 15 27    2775*                  LD	HL,ARRCHK
003485 B7          2776*                  OR	A
003486 ED 42       2777*                  SBC	HL,BC
003488 28 D1       2778*                  JR	Z,RESARR
00348A DD E5       2779*  RESLO8:         PUSH	IX
00348C E1          2780*                  POP	HL
00348D 7C          2781*                  LD	A,H
00348E B5          2782*                  OR	L
00348F C5          2783*  RESLO0:         PUSH	BC		;Put back marker
003490 EB          2784*                  EX	DE,HL
003491 E9          2785*                  JP	(HL)		;Return
003492             2786*  ;
003492 DD E1       2787*  RESLO2:         POP	IX		;Variable pointer
003494 B7          2788*                  OR	A
003495 28 20       2789*                  JR	Z,RESLO3	;Everything allowed
003497 DD E5       2790*                  PUSH	IX
003499 C1          2791*                  POP	BC
00349A CB 47       2792*                  BIT	0,A
00349C 28 07       2793*                  JR	Z,RESLO6	;Bit 0 set, so
00349E 21 F0 54    2794*                  LD	HL,DATPTR	;test for DATPTR
0034A1 ED 42       2795*                  SBC	HL,BC
0034A3 28 12       2796*                  JR	Z,RESLO3
0034A5 B7          2797*  RESLO6:         OR	A
0034A6 CB 4F       2798*                  BIT	1,A
0034A8 28 07       2799*                  JR	Z,RESLO7	;Bit 1 set, so
0034AA 21 EA 54    2800*                  LD	HL,ERRTRP	;test for ERRPTR
0034AD ED 42       2801*                  SBC	HL,BC
0034AF 28 06       2802*                  JR	Z,RESLO3
0034B1 C5          2803*  RESLO7:         PUSH	BC		;Put back pointer
0034B2 01 63 35    2804*                  LD	BC,LOCCHK
0034B5 18 D8       2805*                  JR	RESLO0
0034B7             2806*  ;
0034B7 C1          2807*  RESLO3:         POP	BC		;Type / exponent
0034B8 CB 70       2808*                  BIT	6,B
0034BA 20 14       2809*                  JR	NZ,RESLO4	;Array?
0034BC CB 78       2810*                  BIT	7,B
0034BE 20 23       2811*                  JR	NZ,RESLO5	;String?
0034C0 E1          2812*                  POP	HL
0034C1 D9          2813*                  EXX
0034C2 E1          2814*                  POP	HL
0034C3 D9          2815*                  EXX
0034C4 CB 60       2816*                  BIT	4,B
0034C6 20 A7       2817*                  JR	NZ,RESLO1
0034C8 F5          2818*                  PUSH	AF
0034C9 78          2819*                  LD	A,B
0034CA CD 29 32    2820*                  CALL	STOREN		;Numeric
0034CD F1          2821*                  POP	AF
0034CE 18 9F       2822*                  JR	RESLO1
0034D0             2823*  ;
0034D0 E1          2824*  RESLO4:         POP	HL
0034D1 CB 60       2825*                  BIT	4,B
0034D3 20 9A       2826*                  JR	NZ,RESLO1
0034D5 DD 75 00    2827*                  LD	(IX+0),L	;Array
0034D8 DD 74 01    2828*                  LD	(IX+1),H
0034DB 18 92       2829*                  JR	RESLO1
0034DD             2830*  ;
0034DD 06 00       2831*  RESLO9:         LD	B,0
0034DF 09          2832*                  ADD	HL,BC
0034E0 F9          2833*                  LD	SP,HL
0034E1 18 8C       2834*  RESLGO:         JR	RESLO1
0034E3             2835*  ;
0034E3 21 00 00    2836*  RESLO5:         LD	HL,0
0034E6 39          2837*                  ADD	HL,SP
0034E7 CB 60       2838*                  BIT	4,B
0034E9 20 F2       2839*                  JR	NZ,RESLO9
0034EB F5          2840*                  PUSH	AF
0034EC D5          2841*                  PUSH	DE
0034ED 59          2842*                  LD	E,C
0034EE 78          2843*                  LD	A,B
0034EF CD 7A 32    2844*                  CALL	STORES		;String
0034F2 D1          2845*                  POP	DE
0034F3 F1          2846*                  POP	AF
0034F4 F9          2847*                  LD	SP,HL
0034F5 18 EA       2848*                  JR	RESLGO
0034F7             2849*  ;
0034F7             2850*  ;SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
0034F7             2851*  ;  OF A FUNCTION OR PROCEDURE.
0034F7             2852*  ;THERE IS A LOT OF STACK MANIPULATION - CARE!!
0034F7             2853*  ;   Inputs: IY is parameters pointer
0034F7             2854*  ;  Outputs: IY updated
0034F7             2855*  ;           A' incremented for each RETURN
0034F7             2856*  ; Destroys: A',A,B,C,D,E,H,L,IX,IY,F,SP
0034F7             2857*  ;
0034F7 D1          2858*  SAVLOC:         POP	DE		;RETURN ADDRESS
0034F8 FD 23       2859*  SAVLO1:         INC	IY		;BUMP PAST ( | ,
0034FA CD 44 45    2860*                  CALL	NXT
0034FD FE F8       2861*                  CP	TRETURN
0034FF 20 08       2862*                  JR	NZ,SAVLO6
003501 08          2863*                  EX	AF,AF'
003502 3C          2864*                  INC	A		;RETURN counter
003503 08          2865*                  EX	AF,AF'
003504 FD 23       2866*                  INC	IY		;Bump past RETURN
003506 CD 44 45    2867*                  CALL	NXT
003509 D5          2868*  SAVLO6:         PUSH	DE
00350A D9          2869*                  EXX
00350B C5          2870*                  PUSH	BC
00350C D5          2871*                  PUSH	DE
00350D E5          2872*                  PUSH	HL
00350E D9          2873*                  EXX
00350F CD 0F 26    2874*                  CALL	VAR_		;DUMMY VARIABLE
003512 D9          2875*                  EXX
003513 E1          2876*                  POP	HL
003514 D1          2877*                  POP	DE
003515 C1          2878*                  POP	BC
003516 D9          2879*                  EXX
003517 D1          2880*                  POP	DE
003518 CB 77       2881*                  BIT	6,A		;ARRAY?
00351A 20 12       2882*                  JR	NZ,SAVLO3
00351C B7          2883*                  OR	A		;TYPE
00351D FA 38 35    2884*                  JP	M,SAVLO2	;STRING
003520 D9          2885*                  EXX
003521 E5          2886*                  PUSH	HL		;SAVE H'L'
003522 D9          2887*                  EXX
003523 47          2888*                  LD	B,A		;TYPE
003524 CD 5E 19    2889*                  CALL	LOADN
003527 D9          2890*                  EXX
003528 E3          2891*                  EX	(SP),HL
003529 D9          2892*                  EXX
00352A E5          2893*                  PUSH	HL
00352B C5          2894*                  PUSH	BC
00352C 18 30       2895*                  JR	SAVLO4
00352E             2896*  ;
00352E DD 4E 00    2897*  SAVLO3:         LD	C,(IX+0)	;ARRAY POINTER
003531 DD 46 01    2898*                  LD	B,(IX+1)
003534 C5          2899*                  PUSH	BC		;SAVE TO STACK
003535 F5          2900*                  PUSH	AF		;SAVE TYPE
003536 18 26       2901*                  JR	SAVLO4
003538             2902*  ;
003538 F5          2903*  SAVLO2:         PUSH	AF		;STRING TYPE
003539 D5          2904*                  PUSH	DE
00353A D9          2905*                  EXX
00353B E5          2906*                  PUSH	HL
00353C D9          2907*                  EXX
00353D CD 47 1A    2908*                  CALL	LOADS
003540 D9          2909*                  EXX
003541 E1          2910*                  POP	HL
003542 D9          2911*                  EXX
003543 4B          2912*                  LD	C,E
003544 D1          2913*                  POP	DE
003545 CD BF 32    2914*                  CALL	CHECK
003548 F1          2915*                  POP	AF		;LEVEL STACK
003549 21 00 00    2916*                  LD	HL,0
00354C 45          2917*                  LD	B,L
00354D ED 42       2918*                  SBC	HL,BC
00354F 39          2919*                  ADD	HL,SP
003550 F9          2920*                  LD	SP,HL
003551 47          2921*                  LD	B,A		;TYPE
003552 C5          2922*                  PUSH	BC
003553 28 09       2923*                  JR	Z,SAVLO4
003555 D5          2924*                  PUSH	DE
003556 11 00 52    2925*                  LD	DE,ACCS
003559 EB          2926*                  EX	DE,HL
00355A 45          2927*                  LD	B,L
00355B ED B0       2928*                  LDIR			;SAVE STRING ON STACK
00355D D1          2929*                  POP	DE
00355E DD E5       2930*  SAVLO4:         PUSH	IX		;VARPTR
003560 CD 63 35    2931*                  CALL	SAVLO5
003563             2932*  LOCCHK:         EQU	$
003563 CD BF 32    2933*  SAVLO5:         CALL	CHECK
003566 CD 44 45    2934*                  CALL	NXT
003569 FE 2C       2935*                  CP	','		;MORE?
00356B 28 8B       2936*                  JR	Z,SAVLO1
00356D EB          2937*                  EX	DE,HL
00356E E9          2938*                  JP	(HL)		;"RETURN"
00356F             2939*  ;
00356F CD 44 45    2940*  TERMQ:          CALL	NXT
003572 FE 8B       2941*                  CP	TELSE
003574 D0          2942*                  RET	NC
003575 FE 3A       2943*                  CP	':'		;ASSEMBLER SEPARATOR
003577 D0          2944*                  RET	NC
003578 FE 0D       2945*                  CP	CR
00357A C9          2946*                  RET
00357B             2947*  ;
00357B CD 6F 35    2948*  SPAN:           CALL	TERMQ
00357E C8          2949*                  RET	Z
00357F FD 23       2950*                  INC	IY
003581 FE 22       2951*                  CP	'"'
003583 CC D2 36    2952*                  CALL	Z,QUOTE
003586 18 F3       2953*                  JR	SPAN
003588             2954*  ;
003588 CD 44 45    2955*  EQUALS:         CALL	NXT
00358B FD 23       2956*                  INC	IY
00358D FE 3D       2957*                  CP	'='
00358F C8          2958*                  RET	Z
003590 3E 04       2959*                  LD	A,4
003592 C3 7D 3F    2960*                  JP	ERROR_		;"Mistake"
003595             2961*  ;
003595 FE 8A       2962*  FORMAT:         CP	TTAB
003597 28 0C       2963*                  JR	Z,DOTAB
003599 FE 89       2964*                  CP	TSPC
00359B 28 38       2965*                  JR	Z,DOSPC
00359D FE 27       2966*                  CP	'''
00359F C0          2967*                  RET	NZ
0035A0 CD 34 41    2968*                  CALL	CRLF
0035A3 AF          2969*                  XOR	A
0035A4 C9          2970*                  RET
0035A5             2971*  ;
0035A5 C5          2972*  DOTAB:          PUSH	BC
0035A6 CD 6C 18    2973*                  CALL	EXPRI
0035A9 D9          2974*                  EXX
0035AA C1          2975*                  POP	BC
0035AB FD 7E 00    2976*                  LD	A,(IY)
0035AE FE 2C       2977*                  CP	','
0035B0 28 11       2978*                  JR	Z,DOTAB1
0035B2 CD E7 20    2979*                  CALL	BRAKET
0035B5 7D          2980*                  LD	A,L
0035B6 21 FB 54    2981*  TABIT:          LD	HL,COUNT
0035B9 BE          2982*                  CP	(HL)
0035BA C8          2983*                  RET	Z
0035BB F5          2984*                  PUSH	AF
0035BC DC 34 41    2985*                  CALL	C,CRLF
0035BF F1          2986*                  POP	AF
0035C0 96          2987*                  SUB	(HL)
0035C1 18 19       2988*                  JR	SPACES
0035C3 FD 23       2989*  DOTAB1:         INC	IY
0035C5 C5          2990*                  PUSH	BC
0035C6 E5          2991*                  PUSH	HL
0035C7 CD 6C 18    2992*                  CALL	EXPRI
0035CA D9          2993*                  EXX
0035CB D1          2994*                  POP	DE
0035CC C1          2995*                  POP	BC
0035CD CD E7 20    2996*                  CALL	BRAKET
0035D0 CD 73 00    2997*                  CALL	PUTCSR
0035D3 AF          2998*                  XOR	A
0035D4 C9          2999*                  RET
0035D5             3000*  ;
0035D5 C5          3001*  DOSPC:          PUSH	BC
0035D6 CD 99 18    3002*                  CALL	ITEMI
0035D9 D9          3003*                  EXX
0035DA 7D          3004*                  LD	A,L
0035DB C1          3005*                  POP	BC
0035DC B7          3006*  SPACES:         OR	A
0035DD C8          3007*                  RET	Z
0035DE C5          3008*                  PUSH	BC
0035DF 47          3009*                  LD	B,A
0035E0 3E 20       3010*  FILL1:          LD	A,' '
0035E2 CD 3B 41    3011*                  CALL	OUTCHR
0035E5 10 F9       3012*                  DJNZ	FILL1
0035E7 C1          3013*                  POP	BC
0035E8 AF          3014*                  XOR	A
0035E9 C9          3015*                  RET
0035EA             3016*  ;
0035EA 21 00 52    3017*  PTEXT:          LD	HL,ACCS
0035ED 1C          3018*                  INC	E
0035EE 1D          3019*  PTEXT1:         DEC	E
0035EF C8          3020*                  RET	Z
0035F0 7E          3021*                  LD	A,(HL)
0035F1 23          3022*                  INC	HL
0035F2 CD 3B 41    3023*                  CALL	OUTCHR
0035F5 18 F7       3024*                  JR	PTEXT1
0035F7             3025*  ;
0035F7 F5          3026*  FETCHS:         PUSH	AF
0035F8 C5          3027*                  PUSH	BC
0035F9 E5          3028*                  PUSH	HL
0035FA FD E3       3029*                  EX	(SP),IY
0035FC CD 14 36    3030*                  CALL	XTRACT
0035FF CD 44 45    3031*                  CALL	NXT
003602 FD E3       3032*                  EX	(SP),IY
003604 E1          3033*                  POP	HL
003605 C1          3034*                  POP	BC
003606 F1          3035*                  POP	AF
003607 C9          3036*                  RET
003608             3037*  ;
003608 11 00 52    3038*  LINES:          LD	DE,ACCS
00360B 7E          3039*  LINE1S:         LD	A,(HL)
00360C 12          3040*                  LD	(DE),A
00360D FE 0D       3041*                  CP	CR
00360F C8          3042*                  RET	Z
003610 23          3043*                  INC	HL
003611 1C          3044*                  INC	E
003612 18 F7       3045*                  JR	LINE1S
003614             3046*  ;
003614 CD 44 45    3047*  XTRACT:         CALL	NXT
003617 FE 22       3048*                  CP	'"'
003619 FD 23       3049*                  INC	IY
00361B CA B3 19    3050*                  JP	Z,CONS
00361E FD 2B       3051*                  DEC	IY
003620 11 00 52    3052*                  LD	DE,ACCS
003623 FD 7E 00    3053*  XTRAC1:         LD	A,(IY)
003626 12          3054*                  LD	(DE),A
003627 FE 2C       3055*                  CP	','
003629 C8          3056*                  RET	Z
00362A FE 0D       3057*                  CP	CR
00362C C8          3058*                  RET	Z
00362D FD 23       3059*                  INC	IY
00362F 1C          3060*                  INC	E
003630 18 F1       3061*                  JR	XTRAC1
003632             3062*  ;
003632 3E DC       3063*  DSRCH:          LD	A,TDATA
003634 06 00       3064*  SEARCHex:         LD	B,0
003636 4E          3065*  SRCH1:          LD	C,(HL)
003637 0C          3066*                  INC	C
003638 0D          3067*                  DEC	C
003639 28 0C       3068*                  JR	Z,SRCH2		;FAIL
00363B 23          3069*                  INC	HL
00363C 23          3070*                  INC	HL
00363D 23          3071*                  INC	HL
00363E BE          3072*                  CP	(HL)
00363F C8          3073*                  RET	Z
003640 0D          3074*                  DEC	C
003641 0D          3075*                  DEC	C
003642 0D          3076*                  DEC	C
003643 09          3077*                  ADD	HL,BC
003644 C3 36 36    3078*                  JP	SRCH1
003647 2B          3079*  SRCH2:          DEC	HL		;POINT TO CR
003648 37          3080*                  SCF
003649 C9          3081*                  RET
00364A             3082*  ;
00364A             3083*  ; NSCAN - scan for token at start of line, with nesting of inner structures
00364A             3084*  ; Alternative entry at NSCAN1 with L = level (used by CASE)
00364A             3085*  ;
00364A             3086*  ;   Inputs: B = token to find (1, start of line)
00364A             3087*  ;           C = token to find (2, start of line)
00364A             3088*  ;           E = token to nest (end of line)
00364A             3089*  ;           D = token to unnest (start of line)
00364A             3090*  ;           IY = start search area (line length byte)
00364A             3091*  ;  Outputs: NZ if not found
00364A             3092*  ;           Z if found, IY points to byte after token
00364A             3093*  ; Destroys: A,B,C,L,IY,F
00364A             3094*  ;
00364A 2E 00       3095*  NSCAN:          LD	L,0		;nest level
00364C FD 7E 00    3096*  NSCAN1:         LD	A,(IY)		;get line length
00364F B7          3097*                  OR	A		;test zero = end of prog
003650 28 34       3098*                  JR	Z,NSCAN6
003652 FD 7E 03    3099*                  LD	A,(IY+3)	;initial token
003655 B8          3100*                  CP	B		;test value reqd
003656 28 1D       3101*                  JR	Z,NSCAN3	;found (1)
003658 B9          3102*                  CP	C
003659 28 1A       3103*                  JR	Z,NSCAN3	;found (2)
00365B BA          3104*  NSCAN7:         CP	D		;unnest?
00365C 28 22       3105*                  JR	Z,NSCAN5
00365E C5          3106*  NSCAN2:         PUSH	BC
00365F 06 00       3107*                  LD	B,0
003661 FD 4E 00    3108*                  LD	C,(IY)
003664 FD 09       3109*                  ADD	IY,BC		;go to next line
003666 FD 7E FE    3110*                  LD	A,(IY-2)
003669 BB          3111*                  CP	E		;nest?
00366A 79          3112*                  LD	A,C
00366B C1          3113*                  POP	BC
00366C 20 DE       3114*                  JR	NZ,NSCAN1	;continue
00366E FE 05       3115*                  CP	5		;empty line ?
003670 38 DA       3116*                  JR	C,NSCAN1	;continue
003672 2C          3117*                  INC	L		;increment nest level
003673 18 D7       3118*                  JR	NSCAN1		;continue
003675             3119*  ;
003675 2C          3120*  NSCAN3:         INC	L
003676 2D          3121*                  DEC	L
003677 20 E2       3122*                  JR	NZ,NSCAN7
003679 01 04 00    3123*  NSCAN4:         LD	BC,4
00367C FD 09       3124*                  ADD	IY,BC
00367E AF          3125*                  XOR	A		;Z
00367F C9          3126*                  RET
003680             3127*  ;
003680 2D          3128*  NSCAN5:         DEC	L		;decrement nest level
003681 F2 5E 36    3129*                  JP	P,NSCAN2
003684 18 F3       3130*                  JR	NSCAN4
003686             3131*  ;
003686 F6 01       3132*  NSCAN6:         OR	1		;NZ
003688 C9          3133*                  RET
003689             3134*  ;
003689             3135*  ; WSRCH - search for token, with nesting of inner structures
003689             3136*  ;
003689             3137*  ;   Inputs: B = token to find or unnest (anywhere)
003689             3138*  ;           C = token to nest (anywhere), ignore after EXITex
003689             3139*  ;           D = ordinal (1 = find first token, 2 = second)
003689             3140*  ;           IY = address to start looking
003689             3141*  ;  Outputs: IY points to byte after that found
003689             3142*  ;           if not found abort to END
003689             3143*  ; Destroys: A,D,IY,F
003689             3144*  ;
003689 FD 7E 00    3145*  WSRCH:          LD	A,(IY)
00368C FD 23       3146*                  INC	IY
00368E FE 22       3147*                  CP	'"'
003690 CC D2 36    3148*                  CALL	Z,QUOTE
003693 FE F4       3149*                  CP	TREM
003695 28 22       3150*                  JR	Z,WSRCHM
003697 FE 10       3151*                  CP	TEXIT
003699 28 30       3152*                  JR	Z,WSRCHE
00369B B8          3153*                  CP	B
00369C 28 29       3154*                  JR	Z,WSRCHX
00369E B9          3155*                  CP	C
00369F 28 23       3156*                  JR	Z,WSRCHP
0036A1 FE 0D       3157*                  CP	CR
0036A3 20 E4       3158*                  JR	NZ,WSRCH
0036A5 FD 7E 00    3159*  WSRCH1:         LD	A,(IY)			;Line length
0036A8 FD 23       3160*                  INC	IY
0036AA B7          3161*                  OR	A
0036AB CA 0C 25    3162*                  JP	Z,END
0036AE FD 23       3163*                  INC	IY
0036B0 FD 23       3164*                  INC	IY			;Skip line number
0036B2 FD 7E 00    3165*                  LD	A,(IY)
0036B5 FE DC       3166*                  CP	TDATA
0036B7 20 D0       3167*                  JR	NZ,WSRCH
0036B9 FD 7E 00    3168*  WSRCHM:         LD	A,(IY)
0036BC FD 23       3169*                  INC	IY
0036BE FE 0D       3170*                  CP	CR
0036C0 20 F7       3171*                  JR	NZ,WSRCHM		;Skip to end of line
0036C2 18 E1       3172*                  JR	WSRCH1
0036C4             3173*  ;
0036C4 14          3174*  WSRCHP:         INC	D
0036C5 18 C2       3175*                  JR	WSRCH
0036C7             3176*  ;
0036C7 15          3177*  WSRCHX:         DEC	D
0036C8 20 BF       3178*                  JR	NZ,WSRCH
0036CA C9          3179*                  RET
0036CB             3180*  ;
0036CB CD 44 45    3181*  WSRCHE:         CALL	NXT
0036CE FD 23       3182*                  INC	IY
0036D0 18 B7       3183*                  JR	WSRCH
0036D2             3184*  ;
0036D2             3185*  ; QUOTE - skip quoted string
0036D2             3186*  ;
0036D2 FD 7E 00    3187*  QUOTE:          LD	A,(IY)
0036D5 FD 23       3188*                  INC	IY
0036D7 FE 0D       3189*                  CP	CR
0036D9 CA E1 36    3190*                  JP	Z,MISQUO
0036DC FE 22       3191*                  CP	'"'
0036DE 20 F2       3192*                  JR	NZ,QUOTE
0036E0 C9          3193*                  RET
0036E1             3194*  ;
0036E1 3E 09       3195*  MISQUO:         LD	A,9
0036E3 C3 7D 3F    3196*                  JP	ERROR_		;"Missing quote"
0036E6             3197*  ;
0036E6             3198*  ; X14OR5 - multiply by 1, 4 or 5
0036E6             3199*  ;   Inputs: DE = number to be multiplied
0036E6             3200*  ;           A = 1, 4 or 5 (else multiply by 4)
0036E6             3201*  ;  Outputs: DE = DE * A
0036E6             3202*  ;           Carry set if overflow
0036E6             3203*  ; Destroys: D,E,H,L,F
0036E6             3204*  ;
0036E6 62          3205*  X14OR5:         LD	H,D
0036E7 6B          3206*                  LD	L,E
0036E8 FE 01       3207*                  CP	1
0036EA C8          3208*                  RET	Z
0036EB FE 05       3209*                  CP	5
0036ED 29          3210*                  ADD	HL,HL
0036EE D8          3211*                  RET	C
0036EF 29          3212*                  ADD	HL,HL
0036F0 D8          3213*                  RET	C
0036F1 EB          3214*                  EX	DE,HL
0036F2 C0          3215*                  RET	NZ
0036F3 19          3216*                  ADD	HL,DE
0036F4 EB          3217*                  EX	DE,HL
0036F5 C9          3218*                  RET
0036F6             3219*  ;
0036F6             3220*  ; MUL16 - 16-bit multiply
0036F6             3221*  ;   Inputs: HL = number to be multiplied
0036F6             3222*  ;           BC = multiplier
0036F6             3223*  ;  Outputs: HL = HL * BC
0036F6             3224*  ;           Carry set if overflow
0036F6             3225*  ; Destroys: A,D,E,H,L,F
0036F6             3226*  ;
0036F6 EB          3227*  MUL16:          EX	DE,HL
0036F7 21 00 00    3228*                  LD	HL,0
0036FA 3E 10       3229*                  LD	A,16
0036FC 29          3230*  MUL161:         ADD	HL,HL
0036FD D8          3231*                  RET	C		;OVERFLOW
0036FE CB 23       3232*                  SLA	E
003700 CB 12       3233*                  RL	D
003702 30 02       3234*                  JR	NC,MUL162
003704 09          3235*                  ADD	HL,BC
003705 D8          3236*                  RET	C
003706 3D          3237*  MUL162:         DEC	A
003707 20 F3       3238*                  JR	NZ,MUL161
003709 C9          3239*                  RET
00370A             3240*  ;
00370A CD 44 45    3241*  CHANEL:         CALL	NXT
00370D FE 23       3242*                  CP	'#'
00370F 3E 2D       3243*                  LD	A,45
003711 C2 7D 3F    3244*                  JP	NZ,ERROR_	;"Missing #"
003714 FD 23       3245*  CHNL:           INC	IY		;SKIP '#'
003716 CD 99 18    3246*                  CALL	ITEMI
003719 D9          3247*                  EXX
00371A EB          3248*                  EX	DE,HL
00371B C9          3249*                  RET
00371C             3250*  ;
00371C             3251*  ; FREESA - Free members of a string array if adjacent to the top of heap
00371C             3252*  ;   Inputs: BC = length of array (= 4 * number of elements)
00371C             3253*  ;           HL addresses array first byte *above* array
00371C             3254*  ;  Outputs: NZ if any array element freed, Z if none
00371C             3255*  ; Destroys: nothing
00371C             3256*  ;
00371C F5          3257*  FREESA:         PUSH	AF
00371D C5          3258*  FREES0:         PUSH	BC
00371E D5          3259*                  PUSH	DE
00371F E5          3260*                  PUSH	HL
003720 AF          3261*                  XOR	A
003721 50          3262*                  LD	D,B
003722 59          3263*                  LD	E,C
003723 47          3264*                  LD	B,A
003724 D5          3265*  FREES1:         PUSH	DE
003725 2B          3266*                  DEC	HL
003726 56          3267*                  LD	D,(HL)
003727 2B          3268*                  DEC	HL
003728 5E          3269*                  LD	E,(HL)
003729 2B          3270*                  DEC	HL
00372A 4E          3271*                  LD	C,(HL)
00372B 2B          3272*                  DEC	HL
00372C E5          3273*                  PUSH	HL
00372D 2A E0 54    3274*                  LD	HL,(FREE)
003730 EB          3275*                  EX	DE,HL
003731 09          3276*                  ADD	HL,BC
003732 ED 52       3277*                  SBC	HL,DE
003734 20 07       3278*                  JR	NZ,FREES2
003736 19          3279*                  ADD	HL,DE
003737 ED 42       3280*                  SBC	HL,BC
003739 22 E0 54    3281*                  LD	(FREE),HL
00373C B4          3282*                  OR	H
00373D D1          3283*  FREES2:         POP	DE
00373E E1          3284*                  POP	HL
00373F 0E 04       3285*                  LD	C,4
003741 B7          3286*                  OR	A
003742 ED 42       3287*                  SBC	HL,BC
003744 EB          3288*                  EX	DE,HL
003745 20 DD       3289*                  JR	NZ,FREES1
003747 B7          3290*                  OR	A
003748 E1          3291*                  POP	HL
003749 D1          3292*                  POP	DE
00374A C1          3293*                  POP	BC
00374B B7          3294*                  OR	A
00374C 20 CF       3295*                  JR	NZ,FREES0
00374E F1          3296*                  POP	AF
00374F C9          3297*                  RET
003750             3298*  ;
003750             3299*  ;                END
003750             3300*  ;    include "exec.inc"
003750             0018       include "main.asm"
003750             0001*  ;
003750             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
003750             0003*  ;
003750             0004*                  .ASSUME ADL = 0
003750             0005*  ;	.ORG 0x0000
003750             0006*  ;                SEGMENT CODE
003750             0007*  ;
003750             0008*  ;                XDEF	NEWIT
003750             0009*  ;                XDEF	BAD
003750             0010*  ;                XDEF	CLEAN
003750             0011*  ;                XDEF	LINNUM
003750             0012*  ;                XDEF	ERROR_
003750             0013*  ;                XDEF	GETTOP
003750             0014*  ;                XDEF	DEL
003750             0015*  ;                XDEF	LISTIT
003750             0016*  ;
003750             0017*  ;BBC BASIC INTERPRETER - Z80 VERSION
003750             0018*  ;COMMANDS AND COMMON MODULE - "MAIN"
003750             0019*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
003750             0020*  ;
003750             0021*  ;THE NAME BBC BASIC IS USED WITH THE PERMISSION
003750             0022*  ;OF THE BRITISH BROADCASTING CORPORATION AND IS
003750             0023*  ;NOT TRANSFERRABLE TO A FORKED OR DERIVED WORK.
003750             0024*  ;
003750             0025*  ;VERSION 2.3, 07-05-1984
003750             0026*  ;VERSION 3.0, 01-03-1987
003750             0027*  ;VERSION 5.0, 31-05-2024
003750             0028*  ;VERSION 5.1, 10-08-2024
003750             0029*  ;
003750             0030*  ;                XREF	XEQ
003750             0031*  ;                XREF	RUN0
003750             0032*  ;                XREF	CHAIN0
003750             0033*  ;                XREF	TERMQ
003750             0034*  ;                XREF	MUL16
003750             0035*  ;                XREF	X14OR5
003750             0036*  ;                XREF	SPACES
003750             0037*  ;                XREF	ESCAPE
003750             0038*  ;                XREF	CHECK
003750             0039*  ;                XREF	SEARCH
003750             0040*  ;
003750             0041*  ;                XREF	OSWRCH
003750             0042*  ;                XREF	OSLINE
003750             0043*  ;                XREF	OSINIT
003750             0044*  ;                XREF	OSLOAD
003750             0045*  ;                XREF	OSSAVE
003750             0046*  ;                XREF	OSBGET
003750             0047*  ;                XREF	OSBPUT
003750             0048*  ;                XREF	OSSHUT
003750             0049*  ;                XREF	OSSTAT
003750             0050*  ;                XREF	PROMPT
003750             0051*  ;                XREF	LTRAP
003750             0052*  ;                XREF	OSCLI
003750             0053*  ;                XREF	RESET
003750             0054*  ;
003750             0055*  ;                XREF	COMMA
003750             0056*  ;                XREF	BRAKET
003750             0057*  ;                XREF	ZERO
003750             0058*  ;                XREF	ITEMI
003750             0059*  ;                XREF	EXPRI
003750             0060*  ;                XREF	EXPRS
003750             0061*  ;                XREF	DECODE
003750             0062*  ;                XREF	LOADN
003750             0063*  ;                XREF	SFIX
003750             0064*  ;
003750             0065*  ;                XDEF	NXT
003750             0066*  ;                XDEF	NLIST
003750             0067*  ;                XDEF	START
003750             0068*  ;                XDEF	OUTCHR
003750             0069*  ;                XDEF	OUT
003750             0070*  ;                XDEF	ERROR_
003750             0071*  ;                XDEF	EXTERR
003750             0072*  ;                XDEF	REPORT
003750             0073*  ;                XDEF	CLOOP
003750             0074*  ;                XDEF	WARM
003750             0075*  ;                XDEF	CLEAR
003750             0076*  ;                XDEF	CRLF
003750             0077*  ;                XDEF	SAYLN
003750             0078*  ;                XDEF	LOAD0
003750             0079*  ;                XDEF	TELL
003750             0080*  ;                XDEF	FINDL
003750             0081*  ;                XDEF	GETTOP
003750             0082*  ;                XDEF	SETLIN
003750             0083*  ;                XDEF	GETVAR
003750             0084*  ;                XDEF	PUTVAR
003750             0085*  ;                XDEF	GETDEF
003750             0086*  ;                XDEF	LOCATE
003750             0087*  ;                XDEF	CREATE
003750             0088*  ;                XDEF	PBCDL
003750             0089*  ;                XDEF	LEXAN2
003750             0090*  ;                XDEF	RANGE
003750             0091*  ;                XDEF	VERMSG
003750             0092*  ;                XDEF	KEYWDS
003750             0093*  ;                XDEF	KEYWDL
003750             0094*  ;
003750             0095*  ;                XREF	PAGE_
003750             0096*  ;                XREF	ACCS
003750             0097*  ;                XREF	BUFFER
003750             0098*  ;                XREF	LOMEM
003750             0099*  ;                XREF	HIMEM
003750             0100*  ;                XREF	COUNT
003750             0101*  ;                XREF	WIDTH
003750             0102*  ;                XREF	FREE
003750             0103*  ;                XREF	STAVAR
003750             0104*  ;                XREF	DYNVAR
003750             0105*  ;                XREF	ERRTXT
003750             0106*  ;                XREF	ERR
003750             0107*  ;                XREF	ERL
003750             0108*  ;                XREF	CURLIN
003750             0109*  ;                XREF	ERRTRP
003750             0110*  ;                XREF	ONERSP
003750             0111*  ;                XREF	FNPTR
003750             0112*  ;                XREF	PROPTR
003750             0113*  ;                XREF	AUTONO
003750             0114*  ;                XREF	INCREM
003750             0115*  ;                XREF	LISTON
003750             0116*  ;                XREF	TRACEN
003750             0117*  ;
003750             0118*  ; CR             EQU	0DH
003750             0119*  ; LF             EQU	0AH
003750             0120*  ; ESC            EQU	1BH
003750             0121*  ;
003750             0122*  TERROR:         EQU	85H
003750             0123*  TLINE:          EQU	86H
003750             0124*  TELSE:          EQU	8BH
003750             0125*  TTHEN:          EQU	8CH
003750             0126*  TLINO:          EQU	8DH
003750             0127*  TFN:            EQU	0A4H
003750             0128*  TTO:            EQU	0B8H
003750             0129*  TWHILE:         EQU	0C7H
003750             0130*  TCASE:          EQU	0C8H
003750             0131*  TWHEN:          EQU	0C9H
003750             0132*  TOF:            EQU	0CAH
003750             0133*  TENDCASE:       EQU	0CBH
003750             0134*  TOTHERWISE:     EQU	0CCH
003750             0135*  TENDIF:         EQU	0CDH
003750             0136*  TENDWHILE:      EQU	0CEH
003750             0137*  TDATA:          EQU	0DCH
003750             0138*  TDIM:           EQU	0DEH
003750             0139*  TFOR:           EQU	0E3H
003750             0140*  TGOSUB:         EQU	0E4H
003750             0141*  TGOTO:          EQU	0E5H
003750             0142*  TIF:            EQU	0E7H
003750             0143*  TLOCAL:         EQU	0EAH
003750             0144*  TNEXT:          EQU	0EDH
003750             0145*  TON:            EQU	0EEH
003750             0146*  TPROC:          EQU	0F2H
003750             0147*  TREM:           EQU	0F4H
003750             0148*  TREPEAT:        EQU	0F5H
003750             0149*  TRESTORE:       EQU	0F7H
003750             0150*  TTRACE:         EQU	0FCH
003750             0151*  TUNTIL:         EQU	0FDH
003750             0152*  TEXIT:          EQU	10H
003750             0153*  ;
003750             0154*  TOKLO:          EQU	8FH
003750             0155*  TOKHI:          EQU	93H
003750             0156*  OFFSET:         EQU	0CFH-TOKLO
003750             0157*  ;
003750 C3 7A 37    0158*  START:          JP	COLD
003753 C3 E8 37    0159*                  JP	WARM
003756 C3 1C 26    0160*                  JP	ESCAPE
003759 C3 8E 3F    0161*                  JP	EXTERR
00375C C3 33 45    0162*                  JP	TELL
00375F C3 21 45    0163*                  JP	TEXT_
003762 C3 99 18    0164*                  JP	ITEMI
003765 C3 6C 18    0165*                  JP	EXPRI
003768 C3 75 18    0166*                  JP	EXPRS
00376B C3 D0 15    0167*                  JP	OSCLI
00376E C3 78 12    0168*                  JP	OSBGET
003771 C3 80 12    0169*                  JP	OSBPUT
003774 C3 89 12    0170*                  JP	OSSTAT
003777 C3 70 12    0171*                  JP	OSSHUT
00377A 21 00 54    0172*  COLD:           LD	HL,STAVAR	;COLD START
00377D F9          0173*                  LD	SP,HL
00377E 36 0A       0174*                  LD	(HL),10
003780 2C          0175*                  INC	L
003781 36 09       0176*                  LD	(HL),9
003783 2C          0177*                  INC	L
003784 AF          0178*                  XOR	A
003785 77          0179*  PURGE:          LD	(HL),A		;CLEAR SCRATCHPAD
003786 2C          0180*                  INC	L
003787 20 FC       0181*                  JR	NZ,PURGE
003789 3E 37       0182*                  LD	A,37H		;V3.0
00378B 32 FE 54    0183*                  LD	(LISTON),A
00378E 21 C7 37    0184*                  LD	HL,NOTICE
003791 22 EE 54    0185*                  LD	(ERRTXT),HL
003794 CD BD 11    0186*                  CALL	OSINIT
003797 ED 53 E2 54 0187*                  LD	(HIMEM),DE
00379B 22 DC 54    0188*                  LD	(PAGE_),HL
00379E CD 77 40    0189*                  CALL	NEWIT
0037A1 C2 8B 24    0190*                  JP	NZ,CHAIN0	;AUTO-RUN
0037A4 CD 33 45    0191*                  CALL	TELL
0037A7 42 42 43 20 0192*  VERMSG:         DB	"BBC BASIC (Z80) Version 5.00  "
       42 41 53 49 
       43 20 28 5A 
       38 30 29 20 
       56 65 72 73 
       69 6F 6E 20 
       35 2E 30 30 
       20 20       
0037C5 0D          0193*                  DB	CR
0037C6 0A          0194*                  DB	LF
0037C7 28 43 29 20 0195*  NOTICE:         DB	"(C) Copyright R.T.Russell 2024"
       43 6F 70 79 
       72 69 67 68 
       74 20 52 2E 
       54 2E 52 75 
       73 73 65 6C 
       6C 20 32 30 
       32 34       
0037E5 0D          0196*                  DB	CR
0037E6 0A          0197*                  DB	LF
0037E7 00          0198*                  DB	0
0037E8 F6          0199*  WARM:           DB	0F6H
0037E9 37          0200*  CLOOP:          SCF
0037EA ED 7B E2 54 0201*                  LD	SP,(HIMEM)
0037EE CD CC 11    0202*                  CALL	PROMPT		;PROMPT USER
0037F1 21 FE 54    0203*                  LD	HL,LISTON
0037F4 7E          0204*                  LD	A,(HL)
0037F5 E6 0F       0205*                  AND	0FH		;LISTO
0037F7 F6 30       0206*                  OR	30H		;OPT 3
0037F9 77          0207*                  LD	(HL),A
0037FA ED 62       0208*                  SBC	HL,HL		;HL <- 0 (V3.0)
0037FC 22 EA 54    0209*                  LD	(ERRTRP),HL
0037FF 22 EC 54    0210*                  LD	(ONERSP),HL
003802 22 F4 54    0211*                  LD	(CURLIN),HL	;For CMOS EDIT->LIST
003805 2A E8 54    0212*                  LD	HL,(AUTONO)
003808 E5          0213*                  PUSH	HL
003809 7C          0214*                  LD	A,H
00380A B5          0215*                  OR	L
00380B 28 17       0216*                  JR	Z,NOAUTO
00380D E5          0217*                  PUSH	HL
00380E CD CF 41    0218*                  CALL	PBCD		;AUTO NUMBER
003811 E1          0219*                  POP	HL
003812 ED 4B FF 54 0220*                  LD	BC,(INCREM)
003816 06 00       0221*                  LD	B,0
003818 09          0222*                  ADD	HL,BC
003819 DA E8 43    0223*                  JP	C,TOOBIGmn
00381C 22 E8 54    0224*                  LD	(AUTONO),HL
00381F 3E 20       0225*                  LD	A,' '
003821 CD 3B 41    0226*                  CALL	OUTCHR
003824 21 00 52    0227*  NOAUTO:         LD	HL,ACCS
003827 CD 04 12    0228*                  CALL	OSLINE		;GET CONSOLE INPUT
00382A AF          0229*                  XOR	A
00382B 32 FB 54    0230*                  LD	(COUNT),A
00382E FD 21 00 52 0231*                  LD	IY,ACCS
003832 21 1A 3C    0232*                  LD	HL,COMNDS
003835 CD DF 3F    0233*                  CALL	LEX0
003838 E1          0234*                  POP	HL
003839 20 19       0235*                  JR	NZ,NOTCMD
00383B 87          0236*                  ADD	A,A
00383C 4F          0237*                  LD	C,A
00383D 7C          0238*                  LD	A,H
00383E B5          0239*                  OR	L
00383F 20 0F       0240*                  JR	NZ,INAUTO
003841 47          0241*                  LD	B,A
003842 21 4A 3C    0242*                  LD	HL,CMDTABmn
003845 09          0243*                  ADD	HL,BC
003846 7E          0244*                  LD	A,(HL)		;TABLE ENTRY
003847 23          0245*                  INC	HL
003848 66          0246*                  LD	H,(HL)
003849 6F          0247*                  LD	L,A
00384A FD 23       0248*                  INC	IY
00384C CD 44 45    0249*                  CALL	NXT
00384F E9          0250*                  JP	(HL)		;EXECUTE COMMAND
003850             0251*  ;
003850 FD 21 00 52 0252*  INAUTO:         LD	IY,ACCS
003854 7C          0253*  NOTCMD:         LD	A,H
003855 B5          0254*                  OR	L
003856 CC C3 43    0255*                  CALL	Z,LINNUM
003859 CD 44 45    0256*                  CALL	NXT
00385C 11 00 53    0257*                  LD	DE,BUFFER
00385F 0E 01       0258*                  LD	C,1		;LEFT MODE
003861 E5          0259*                  PUSH	HL
003862 CD 51 44    0260*                  CALL	LEXAN2		;LEXICAL ANALYSIS
003865 E1          0261*                  POP	HL
003866 12          0262*                  LD	(DE),A		;TERMINATOR
003867 AF          0263*                  XOR	A
003868 47          0264*                  LD	B,A
003869 4B          0265*                  LD	C,E		;BC=LINE LENGTH
00386A 13          0266*                  INC	DE
00386B 12          0267*                  LD	(DE),A		;ZERO NEXT
00386C 7C          0268*                  LD	A,H
00386D B5          0269*                  OR	L
00386E FD 21 00 53 0270*                  LD	IY,BUFFER	;FOR XEQ
003872 CA D2 24    0271*                  JP	Z,XEQ		;DIRECT MODE
003875 C5          0272*                  PUSH	BC
003876 CD 7C 41    0273*                  CALL	FINDL
003879 CC 22 40    0274*                  CALL	Z,DEL
00387C C1          0275*                  POP	BC
00387D 79          0276*                  LD	A,C
00387E B7          0277*                  OR	A
00387F 28 39       0278*                  JR	Z,CLOOP2	;DELETE LINE ONLY
003881 C6 04       0279*                  ADD	A,4
003883 4F          0280*                  LD	C,A		;LENGTH INCLUSIVE
003884 D5          0281*                  PUSH	DE		;LINE NUMBER
003885 C5          0282*                  PUSH	BC		;SAVE LINE LENGTH
003886 EB          0283*                  EX	DE,HL
003887 C5          0284*                  PUSH	BC
003888 CD 5E 40    0285*                  CALL	GETTOP
00388B C1          0286*                  POP	BC
00388C E5          0287*                  PUSH	HL
00388D 09          0288*                  ADD	HL,BC
00388E E5          0289*                  PUSH	HL
00388F 24          0290*                  INC	H
003890 AF          0291*                  XOR	A
003891 ED 72       0292*                  SBC	HL,SP
003893 E1          0293*                  POP	HL
003894 D2 7D 3F    0294*                  JP	NC,ERROR_	;"No room"
003897 E3          0295*                  EX	(SP),HL
003898 E5          0296*                  PUSH	HL
003899 23          0297*                  INC	HL
00389A B7          0298*                  OR	A
00389B ED 52       0299*                  SBC	HL,DE
00389D 44          0300*                  LD	B,H		;BC=AMOUNT TO MOVE
00389E 4D          0301*                  LD	C,L
00389F E1          0302*                  POP	HL
0038A0 D1          0303*                  POP	DE
0038A1 28 02       0304*                  JR	Z,ATEND
0038A3 ED B8       0305*                  LDDR			;MAKE SPACE
0038A5 C1          0306*  ATEND:          POP	BC		;LINE LENGTH
0038A6 D1          0307*                  POP	DE		;LINE NUMBER
0038A7 23          0308*                  INC	HL
0038A8 71          0309*                  LD	(HL),C		;STORE LENGTH
0038A9 23          0310*                  INC	HL
0038AA 73          0311*                  LD	(HL),E		;STORE LINE NUMBER
0038AB 23          0312*                  INC	HL
0038AC 72          0313*                  LD	(HL),D
0038AD 23          0314*                  INC	HL
0038AE 11 00 53    0315*                  LD	DE,BUFFER
0038B1 EB          0316*                  EX	DE,HL
0038B2 0D          0317*                  DEC	C
0038B3 0D          0318*                  DEC	C
0038B4 0D          0319*                  DEC	C
0038B5 ED B0       0320*                  LDIR			;ADD LINE
0038B7 CD 53 40    0321*                  CALL	CLEAN
0038BA C3 E9 37    0322*  CLOOP2:         JP	CLOOP
0038BD             0323*  ;
0038BD             0324*  ;LIST OF TOKENS AND KEYWORDS.
0038BD             0325*  ;IF A KEYWORD IS FOLLOWED BY NUL THEN IT WILL
0038BD             0326*  ; ONLY MATCH WITH THE WORD FOLLOWED IMMEDIATELY
0038BD             0327*  ; BY A DELIMITER.
0038BD             0328*  ;
0038BD 80          0329*  KEYWDS:         DB	80H
0038BE 41 4E 44    0330*                  DB	"AND"
0038C1 94          0331*                  DB	94H
0038C2 41 42 53    0332*                  DB	"ABS"
0038C5 95          0333*                  DB	95H
0038C6 41 43 53    0334*                  DB	"ACS"
0038C9 96          0335*                  DB	96H
0038CA 41 44 56 41 0336*                  DB	"ADVAL"
       4C          
0038CF 97          0337*                  DB	97H
0038D0 41 53 43    0338*                  DB	"ASC"
0038D3 98          0339*                  DB	98H
0038D4 41 53 4E    0340*                  DB	"ASN"
0038D7 99          0341*                  DB	99H
0038D8 41 54 4E    0342*                  DB	"ATN"
0038DB 9A          0343*                  DB	9AH
0038DC 42 47 45 54 0344*                  DB	"BGET "
       20          
0038E1 D5          0345*                  DB	0D5H
0038E2 42 50 55 54 0346*                  DB	"BPUT "
       20          
0038E7 0F          0347*                  DB	0FH
0038E8 42 59 20    0348*                  DB	"BY "		; v5
0038EB FB          0349*                  DB	0FBH
0038EC 43 4F 4C 4F 0350*                  DB	"COLOUR"
       55 52       
0038F2 FB          0351*                  DB	0FBH
0038F3 43 4F 4C 4F 0352*                  DB	"COLOR"
       52          
0038F8 D6          0353*                  DB	0D6H
0038F9 43 41 4C 4C 0354*                  DB	"CALL"
0038FD C8          0355*                  DB	0C8H
0038FE 43 41 53 45 0356*                  DB	"CASE"		; v5
003902 D7          0357*                  DB	0D7H
003903 43 48 41 49 0358*                  DB	"CHAIN"
       4E          
003908 BD          0359*                  DB	0BDH
003909 43 48 52 24 0360*                  DB	"CHR$"
00390D D8          0361*                  DB	0D8H
00390E 43 4C 45 41 0362*                  DB	"CLEAR "
       52 20       
003914 D9          0363*                  DB	0D9H
003915 43 4C 4F 53 0364*                  DB	"CLOSE "
       45 20       
00391B DA          0365*                  DB	0DAH
00391C 43 4C 47 20 0366*                  DB	"CLG "
003920 DB          0367*                  DB	0DBH
003921 43 4C 53 20 0368*                  DB	"CLS "
003925 9B          0369*                  DB	9BH
003926 43 4F 53    0370*                  DB	"COS"
003929 9C          0371*                  DB	9CH
00392A 43 4F 55 4E 0372*                  DB	"COUNT "
       54 20       
003930 01          0373*                  DB	01H
003931 43 49 52 43 0374*                  DB	"CIRCLE"	; v5
       4C 45       
003937 DC          0375*                  DB	0DCH
003938 44 41 54 41 0376*                  DB	"DATA"
00393C 9D          0377*                  DB	9DH
00393D 44 45 47    0378*                  DB	"DEG"
003940 DD          0379*                  DB	0DDH
003941 44 45 46    0380*                  DB	"DEF"
003944 81          0381*                  DB	81H
003945 44 49 56    0382*                  DB	"DIV"
003948 DE          0383*                  DB	0DEH
003949 44 49 4D    0384*                  DB	"DIM"
00394C DF          0385*                  DB	0DFH
00394D 44 52 41 57 0386*                  DB	"DRAW"
003951 E1          0387*                  DB	0E1H
003952 45 4E 44 50 0388*                  DB	"ENDPROC "
       52 4F 43 20 
00395A CE          0389*                  DB	0CEH
00395B 45 4E 44 57 0390*                  DB	"ENDWHILE "	; v5
       48 49 4C 45 
       20          
003964 CB          0391*                  DB	0CBH
003965 45 4E 44 43 0392*                  DB	"ENDCASE "	; v5
       41 53 45 20 
00396D CD          0393*                  DB	0CDH
00396E 45 4E 44 49 0394*                  DB	"ENDIF "	; v5
       46 20       
003974 E0          0395*                  DB	0E0H
003975 45 4E 44 20 0396*                  DB	"END "
003979 E2          0397*                  DB	0E2H
00397A 45 4E 56 45 0398*                  DB	"ENVELOPE"
       4C 4F 50 45 
003982 8B          0399*                  DB	8BH
003983 45 4C 53 45 0400*                  DB	"ELSE"
003987 A0          0401*                  DB	0A0H
003988 45 56 41 4C 0402*                  DB	"EVAL"
00398C 9E          0403*                  DB	9EH
00398D 45 52 4C 20 0404*                  DB	"ERL "
003991 85          0405*                  DB	85H
003992 45 52 52 4F 0406*                  DB	"ERROR"
       52          
003997 C5          0407*                  DB	0C5H
003998 45 4F 46 20 0408*                  DB	"EOF "
00399C 82          0409*                  DB	82H
00399D 45 4F 52    0410*                  DB	"EOR"
0039A0 9F          0411*                  DB	9FH
0039A1 45 52 52 20 0412*                  DB	"ERR "
0039A5 10          0413*                  DB	10H
0039A6 45 58 49 54 0414*                  DB	"EXIT "		; v5
       20          
0039AB A1          0415*                  DB	0A1H
0039AC 45 58 50    0416*                  DB	"EXP"
0039AF A2          0417*                  DB	0A2H
0039B0 45 58 54 20 0418*                  DB	"EXT "
0039B4 02          0419*                  DB	02H
0039B5 45 4C 4C 49 0420*                  DB	"ELLIPSE"	; v5
       50 53 45    
0039BC E3          0421*                  DB	0E3H
0039BD 46 4F 52    0422*                  DB	"FOR"
0039C0 A3          0423*                  DB	0A3H
0039C1 46 41 4C 53 0424*                  DB	"FALSE "
       45 20       
0039C7 03          0425*                  DB	03H
0039C8 46 49 4C 4C 0426*                  DB	"FILL"		; v5
0039CC A4          0427*                  DB	0A4H
0039CD 46 4E       0428*                  DB	"FN"
0039CF E5          0429*                  DB	0E5H
0039D0 47 4F 54 4F 0430*                  DB	"GOTO"
0039D4 BE          0431*                  DB	0BEH
0039D5 47 45 54 24 0432*                  DB	"GET$"
0039D9 A5          0433*                  DB	0A5H
0039DA 47 45 54    0434*                  DB	"GET"
0039DD E4          0435*                  DB	0E4H
0039DE 47 4F 53 55 0436*                  DB	"GOSUB"
       42          
0039E3 E6          0437*                  DB	0E6H
0039E4 47 43 4F 4C 0438*                  DB	"GCOL"
0039E8 93          0439*                  DB	93H
0039E9 48 49 4D 45 0440*                  DB	"HIMEM "
       4D 20       
0039EF E8          0441*                  DB	0E8H
0039F0 49 4E 50 55 0442*                  DB	"INPUT"
       54          
0039F5 E7          0443*                  DB	0E7H
0039F6 49 46       0444*                  DB	"IF"
0039F8 BF          0445*                  DB	0BFH
0039F9 49 4E 4B 45 0446*                  DB	"INKEY$"
       59 24       
0039FF A6          0447*                  DB	0A6H
003A00 49 4E 4B 45 0448*                  DB	"INKEY"
       59          
003A05 A8          0449*                  DB	0A8H
003A06 49 4E 54    0450*                  DB	"INT"
003A09 A7          0451*                  DB	0A7H
003A0A 49 4E 53 54 0452*                  DB	"INSTR("
       52 28       
003A10 0C          0453*                  DB	0CH
003A11 49 4E 53 54 0454*                  DB	"INSTALL"	; v5
       41 4C 4C    
003A18 86          0455*                  DB	86H
003A19 4C 49 4E 45 0456*                  DB	"LINE"
003A1D 92          0457*                  DB	92H
003A1E 4C 4F 4D 45 0458*                  DB	"LOMEM "
       4D 20       
003A24 EA          0459*                  DB	0EAH
003A25 4C 4F 43 41 0460*                  DB	"LOCAL"
       4C          
003A2A C0          0461*                  DB	0C0H
003A2B 4C 45 46 54 0462*                  DB	"LEFT$("
       24 28       
003A31 A9          0463*                  DB	0A9H
003A32 4C 45 4E    0464*                  DB	"LEN"
003A35 E9          0465*                  DB	0E9H
003A36 4C 45 54    0466*                  DB	"LET"
003A39 AB          0467*                  DB	0ABH
003A3A 4C 4F 47    0468*                  DB	"LOG"
003A3D AA          0469*                  DB	0AAH
003A3E 4C 4E       0470*                  DB	"LN"
003A40 C1          0471*                  DB	0C1H
003A41 4D 49 44 24 0472*                  DB	"MID$("
       28          
003A46 EB          0473*                  DB	0EBH
003A47 4D 4F 44 45 0474*                  DB	"MODE"
003A4B 83          0475*                  DB	83H
003A4C 4D 4F 44    0476*                  DB	"MOD"
003A4F EC          0477*                  DB	0ECH
003A50 4D 4F 56 45 0478*                  DB	"MOVE"
003A54 04          0479*                  DB	04H
003A55 4D 4F 55 53 0480*                  DB	"MOUSE"		; v5
       45          
003A5A ED          0481*                  DB	0EDH
003A5B 4E 45 58 54 0482*                  DB	"NEXT"
003A5F AC          0483*                  DB	0ACH
003A60 4E 4F 54    0484*                  DB	"NOT"
003A63 EE          0485*                  DB	0EEH
003A64 4F 4E       0486*                  DB	"ON"
003A66 87          0487*                  DB	87H
003A67 4F 46 46 20 0488*                  DB	"OFF "
003A6B CA          0489*                  DB	0CAH
003A6C 4F 46 20    0490*                  DB	"OF "		; v5
003A6F 05          0491*                  DB	05H
003A70 4F 52 49 47 0492*                  DB	"ORIGIN"	; v5
       49 4E       
003A76 84          0493*                  DB	84H
003A77 4F 52       0494*                  DB	"OR"
003A79 8E          0495*                  DB	8EH
003A7A 4F 50 45 4E 0496*                  DB	"OPENIN"
       49 4E       
003A80 AE          0497*                  DB	0AEH
003A81 4F 50 45 4E 0498*                  DB	"OPENOUT"
       4F 55 54    
003A88 AD          0499*                  DB	0ADH
003A89 4F 50 45 4E 0500*                  DB	"OPENUP"
       55 50       
003A8F FF          0501*                  DB	0FFH
003A90 4F 53 43 4C 0502*                  DB	"OSCLI"
       49          
003A95 CC          0503*                  DB	0CCH
003A96 4F 54 48 45 0504*                  DB	"OTHERWISE"	; v5
       52 57 49 53 
       45          
003A9F F1          0505*                  DB	0F1H
003AA0 50 52 49 4E 0506*                  DB	"PRINT"
       54          
003AA5 90          0507*                  DB	90H
003AA6 50 41 47 45 0508*                  DB	"PAGE "
       20          
003AAB 8F          0509*                  DB	8FH
003AAC 50 54 52 20 0510*                  DB	"PTR "
003AB0 AF          0511*                  DB	0AFH
003AB1 50 49 20    0512*                  DB	"PI "
003AB4 F0          0513*                  DB	0F0H
003AB5 50 4C 4F 54 0514*                  DB	"PLOT"
003AB9 B0          0515*                  DB	0B0H
003ABA 50 4F 49 4E 0516*                  DB	"POINT("
       54 28       
003AC0 F2          0517*                  DB	0F2H
003AC1 50 52 4F 43 0518*                  DB	"PROC"
003AC5 B1          0519*                  DB	0B1H
003AC6 50 4F 53 20 0520*                  DB	"POS "
003ACA 0E          0521*                  DB	0EH
003ACB 50 55 54    0522*                  DB	"PUT"		; Token changed
003ACE 06          0523*                  DB	06H
003ACF 51 55 49 54 0524*                  DB	"QUIT "		; v5
       20          
003AD4 F8          0525*                  DB	0F8H
003AD5 52 45 54 55 0526*                  DB	"RETURN "
       52 4E 20    
003ADC F5          0527*                  DB	0F5H
003ADD 52 45 50 45 0528*                  DB	"REPEAT"
       41 54       
003AE3 F6          0529*                  DB	0F6H
003AE4 52 45 50 4F 0530*                  DB	"REPORT "
       52 54 20    
003AEB F3          0531*                  DB	0F3H
003AEC 52 45 41 44 0532*                  DB	"READ"
003AF0 F4          0533*                  DB	0F4H
003AF1 52 45 4D    0534*                  DB	"REM"
003AF4 F9          0535*                  DB	0F9H
003AF5 52 55 4E 20 0536*                  DB	"RUN "
003AF9 B2          0537*                  DB	0B2H
003AFA 52 41 44    0538*                  DB	"RAD"
003AFD F7          0539*                  DB	0F7H
003AFE 52 45 53 54 0540*                  DB	"RESTORE"
       4F 52 45    
003B05 C2          0541*                  DB	0C2H
003B06 52 49 47 48 0542*                  DB	"RIGHT$("
       54 24 28    
003B0D B3          0543*                  DB	0B3H
003B0E 52 4E 44 20 0544*                  DB	"RND "
003B12 07          0545*                  DB	07H
003B13 52 45 43 54 0546*                  DB	"RECTANGLE"	; v5
       41 4E 47 4C 
       45          
003B1C 88          0547*                  DB	88H
003B1D 53 54 45 50 0548*                  DB	"STEP"
003B21 B4          0549*                  DB	0B4H
003B22 53 47 4E    0550*                  DB	"SGN"
003B25 B5          0551*                  DB	0B5H
003B26 53 49 4E    0552*                  DB	"SIN"
003B29 B6          0553*                  DB	0B6H
003B2A 53 51 52    0554*                  DB	"SQR"
003B2D 89          0555*                  DB	89H
003B2E 53 50 43    0556*                  DB	"SPC"
003B31 C3          0557*                  DB	0C3H
003B32 53 54 52 24 0558*                  DB	"STR$"
003B36 C4          0559*                  DB	0C4H
003B37 53 54 52 49 0560*                  DB	"STRING$("
       4E 47 24 28 
003B3F D4          0561*                  DB	0D4H
003B40 53 4F 55 4E 0562*                  DB	"SOUND"
       44          
003B45 FA          0563*                  DB	0FAH
003B46 53 54 4F 50 0564*                  DB	"STOP "
       20          
003B4B C6          0565*                  DB	0C6H
003B4C 53 55 4D    0566*                  DB	"SUM"		; v5
003B4F 08          0567*                  DB	08H
003B50 53 57 41 50 0568*                  DB	"SWAP"		; v5
003B54 09          0569*                  DB	09H
003B55 53 59 53    0570*                  DB	"SYS"		; v5
003B58 B7          0571*                  DB	0B7H
003B59 54 41 4E    0572*                  DB	"TAN"
003B5C 8A          0573*                  DB	8AH
003B5D 54 41 42 28 0574*                  DB	"TAB("
003B61 8C          0575*                  DB	8CH
003B62 54 48 45 4E 0576*                  DB	"THEN"
003B66 91          0577*                  DB	91H
003B67 54 49 4D 45 0578*                  DB	"TIME "
       20          
003B6C 0A          0579*                  DB	0AH
003B6D 54 49 4E 54 0580*                  DB	"TINT"
003B71 B8          0581*                  DB	0B8H
003B72 54 4F       0582*                  DB	"TO"
003B74 FC          0583*                  DB	0FCH
003B75 54 52 41 43 0584*                  DB	"TRACE"
       45          
003B7A B9          0585*                  DB	0B9H
003B7B 54 52 55 45 0586*                  DB	"TRUE "
       20          
003B80 FD          0587*                  DB	0FDH
003B81 55 4E 54 49 0588*                  DB	"UNTIL"
       4C          
003B86 BA          0589*                  DB	0BAH
003B87 55 53 52    0590*                  DB	"USR"
003B8A EF          0591*                  DB	0EFH
003B8B 56 44 55    0592*                  DB	"VDU"
003B8E BB          0593*                  DB	0BBH
003B8F 56 41 4C    0594*                  DB	"VAL"
003B92 BC          0595*                  DB	0BCH
003B93 56 50 4F 53 0596*                  DB	"VPOS "
       20          
003B98 C7          0597*                  DB	0C7H
003B99 57 48 49 4C 0598*                  DB	"WHILE"		; v5
       45          
003B9E C9          0599*                  DB	0C9H
003B9F 57 48 45 4E 0600*                  DB	"WHEN"		; v5
003BA3 0B          0601*                  DB	0BH
003BA4 57 41 49 54 0602*                  DB	"WAIT "		; v5
       20          
003BA9 FE          0603*                  DB	0FEH
003BAA 57 49 44 54 0604*                  DB	"WIDTH"
       48          
003BAF             0605*  ;'LEFT' TOKENS:
003BAF CF          0606*                  DB	0CFH
003BB0 50 54 52    0607*                  DB	"PTR"
003BB3 D1          0608*                  DB	0D1H
003BB4 54 49 4D 45 0609*                  DB	"TIME"
003BB8 D3          0610*                  DB	0D3H
003BB9 48 49 4D 45 0611*                  DB	"HIMEM"
       4D          
003BBE D2          0612*                  DB	0D2H
003BBF 4C 4F 4D 45 0613*                  DB	"LOMEM"
       4D          
003BC4 D0          0614*                  DB	0D0H
003BC5 50 41 47 45 0615*                  DB	"PAGE"
003BC9             0616*  ;
003BC9 11          0617*                  DB	11H
003BCA 4D 69 73 73 0618*                  DB	"Missing "
       69 6E 67 20 
003BD2 12          0619*                  DB	12H
003BD3 4E 6F 20 73 0620*                  DB	"No such "
       75 63 68 20 
003BDB 13          0621*                  DB	13H
003BDC 42 61 64 20 0622*                  DB	"Bad "
003BE0 14          0623*                  DB	14H
003BE1 20 72 61 6E 0624*                  DB	" range"
       67 65       
003BE7 15          0625*                  DB	15H
003BE8 76 61 72 69 0626*                  DB	"variable"
       61 62 6C 65 
003BF0 16          0627*                  DB	16H
003BF1 4F 75 74 20 0628*                  DB	"Out of"
       6F 66       
003BF7 17          0629*                  DB	17H
003BF8 4E 6F 20    0630*                  DB	"No "
003BFB 18          0631*                  DB	18H
003BFC 20 73 70 61 0632*                  DB	" space"
       63 65       
003C02 19          0633*                  DB	19H
003C03 4E 6F 74 20 0634*                  DB	"Not in a "
       69 6E 20 61 
       20          
003C0C 1A          0635*                  DB	1AH
003C0D 20 6C 6F 6F 0636*                  DB	" loop"
       70          
003C12 1B          0637*                  DB	1BH
003C13 20 6E 6F 74 0638*                  DB	" not "
       20          
003C18             0639*  KEYWDL:         EQU	$-KEYWDS
003C18 FF FF       0640*                  DW	-1
003C1A             0641*  ;
003C1A             0642*  ;LIST OF IMMEDIATE MODE COMMANDS:
003C1A             0643*  ;
003C1A 80          0644*  COMNDS:         DB	80H
003C1B 41 55 54 4F 0645*                  DB	"AUTO"
003C1F 81          0646*                  DB	81H
003C20 44 45 4C 45 0647*                  DB	"DELETE"
       54 45       
003C26 82          0648*                  DB	82H
003C27 4C 49 53 54 0649*                  DB	"LIST"
003C2B 83          0650*                  DB	83H
003C2C 4C 4F 41 44 0651*                  DB	"LOAD"
003C30 84          0652*                  DB	84H
003C31 4E 45 57 20 0653*                  DB	"NEW "
003C35 85          0654*                  DB	85H
003C36 4F 4C 44 20 0655*                  DB	"OLD "
003C3A 86          0656*                  DB	86H
003C3B 52 45 4E 55 0657*                  DB	"RENUMBER"
       4D 42 45 52 
003C43 87          0658*                  DB	87H
003C44 53 41 56 45 0659*                  DB	"SAVE"
003C48 FF FF       0660*                  DW	-1
003C4A             0661*  ;
003C4A             0662*  ;IMMEDIATE MODE COMMANDS:
003C4A             0663*  ;
003C4A 1C 3F       0664*  CMDTABmn:         DW	AUTO
003C4C BF 3D       0665*                  DW	DELETE
003C4E E7 3D       0666*                  DW	LIST
003C50 3B 3F       0667*                  DW	LOAD
003C52 36 3F       0668*                  DW	NEW
003C54 49 3F       0669*                  DW	OLD
003C56 6C 3E       0670*                  DW	RENUM
003C58 62 3F       0671*                  DW	SAVE
003C5A             0672*  ;
003C5A             0673*  ;ERROR MESSAGES:
003C5A             0674*  ;
003C5A 17          0675*  ERRWDS:         DB	17H
003C5B 72 6F 6F 6D 0676*                  DB	"room"
003C5F 00          0677*                  DB	0
003C60 16          0678*                  DB	16H
003C61 14          0679*                  DB	14H
003C62 00 00       0680*                  DW	0
003C64 4D 75 6C 74 0681*                  DB	"Multiple label"
       69 70 6C 65 
       20 6C 61 62 
       65 6C       
003C72 00          0682*                  DB	0
003C73 4D 69 73 74 0683*                  DB	"Mistake"
       61 6B 65    
003C7A 00          0684*                  DB	0
003C7B 11          0685*                  DB	11H
003C7C 2C          0686*                  DB	','
003C7D 00          0687*                  DB	0
003C7E 54 79 70 65 0688*                  DB	"Type mismatch"
       20 6D 69 73 
       6D 61 74 63 
       68          
003C8B 00          0689*                  DB	0
003C8C 19          0690*                  DB	19H
003C8D A4          0691*                  DB	TFN
003C8E 00 00       0692*                  DW	0
003C90 11          0693*                  DB	11H
003C91 22          0694*                  DB	'"'
003C92 00          0695*                  DB	0
003C93 13          0696*                  DB	13H
003C94 DE          0697*                  DB	TDIM
003C95 00          0698*                  DB	0
003C96 DE          0699*                  DB	TDIM
003C97 18          0700*                  DB	18H
003C98 00          0701*                  DB	0
003C99 19          0702*                  DB	19H
003C9A A4          0703*                  DB	TFN
003C9B 20 6F 72 20 0704*                  DB	" or "
003C9F F2          0705*                  DB	TPROC
003CA0 00          0706*                  DB	0
003CA1 19          0707*                  DB	19H
003CA2 F2          0708*                  DB	TPROC
003CA3 00          0709*                  DB	0
003CA4 13          0710*                  DB	13H
003CA5 75 73 65 20 0711*                  DB	"use of array"
       6F 66 20 61 
       72 72 61 79 
003CB1 00          0712*                  DB	0
003CB2 13          0713*                  DB	13H
003CB3 73 75 62 73 0714*                  DB	"subscript"
       63 72 69 70 
       74          
003CBC 00          0715*                  DB	0
003CBD 53 79 6E 74 0716*                  DB	"Syntax error"
       61 78 20 65 
       72 72 6F 72 
003CC9 00          0717*                  DB	0
003CCA 45 73 63 61 0718*                  DB	"Escape"
       70 65       
003CD0 00          0719*                  DB	0
003CD1 44 69 76 69 0720*                  DB	"Division by zero"
       73 69 6F 6E 
       20 62 79 20 
       7A 65 72 6F 
003CE1 00          0721*                  DB	0
003CE2 53 74 72 69 0722*                  DB	"String too long"
       6E 67 20 74 
       6F 6F 20 6C 
       6F 6E 67    
003CF1 00          0723*                  DB	0
003CF2 4E 75 6D 62 0724*                  DB	"Number too big"
       65 72 20 74 
       6F 6F 20 62 
       69 67       
003D00 00          0725*                  DB	0
003D01 2D 76 65 20 0726*                  DB	"-ve root"
       72 6F 6F 74 
003D09 00          0727*                  DB	0
003D0A 4C 6F 67    0728*                  DB	"Log"
003D0D 14          0729*                  DB	14H
003D0E 00          0730*                  DB	0
003D0F 41 63 63 75 0731*                  DB	"Accuracy lost"
       72 61 63 79 
       20 6C 6F 73 
       74          
003D1C 00          0732*                  DB	0
003D1D 45 78 70 6F 0733*                  DB	"Exponent"
       6E 65 6E 74 
003D25 14          0734*                  DB	14H
003D26 00 00       0735*                  DW	0
003D28 12          0736*                  DB	12H
003D29 15          0737*                  DB	15H
003D2A 00          0738*                  DB	0
003D2B 11          0739*                  DB	11H
003D2C 29          0740*                  DB	')'
003D2D 00          0741*                  DB	0
003D2E 13          0742*                  DB	13H
003D2F 68 65 78 20 0743*                  DB	"hex or binary"
       6F 72 20 62 
       69 6E 61 72 
       79          
003D3C 00          0744*                  DB	0
003D3D 12          0745*                  DB	12H
003D3E A4          0746*                  DB	TFN
003D3F 2F          0747*                  DB	'/'
003D40 F2          0748*                  DB	TPROC
003D41 00          0749*                  DB	0
003D42 13          0750*                  DB	13H
003D43 63 61 6C 6C 0751*                  DB	"call"
003D47 00          0752*                  DB	0
003D48 13          0753*                  DB	13H
003D49 61 72 67 75 0754*                  DB	"arguments"
       6D 65 6E 74 
       73          
003D52 00          0755*                  DB	0
003D53 19          0756*                  DB	19H
003D54 E3          0757*                  DB	TFOR
003D55 1A          0758*                  DB	1AH
003D56 00          0759*                  DB	0
003D57 43 61 6E 27 0760*                  DB	"Can't match "
       74 20 6D 61 
       74 63 68 20 
003D63 E3          0761*                  DB	TFOR
003D64 00          0762*                  DB	0
003D65 13          0763*                  DB	13H
003D66 E3          0764*                  DB	TFOR
003D67 20          0765*                  DB	' '
003D68 15          0766*                  DB	15H
003D69 00 00       0767*                  DW	0
003D6B 11          0768*                  DB	11H
003D6C B8          0769*                  DB	TTO
003D6D 00 00       0770*                  DW	0
003D6F 17          0771*                  DB	17H
003D70 E4          0772*                  DB	TGOSUB
003D71 00          0773*                  DB	0
003D72 EE          0774*                  DB	TON
003D73 20 73 79 6E 0775*                  DB	" syntax"
       74 61 78    
003D7A 00          0776*                  DB	0
003D7B EE          0777*                  DB	TON
003D7C 14          0778*                  DB	14H
003D7D 00          0779*                  DB	0
003D7E 12          0780*                  DB	12H
003D7F 6C 69 6E 65 0781*                  DB	"line"
003D83 00          0782*                  DB	0
003D84 16          0783*                  DB	16H
003D85 20          0784*                  DB	' '
003D86 DC          0785*                  DB	TDATA
003D87 00          0786*                  DB	0
003D88 19          0787*                  DB	19H
003D89 F5          0788*                  DB	TREPEAT
003D8A 1A          0789*                  DB	1AH
003D8B 00          0790*                  DB	0
003D8C 13          0791*                  DB	13H
003D8D 10          0792*                  DB	TEXIT
003D8E 00          0793*                  DB	0
003D8F 11          0794*                  DB	11H
003D90 23          0795*                  DB	'#'
003D91 00          0796*                  DB	0
003D92 19          0797*                  DB	19H		;46 Not in a WHILE loop
003D93 C7          0798*                  DB	TWHILE
003D94 1A          0799*                  DB	1AH
003D95 00          0800*                  DB	0
003D96 11          0801*                  DB	11H		;47 Missing ENDCASE
003D97 CB          0802*                  DB	TENDCASE
003D98 00          0803*                  DB	0
003D99 CA          0804*                  DB	TOF		;48 OF not last
003D9A 1B          0805*                  DB	1BH
003D9B 6C 61 73 74 0806*                  DB	"last"
003D9F 00          0807*                  DB	0
003DA0 11          0808*                  DB	11H		;49 Missing ENDIF
003DA1 CD          0809*                  DB	TENDIF
003DA2 00          0810*                  DB	0
003DA3 00 00       0811*                  DW	0
003DA5 00          0812*                  DB	0
003DA6 EE          0813*                  DB	TON		;53 ON ERROR not LOCAL
003DA7 20          0814*                  DB	' '
003DA8 85          0815*                  DB	TERROR
003DA9 1B          0816*                  DB	1BH
003DAA EA          0817*                  DB	TLOCAL
003DAB 00          0818*                  DB	0
003DAC DC          0819*                  DB	TDATA		;54 DATA not LOCAL
003DAD 1B          0820*                  DB	1BH
003DAE EA          0821*                  DB	TLOCAL
003DAF 00          0822*                  DB	0
003DB0             0823*  ;
003DB0             0824*  ;Indent tokens (first four needn't be at start of line):
003DB0             0825*  ;
003DB0 E3          0826*  TOKADD:         DB	TFOR
003DB1 F5          0827*                  DB	TREPEAT
003DB2 C7          0828*                  DB	TWHILE
003DB3 C8          0829*                  DB	TCASE
003DB4 8B          0830*                  DB	TELSE
003DB5 C9          0831*                  DB	TWHEN
003DB6 CC          0832*                  DB	TOTHERWISE
003DB7             0833*  LENADD:         EQU	$-TOKADD
003DB7             0834*  ;
003DB7             0835*  ;Outdent tokens (first three needn't be at start of line):
003DB7             0836*  ;
003DB7 ED          0837*  TOKSUB:         DB	TNEXT
003DB8 FD          0838*                  DB	TUNTIL
003DB9 CE          0839*                  DB	TENDWHILE
003DBA CB          0840*                  DB	TENDCASE
003DBB CD          0841*                  DB	TENDIF
003DBC 8B          0842*                  DB	TELSE
003DBD C9          0843*                  DB	TWHEN
003DBE CC          0844*                  DB	TOTHERWISE
003DBF             0845*  LENSUB:         EQU	$-TOKSUB
003DBF             0846*  ;
003DBF             0847*  ;COMMANDS:
003DBF             0848*  ;
003DBF             0849*  ;DELETE line,line
003DBF             0850*  ;
003DBF CD 10 44    0851*  DELETE:         CALL	DLPAIR
003DC2 7E          0852*  DELET1:         LD	A,(HL)
003DC3 B7          0853*                  OR	A
003DC4 28 79       0854*                  JR	Z,WARMNC
003DC6 23          0855*                  INC	HL
003DC7 5E          0856*                  LD	E,(HL)
003DC8 23          0857*                  INC	HL
003DC9 56          0858*                  LD	D,(HL)
003DCA 2B          0859*                  DEC	HL
003DCB 2B          0860*                  DEC	HL
003DCC EB          0861*                  EX	DE,HL
003DCD 37          0862*                  SCF
003DCE ED 42       0863*                  SBC	HL,BC
003DD0 EB          0864*                  EX	DE,HL
003DD1 30 6C       0865*                  JR	NC,WARMNC
003DD3 C5          0866*                  PUSH	BC
003DD4 CD 22 40    0867*                  CALL	DEL
003DD7 C1          0868*                  POP	BC
003DD8 18 E8       0869*                  JR	DELET1
003DDA             0870*  ;
003DDA             0871*  ;LISTO expr
003DDA             0872*  ;
003DDA FD 23       0873*  LISTO:          INC	IY		;SKIP "O"
003DDC CD 6C 18    0874*                  CALL	EXPRI
003DDF D9          0875*                  EXX
003DE0 7D          0876*                  LD	A,L
003DE1 32 FE 54    0877*                  LD	(LISTON),A
003DE4 C3 E9 37    0878*                  JP	CLOOP
003DE7             0879*  ;
003DE7             0880*  ;LIST
003DE7             0881*  ;LIST line
003DE7             0882*  ;LIST line,line [IF string]
003DE7             0883*  ;LIST ,line
003DE7             0884*  ;LIST line,
003DE7             0885*  ;
003DE7 FE 4F       0886*  LIST:           CP	'O'
003DE9 28 EF       0887*                  JR	Z,LISTO
003DEB 0E 01       0888*                  LD	C,1
003DED 11 00 53    0889*                  LD	DE,BUFFER
003DF0 CD 51 44    0890*                  CALL	LEXAN2
003DF3 12          0891*                  LD	(DE),A
003DF4 FD 21 00 53 0892*                  LD	IY,BUFFER
003DF8 CD 10 44    0893*                  CALL	DLPAIR
003DFB CD 44 45    0894*                  CALL	NXT
003DFE FE E7       0895*                  CP	TIF		;IF CLAUSE ?
003E00 3E 00       0896*                  LD	A,0		;INIT IF-CLAUSE LENGTH
003E02 20 15       0897*                  JR	NZ,LISTB
003E04 FD 23       0898*                  INC	IY		;SKIP IF
003E06 CD 44 45    0899*                  CALL	NXT		;SKIP SPACES (IF ANY)
003E09 EB          0900*                  EX	DE,HL
003E0A FD E5       0901*                  PUSH	IY
003E0C E1          0902*                  POP	HL		;HL ADDRESSES IF CLAUSE
003E0D 3E 0D       0903*                  LD	A,CR
003E0F C5          0904*                  PUSH	BC
003E10 01 00 01    0905*                  LD	BC,256
003E13 ED B1       0906*                  CPIR			;LOCATE CR
003E15 79          0907*                  LD	A,C
003E16 2F          0908*                  CPL			;A = SUBSTRING LENGTH
003E17 C1          0909*                  POP	BC
003E18 EB          0910*                  EX	DE,HL
003E19 5F          0911*  LISTB:          LD	E,A		;IF-CLAUSE LENGTH
003E1A 78          0912*                  LD	A,B
003E1B B1          0913*                  OR	C
003E1C 20 01       0914*                  JR	NZ,LISTA
003E1E 0B          0915*                  DEC	BC
003E1F D9          0916*  LISTA:          EXX
003E20 DD 21 FE 54 0917*                  LD	IX,LISTON
003E24 1E 00       0918*                  LD	E,0		;INDENTATION COUNT
003E26 D9          0919*                  EXX
003E27 3E 14       0920*                  LD	A,20
003E29             0921*  ;
003E29 C5          0922*  LISTC:          PUSH	BC		;SAVE HIGH LINE NUMBER
003E2A D5          0923*                  PUSH	DE		;SAVE IF-CLAUSE LENGTH
003E2B E5          0924*                  PUSH	HL		;SAVE PROGRAM POINTER
003E2C 08          0925*                  EX	AF,AF'
003E2D 7E          0926*                  LD	A,(HL)
003E2E B7          0927*                  OR	A
003E2F 28 0E       0928*                  JR	Z,WARMNC
003E31             0929*  ;
003E31             0930*  ;CHECK IF PAST TERMINATING LINE NUMBER:
003E31             0931*  ;
003E31 7B          0932*                  LD	A,E		;A = IF-CLAUSE LENGTH
003E32 23          0933*                  INC	HL
003E33 5E          0934*                  LD	E,(HL)
003E34 23          0935*                  INC	HL
003E35 56          0936*                  LD	D,(HL)		;DE = LINE NUMBER
003E36 2B          0937*                  DEC	HL
003E37 2B          0938*                  DEC	HL
003E38 D5          0939*                  PUSH	DE		;SAVE LINE NUMBER
003E39 EB          0940*                  EX	DE,HL
003E3A 37          0941*                  SCF
003E3B ED 42       0942*                  SBC	HL,BC
003E3D EB          0943*                  EX	DE,HL
003E3E D1          0944*                  POP	DE		;RESTORE LINE NUMBER
003E3F D2 E8 37    0945*  WARMNC:         JP	NC,WARM
003E42 4E          0946*                  LD	C,(HL)		;C = LINE LENGTH + 4
003E43 47          0947*                  LD	B,A		;B = IF-CLAUSE LENGTH
003E44             0948*  ;
003E44             0949*  ;CHECK FOR IF CLAUSE:
003E44             0950*  ;
003E44 23          0951*                  INC	HL
003E45 23          0952*                  INC	HL
003E46 23          0953*                  INC	HL		;HL ADDRESSES LINE TEXT
003E47 0D          0954*                  DEC	C
003E48 0D          0955*                  DEC	C
003E49 0D          0956*                  DEC	C
003E4A 0D          0957*                  DEC	C		;C = LINE LENGTH
003E4B D5          0958*                  PUSH	DE		;SAVE LINE NUMBER
003E4C E5          0959*                  PUSH	HL		;SAVE LINE ADDRESS
003E4D AF          0960*                  XOR	A		;A <- 0
003E4E B8          0961*                  CP	B		;WAS THERE AN IF-CLAUSE
003E4F FD E5       0962*                  PUSH	IY
003E51 D1          0963*                  POP	DE		;DE ADDRESSES IF-CLAUSE
003E52 C4 2B 1E    0964*                  CALL	NZ,SEARCH	;SEARCH FOR IF CLAUSE
003E55 E1          0965*                  POP	HL		;RESTORE LINE ADDRESS
003E56 D1          0966*                  POP	DE		;RESTORE LINE NUMBER
003E57 FD E5       0967*                  PUSH	IY
003E59 CC 96 40    0968*                  CALL	Z,LISTIT	;LIST IF MATCH
003E5C FD E1       0969*                  POP	IY
003E5E             0970*  ;
003E5E 08          0971*                  EX	AF,AF'
003E5F 3D          0972*                  DEC	A
003E60 CD 53 12    0973*                  CALL	LTRAP
003E63 E1          0974*                  POP	HL		;RESTORE POINTER
003E64 5E          0975*                  LD	E,(HL)
003E65 16 00       0976*                  LD	D,0
003E67 19          0977*                  ADD	HL,DE		;ADDRESS NEXT LINE
003E68 D1          0978*                  POP	DE		;RESTORE IF-CLAUSE LEN
003E69 C1          0979*                  POP	BC		;RESTORE HI LINE NUMBER
003E6A 18 BD       0980*                  JR	LISTC
003E6C             0981*  ;
003E6C             0982*  ;RENUMBER
003E6C             0983*  ;RENUMBER start
003E6C             0984*  ;RENUMBER start,increment
003E6C             0985*  ;RENUMBER ,increment
003E6C             0986*  ;
003E6C CD 7C 40    0987*  RENUM:          CALL	CLEAR		;USES DYNAMIC AREA
003E6F CD ED 43    0988*                  CALL	PAIR		;LOAD HL,BC
003E72 D9          0989*                  EXX
003E73 2A DC 54    0990*                  LD	HL,(PAGE_)
003E76 ED 5B DE 54 0991*                  LD	DE,(LOMEM)
003E7A 7E          0992*  RENUM1:         LD	A,(HL)		;BUILD TABLE
003E7B B7          0993*                  OR	A
003E7C 28 28       0994*                  JR	Z,RENUM2
003E7E 23          0995*                  INC	HL
003E7F 4E          0996*                  LD	C,(HL)		;OLD LINE NUMBER
003E80 23          0997*                  INC	HL
003E81 46          0998*                  LD	B,(HL)
003E82 EB          0999*                  EX	DE,HL
003E83 71          1000*                  LD	(HL),C
003E84 23          1001*                  INC	HL
003E85 70          1002*                  LD	(HL),B
003E86 23          1003*                  INC	HL
003E87 D9          1004*                  EXX
003E88 E5          1005*                  PUSH	HL
003E89 09          1006*                  ADD	HL,BC		;ADD INCREMENT
003E8A DA E8 43    1007*                  JP	C,TOOBIGmn	;"Too big"
003E8D D9          1008*                  EXX
003E8E C1          1009*                  POP	BC
003E8F 71          1010*                  LD	(HL),C
003E90 23          1011*                  INC	HL
003E91 70          1012*                  LD	(HL),B
003E92 23          1013*                  INC	HL
003E93 EB          1014*                  EX	DE,HL
003E94 2B          1015*                  DEC	HL
003E95 2B          1016*                  DEC	HL
003E96 AF          1017*                  XOR	A
003E97 47          1018*                  LD	B,A
003E98 4E          1019*                  LD	C,(HL)
003E99 09          1020*                  ADD	HL,BC		;NEXT LINE
003E9A EB          1021*                  EX	DE,HL
003E9B E5          1022*                  PUSH	HL
003E9C 24          1023*                  INC	H
003E9D ED 72       1024*                  SBC	HL,SP
003E9F E1          1025*                  POP	HL
003EA0 EB          1026*                  EX	DE,HL
003EA1 38 D7       1027*                  JR	C,RENUM1	;CONTINUE
003EA3 C3 7D 3F    1028*                  JP	ERROR_		;'No room' (A = 0)
003EA6             1029*  ;
003EA6 EB          1030*  RENUM2:         EX	DE,HL
003EA7 36 FF       1031*                  LD	(HL),-1
003EA9 23          1032*                  INC	HL
003EAA 36 FF       1033*                  LD	(HL),-1
003EAC ED 5B DE 54 1034*                  LD	DE,(LOMEM)
003EB0 D9          1035*                  EXX
003EB1 2A DC 54    1036*                  LD	HL,(PAGE_)
003EB4 4E          1037*  RENUM3:         LD	C,(HL)
003EB5 79          1038*                  LD	A,C
003EB6 B7          1039*                  OR	A
003EB7 28 86       1040*                  JR	Z,WARMNC
003EB9 D9          1041*                  EXX
003EBA EB          1042*                  EX	DE,HL
003EBB 23          1043*                  INC	HL
003EBC 23          1044*                  INC	HL
003EBD 5E          1045*                  LD	E,(HL)
003EBE 23          1046*                  INC	HL
003EBF 56          1047*                  LD	D,(HL)
003EC0 23          1048*                  INC	HL
003EC1 D5          1049*                  PUSH	DE
003EC2 EB          1050*                  EX	DE,HL
003EC3 D9          1051*                  EXX
003EC4 D1          1052*                  POP	DE
003EC5 23          1053*                  INC	HL
003EC6 73          1054*                  LD	(HL),E		;NEW LINE NUMBER
003EC7 23          1055*                  INC	HL
003EC8 72          1056*                  LD	(HL),D
003EC9 23          1057*                  INC	HL
003ECA 0D          1058*                  DEC	C
003ECB 0D          1059*                  DEC	C
003ECC 0D          1060*                  DEC	C
003ECD 06 00       1061*                  LD	B,0
003ECF 3E 8D       1062*  RENUM7:         LD	A,TLINO
003ED1 ED B1       1063*                  CPIR			;SEARCH FOR LINE NUMBER
003ED3 20 DF       1064*                  JR	NZ,RENUM3
003ED5 C5          1065*                  PUSH	BC
003ED6 E5          1066*                  PUSH	HL
003ED7 E5          1067*                  PUSH	HL
003ED8 FD E1       1068*                  POP	IY
003EDA D9          1069*                  EXX
003EDB E5          1070*                  PUSH	HL
003EDC CD 99 1F    1071*                  CALL	DECODE		;DECODE LINE NUMBER
003EDF E1          1072*                  POP	HL
003EE0 D9          1073*                  EXX
003EE1 44          1074*                  LD	B,H
003EE2 4D          1075*                  LD	C,L
003EE3 2A DE 54    1076*                  LD	HL,(LOMEM)
003EE6 5E          1077*  RENUM4:         LD	E,(HL)		;CROSS-REFERENCE TABLE
003EE7 23          1078*                  INC	HL
003EE8 56          1079*                  LD	D,(HL)
003EE9 23          1080*                  INC	HL
003EEA EB          1081*                  EX	DE,HL
003EEB B7          1082*                  OR	A		;CLEAR CARRY
003EEC ED 42       1083*                  SBC	HL,BC
003EEE EB          1084*                  EX	DE,HL
003EEF 5E          1085*                  LD	E,(HL)		;NEW NUMBER
003EF0 23          1086*                  INC	HL
003EF1 56          1087*                  LD	D,(HL)
003EF2 23          1088*                  INC	HL
003EF3 38 F1       1089*                  JR	C,RENUM4
003EF5 EB          1090*                  EX	DE,HL
003EF6 28 1A       1091*                  JR	Z,RENUM5	;FOUND
003EF8 CD 33 45    1092*                  CALL	TELL
003EFB 46 61 69 6C 1093*                  DB	"Failed at "
       65 64 20 61 
       74 20       
003F05 00          1094*                  DB	0
003F06 D9          1095*                  EXX
003F07 E5          1096*                  PUSH	HL
003F08 D9          1097*                  EXX
003F09 E1          1098*                  POP	HL
003F0A CD CB 41    1099*                  CALL	PBCDL
003F0D CD 34 41    1100*                  CALL	CRLF
003F10 18 06       1101*                  JR	RENUM6
003F12 D1          1102*  RENUM5:         POP	DE
003F13 D5          1103*                  PUSH	DE
003F14 1B          1104*                  DEC	DE
003F15 CD F8 44    1105*                  CALL	ENCODE		;RE-WRITE NUMBER
003F18 E1          1106*  RENUM6:         POP	HL
003F19 C1          1107*                  POP	BC
003F1A 18 B3       1108*                  JR	RENUM7
003F1C             1109*  ;
003F1C             1110*  ;AUTO
003F1C             1111*  ;AUTO start,increment
003F1C             1112*  ;AUTO start
003F1C             1113*  ;AUTO ,increment
003F1C             1114*  ;
003F1C CD ED 43    1115*  AUTO:           CALL	PAIR
003F1F 22 E8 54    1116*                  LD	(AUTONO),HL
003F22 79          1117*                  LD	A,C
003F23 32 FF 54    1118*                  LD	(INCREM),A
003F26 18 37       1119*                  JR	CLOOP0
003F28             1120*  ;
003F28             1121*  ;BAD
003F28             1122*  ;NEW
003F28             1123*  ;
003F28 CD 33 45    1124*  BAD:            CALL	TELL		;"Bad program'
003F2B 13          1125*                  DB	13H
003F2C 70 72 6F 67 1126*                  DB	"program"
       72 61 6D    
003F33 0D          1127*                  DB	CR
003F34 0A          1128*                  DB	LF
003F35 00          1129*                  DB	0
003F36 CD 77 40    1130*  NEW:            CALL	NEWIT
003F39 18 24       1131*                  JR	CLOOP0
003F3B             1132*  ;
003F3B             1133*  ;LOAD filename
003F3B             1134*  ;
003F3B CD 75 18    1135*  LOAD:           CALL	EXPRS		;GET FILENAME
003F3E 3E 0D       1136*                  LD	A,CR
003F40 12          1137*                  LD	(DE),A
003F41 CD 39 40    1138*                  CALL	LOAD0
003F44 CD 7C 40    1139*                  CALL	CLEAR
003F47 18 31       1140*                  JR	WARM0
003F49             1141*  ;
003F49             1142*  ;OLD
003F49             1143*  ;
003F49 2A DC 54    1144*  OLD:            LD	HL,(PAGE_)
003F4C E5          1145*                  PUSH	HL
003F4D 23          1146*                  INC	HL
003F4E 23          1147*                  INC	HL
003F4F 23          1148*                  INC	HL
003F50 01 FC 00    1149*                  LD	BC,252
003F53 3E 0D       1150*                  LD	A,CR
003F55 ED B1       1151*                  CPIR
003F57 20 CF       1152*                  JR	NZ,BAD
003F59 7D          1153*                  LD	A,L
003F5A E1          1154*                  POP	HL
003F5B 77          1155*                  LD	(HL),A
003F5C CD 53 40    1156*                  CALL	CLEAN
003F5F C3 E9 37    1157*  CLOOP0:         JP	CLOOP
003F62             1158*  ;
003F62             1159*  ;SAVE filename
003F62             1160*  ;
003F62 CD 75 18    1161*  SAVE:           CALL	EXPRS		;FILENAME
003F65 3E 0D       1162*                  LD	A,CR
003F67 12          1163*                  LD	(DE),A
003F68 ED 5B DC 54 1164*                  LD	DE,(PAGE_)
003F6C CD 5E 40    1165*                  CALL	GETTOP
003F6F B7          1166*                  OR	A
003F70 ED 52       1167*                  SBC	HL,DE
003F72 44          1168*                  LD	B,H		;LENGTH OF PROGRAM
003F73 4D          1169*                  LD	C,L
003F74 21 00 52    1170*                  LD	HL,ACCS
003F77 CD DF 13    1171*                  CALL	OSSAVE
003F7A C3 E8 37    1172*  WARM0:          JP	WARM
003F7D             1173*  ;
003F7D             1174*  ;ERROR
003F7D             1175*  ;N.B. CARE NEEDED BECAUSE SP MAY NOT BE VALID (E.G. ABOVE HIMEM)
003F7D             1176*  ;
003F7D 21 5A 3C    1177*  ERROR_:         LD	HL,ERRWDS
003F80 4F          1178*                  LD	C,A
003F81 B7          1179*                  OR	A
003F82 28 0C       1180*                  JR	Z,ERROR1
003F84 47          1181*                  LD	B,A		;ERROR NUMBER
003F85 AF          1182*                  XOR	A
003F86 BE          1183*  ERROR0:         CP	(HL)
003F87 23          1184*                  INC	HL
003F88 20 FC       1185*                  JR	NZ,ERROR0
003F8A 10 FA       1186*                  DJNZ	ERROR0
003F8C 18 02       1187*                  JR	ERROR1		;MUST NOT PUSH HL HERE
003F8E             1188*  ;
003F8E E1          1189*  EXTERR:         POP	HL
003F8F 4F          1190*                  LD	C,A
003F90 22 EE 54    1191*  ERROR1:         LD	(ERRTXT),HL
003F93 2A EC 54    1192*                  LD	HL,(ONERSP)
003F96 7C          1193*                  LD	A,H
003F97 B5          1194*                  OR	L
003F98 ED 7B E2 54 1195*                  LD	SP,(HIMEM)	;MUST SET SP BEFORE 'CALL'
003F9C 28 01       1196*                  JR	Z,ERROR4
003F9E F9          1197*                  LD	SP,HL
003F9F 79          1198*  ERROR4:         LD	A,C		;ERROR NUMBER
003FA0 CD 94 41    1199*                  CALL	SETLIN		;SP IS SET NOW
003FA3 32 FD 54    1200*                  LD	(ERR),A
003FA6 22 F2 54    1201*                  LD	(ERL),HL
003FA9 B7          1202*                  OR	A
003FAA 28 0B       1203*                  JR	Z,ERROR2	;'FATAL' ERROR
003FAC 2A EA 54    1204*                  LD	HL,(ERRTRP)
003FAF 7C          1205*                  LD	A,H
003FB0 B5          1206*                  OR	L
003FB1 E5          1207*                  PUSH	HL
003FB2 FD E1       1208*                  POP	IY
003FB4 C2 D2 24    1209*                  JP	NZ,XEQ		;ERROR TRAPPED
003FB7 ED 7B E2 54 1210*  ERROR2:         LD	SP,(HIMEM)
003FBB ED 62       1211*                  SBC	HL,HL
003FBD 22 E8 54    1212*                  LD	(AUTONO),HL
003FC0 22 E6 54    1213*                  LD	(TRACEN),HL	;CANCEL TRACE
003FC3 CD 60 12    1214*                  CALL	RESET		;RESET OPSYS
003FC6 CD 34 41    1215*                  CALL	CRLF
003FC9 CD 1E 45    1216*                  CALL	REPORT		;MESSAGE
003FCC 2A F2 54    1217*                  LD	HL,(ERL)
003FCF CD BB 41    1218*                  CALL	SAYLN
003FD2 1E 00       1219*                  LD	E,0
003FD4 DC 70 12    1220*                  CALL	C,OSSHUT	;CLOSE ALL FILES
003FD7 CD 34 41    1221*                  CALL	CRLF
003FDA 18 83       1222*                  JR	CLOOP0
003FDC             1223*  ;
003FDC             1224*  ;SUBROUTINES:
003FDC             1225*  ;
003FDC             1226*  ;
003FDC             1227*  ;LEX - SEARCH FOR KEYWORDS
003FDC             1228*  ;   Inputs: HL = start of keyword table
003FDC             1229*  ;           IY = start of match text
003FDC             1230*  ;  Outputs: If found, Z-flag set, A=token.
003FDC             1231*  ;           If not found, Z-flag reset, A=(IY).
003FDC             1232*  ;           IY updated (if NZ, IY unchanged).
003FDC             1233*  ; Destroys: A,B,H,L,IY,F
003FDC             1234*  ;
003FDC 21 BD 38    1235*  LEX:            LD	HL,KEYWDS
003FDF FD 7E 00    1236*  LEX0:           LD	A,(IY)
003FE2 46          1237*                  LD	B,(HL)
003FE3 23          1238*                  INC	HL
003FE4 BE          1239*                  CP	(HL)
003FE5 28 0A       1240*                  JR	Z,LEX2
003FE7 D8          1241*                  RET	C		;FAIL EXIT
003FE8 23          1242*  LEX1:           INC	HL
003FE9 7E          1243*                  LD	A,(HL)
003FEA FE A0       1244*                  CP	160
003FEC EA E8 3F    1245*                  JP	PE,LEX1
003FEF 18 EE       1246*                  JR	LEX0
003FF1             1247*  ;
003FF1 FD E5       1248*  LEX2:           PUSH	IY		;SAVE POINTER
003FF3 23          1249*  LEX3:           INC	HL
003FF4 7E          1250*                  LD	A,(HL)
003FF5 FE A0       1251*                  CP	160
003FF7 E2 1E 40    1252*                  JP	PO,LEX6		;FOUND
003FFA FD 23       1253*                  INC	IY
003FFC FD 7E 00    1254*                  LD	A,(IY)
003FFF BE          1255*                  CP	(HL)
004000 20 05       1256*                  JR	NZ,LEX7
004002 FE A1       1257*                  CP	161
004004 EA F3 3F    1258*                  JP	PE,LEX3
004007 FD 7E 00    1259*  LEX7:           LD	A,(IY)
00400A FE 2E       1260*                  CP	'.'
00400C 28 10       1261*                  JR	Z,LEX6		;FOUND (ABBREV.)
00400E CD 35 44    1262*                  CALL	RANGE1
004011 38 04       1263*                  JR	C,LEX5
004013 FD E1       1264*  LEX4:           POP	IY		;RESTORE POINTER
004015 18 D1       1265*                  JR	LEX1
004017             1266*  ;
004017 7E          1267*  LEX5:           LD	A,(HL)
004018 FE 20       1268*                  CP	' '
00401A 20 F7       1269*                  JR	NZ,LEX4
00401C FD 2B       1270*                  DEC	IY
00401E F1          1271*  LEX6:           POP	AF
00401F AF          1272*                  XOR	A
004020 78          1273*                  LD	A,B
004021 C9          1274*                  RET
004022             1275*  ;
004022             1276*  ;DEL - DELETE A PROGRAM LINE.
004022             1277*  ;   Inputs: HL addresses program line.
004022             1278*  ; Destroys: B,C,F
004022             1279*  ;
004022 D5          1280*  DEL:            PUSH	DE
004023 E5          1281*                  PUSH	HL
004024 E5          1282*                  PUSH	HL
004025 06 00       1283*                  LD	B,0
004027 4E          1284*                  LD	C,(HL)
004028 09          1285*                  ADD	HL,BC
004029 E5          1286*                  PUSH	HL
00402A EB          1287*                  EX	DE,HL
00402B CD 5E 40    1288*                  CALL	GETTOP
00402E ED 52       1289*                  SBC	HL,DE
004030 44          1290*                  LD	B,H
004031 4D          1291*                  LD	C,L
004032 E1          1292*                  POP	HL
004033 D1          1293*                  POP	DE
004034 ED B0       1294*                  LDIR			;DELETE LINE
004036 E1          1295*                  POP	HL
004037 D1          1296*                  POP	DE
004038 C9          1297*                  RET
004039             1298*  ;
004039             1299*  ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
004039             1300*  ;   Inputs: Filename in ACCS (term CR)
004039             1301*  ; Destroys: A,B,C,D,E,H,L,F
004039             1302*  ;
004039             1303*  ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
004039             1304*  ; AND WRITE FF FF.
004039             1305*  ; Destroys: A,B,C,H,L,F
004039             1306*  ;
004039 ED 5B DC 54 1307*  LOAD0:          LD	DE,(PAGE_)
00403D 21 00 FF    1308*                  LD	HL,-256
004040 39          1309*                  ADD	HL,SP
004041 ED 52       1310*                  SBC	HL,DE		;FIND AVAILABLE SPACE
004043 44          1311*                  LD	B,H
004044 4D          1312*                  LD	C,L
004045 21 00 52    1313*                  LD	HL,ACCS
004048 CD E9 12    1314*                  CALL	OSLOAD		;LOAD
00404B D4 77 40    1315*                  CALL	NC,NEWIT
00404E 3E 00       1316*                  LD	A,0
004050 D2 7D 3F    1317*                  JP	NC,ERROR_	;"No room"
004053 CD 5E 40    1318*  CLEAN:          CALL	GETTOP
004056 2B          1319*                  DEC	HL
004057 36 FF       1320*                  LD	(HL),-1		;WRITE &FFFF
004059 2B          1321*                  DEC	HL
00405A 36 FF       1322*                  LD	(HL),-1
00405C 18 1E       1323*                  JR	CLEAR
00405E             1324*  ;
00405E 2A DC 54    1325*  GETTOP:         LD	HL,(PAGE_)
004061 06 00       1326*                  LD	B,0
004063 3E 0D       1327*                  LD	A,CR
004065 4E          1328*  GETOP1:         LD	C,(HL)
004066 0C          1329*                  INC	C
004067 0D          1330*                  DEC	C
004068 28 09       1331*                  JR	Z,GETOP2
00406A 09          1332*                  ADD	HL,BC
00406B 2B          1333*                  DEC	HL
00406C BE          1334*                  CP	(HL)
00406D 23          1335*                  INC	HL
00406E 28 F5       1336*                  JR	Z,GETOP1
004070 C3 28 3F    1337*                  JP	BAD
004073 23          1338*  GETOP2:         INC	HL		;N.B. CALLED FROM NEWIT
004074 23          1339*                  INC	HL
004075 23          1340*                  INC	HL
004076 C9          1341*                  RET
004077             1342*  ;
004077             1343*  ;NEWIT - NEW PROGRAM THEN CLEAR
004077             1344*  ;   Destroys: H,L
004077             1345*  ;
004077             1346*  ;CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
004077             1347*  ; FUNCTION AND PROCEDURE POINTERS.
004077             1348*  ;   Destroys: Nothing
004077             1349*  ;
004077 2A DC 54    1350*  NEWIT:          LD	HL,(PAGE_)
00407A 36 00       1351*                  LD	(HL),0
00407C E5          1352*  CLEAR:          PUSH	HL
00407D C5          1353*                  PUSH	BC
00407E F5          1354*                  PUSH	AF
00407F CD 5E 40    1355*                  CALL	GETTOP
004082 22 DE 54    1356*                  LD	(LOMEM),HL
004085 22 E0 54    1357*                  LD	(FREE),HL
004088 21 6C 54    1358*                  LD	HL,DYNVAR
00408B             1359*                  ; LD	B,2*(54+2)
00408B 06 70       1360*                  LD	B,54+2*2
00408D 36 00       1361*  CLEAR1:         LD	(HL),0
00408F 23          1362*                  INC	HL
004090 10 FB       1363*                  DJNZ	CLEAR1
004092 F1          1364*                  POP	AF
004093 C1          1365*                  POP	BC
004094 E1          1366*                  POP	HL
004095 C9          1367*                  RET
004096             1368*  ;
004096             1369*  ;LISTIT - LIST A PROGRAM LINE.
004096             1370*  ;    Inputs: HL addresses line
004096             1371*  ;            DE = line number (binary)
004096             1372*  ;	     E' = indentation count
004096             1373*  ;            IX addresses LISTON
004096             1374*  ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
004096             1375*  ;
004096 E5          1376*  LISTIT:         PUSH	HL
004097 EB          1377*                  EX	DE,HL
004098 C5          1378*                  PUSH	BC
004099 CD CF 41    1379*                  CALL	PBCD
00409C C1          1380*                  POP	BC
00409D E1          1381*                  POP	HL
00409E 7E          1382*                  LD	A,(HL)
00409F D9          1383*                  EXX
0040A0 21 B7 3D    1384*                  LD	HL,TOKSUB
0040A3 01 08 00    1385*                  LD	BC,LENSUB
0040A6 ED B1       1386*                  CPIR
0040A8 CC 2E 41    1387*                  CALL	Z,INDSUB
0040AB FE CB       1388*                  CP	TENDCASE
0040AD CC 2E 41    1389*                  CALL	Z,INDSUB
0040B0 3E 20       1390*                  LD	A,' '
0040B2 DD CB 00 46 1391*                  BIT	0,(IX)
0040B6 C4 3B 41    1392*                  CALL	NZ,OUTCHR
0040B9 7B          1393*                  LD	A,E
0040BA 87          1394*                  ADD	A,A
0040BB DD CB 00 4E 1395*                  BIT	1,(IX)
0040BF C4 DC 35    1396*                  CALL	NZ,SPACES
0040C2 D9          1397*                  EXX
0040C3 7E          1398*                  LD	A,(HL)
0040C4 1E 00       1399*                  LD	E,0
0040C6 D9          1400*                  EXX
0040C7 01 07 00    1401*                  LD	BC,LENADD
0040CA 21 B0 3D    1402*  LIST5:          LD	HL,TOKADD
0040CD ED B1       1403*                  CPIR
0040CF CC 32 41    1404*                  CALL	Z,INDADD
0040D2 FE C8       1405*                  CP	TCASE
0040D4 CC 32 41    1406*                  CALL	Z,INDADD
0040D7 D9          1407*                  EXX
0040D8 7E          1408*  LIST8:          LD	A,(HL)
0040D9 23          1409*                  INC	HL
0040DA FE 0D       1410*                  CP	CR
0040DC 28 25       1411*                  JR	Z,LIST9
0040DE 57          1412*                  LD	D,A
0040DF FE 10       1413*                  CP	TEXIT
0040E1 20 02       1414*                  JR	NZ,LIST6
0040E3 CB FB       1415*                  SET	7,E
0040E5 FE 22       1416*  LIST6:          CP	'"'
0040E7 20 01       1417*                  JR	NZ,LIST7
0040E9 1C          1418*                  INC	E
0040EA CD 22 41    1419*  LIST7:          CALL	LOUT
0040ED 7B          1420*                  LD	A,E
0040EE E6 81       1421*                  AND	81H
0040F0 20 E6       1422*                  JR	NZ,LIST8
0040F2 7E          1423*                  LD	A,(HL)
0040F3 D9          1424*                  EXX
0040F4 21 B7 3D    1425*                  LD	HL,TOKSUB
0040F7 01 03 00    1426*                  LD	BC,3
0040FA ED B1       1427*                  CPIR
0040FC CC 2E 41    1428*                  CALL	Z,INDSUB
0040FF 0E 04       1429*                  LD	C,4
004101 18 C7       1430*                  JR	LIST5
004103             1431*  ;
004103 7A          1432*  LIST9:          LD	A,D
004104 FE 8C       1433*                  CP	TTHEN
004106 D9          1434*                  EXX
004107 CC 32 41    1435*                  CALL	Z,INDADD
00410A D9          1436*                  EXX
00410B 18 27       1437*                  JR	CRLF
00410D             1438*  ;
00410D E5          1439*  PRLINO:         PUSH	HL
00410E FD E1       1440*                  POP	IY
004110 C5          1441*                  PUSH	BC
004111 CD 99 1F    1442*                  CALL	DECODE
004114 C1          1443*                  POP	BC
004115 D9          1444*                  EXX
004116 C5          1445*                  PUSH	BC
004117 D5          1446*                  PUSH	DE
004118 CD CB 41    1447*                  CALL	PBCDL
00411B D1          1448*                  POP	DE
00411C C1          1449*                  POP	BC
00411D D9          1450*                  EXX
00411E FD E5       1451*                  PUSH	IY
004120 E1          1452*                  POP	HL
004121 C9          1453*                  RET
004122             1454*  ;
004122 CB 43       1455*  LOUT:           BIT	0,E
004124 20 15       1456*                  JR	NZ,OUTCHR
004126 FE 8D       1457*                  CP	TLINO
004128 28 E3       1458*                  JR	Z,PRLINO
00412A CD 54 41    1459*                  CALL	OUT
00412D C9          1460*                  RET
00412E             1461*  ;
00412E 1D          1462*  INDSUB:         DEC	E
00412F F2 33 41    1463*                  JP	P,INDRET
004132 1C          1464*  INDADD:         INC	E
004133 C9          1465*  INDRET:         RET
004134             1466*  ;
004134             1467*  ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
004134             1468*  ;  Destroys: A,F
004134             1469*  ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
004134             1470*  ;    Inputs: A = character
004134             1471*  ;  Destroys: A,F
004134             1472*  ;
004134 3E 0D       1473*  CRLF:           LD	A,CR
004136 CD 3B 41    1474*                  CALL	OUTCHR
004139 3E 0A       1475*                  LD	A,LF
00413B CD CE 11    1476*  OUTCHR:         CALL	OSWRCH
00413E D6 0D       1477*                  SUB	CR
004140 28 05       1478*                  JR	Z,CARRET
004142 D8          1479*                  RET	C		;NON-PRINTING
004143 3A FB 54    1480*                  LD	A,(COUNT)
004146 3C          1481*                  INC	A
004147 32 FB 54    1482*  CARRET:         LD	(COUNT),A
00414A C8          1483*                  RET	Z
00414B E5          1484*                  PUSH	HL
00414C 2A FC 54    1485*                  LD	HL,(WIDTH)
00414F BD          1486*                  CP	L
004150 E1          1487*                  POP	HL
004151 C0          1488*                  RET	NZ
004152 18 E0       1489*                  JR	CRLF
004154             1490*  ;
004154             1491*  ;OUT - SEND CHARACTER OR KEYWORD
004154             1492*  ;   Inputs: A = character (>=10, <128)
004154             1493*  ;           A = Token (<10, >=128)
004154             1494*  ;  Destroys: A,F
004154             1495*  ;
004154 FE A0       1496*  OUT:            CP	160
004156 EA 3B 41    1497*                  JP	PE,OUTCHR
004159 C5          1498*                  PUSH	BC
00415A E5          1499*                  PUSH	HL
00415B 21 BD 38    1500*                  LD	HL,KEYWDS
00415E 01 5B 03    1501*                  LD	BC,KEYWDL
004161 ED B1       1502*                  CPIR
004163 C4 3B 41    1503*                  CALL	NZ,OUTCHR
004166 06 A0       1504*                  LD	B,160
004168 FE 91       1505*                  CP	145
00416A EA 6E 41    1506*                  JP	PE,TOKEN1
00416D 04          1507*                  INC	B
00416E 7E          1508*  TOKEN1:         LD	A,(HL)
00416F 23          1509*                  INC	HL
004170 B8          1510*                  CP	B
004171 F5          1511*                  PUSH	AF
004172 EC 3B 41    1512*                  CALL	PE,OUTCHR
004175 F1          1513*                  POP	AF
004176 EA 6E 41    1514*                  JP	PE,TOKEN1
004179 E1          1515*                  POP	HL
00417A C1          1516*                  POP	BC
00417B C9          1517*                  RET
00417C             1518*  ;
00417C             1519*  ;FINDL - FIND PROGRAM LINE.
00417C             1520*  ;   Inputs: HL = line number (binary)
00417C             1521*  ;  Outputs: HL addresses line (if found)
00417C             1522*  ;           DE = line number
00417C             1523*  ;           Z-flag set if found.
00417C             1524*  ; Destroys: A,B,C,D,E,H,L,F
00417C             1525*  ;
00417C EB          1526*  FINDL:          EX	DE,HL
00417D 2A DC 54    1527*                  LD	HL,(PAGE_)
004180 AF          1528*                  XOR	A		;A=0
004181 BE          1529*                  CP	(HL)
004182 3C          1530*                  INC	A
004183 D0          1531*                  RET	NC
004184 AF          1532*                  XOR	A		;CLEAR CARRY
004185 47          1533*                  LD	B,A
004186 4E          1534*  FINDL1:         LD	C,(HL)
004187 E5          1535*                  PUSH	HL
004188 23          1536*                  INC	HL
004189 7E          1537*                  LD	A,(HL)
00418A 23          1538*                  INC	HL
00418B 66          1539*                  LD	H,(HL)
00418C 6F          1540*                  LD	L,A
00418D ED 52       1541*                  SBC	HL,DE
00418F E1          1542*                  POP	HL
004190 D0          1543*                  RET	NC		;FOUND | PAST
004191 09          1544*                  ADD	HL,BC
004192 18 F2       1545*                  JR	FINDL1
004194             1546*  ;
004194             1547*  ;SETLIN - Search program for line containing address.
004194             1548*  ;   Inputs: Address in (CURLIN)
004194             1549*  ;  Outputs: Line number in HL
004194             1550*  ; Destroys: B,C,D,E,H,L,F
004194             1551*  ;
004194 06 00       1552*  SETLIN:         LD	B,0
004196 ED 5B F4 54 1553*                  LD	DE,(CURLIN)
00419A 2A DC 54    1554*                  LD	HL,(PAGE_)
00419D B7          1555*                  OR	A
00419E ED 52       1556*                  SBC	HL,DE
0041A0 19          1557*                  ADD	HL,DE
0041A1 30 13       1558*                  JR	NC,SET3
0041A3 4E          1559*  SET1:           LD	C,(HL)
0041A4 0C          1560*                  INC	C
0041A5 0D          1561*                  DEC	C
0041A6 28 0E       1562*                  JR	Z,SET3
0041A8 09          1563*                  ADD	HL,BC
0041A9 ED 52       1564*                  SBC	HL,DE
0041AB 19          1565*                  ADD	HL,DE
0041AC 38 F5       1566*                  JR	C,SET1
0041AE ED 42       1567*                  SBC	HL,BC
0041B0 23          1568*                  INC	HL
0041B1 5E          1569*                  LD	E,(HL)		;LINE NUMBER
0041B2 23          1570*                  INC	HL
0041B3 56          1571*                  LD	D,(HL)
0041B4 EB          1572*                  EX	DE,HL
0041B5 C9          1573*  SET2:           RET
0041B6             1574*  ;
0041B6 21 00 00    1575*  SET3:           LD	HL,0
0041B9 18 FA       1576*                  JR	SET2
0041BB             1577*  ;
0041BB             1578*  ;SAYLN - PRINT " at line nnnn" MESSAGE.
0041BB             1579*  ;   Inputs: HL = line number
0041BB             1580*  ;  Outputs: Carry=0 if line number is zero.
0041BB             1581*  ;           Carry=1 if line number is non-zero.
0041BB             1582*  ; Destroys: A,B,C,D,E,H,L,F
0041BB             1583*  ;
0041BB 7C          1584*  SAYLN:          LD	A,H
0041BC B5          1585*                  OR	L
0041BD C8          1586*                  RET	Z
0041BE CD 33 45    1587*                  CALL	TELL
0041C1 20 61 74 20 1588*                  DB	" at line "
       6C 69 6E 65 
       20          
0041CA 00          1589*                  DB	0
0041CB 0E 00       1590*  PBCDL:          LD	C,0
0041CD 18 02       1591*                  JR	PBCD0
0041CF             1592*  ;
0041CF             1593*  ;PBCD - PRINT NUMBER AS DECIMAL INTEGER.
0041CF             1594*  ;   Inputs: HL = number (binary).
0041CF             1595*  ;  Outputs: Carry = 1
0041CF             1596*  ; Destroys: A,B,C,D,E,H,L,F
0041CF             1597*  ;
0041CF 0E 20       1598*  PBCD:           LD	C,' '
0041D1 06 05       1599*  PBCD0:          LD	B,5
0041D3 11 10 27    1600*                  LD	DE,10000
0041D6 AF          1601*  PBCD1:          XOR	A
0041D7 ED 52       1602*  PBCD2:          SBC	HL,DE
0041D9 3C          1603*                  INC	A
0041DA 30 FB       1604*                  JR	NC,PBCD2
0041DC 19          1605*                  ADD	HL,DE
0041DD 3D          1606*                  DEC	A
0041DE 28 04       1607*                  JR	Z,PBCD3
0041E0 CB E1       1608*                  SET	4,C
0041E2 CB E9       1609*                  SET	5,C
0041E4 B1          1610*  PBCD3:          OR	C
0041E5 C4 3B 41    1611*                  CALL	NZ,OUTCHR
0041E8 78          1612*                  LD	A,B
0041E9 FE 05       1613*                  CP	5
0041EB 28 06       1614*                  JR	Z,PBCD4
0041ED 29          1615*                  ADD	HL,HL
0041EE 54          1616*                  LD	D,H
0041EF 5D          1617*                  LD	E,L
0041F0 29          1618*                  ADD	HL,HL
0041F1 29          1619*                  ADD	HL,HL
0041F2 19          1620*                  ADD	HL,DE
0041F3 11 E8 03    1621*  PBCD4:          LD	DE,1000
0041F6 10 DE       1622*                  DJNZ	PBCD1
0041F8 37          1623*                  SCF
0041F9 C9          1624*                  RET
0041FA             1625*  ;
0041FA             1626*  ;HANDLE WHOLE ARRAY:
0041FA             1627*  ;
0041FA FD 23       1628*  GETV1:          INC	IY
0041FC FD 23       1629*                  INC	IY		;SKIP ()
0041FE E5          1630*                  PUSH	HL		;SET EXIT CONDITIONS
0041FF DD E1       1631*                  POP	IX
004201 7A          1632*                  LD	A,D
004202 F6 40       1633*                  OR	64		;FLAG ARRAY
004204 BF          1634*                  CP	A
004205 C9          1635*                  RET
004206             1636*  ;
004206             1637*  ;PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
004206             1638*  ;   Inputs: HL, IY as returned from GETVAR (NZ).
004206             1639*  ;  Outputs: As GETVAR.
004206             1640*  ; Destroys: everything
004206             1641*  ;
004206 CD 75 43    1642*  PUTVAR:         CALL	CREATE
004209 FD 7E 00    1643*                  LD	A,(IY)
00420C FE 28       1644*                  CP	'('
00420E 20 7D       1645*                  JR	NZ,GETVZ	;SET EXIT CONDITIONS
004210 FD 7E 01    1646*                  LD	A,(IY+1)
004213 FE 29       1647*                  CP	')'		;WHOLE ARRAY?
004215 28 E3       1648*                  JR	Z,GETV1
004217 3E 0E       1649*  ARRAY:          LD	A,14		;'Bad use of array'
004219 C3 7D 3F    1650*  ERROR3:         JP	ERROR_
00421C             1651*  ;
00421C             1652*  ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
00421C             1653*  ;   Inputs: IY addresses first character.
00421C             1654*  ;  Outputs: Carry set and NZ if illegal character.
00421C             1655*  ;           Z-flag set if variable found, then:
00421C             1656*  ;            A = variable type (0,4,5,128 or 129)
00421C             1657*  ;                (68,69 or 193 for whole array)
00421C             1658*  ;            HL = IX = variable pointer.
00421C             1659*  ;            IY updated
00421C             1660*  ;           If Z-flag & carry reset, then:
00421C             1661*  ;            HL, IY set for subsequent PUTVAR call.
00421C             1662*  ; Destroys: everything
00421C             1663*  ;
00421C FD 7E 00    1664*  GETVAR:         LD	A,(IY)
00421F FE 21       1665*                  CP	'!'
004221 28 76       1666*                  JR	Z,GETV5
004223 FE 3F       1667*                  CP	'?'
004225 28 76       1668*                  JR	Z,GETV6
004227 FE 7C       1669*                  CP	'|'
004229 28 75       1670*                  JR	Z,GETVF
00422B FE 24       1671*                  CP	'$'
00422D 28 75       1672*                  JR	Z,GETV4
00422F CD E9 42    1673*                  CALL	LOCATE
004232 C0          1674*                  RET	NZ
004233 FD 7E 00    1675*                  LD	A,(IY)
004236 FE 28       1676*                  CP	'('		;ARRAY?
004238 20 4B       1677*                  JR	NZ,GETVX	;EXIT
00423A FD 7E 01    1678*                  LD	A,(IY+1)
00423D FE 29       1679*                  CP	')'		;WHOLE ARRAY?
00423F 28 B9       1680*                  JR	Z,GETV1
004241 D5          1681*                  PUSH	DE		;SAVE TYPE
004242 7E          1682*                  LD	A,(HL)
004243 23          1683*                  INC	HL
004244 66          1684*                  LD	H,(HL)
004245 6F          1685*                  LD	L,A		;INDIRECT LINK
004246 E6 FE       1686*                  AND	0FEH
004248 B4          1687*                  OR	H
004249 28 CC       1688*                  JR	Z,ARRAY
00424B 7E          1689*                  LD	A,(HL)		;NO. OF DIMENSIONS
00424C B7          1690*                  OR	A
00424D 28 C8       1691*                  JR	Z,ARRAY
00424F 23          1692*                  INC	HL
004250 11 00 00    1693*                  LD	DE,0		;ACCUMULATOR
004253 F5          1694*                  PUSH	AF
004254 FD 23       1695*                  INC	IY		;SKIP (
004256 E5          1696*  GETV3:          PUSH	HL
004257 D5          1697*                  PUSH	DE
004258 CD 6C 18    1698*                  CALL	EXPRI		;SUBSCRIPT
00425B D9          1699*                  EXX
00425C D1          1700*                  POP	DE
00425D E3          1701*                  EX	(SP),HL
00425E 4E          1702*                  LD	C,(HL)
00425F 23          1703*                  INC	HL
004260 46          1704*                  LD	B,(HL)
004261 23          1705*                  INC	HL
004262 E3          1706*                  EX	(SP),HL
004263 EB          1707*                  EX	DE,HL
004264 D5          1708*                  PUSH	DE
004265 CD F6 36    1709*                  CALL	MUL16		;HL=HL*BC
004268 D1          1710*                  POP	DE
004269 19          1711*                  ADD	HL,DE
00426A EB          1712*                  EX	DE,HL
00426B B7          1713*                  OR	A
00426C ED 42       1714*                  SBC	HL,BC
00426E 3E 0F       1715*                  LD	A,15
004270 30 A7       1716*                  JR	NC,ERROR3	;"Subscript"
004272 E1          1717*                  POP	HL
004273 F1          1718*                  POP	AF
004274 3D          1719*                  DEC	A		;DIMENSION COUNTER
004275 20 1C       1720*                  JR	NZ,GETV2
004277 CD E7 20    1721*                  CALL	BRAKET		;CLOSING BRACKET
00427A F1          1722*                  POP	AF		;RESTORE TYPE
00427B E5          1723*                  PUSH	HL
00427C CD E6 36    1724*                  CALL	X14OR5		;DE=DE*n
00427F E1          1725*                  POP	HL
004280 19          1726*                  ADD	HL,DE
004281 57          1727*                  LD	D,A		;TYPE
004282 FD 7E 00    1728*                  LD	A,(IY)
004285 FE 3F       1729*  GETVX:          CP	'?'
004287 28 26       1730*                  JR	Z,GETV9
004289 FE 21       1731*                  CP	'!'
00428B 28 1E       1732*                  JR	Z,GETV8
00428D E5          1733*  GETVZ:          PUSH	HL		;SET EXIT CONDITIONS
00428E DD E1       1734*                  POP	IX
004290 7A          1735*                  LD	A,D
004291 BF          1736*                  CP	A
004292 C9          1737*                  RET
004293             1738*  ;
004293 F5          1739*  GETV2:          PUSH	AF
004294 CD DB 20    1740*                  CALL	COMMA
004297 18 BD       1741*                  JR	GETV3
004299             1742*  ;
004299             1743*  ;PROCESS UNARY & BINARY INDIRECTION:
004299             1744*  ;
004299 3E 04       1745*  GETV5:          LD	A,4		;UNARY 32-BIT INDIRN.
00429B 18 09       1746*                  JR	GETV7
00429D AF          1747*  GETV6:          XOR	A		;UNARY 8-BIT INDIRECTION
00429E 18 06       1748*                  JR	GETV7
0042A0 3E 05       1749*  GETVF:          LD	A,5		;VARIANT INDIRECTION
0042A2 18 02       1750*                  JR	GETV7
0042A4 3E 80       1751*  GETV4:          LD	A,128		;STATIC STRING
0042A6 ED 62       1752*  GETV7:          SBC	HL,HL
0042A8 F5          1753*                  PUSH	AF
0042A9 18 15       1754*                  JR	GETV0
0042AB             1755*  ;
0042AB 06 04       1756*  GETV8:          LD	B,4		;32-BIT BINARY INDIRN.
0042AD 18 02       1757*                  JR	GETVA
0042AF 06 00       1758*  GETV9:          LD	B,0		;8-BIT BINARY INDIRN.
0042B1 E5          1759*  GETVA:          PUSH	HL
0042B2 DD E1       1760*                  POP	IX
0042B4 7A          1761*                  LD	A,D		;TYPE
0042B5 FE 81       1762*                  CP	129
0042B7 C8          1763*                  RET	Z		;STRING!
0042B8 C5          1764*                  PUSH	BC
0042B9 CD 5E 19    1765*                  CALL	LOADN		;LEFT OPERAND
0042BC CD 50 1C    1766*                  CALL	SFIX
0042BF D9          1767*                  EXX
0042C0 E5          1768*  GETV0:          PUSH	HL
0042C1 FD 23       1769*                  INC	IY
0042C3 CD 99 18    1770*                  CALL	ITEMI
0042C6 D9          1771*                  EXX
0042C7 D1          1772*                  POP	DE
0042C8 F1          1773*                  POP	AF
0042C9 19          1774*                  ADD	HL,DE
0042CA E5          1775*                  PUSH	HL
0042CB DD E1       1776*                  POP	IX
0042CD BF          1777*                  CP	A
0042CE C9          1778*                  RET
0042CF             1779*  ;
0042CF             1780*  ;GETDEF - Find entry for FN or PROC in dynamic area.
0042CF             1781*  ;   Inputs: IY addresses byte following "DEF" token.
0042CF             1782*  ;  Outputs: Z flag set if found
0042CF             1783*  ;           Carry set if neither FN or PROC first.
0042CF             1784*  ;           If Z: HL points to entry
0042CF             1785*  ;                 IY addresses delimiter
0042CF             1786*  ; Destroys: A,D,E,H,L,IY,F
0042CF             1787*  ;
0042CF FD 7E 01    1788*  GETDEF:         LD	A,(IY+1)
0042D2 CD 35 44    1789*                  CALL	RANGE1
0042D5 D8          1790*                  RET	C
0042D6 FD 7E 00    1791*                  LD	A,(IY)
0042D9 21 D8 54    1792*                  LD	HL,FNPTR
0042DC FE A4       1793*                  CP	TFN
0042DE 28 43       1794*                  JR	Z,LOC2
0042E0 21 DA 54    1795*                  LD	HL,PROPTR
0042E3 FE F2       1796*                  CP	TPROC
0042E5 28 3C       1797*                  JR	Z,LOC2
0042E7 37          1798*                  SCF
0042E8 C9          1799*                  RET
0042E9             1800*  ;
0042E9             1801*  ;LOCATE - Try to locate variable name in static or
0042E9             1802*  ;dynamic variables.  If illegal first character return
0042E9             1803*  ;carry, non-zero.  If found, return no-carry, zero.
0042E9             1804*  ;If not found, return no-carry, non-zero.
0042E9             1805*  ;   Inputs: IY addresses first character of name.
0042E9             1806*  ;           A=(IY)
0042E9             1807*  ;  Outputs: Z-flag set if found, then:
0042E9             1808*  ;            IY addresses terminator
0042E9             1809*  ;            HL addresses location of variable
0042E9             1810*  ;            D=type of variable:  4 = integer
0042E9             1811*  ;                                 5 = floating point
0042E9             1812*  ;                               129 = string
0042E9             1813*  ; Destroys: A,D,E,H,L,IY,F
0042E9             1814*  ;
0042E9 D6 40       1815*  LOCATE:         SUB	'@'
0042EB D8          1816*                  RET	C
0042EC 26 00       1817*                  LD	H,0
0042EE FE 1B       1818*                  CP	'Z'-'@'+1
0042F0 30 1D       1819*                  JR	NC,LOC0		;NOT STATIC
0042F2 87          1820*                  ADD	A,A
0042F3 6F          1821*                  LD	L,A
0042F4 FD 7E 01    1822*                  LD	A,(IY+1)	;2nd CHARACTER
0042F7 FE 25       1823*                  CP	'%'
0042F9 20 20       1824*                  JR	NZ,LOC1		;NOT STATIC
0042FB FD 7E 02    1825*                  LD	A,(IY+2)
0042FE FE 28       1826*                  CP	'('
004300 28 19       1827*                  JR	Z,LOC1		;NOT STATIC
004302 29          1828*                  ADD	HL,HL
004303 11 00 54    1829*                  LD	DE,STAVAR	;STATIC VARIABLES
004306 19          1830*                  ADD	HL,DE
004307 FD 23       1831*                  INC	IY
004309 FD 23       1832*                  INC	IY
00430B 16 04       1833*                  LD	D,4		;INTEGER TYPE
00430D AF          1834*                  XOR	A
00430E C9          1835*                  RET
00430F             1836*  ;
00430F FE 1F       1837*  LOC0:           CP	'_'-'@'
004311 D8          1838*                  RET	C
004312 FE 3B       1839*                  CP	'z'-'@'+1
004314 3F          1840*                  CCF
004315 3D          1841*                  DEC	A		;SET NZ
004316 D8          1842*                  RET	C
004317 D6 03       1843*                  SUB	3
004319 87          1844*                  ADD	A,A
00431A 6F          1845*                  LD	L,A
00431B 11 6C 54    1846*  LOC1:           LD	DE,DYNVAR	;DYNAMIC VARIABLES
00431E 2D          1847*                  DEC	L
00431F 2D          1848*                  DEC	L
004320 37          1849*                  SCF
004321 F8          1850*                  RET	M
004322 19          1851*                  ADD	HL,DE
004323 5E          1852*  LOC2:           LD	E,(HL)
004324 23          1853*                  INC	HL
004325 56          1854*                  LD	D,(HL)
004326 7A          1855*                  LD	A,D
004327 B3          1856*                  OR	E
004328 28 49       1857*                  JR	Z,LOC6		;UNDEFINED VARIABLE
00432A 62          1858*                  LD	H,D
00432B 6B          1859*                  LD	L,E
00432C 23          1860*                  INC	HL		;SKIP LINK
00432D 23          1861*                  INC	HL
00432E FD E5       1862*                  PUSH	IY
004330 7E          1863*  LOC3:           LD	A,(HL)		;COMPARE
004331 23          1864*                  INC	HL
004332 FD 23       1865*                  INC	IY
004334 FD BE 00    1866*                  CP	(IY)
004337 28 F7       1867*                  JR	Z,LOC3
004339 B7          1868*                  OR	A		;0=TERMINATOR
00433A 28 05       1869*                  JR	Z,LOC5		;FOUND (MAYBE)
00433C FD E1       1870*  LOC4:           POP	IY
00433E EB          1871*                  EX	DE,HL
00433F 18 E2       1872*                  JR	LOC2		;TRY NEXT ENTRY
004341             1873*  ;
004341 FD 2B       1874*  LOC5:           DEC	IY
004343 FD 7E 00    1875*                  LD	A,(IY)
004346 FE 28       1876*                  CP	'('
004348 28 13       1877*                  JR	Z,LOCX		;FOUND
00434A FD 23       1878*                  INC	IY
00434C CD 28 44    1879*                  CALL	RANGE
00434F 38 0C       1880*                  JR	C,LOCX		;FOUND
004351 FE 28       1881*                  CP	'('
004353 28 E7       1882*                  JR	Z,LOC4		;KEEP LOOKING
004355 FD 7E FF    1883*                  LD	A,(IY-1)
004358 CD 35 44    1884*                  CALL	RANGE1
00435B 30 DF       1885*                  JR	NC,LOC4		;KEEP LOOKING
00435D D1          1886*  LOCX:           POP	DE
00435E FD 7E FF    1887*  TYPE:           LD	A,(IY-1)
004361 FE 24       1888*                  CP	'$'
004363 16 81       1889*                  LD	D,129
004365 C8          1890*                  RET	Z		;STRING
004366 FE 26       1891*                  CP	'&'
004368 16 01       1892*                  LD	D,1
00436A C8          1893*                  RET	Z		;BYTE
00436B FE 25       1894*                  CP	'%'
00436D 16 04       1895*                  LD	D,4
00436F C8          1896*                  RET	Z		;INTEGER
004370 14          1897*                  INC	D
004371 BF          1898*                  CP	A
004372 C9          1899*                  RET
004373             1900*  ;
004373 3C          1901*  LOC6:           INC	A		;SET NZ
004374 C9          1902*                  RET
004375             1903*  ;
004375             1904*  ;CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
004375             1905*  ;   Inputs: HL, IY as returned from LOCATE (NZ).
004375             1906*  ;  Outputs: As LOCATE, GETDEF.
004375             1907*  ; Destroys: As LOCATE, GETDEF.
004375             1908*  ;
004375 AF          1909*  CREATE:         XOR	A
004376 ED 5B E0 54 1910*                  LD	DE,(FREE)
00437A 72          1911*                  LD	(HL),D
00437B 2B          1912*                  DEC	HL
00437C 73          1913*                  LD	(HL),E
00437D EB          1914*                  EX	DE,HL
00437E 77          1915*                  LD	(HL),A
00437F 23          1916*                  INC	HL
004380 77          1917*                  LD	(HL),A
004381 23          1918*                  INC	HL
004382 FD 23       1919*  LOC7:           INC	IY
004384 CD 28 44    1920*                  CALL	RANGE		;END OF VARIABLE?
004387 38 14       1921*                  JR	C,LOC8
004389 77          1922*                  LD	(HL),A
00438A 23          1923*                  INC	HL
00438B CD 35 44    1924*                  CALL	RANGE1
00438E 30 F2       1925*                  JR	NC,LOC7
004390 FE 28       1926*                  CP	'('
004392 28 09       1927*                  JR	Z,LOC8
004394 FD 7E 01    1928*                  LD	A,(IY+1)
004397 FE 28       1929*                  CP	'('
004399 28 E7       1930*                  JR	Z,LOC7
00439B FD 23       1931*                  INC	IY
00439D 36 00       1932*  LOC8:           LD	(HL),0		;TERMINATOR
00439F 23          1933*                  INC	HL
0043A0 E5          1934*                  PUSH	HL
0043A1 CD 5E 43    1935*                  CALL	TYPE
0043A4 FD 7E 00    1936*                  LD	A,(IY)
0043A7 FE 28       1937*                  CP	'('
0043A9 3E 02       1938*                  LD	A,2		;SIZE OF INDIRECT LINK
0043AB 28 07       1939*                  JR	Z,LOC9
0043AD 7A          1940*                  LD	A,D
0043AE B7          1941*                  OR	A		;STRING?
0043AF F2 B4 43    1942*                  JP	P,LOC9
0043B2 3E 04       1943*                  LD	A,4
0043B4 36 00       1944*  LOC9:           LD	(HL),0		;INITIALISE TO ZERO
0043B6 23          1945*                  INC	HL
0043B7 3D          1946*                  DEC	A
0043B8 20 FA       1947*                  JR	NZ,LOC9
0043BA 22 E0 54    1948*                  LD	(FREE),HL
0043BD CD BF 32    1949*                  CALL	CHECK
0043C0 E1          1950*                  POP	HL
0043C1 AF          1951*                  XOR	A
0043C2 C9          1952*                  RET
0043C3             1953*  ;
0043C3             1954*  ;LINNUM - GET LINE NUMBER FROM TEXT STRING
0043C3             1955*  ;   Inputs: IY = Text Pointer
0043C3             1956*  ;  Outputs: HL = Line number (zero if none)
0043C3             1957*  ;           IY updated
0043C3             1958*  ; Destroys: A,D,E,H,L,IY,F
0043C3             1959*  ;
0043C3 CD 44 45    1960*  LINNUM:         CALL	NXT
0043C6 21 00 00    1961*                  LD	HL,0
0043C9 FD 7E 00    1962*  LINNM1:         LD	A,(IY)
0043CC D6 30       1963*                  SUB	'0'
0043CE D8          1964*                  RET	C
0043CF FE 0A       1965*                  CP	10
0043D1 D0          1966*                  RET	NC
0043D2 FD 23       1967*                  INC	IY
0043D4 54          1968*                  LD	D,H
0043D5 5D          1969*                  LD	E,L
0043D6 29          1970*                  ADD	HL,HL		;*2
0043D7 38 0F       1971*                  JR	C,TOOBIGmn
0043D9 29          1972*                  ADD	HL,HL		;*4
0043DA 38 0C       1973*                  JR	C,TOOBIGmn
0043DC 19          1974*                  ADD	HL,DE		;*5
0043DD 38 09       1975*                  JR	C,TOOBIGmn
0043DF 29          1976*                  ADD	HL,HL		;*10
0043E0 38 06       1977*                  JR	C,TOOBIGmn
0043E2 5F          1978*                  LD	E,A
0043E3 16 00       1979*                  LD	D,0
0043E5 19          1980*                  ADD	HL,DE		;ADD IN DIGIT
0043E6 30 E1       1981*                  JR	NC,LINNM1
0043E8 3E 14       1982*  TOOBIGmn:         LD	A,20
0043EA C3 7D 3F    1983*                  JP	ERROR_		;"Too big"
0043ED             1984*  ;
0043ED             1985*  ;PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
0043ED             1986*  ;   Inputs: IY = text pointer
0043ED             1987*  ;  Outputs: HL = first number (10 by default)
0043ED             1988*  ;           BC = second number (10 by default)
0043ED             1989*  ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
0043ED             1990*  ;
0043ED CD C3 43    1991*  PAIR:           CALL	LINNUM		;FIRST
0043F0 7C          1992*                  LD	A,H
0043F1 B5          1993*                  OR	L
0043F2 20 02       1994*                  JR	NZ,PAIR1
0043F4 2E 0A       1995*                  LD	L,10
0043F6 CD 6F 35    1996*  PAIR1:          CALL	TERMQ
0043F9 FD 23       1997*                  INC	IY
0043FB E5          1998*                  PUSH	HL
0043FC 21 0A 00    1999*                  LD	HL,10
0043FF C4 C3 43    2000*                  CALL	NZ,LINNUM	;SECOND
004402 E3          2001*                  EX	(SP),HL
004403 C1          2002*                  POP	BC
004404 78          2003*                  LD	A,B
004405 B1          2004*                  OR	C
004406 C0          2005*                  RET	NZ
004407 CD 8E 3F    2006*                  CALL	EXTERR
00440A 53 69 6C 6C 2007*                  DB	"Silly"
       79          
00440F 00          2008*                  DB	0
004410             2009*  ;
004410             2010*  ;DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
004410             2011*  ;   Inputs: IY = text pointer
004410             2012*  ;  Outputs: HL = points to program text
004410             2013*  ;           BC = second number (0 by default)
004410             2014*  ; Destroys: A,B,C,D,E,H,L,IY,F
004410             2015*  ;
004410 CD C3 43    2016*  DLPAIR:         CALL	LINNUM
004413 E5          2017*                  PUSH	HL
004414 CD 6F 35    2018*                  CALL	TERMQ
004417 28 09       2019*                  JR	Z,DLP1
004419 FE E7       2020*                  CP	TIF
00441B 28 05       2021*                  JR	Z,DLP1
00441D FD 23       2022*                  INC	IY
00441F CD C3 43    2023*                  CALL	LINNUM
004422 E3          2024*  DLP1:           EX	(SP),HL
004423 CD 7C 41    2025*                  CALL	FINDL
004426 C1          2026*                  POP	BC
004427 C9          2027*                  RET
004428             2028*  ;
004428             2029*  ;TEST FOR VALID CHARACTER IN VARIABLE NAME:
004428             2030*  ;   Inputs: IY addresses character
004428             2031*  ;  Outputs: Carry set if out-of-range.
004428             2032*  ; Destroys: A,F
004428             2033*  ;
004428 FD 7E 00    2034*  RANGE:          LD	A,(IY)
00442B FE 24       2035*                  CP	'$'
00442D D8          2036*                  RET	C
00442E FE 27       2037*                  CP	'&'+1
004430 3F          2038*                  CCF
004431 D0          2039*                  RET	NC
004432 FE 28       2040*                  CP	'('
004434 C8          2041*                  RET	Z
004435 FE 30       2042*  RANGE1:         CP	'0'
004437 D8          2043*                  RET	C
004438 FE 3A       2044*                  CP	'9'+1
00443A 3F          2045*                  CCF
00443B D0          2046*                  RET	NC
00443C FE 40       2047*                  CP	'@'		;V2.4
00443E C8          2048*                  RET	Z
00443F FE 41       2049*  RANGE2:         CP	'A'
004441 D8          2050*                  RET	C
004442 FE 5B       2051*                  CP	'Z'+1
004444 3F          2052*                  CCF
004445 D0          2053*                  RET	NC
004446 FE 5F       2054*                  CP	'_'
004448 D8          2055*                  RET	C
004449 FE 7B       2056*                  CP	'z'+1
00444B 3F          2057*                  CCF
00444C C9          2058*                  RET
00444D             2059*  ;
00444D             2060*  ;LEXAN - LEXICAL ANALYSIS.
00444D             2061*  ;  Bit 0,C: 1=left, 0=right
00444D             2062*  ;  Bit 3,C: 1=in HEX
00444D             2063*  ;  Bit 4,C: 1=accept line number
00444D             2064*  ;  Bit 5,C: 1=in variable, FN, PROC
00444D             2065*  ;  Bit 6,C: 1=in REM, DATA, *
00444D             2066*  ;  Bit 7,C: 1=in quotes
00444D             2067*  ;   Inputs: IY addresses source string
00444D             2068*  ;           DE addresses destination string
00444D             2069*  ;           (must be page boundary)
00444D             2070*  ;           C  sets initial mode
00444D             2071*  ;  Outputs: DE, IY updated
00444D             2072*  ;           A holds carriage return
00444D             2073*  ;
00444D 12          2074*  LEXAN1:         LD	(DE),A		;TRANSFER TO BUFFER
00444E 13          2075*                  INC	DE		;INCREMENT POINTERS
00444F FD 23       2076*                  INC	IY
004451 7B          2077*  LEXAN2:         LD	A,E		;MAIN ENTRY
004452 FE FC       2078*                  CP	252		;TEST LENGTH
004454 3E 13       2079*                  LD	A,19
004456 D2 7D 3F    2080*                  JP	NC,ERROR_	;'String too long'
004459 FD 7E 00    2081*                  LD	A,(IY)
00445C FE 0D       2082*                  CP	CR
00445E C8          2083*                  RET	Z		;END OF LINE
00445F CD 35 44    2084*                  CALL	RANGE1
004462 30 04       2085*                  JR	NC,LEXAN3
004464 CB A9       2086*                  RES	5,C		;NOT IN VARIABLE
004466 CB 99       2087*                  RES	3,C		;NOT IN HEX
004468 FE 20       2088*  LEXAN3:         CP	' '
00446A 28 E1       2089*                  JR	Z,LEXAN1	;PASS SPACES
00446C FE 2C       2090*                  CP	','
00446E 28 DD       2091*                  JR	Z,LEXAN1	;PASS COMMAS
004470 FE 47       2092*                  CP	'G'
004472 38 02       2093*                  JR	C,LEXAN4
004474 CB 99       2094*                  RES	3,C		;NOT IN HEX
004476 FE 22       2095*  LEXAN4:         CP	'"'
004478 20 05       2096*                  JR	NZ,LEXAN5
00447A CB 11       2097*                  RL	C
00447C 3F          2098*                  CCF			;TOGGLE C7
00447D CB 19       2099*                  RR	C
00447F CB 61       2100*  LEXAN5:         BIT	4,C
004481 28 10       2101*                  JR	Z,LEXAN6
004483 CB A1       2102*                  RES	4,C
004485 C5          2103*                  PUSH	BC
004486 D5          2104*                  PUSH	DE
004487 CD C3 43    2105*                  CALL	LINNUM		;GET LINE NUMBER
00448A D1          2106*                  POP	DE
00448B C1          2107*                  POP	BC
00448C 7C          2108*                  LD	A,H
00448D B5          2109*                  OR	L
00448E C4 F8 44    2110*                  CALL	NZ,ENCODE	;ENCODE LINE NUMBER
004491 18 BE       2111*                  JR	LEXAN2		;CONTINUE
004493             2112*  ;
004493 0D          2113*  LEXAN6:         DEC	C
004494 28 09       2114*                  JR	Z,LEXAN7	;C=1 (LEFT)
004496 0C          2115*                  INC	C
004497 20 B4       2116*                  JR	NZ,LEXAN1
004499 B7          2117*                  OR	A
00449A F4 DC 3F    2118*                  CALL	P,LEX		;TOKENISE IF POSS.
00449D 18 12       2119*                  JR	LEXAN8
00449F             2120*  ;
00449F FE 2A       2121*  LEXAN7:         CP	'*'
0044A1 28 16       2122*                  JR	Z,LEXAN9
0044A3 B7          2123*                  OR	A
0044A4 F4 DC 3F    2124*                  CALL	P,LEX		;TOKENISE IF POSS.
0044A7 FE 8F       2125*                  CP	TOKLO
0044A9 38 06       2126*                  JR	C,LEXAN8
0044AB FE 94       2127*                  CP	TOKHI+1
0044AD 30 02       2128*                  JR	NC,LEXAN8
0044AF C6 40       2129*                  ADD	A,OFFSET	;LEFT VERSION
0044B1 FE F4       2130*  LEXAN8:         CP	TREM
0044B3 28 04       2131*                  JR	Z,LEXAN9
0044B5 FE DC       2132*                  CP	TDATA
0044B7 20 02       2133*                  JR	NZ,LEXANA
0044B9 CB F1       2134*  LEXAN9:         SET	6,C		;QUIT TOKENISING
0044BB FE A4       2135*  LEXANA:         CP	TFN
0044BD 28 09       2136*                  JR	Z,LEXANB
0044BF FE F2       2137*                  CP	TPROC
0044C1 28 05       2138*                  JR	Z,LEXANB
0044C3 CD 3F 44    2139*                  CALL	RANGE2
0044C6 38 02       2140*                  JR	C,LEXANC
0044C8 CB E9       2141*  LEXANB:         SET	5,C		;IN VARIABLE/FN/PROC
0044CA FE 26       2142*  LEXANC:         CP	'&'
0044CC 20 02       2143*                  JR	NZ,LEXAND
0044CE CB D9       2144*                  SET	3,C		;IN HEX
0044D0 21 EF 44    2145*  LEXAND:         LD	HL,LIST1
0044D3 C5          2146*                  PUSH	BC
0044D4 01 06 00    2147*                  LD	BC,LIST1L
0044D7 ED B1       2148*                  CPIR
0044D9 C1          2149*                  POP	BC
0044DA 20 02       2150*                  JR	NZ,LEXANE
0044DC CB E1       2151*                  SET	4,C		;ACCEPT LINE NUMBER
0044DE 21 F3 44    2152*  LEXANE:         LD	HL,LIST2
0044E1 C5          2153*                  PUSH	BC
0044E2 01 05 00    2154*                  LD	BC,LIST2L
0044E5 ED B1       2155*                  CPIR
0044E7 C1          2156*                  POP	BC
0044E8 20 02       2157*                  JR	NZ,LEXANF
0044EA CB C1       2158*                  SET	0,C		;ENTER LEFT MODE
0044EC C3 4D 44    2159*  LEXANF:         JP	LEXAN1
0044EF             2160*  ;
0044EF E5          2161*  LIST1:          DB	TGOTO
0044F0 E4          2162*                  DB	TGOSUB
0044F1 F7          2163*                  DB	TRESTORE
0044F2 FC          2164*                  DB	TTRACE
0044F3 8C          2165*  LIST2:          DB	TTHEN
0044F4 8B          2166*                  DB	TELSE
0044F5             2167*  LIST1L:         EQU	$-LIST1
0044F5 F5          2168*                  DB	TREPEAT
0044F6 85          2169*                  DB	TERROR
0044F7 3A          2170*                  DB	':'
0044F8             2171*  LIST2L:         EQU	$-LIST2
0044F8             2172*  ;
0044F8             2173*  ;ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
0044F8             2174*  ;   Inputs: HL=line number, DE=string pointer
0044F8             2175*  ;  Outputs: DE updated, BIT 4,C set.
0044F8             2176*  ; Destroys: A,B,C,D,E,H,L,F
0044F8             2177*  ;
0044F8 CB E1       2178*  ENCODE:         SET	4,C
0044FA EB          2179*                  EX	DE,HL
0044FB 36 8D       2180*                  LD	(HL),TLINO
0044FD 23          2181*                  INC	HL
0044FE 7A          2182*                  LD	A,D
0044FF E6 C0       2183*                  AND	0C0H
004501 0F          2184*                  RRCA
004502 0F          2185*                  RRCA
004503 47          2186*                  LD	B,A
004504 7B          2187*                  LD	A,E
004505 E6 C0       2188*                  AND	0C0H
004507 B0          2189*                  OR	B
004508 0F          2190*                  RRCA
004509 0F          2191*                  RRCA
00450A EE 54       2192*                  XOR	01010100B
00450C 77          2193*                  LD	(HL),A
00450D 23          2194*                  INC	HL
00450E 7B          2195*                  LD	A,E
00450F E6 3F       2196*                  AND	3FH
004511 F6 40       2197*                  OR	'@'
004513 77          2198*                  LD	(HL),A
004514 23          2199*                  INC	HL
004515 7A          2200*                  LD	A,D
004516 E6 3F       2201*                  AND	3FH
004518 F6 40       2202*                  OR	'@'
00451A 77          2203*                  LD	(HL),A
00451B 23          2204*                  INC	HL
00451C EB          2205*                  EX	DE,HL
00451D C9          2206*                  RET
00451E             2207*  ;
00451E             2208*  ;TEXT - OUTPUT MESSAGE.
00451E             2209*  ;   Inputs: HL addresses text (terminated by nul)
00451E             2210*  ;  Outputs: HL addresses character following nul.
00451E             2211*  ; Destroys: A,H,L,F
00451E             2212*  ;
00451E 2A EE 54    2213*  REPORT:         LD	HL,(ERRTXT)
004521 7E          2214*  TEXT_:          LD	A,(HL)
004522 23          2215*                  INC	HL
004523 B7          2216*                  OR	A
004524 C8          2217*                  RET	Z
004525 FE 0A       2218*                  CP	LF
004527 28 05       2219*                  JR	Z,TEXTLF	;Token for TINT
004529 CD 54 41    2220*                  CALL	OUT
00452C 18 F3       2221*                  JR	TEXT_
00452E             2222*  ;
00452E CD 3B 41    2223*  TEXTLF:         CALL	OUTCHR
004531 18 EE       2224*                  JR	TEXT_
004533             2225*  ;
004533             2226*  ;TELL - OUTPUT MESSAGE.
004533             2227*  ;   Inputs: Text follows subroutine call (term=nul)
004533             2228*  ; Destroys: A,F
004533             2229*  ;
004533 E3          2230*  TELL:           EX	(SP),HL		;GET RETURN ADDRESS
004534 CD 21 45    2231*                  CALL	TEXT_
004537 E3          2232*                  EX	(SP),HL
004538 C9          2233*                  RET
004539             2234*  ;
004539             2235*  ; NLIST - Check for end of list
004539             2236*  ;
004539 CD 44 45    2237*  NLIST:          CALL	NXT
00453C FE 2C       2238*                  CP	','		;ANOTHER VARIABLE?
00453E 28 0A       2239*                  JR	Z,NXT1
004540 C1          2240*                  POP	BC		;DITCH RETURN ADDRESS
004541 C3 D2 24    2241*                  JP	XEQ
004544             2242*  ;
004544 FD 7E 00    2243*  NXT:            LD	A,(IY)
004547 FE 20       2244*                  CP	' '
004549 C0          2245*                  RET	NZ
00454A FD 23       2246*  NXT1:           INC	IY
00454C 18 F6       2247*                  JR	NXT
00454E             2248*  ;
00454E             2249*  ;                END	START
00454E             2250*  ;    include "main.inc"
00454E             0019       include "math.asm"
00454E             0001*  ;
00454E             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
00454E             0003*  ;
00454E             0004*                  .ASSUME ADL = 0
00454E             0005*  ;	.ORG 0x0000
00454E             0006*  ;                SEGMENT CODE
00454E             0007*  ;
00454E             0008*  ;Z80 FLOATING POINT PACKAGE
00454E             0009*  ;(C) COPYRIGHT  R.T.RUSSELL  1986-2024
00454E             0010*  ;VERSION 0.0, 26-10-1986
00454E             0011*  ;VERSION 0.1, 14-12-1988 (BUG FIX)
00454E             0012*  ;VERSION 5.0, 16-06-2024 (SHIFTS ADDED)
00454E             0013*  ;
00454E             0014*  ;BINARY FLOATING POINT REPRESENTATION:
00454E             0015*  ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
00454E             0016*  ;    8 BIT EXCESS-128 SIGNED EXPONENT
00454E             0017*  ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
00454E             0018*  ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
00454E             0019*  ;
00454E             0020*  ;BINARY INTEGER REPRESENTATION:
00454E             0021*  ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
00454E             0022*  ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
00454E             0023*  ;
00454E             0024*  ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
00454E             0025*  ;                            EXPONENT - C
00454E             0026*  ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
00454E             0027*  ;                               EXPONENT - B
00454E             0028*  ;
00454E             0029*  ;Error codes:
00454E             0030*  ;
00454E             0031*  BADOP:          EQU	1		;Bad operation code
00454E             0032*  DIVBY0:         EQU	18		;Division by zero
00454E             0033*  TOOBIG:         EQU	20		;Too big
00454E             0034*  NGROOT:         EQU	21		;Negative root
00454E             0035*  LOGRNG:         EQU	22		;Log range
00454E             0036*  ACLOST:         EQU	23		;Accuracy lost
00454E             0037*  EXPRNG:         EQU	24		;Exp range
00454E             0038*  ;
00454E             0039*  ;                XDEF	FPP
00454E             0040*  ;                XREF	STORE5
00454E             0041*  ;                XREF	DLOAD5
00454E             0042*  ;
00454E             0043*  ;Call entry and despatch code:
00454E             0044*  ;
00454E FD E5       0045*  FPP:            PUSH	IY		;Save IY
004550 FD 21 00 00 0046*                  LD	IY,0
004554 FD 39       0047*                  ADD	IY,SP		;Save SP in IY
004556 CD 65 45    0048*                  CALL	OP		;Perform operation
004559 BF          0049*                  CP	A		;Good return (Z, NC)
00455A FD E1       0050*  EXITmat:           POP	IY		;Restore IY
00455C C9          0051*                  RET			;Return to caller
00455D             0052*  ;
00455D             0053*  ;Error exit:
00455D             0054*  ;
00455D 3E 01       0055*  BADmat:            LD	A,BADOP		;"Bad operation code"
00455F FD F9       0056*  ERROR_mat:         LD	SP,IY		;Restore SP from IY
004561 B7          0057*                  OR	A		;Set NZ
004562 37          0058*                  SCF			;Set C
004563 18 F5       0059*                  JR	EXITmat
004565             0060*  ;
004565             0061*  ;Perform operation or function:
004565             0062*  ;
004565             0063*  ; OP:             CP	(RTABLE-DTABLE)/2
004565 FE 2E       0064*  OP:             CP	RTABLE-DTABLE/2
004567 30 F4       0065*                  JR	NC,BADmat
004569             0066*                  ; CP	(FTABLE-DTABLE)/2
004569 FE 10       0067*                  CP	FTABLE-DTABLE/2
00456B 30 07       0068*                  JR	NC,DISPAT
00456D 08          0069*                  EX	AF,AF'
00456E 78          0070*                  LD	A,B
00456F B1          0071*                  OR	C		;Both integer?
004570 C4 DE 4E    0072*                  CALL	NZ,FLOATA	;No, so float both
004573 08          0073*                  EX	AF,AF'
004574 E5          0074*  DISPAT:         PUSH	HL
004575 21 85 45    0075*                  LD	HL,DTABLE
004578 C5          0076*                  PUSH	BC
004579 87          0077*                  ADD	A,A		;A = op-code * 2
00457A 4F          0078*                  LD	C,A
00457B 06 00       0079*                  LD	B,0		;BC = op-code * 2
00457D 09          0080*                  ADD	HL,BC
00457E 7E          0081*                  LD	A,(HL)		;Get low byte
00457F 23          0082*                  INC	HL
004580 66          0083*                  LD	H,(HL)		;Get high byte
004581 6F          0084*                  LD	L,A
004582 C1          0085*                  POP	BC
004583 E3          0086*                  EX	(SP),HL
004584 C9          0087*                  RET			;Off to routine
004585             0088*  ;
004585             0089*  ;Despatch table:
004585             0090*  ;
004585 04 46       0091*  DTABLE:         DW	IAND		;0  & (INTEGER)
004587 51 46       0092*                  DW	IBDIV		;1  DIV
004589 16 46       0093*                  DW	IEOR		;2  EOR
00458B 3A 46       0094*                  DW	IMOD		;3  MOD
00458D 28 46       0095*                  DW	IOR		;4  |
00458F 4F 48       0096*                  DW	ILE		;5  <=
004591 5C 48       0097*                  DW	INE		;6  <>
004593 44 48       0098*                  DW	IGE		;7  >=
004595 2D 48       0099*                  DW	ILT		;8  <
004597 67 48       0100*                  DW	IEQ		;9  =
004599 1B 47       0101*                  DW	IMUL		;10 *
00459B 74 46       0102*                  DW	IADD		;11 +
00459D 38 48       0103*                  DW	IGT		;12 >
00459F 5E 46       0104*                  DW	ISUB		;13 -
0045A1 96 47       0105*                  DW	IPOW		;14 ^
0045A3 D3 46       0106*                  DW	IDIV		;15 /
0045A5             0107*  ;
0045A5 B7 48       0108*  FTABLE:         DW	ABS		;16 ABS
0045A7 13 4C       0109*                  DW	ACS		;17 ACS
0045A9 6F 4B       0110*                  DW	ASN		;18 ASN
0045AB 94 4B       0111*                  DW	ATN		;19 ATN
0045AD AD 49       0112*                  DW	COS		;20 COS
0045AF E1 48       0113*                  DW	DEG		;21 DEG
0045B1 52 4A       0114*                  DW	EXP		;22 EXP
0045B3 27 49       0115*                  DW	INT_		;23 INT_
0045B5 DD 4A       0116*                  DW	LN		;24 LN
0045B7 5D 4B       0117*                  DW	LOG		;25 LOG
0045B9 C2 48       0118*                  DW	CPL_		;26 NOT
0045BB E9 48       0119*                  DW	RAD		;27 RAD
0045BD FF 48       0120*                  DW	SGN		;28 SGN
0045BF B8 49       0121*                  DW	SIN		;29 SIN
0045C1 3D 49       0122*                  DW	SQR		;30 SQR
0045C3 90 49       0123*                  DW	TAN		;31 TAN
0045C5             0124*  ;
0045C5 5A 4F       0125*                  DW	ZEROmat		;32 ZERO
0045C7 31 4A       0126*                  DW	FONE		;33 FONE
0045C9 6B 48       0127*                  DW	TRUE		;34 TRUE
0045CB D5 48       0128*                  DW	PI		;35 PI
0045CD             0129*  ;
0045CD 0F 49       0130*                  DW	VAL		;36 VAL
0045CF 1B 4C       0131*                  DW	STRmat		;37 STR$
0045D1             0132*  ;
0045D1 30 4E       0133*                  DW	SFIXmat		;38 FIX
0045D3 EB 4E       0134*                  DW	SFLOAT		;39 FLOAT
0045D5             0135*  ;
0045D5 30 4F       0136*                  DW	FTEST		;40 TEST
0045D7 41 4F       0137*                  DW	FCOMP		;41 COMPARE
0045D9             0138*  ;
0045D9 76 48       0139*                  DW	ISHL		;42 <<
0045DB 76 48       0140*                  DW	ISHX		;43 <<<
0045DD 83 48       0141*                  DW	ISAR		;44 >>
0045DF 95 48       0142*                  DW	ISHR		;45 >>>
0045E1             0143*  ;
0045E1 01 46       0144*  RTABLE:         DW	FAND		;& (FLOATING-POINT)
0045E3 4E 46       0145*                  DW	FBDIV		;DIV
0045E5 13 46       0146*                  DW	FEOR		;EOR
0045E7 37 46       0147*                  DW	FMOD		;MOD
0045E9 25 46       0148*                  DW	FOR		;|
0045EB 4A 48       0149*                  DW	FLE		;<=
0045ED 57 48       0150*                  DW	FNE		;<>
0045EF 3F 48       0151*                  DW	FGE		;>=
0045F1 28 48       0152*                  DW	FLT		;<
0045F3 62 48       0153*                  DW	FEQ		;=
0045F5 46 47       0154*                  DW	FMUL		;*
0045F7 7E 46       0155*                  DW	FADD		;+
0045F9 33 48       0156*                  DW	FGT		;>
0045FB 68 46       0157*                  DW	FSUB		;-
0045FD FE 47       0158*                  DW	FPOW		;^
0045FF D6 46       0159*                  DW	FDIV		;/
004601             0160*  ;
004601             0161*  ;ARITHMETIC AND LOGICAL OPERATORS:
004601             0162*  ;All take two arguments, in HLH'L'C & DED'E'B.
004601             0163*  ;Output in HLH'L'C
004601             0164*  ;All registers except IX, IY destroyed.
004601             0165*  ; (N.B. FPOW destroys IX).
004601             0166*  ;
004601             0167*  ;FAND - Floating-point AND.
004601             0168*  ;IAND - Integer AND.
004601             0169*  ;
004601 CD 27 4E    0170*  FAND:           CALL	FIX2
004604 7C          0171*  IAND:           LD	A,H
004605 A2          0172*                  AND	D
004606 67          0173*                  LD	H,A
004607 7D          0174*                  LD	A,L
004608 A3          0175*                  AND	E
004609 6F          0176*                  LD	L,A
00460A D9          0177*                  EXX
00460B 7C          0178*                  LD	A,H
00460C A2          0179*                  AND	D
00460D 67          0180*                  LD	H,A
00460E 7D          0181*                  LD	A,L
00460F A3          0182*                  AND	E
004610 6F          0183*                  LD	L,A
004611 D9          0184*                  EXX
004612 C9          0185*                  RET
004613             0186*  ;
004613             0187*  ;FEOR - Floating-point exclusive-OR.
004613             0188*  ;IEOR - Integer exclusive-OR.
004613             0189*  ;
004613 CD 27 4E    0190*  FEOR:           CALL	FIX2
004616 7C          0191*  IEOR:           LD	A,H
004617 AA          0192*                  XOR	D
004618 67          0193*                  LD	H,A
004619 7D          0194*                  LD	A,L
00461A AB          0195*                  XOR	E
00461B 6F          0196*                  LD	L,A
00461C D9          0197*                  EXX
00461D 7C          0198*                  LD	A,H
00461E AA          0199*                  XOR	D
00461F 67          0200*                  LD	H,A
004620 7D          0201*                  LD	A,L
004621 AB          0202*                  XOR	E
004622 6F          0203*                  LD	L,A
004623 D9          0204*                  EXX
004624 C9          0205*                  RET
004625             0206*  ;
004625             0207*  ;FOR - Floating-point OR.
004625             0208*  ;IOR - Integer OR.
004625             0209*  ;
004625 CD 27 4E    0210*  FOR:            CALL	FIX2
004628 7C          0211*  IOR:            LD	A,H
004629 B2          0212*                  OR	D
00462A 67          0213*                  LD	H,A
00462B 7D          0214*                  LD	A,L
00462C B3          0215*                  OR	E
00462D 6F          0216*                  LD	L,A
00462E D9          0217*                  EXX
00462F 7C          0218*                  LD	A,H
004630 B2          0219*                  OR	D
004631 67          0220*                  LD	H,A
004632 7D          0221*                  LD	A,L
004633 B3          0222*                  OR	E
004634 6F          0223*                  LD	L,A
004635 D9          0224*                  EXX
004636 C9          0225*                  RET
004637             0226*  ;
004637             0227*  ;FMOD - Floating-point remainder.
004637             0228*  ;IMOD - Integer remainder.
004637             0229*  ;
004637 CD 27 4E    0230*  FMOD:           CALL	FIX2
00463A 7C          0231*  IMOD:           LD	A,H
00463B AA          0232*                  XOR	D		;DIV RESULT SIGN
00463C CB 7C       0233*                  BIT	7,H
00463E CD 2E 51    0234*                  CALL	ABS2		;MAKE BOTH POSITIVE
004641 3E DF       0235*                  LD	A,-33
004643 CD 6A 50    0236*                  CALL	DIVA		;DIVIDE
004646 D9          0237*                  EXX
004647 0E 00       0238*                  LD	C,0		;INTEGER MARKER
004649 08          0239*                  EX	AF,AF'
00464A C8          0240*                  RET	Z
00464B C3 3F 4E    0241*                  JP	NEGATE
00464E             0242*  ;
00464E             0243*  ;BDIV - Integer division.
00464E             0244*  ;
00464E CD 27 4E    0245*  FBDIV:          CALL	FIX2
004651 CD 3A 46    0246*  IBDIV:          CALL	IMOD
004654 B7          0247*                  OR	A
004655 CD 15 4F    0248*                  CALL	SWAP
004658 0E 00       0249*                  LD	C,0
00465A F0          0250*                  RET	P
00465B C3 3F 4E    0251*                  JP	NEGATE
00465E             0252*  ;
00465E             0253*  ;ISUB - Integer subtraction.
00465E             0254*  ;FSUB - Floating point subtraction with rounding.
00465E             0255*  ;
00465E CD 9D 4F    0256*  ISUB:           CALL	SUB
004661 E0          0257*                  RET	PO
004662 CD 97 4F    0258*                  CALL	ADD
004665 CD E2 4E    0259*                  CALL	FLOAT2
004668 7A          0260*  FSUB:           LD	A,D
004669 EE 80       0261*                  XOR	80H		;CHANGE SIGN THEN ADD
00466B 57          0262*                  LD	D,A
00466C 18 10       0263*                  JR	FADD
00466E             0264*  ;
00466E             0265*  ;Reverse subtract.
00466E             0266*  ;
00466E 7C          0267*  RSUB:           LD	A,H
00466F EE 80       0268*                  XOR	80H
004671 67          0269*                  LD	H,A
004672 18 0A       0270*                  JR	FADD
004674             0271*  ;
004674             0272*  ;IADD - Integer addition.
004674             0273*  ;FADD - Floating point addition with rounding.
004674             0274*  ;
004674 CD 97 4F    0275*  IADD:           CALL	ADD
004677 E0          0276*                  RET	PO
004678 CD 9D 4F    0277*                  CALL	SUB
00467B CD E2 4E    0278*                  CALL	FLOAT2
00467E 05          0279*  FADD:           DEC	B
00467F 04          0280*                  INC	B
004680 C8          0281*                  RET	Z		;ARG 2 ZERO
004681 0D          0282*                  DEC	C
004682 0C          0283*                  INC	C
004683 CA 15 4F    0284*                  JP	Z,SWAP		;ARG 1 ZERO
004686 D9          0285*                  EXX
004687 01 00 00    0286*                  LD	BC,0		;INITIALISE
00468A D9          0287*                  EXX
00468B 7C          0288*                  LD	A,H
00468C AA          0289*                  XOR	D		;XOR SIGNS
00468D F5          0290*                  PUSH	AF
00468E 78          0291*                  LD	A,B
00468F B9          0292*                  CP	C		;COMPARE EXPONENTS
004690 DC 15 4F    0293*                  CALL	C,SWAP		;MAKE DED'E'B LARGEST
004693 78          0294*                  LD	A,B
004694 CB FC       0295*                  SET	7,H		;IMPLIED 1
004696 C4 17 4E    0296*                  CALL	NZ,FIX		;ALIGN
004699 F1          0297*                  POP	AF
00469A 7A          0298*                  LD	A,D		;SIGN OF LARGER
00469B CB FA       0299*                  SET	7,D		;IMPLIED 1
00469D FA AA 46    0300*                  JP	M,FADD3		;SIGNS DIFFERENT
0046A0 CD 97 4F    0301*                  CALL	ADD		;HLH'L'=HLH'L'+DED'E'
0046A3 DC 1D 4F    0302*                  CALL	C,DIV2		;NORMALISE
0046A6 CB FC       0303*                  SET	7,H
0046A8 18 0A       0304*                  JR	FADD4
0046AA             0305*  ;
0046AA CD 9D 4F    0306*  FADD3:          CALL	SUB		;HLH'L'=HLH'L'-DED'E'
0046AD DC 53 4E    0307*                  CALL	C,NEG		;NEGATE HLH'L'B'C'
0046B0 CD BF 4E    0308*                  CALL	FLO48
0046B3 2F          0309*                  CPL			;CHANGE RESULT SIGN
0046B4 D9          0310*  FADD4:          EXX
0046B5 EB          0311*                  EX	DE,HL
0046B6 21 00 80    0312*                  LD	HL,8000H
0046B9 B7          0313*                  OR	A		;CLEAR CARRY
0046BA ED 42       0314*                  SBC	HL,BC
0046BC EB          0315*                  EX	DE,HL
0046BD D9          0316*                  EXX
0046BE CC 0F 4F    0317*                  CALL	Z,ODD		;ROUND UNBIASSED
0046C1 DC 01 4F    0318*                  CALL	C,ADD1		;ROUND UP
0046C4 DC 29 4F    0319*                  CALL	C,INCC
0046C7 CB BC       0320*                  RES	7,H
0046C9 0D          0321*                  DEC	C
0046CA 0C          0322*                  INC	C
0046CB CA 5A 4F    0323*                  JP	Z,ZEROmat
0046CE B7          0324*                  OR	A		;RESULT SIGNQ
0046CF F0          0325*                  RET	P		;POSITIVE
0046D0 CB FC       0326*                  SET	7,H		;NEGATIVE
0046D2 C9          0327*                  RET
0046D3             0328*  ;
0046D3             0329*  ;IDIV - Integer division.
0046D3             0330*  ;FDIV - Floating point division with rounding.
0046D3             0331*  ;
0046D3 CD E2 4E    0332*  IDIV:           CALL	FLOAT2
0046D6 05          0333*  FDIV:           DEC	B		;TEST FOR ZERO
0046D7 04          0334*                  INC	B
0046D8 3E 12       0335*                  LD	A,DIVBY0
0046DA CA 5F 45    0336*                  JP	Z,ERROR_mat		;"Division by zero"
0046DD 0D          0337*                  DEC	C		;TEST FOR ZERO
0046DE 0C          0338*                  INC	C
0046DF C8          0339*                  RET	Z
0046E0 7C          0340*                  LD	A,H
0046E1 AA          0341*                  XOR	D		;CALC. RESULT SIGN
0046E2 08          0342*                  EX	AF,AF'		;SAVE SIGN
0046E3 CB FA       0343*                  SET	7,D		;REPLACE IMPLIED 1's
0046E5 CB FC       0344*                  SET	7,H
0046E7 C5          0345*                  PUSH	BC		;SAVE EXPONENTS
0046E8 42          0346*                  LD	B,D		;LOAD REGISTERS
0046E9 4B          0347*                  LD	C,E
0046EA 11 00 00    0348*                  LD	DE,0
0046ED D9          0349*                  EXX
0046EE 42          0350*                  LD	B,D
0046EF 4B          0351*                  LD	C,E
0046F0 11 00 00    0352*                  LD	DE,0
0046F3 3E E0       0353*                  LD	A,-32		;LOOP COUNTER
0046F5 CD 6A 50    0354*                  CALL	DIVA		;DIVIDE
0046F8 D9          0355*                  EXX
0046F9 CB 7A       0356*                  BIT	7,D
0046FB D9          0357*                  EXX
0046FC CC 85 50    0358*                  CALL	Z,DIVB		;NORMALISE & INC A
0046FF EB          0359*                  EX	DE,HL
004700 D9          0360*                  EXX
004701 CB 38       0361*                  SRL	B		;DIVISOR/2
004703 CB 19       0362*                  RR	C
004705 B7          0363*                  OR	A		;CLEAR CARRY
004706 ED 42       0364*                  SBC	HL,BC		;REMAINDER-DIVISOR/2
004708 3F          0365*                  CCF
004709 EB          0366*                  EX	DE,HL		;RESULT IN HLH'L'
00470A CC 0F 4F    0367*                  CALL	Z,ODD		;ROUND UNBIASSED
00470D DC 01 4F    0368*                  CALL	C,ADD1		;ROUND UP
004710 C1          0369*                  POP	BC		;RESTORE EXPONENTS
004711 DC 29 4F    0370*                  CALL	C,INCC
004714 1F          0371*                  RRA			;LSB OF A TO CARRY
004715 79          0372*                  LD	A,C		;COMPUTE NEW EXPONENT
004716 98          0373*                  SBC	A,B
004717 3F          0374*                  CCF
004718 C3 7F 47    0375*                  JP	CHKOVF
00471B             0376*  ;
00471B             0377*  ;IMUL - Integer multiplication.
00471B             0378*  ;
00471B 7C          0379*  IMUL:           LD	A,H
00471C AA          0380*                  XOR	D
00471D CD 2E 51    0381*                  CALL	ABS2		;MAKE BOTH POSITIVE
004720 3E DF       0382*                  LD	A,-33
004722 CD 98 50    0383*                  CALL	MULA		;MULTIPLY
004725 D9          0384*                  EXX
004726 0E BF       0385*                  LD	C,191		;PRESET EXPONENT
004728 CD 3A 4F    0386*                  CALL	TESTmat		;TEST RANGE
00472B 20 0D       0387*                  JR	NZ,IMUL1	;TOO BIG
00472D CB 7A       0388*                  BIT	7,D
00472F 20 09       0389*                  JR	NZ,IMUL1
004731 CD 15 4F    0390*                  CALL	SWAP
004734 4A          0391*                  LD	C,D		;INTEGER MARKER
004735 08          0392*                  EX	AF,AF'
004736 F0          0393*                  RET	P
004737 C3 3F 4E    0394*                  JP	NEGATE
00473A             0395*  ;
00473A 0D          0396*  IMUL1:          DEC	C
00473B CD 01 51    0397*                  CALL	SLA8
00473E F2 3A 47    0398*                  JP	P,IMUL1		;NORMALISE
004741 08          0399*                  EX	AF,AF'
004742 F8          0400*                  RET	M
004743 CB BC       0401*                  RES	7,H		;POSITIVE
004745 C9          0402*                  RET
004746             0403*  ;
004746             0404*  ;FMUL - Floating point multiplication with rounding.
004746             0405*  ;
004746 05          0406*  FMUL:           DEC	B		;TEST FOR ZERO
004747 04          0407*                  INC	B
004748 CA 5A 4F    0408*                  JP	Z,ZEROmat
00474B 0D          0409*                  DEC	C		;TEST FOR ZERO
00474C 0C          0410*                  INC	C
00474D C8          0411*                  RET	Z
00474E 7C          0412*                  LD	A,H
00474F AA          0413*                  XOR	D		;CALC. RESULT SIGN
004750 08          0414*                  EX	AF,AF'
004751 CB FA       0415*                  SET	7,D		;REPLACE IMPLIED 1's
004753 CB FC       0416*                  SET	7,H
004755 C5          0417*                  PUSH	BC		;SAVE EXPONENTS
004756 44          0418*                  LD	B,H		;LOAD REGISTERS
004757 4D          0419*                  LD	C,L
004758 21 00 00    0420*                  LD	HL,0
00475B D9          0421*                  EXX
00475C 44          0422*                  LD	B,H
00475D 4D          0423*                  LD	C,L
00475E 21 00 00    0424*                  LD	HL,0
004761 3E E0       0425*                  LD	A,-32		;LOOP COUNTER
004763 CD 98 50    0426*                  CALL	MULA		;MULTIPLY
004766 DC AC 50    0427*                  CALL	C,MULB		;NORMALISE & INC A
004769 D9          0428*                  EXX
00476A E5          0429*                  PUSH	HL
00476B 21 00 80    0430*                  LD	HL,8000H
00476E B7          0431*                  OR	A		;CLEAR CARRY
00476F ED 52       0432*                  SBC	HL,DE
004771 E1          0433*                  POP	HL
004772 CC 0F 4F    0434*                  CALL	Z,ODD		;ROUND UNBIASSED
004775 DC 01 4F    0435*                  CALL	C,ADD1		;ROUND UP
004778 C1          0436*                  POP	BC		;RESTORE EXPONENTS
004779 DC 29 4F    0437*                  CALL	C,INCC
00477C 1F          0438*                  RRA			;LSB OF A TO CARRY
00477D 79          0439*                  LD	A,C		;COMPUTE NEW EXPONENT
00477E 88          0440*                  ADC	A,B
00477F 38 05       0441*  CHKOVF:         JR	C,CHKO1
004781 F2 5A 4F    0442*                  JP	P,ZEROmat		;UNDERFLOW
004784 18 03       0443*                  JR	CHKO2
004786 FA 2B 4F    0444*  CHKO1:          JP	M,OFLOW		;OVERFLOW
004789 C6 80       0445*  CHKO2:          ADD	A,80H
00478B 4F          0446*                  LD	C,A
00478C CA 5A 4F    0447*                  JP	Z,ZEROmat
00478F 08          0448*                  EX	AF,AF'		;RESTORE SIGN BIT
004790 CB BC       0449*                  RES	7,H
004792 F0          0450*                  RET	P
004793 CB FC       0451*                  SET	7,H
004795 C9          0452*                  RET
004796             0453*  ;
004796             0454*  ;IPOW - Integer involution.
004796             0455*  ;
004796 CD 15 4F    0456*  IPOW:           CALL	SWAP
004799 CB 7C       0457*                  BIT	7,H
00479B F5          0458*                  PUSH	AF		;SAVE SIGN
00479C C4 3F 4E    0459*                  CALL	NZ,NEGATE
00479F 48          0460*  IPOW0:          LD	C,B
0047A0 06 20       0461*                  LD	B,32		;LOOP COUNTER
0047A2 CD B4 4F    0462*  IPOW1:          CALL	X2
0047A5 38 08       0463*                  JR	C,IPOW2
0047A7 10 F9       0464*                  DJNZ	IPOW1
0047A9 F1          0465*                  POP	AF
0047AA D9          0466*                  EXX
0047AB 2C          0467*                  INC	L		;RESULT=1
0047AC D9          0468*                  EXX
0047AD 4C          0469*                  LD	C,H
0047AE C9          0470*                  RET
0047AF             0471*  ;
0047AF F1          0472*  IPOW2:          POP	AF
0047B0 C5          0473*                  PUSH	BC
0047B1 EB          0474*                  EX	DE,HL
0047B2 E5          0475*                  PUSH	HL
0047B3 D9          0476*                  EXX
0047B4 EB          0477*                  EX	DE,HL
0047B5 E5          0478*                  PUSH	HL
0047B6 D9          0479*                  EXX
0047B7 DD 21 00 00 0480*                  LD	IX,0
0047BB DD 39       0481*                  ADD	IX,SP
0047BD 28 34       0482*                  JR	Z,IPOW4
0047BF C5          0483*                  PUSH	BC
0047C0 D9          0484*                  EXX
0047C1 D5          0485*                  PUSH	DE
0047C2 D9          0486*                  EXX
0047C3 D5          0487*                  PUSH	DE
0047C4 CD EB 4E    0488*                  CALL	SFLOAT
0047C7 CD C9 4A    0489*                  CALL	RECIP
0047CA CD 3F 32    0490*                  CALL	STORE5
0047CD 18 1D       0491*                  JR	IPOW5
0047CF             0492*  ;
0047CF C5          0493*  IPOW3:          PUSH	BC
0047D0 D9          0494*                  EXX
0047D1 CB 23       0495*                  SLA	E
0047D3 CB 12       0496*                  RL	D
0047D5 D5          0497*                  PUSH	DE
0047D6 D9          0498*                  EXX
0047D7 CB 13       0499*                  RL	E
0047D9 CB 12       0500*                  RL	D
0047DB D5          0501*                  PUSH	DE
0047DC 3E 0A       0502*                  LD	A,'*' & 0FH
0047DE F5          0503*                  PUSH	AF
0047DF CD C6 4F    0504*                  CALL	COPY
0047E2 CD 65 45    0505*                  CALL	OP		;SQUARE
0047E5 F1          0506*                  POP	AF
0047E6 CD 2A 1A    0507*                  CALL	DLOAD5
0047E9 DC 65 45    0508*                  CALL	C,OP		;MULTIPLY BY X
0047EC D1          0509*  IPOW5:          POP	DE
0047ED D9          0510*                  EXX
0047EE D1          0511*                  POP	DE
0047EF D9          0512*                  EXX
0047F0 79          0513*                  LD	A,C
0047F1 C1          0514*                  POP	BC
0047F2 4F          0515*                  LD	C,A
0047F3 10 DA       0516*  IPOW4:          DJNZ	IPOW3
0047F5 F1          0517*                  POP	AF
0047F6 F1          0518*                  POP	AF
0047F7 F1          0519*                  POP	AF
0047F8 C9          0520*                  RET
0047F9             0521*  ;
0047F9 F1          0522*  FPOW0:          POP	AF
0047FA F1          0523*                  POP	AF
0047FB F1          0524*                  POP	AF
0047FC 18 A1       0525*                  JR	IPOW0
0047FE             0526*  ;
0047FE             0527*  ;FPOW - Floating-point involution.
0047FE             0528*  ;
0047FE CB 7A       0529*  FPOW:           BIT	7,D
004800 F5          0530*                  PUSH	AF
004801 CD 15 4F    0531*                  CALL	SWAP
004804 CD D4 4F    0532*                  CALL	PUSH5
004807 0D          0533*                  DEC	C
004808 0C          0534*                  INC	C
004809 28 EE       0535*                  JR	Z,FPOW0
00480B 3E 9E       0536*                  LD	A,158
00480D B9          0537*                  CP	C
00480E 38 08       0538*                  JR	C,FPOW1
004810 3C          0539*                  INC	A
004811 CD 17 4E    0540*                  CALL	FIX
004814 08          0541*                  EX	AF,AF'
004815 F2 F9 47    0542*                  JP	P,FPOW0
004818 CD 15 4F    0543*  FPOW1:          CALL	SWAP
00481B CD E0 4A    0544*                  CALL	LN0
00481E CD DD 4F    0545*                  CALL	POP5
004821 F1          0546*                  POP	AF
004822 CD 46 47    0547*                  CALL	FMUL
004825 C3 55 4A    0548*                  JP	EXP0
004828             0549*  ;
004828             0550*  ;Integer and floating-point compare.
004828             0551*  ;Result is TRUE (-1) or FALSE (0).
004828             0552*  ;
004828 CD 64 4F    0553*  FLT:            CALL	FCP
00482B 18 03       0554*                  JR	ILT1
00482D CD 57 4F    0555*  ILT:            CALL	ICP
004830 D0          0556*  ILT1:           RET	NC
004831 18 38       0557*                  JR	TRUE
004833             0558*  ;
004833 CD 64 4F    0559*  FGT:            CALL	FCP
004836 18 03       0560*                  JR	IGT1
004838 CD 57 4F    0561*  IGT:            CALL	ICP
00483B C8          0562*  IGT1:           RET	Z
00483C D8          0563*                  RET	C
00483D 18 2C       0564*                  JR	TRUE
00483F             0565*  ;
00483F CD 64 4F    0566*  FGE:            CALL	FCP
004842 18 03       0567*                  JR	IGE1
004844 CD 57 4F    0568*  IGE:            CALL	ICP
004847 D8          0569*  IGE1:           RET	C
004848 18 21       0570*                  JR	TRUE
00484A             0571*  ;
00484A CD 64 4F    0572*  FLE:            CALL	FCP
00484D 18 03       0573*                  JR	ILE1
00484F CD 57 4F    0574*  ILE:            CALL	ICP
004852 28 17       0575*  ILE1:           JR	Z,TRUE
004854 D0          0576*                  RET	NC
004855 18 14       0577*                  JR	TRUE
004857             0578*  ;
004857 CD 64 4F    0579*  FNE:            CALL	FCP
00485A 18 03       0580*                  JR	INE1
00485C CD 57 4F    0581*  INE:            CALL	ICP
00485F C8          0582*  INE1:           RET	Z
004860 18 09       0583*                  JR	TRUE
004862             0584*  ;
004862 CD 64 4F    0585*  FEQ:            CALL	FCP
004865 18 03       0586*                  JR	IEQ1
004867 CD 57 4F    0587*  IEQ:            CALL	ICP
00486A C0          0588*  IEQ1:           RET	NZ
00486B 21 FF FF    0589*  TRUE:           LD	HL,-1
00486E D9          0590*                  EXX
00486F 21 FF FF    0591*                  LD	HL,-1
004872 D9          0592*                  EXX
004873 AF          0593*                  XOR	A
004874 4F          0594*                  LD	C,A
004875 C9          0595*                  RET
004876             0596*  ;
004876             0597*  ;Integer shifts:
004876             0598*  ;
004876             0599*  ISHX:
004876 CD A7 48    0600*  ISHL:           CALL	SHIFTS
004879 28 07       0601*                  JR	Z,SHRET
00487B D9          0602*  ISHL1:          EXX
00487C 29          0603*                  ADD	HL,HL
00487D D9          0604*                  EXX
00487E ED 6A       0605*                  ADC	HL,HL
004880 10 F9       0606*                  DJNZ	ISHL1
004882 C9          0607*  SHRET:          RET
004883             0608*  ;
004883 CD A7 48    0609*  ISAR:           CALL	SHIFTS
004886 28 FA       0610*                  JR	Z,SHRET
004888 CB 2C       0611*  ISAR1:          SRA	H
00488A CB 1D       0612*                  RR	L
00488C D9          0613*                  EXX
00488D CB 1C       0614*                  RR	H
00488F CB 1D       0615*                  RR	L
004891 D9          0616*                  EXX
004892 10 F4       0617*                  DJNZ	ISAR1
004894 C9          0618*                  RET
004895             0619*  ;
004895 CD A7 48    0620*  ISHR:           CALL	SHIFTS
004898 28 E8       0621*                  JR	Z,SHRET
00489A CB 3C       0622*  ISHR1:          SRL	H
00489C CB 1D       0623*                  RR	L
00489E D9          0624*                  EXX
00489F CB 1C       0625*                  RR	H
0048A1 CB 1D       0626*                  RR	L
0048A3 D9          0627*                  EXX
0048A4 10 F4       0628*                  DJNZ	ISHR1
0048A6 C9          0629*                  RET
0048A7             0630*  ;
0048A7 CD 27 4E    0631*  SHIFTS:         CALL	FIX2
0048AA 7A          0632*                  LD	A,D
0048AB B3          0633*                  OR	E
0048AC D9          0634*                  EXX
0048AD B2          0635*                  OR	D
0048AE 7B          0636*                  LD	A,E
0048AF D9          0637*                  EXX
0048B0 06 20       0638*                  LD	B,32
0048B2 20 02       0639*                  JR	NZ,SHMAX
0048B4 47          0640*                  LD	B,A
0048B5 B7          0641*                  OR	A
0048B6 C9          0642*  SHMAX:          RET
0048B7             0643*  ;
0048B7             0644*  ;FUNCTIONS:
0048B7             0645*  ;
0048B7             0646*  ;Result returned in HLH'L'C (floating point)
0048B7             0647*  ;Result returned in HLH'L' (C=0) (integer)
0048B7             0648*  ;All registers except IY destroyed.
0048B7             0649*  ;
0048B7             0650*  ;ABS - Absolute value
0048B7             0651*  ;Result is numeric, variable type.
0048B7             0652*  ;
0048B7 CB 7C       0653*  ABS:            BIT	7,H
0048B9 C8          0654*                  RET	Z		;POSITIVE/ZERO
0048BA 0D          0655*                  DEC	C
0048BB 0C          0656*                  INC	C
0048BC CA 3F 4E    0657*                  JP	Z,NEGATE	;INTEGER
0048BF CB BC       0658*                  RES	7,H
0048C1 C9          0659*                  RET
0048C2             0660*  ;
0048C2             0661*  ;NOT - Complement integer.
0048C2             0662*  ;Result is integer numeric.
0048C2             0663*  ;
0048C2 CD 30 4E    0664*  CPL_:           CALL	SFIXmat
0048C5 7C          0665*                  LD	A,H
0048C6 2F          0666*                  CPL
0048C7 67          0667*                  LD	H,A
0048C8 7D          0668*                  LD	A,L
0048C9 2F          0669*                  CPL
0048CA 6F          0670*                  LD	L,A
0048CB D9          0671*                  EXX
0048CC 7C          0672*                  LD	A,H
0048CD 2F          0673*                  CPL
0048CE 67          0674*                  LD	H,A
0048CF 7D          0675*                  LD	A,L
0048D0 2F          0676*                  CPL
0048D1 6F          0677*                  LD	L,A
0048D2 D9          0678*                  EXX
0048D3 AF          0679*                  XOR	A		;NUMERIC MARKER
0048D4 C9          0680*                  RET
0048D5             0681*  ;
0048D5             0682*  ;PI - Return PI (3.141592654)
0048D5             0683*  ;Result is floating-point numeric.
0048D5             0684*  ;
0048D5 21 0F 49    0685*  PI:             LD	HL,490FH
0048D8 D9          0686*                  EXX
0048D9 21 A2 DA    0687*                  LD	HL,0DAA2H
0048DC D9          0688*                  EXX
0048DD 0E 81       0689*                  LD	C,81H
0048DF AF          0690*                  XOR	A		;NUMERIC MARKER
0048E0 C9          0691*                  RET
0048E1             0692*  ;
0048E1             0693*  ;DEG - Convert radians to degrees
0048E1             0694*  ;Result is floating-point numeric.
0048E1             0695*  ;
0048E1 CD F1 48    0696*  DEG:            CALL	FPI180
0048E4 CD 46 47    0697*                  CALL	FMUL
0048E7 AF          0698*                  XOR	A
0048E8 C9          0699*                  RET
0048E9             0700*  ;
0048E9             0701*  ;RAD - Convert degrees to radians
0048E9             0702*  ;Result is floating-point numeric.
0048E9             0703*  ;
0048E9 CD F1 48    0704*  RAD:            CALL	FPI180
0048EC CD D6 46    0705*                  CALL	FDIV
0048EF AF          0706*                  XOR	A
0048F0 C9          0707*                  RET
0048F1             0708*  ;
0048F1             0709*  ;180/PI
0048F1             0710*  ;
0048F1 CD EB 4E    0711*  FPI180:         CALL	SFLOAT
0048F4 11 2E 65    0712*                  LD	DE,652EH
0048F7 D9          0713*                  EXX
0048F8 11 D3 E0    0714*                  LD	DE,0E0D3H
0048FB D9          0715*                  EXX
0048FC 06 85       0716*                  LD	B,85H
0048FE C9          0717*                  RET
0048FF             0718*  ;
0048FF             0719*  ;SGN - Return -1, 0 or +1
0048FF             0720*  ;Result is integer numeric.
0048FF             0721*  ;
0048FF CD 3A 4F    0722*  SGN:            CALL	TESTmat
004902 B1          0723*                  OR	C
004903 C8          0724*                  RET	Z		;ZERO
004904 CB 7C       0725*                  BIT	7,H
004906 C2 6B 48    0726*                  JP	NZ,TRUE		;-1
004909 CD 5A 4F    0727*                  CALL	ZEROmat
00490C C3 01 4F    0728*                  JP	ADD1		;1
00490F             0729*  ;
00490F             0730*  ;VAL - Return numeric value of string.
00490F             0731*  ;Input: ASCII string at IX
00490F             0732*  ;Result is variable type numeric.
00490F             0733*  ;
00490F CD 1C 51    0734*  VAL:            CALL	SIGNQ
004912 F5          0735*                  PUSH	AF
004913 CD 6D 4D    0736*                  CALL	CON
004916 F1          0737*                  POP	AF
004917 FE 2D       0738*                  CP	'-'
004919 3E 00       0739*                  LD	A,0		;NUMERIC MARKER
00491B C0          0740*                  RET	NZ
00491C 0D          0741*                  DEC	C
00491D 0C          0742*                  INC	C
00491E CA 3F 4E    0743*                  JP	Z,NEGATE	;ZERO/INTEGER
004921 7C          0744*                  LD	A,H
004922 EE 80       0745*                  XOR	80H		;CHANGE SIGN (FP)
004924 67          0746*                  LD	H,A
004925 AF          0747*                  XOR	A
004926 C9          0748*                  RET
004927             0749*  ;
004927             0750*  ;INT - Floor function
004927             0751*  ;Result is integer numeric.
004927             0752*  ;
004927 0D          0753*  INT_:           DEC	C
004928 0C          0754*                  INC	C
004929 C8          0755*                  RET	Z		;ZERO/INTEGER
00492A 3E 9F       0756*                  LD	A,159
00492C 44          0757*                  LD	B,H		;B7=SIGN BIT
00492D CD 17 4E    0758*                  CALL	FIX
004930 08          0759*                  EX	AF,AF'
004931 A0          0760*                  AND	B
004932 FC 01 4F    0761*                  CALL	M,ADD1		;NEGATIVE NON-INTEGER
004935 78          0762*                  LD	A,B
004936 B7          0763*                  OR	A
004937 FC 3F 4E    0764*                  CALL	M,NEGATE
00493A AF          0765*                  XOR	A
00493B 4F          0766*                  LD	C,A
00493C C9          0767*                  RET
00493D             0768*  ;
00493D             0769*  ;SQR - square root
00493D             0770*  ;Result is floating-point numeric.
00493D             0771*  ;
00493D CD EB 4E    0772*  SQR:            CALL	SFLOAT
004940 CB 7C       0773*  SQR0:           BIT	7,H
004942 3E 15       0774*                  LD	A,NGROOT
004944 C2 5F 45    0775*                  JP	NZ,ERROR_mat	;"-ve root"
004947 0D          0776*                  DEC	C
004948 0C          0777*                  INC	C
004949 C8          0778*                  RET	Z		;ZERO
00494A CB FC       0779*                  SET	7,H		;IMPLIED 1
00494C CB 41       0780*                  BIT	0,C
00494E CC 1D 4F    0781*                  CALL	Z,DIV2		;MAKE EXPONENT ODD
004951 79          0782*                  LD	A,C
004952 D6 80       0783*                  SUB	80H
004954 CB 2F       0784*                  SRA	A		;HALVE EXPONENT
004956 C6 80       0785*                  ADD	A,80H
004958 4F          0786*                  LD	C,A
004959 C5          0787*                  PUSH	BC		;SAVE EXPONENT
00495A EB          0788*                  EX	DE,HL
00495B 21 00 00    0789*                  LD	HL,0
00495E 44          0790*                  LD	B,H
00495F 4D          0791*                  LD	C,L
004960 D9          0792*                  EXX
004961 EB          0793*                  EX	DE,HL
004962 21 00 00    0794*                  LD	HL,0
004965 44          0795*                  LD	B,H
004966 4D          0796*                  LD	C,L
004967 3E E1       0797*                  LD	A,-31
004969 CD CB 50    0798*                  CALL	SQRA		;ROOT
00496C D9          0799*                  EXX
00496D CB 78       0800*                  BIT	7,B
00496F D9          0801*                  EXX
004970 CC CB 50    0802*                  CALL	Z,SQRA		;NORMALISE & INC A
004973 CD EA 50    0803*                  CALL	SQRB
004976 B7          0804*                  OR	A		;CLEAR CARRY
004977 CD 85 50    0805*                  CALL	DIVB
00497A CB 1B       0806*                  RR	E		;LSB TO CARRY
00497C 60          0807*                  LD	H,B
00497D 69          0808*                  LD	L,C
00497E D9          0809*                  EXX
00497F 60          0810*                  LD	H,B
004980 69          0811*                  LD	L,C
004981 DC 01 4F    0812*                  CALL	C,ADD1		;ROUND UP
004984 C1          0813*                  POP	BC		;RESTORE EXPONENT
004985 DC 29 4F    0814*                  CALL	C,INCC
004988 1F          0815*                  RRA
004989 9F          0816*                  SBC	A,A
00498A 81          0817*                  ADD	A,C
00498B 4F          0818*                  LD	C,A
00498C CB BC       0819*                  RES	7,H		;POSITIVE
00498E AF          0820*                  XOR	A
00498F C9          0821*                  RET
004990             0822*  ;
004990             0823*  ;TAN - Tangent function
004990             0824*  ;Result is floating-point numeric.
004990             0825*  ;
004990 CD EB 4E    0826*  TAN:            CALL	SFLOAT
004993 CD D4 4F    0827*                  CALL	PUSH5
004996 CD B0 49    0828*                  CALL	COS0
004999 CD DD 4F    0829*                  CALL	POP5
00499C CD D4 4F    0830*                  CALL	PUSH5
00499F CD 15 4F    0831*                  CALL	SWAP
0049A2 CD BB 49    0832*                  CALL	SIN0
0049A5 CD DD 4F    0833*                  CALL	POP5
0049A8 CD D6 46    0834*                  CALL	FDIV
0049AB AF          0835*                  XOR	A		;NUMERIC MARKER
0049AC C9          0836*                  RET
0049AD             0837*  ;
0049AD             0838*  ;COS - Cosine function
0049AD             0839*  ;Result is floating-point numeric.
0049AD             0840*  ;
0049AD CD EB 4E    0841*  COS:            CALL	SFLOAT
0049B0 CD 60 4E    0842*  COS0:           CALL	SCALE
0049B3 1C          0843*                  INC	E
0049B4 1C          0844*                  INC	E
0049B5 7B          0845*                  LD	A,E
0049B6 18 0E       0846*                  JR	SIN1
0049B8             0847*  ;
0049B8             0848*  ;SIN - Sine function
0049B8             0849*  ;Result is floating-point numeric.
0049B8             0850*  ;
0049B8 CD EB 4E    0851*  SIN:            CALL	SFLOAT
0049BB E5          0852*  SIN0:           PUSH	HL		;H7=SIGN
0049BC CD 60 4E    0853*                  CALL	SCALE
0049BF F1          0854*                  POP	AF
0049C0 07          0855*                  RLCA
0049C1 07          0856*                  RLCA
0049C2 07          0857*                  RLCA
0049C3 E6 04       0858*                  AND	4
0049C5 AB          0859*                  XOR	E
0049C6 F5          0860*  SIN1:           PUSH	AF		;OCTANT
0049C7 CB BC       0861*                  RES	7,H
0049C9 1F          0862*                  RRA
0049CA CD 47 4A    0863*                  CALL	PIBY4
0049CD DC 6E 46    0864*                  CALL	C,RSUB		;X=(PI/4)-X
0049D0 F1          0865*                  POP	AF
0049D1 F5          0866*                  PUSH	AF
0049D2 E6 03       0867*                  AND	3
0049D4 E2 05 4A    0868*                  JP	PO,SIN2		;USE COSINE APPROX.
0049D7 CD D4 4F    0869*                  CALL	PUSH5		;SAVE X
0049DA CD CE 4F    0870*                  CALL	SQUARE		;PUSH X*X
0049DD CD 07 50    0871*                  CALL	POLY
0049E0 B7 A8       0872*                  DW	0A8B7H		;a(8)
0049E2 11 36       0873*                  DW	3611H
0049E4 6D          0874*                  DB	6DH
0049E5 26 DE       0875*                  DW	0DE26H		;a(6)
0049E7 05 D0       0876*                  DW	0D005H
0049E9 73          0877*                  DB	73H
0049EA C0 80       0878*                  DW	80C0H		;a(4)
0049EC 88 08       0879*                  DW	888H
0049EE 79          0880*                  DB	79H
0049EF 9D AA       0881*                  DW	0AA9DH		;a(2)
0049F1 AA AA       0882*                  DW	0AAAAH
0049F3 7D          0883*                  DB	7DH
0049F4 00 00       0884*                  DW	0		;a(0)
0049F6 00 00       0885*                  DW	0
0049F8 80          0886*                  DB	80H
0049F9 CD DD 4F    0887*                  CALL	POP5
0049FC CD DD 4F    0888*                  CALL	POP5
0049FF CD 46 47    0889*                  CALL	FMUL
004A02 C3 27 4A    0890*                  JP	SIN3
004A05             0891*  ;
004A05 CD CE 4F    0892*  SIN2:           CALL	SQUARE		;PUSH X*X
004A08 CD 07 50    0893*                  CALL	POLY
004A0B 71 D5       0894*                  DW	0D571H		;b(8)
004A0D 78 4C       0895*                  DW	4C78H
004A0F 70          0896*                  DB	70H
004A10 AF 94       0897*                  DW	94AFH		;b(6)
004A12 03 B6       0898*                  DW	0B603H
004A14 76          0899*                  DB	76H
004A15 C8 9C       0900*                  DW	9CC8H		;b(4)
004A17 AA 2A       0901*                  DW	2AAAH
004A19 7B          0902*                  DB	7BH
004A1A DD FF       0903*                  DW	0FFDDH		;b(2)
004A1C FF FF       0904*                  DW	0FFFFH
004A1E 7E          0905*                  DB	7EH
004A1F 00 00       0906*                  DW	0		;b(0)
004A21 00 00       0907*                  DW	0
004A23 80          0908*                  DB	80H
004A24 CD DD 4F    0909*                  CALL	POP5
004A27 F1          0910*  SIN3:           POP	AF
004A28 E6 04       0911*                  AND	4
004A2A C8          0912*                  RET	Z
004A2B 0D          0913*                  DEC	C
004A2C 0C          0914*                  INC	C
004A2D C8          0915*                  RET	Z		;ZERO
004A2E CB FC       0916*                  SET	7,H		;MAKE NEGATIVE
004A30 C9          0917*                  RET
004A31             0918*  ;
004A31             0919*  ;Floating-point one:
004A31             0920*  ;
004A31 21 00 00    0921*  FONE:           LD	HL,0
004A34 D9          0922*                  EXX
004A35 21 00 00    0923*                  LD	HL,0
004A38 D9          0924*                  EXX
004A39 0E 80       0925*                  LD	C,80H
004A3B C9          0926*                  RET
004A3C             0927*  ;
004A3C 11 00 00    0928*  DONE:           LD	DE,0
004A3F D9          0929*                  EXX
004A40 11 00 00    0930*                  LD	DE,0
004A43 D9          0931*                  EXX
004A44 06 80       0932*                  LD	B,80H
004A46 C9          0933*                  RET
004A47             0934*  ;
004A47 11 0F 49    0935*  PIBY4:          LD	DE,490FH
004A4A D9          0936*                  EXX
004A4B 11 A2 DA    0937*                  LD	DE,0DAA2H
004A4E D9          0938*                  EXX
004A4F 06 7F       0939*                  LD	B,7FH
004A51 C9          0940*                  RET
004A52             0941*  ;
004A52             0942*  ;EXP - Exponential function
004A52             0943*  ;Result is floating-point numeric.
004A52             0944*  ;
004A52 CD EB 4E    0945*  EXP:            CALL	SFLOAT
004A55 CD D2 4A    0946*  EXP0:           CALL	LN2		;LN(2)
004A58 D9          0947*                  EXX
004A59 1D          0948*                  DEC	E
004A5A 01 CF D1    0949*                  LD	BC,0D1CFH	;0.6931471805599453
004A5D D9          0950*                  EXX
004A5E E5          0951*                  PUSH	HL		;H7=SIGN
004A5F CD 70 4E    0952*                  CALL	MOD48		;"MODULUS"
004A62 F1          0953*                  POP	AF
004A63 CB 7B       0954*                  BIT	7,E
004A65 28 09       0955*                  JR	Z,EXP1
004A67 17          0956*                  RLA
004A68 DA 5A 4F    0957*                  JP	C,ZEROmat
004A6B 3E 18       0958*                  LD	A,EXPRNG
004A6D C3 5F 45    0959*                  JP	ERROR_mat		;"Exp range"
004A70             0960*  ;
004A70 E6 80       0961*  EXP1:           AND	80H
004A72 B3          0962*                  OR	E
004A73 F5          0963*                  PUSH	AF		;INTEGER PART
004A74 CB BC       0964*                  RES	7,H
004A76 CD D4 4F    0965*                  CALL	PUSH5		;PUSH X*LN(2)
004A79 CD 07 50    0966*                  CALL	POLY
004A7C 72 40       0967*                  DW	4072H		;a(7)
004A7E 2E 94       0968*                  DW	942EH
004A80 73          0969*                  DB	73H
004A81 65 6F       0970*                  DW	6F65H		;a(6)
004A83 4F 2E       0971*                  DW	2E4FH
004A85 76          0972*                  DB	76H
004A86 37 6D       0973*                  DW	6D37H		;a(5)
004A88 02 88       0974*                  DW	8802H
004A8A 79          0975*                  DB	79H
004A8B 12 E5       0976*                  DW	0E512H		;a(4)
004A8D A0 2A       0977*                  DW	2AA0H
004A8F 7B          0978*                  DB	7BH
004A90 14 4F       0979*                  DW	4F14H		;a(3)
004A92 AA AA       0980*                  DW	0AAAAH
004A94 7D          0981*                  DB	7DH
004A95 56 FD       0982*                  DW	0FD56H		;a(2)
004A97 FF 7F       0983*                  DW	7FFFH
004A99 7E          0984*                  DB	7EH
004A9A FE FF       0985*                  DW	0FFFEH		;a(1)
004A9C FF FF       0986*                  DW	0FFFFH
004A9E 7F          0987*                  DB	7FH
004A9F 00 00       0988*                  DW	0		;a(0)
004AA1 00 00       0989*                  DW	0
004AA3 80          0990*                  DB	80H
004AA4 CD DD 4F    0991*                  CALL	POP5
004AA7 F1          0992*                  POP	AF
004AA8 F5          0993*                  PUSH	AF
004AA9 F4 C9 4A    0994*                  CALL	P,RECIP		;X=1/X
004AAC F1          0995*                  POP	AF
004AAD F2 B4 4A    0996*                  JP	P,EXP4
004AB0 E6 7F       0997*                  AND	7FH
004AB2 ED 44       0998*                  NEG
004AB4 C6 80       0999*  EXP4:           ADD	A,80H
004AB6 81          1000*                  ADD	A,C
004AB7 38 05       1001*                  JR	C,EXP2
004AB9 F2 5A 4F    1002*                  JP	P,ZEROmat		;UNDERFLOW
004ABC 18 03       1003*                  JR	EXP3
004ABE FA 2B 4F    1004*  EXP2:           JP	M,OFLOW		;OVERFLOW
004AC1 C6 80       1005*  EXP3:           ADD	A,80H
004AC3 CA 5A 4F    1006*                  JP	Z,ZEROmat
004AC6 4F          1007*                  LD	C,A
004AC7 AF          1008*                  XOR	A		;NUMERIC MARKER
004AC8 C9          1009*                  RET
004AC9             1010*  ;
004AC9 CD 3C 4A    1011*  RECIP:          CALL	DONE
004ACC CD 15 4F    1012*  RDIV:           CALL	SWAP
004ACF C3 D6 46    1013*                  JP	FDIV		;RECIPROCAL
004AD2             1014*  ;
004AD2 11 72 31    1015*  LN2:            LD	DE,3172H	;LN(2)
004AD5 D9          1016*                  EXX
004AD6 11 F8 17    1017*                  LD	DE,17F8H
004AD9 D9          1018*                  EXX
004ADA 06 7F       1019*                  LD	B,7FH
004ADC C9          1020*                  RET
004ADD             1021*  ;
004ADD             1022*  ;LN - Natural log.
004ADD             1023*  ;Result is floating-point numeric.
004ADD             1024*  ;
004ADD CD EB 4E    1025*  LN:             CALL	SFLOAT
004AE0 3E 16       1026*  LN0:            LD	A,LOGRNG
004AE2 CB 7C       1027*                  BIT	7,H
004AE4 C2 5F 45    1028*                  JP	NZ,ERROR_mat	;"Log range"
004AE7 0C          1029*                  INC	C
004AE8 0D          1030*                  DEC	C
004AE9 CA 5F 45    1031*                  JP	Z,ERROR_mat
004AEC 11 04 35    1032*                  LD	DE,3504H	;SQR(2)
004AEF D9          1033*                  EXX
004AF0 11 33 F3    1034*                  LD	DE,0F333H	;1.41421356237
004AF3 D9          1035*                  EXX
004AF4 CD 6C 4F    1036*                  CALL	ICP0		;MANTISSA>SQR(2)?
004AF7 79          1037*                  LD	A,C		;EXPONENT
004AF8 0E 80       1038*                  LD	C,80H		;1 <= X < 2
004AFA 38 02       1039*                  JR	C,LN4
004AFC 0D          1040*                  DEC	C
004AFD 3C          1041*                  INC	A
004AFE F5          1042*  LN4:            PUSH	AF		;SAVE EXPONENT
004AFF CD E9 4F    1043*                  CALL	RATIO		;X=(X-1)/(X+1)
004B02 CD D4 4F    1044*                  CALL	PUSH5
004B05 CD CE 4F    1045*                  CALL	SQUARE		;PUSH X*X
004B08 CD 07 50    1046*                  CALL	POLY
004B0B 48 CC       1047*                  DW	0CC48H		;a(9)
004B0D FB 74       1048*                  DW	74FBH
004B0F 7D          1049*                  DB	7DH
004B10 AF AE       1050*                  DW	0AEAFH		;a(7)
004B12 FF 11       1051*                  DW	11FFH
004B14 7E          1052*                  DB	7EH
004B15 8C D9       1053*                  DW	0D98CH		;a(5)
004B17 CD 4C       1054*                  DW	4CCDH
004B19 7E          1055*                  DB	7EH
004B1A E3 A9       1056*                  DW	0A9E3H		;a(3)
004B1C AA 2A       1057*                  DW	2AAAH
004B1E 7F          1058*                  DB	7FH
004B1F 00 00       1059*                  DW	0		;a(1)
004B21 00 00       1060*                  DW	0
004B23 81          1061*                  DB	81H
004B24 CD DD 4F    1062*                  CALL	POP5
004B27 CD DD 4F    1063*                  CALL	POP5
004B2A CD 46 47    1064*                  CALL	FMUL
004B2D F1          1065*                  POP	AF		;EXPONENT
004B2E CD D4 4F    1066*                  CALL	PUSH5
004B31 08          1067*                  EX	AF,AF'
004B32 CD 5A 4F    1068*                  CALL	ZEROmat
004B35 08          1069*                  EX	AF,AF'
004B36 D6 80       1070*                  SUB	80H
004B38 28 1B       1071*                  JR	Z,LN3
004B3A 30 02       1072*                  JR	NC,LN1
004B3C 2F          1073*                  CPL
004B3D 3C          1074*                  INC	A
004B3E 67          1075*  LN1:            LD	H,A
004B3F 0E 87       1076*                  LD	C,87H
004B41 F5          1077*                  PUSH	AF
004B42 CD D1 4E    1078*                  CALL	FLOAT
004B45 CB BC       1079*                  RES	7,H
004B47 CD D2 4A    1080*                  CALL	LN2
004B4A CD 46 47    1081*                  CALL	FMUL
004B4D F1          1082*                  POP	AF
004B4E 30 05       1083*                  JR	NC,LN3
004B50 FA 55 4B    1084*                  JP	M,LN3
004B53 CB FC       1085*                  SET	7,H
004B55 CD DD 4F    1086*  LN3:            CALL	POP5
004B58 CD 7E 46    1087*                  CALL	FADD
004B5B AF          1088*                  XOR	A
004B5C C9          1089*                  RET
004B5D             1090*  ;
004B5D             1091*  ;LOG - base-10 logarithm.
004B5D             1092*  ;Result is floating-point numeric.
004B5D             1093*  ;
004B5D CD DD 4A    1094*  LOG:            CALL	LN
004B60 11 5B 5E    1095*                  LD	DE,5E5BH	;LOG(e)
004B63 D9          1096*                  EXX
004B64 11 A9 D8    1097*                  LD	DE,0D8A9H
004B67 D9          1098*                  EXX
004B68 06 7E       1099*                  LD	B,7EH
004B6A CD 46 47    1100*                  CALL	FMUL
004B6D AF          1101*                  XOR	A
004B6E C9          1102*                  RET
004B6F             1103*  ;
004B6F             1104*  ;ASN - Arc-sine
004B6F             1105*  ;Result is floating-point numeric.
004B6F             1106*  ;
004B6F CD EB 4E    1107*  ASN:            CALL	SFLOAT
004B72 CD D4 4F    1108*                  CALL	PUSH5
004B75 CD C6 4F    1109*                  CALL	COPY
004B78 CD 46 47    1110*                  CALL	FMUL
004B7B CD 3C 4A    1111*                  CALL	DONE
004B7E CD 6E 46    1112*                  CALL	RSUB
004B81 CD 40 49    1113*                  CALL	SQR0
004B84 CD DD 4F    1114*                  CALL	POP5
004B87 0C          1115*                  INC	C
004B88 0D          1116*                  DEC	C
004B89 3E 02       1117*                  LD	A,2
004B8B D5          1118*                  PUSH	DE
004B8C 28 70       1119*                  JR	Z,ACS1
004B8E D1          1120*                  POP	DE
004B8F CD CC 4A    1121*                  CALL	RDIV
004B92 18 03       1122*                  JR	ATN0
004B94             1123*  ;
004B94             1124*  ;ATN - arc-tangent
004B94             1125*  ;Result is floating-point numeric.
004B94             1126*  ;
004B94 CD EB 4E    1127*  ATN:            CALL	SFLOAT
004B97 E5          1128*  ATN0:           PUSH	HL		;SAVE SIGN
004B98 CB BC       1129*                  RES	7,H
004B9A 11 13 54    1130*                  LD	DE,5413H	;TAN(PI/8)=SQR(2)-1
004B9D D9          1131*                  EXX
004B9E 11 D0 CC    1132*                  LD	DE,0CCD0H
004BA1 D9          1133*                  EXX
004BA2 06 7E       1134*                  LD	B,7EH
004BA4 CD 69 4F    1135*                  CALL	FCP0		;COMPARE
004BA7 06 00       1136*                  LD	B,0
004BA9 38 1C       1137*                  JR	C,ATN2
004BAB 11 82 1A    1138*                  LD	DE,1A82H	;TAN(3*PI/8)=SQR(2)+1
004BAE D9          1139*                  EXX
004BAF 11 9A 79    1140*                  LD	DE,799AH
004BB2 D9          1141*                  EXX
004BB3 06 81       1142*                  LD	B,81H
004BB5 CD 69 4F    1143*                  CALL	FCP0		;COMPARE
004BB8 38 08       1144*                  JR	C,ATN1
004BBA CD C9 4A    1145*                  CALL	RECIP		;X=1/X
004BBD 06 02       1146*                  LD	B,2
004BBF C3 C7 4B    1147*                  JP	ATN2
004BC2 CD E9 4F    1148*  ATN1:           CALL	RATIO		;X=(X-1)/(X+1)
004BC5 06 01       1149*                  LD	B,1
004BC7 C5          1150*  ATN2:           PUSH	BC		;SAVE FLAG
004BC8 CD D4 4F    1151*                  CALL	PUSH5
004BCB CD CE 4F    1152*                  CALL	SQUARE		;PUSH X*X
004BCE CD 07 50    1153*                  CALL	POLY
004BD1 35 F3       1154*                  DW	0F335H		;a(13)
004BD3 D8 37       1155*                  DW	37D8H
004BD5 7B          1156*                  DB	7BH
004BD6 91 6B       1157*                  DW	6B91H		;a(11)
004BD8 B9 AA       1158*                  DW	0AAB9H
004BDA 7C          1159*                  DB	7CH
004BDB DE 41       1160*                  DW	41DEH		;a(9)
004BDD 97 61       1161*                  DW	6197H
004BDF 7C          1162*                  DB	7CH
004BE0 7B 9D       1163*                  DW	9D7BH		;a(7)
004BE2 37 92       1164*                  DW	9237H
004BE4 7D          1165*                  DB	7DH
004BE5 5A 2A       1166*                  DW	2A5AH		;a(5)
004BE7 CC 4C       1167*                  DW	4CCCH
004BE9 7D          1168*                  DB	7DH
004BEA 5C A9       1169*                  DW	0A95CH		;a(3)
004BEC AA AA       1170*                  DW	0AAAAH
004BEE 7E          1171*                  DB	7EH
004BEF 00 00       1172*                  DW	0		;a(1)
004BF1 00 00       1173*                  DW	0
004BF3 80          1174*                  DB	80H
004BF4 CD DD 4F    1175*                  CALL	POP5
004BF7 CD DD 4F    1176*                  CALL	POP5
004BFA CD 46 47    1177*                  CALL	FMUL
004BFD F1          1178*                  POP	AF
004BFE CD 47 4A    1179*  ACS1:           CALL	PIBY4		;PI/4
004C01 1F          1180*                  RRA
004C02 F5          1181*                  PUSH	AF
004C03 DC 7E 46    1182*                  CALL	C,FADD
004C06 F1          1183*                  POP	AF
004C07 04          1184*                  INC	B
004C08 1F          1185*                  RRA
004C09 DC 6E 46    1186*                  CALL	C,RSUB
004C0C F1          1187*                  POP	AF
004C0D B7          1188*                  OR	A
004C0E F0          1189*                  RET	P
004C0F CB FC       1190*                  SET	7,H		;MAKE NEGATIVE
004C11 AF          1191*                  XOR	A
004C12 C9          1192*                  RET
004C13             1193*  ;
004C13             1194*  ;ACS - Arc cosine=PI/2-ASN.
004C13             1195*  ;Result is floating point numeric.
004C13             1196*  ;
004C13 CD 6F 4B    1197*  ACS:            CALL	ASN
004C16 3E 02       1198*                  LD	A,2
004C18 F5          1199*                  PUSH	AF
004C19 18 E3       1200*                  JR	ACS1
004C1B             1201*  ;
004C1B             1202*  ;Function STR - convert numeric value to ASCII string.
004C1B             1203*  ;   Inputs: HLH'L'C = integer or floating-point number
004C1B             1204*  ;           DE = address at which to store string
004C1B             1205*  ;           IX = address of @% format control
004C1B             1206*  ;  Outputs: String stored, with NUL terminator
004C1B             1207*  ;
004C1B             1208*  ;First normalise for decimal output:
004C1B             1209*  ;
004C1B CD EB 4E    1210*  STRmat:            CALL	SFLOAT
004C1E 06 00       1211*                  LD	B,0		;DEFAULT PT. POSITION
004C20 CB 7C       1212*                  BIT	7,H		;NEGATIVE?
004C22 28 06       1213*                  JR	Z,STR10
004C24 CB BC       1214*                  RES	7,H
004C26 3E 2D       1215*                  LD	A,'-'
004C28 12          1216*                  LD	(DE),A		;STORE SIGN
004C29 13          1217*                  INC	DE
004C2A AF          1218*  STR10:          XOR	A		;CLEAR A
004C2B B9          1219*                  CP	C
004C2C 28 47       1220*                  JR	Z,STR2mat		;ZERO
004C2E D5          1221*                  PUSH	DE		;SAVE TEXT POINTER
004C2F 78          1222*                  LD	A,B
004C30 F5          1223*  STR11:          PUSH	AF		;SAVE DECIMAL COUNTER
004C31 79          1224*                  LD	A,C		;BINARY EXPONENT
004C32 FE A1       1225*                  CP	161
004C34 30 1A       1226*                  JR	NC,STR14
004C36 FE 9B       1227*                  CP	155
004C38 30 25       1228*                  JR	NC,STR15
004C3A 2F          1229*                  CPL
004C3B FE E1       1230*                  CP	225
004C3D 38 02       1231*                  JR	C,STR13
004C3F 3E F8       1232*                  LD	A,-8
004C41 C6 1C       1233*  STR13:          ADD	A,28
004C43 CD 2E 50    1234*                  CALL	POWR10
004C46 F5          1235*                  PUSH	AF
004C47 CD 46 47    1236*                  CALL	FMUL
004C4A F1          1237*                  POP	AF
004C4B 47          1238*                  LD	B,A
004C4C F1          1239*                  POP	AF
004C4D 90          1240*                  SUB	B
004C4E 18 E0       1241*                  JR	STR11
004C50 D6 20       1242*  STR14:          SUB	32
004C52 CD 2E 50    1243*                  CALL	POWR10
004C55 F5          1244*                  PUSH	AF
004C56 CD D6 46    1245*                  CALL	FDIV
004C59 F1          1246*                  POP	AF
004C5A 47          1247*                  LD	B,A
004C5B F1          1248*                  POP	AF
004C5C 80          1249*                  ADD	A,B
004C5D 18 D1       1250*                  JR	STR11
004C5F 3E 09       1251*  STR15:          LD	A,9
004C61 CD 2E 50    1252*                  CALL	POWR10		;10^9
004C64 CD 69 4F    1253*                  CALL	FCP0
004C67 79          1254*                  LD	A,C
004C68 C1          1255*                  POP	BC
004C69 4F          1256*                  LD	C,A
004C6A CB FC       1257*                  SET	7,H		;IMPLIED 1
004C6C DC 8B 4F    1258*                  CALL	C,X10B		;X10, DEC B
004C6F D1          1259*                  POP	DE		;RESTORE TEXT POINTER
004C70 CB B9       1260*                  RES	7,C
004C72 3E 00       1261*                  LD	A,0
004C74 17          1262*                  RLA			;PUT CARRY IN LSB
004C75             1263*  ;
004C75             1264*  ;At this point decimal normalisation has been done,
004C75             1265*  ;now convert to decimal digits:
004C75             1266*  ;      AHLH'L' = number in normalised integer form
004C75             1267*  ;            B = decimal place adjustment
004C75             1268*  ;            C = binary place adjustment (29-33)
004C75             1269*  ;
004C75 0C          1270*  STR2mat:           INC	C
004C76 08          1271*                  EX	AF,AF'		;SAVE A
004C77 78          1272*                  LD	A,B
004C78 DD CB 02 4E 1273*                  BIT	1,(IX+2)
004C7C 20 08       1274*                  JR	NZ,STR20
004C7E AF          1275*                  XOR	A
004C7F DD BE 01    1276*                  CP	(IX+1)
004C82 28 0A       1277*                  JR	Z,STR21
004C84 3E F6       1278*                  LD	A,-10
004C86 DD 86 01    1279*  STR20:          ADD	A,(IX+1)	;SIG. FIG. COUNT
004C89 B7          1280*                  OR	A		;CLEAR CARRY
004C8A FA 8E 4C    1281*                  JP	M,STR21
004C8D AF          1282*                  XOR	A
004C8E F5          1283*  STR21:          PUSH	AF
004C8F 08          1284*                  EX	AF,AF'		;RESTORE A
004C90 CD B4 4F    1285*  STR22:          CALL	X2		;RL AHLH'L'
004C93 8F          1286*                  ADC	A,A
004C94 FE 0A       1287*                  CP	10
004C96 38 05       1288*                  JR	C,STR23
004C98 D6 0A       1289*                  SUB	10
004C9A D9          1290*                  EXX
004C9B 2C          1291*                  INC	L		;SET RESULT BIT
004C9C D9          1292*                  EXX
004C9D 0D          1293*  STR23:          DEC	C
004C9E 20 F0       1294*                  JR	NZ,STR22	;32 TIMES
004CA0 4F          1295*                  LD	C,A		;REMAINDER
004CA1 7C          1296*                  LD	A,H
004CA2 E6 3F       1297*                  AND	3FH		;CLEAR OUT JUNK
004CA4 67          1298*                  LD	H,A
004CA5 F1          1299*                  POP	AF
004CA6 F2 B3 4C    1300*                  JP	P,STR24
004CA9 3C          1301*                  INC	A
004CAA 20 1C       1302*                  JR	NZ,STR26
004CAC 3E 04       1303*                  LD	A,4
004CAE B9          1304*                  CP	C		;ROUND UP?
004CAF 3E 00       1305*                  LD	A,0
004CB1 18 15       1306*                  JR	STR26
004CB3 F5          1307*  STR24:          PUSH	AF
004CB4 79          1308*                  LD	A,C
004CB5 CE 30       1309*                  ADC	A,'0'		;ADD CARRY
004CB7 FE 30       1310*                  CP	'0'
004CB9 28 05       1311*                  JR	Z,STR25		;SUPPRESS ZERO
004CBB FE 3A       1312*                  CP	'9'+1
004CBD 3F          1313*                  CCF
004CBE 30 08       1314*                  JR	NC,STR26
004CC0 E3          1315*  STR25:          EX	(SP),HL
004CC1 CB 75       1316*                  BIT	6,L		;ZERO FLAG
004CC3 E3          1317*                  EX	(SP),HL
004CC4 20 05       1318*                  JR	NZ,STR27
004CC6 3E 30       1319*                  LD	A,'0'
004CC8 3C          1320*  STR26:          INC	A		;SET +VE
004CC9 3D          1321*                  DEC	A
004CCA F5          1322*                  PUSH	AF		;PUT ON STACK + CARRY
004CCB 04          1323*  STR27:          INC	B
004CCC CD 3A 4F    1324*                  CALL	TESTmat		;IS HLH'L' ZERO?
004CCF 0E 20       1325*                  LD	C,32
004CD1 3E 00       1326*                  LD	A,0
004CD3 20 BB       1327*                  JR	NZ,STR22
004CD5 F1          1328*                  POP	AF
004CD6 F5          1329*                  PUSH	AF
004CD7 3E 00       1330*                  LD	A,0
004CD9 38 B5       1331*                  JR	C,STR22
004CDB             1332*  ;
004CDB             1333*  ;At this point, the decimal character string is stored
004CDB             1334*  ; on the stack. Trailing zeroes are suppressed and may
004CDB             1335*  ; need to be replaced.
004CDB             1336*  ;B register holds decimal point position.
004CDB             1337*  ;Now format number and store as ASCII string:
004CDB             1338*  ;
004CDB EB          1339*  STR3:           EX	DE,HL		;STRING POINTER
004CDC 0E FF       1340*                  LD	C,-1		;FLAG "E"
004CDE 16 01       1341*                  LD	D,1
004CE0 DD 5E 01    1342*                  LD	E,(IX+1)	;f2
004CE3 DD CB 02 46 1343*                  BIT	0,(IX+2)
004CE7 20 32       1344*                  JR	NZ,STR34	;E MODE
004CE9 DD CB 02 4E 1345*                  BIT	1,(IX+2)
004CED 28 11       1346*                  JR	Z,STR31
004CEF 78          1347*                  LD	A,B		;F MODE
004CF0 B7          1348*                  OR	A
004CF1 28 04       1349*                  JR	Z,STR30
004CF3 FA F7 4C    1350*                  JP	M,STR30
004CF6 50          1351*                  LD	D,B
004CF7 7A          1352*  STR30:          LD	A,D
004CF8 DD 86 01    1353*                  ADD	A,(IX+1)
004CFB 5F          1354*                  LD	E,A
004CFC FE 0B       1355*                  CP	11
004CFE 38 17       1356*                  JR	C,STR32
004D00 78          1357*  STR31:          LD	A,B		;G MODE
004D01 11 01 01    1358*                  LD	DE,101H
004D04 B7          1359*                  OR	A
004D05 FA 1B 4D    1360*                  JP	M,STR34
004D08 28 0D       1361*                  JR	Z,STR32
004D0A DD 7E 01    1362*                  LD	A,(IX+1)
004D0D B7          1363*                  OR	A
004D0E 20 02       1364*                  JR	NZ,STR3A
004D10 3E 0A       1365*                  LD	A,10
004D12 B8          1366*  STR3A:          CP	B
004D13 38 06       1367*                  JR	C,STR34
004D15 50          1368*                  LD	D,B
004D16 58          1369*                  LD	E,B
004D17 78          1370*  STR32:          LD	A,B
004D18 C6 81       1371*                  ADD	A,129
004D1A 4F          1372*                  LD	C,A
004D1B CB FA       1373*  STR34:          SET	7,D
004D1D 1D          1374*                  DEC	E
004D1E 7A          1375*  STR35:          LD	A,D
004D1F B9          1376*                  CP	C
004D20 30 0C       1377*                  JR	NC,STR33
004D22 F1          1378*  STR36:          POP	AF
004D23 28 03       1379*                  JR	Z,STR37
004D25 F2 30 4D    1380*                  JP	P,STR38
004D28 F5          1381*  STR37:          PUSH	AF
004D29 1C          1382*                  INC	E
004D2A 1D          1383*                  DEC	E
004D2B FA 3F 4D    1384*                  JP	M,STR4
004D2E 3E 30       1385*  STR33:          LD	A,'0'
004D30 15          1386*  STR38:          DEC	D
004D31 E2 37 4D    1387*                  JP	PO,STR39
004D34 36 2E       1388*                  LD	(HL),'.'
004D36 23          1389*                  INC	HL
004D37 77          1390*  STR39:          LD	(HL),A
004D38 23          1391*                  INC	HL
004D39 1D          1392*                  DEC	E
004D3A F2 1E 4D    1393*                  JP	P,STR35
004D3D 18 E3       1394*                  JR	STR36
004D3F             1395*  ;
004D3F F1          1396*  STR4:           POP	AF
004D40 0C          1397*  STR40:          INC	C
004D41 4D          1398*                  LD	C,L
004D42 20 27       1399*                  JR	NZ,STR44
004D44 36 45       1400*                  LD	(HL),'E'	;EXPONENT
004D46 23          1401*                  INC	HL
004D47 78          1402*                  LD	A,B
004D48 3D          1403*                  DEC	A
004D49 F2 51 4D    1404*                  JP	P,STR41
004D4C 36 2D       1405*                  LD	(HL),'-'
004D4E 23          1406*                  INC	HL
004D4F ED 44       1407*                  NEG
004D51 36 30       1408*  STR41:          LD	(HL),'0'
004D53 28 15       1409*                  JR	Z,STR47
004D55 FE 0A       1410*                  CP	10
004D57 47          1411*                  LD	B,A
004D58 3E 3A       1412*                  LD	A,':'
004D5A 38 03       1413*                  JR	C,STR42
004D5C 23          1414*                  INC	HL
004D5D 36 30       1415*                  LD	(HL),'0'
004D5F 34          1416*  STR42:          INC	(HL)
004D60 BE          1417*                  CP	(HL)
004D61 20 05       1418*                  JR	NZ,STR43
004D63 36 30       1419*                  LD	(HL),'0'
004D65 2B          1420*                  DEC	HL
004D66 34          1421*                  INC	(HL)
004D67 23          1422*                  INC	HL
004D68 10 F5       1423*  STR43:          DJNZ	STR42
004D6A 23          1424*  STR47:          INC	HL
004D6B EB          1425*  STR44:          EX	DE,HL
004D6C C9          1426*                  RET
004D6D             1427*  ;
004D6D             1428*  ;Support subroutines:
004D6D             1429*  ;
004D6D             1430*  ;CON - Get unsigned numeric constant from ASCII string.
004D6D             1431*  ;   Inputs: ASCII string at (IX).
004D6D             1432*  ;  Outputs: Variable-type result in HLH'L'C
004D6D             1433*  ;           IX updated (points to delimiter)
004D6D             1434*  ;           A7 = 0 (numeric marker)
004D6D             1435*  ;
004D6D CD 5A 4F    1436*  CON:            CALL	ZEROmat		;INITIALISE TO ZERO
004D70 0E 00       1437*                  LD	C,0		;TRUNCATION COUNTER
004D72 CD F2 4D    1438*                  CALL	NUMBERmat		;GET INTEGER PART
004D75 FE 2E       1439*                  CP	'.'
004D77 06 00       1440*                  LD	B,0		;DECL. PLACE COUNTER
004D79 CC F0 4D    1441*                  CALL	Z,NUMBIX	;GET FRACTION PART
004D7C FE 45       1442*                  CP	'E'
004D7E 3E 00       1443*                  LD	A,0		;INITIALISE EXPONENT
004D80 CC C1 4D    1444*                  CALL	Z,GETEXP	;GET EXPONENT
004D83 CB 7C       1445*                  BIT	7,H
004D85 20 08       1446*                  JR	NZ,CON0		;INTEGER OVERFLOW
004D87 B7          1447*                  OR	A
004D88 20 05       1448*                  JR	NZ,CON0		;EXPONENT NON-ZERO
004D8A B8          1449*                  CP	B
004D8B 20 02       1450*                  JR	NZ,CON0		;DECIMAL POINT
004D8D B9          1451*                  CP	C
004D8E C8          1452*                  RET	Z		;INTEGER
004D8F 90          1453*  CON0:           SUB	B
004D90 81          1454*                  ADD	A,C
004D91 0E 9F       1455*                  LD	C,159
004D93 CD D1 4E    1456*                  CALL	FLOAT
004D96 CB BC       1457*                  RES	7,H		;DITCH IMPLIED 1
004D98 B7          1458*                  OR	A
004D99 C8          1459*                  RET	Z		;DONE
004D9A FA A5 4D    1460*                  JP	M,CON2		;NEGATIVE EXPONENT
004D9D CD 2E 50    1461*                  CALL	POWR10
004DA0 CD 46 47    1462*                  CALL	FMUL		;SCALE
004DA3 AF          1463*                  XOR	A
004DA4 C9          1464*                  RET
004DA5 FE DA       1465*  CON2:           CP	-38
004DA7 38 0A       1466*                  JR	C,CON3		;CAN'T SCALE IN ONE GO
004DA9 ED 44       1467*                  NEG
004DAB CD 2E 50    1468*                  CALL	POWR10
004DAE CD D6 46    1469*                  CALL	FDIV		;SCALE
004DB1 AF          1470*                  XOR	A
004DB2 C9          1471*                  RET
004DB3 F5          1472*  CON3:           PUSH	AF
004DB4 3E 26       1473*                  LD	A,38
004DB6 CD 2E 50    1474*                  CALL	POWR10
004DB9 CD D6 46    1475*                  CALL	FDIV
004DBC F1          1476*                  POP	AF
004DBD C6 26       1477*                  ADD	A,38
004DBF 18 E4       1478*                  JR	CON2
004DC1             1479*  ;
004DC1             1480*  ;GETEXP - Get decimal exponent from string
004DC1             1481*  ;     Inputs: ASCII string at (IX)
004DC1             1482*  ;             (IX points at 'E')
004DC1             1483*  ;             A = initial value
004DC1             1484*  ;    Outputs: A = new exponent
004DC1             1485*  ;             IX updated.
004DC1             1486*  ;   Destroys: A,A',IX,F,F'
004DC1             1487*  ;
004DC1 C5          1488*  GETEXP:         PUSH	BC		;SAVE REGISTERS
004DC2 47          1489*                  LD	B,A		;INITIAL VALUE
004DC3 0E 02       1490*                  LD	C,2		;2 DIGITS MAX
004DC5 DD 23       1491*                  INC	IX		;BUMP PAST 'E'
004DC7 CD 1C 51    1492*                  CALL	SIGNQ
004DCA 08          1493*                  EX	AF,AF'		;SAVE EXPONENT SIGN
004DCB CD 12 51    1494*  GETEX1:         CALL	DIGITQ
004DCE 38 17       1495*                  JR	C,GETEX2
004DD0 78          1496*                  LD	A,B		;B=B*10
004DD1 87          1497*                  ADD	A,A
004DD2 87          1498*                  ADD	A,A
004DD3 80          1499*                  ADD	A,B
004DD4 87          1500*                  ADD	A,A
004DD5 47          1501*                  LD	B,A
004DD6 DD 7E 00    1502*                  LD	A,(IX)		;GET BACK DIGIT
004DD9 DD 23       1503*                  INC	IX
004DDB E6 0F       1504*                  AND	0FH		;MASK UNWANTED BITS
004DDD 80          1505*                  ADD	A,B		;ADD IN DIGIT
004DDE 47          1506*                  LD	B,A
004DDF 0D          1507*                  DEC	C
004DE0 F2 CB 4D    1508*                  JP	P,GETEX1
004DE3 06 64       1509*                  LD	B,100		;FORCE OVERFLOW
004DE5 18 E4       1510*                  JR	GETEX1
004DE7 08          1511*  GETEX2:         EX	AF,AF'		;RESTORE SIGN
004DE8 FE 2D       1512*                  CP	'-'
004DEA 78          1513*                  LD	A,B
004DEB C1          1514*                  POP	BC		;RESTORE
004DEC C0          1515*                  RET	NZ
004DED ED 44       1516*                  NEG			;NEGATE EXPONENT
004DEF C9          1517*                  RET
004DF0             1518*  ;
004DF0             1519*  ;NUMBER: Get unsigned integer from string.
004DF0             1520*  ;    Inputs: string at (IX)
004DF0             1521*  ;            C = truncated digit count
004DF0             1522*  ;                (initially zero)
004DF0             1523*  ;            B = total digit count
004DF0             1524*  ;            HLH'L' = initial value
004DF0             1525*  ;   Outputs: HLH'L' = number (binary integer)
004DF0             1526*  ;            A = delimiter.
004DF0             1527*  ;            B, C & IX updated
004DF0             1528*  ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004DF0             1529*  ;
004DF0 DD 23       1530*  NUMBIX:         INC	IX
004DF2 CD 12 51    1531*  NUMBERmat:         CALL	DIGITQ
004DF5 D8          1532*                  RET	C
004DF6 04          1533*                  INC	B		;INCREMENT DIGIT COUNT
004DF7 DD 23       1534*                  INC	IX
004DF9 CD A5 4F    1535*                  CALL	X10		;*10 & COPY OLD VALUE
004DFC 38 13       1536*                  JR	C,NUMB1		;OVERFLOW
004DFE 0D          1537*                  DEC	C		;SEE IF TRUNCATED
004DFF 0C          1538*                  INC	C
004E00 20 0F       1539*                  JR	NZ,NUMB1	;IMPORTANT!
004E02 E6 0F       1540*                  AND	0FH
004E04 D9          1541*                  EXX
004E05 06 00       1542*                  LD	B,0
004E07 4F          1543*                  LD	C,A
004E08 09          1544*                  ADD	HL,BC		;ADD IN DIGIT
004E09 D9          1545*                  EXX
004E0A 30 E6       1546*                  JR	NC,NUMBERmat
004E0C 23          1547*                  INC	HL		;CARRY
004E0D 7C          1548*                  LD	A,H
004E0E B5          1549*                  OR	L
004E0F 20 E1       1550*                  JR	NZ,NUMBERmat
004E11 0C          1551*  NUMB1:          INC	C		;TRUNCATION COUNTER
004E12 CD 18 4F    1552*                  CALL	SWAP1		;RESTORE PREVIOUS VALUE
004E15 18 DB       1553*                  JR	NUMBERmat
004E17             1554*  ;
004E17             1555*  ;FIX - Fix number to specified exponent value.
004E17             1556*  ;    Inputs: HLH'L'C = +ve non-zero number (floated)
004E17             1557*  ;            A = desired exponent (A>C)
004E17             1558*  ;   Outputs: HLH'L'C = fixed number (unsigned)
004E17             1559*  ;            fraction shifted into B'C'
004E17             1560*  ;            A'F' positive if integer input
004E17             1561*  ;  Destroys: C,H,L,A',B',C',H',L',F,F'
004E17             1562*  ;
004E17 08          1563*  FIX:            EX	AF,AF'
004E18 AF          1564*                  XOR	A
004E19 08          1565*                  EX	AF,AF'
004E1A CB FC       1566*                  SET	7,H		;IMPLIED 1
004E1C CD 1D 4F    1567*  FIX1:           CALL	DIV2
004E1F B9          1568*                  CP	C
004E20 C8          1569*                  RET	Z
004E21 D2 1C 4E    1570*                  JP	NC,FIX1
004E24 C3 2B 4F    1571*                  JP	OFLOW
004E27             1572*  ;
004E27             1573*  ;SFIXmat - Convert to integer if necessary.
004E27             1574*  ;    Input: Variable-type number in HLH'L'C
004E27             1575*  ;   Output: Integer in HLH'L', C=0
004E27             1576*  ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
004E27             1577*  ;
004E27             1578*  ;NEGATE - Negate HLH'L'
004E27             1579*  ;    Destroys: H,L,H',L',F
004E27             1580*  ;
004E27 CD 15 4F    1581*  FIX2:           CALL	SWAP
004E2A CD 30 4E    1582*                  CALL	SFIXmat
004E2D CD 15 4F    1583*                  CALL	SWAP
004E30 0D          1584*  SFIXmat:           DEC	C
004E31 0C          1585*                  INC	C
004E32 C8          1586*                  RET	Z		;INTEGER/ZERO
004E33 CB 7C       1587*                  BIT	7,H		;SIGN
004E35 F5          1588*                  PUSH	AF
004E36 3E 9F       1589*                  LD	A,159
004E38 CD 17 4E    1590*                  CALL	FIX
004E3B F1          1591*                  POP	AF
004E3C 0E 00       1592*                  LD	C,0
004E3E C8          1593*                  RET	Z
004E3F B7          1594*  NEGATE:         OR	A		;CLEAR CARRY
004E40 D9          1595*                  EXX
004E41 D5          1596*  NEG0:           PUSH	DE
004E42 EB          1597*                  EX	DE,HL
004E43 21 00 00    1598*                  LD	HL,0
004E46 ED 52       1599*                  SBC	HL,DE
004E48 D1          1600*                  POP	DE
004E49 D9          1601*                  EXX
004E4A D5          1602*                  PUSH	DE
004E4B EB          1603*                  EX	DE,HL
004E4C 21 00 00    1604*                  LD	HL,0
004E4F ED 52       1605*                  SBC	HL,DE
004E51 D1          1606*                  POP	DE
004E52 C9          1607*                  RET
004E53             1608*  ;
004E53             1609*  ;NEG - Negate HLH'L'B'C'
004E53             1610*  ;    Also complements A (used in FADD)
004E53             1611*  ;    Destroys: A,H,L,B',C',H',L',F
004E53             1612*  ;
004E53 D9          1613*  NEG:            EXX
004E54 2F          1614*                  CPL
004E55 E5          1615*                  PUSH	HL
004E56 B7          1616*                  OR	A		;CLEAR CARRY
004E57 ED 62       1617*                  SBC	HL,HL
004E59 ED 42       1618*                  SBC	HL,BC
004E5B 44          1619*                  LD	B,H
004E5C 4D          1620*                  LD	C,L
004E5D E1          1621*                  POP	HL
004E5E 18 E1       1622*                  JR	NEG0
004E60             1623*  ;
004E60             1624*  ;SCALE - Trig scaling.
004E60             1625*  ;MOD48 - 48-bit floating-point "modulus" (remainder).
004E60             1626*  ;   Inputs: HLH'L'C unsigned floating-point dividend
004E60             1627*  ;           DED'E'B'C'B unsigned 48-bit FP divisor
004E60             1628*  ;  Outputs: HLH'L'C floating point remainder (H7=1)
004E60             1629*  ;           E = quotient (bit 7 is sticky)
004E60             1630*  ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
004E60             1631*  ;FLO48 - Float unsigned number (48 bits)
004E60             1632*  ;    Input/output in HLH'L'B'C'C
004E60             1633*  ;   Destroys: C,H,L,B',C',H',L',F
004E60             1634*  ;
004E60 3E 96       1635*  SCALE:          LD	A,150
004E62 B9          1636*                  CP	C
004E63 3E 17       1637*                  LD	A,ACLOST
004E65 DA 5F 45    1638*                  JP	C,ERROR_mat		;"Accuracy lost"
004E68 CD 47 4A    1639*                  CALL	PIBY4
004E6B D9          1640*                  EXX
004E6C 01 69 21    1641*                  LD	BC,2169H	;3.141592653589793238
004E6F D9          1642*                  EXX
004E70 CB FA       1643*  MOD48:          SET	7,D		;IMPLIED 1
004E72 CB FC       1644*                  SET	7,H
004E74 79          1645*                  LD	A,C
004E75 0E 00       1646*                  LD	C,0		;INIT QUOTIENT
004E77 DD 21 00 00 1647*                  LD	IX,0
004E7B DD E5       1648*                  PUSH	IX		;PUT ZERO ON STACK
004E7D B8          1649*                  CP	B
004E7E 38 3A       1650*                  JR	C,MOD485	;DIVIDEND<DIVISOR
004E80 D9          1651*  MOD481:         EXX			;CARRY=0 HERE
004E81 E3          1652*                  EX	(SP),HL
004E82 ED 42       1653*                  SBC	HL,BC
004E84 E3          1654*                  EX	(SP),HL
004E85 ED 52       1655*                  SBC	HL,DE
004E87 D9          1656*                  EXX
004E88 ED 52       1657*                  SBC	HL,DE
004E8A 30 09       1658*                  JR	NC,MOD482	;DIVIDEND>=DIVISOR
004E8C D9          1659*                  EXX
004E8D E3          1660*                  EX	(SP),HL
004E8E 09          1661*                  ADD	HL,BC
004E8F E3          1662*                  EX	(SP),HL
004E90 ED 5A       1663*                  ADC	HL,DE
004E92 D9          1664*                  EXX
004E93 ED 5A       1665*                  ADC	HL,DE
004E95 3F          1666*  MOD482:         CCF
004E96 CB 11       1667*                  RL	C		;QUOTIENT
004E98 30 02       1668*                  JR	NC,MOD483
004E9A CB F9       1669*                  SET	7,C		;STICKY BIT
004E9C 3D          1670*  MOD483:         DEC	A
004E9D B8          1671*                  CP	B
004E9E 38 19       1672*                  JR	C,MOD484	;DIVIDEND<DIVISOR
004EA0 E3          1673*                  EX	(SP),HL
004EA1 29          1674*                  ADD	HL,HL		;DIVIDEND * 2
004EA2 E3          1675*                  EX	(SP),HL
004EA3 D9          1676*                  EXX
004EA4 ED 6A       1677*                  ADC	HL,HL
004EA6 D9          1678*                  EXX
004EA7 ED 6A       1679*                  ADC	HL,HL
004EA9 30 D5       1680*                  JR	NC,MOD481	;AGAIN
004EAB B7          1681*                  OR	A
004EAC D9          1682*                  EXX
004EAD E3          1683*                  EX	(SP),HL
004EAE ED 42       1684*                  SBC	HL,BC		;OVERFLOW, SO SUBTRACT
004EB0 E3          1685*                  EX	(SP),HL
004EB1 ED 52       1686*                  SBC	HL,DE
004EB3 D9          1687*                  EXX
004EB4 ED 52       1688*                  SBC	HL,DE
004EB6 B7          1689*                  OR	A
004EB7 18 DC       1690*                  JR	MOD482
004EB9             1691*  ;
004EB9 3C          1692*  MOD484:         INC	A
004EBA 59          1693*  MOD485:         LD	E,C		;QUOTIENT
004EBB 4F          1694*                  LD	C,A		;REMAINDER EXPONENT
004EBC D9          1695*                  EXX
004EBD C1          1696*                  POP	BC
004EBE D9          1697*                  EXX
004EBF CB 7C       1698*  FLO48:          BIT	7,H
004EC1 C0          1699*                  RET	NZ
004EC2 D9          1700*                  EXX
004EC3 CB 21       1701*                  SLA	C
004EC5 CB 10       1702*                  RL	B
004EC7 ED 6A       1703*                  ADC	HL,HL
004EC9 D9          1704*                  EXX
004ECA ED 6A       1705*                  ADC	HL,HL
004ECC 0D          1706*                  DEC	C
004ECD C2 BF 4E    1707*                  JP	NZ,FLO48
004ED0 C9          1708*                  RET
004ED1             1709*  ;
004ED1             1710*  ;Float unsigned number
004ED1             1711*  ;    Input/output in HLH'L'C
004ED1             1712*  ;   Destroys: C,H,L,H',L',F
004ED1             1713*  ;
004ED1 CB 7C       1714*  FLOAT:          BIT	7,H
004ED3 C0          1715*                  RET	NZ
004ED4 D9          1716*                  EXX			;SAME AS "X2"
004ED5 29          1717*                  ADD	HL,HL		;TIME-CRITICAL
004ED6 D9          1718*                  EXX			;REGION
004ED7 ED 6A       1719*                  ADC	HL,HL		;(BENCHMARKS)
004ED9 0D          1720*                  DEC	C
004EDA C2 D1 4E    1721*                  JP	NZ,FLOAT
004EDD C9          1722*                  RET
004EDE             1723*  ;
004EDE             1724*  ;SFLOAT - Convert to floating-point if necessary.
004EDE             1725*  ;    Input: Variable-type number in HLH'L'C
004EDE             1726*  ;    Output: Floating-point in HLH'L'C
004EDE             1727*  ;    Destroys: A,C,H,L,H',L',F
004EDE             1728*  ;
004EDE 08          1729*  FLOATA:         EX	AF,AF'
004EDF             1730*                  ; ADD	A,(RTABLE-DTABLE)/2
004EDF C6 2E       1731*                  ADD	A,RTABLE-DTABLE/2
004EE1 08          1732*                  EX	AF,AF'
004EE2 CD 15 4F    1733*  FLOAT2:         CALL	SWAP
004EE5 CD EB 4E    1734*                  CALL	SFLOAT
004EE8 CD 15 4F    1735*                  CALL	SWAP
004EEB 0D          1736*  SFLOAT:         DEC	C
004EEC 0C          1737*                  INC	C
004EED C0          1738*                  RET	NZ		;ALREADY FLOATING-POINT
004EEE CD 3A 4F    1739*                  CALL	TESTmat
004EF1 C8          1740*                  RET	Z		;ZERO
004EF2 7C          1741*                  LD	A,H
004EF3 B7          1742*                  OR	A
004EF4 FC 3F 4E    1743*                  CALL	M,NEGATE
004EF7 0E 9F       1744*                  LD	C,159
004EF9 CD D1 4E    1745*                  CALL	FLOAT
004EFC B7          1746*                  OR	A
004EFD F8          1747*                  RET	M		;NEGATIVE
004EFE CB BC       1748*                  RES	7,H
004F00 C9          1749*                  RET
004F01             1750*  ;
004F01             1751*  ;ROUND UP
004F01             1752*  ;Return with carry set if 32-bit overflow
004F01             1753*  ;   Destroys: H,L,B',C',H',L',F
004F01             1754*  ;
004F01 D9          1755*  ADD1:           EXX
004F02 01 01 00    1756*                  LD	BC,1
004F05 09          1757*                  ADD	HL,BC
004F06 D9          1758*                  EXX
004F07 D0          1759*                  RET	NC
004F08 C5          1760*                  PUSH	BC
004F09 01 01 00    1761*                  LD	BC,1
004F0C 09          1762*                  ADD	HL,BC
004F0D C1          1763*                  POP	BC
004F0E C9          1764*                  RET
004F0F             1765*  ;
004F0F             1766*  ;ODD - Add one if even, leave alone if odd.
004F0F             1767*  ; (Used to perform unbiassed rounding, i.e.
004F0F             1768*  ;  number is rounded up half the time)
004F0F             1769*  ;    Destroys: L',F (carry cleared)
004F0F             1770*  ;
004F0F B7          1771*  ODD:            OR	A		;CLEAR CARRY
004F10 D9          1772*                  EXX
004F11 CB C5       1773*                  SET	0,L		;MAKE ODD
004F13 D9          1774*                  EXX
004F14 C9          1775*                  RET
004F15             1776*  ;
004F15             1777*  ;SWAP - Swap arguments.
004F15             1778*  ;    Exchanges DE,HL D'E',H'L' and B,C
004F15             1779*  ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
004F15             1780*  ;SWAP1 - Swap DEHL with D'E'H'L'
004F15             1781*  ;    Destroys: D,E,H,L,D',E',H',L'
004F15             1782*  ;
004F15 79          1783*  SWAP:           LD	A,C
004F16 48          1784*                  LD	C,B
004F17 47          1785*                  LD	B,A
004F18 EB          1786*  SWAP1:          EX	DE,HL
004F19 D9          1787*                  EXX
004F1A EB          1788*                  EX	DE,HL
004F1B D9          1789*                  EXX
004F1C C9          1790*                  RET
004F1D             1791*  ;
004F1D             1792*  ;DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
004F1D             1793*  ;INCC - destroys C,F
004F1D             1794*  ;OFLOW
004F1D             1795*  ;
004F1D CD BB 4F    1796*  DIV2:           CALL	D2
004F20 D9          1797*                  EXX
004F21 CB 18       1798*                  RR	B
004F23 CB 19       1799*                  RR	C
004F25 08          1800*                  EX	AF,AF'
004F26 B0          1801*                  OR	B
004F27 08          1802*                  EX	AF,AF'
004F28 D9          1803*                  EXX
004F29 0C          1804*  INCC:           INC	C
004F2A C0          1805*                  RET	NZ
004F2B 3E 14       1806*  OFLOW:          LD	A,TOOBIG
004F2D C3 5F 45    1807*                  JP	ERROR_mat		;"Too big"
004F30             1808*  ;
004F30             1809*  ;FTEST - Test for zero & sign
004F30             1810*  ;    Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
004F30             1811*  ;
004F30 CD 3A 4F    1812*  FTEST:          CALL	TESTmat
004F33 C8          1813*                  RET	Z
004F34 7C          1814*                  LD	A,H
004F35 E6 80       1815*                  AND	10000000B
004F37 F6 40       1816*                  OR	01000000B
004F39 C9          1817*                  RET
004F3A             1818*  ;
004F3A             1819*  ;TEST - Test HLH'L' for zero.
004F3A             1820*  ;    Output: Z-flag set & A=0 if HLH'L'=0
004F3A             1821*  ;    Destroys: A,F
004F3A             1822*  ;
004F3A 7C          1823*  TESTmat:           LD	A,H
004F3B B5          1824*                  OR	L
004F3C D9          1825*                  EXX
004F3D B4          1826*                  OR	H
004F3E B5          1827*                  OR	L
004F3F D9          1828*                  EXX
004F40 C9          1829*                  RET
004F41             1830*  ;
004F41             1831*  ;FCOMP - Compare two numbers
004F41             1832*  ;    Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
004F41             1833*  ;
004F41 78          1834*  FCOMP:          LD	A,B
004F42 B1          1835*                  OR	C		;Both integer?
004F43 20 0A       1836*                  JR	NZ,FCOMP1
004F45 CD 57 4F    1837*                  CALL	ICP
004F48 3E 00       1838*  FCOMP0:         LD	A,0
004F4A C8          1839*                  RET	Z		;Equal
004F4B 3E 80       1840*                  LD	A,80H
004F4D 1F          1841*                  RRA
004F4E C9          1842*                  RET
004F4F             1843*  ;
004F4F CD E2 4E    1844*  FCOMP1:         CALL	FLOAT2		;Float both
004F52 CD 64 4F    1845*                  CALL	FCP
004F55 18 F1       1846*                  JR	FCOMP0
004F57             1847*  ;
004F57             1848*  ;Integer and floating point compare.
004F57             1849*  ;Sets carry & zero flags according to HLH'L'C-DED'E'B
004F57             1850*  ;Result pre-set to FALSE
004F57             1851*  ;ICP1, FCP1 destroy A,F
004F57             1852*  ;
004F57             1853*  ;ZERO - Return zero.
004F57             1854*  ; Destroys: A,C,H,L,H',L'
004F57             1855*  ;
004F57 CD 83 4F    1856*  ICP:            CALL	ICP1
004F5A 3E 00       1857*  ZEROmat:           LD	A,0
004F5C D9          1858*                  EXX
004F5D 67          1859*                  LD	H,A
004F5E 6F          1860*                  LD	L,A
004F5F D9          1861*                  EXX
004F60 67          1862*                  LD	H,A
004F61 6F          1863*                  LD	L,A
004F62 4F          1864*                  LD	C,A
004F63 C9          1865*                  RET
004F64             1866*  ;
004F64 CD 76 4F    1867*  FCP:            CALL	FCP1
004F67 18 F1       1868*                  JR	ZEROmat		;PRESET FALSE
004F69             1869*  ;
004F69 79          1870*  FCP0:           LD	A,C
004F6A B8          1871*                  CP	B		;COMPARE EXPONENTS
004F6B C0          1872*                  RET	NZ
004F6C ED 52       1873*  ICP0:           SBC	HL,DE		;COMP MANTISSA MSB
004F6E 19          1874*                  ADD	HL,DE
004F6F C0          1875*                  RET	NZ
004F70 D9          1876*                  EXX
004F71 ED 52       1877*                  SBC	HL,DE		;COMP MANTISSA LSB
004F73 19          1878*                  ADD	HL,DE
004F74 D9          1879*                  EXX
004F75 C9          1880*                  RET
004F76             1881*  ;
004F76 7C          1882*  FCP1:           LD	A,H
004F77 AA          1883*                  XOR	D
004F78 7C          1884*                  LD	A,H
004F79 17          1885*                  RLA
004F7A F8          1886*                  RET	M
004F7B 30 EC       1887*                  JR	NC,FCP0
004F7D CD 69 4F    1888*                  CALL	FCP0
004F80 C8          1889*                  RET	Z		;** V0.1 BUG FIX
004F81 3F          1890*                  CCF
004F82 C9          1891*                  RET
004F83             1892*  ;
004F83 7C          1893*  ICP1:           LD	A,H
004F84 AA          1894*                  XOR	D
004F85 F2 6C 4F    1895*                  JP	P,ICP0
004F88 7C          1896*                  LD	A,H
004F89 17          1897*                  RLA
004F8A C9          1898*                  RET
004F8B             1899*  ;
004F8B             1900*  ;ADD - Integer add.
004F8B             1901*  ;Carry, sign & zero flags valid on exit
004F8B             1902*  ;    Destroys: H,L,H',L',F
004F8B             1903*  ;
004F8B 05          1904*  X10B:           DEC	B
004F8C 0C          1905*                  INC	C
004F8D CD C7 4F    1906*  X5:             CALL	COPY0
004F90 CD BA 4F    1907*                  CALL	D2C
004F93 CD BA 4F    1908*                  CALL	D2C
004F96 08          1909*                  EX	AF,AF'		;SAVE CARRY
004F97 D9          1910*  ADD:            EXX
004F98 19          1911*                  ADD	HL,DE
004F99 D9          1912*                  EXX
004F9A ED 5A       1913*                  ADC	HL,DE
004F9C C9          1914*                  RET
004F9D             1915*  ;
004F9D             1916*  ;SUB - Integer subtract.
004F9D             1917*  ;Carry, sign & zero flags valid on exit
004F9D             1918*  ;    Destroys: H,L,H',L',F
004F9D             1919*  ;
004F9D D9          1920*  SUB:            EXX
004F9E B7          1921*                  OR	A
004F9F ED 52       1922*                  SBC	HL,DE
004FA1 D9          1923*                  EXX
004FA2 ED 52       1924*                  SBC	HL,DE
004FA4 C9          1925*                  RET
004FA5             1926*  ;
004FA5             1927*  ;X10 - unsigned integer * 10
004FA5             1928*  ;   Inputs: HLH'L' initial value
004FA5             1929*  ;  Outputs: DED'E' = initial HLH'L'
004FA5             1930*  ;           Carry bit set if overflow
004FA5             1931*  ;           If carry not set HLH'L'=result
004FA5             1932*  ; Destroys: D,E,H,L,D',E',H',L',F
004FA5             1933*  ;X2 - Multiply HLH'L' by 2 as 32-bit integer.
004FA5             1934*  ;    Carry set if MSB=1 before shift.
004FA5             1935*  ;    Sign set if MSB=1 after shift.
004FA5             1936*  ;    Destroys: H,L,H',L',F
004FA5             1937*  ;
004FA5 CD C7 4F    1938*  X10:            CALL	COPY0		;DED'E'=HLH'L'
004FA8 CD B4 4F    1939*                  CALL	X2
004FAB D8          1940*                  RET	C		;TOO BIG
004FAC CD B4 4F    1941*                  CALL	X2
004FAF D8          1942*                  RET	C
004FB0 CD 97 4F    1943*                  CALL	ADD
004FB3 D8          1944*                  RET	C
004FB4 D9          1945*  X2:             EXX
004FB5 29          1946*                  ADD	HL,HL
004FB6 D9          1947*                  EXX
004FB7 ED 6A       1948*                  ADC	HL,HL
004FB9 C9          1949*                  RET
004FBA             1950*  ;
004FBA             1951*  ;D2 - Divide HLH'L' by 2 as 32-bit integer.
004FBA             1952*  ;    Carry set if LSB=1 before shift.
004FBA             1953*  ;    Destroys: H,L,H',L',F
004FBA             1954*  ;
004FBA 0C          1955*  D2C:            INC	C
004FBB CB 3C       1956*  D2:             SRL	H
004FBD CB 1D       1957*                  RR	L
004FBF D9          1958*                  EXX
004FC0 CB 1C       1959*                  RR	H
004FC2 CB 1D       1960*                  RR	L
004FC4 D9          1961*                  EXX
004FC5 C9          1962*                  RET
004FC6             1963*  ;
004FC6             1964*  ;COPY - COPY HLH'L'C INTO DED'E'B
004FC6             1965*  ;  Destroys: B,C,D,E,H,L,D',E',H',L'
004FC6             1966*  ;
004FC6 41          1967*  COPY:           LD	B,C
004FC7 54          1968*  COPY0:          LD	D,H
004FC8 5D          1969*                  LD	E,L
004FC9 D9          1970*                  EXX
004FCA 54          1971*                  LD	D,H
004FCB 5D          1972*                  LD	E,L
004FCC D9          1973*                  EXX
004FCD C9          1974*                  RET
004FCE             1975*  ;
004FCE             1976*  ;SQUARE - PUSH X*X
004FCE             1977*  ;PUSH5 - PUSH HLH'L'C ONTO STACK.
004FCE             1978*  ;  Destroys: SP,IX
004FCE             1979*  ;
004FCE CD C6 4F    1980*  SQUARE:         CALL	COPY
004FD1 CD 46 47    1981*                  CALL	FMUL
004FD4 DD E1       1982*  PUSH5:          POP	IX		;RETURN ADDRESS
004FD6 C5          1983*                  PUSH	BC
004FD7 E5          1984*                  PUSH	HL
004FD8 D9          1985*                  EXX
004FD9 E5          1986*                  PUSH	HL
004FDA D9          1987*                  EXX
004FDB DD E9       1988*                  JP	(IX)		;"RETURN"
004FDD             1989*  ;
004FDD             1990*  ;POP5 - POP DED'E'B OFF STACK.
004FDD             1991*  ;  Destroys: A,B,D,E,D',E',SP,IX
004FDD             1992*  ;
004FDD DD E1       1993*  POP5:           POP	IX		;RETURN ADDRESS
004FDF D9          1994*                  EXX
004FE0 D1          1995*                  POP	DE
004FE1 D9          1996*                  EXX
004FE2 D1          1997*                  POP	DE
004FE3 79          1998*                  LD	A,C
004FE4 C1          1999*                  POP	BC
004FE5 41          2000*                  LD	B,C
004FE6 4F          2001*                  LD	C,A
004FE7 DD E9       2002*                  JP	(IX)		;"RETURN"
004FE9             2003*  ;
004FE9             2004*  ;RATIO - Calculate (X-1)/(X+1)
004FE9             2005*  ;    Inputs: X in HLH'L'C
004FE9             2006*  ;   Outputs: (X-1)/(X+1) in HLH'L'C
004FE9             2007*  ;  Destroys: Everything except IY,SP,I
004FE9             2008*  ;
004FE9 CD D4 4F    2009*  RATIO:          CALL	PUSH5		;SAVE X
004FEC CD 3C 4A    2010*                  CALL	DONE
004FEF CD 7E 46    2011*                  CALL	FADD
004FF2 CD DD 4F    2012*                  CALL	POP5		;RESTORE X
004FF5 CD D4 4F    2013*                  CALL	PUSH5		;SAVE X+1
004FF8 CD 15 4F    2014*                  CALL	SWAP
004FFB CD 3C 4A    2015*                  CALL	DONE
004FFE CD 68 46    2016*                  CALL	FSUB
005001 CD DD 4F    2017*                  CALL	POP5		;RESTORE X+1
005004 C3 D6 46    2018*                  JP	FDIV
005007             2019*  ;
005007             2020*  ;POLY - Evaluate a polynomial.
005007             2021*  ;    Inputs: X in HLH'L'C and also stored at (SP+2)
005007             2022*  ;            Polynomial coefficients follow call.
005007             2023*  ;   Outputs: Result in HLH'L'C
005007             2024*  ;  Destroys: Everything except IY,SP,I
005007             2025*  ;Routine terminates on finding a coefficient >=1.
005007             2026*  ;Note: The last coefficient is EXECUTED on return
005007             2027*  ;      so must contain only innocuous bytes!
005007             2028*  ;
005007 DD 21 02 00 2029*  POLY:           LD	IX,2
00500B DD 39       2030*                  ADD	IX,SP
00500D DD E3       2031*                  EX	(SP),IX
00500F CD 2A 1A    2032*                  CALL	DLOAD5		;FIRST COEFFICIENT
005012 CD 46 47    2033*  POLY1:          CALL	FMUL
005015 11 05 00    2034*                  LD	DE,5
005018 DD 19       2035*                  ADD	IX,DE
00501A CD 2A 1A    2036*                  CALL	DLOAD5		;NEXT COEFFICIENT
00501D DD E3       2037*                  EX	(SP),IX
00501F 04          2038*                  INC	B
005020 05          2039*                  DEC	B		;TEST
005021 FA 7E 46    2040*                  JP	M,FADD
005024 CD 7E 46    2041*                  CALL	FADD
005027 CD 2A 1A    2042*                  CALL	DLOAD5		;X
00502A DD E3       2043*                  EX	(SP),IX
00502C 18 E4       2044*                  JR	POLY1
00502E             2045*  ;
00502E             2046*  ;POWR10 - Calculate power of ten.
00502E             2047*  ;    Inputs: A=power of 10 required (A<128)
00502E             2048*  ;            A=binary exponent to be exceeded (A>=128)
00502E             2049*  ;   Outputs: DED'E'B = result
00502E             2050*  ;            A = actual power of ten returned
00502E             2051*  ;  Destroys: A,B,D,E,A',D',E',F,F'
00502E             2052*  ;
00502E 3C          2053*  POWR10:         INC	A
00502F 08          2054*                  EX	AF,AF'
005030 E5          2055*                  PUSH	HL
005031 D9          2056*                  EXX
005032 E5          2057*                  PUSH	HL
005033 D9          2058*                  EXX
005034 CD 3C 4A    2059*                  CALL	DONE
005037 CD 15 4F    2060*                  CALL	SWAP
00503A AF          2061*                  XOR	A
00503B 08          2062*  POWR11:         EX	AF,AF'
00503C 3D          2063*                  DEC	A
00503D 28 20       2064*                  JR	Z,POWR14	;EXITmat TYPE 1
00503F F2 46 50    2065*                  JP	P,POWR13
005042 B9          2066*                  CP	C
005043 38 1A       2067*                  JR	C,POWR14	;EXITmat TYPE 2
005045 3C          2068*                  INC	A
005046 08          2069*  POWR13:         EX	AF,AF'
005047 3C          2070*                  INC	A
005048 CB FC       2071*                  SET	7,H
00504A CD 8D 4F    2072*                  CALL	X5
00504D 30 05       2073*                  JR	NC,POWR12
00504F 08          2074*                  EX	AF,AF'
005050 CD BA 4F    2075*                  CALL	D2C
005053 08          2076*                  EX	AF,AF'
005054 08          2077*  POWR12:         EX	AF,AF'
005055 DC 01 4F    2078*                  CALL	C,ADD1		;ROUND UP
005058 0C          2079*                  INC	C
005059 FA 3B 50    2080*                  JP	M,POWR11
00505C C3 2B 4F    2081*                  JP	OFLOW
00505F CD 15 4F    2082*  POWR14:         CALL	SWAP
005062 CB BA       2083*                  RES	7,D
005064 D9          2084*                  EXX
005065 E1          2085*                  POP	HL
005066 D9          2086*                  EXX
005067 E1          2087*                  POP	HL
005068 08          2088*                  EX	AF,AF'
005069 C9          2089*                  RET
00506A             2090*  ;
00506A             2091*  ;DIVA, DIVB - DIVISION PRIMITIVE.
00506A             2092*  ;    Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
00506A             2093*  ;              Remainder in H'L'HL
00506A             2094*  ;    Inputs: A = loop counter (normally -32)
00506A             2095*  ;    Destroys: A,D,E,H,L,D',E',H',L',F
00506A             2096*  ;
00506A B7          2097*  DIVA:           OR	A		;CLEAR CARRY
00506B ED 42       2098*  DIV0:           SBC	HL,BC		;DIVIDEND-DIVISOR
00506D D9          2099*                  EXX
00506E ED 42       2100*                  SBC	HL,BC
005070 D9          2101*                  EXX
005071 30 05       2102*                  JR	NC,DIV1
005073 09          2103*                  ADD	HL,BC		;DIVIDEND+DIVISOR
005074 D9          2104*                  EXX
005075 ED 4A       2105*                  ADC	HL,BC
005077 D9          2106*                  EXX
005078 3F          2107*  DIV1:           CCF
005079 CB 13       2108*  DIVC:           RL	E		;SHIFT RESULT INTO DE
00507B CB 12       2109*                  RL	D
00507D D9          2110*                  EXX
00507E CB 13       2111*                  RL	E
005080 CB 12       2112*                  RL	D
005082 D9          2113*                  EXX
005083 3C          2114*                  INC	A
005084 F0          2115*                  RET	P
005085 ED 6A       2116*  DIVB:           ADC	HL,HL		;DIVIDEND*2
005087 D9          2117*                  EXX
005088 ED 6A       2118*                  ADC	HL,HL
00508A D9          2119*                  EXX
00508B 30 DE       2120*                  JR	NC,DIV0
00508D B7          2121*                  OR	A
00508E ED 42       2122*                  SBC	HL,BC		;DIVIDEND-DIVISOR
005090 D9          2123*                  EXX
005091 ED 42       2124*                  SBC	HL,BC
005093 D9          2125*                  EXX
005094 37          2126*                  SCF
005095 C3 79 50    2127*                  JP	DIVC
005098             2128*  ;
005098             2129*  ;MULA, MULB - MULTIPLICATION PRIMITIVE.
005098             2130*  ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
005098             2131*  ;    Inputs: A = loop counter (usually -32)
005098             2132*  ;            H'L'HL = 0
005098             2133*  ;    Destroys: D,E,H,L,D',E',H',L',A,F
005098             2134*  ;
005098 B7          2135*  MULA:           OR	A		;CLEAR CARRY
005099 D9          2136*  MUL0:           EXX
00509A CB 1A       2137*                  RR	D		;MULTIPLIER/2
00509C CB 1B       2138*                  RR	E
00509E D9          2139*                  EXX
00509F CB 1A       2140*                  RR	D
0050A1 CB 1B       2141*                  RR	E
0050A3 30 05       2142*                  JR	NC,MUL1
0050A5 09          2143*                  ADD	HL,BC		;ADD IN MULTIPLICAND
0050A6 D9          2144*                  EXX
0050A7 ED 4A       2145*                  ADC	HL,BC
0050A9 D9          2146*                  EXX
0050AA 3C          2147*  MUL1:           INC	A
0050AB F0          2148*                  RET	P
0050AC D9          2149*  MULB:           EXX
0050AD CB 1C       2150*                  RR	H		;PRODUCT/2
0050AF CB 1D       2151*                  RR	L
0050B1 D9          2152*                  EXX
0050B2 CB 1C       2153*                  RR	H
0050B4 CB 1D       2154*                  RR	L
0050B6 C3 99 50    2155*                  JP	MUL0
0050B9             2156*  ;
0050B9             2157*  ;SQRA, SQRB - SQUARE ROOT PRIMITIVES
0050B9             2158*  ;    Function: B'C'BC = SQR (D'E'DE)
0050B9             2159*  ;    Inputs: A = loop counter (normally -31)
0050B9             2160*  ;            B'C'BCH'L'HL initialised to 0
0050B9             2161*  ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
0050B9             2162*  ;
0050B9 ED 42       2163*  SQR1:           SBC	HL,BC
0050BB D9          2164*                  EXX
0050BC ED 42       2165*                  SBC	HL,BC
0050BE D9          2166*                  EXX
0050BF 0C          2167*                  INC	C
0050C0 30 07       2168*                  JR	NC,SQR2
0050C2 0D          2169*                  DEC	C
0050C3 09          2170*                  ADD	HL,BC
0050C4 D9          2171*                  EXX
0050C5 ED 4A       2172*                  ADC	HL,BC
0050C7 D9          2173*                  EXX
0050C8 0D          2174*                  DEC	C
0050C9 3C          2175*  SQR2:           INC	A
0050CA F0          2176*                  RET	P
0050CB CB 21       2177*  SQRA:           SLA	C
0050CD CB 10       2178*                  RL	B
0050CF 0C          2179*                  INC	C
0050D0 D9          2180*                  EXX
0050D1 CB 11       2181*                  RL	C
0050D3 CB 10       2182*                  RL	B
0050D5 CD 01 51    2183*                  CALL	SLA8
0050D8 CD 01 51    2184*                  CALL	SLA8
0050DB D9          2185*                  EXX
0050DC D2 B9 50    2186*                  JP	NC,SQR1
0050DF B7          2187*  SQR3:           OR	A
0050E0 ED 42       2188*                  SBC	HL,BC
0050E2 D9          2189*                  EXX
0050E3 ED 42       2190*                  SBC	HL,BC
0050E5 D9          2191*                  EXX
0050E6 0C          2192*                  INC	C
0050E7 C3 C9 50    2193*                  JP	SQR2
0050EA             2194*  ;
0050EA 29          2195*  SQRB:           ADD	HL,HL
0050EB D9          2196*                  EXX
0050EC ED 6A       2197*                  ADC	HL,HL
0050EE D9          2198*                  EXX
0050EF 38 EE       2199*                  JR	C,SQR3
0050F1 3C          2200*                  INC	A
0050F2 0C          2201*                  INC	C
0050F3 ED 42       2202*                  SBC	HL,BC
0050F5 D9          2203*                  EXX
0050F6 ED 42       2204*                  SBC	HL,BC
0050F8 D9          2205*                  EXX
0050F9 D0          2206*                  RET	NC
0050FA 09          2207*                  ADD	HL,BC
0050FB D9          2208*                  EXX
0050FC ED 4A       2209*                  ADC	HL,BC
0050FE D9          2210*                  EXX
0050FF 0D          2211*                  DEC	C
005100 C9          2212*                  RET
005101             2213*  ;
005101 D9          2214*  SLA8:           EXX
005102 CB 23       2215*                  SLA	E
005104 CB 12       2216*                  RL	D
005106 D9          2217*                  EXX
005107 CB 13       2218*                  RL	E
005109 CB 12       2219*                  RL	D
00510B D9          2220*                  EXX
00510C ED 6A       2221*                  ADC	HL,HL
00510E D9          2222*                  EXX
00510F ED 6A       2223*                  ADC	HL,HL
005111 C9          2224*                  RET
005112             2225*  ;
005112 DD 7E 00    2226*  DIGITQ:         LD	A,(IX)
005115 FE 3A       2227*                  CP	'9'+1
005117 3F          2228*                  CCF
005118 D8          2229*                  RET	C
005119 FE 30       2230*                  CP	'0'
00511B C9          2231*                  RET
00511C             2232*  ;
00511C DD 7E 00    2233*  SIGNQ:          LD	A,(IX)
00511F DD 23       2234*                  INC	IX
005121 FE 20       2235*                  CP	' '
005123 28 F7       2236*                  JR	Z,SIGNQ
005125 FE 2B       2237*                  CP	'+'
005127 C8          2238*                  RET	Z
005128 FE 2D       2239*                  CP	'-'
00512A C8          2240*                  RET	Z
00512B DD 2B       2241*                  DEC	IX
00512D C9          2242*                  RET
00512E             2243*  ;
00512E 08          2244*  ABS2:           EX	AF,AF'
00512F CB 7C       2245*                  BIT	7,H
005131 C4 3F 4E    2246*                  CALL	NZ,NEGATE	;MAKE ARGUMENTS +VE
005134 CD 15 4F    2247*                  CALL	SWAP
005137 CB 7C       2248*                  BIT	7,H
005139 C4 3F 4E    2249*                  CALL	NZ,NEGATE
00513C 44          2250*                  LD	B,H
00513D 4D          2251*                  LD	C,L
00513E 21 00 00    2252*                  LD	HL,0
005141 D9          2253*                  EXX
005142 44          2254*                  LD	B,H
005143 4D          2255*                  LD	C,L
005144 21 00 00    2256*                  LD	HL,0
005147 C9          2257*                  RET
005148             2258*  ;
005148             2259*  ;                END
005148             2260*  ;    include "math.inc"
005148             0020       include "data.asm"
005148             0001*  ;
005148             0002*  ;Automatically created from original source on 2024-12-15 15:29:12
005148             0003*  ;
005148             0004*                  .ASSUME ADL = 0
005148             0005*  ;	.ORG 0x0000
005148             0006*  ;                DEFINE LORAM, SPACE = ROM
005148             0007*  ;                SEGMENT LORAM
005148             0008*  ;
005148             0009*  ;                XDEF	FLAGS
005148             0010*  ;                XDEF	OSWRCHPT
005148             0011*  ;                XDEF	OSWRCHCH
005148             0012*  ;                XDEF	OSWRCHFH
005148             0013*  ;                XDEF	KEYDOWN
005148             0014*  ;                XDEF	KEYASCII
005148             0015*  ;                XDEF	KEYCOUNT
005148             0016*  ;                XDEF	SCRAP
005148             0017*  ;                XDEF	BUFFER
005148             0018*  ;                XDEF	LISTON
005148             0019*  ;                XDEF	PAGE_
005148             0020*  ;
005148             0021*  FLAGS:          DS	1
005149             0022*  OSWRCHPT:       DS	2
00514B             0023*  OSWRCHCH:       DS	1
00514C             0024*  OSWRCHFH:       DS	1
00514D             0025*  KEYDOWN:        DS	1
00514E             0026*  KEYASCII:       DS	1
00514F             0027*  KEYCOUNT:       DS	1
005150             0028*  SCRAP:          DS	31
00516F             0029*  ;
00516F FF FF FF FF 0030*                  ALIGN 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
005200             0031*  ;
005200             0032*  ;RAM MODULE FOR BBC BASIC INTERPRETER
005200             0033*  ;FOR USE WITH VERSION 5.0 OF BBC BASIC
005200             0034*  ;(C) COPYRIGHT R.T.RUSSELL 1981-2024
005200             0035*  ;
005200             0036*  ;                XDEF	ACCS
005200             0037*  ;                XDEF	BUFFER
005200             0038*  ;                XDEF	ONERSP
005200             0039*  ;                XDEF	LIBASE
005200             0040*  ;                XDEF	PAGE_
005200             0041*  ;                XDEF	LOMEM
005200             0042*  ;                XDEF	FREE
005200             0043*  ;                XDEF	HIMEM
005200             0044*  ;                XDEF	RANDOM
005200             0045*  ;                XDEF	COUNT
005200             0046*  ;                XDEF	WIDTH
005200             0047*  ;                XDEF	ERL
005200             0048*  ;                XDEF	ERR
005200             0049*  ;                XDEF	ERRTRP
005200             0050*  ;                XDEF	ERRTXT
005200             0051*  ;                XDEF	TRACEN
005200             0052*  ;                XDEF	AUTONO
005200             0053*  ;                XDEF	INCREM
005200             0054*  ;                XDEF	LISTON
005200             0055*  ;                XDEF	DATPTR
005200             0056*  ;                XDEF	FNPTR
005200             0057*  ;                XDEF	PROPTR
005200             0058*  ;                XDEF	STAVAR
005200             0059*  ;                XDEF	OC
005200             0060*  ;                XDEF	PC
005200             0061*  ;                XDEF	DYNVAR
005200             0062*  ;                XDEF	CURLIN
005200             0063*  ;                XDEF	USER
005200             0064*  ;
005200             0065*  ;n.b. ACCS, BUFFER & STAVAR must be on page boundaries.
005200             0066*  ;
005200             0067*  ACCS:           DS	256		;STRING ACCUMULATOR
005300             0068*  BUFFER:         DS	256		;STRING INPUT BUFFER
005400             0069*  STAVAR:         DS	27*4		;STATIC VARIABLES
00546C             0070*  ; OC:             EQU	STAVAR+15*4	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             0071*  ; PC:             EQU	STAVAR+16*4	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             0072*  OC:             EQU	15*4+STAVAR	;CODE ORIGIN (O%)	; restored from equs.inc
00546C             0073*  PC:             EQU	16*4+STAVAR	;PROGRAM COUNTER (P%)	; restored from equs.inc
00546C             0074*  DYNVAR:         DS	54*2		;DYN. VARIABLE POINTERS
0054D8             0075*  FNPTR:          DS	2		;DYN. FUNCTION POINTER
0054DA             0076*  PROPTR:         DS	2		;DYN. PROCEDURE POINTER
0054DC             0077*  ;
0054DC             0078*  PAGE_:          DS	2		;START OF USER PROGRAM
0054DE             0079*  LOMEM:          DS	2		;START OF DYN. STORAGE
0054E0             0080*  FREE:           DS	2		;FIRST FREE-SPACE BYTE
0054E2             0081*  HIMEM:          DS	2		;FIRST BYTE ABOVE STACK
0054E4             0082*  LIBASE:         DS	2		;START OF FIRST LIBRARY
0054E6             0083*  ;
0054E6             0084*  TRACEN:         DS	2		;TRACE FLAG & NUMBER
0054E8             0085*  AUTONO:         DS	2		;AUTO FLAG & NUMBER
0054EA             0086*  ERRTRP:         DS	2		;ON ERROR STMT POINTER \
0054EC             0087*  ONERSP:         DS	2		;ON ERROR LOCAL STKPTR /
0054EE             0088*  ERRTXT:         DS	2		;ERROR MESSAGE POINTER
0054F0             0089*  DATPTR:         DS	2		;DATA POINTER
0054F2             0090*  ERL:            DS	2		;LINE NO OF LAST ERROR
0054F4             0091*  CURLIN:         DS	2		;POINTER TO CURRENT LINE
0054F6             0092*  RANDOM:         DS	5		;RANDOM NUMBER
0054FB             0093*  COUNT:          DS	1		;PRINT POSITION
0054FC             0094*  WIDTH:          DS	1		;PRINT WIDTH
0054FD             0095*  ERR:            DS	1		;ERROR NUMBER
0054FE             0096*  LISTON:         DS	1		;LISTO & OPT FLAG
0054FF             0097*  INCREM:         DS	1		;AUTO INCREMENT
005500             0098*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands ; originally in equs.inc
005500             0099*  ;
005500             0100*  USER:           ; END
005500             0101*  ;    include "data.inc"
